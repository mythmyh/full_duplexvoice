
i2s3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000770c0  080100d4  080100d4  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08087194  08087194  000a00a8  2**0
                  CONTENTS
  4 .ARM          00000008  08087194  08087194  00097194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0808719c  0808719c  000a00a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0808719c  0808719c  0009719c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080871a0  080871a0  000971a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080871a4  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000a00a8  2**0
                  CONTENTS
 10 .bss          00007ad4  200000a8  200000a8  000a00a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20007b7c  20007b7c  000a00a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000a00a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e30e  00000000  00000000  000a00d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a30  00000000  00000000  000ce3e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c0  00000000  00000000  000d3e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014f0  00000000  00000000  000d54d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b6e  00000000  00000000  000d69c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023958  00000000  00000000  000fe536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cecbd  00000000  00000000  00121e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001f0b4b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065e4  00000000  00000000  001f0ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080100bc 	.word	0x080100bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	080100bc 	.word	0x080100bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <WM8978_Register_Wirter>:
//	return HAL_I2C_Master_Transmit(&USEI2C, WM8978_WIRTE_ADDRESS, pData, 2,
//			1000);
//}

HAL_StatusTypeDef WM8978_Register_Wirter(I2C_HandleTypeDef *hi2c,uint8_t reg_addr, uint16_t data)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af02      	add	r7, sp, #8
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	460b      	mov	r3, r1
 8000572:	70fb      	strb	r3, [r7, #3]
 8000574:	4613      	mov	r3, r2
 8000576:	803b      	strh	r3, [r7, #0]
	uint8_t pData[10] =	{ 0 };
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	809a      	strh	r2, [r3, #4]

	pData[0] = (reg_addr << 1) | ((data >> 8) & 0x01);
 8000586:	78fb      	ldrb	r3, [r7, #3]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	b25a      	sxtb	r2, r3
 800058c:	883b      	ldrh	r3, [r7, #0]
 800058e:	0a1b      	lsrs	r3, r3, #8
 8000590:	b29b      	uxth	r3, r3
 8000592:	b25b      	sxtb	r3, r3
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	b25b      	sxtb	r3, r3
 800059a:	4313      	orrs	r3, r2
 800059c:	b25b      	sxtb	r3, r3
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	733b      	strb	r3, [r7, #12]
	pData[1] = data & 0xFF;
 80005a2:	883b      	ldrh	r3, [r7, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	737b      	strb	r3, [r7, #13]
	//WM8978_REGVAL_TBL[reg_addr]=data;	//卤拢麓忙录脛麓忙脝梅脰碌碌陆卤戮碌脴

	return HAL_I2C_Master_Transmit(hi2c,WM8978_WIRTE_ADDRESS, pData, 2, 1000);
 80005a8:	f107 020c 	add.w	r2, r7, #12
 80005ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2302      	movs	r3, #2
 80005b4:	2134      	movs	r1, #52	; 0x34
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f005 f802 	bl	80055c0 <HAL_I2C_Master_Transmit>
 80005bc:	4603      	mov	r3, r0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3718      	adds	r7, #24
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <WAV_FileInit>:




void WAV_FileInit(void) {
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	DataLength = sizeof(data) - 0x2c;
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <WAV_FileInit+0x1c>)
 80005ce:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <WAV_FileInit+0x20>)
 80005d0:	601a      	str	r2, [r3, #0]
	DataAddress = (uint8_t*) (data + 0x2c);
 80005d2:	4a06      	ldr	r2, [pc, #24]	; (80005ec <WAV_FileInit+0x24>)
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <WAV_FileInit+0x28>)
 80005d6:	601a      	str	r2, [r3, #0]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200020c4 	.word	0x200020c4
 80005e8:	00076926 	.word	0x00076926
 80005ec:	080107a0 	.word	0x080107a0
 80005f0:	200020c8 	.word	0x200020c8

080005f4 <WAV_FileRead2>:
uint32_t WAV_FileRead2(uint8_t *buf, uint32_t size) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
	bw = 0;
 80005fe:	4b19      	ldr	r3, [pc, #100]	; (8000664 <WAV_FileRead2+0x70>)
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
	f_read(&file, buf, size, (void*)&bw); //16bit音频,直接读取数据
 8000604:	4b17      	ldr	r3, [pc, #92]	; (8000664 <WAV_FileRead2+0x70>)
 8000606:	683a      	ldr	r2, [r7, #0]
 8000608:	6879      	ldr	r1, [r7, #4]
 800060a:	4817      	ldr	r0, [pc, #92]	; (8000668 <WAV_FileRead2+0x74>)
 800060c:	f00d fdb8 	bl	800e180 <f_read>
	//printf("aaaa %d\n",bw);

	if (bw < BUFFER_SIZE) //不够数据了,补充0
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <WAV_FileRead2+0x70>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000618:	d21e      	bcs.n	8000658 <WAV_FileRead2+0x64>
	{
		for (i = bw; i < BUFFER_SIZE - bw; i++)
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <WAV_FileRead2+0x70>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	461a      	mov	r2, r3
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <WAV_FileRead2+0x78>)
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	e00b      	b.n	800063e <WAV_FileRead2+0x4a>
			buf[i] = 0;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <WAV_FileRead2+0x78>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	461a      	mov	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4413      	add	r3, r2
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
		for (i = bw; i < BUFFER_SIZE - bw; i++)
 8000634:	4b0d      	ldr	r3, [pc, #52]	; (800066c <WAV_FileRead2+0x78>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	4a0c      	ldr	r2, [pc, #48]	; (800066c <WAV_FileRead2+0x78>)
 800063c:	6013      	str	r3, [r2, #0]
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <WAV_FileRead2+0x70>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000646:	4a09      	ldr	r2, [pc, #36]	; (800066c <WAV_FileRead2+0x78>)
 8000648:	6812      	ldr	r2, [r2, #0]
 800064a:	4293      	cmp	r3, r2
 800064c:	d8eb      	bhi.n	8000626 <WAV_FileRead2+0x32>

		f_close(&file);
 800064e:	4806      	ldr	r0, [pc, #24]	; (8000668 <WAV_FileRead2+0x74>)
 8000650:	f00d ff73 	bl	800e53a <f_close>

		return 0;
 8000654:	2300      	movs	r3, #0
 8000656:	e000      	b.n	800065a <WAV_FileRead2+0x66>

	}
	return 1;
 8000658:	2301      	movs	r3, #1
}
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20003174 	.word	0x20003174
 8000668:	200042fc 	.word	0x200042fc
 800066c:	2000316c 	.word	0x2000316c

08000670 <WAV_FileRead3>:


uint32_t WAV_FileRead3(uint8_t *buf, uint32_t size) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
	bw2 = 0;
 800067a:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <WAV_FileRead3+0x88>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
	res2=f_read(&file2, buf, size, (void*)&bw2); //16bit音频,直接读取数据
 8000680:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <WAV_FileRead3+0x88>)
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	481d      	ldr	r0, [pc, #116]	; (80006fc <WAV_FileRead3+0x8c>)
 8000688:	f00d fd7a 	bl	800e180 <f_read>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <WAV_FileRead3+0x90>)
 8000692:	701a      	strb	r2, [r3, #0]
	printf("aaaa %d %d\n",res2,bw2);
 8000694:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <WAV_FileRead3+0x90>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	4619      	mov	r1, r3
 800069a:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <WAV_FileRead3+0x88>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	4818      	ldr	r0, [pc, #96]	; (8000704 <WAV_FileRead3+0x94>)
 80006a2:	f00e fe01 	bl	800f2a8 <iprintf>

	if (bw2 < BUFFER_SIZE) //不够数据了,补充0
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <WAV_FileRead3+0x88>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006ae:	d21e      	bcs.n	80006ee <WAV_FileRead3+0x7e>
	{
		for (i = bw; i < BUFFER_SIZE - bw2; i++)
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <WAV_FileRead3+0x98>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <WAV_FileRead3+0x9c>)
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	e00b      	b.n	80006d4 <WAV_FileRead3+0x64>
			buf[i] = 0;
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <WAV_FileRead3+0x9c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
		for (i = bw; i < BUFFER_SIZE - bw2; i++)
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <WAV_FileRead3+0x9c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	3301      	adds	r3, #1
 80006d0:	4a0e      	ldr	r2, [pc, #56]	; (800070c <WAV_FileRead3+0x9c>)
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <WAV_FileRead3+0x88>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80006dc:	4a0b      	ldr	r2, [pc, #44]	; (800070c <WAV_FileRead3+0x9c>)
 80006de:	6812      	ldr	r2, [r2, #0]
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d8eb      	bhi.n	80006bc <WAV_FileRead3+0x4c>

		f_close(&file2);
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <WAV_FileRead3+0x8c>)
 80006e6:	f00d ff28 	bl	800e53a <f_close>

		return 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	e000      	b.n	80006f0 <WAV_FileRead3+0x80>

	}
	return 1;
 80006ee:	2301      	movs	r3, #1
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20003170 	.word	0x20003170
 80006fc:	20003178 	.word	0x20003178
 8000700:	20003148 	.word	0x20003148
 8000704:	080100d4 	.word	0x080100d4
 8000708:	20003174 	.word	0x20003174
 800070c:	2000316c 	.word	0x2000316c

08000710 <DMAEx_XferCpltCallback2>:
	return Playing_End;
}



static void DMAEx_XferCpltCallback2(struct __DMA_HandleTypeDef *hdma) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	//if (DMA1_Stream3->CR & (1 << 19)) {
	//if(DMA1_Stream4->CR&(1<<19)){
	//printf("aaaa\n");
	if (WAV_FileRead3((uint8_t*) I2S_Buf2, sizeof(I2S_Buf2)) == 0) {
 8000718:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <DMAEx_XferCpltCallback2+0x24>)
 800071e:	f7ff ffa7 	bl	8000670 <WAV_FileRead3>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d101      	bne.n	800072c <DMAEx_XferCpltCallback2+0x1c>
		Audio_Player_Stop();
 8000728:	f000 fa34 	bl	8000b94 <Audio_Player_Stop>
	}

	//}

}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200010c4 	.word	0x200010c4

08000738 <DMAEx_XferM1CpltCallback2>:

static void DMAEx_XferM1CpltCallback2(struct __DMA_HandleTypeDef *hdma) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

	if (WAV_FileRead3((uint8_t*) I2S_Buf3, sizeof(I2S_Buf3)) == 0) {
 8000740:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000744:	4805      	ldr	r0, [pc, #20]	; (800075c <DMAEx_XferM1CpltCallback2+0x24>)
 8000746:	f7ff ff93 	bl	8000670 <WAV_FileRead3>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d101      	bne.n	8000754 <DMAEx_XferM1CpltCallback2+0x1c>
		Audio_Player_Stop();
 8000750:	f000 fa20 	bl	8000b94 <Audio_Player_Stop>
	}

}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200018c4 	.word	0x200018c4

08000760 <HAL_I2S_Transmit_DMAEx>:




HAL_StatusTypeDef HAL_I2S_Transmit_DMAEx(I2S_HandleTypeDef *hi2s,
		uint16_t *FirstBuffer, uint16_t *SecondBuffer, uint16_t Size) {
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b089      	sub	sp, #36	; 0x24
 8000764:	af02      	add	r7, sp, #8
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
 800076c:	807b      	strh	r3, [r7, #2]
	uint32_t tmpreg_cfgr;
	if ((FirstBuffer == NULL) || (SecondBuffer == NULL) || (Size == 0U)) {
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d005      	beq.n	8000780 <HAL_I2S_Transmit_DMAEx+0x20>
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d002      	beq.n	8000780 <HAL_I2S_Transmit_DMAEx+0x20>
 800077a:	887b      	ldrh	r3, [r7, #2]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <HAL_I2S_Transmit_DMAEx+0x24>
		return HAL_ERROR;
 8000780:	2301      	movs	r3, #1
 8000782:	e09c      	b.n	80008be <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Process Locked */
	__HAL_LOCK(hi2s);
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b01      	cmp	r3, #1
 800078e:	d101      	bne.n	8000794 <HAL_I2S_Transmit_DMAEx+0x34>
 8000790:	2302      	movs	r3, #2
 8000792:	e094      	b.n	80008be <HAL_I2S_Transmit_DMAEx+0x15e>
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	2201      	movs	r2, #1
 8000798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (hi2s->State != HAL_I2S_STATE_READY) {
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d005      	beq.n	80007b4 <HAL_I2S_Transmit_DMAEx+0x54>
		__HAL_UNLOCK(hi2s);
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	2200      	movs	r2, #0
 80007ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_BUSY;
 80007b0:	2302      	movs	r3, #2
 80007b2:	e084      	b.n	80008be <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Set state and reset error code */
	hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	2203      	movs	r2, #3
 80007b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2200      	movs	r2, #0
 80007c0:	645a      	str	r2, [r3, #68]	; 0x44
	hi2s->pTxBuffPtr = FirstBuffer;
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	68ba      	ldr	r2, [r7, #8]
 80007c6:	625a      	str	r2, [r3, #36]	; 0x24

	tmpreg_cfgr = hi2s->Instance->I2SCFGR
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	617b      	str	r3, [r7, #20]
			& (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);

	if ((tmpreg_cfgr == I2S_DATAFORMAT_24B)
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	d002      	beq.n	80007e0 <HAL_I2S_Transmit_DMAEx+0x80>
			|| (tmpreg_cfgr == I2S_DATAFORMAT_32B)) {
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	2b05      	cmp	r3, #5
 80007de:	d10a      	bne.n	80007f6 <HAL_I2S_Transmit_DMAEx+0x96>
		hi2s->TxXferSize = (Size << 1U);
 80007e0:	887b      	ldrh	r3, [r7, #2]
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = (Size << 1U);
 80007ea:	887b      	ldrh	r3, [r7, #2]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80007f4:	e005      	b.n	8000802 <HAL_I2S_Transmit_DMAEx+0xa2>
	} else {
		hi2s->TxXferSize = Size;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	887a      	ldrh	r2, [r7, #2]
 80007fa:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = Size;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	887a      	ldrh	r2, [r7, #2]
 8000800:	855a      	strh	r2, [r3, #42]	; 0x2a
	}

	/* Set the I2S Tx DMA Half transfer complete callback */
	hi2s->hdmatx->XferHalfCpltCallback = NULL;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000806:	2200      	movs	r2, #0
 8000808:	641a      	str	r2, [r3, #64]	; 0x40
	hi2s->hdmatx->XferM1HalfCpltCallback = NULL;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800080e:	2200      	movs	r2, #0
 8000810:	649a      	str	r2, [r3, #72]	; 0x48

	/* Set the I2S Tx DMA transfer complete callback */
	hi2s->hdmatx->XferCpltCallback = DMAEx_XferCpltCallback;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000816:	4a2c      	ldr	r2, [pc, #176]	; (80008c8 <HAL_I2S_Transmit_DMAEx+0x168>)
 8000818:	63da      	str	r2, [r3, #60]	; 0x3c
	hi2s->hdmatx->XferM1CpltCallback = DMAEx_XferM1CpltCallback;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800081e:	4a2b      	ldr	r2, [pc, #172]	; (80008cc <HAL_I2S_Transmit_DMAEx+0x16c>)
 8000820:	645a      	str	r2, [r3, #68]	; 0x44

	/* Set the DMA error callback */
	hi2s->hdmatx->XferErrorCallback = DMAEx_XferErrorCallback;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000826:	4a2a      	ldr	r2, [pc, #168]	; (80008d0 <HAL_I2S_Transmit_DMAEx+0x170>)
 8000828:	64da      	str	r2, [r3, #76]	; 0x4c

	/* Set the DMA abort callback */
	hi2s->hdmatx->XferAbortCallback = NULL;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800082e:	2200      	movs	r2, #0
 8000830:	651a      	str	r2, [r3, #80]	; 0x50

	/* Enable the Tx DMA Stream/Channel */
	if (HAL_OK
			!= HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx,
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000836:	68b9      	ldr	r1, [r7, #8]
					(uint32_t) FirstBuffer, (uint32_t) &hi2s->Instance->DR,
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	330c      	adds	r3, #12
			!= HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx,
 800083e:	461c      	mov	r4, r3
 8000840:	687a      	ldr	r2, [r7, #4]
					(uint32_t) SecondBuffer, hi2s->TxXferSize)) {
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000846:	b29b      	uxth	r3, r3
			!= HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx,
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	4613      	mov	r3, r2
 800084c:	4622      	mov	r2, r4
 800084e:	f001 fcf9 	bl	8002244 <HAL_DMAEx_MultiBufferStart_IT>
 8000852:	4603      	mov	r3, r0
	if (HAL_OK
 8000854:	2b00      	cmp	r3, #0
 8000856:	d00f      	beq.n	8000878 <HAL_I2S_Transmit_DMAEx+0x118>
		/* Update SPI error code */
		SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085c:	f043 0208 	orr.w	r2, r3, #8
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	645a      	str	r2, [r3, #68]	; 0x44
		hi2s->State = HAL_I2S_STATE_READY;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2201      	movs	r2, #1
 8000868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		__HAL_UNLOCK(hi2s);
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2200      	movs	r2, #0
 8000870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_ERROR;
 8000874:	2301      	movs	r3, #1
 8000876:	e022      	b.n	80008be <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Check if the I2S is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE)) {
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000882:	2b00      	cmp	r3, #0
 8000884:	d107      	bne.n	8000896 <HAL_I2S_Transmit_DMAEx+0x136>
		/* Enable I2S peripheral */
		__HAL_I2S_ENABLE(hi2s);
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	69da      	ldr	r2, [r3, #28]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000894:	61da      	str	r2, [r3, #28]
	}

	/* Check if the I2S Tx request is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN)) {
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f003 0302 	and.w	r3, r3, #2
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d107      	bne.n	80008b4 <HAL_I2S_Transmit_DMAEx+0x154>
		/* Enable Tx DMA Request */
		SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	685a      	ldr	r2, [r3, #4]
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f042 0202 	orr.w	r2, r2, #2
 80008b2:	605a      	str	r2, [r3, #4]
	}

	__HAL_UNLOCK(hi2s);
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	2200      	movs	r2, #0
 80008b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	return HAL_OK;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	371c      	adds	r7, #28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd90      	pop	{r4, r7, pc}
 80008c6:	bf00      	nop
 80008c8:	08000a49 	.word	0x08000a49
 80008cc:	08000a71 	.word	0x08000a71
 80008d0:	08000a99 	.word	0x08000a99

080008d4 <HAL_I2S_Transmit_DMAEx2>:

HAL_StatusTypeDef HAL_I2S_Transmit_DMAEx2(I2S_HandleTypeDef *hi2s,
		uint16_t *FirstBuffer, uint16_t *SecondBuffer, uint16_t Size) {
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b089      	sub	sp, #36	; 0x24
 80008d8:	af02      	add	r7, sp, #8
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
 80008e0:	807b      	strh	r3, [r7, #2]
	uint32_t tmpreg_cfgr;
	if ((FirstBuffer == NULL) || (SecondBuffer == NULL) || (Size == 0U)) {
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d005      	beq.n	80008f4 <HAL_I2S_Transmit_DMAEx2+0x20>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d002      	beq.n	80008f4 <HAL_I2S_Transmit_DMAEx2+0x20>
 80008ee:	887b      	ldrh	r3, [r7, #2]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d101      	bne.n	80008f8 <HAL_I2S_Transmit_DMAEx2+0x24>
		return HAL_ERROR;
 80008f4:	2301      	movs	r3, #1
 80008f6:	e09c      	b.n	8000a32 <HAL_I2S_Transmit_DMAEx2+0x15e>
	}

	/* Process Locked */
	__HAL_LOCK(hi2s);
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b01      	cmp	r3, #1
 8000902:	d101      	bne.n	8000908 <HAL_I2S_Transmit_DMAEx2+0x34>
 8000904:	2302      	movs	r3, #2
 8000906:	e094      	b.n	8000a32 <HAL_I2S_Transmit_DMAEx2+0x15e>
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2201      	movs	r2, #1
 800090c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (hi2s->State != HAL_I2S_STATE_READY) {
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b01      	cmp	r3, #1
 800091a:	d005      	beq.n	8000928 <HAL_I2S_Transmit_DMAEx2+0x54>
		__HAL_UNLOCK(hi2s);
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2200      	movs	r2, #0
 8000920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_BUSY;
 8000924:	2302      	movs	r3, #2
 8000926:	e084      	b.n	8000a32 <HAL_I2S_Transmit_DMAEx2+0x15e>
	}

	/* Set state and reset error code */
	hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	2203      	movs	r2, #3
 800092c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2200      	movs	r2, #0
 8000934:	645a      	str	r2, [r3, #68]	; 0x44
	hi2s->pTxBuffPtr = FirstBuffer;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	68ba      	ldr	r2, [r7, #8]
 800093a:	625a      	str	r2, [r3, #36]	; 0x24

	tmpreg_cfgr = hi2s->Instance->I2SCFGR
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	617b      	str	r3, [r7, #20]
			& (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);

	if ((tmpreg_cfgr == I2S_DATAFORMAT_24B)
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	2b03      	cmp	r3, #3
 800094c:	d002      	beq.n	8000954 <HAL_I2S_Transmit_DMAEx2+0x80>
			|| (tmpreg_cfgr == I2S_DATAFORMAT_32B)) {
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	2b05      	cmp	r3, #5
 8000952:	d10a      	bne.n	800096a <HAL_I2S_Transmit_DMAEx2+0x96>
		hi2s->TxXferSize = (Size << 1U);
 8000954:	887b      	ldrh	r3, [r7, #2]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	b29a      	uxth	r2, r3
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = (Size << 1U);
 800095e:	887b      	ldrh	r3, [r7, #2]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	b29a      	uxth	r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000968:	e005      	b.n	8000976 <HAL_I2S_Transmit_DMAEx2+0xa2>
	} else {
		hi2s->TxXferSize = Size;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	887a      	ldrh	r2, [r7, #2]
 800096e:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = Size;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	887a      	ldrh	r2, [r7, #2]
 8000974:	855a      	strh	r2, [r3, #42]	; 0x2a
	}

	/* Set the I2S Tx DMA Half transfer complete callback */
	hi2s->hdmatx->XferHalfCpltCallback = NULL;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800097a:	2200      	movs	r2, #0
 800097c:	641a      	str	r2, [r3, #64]	; 0x40
	hi2s->hdmatx->XferM1HalfCpltCallback = NULL;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000982:	2200      	movs	r2, #0
 8000984:	649a      	str	r2, [r3, #72]	; 0x48

	/* Set the I2S Tx DMA transfer complete callback */
	hi2s->hdmatx->XferCpltCallback = DMAEx_XferCpltCallback2;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800098a:	4a2c      	ldr	r2, [pc, #176]	; (8000a3c <HAL_I2S_Transmit_DMAEx2+0x168>)
 800098c:	63da      	str	r2, [r3, #60]	; 0x3c
	hi2s->hdmatx->XferM1CpltCallback = DMAEx_XferM1CpltCallback2;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000992:	4a2b      	ldr	r2, [pc, #172]	; (8000a40 <HAL_I2S_Transmit_DMAEx2+0x16c>)
 8000994:	645a      	str	r2, [r3, #68]	; 0x44

	/* Set the DMA error callback */
	hi2s->hdmatx->XferErrorCallback = DMAEx_XferErrorCallback;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800099a:	4a2a      	ldr	r2, [pc, #168]	; (8000a44 <HAL_I2S_Transmit_DMAEx2+0x170>)
 800099c:	64da      	str	r2, [r3, #76]	; 0x4c

	/* Set the DMA abort callback */
	hi2s->hdmatx->XferAbortCallback = NULL;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009a2:	2200      	movs	r2, #0
 80009a4:	651a      	str	r2, [r3, #80]	; 0x50

	/* Enable the Tx DMA Stream/Channel */
	if (HAL_OK
			!= HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx,
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80009aa:	68b9      	ldr	r1, [r7, #8]
					(uint32_t) FirstBuffer, (uint32_t) &hi2s->Instance->DR,
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	330c      	adds	r3, #12
			!= HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx,
 80009b2:	461c      	mov	r4, r3
 80009b4:	687a      	ldr	r2, [r7, #4]
					(uint32_t) SecondBuffer, hi2s->TxXferSize)) {
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80009ba:	b29b      	uxth	r3, r3
			!= HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx,
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	4613      	mov	r3, r2
 80009c0:	4622      	mov	r2, r4
 80009c2:	f001 fc3f 	bl	8002244 <HAL_DMAEx_MultiBufferStart_IT>
 80009c6:	4603      	mov	r3, r0
	if (HAL_OK
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d00f      	beq.n	80009ec <HAL_I2S_Transmit_DMAEx2+0x118>
		/* Update SPI error code */
		SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d0:	f043 0208 	orr.w	r2, r3, #8
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	645a      	str	r2, [r3, #68]	; 0x44
		hi2s->State = HAL_I2S_STATE_READY;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	2201      	movs	r2, #1
 80009dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		__HAL_UNLOCK(hi2s);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2200      	movs	r2, #0
 80009e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	e022      	b.n	8000a32 <HAL_I2S_Transmit_DMAEx2+0x15e>
	}

	/* Check if the I2S is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE)) {
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d107      	bne.n	8000a0a <HAL_I2S_Transmit_DMAEx2+0x136>
		/* Enable I2S peripheral */
		__HAL_I2S_ENABLE(hi2s);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	69da      	ldr	r2, [r3, #28]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a08:	61da      	str	r2, [r3, #28]
	}

	/* Check if the I2S Tx request is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN)) {
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f003 0302 	and.w	r3, r3, #2
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d107      	bne.n	8000a28 <HAL_I2S_Transmit_DMAEx2+0x154>
		/* Enable Tx DMA Request */
		SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	685a      	ldr	r2, [r3, #4]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f042 0202 	orr.w	r2, r2, #2
 8000a26:	605a      	str	r2, [r3, #4]
	}

	__HAL_UNLOCK(hi2s);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	return HAL_OK;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	371c      	adds	r7, #28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd90      	pop	{r4, r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	08000711 	.word	0x08000711
 8000a40:	08000739 	.word	0x08000739
 8000a44:	08000a99 	.word	0x08000a99

08000a48 <DMAEx_XferCpltCallback>:





static void DMAEx_XferCpltCallback(struct __DMA_HandleTypeDef *hdma) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	//if (DMA1_Stream3->CR & (1 << 19)) {
	//if(DMA1_Stream4->CR&(1<<19)){
	if (WAV_FileRead2((uint8_t*) I2S_Buf0, sizeof(I2S_Buf0)) == 0) {
 8000a50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <DMAEx_XferCpltCallback+0x24>)
 8000a56:	f7ff fdcd 	bl	80005f4 <WAV_FileRead2>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d101      	bne.n	8000a64 <DMAEx_XferCpltCallback+0x1c>
		Audio_Player_Stop();
 8000a60:	f000 f898 	bl	8000b94 <Audio_Player_Stop>
	}

	//}

}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200000c4 	.word	0x200000c4

08000a70 <DMAEx_XferM1CpltCallback>:

static void DMAEx_XferM1CpltCallback(struct __DMA_HandleTypeDef *hdma) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

	if (WAV_FileRead2((uint8_t*) I2S_Buf1, sizeof(I2S_Buf1)) == 0) {
 8000a78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <DMAEx_XferM1CpltCallback+0x24>)
 8000a7e:	f7ff fdb9 	bl	80005f4 <WAV_FileRead2>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d101      	bne.n	8000a8c <DMAEx_XferM1CpltCallback+0x1c>
		Audio_Player_Stop();
 8000a88:	f000 f884 	bl	8000b94 <Audio_Player_Stop>
	}

}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200008c4 	.word	0x200008c4

08000a98 <DMAEx_XferErrorCallback>:

static void DMAEx_XferErrorCallback(struct __DMA_HandleTypeDef *hdma) {
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]

}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <Audio_Player_Init>:

void Audio_Player_Init(I2C_HandleTypeDef*hi2c) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]

	WM8978_Register_Wirter(hi2c,0, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff fd55 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,1,0X1B);	//R1,MICEN脡猫脰脙脦陋1(MIC脢鹿脛脺),BIASEN脡猫脰脙脦陋1(脛拢脛芒脝梅鹿陇脳梅),VMIDSEL[1:0]脡猫脰脙脦陋:11(5K)
 8000abe:	221b      	movs	r2, #27
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff fd50 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,2,0X1B0);	//R2,ROUT1,LOUT1脢盲鲁枚脢鹿脛脺(露煤禄煤驴脡脪脭鹿陇脳梅),BOOSTENR,BOOSTENL脢鹿脛脺
 8000ac8:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8000acc:	2102      	movs	r1, #2
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff fd4a 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,3,0X6C);	//R3,LOUT2,ROUT2脢盲鲁枚脢鹿脛脺(脌庐掳脠鹿陇脳梅),RMIX,LMIX脢鹿脛脺
 8000ad4:	226c      	movs	r2, #108	; 0x6c
 8000ad6:	2103      	movs	r1, #3
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff fd45 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,3, 0x7F);
 8000ade:	227f      	movs	r2, #127	; 0x7f
 8000ae0:	2103      	movs	r1, #3
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff fd40 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,4, 0x10);
 8000ae8:	2210      	movs	r2, #16
 8000aea:	2104      	movs	r1, #4
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff fd3b 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,6,0);		//R6,MCLK脫脡脥芒虏驴脤谩鹿漏
 8000af2:	2200      	movs	r2, #0
 8000af4:	2106      	movs	r1, #6
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff fd36 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,43,1<<4);	//R43,INVROUT2路麓脧貌,脟媒露炉脌庐掳脠
 8000afc:	2210      	movs	r2, #16
 8000afe:	212b      	movs	r1, #43	; 0x2b
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff fd31 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,47,1<<8);	//R47脡猫脰脙,PGABOOSTL,脳贸脥篓碌脌MIC禄帽碌脙20卤露脭枚脪忙
 8000b06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b0a:	212f      	movs	r1, #47	; 0x2f
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff fd2b 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,48,1<<8);	//R48脡猫脰脙,PGABOOSTR,脫脪脥篓碌脌MIC禄帽碌脙20卤露脭枚脪忙
 8000b12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b16:	2130      	movs	r1, #48	; 0x30
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff fd25 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,49,1<<1);	//R49,TSDEN,驴陋脝么鹿媒脠脠卤拢禄陇
 8000b1e:	2202      	movs	r2, #2
 8000b20:	2131      	movs	r1, #49	; 0x31
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff fd20 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,10,1<<3);	//R10,SOFTMUTE鹿脴卤脮,128x虏脡脩霉,脳卯录脩SNR
 8000b28:	2208      	movs	r2, #8
 8000b2a:	210a      	movs	r1, #10
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff fd1b 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,14,1<<3);	//R14,AD
 8000b32:	2208      	movs	r2, #8
 8000b34:	210e      	movs	r1, #14
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff fd16 	bl	8000568 <WM8978_Register_Wirter>

}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <Audio_Player_Start>:



void Audio_Player_Start() {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	WAV_FileRead3((uint8_t*) I2S_Buf2, sizeof(I2S_Buf0));
 8000b48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b4c:	480b      	ldr	r0, [pc, #44]	; (8000b7c <Audio_Player_Start+0x38>)
 8000b4e:	f7ff fd8f 	bl	8000670 <WAV_FileRead3>
	WAV_FileRead3((uint8_t*) I2S_Buf3, sizeof(I2S_Buf1));
 8000b52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b56:	480a      	ldr	r0, [pc, #40]	; (8000b80 <Audio_Player_Start+0x3c>)
 8000b58:	f7ff fd8a 	bl	8000670 <WAV_FileRead3>
	HAL_I2S_Transmit_DMAEx(&USEI2S, I2S_Buf0, I2S_Buf1, BUFFER_SIZE);
 8000b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b60:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <Audio_Player_Start+0x40>)
 8000b62:	4909      	ldr	r1, [pc, #36]	; (8000b88 <Audio_Player_Start+0x44>)
 8000b64:	4809      	ldr	r0, [pc, #36]	; (8000b8c <Audio_Player_Start+0x48>)
 8000b66:	f7ff fdfb 	bl	8000760 <HAL_I2S_Transmit_DMAEx>

	HAL_I2S_Transmit_DMAEx2(&hi2s2, I2S_Buf2, I2S_Buf3, BUFFER_SIZE);
 8000b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b6e:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <Audio_Player_Start+0x3c>)
 8000b70:	4902      	ldr	r1, [pc, #8]	; (8000b7c <Audio_Player_Start+0x38>)
 8000b72:	4807      	ldr	r0, [pc, #28]	; (8000b90 <Audio_Player_Start+0x4c>)
 8000b74:	f7ff feae 	bl	80008d4 <HAL_I2S_Transmit_DMAEx2>

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200010c4 	.word	0x200010c4
 8000b80:	200018c4 	.word	0x200018c4
 8000b84:	200008c4 	.word	0x200008c4
 8000b88:	200000c4 	.word	0x200000c4
 8000b8c:	200053d8 	.word	0x200053d8
 8000b90:	20005390 	.word	0x20005390

08000b94 <Audio_Player_Stop>:

void Audio_Player_Resume(void) {
	HAL_I2S_DMAResume(&USEI2S);
}

void Audio_Player_Stop(void) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	WAV_FileInit();
 8000b98:	f7ff fd16 	bl	80005c8 <WAV_FileInit>
	HAL_I2S_DMAStop(&USEI2S);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <Audio_Player_Stop+0x14>)
 8000b9e:	f005 f957 	bl	8005e50 <HAL_I2S_DMAStop>
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200053d8 	.word	0x200053d8

08000bac <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart5, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000bb4:	1d39      	adds	r1, r7, #4
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <__io_putchar+0x20>)
 8000bbe:	f006 fcc6 	bl	800754e <HAL_UART_Transmit>
  return ch;
 8000bc2:	687b      	ldr	r3, [r7, #4]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200042b8 	.word	0x200042b8

08000bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd4:	f000 fe34 	bl	8001840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd8:	f000 f878 	bl	8000ccc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000bdc:	f000 f8e0 	bl	8000da0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be0:	f000 fa04 	bl	8000fec <MX_GPIO_Init>
  MX_DMA_Init();
 8000be4:	f000 f9da 	bl	8000f9c <MX_DMA_Init>
  MX_I2S3_Init();
 8000be8:	f000 f980 	bl	8000eec <MX_I2S3_Init>
  MX_I2C1_Init();
 8000bec:	f000 f8f4 	bl	8000dd8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000bf0:	f000 f920 	bl	8000e34 <MX_I2C2_Init>
  MX_I2S2_Init();
 8000bf4:	f000 f94c 	bl	8000e90 <MX_I2S2_Init>
  MX_FATFS_Init();
 8000bf8:	f007 ff2a 	bl	8008a50 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000bfc:	f00d ff48 	bl	800ea90 <MX_USB_HOST_Init>
  MX_UART5_Init();
 8000c00:	f000 f9a2 	bl	8000f48 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  Audio_Player_Init(&hi2c1);
 8000c04:	4825      	ldr	r0, [pc, #148]	; (8000c9c <main+0xcc>)
 8000c06:	f7ff ff51 	bl	8000aac <Audio_Player_Init>
  Audio_Player_Init(&hi2c2);
 8000c0a:	4825      	ldr	r0, [pc, #148]	; (8000ca0 <main+0xd0>)
 8000c0c:	f7ff ff4e 	bl	8000aac <Audio_Player_Init>
  //ETX_MSC_ProcessUsbDevice();

  while( Appli_state !=APPLICATION_READY){
 8000c10:	e001      	b.n	8000c16 <main+0x46>
	    MX_USB_HOST_Process();
 8000c12:	f00d ff63 	bl	800eadc <MX_USB_HOST_Process>
  while( Appli_state !=APPLICATION_READY){
 8000c16:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <main+0xd4>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d1f9      	bne.n	8000c12 <main+0x42>
  }
  res = f_mount( &UsbDiskFatFs, (TCHAR const*)UsbDiskPath, 0 );
 8000c1e:	2200      	movs	r2, #0
 8000c20:	4921      	ldr	r1, [pc, #132]	; (8000ca8 <main+0xd8>)
 8000c22:	4822      	ldr	r0, [pc, #136]	; (8000cac <main+0xdc>)
 8000c24:	f00d f89a 	bl	800dd5c <f_mount>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <main+0xe0>)
 8000c2e:	701a      	strb	r2, [r3, #0]

  printf("mount %d\n",res);
 8000c30:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <main+0xe0>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	481f      	ldr	r0, [pc, #124]	; (8000cb4 <main+0xe4>)
 8000c38:	f00e fb36 	bl	800f2a8 <iprintf>
  res = f_open( &file, file_name, FA_READ );
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	491e      	ldr	r1, [pc, #120]	; (8000cb8 <main+0xe8>)
 8000c40:	481e      	ldr	r0, [pc, #120]	; (8000cbc <main+0xec>)
 8000c42:	f00d f8d1 	bl	800dde8 <f_open>
 8000c46:	4603      	mov	r3, r0
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <main+0xe0>)
 8000c4c:	701a      	strb	r2, [r3, #0]


  f_lseek(&file,44);
 8000c4e:	212c      	movs	r1, #44	; 0x2c
 8000c50:	481a      	ldr	r0, [pc, #104]	; (8000cbc <main+0xec>)
 8000c52:	f00d fc9c 	bl	800e58e <f_lseek>
  printf("open %d\n",res);
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <main+0xe0>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4818      	ldr	r0, [pc, #96]	; (8000cc0 <main+0xf0>)
 8000c5e:	f00e fb23 	bl	800f2a8 <iprintf>
  res = f_open( &file2, file_name2, FA_READ );
 8000c62:	2201      	movs	r2, #1
 8000c64:	4917      	ldr	r1, [pc, #92]	; (8000cc4 <main+0xf4>)
 8000c66:	4818      	ldr	r0, [pc, #96]	; (8000cc8 <main+0xf8>)
 8000c68:	f00d f8be 	bl	800dde8 <f_open>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <main+0xe0>)
 8000c72:	701a      	strb	r2, [r3, #0]
  f_lseek(&file2,44);
 8000c74:	212c      	movs	r1, #44	; 0x2c
 8000c76:	4814      	ldr	r0, [pc, #80]	; (8000cc8 <main+0xf8>)
 8000c78:	f00d fc89 	bl	800e58e <f_lseek>

  printf("open %d\n",res);
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <main+0xe0>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	480f      	ldr	r0, [pc, #60]	; (8000cc0 <main+0xf0>)
 8000c84:	f00e fb10 	bl	800f2a8 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000c88:	f00d ff28 	bl	800eadc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	  Audio_Player_Start();
 8000c8c:	f7ff ff5a 	bl	8000b44 <Audio_Player_Start>
	  HAL_Delay(50000);
 8000c90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c94:	f000 fe46 	bl	8001924 <HAL_Delay>
    MX_USB_HOST_Process();
 8000c98:	e7f6      	b.n	8000c88 <main+0xb8>
 8000c9a:	bf00      	nop
 8000c9c:	200041ac 	.word	0x200041ac
 8000ca0:	20004200 	.word	0x20004200
 8000ca4:	2000313c 	.word	0x2000313c
 8000ca8:	20003100 	.word	0x20003100
 8000cac:	200020cc 	.word	0x200020cc
 8000cb0:	2000532c 	.word	0x2000532c
 8000cb4:	080100e0 	.word	0x080100e0
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	200042fc 	.word	0x200042fc
 8000cc0:	080100ec 	.word	0x080100ec
 8000cc4:	2000000c 	.word	0x2000000c
 8000cc8:	20003178 	.word	0x20003178

08000ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b094      	sub	sp, #80	; 0x50
 8000cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd2:	f107 0320 	add.w	r3, r7, #32
 8000cd6:	2230      	movs	r2, #48	; 0x30
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f00e fa32 	bl	800f144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	4b28      	ldr	r3, [pc, #160]	; (8000d98 <SystemClock_Config+0xcc>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	4a27      	ldr	r2, [pc, #156]	; (8000d98 <SystemClock_Config+0xcc>)
 8000cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000d00:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <SystemClock_Config+0xcc>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <SystemClock_Config+0xd0>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a21      	ldr	r2, [pc, #132]	; (8000d9c <SystemClock_Config+0xd0>)
 8000d16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1a:	6013      	str	r3, [r2, #0]
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <SystemClock_Config+0xd0>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d32:	2302      	movs	r3, #2
 8000d34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d40:	23a8      	movs	r3, #168	; 0xa8
 8000d42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d44:	2302      	movs	r3, #2
 8000d46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d48:	2307      	movs	r3, #7
 8000d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4c:	f107 0320 	add.w	r3, r7, #32
 8000d50:	4618      	mov	r0, r3
 8000d52:	f005 fdfb 	bl	800694c <HAL_RCC_OscConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d5c:	f000 f9a6 	bl	80010ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d60:	230f      	movs	r3, #15
 8000d62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d64:	2302      	movs	r3, #2
 8000d66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	2105      	movs	r1, #5
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f006 f85c 	bl	8006e3c <HAL_RCC_ClockConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d8a:	f000 f98f 	bl	80010ac <Error_Handler>
  }
}
 8000d8e:	bf00      	nop
 8000d90:	3750      	adds	r7, #80	; 0x50
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40007000 	.word	0x40007000

08000da0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da6:	463b      	mov	r3, r7
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000db2:	2301      	movs	r3, #1
 8000db4:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000db6:	23c0      	movs	r3, #192	; 0xc0
 8000db8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f006 fa37 	bl	8007234 <HAL_RCCEx_PeriphCLKConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000dcc:	f000 f96e 	bl	80010ac <Error_Handler>
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000dde:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <MX_I2C1_Init+0x54>)
 8000de0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000de4:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <MX_I2C1_Init+0x58>)
 8000de6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000df6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dfa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e14:	4804      	ldr	r0, [pc, #16]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000e16:	f004 fa8f 	bl	8005338 <HAL_I2C_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e20:	f000 f944 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	200041ac 	.word	0x200041ac
 8000e2c:	40005400 	.word	0x40005400
 8000e30:	000186a0 	.word	0x000186a0

08000e34 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <MX_I2C2_Init+0x50>)
 8000e3a:	4a13      	ldr	r2, [pc, #76]	; (8000e88 <MX_I2C2_Init+0x54>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_I2C2_Init+0x50>)
 8000e40:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <MX_I2C2_Init+0x58>)
 8000e42:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_I2C2_Init+0x50>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_I2C2_Init+0x50>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_I2C2_Init+0x50>)
 8000e52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e56:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <MX_I2C2_Init+0x50>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_I2C2_Init+0x50>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <MX_I2C2_Init+0x50>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_I2C2_Init+0x50>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <MX_I2C2_Init+0x50>)
 8000e72:	f004 fa61 	bl	8005338 <HAL_I2C_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e7c:	f000 f916 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20004200 	.word	0x20004200
 8000e88:	40005800 	.word	0x40005800
 8000e8c:	000186a0 	.word	0x000186a0

08000e90 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <MX_I2S2_Init+0x54>)
 8000e96:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <MX_I2S2_Init+0x58>)
 8000e98:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000e9a:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_I2S2_Init+0x54>)
 8000e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ea0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <MX_I2S2_Init+0x54>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_I2S2_Init+0x54>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <MX_I2S2_Init+0x54>)
 8000eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb4:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <MX_I2S2_Init+0x54>)
 8000eb8:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000ebc:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_I2S2_Init+0x54>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <MX_I2S2_Init+0x54>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_I2S2_Init+0x54>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <MX_I2S2_Init+0x54>)
 8000ed2:	f004 fe7d 	bl	8005bd0 <HAL_I2S_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000edc:	f000 f8e6 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20005390 	.word	0x20005390
 8000ee8:	40003800 	.word	0x40003800

08000eec <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000ef0:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <MX_I2S3_Init+0x54>)
 8000ef2:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <MX_I2S3_Init+0x58>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <MX_I2S3_Init+0x54>)
 8000ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000efc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <MX_I2S3_Init+0x54>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_I2S3_Init+0x54>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <MX_I2S3_Init+0x54>)
 8000f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f10:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_I2S3_Init+0x54>)
 8000f14:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000f18:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_I2S3_Init+0x54>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <MX_I2S3_Init+0x54>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_I2S3_Init+0x54>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000f2c:	4804      	ldr	r0, [pc, #16]	; (8000f40 <MX_I2S3_Init+0x54>)
 8000f2e:	f004 fe4f 	bl	8005bd0 <HAL_I2S_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000f38:	f000 f8b8 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200053d8 	.word	0x200053d8
 8000f44:	40003c00 	.word	0x40003c00

08000f48 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_UART5_Init+0x4c>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <MX_UART5_Init+0x50>)
 8000f50:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <MX_UART5_Init+0x4c>)
 8000f54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f58:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_UART5_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_UART5_Init+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_UART5_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_UART5_Init+0x4c>)
 8000f6e:	220c      	movs	r2, #12
 8000f70:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_UART5_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_UART5_Init+0x4c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_UART5_Init+0x4c>)
 8000f80:	f006 fa98 	bl	80074b4 <HAL_UART_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000f8a:	f000 f88f 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200042b8 	.word	0x200042b8
 8000f98:	40005000 	.word	0x40005000

08000f9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <MX_DMA_Init+0x4c>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <MX_DMA_Init+0x4c>)
 8000fac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <MX_DMA_Init+0x4c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 2, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2102      	movs	r1, #2
 8000fc2:	200f      	movs	r0, #15
 8000fc4:	f000 fdad 	bl	8001b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000fc8:	200f      	movs	r0, #15
 8000fca:	f000 fdc6 	bl	8001b5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 2, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	2010      	movs	r0, #16
 8000fd4:	f000 fda5 	bl	8001b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000fd8:	2010      	movs	r0, #16
 8000fda:	f000 fdbe 	bl	8001b5a <HAL_NVIC_EnableIRQ>

}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800

08000fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <MX_GPIO_Init+0xbc>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a2b      	ldr	r2, [pc, #172]	; (80010a8 <MX_GPIO_Init+0xbc>)
 8000ffc:	f043 0320 	orr.w	r3, r3, #32
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <MX_GPIO_Init+0xbc>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0320 	and.w	r3, r3, #32
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <MX_GPIO_Init+0xbc>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a24      	ldr	r2, [pc, #144]	; (80010a8 <MX_GPIO_Init+0xbc>)
 8001018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <MX_GPIO_Init+0xbc>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <MX_GPIO_Init+0xbc>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <MX_GPIO_Init+0xbc>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <MX_GPIO_Init+0xbc>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_GPIO_Init+0xbc>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <MX_GPIO_Init+0xbc>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_GPIO_Init+0xbc>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_GPIO_Init+0xbc>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <MX_GPIO_Init+0xbc>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <MX_GPIO_Init+0xbc>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_GPIO_Init+0xbc>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <MX_GPIO_Init+0xbc>)
 8001088:	f043 0308 	orr.w	r3, r3, #8
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_GPIO_Init+0xbc>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]

}
 800109a:	bf00      	nop
 800109c:	371c      	adds	r7, #28
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <Error_Handler+0x8>
	...

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <HAL_MspInit+0x4c>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a0f      	ldr	r2, [pc, #60]	; (8001104 <HAL_MspInit+0x4c>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <HAL_MspInit+0x4c>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <HAL_MspInit+0x4c>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	4a08      	ldr	r2, [pc, #32]	; (8001104 <HAL_MspInit+0x4c>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_MspInit+0x4c>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800

08001108 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	; 0x30
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a32      	ldr	r2, [pc, #200]	; (80011f0 <HAL_I2C_MspInit+0xe8>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d12c      	bne.n	8001184 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
 800112e:	4b31      	ldr	r3, [pc, #196]	; (80011f4 <HAL_I2C_MspInit+0xec>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a30      	ldr	r2, [pc, #192]	; (80011f4 <HAL_I2C_MspInit+0xec>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b2e      	ldr	r3, [pc, #184]	; (80011f4 <HAL_I2C_MspInit+0xec>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	61bb      	str	r3, [r7, #24]
 8001144:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001146:	23c0      	movs	r3, #192	; 0xc0
 8001148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800114a:	2312      	movs	r3, #18
 800114c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800114e:	2301      	movs	r3, #1
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001156:	2304      	movs	r3, #4
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	4619      	mov	r1, r3
 8001160:	4825      	ldr	r0, [pc, #148]	; (80011f8 <HAL_I2C_MspInit+0xf0>)
 8001162:	f002 f9dd 	bl	8003520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <HAL_I2C_MspInit+0xec>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	4a21      	ldr	r2, [pc, #132]	; (80011f4 <HAL_I2C_MspInit+0xec>)
 8001170:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001174:	6413      	str	r3, [r2, #64]	; 0x40
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <HAL_I2C_MspInit+0xec>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001182:	e030      	b.n	80011e6 <HAL_I2C_MspInit+0xde>
  else if(hi2c->Instance==I2C2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a1c      	ldr	r2, [pc, #112]	; (80011fc <HAL_I2C_MspInit+0xf4>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d12b      	bne.n	80011e6 <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <HAL_I2C_MspInit+0xec>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a17      	ldr	r2, [pc, #92]	; (80011f4 <HAL_I2C_MspInit+0xec>)
 8001198:	f043 0320 	orr.w	r3, r3, #32
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_I2C_MspInit+0xec>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0320 	and.w	r3, r3, #32
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011aa:	2303      	movs	r3, #3
 80011ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ae:	2312      	movs	r3, #18
 80011b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011ba:	2304      	movs	r3, #4
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	4619      	mov	r1, r3
 80011c4:	480e      	ldr	r0, [pc, #56]	; (8001200 <HAL_I2C_MspInit+0xf8>)
 80011c6:	f002 f9ab 	bl	8003520 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_I2C_MspInit+0xec>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <HAL_I2C_MspInit+0xec>)
 80011d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_I2C_MspInit+0xec>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
}
 80011e6:	bf00      	nop
 80011e8:	3730      	adds	r7, #48	; 0x30
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40005400 	.word	0x40005400
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020400 	.word	0x40020400
 80011fc:	40005800 	.word	0x40005800
 8001200:	40021400 	.word	0x40021400

08001204 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	; 0x38
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a4b      	ldr	r2, [pc, #300]	; (8001350 <HAL_I2S_MspInit+0x14c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	f040 80a0 	bne.w	8001368 <HAL_I2S_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
 800122c:	4b49      	ldr	r3, [pc, #292]	; (8001354 <HAL_I2S_MspInit+0x150>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	4a48      	ldr	r2, [pc, #288]	; (8001354 <HAL_I2S_MspInit+0x150>)
 8001232:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001236:	6413      	str	r3, [r2, #64]	; 0x40
 8001238:	4b46      	ldr	r3, [pc, #280]	; (8001354 <HAL_I2S_MspInit+0x150>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001240:	623b      	str	r3, [r7, #32]
 8001242:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	4b42      	ldr	r3, [pc, #264]	; (8001354 <HAL_I2S_MspInit+0x150>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	4a41      	ldr	r2, [pc, #260]	; (8001354 <HAL_I2S_MspInit+0x150>)
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	6313      	str	r3, [r2, #48]	; 0x30
 8001254:	4b3f      	ldr	r3, [pc, #252]	; (8001354 <HAL_I2S_MspInit+0x150>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	61fb      	str	r3, [r7, #28]
 800125e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	2300      	movs	r3, #0
 8001262:	61bb      	str	r3, [r7, #24]
 8001264:	4b3b      	ldr	r3, [pc, #236]	; (8001354 <HAL_I2S_MspInit+0x150>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	4a3a      	ldr	r2, [pc, #232]	; (8001354 <HAL_I2S_MspInit+0x150>)
 800126a:	f043 0302 	orr.w	r3, r3, #2
 800126e:	6313      	str	r3, [r2, #48]	; 0x30
 8001270:	4b38      	ldr	r3, [pc, #224]	; (8001354 <HAL_I2S_MspInit+0x150>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800127c:	2304      	movs	r3, #4
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800128c:	2306      	movs	r3, #6
 800128e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001294:	4619      	mov	r1, r3
 8001296:	4830      	ldr	r0, [pc, #192]	; (8001358 <HAL_I2S_MspInit+0x154>)
 8001298:	f002 f942 	bl	8003520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800129c:	2348      	movs	r3, #72	; 0x48
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012ac:	2305      	movs	r3, #5
 80012ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b4:	4619      	mov	r1, r3
 80012b6:	4828      	ldr	r0, [pc, #160]	; (8001358 <HAL_I2S_MspInit+0x154>)
 80012b8:	f002 f932 	bl	8003520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80012bc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012ce:	2305      	movs	r3, #5
 80012d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d6:	4619      	mov	r1, r3
 80012d8:	4820      	ldr	r0, [pc, #128]	; (800135c <HAL_I2S_MspInit+0x158>)
 80012da:	f002 f921 	bl	8003520 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <HAL_I2S_MspInit+0x15c>)
 80012e0:	4a20      	ldr	r2, [pc, #128]	; (8001364 <HAL_I2S_MspInit+0x160>)
 80012e2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <HAL_I2S_MspInit+0x15c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <HAL_I2S_MspInit+0x15c>)
 80012ec:	2240      	movs	r2, #64	; 0x40
 80012ee:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <HAL_I2S_MspInit+0x15c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_I2S_MspInit+0x15c>)
 80012f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012fc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_I2S_MspInit+0x15c>)
 8001300:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001304:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_I2S_MspInit+0x15c>)
 8001308:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800130c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <HAL_I2S_MspInit+0x15c>)
 8001310:	2200      	movs	r2, #0
 8001312:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_I2S_MspInit+0x15c>)
 8001316:	2200      	movs	r2, #0
 8001318:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_I2S_MspInit+0x15c>)
 800131c:	2204      	movs	r2, #4
 800131e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <HAL_I2S_MspInit+0x15c>)
 8001322:	2203      	movs	r2, #3
 8001324:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_I2S_MspInit+0x15c>)
 8001328:	2200      	movs	r2, #0
 800132a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <HAL_I2S_MspInit+0x15c>)
 800132e:	2200      	movs	r2, #0
 8001330:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001332:	480b      	ldr	r0, [pc, #44]	; (8001360 <HAL_I2S_MspInit+0x15c>)
 8001334:	f000 fc2c 	bl	8001b90 <HAL_DMA_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 800133e:	f7ff feb5 	bl	80010ac <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a06      	ldr	r2, [pc, #24]	; (8001360 <HAL_I2S_MspInit+0x15c>)
 8001346:	639a      	str	r2, [r3, #56]	; 0x38
 8001348:	4a05      	ldr	r2, [pc, #20]	; (8001360 <HAL_I2S_MspInit+0x15c>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800134e:	e0ca      	b.n	80014e6 <HAL_I2S_MspInit+0x2e2>
 8001350:	40003800 	.word	0x40003800
 8001354:	40023800 	.word	0x40023800
 8001358:	40020800 	.word	0x40020800
 800135c:	40020400 	.word	0x40020400
 8001360:	20005330 	.word	0x20005330
 8001364:	40026070 	.word	0x40026070
  else if(hi2s->Instance==SPI3)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a60      	ldr	r2, [pc, #384]	; (80014f0 <HAL_I2S_MspInit+0x2ec>)
 800136e:	4293      	cmp	r3, r2
 8001370:	f040 80b9 	bne.w	80014e6 <HAL_I2S_MspInit+0x2e2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	4b5e      	ldr	r3, [pc, #376]	; (80014f4 <HAL_I2S_MspInit+0x2f0>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	4a5d      	ldr	r2, [pc, #372]	; (80014f4 <HAL_I2S_MspInit+0x2f0>)
 800137e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001382:	6413      	str	r3, [r2, #64]	; 0x40
 8001384:	4b5b      	ldr	r3, [pc, #364]	; (80014f4 <HAL_I2S_MspInit+0x2f0>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	4b57      	ldr	r3, [pc, #348]	; (80014f4 <HAL_I2S_MspInit+0x2f0>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	4a56      	ldr	r2, [pc, #344]	; (80014f4 <HAL_I2S_MspInit+0x2f0>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	6313      	str	r3, [r2, #48]	; 0x30
 80013a0:	4b54      	ldr	r3, [pc, #336]	; (80014f4 <HAL_I2S_MspInit+0x2f0>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	4b50      	ldr	r3, [pc, #320]	; (80014f4 <HAL_I2S_MspInit+0x2f0>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	4a4f      	ldr	r2, [pc, #316]	; (80014f4 <HAL_I2S_MspInit+0x2f0>)
 80013b6:	f043 0304 	orr.w	r3, r3, #4
 80013ba:	6313      	str	r3, [r2, #48]	; 0x30
 80013bc:	4b4d      	ldr	r3, [pc, #308]	; (80014f4 <HAL_I2S_MspInit+0x2f0>)
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	4b49      	ldr	r3, [pc, #292]	; (80014f4 <HAL_I2S_MspInit+0x2f0>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d0:	4a48      	ldr	r2, [pc, #288]	; (80014f4 <HAL_I2S_MspInit+0x2f0>)
 80013d2:	f043 0302 	orr.w	r3, r3, #2
 80013d6:	6313      	str	r3, [r2, #48]	; 0x30
 80013d8:	4b46      	ldr	r3, [pc, #280]	; (80014f4 <HAL_I2S_MspInit+0x2f0>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013e4:	2310      	movs	r3, #16
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013f4:	2306      	movs	r3, #6
 80013f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fc:	4619      	mov	r1, r3
 80013fe:	483e      	ldr	r0, [pc, #248]	; (80014f8 <HAL_I2S_MspInit+0x2f4>)
 8001400:	f002 f88e 	bl	8003520 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001414:	2306      	movs	r3, #6
 8001416:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141c:	4619      	mov	r1, r3
 800141e:	4837      	ldr	r0, [pc, #220]	; (80014fc <HAL_I2S_MspInit+0x2f8>)
 8001420:	f002 f87e 	bl	8003520 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001424:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8001436:	2305      	movs	r3, #5
 8001438:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143e:	4619      	mov	r1, r3
 8001440:	482e      	ldr	r0, [pc, #184]	; (80014fc <HAL_I2S_MspInit+0x2f8>)
 8001442:	f002 f86d 	bl	8003520 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001446:	2328      	movs	r3, #40	; 0x28
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001456:	2306      	movs	r3, #6
 8001458:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145e:	4619      	mov	r1, r3
 8001460:	4827      	ldr	r0, [pc, #156]	; (8001500 <HAL_I2S_MspInit+0x2fc>)
 8001462:	f002 f85d 	bl	8003520 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001466:	4b27      	ldr	r3, [pc, #156]	; (8001504 <HAL_I2S_MspInit+0x300>)
 8001468:	4a27      	ldr	r2, [pc, #156]	; (8001508 <HAL_I2S_MspInit+0x304>)
 800146a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800146c:	4b25      	ldr	r3, [pc, #148]	; (8001504 <HAL_I2S_MspInit+0x300>)
 800146e:	2200      	movs	r2, #0
 8001470:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001472:	4b24      	ldr	r3, [pc, #144]	; (8001504 <HAL_I2S_MspInit+0x300>)
 8001474:	2240      	movs	r2, #64	; 0x40
 8001476:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001478:	4b22      	ldr	r3, [pc, #136]	; (8001504 <HAL_I2S_MspInit+0x300>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800147e:	4b21      	ldr	r3, [pc, #132]	; (8001504 <HAL_I2S_MspInit+0x300>)
 8001480:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001484:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <HAL_I2S_MspInit+0x300>)
 8001488:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800148c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <HAL_I2S_MspInit+0x300>)
 8001490:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001494:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_I2S_MspInit+0x300>)
 8001498:	2200      	movs	r2, #0
 800149a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_I2S_MspInit+0x300>)
 800149e:	2200      	movs	r2, #0
 80014a0:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014a2:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_I2S_MspInit+0x300>)
 80014a4:	2204      	movs	r2, #4
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <HAL_I2S_MspInit+0x300>)
 80014aa:	2203      	movs	r2, #3
 80014ac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <HAL_I2S_MspInit+0x300>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <HAL_I2S_MspInit+0x300>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80014ba:	4812      	ldr	r0, [pc, #72]	; (8001504 <HAL_I2S_MspInit+0x300>)
 80014bc:	f000 fb68 	bl	8001b90 <HAL_DMA_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_I2S_MspInit+0x2c6>
      Error_Handler();
 80014c6:	f7ff fdf1 	bl	80010ac <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <HAL_I2S_MspInit+0x300>)
 80014ce:	639a      	str	r2, [r3, #56]	; 0x38
 80014d0:	4a0c      	ldr	r2, [pc, #48]	; (8001504 <HAL_I2S_MspInit+0x300>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	2033      	movs	r0, #51	; 0x33
 80014dc:	f000 fb21 	bl	8001b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80014e0:	2033      	movs	r0, #51	; 0x33
 80014e2:	f000 fb3a 	bl	8001b5a <HAL_NVIC_EnableIRQ>
}
 80014e6:	bf00      	nop
 80014e8:	3738      	adds	r7, #56	; 0x38
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40003c00 	.word	0x40003c00
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020000 	.word	0x40020000
 80014fc:	40020800 	.word	0x40020800
 8001500:	40020400 	.word	0x40020400
 8001504:	20004258 	.word	0x20004258
 8001508:	40026088 	.word	0x40026088

0800150c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a28      	ldr	r2, [pc, #160]	; (80015cc <HAL_UART_MspInit+0xc0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d14a      	bne.n	80015c4 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	4b27      	ldr	r3, [pc, #156]	; (80015d0 <HAL_UART_MspInit+0xc4>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a26      	ldr	r2, [pc, #152]	; (80015d0 <HAL_UART_MspInit+0xc4>)
 8001538:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <HAL_UART_MspInit+0xc4>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <HAL_UART_MspInit+0xc4>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a1f      	ldr	r2, [pc, #124]	; (80015d0 <HAL_UART_MspInit+0xc4>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <HAL_UART_MspInit+0xc4>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <HAL_UART_MspInit+0xc4>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a18      	ldr	r2, [pc, #96]	; (80015d0 <HAL_UART_MspInit+0xc4>)
 8001570:	f043 0308 	orr.w	r3, r3, #8
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <HAL_UART_MspInit+0xc4>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001590:	2303      	movs	r3, #3
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001594:	2308      	movs	r3, #8
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	480d      	ldr	r0, [pc, #52]	; (80015d4 <HAL_UART_MspInit+0xc8>)
 80015a0:	f001 ffbe 	bl	8003520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015a4:	2304      	movs	r3, #4
 80015a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80015b4:	2308      	movs	r3, #8
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	4806      	ldr	r0, [pc, #24]	; (80015d8 <HAL_UART_MspInit+0xcc>)
 80015c0:	f001 ffae 	bl	8003520 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80015c4:	bf00      	nop
 80015c6:	3728      	adds	r7, #40	; 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40005000 	.word	0x40005000
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020800 	.word	0x40020800
 80015d8:	40020c00 	.word	0x40020c00

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <NMI_Handler+0x4>

080015e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <HardFault_Handler+0x4>

080015e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <MemManage_Handler+0x4>

080015ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <BusFault_Handler+0x4>

080015f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <UsageFault_Handler+0x4>

080015fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001628:	f000 f95c 	bl	80018e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}

08001630 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <DMA1_Stream4_IRQHandler+0x10>)
 8001636:	f000 fbc9 	bl	8001dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20005330 	.word	0x20005330

08001644 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <DMA1_Stream5_IRQHandler+0x10>)
 800164a:	f000 fbbf 	bl	8001dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20004258 	.word	0x20004258

08001658 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <SPI3_IRQHandler+0x10>)
 800165e:	f004 fdd1 	bl	8006204 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200053d8 	.word	0x200053d8

0800166c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <OTG_FS_IRQHandler+0x10>)
 8001672:	f002 fb5b 	bl	8003d2c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20007868 	.word	0x20007868

08001680 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	e00a      	b.n	80016a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001692:	f3af 8000 	nop.w
 8001696:	4601      	mov	r1, r0
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	60ba      	str	r2, [r7, #8]
 800169e:	b2ca      	uxtb	r2, r1
 80016a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3301      	adds	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	dbf0      	blt.n	8001692 <_read+0x12>
	}

return len;
 80016b0:	687b      	ldr	r3, [r7, #4]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b086      	sub	sp, #24
 80016be:	af00      	add	r7, sp, #0
 80016c0:	60f8      	str	r0, [r7, #12]
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	e009      	b.n	80016e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	60ba      	str	r2, [r7, #8]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fa69 	bl	8000bac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	3301      	adds	r3, #1
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	dbf1      	blt.n	80016cc <_write+0x12>
	}
	return len;
 80016e8:	687b      	ldr	r3, [r7, #4]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <_close>:

int _close(int file)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
	return -1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800171a:	605a      	str	r2, [r3, #4]
	return 0;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <_isatty>:

int _isatty(int file)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
	return 1;
 8001732:	2301      	movs	r3, #1
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
	return 0;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001764:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <_sbrk+0x5c>)
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <_sbrk+0x60>)
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d102      	bne.n	800177e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <_sbrk+0x64>)
 800177a:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <_sbrk+0x68>)
 800177c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <_sbrk+0x64>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	429a      	cmp	r2, r3
 800178a:	d207      	bcs.n	800179c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800178c:	f00d fc92 	bl	800f0b4 <__errno>
 8001790:	4603      	mov	r3, r0
 8001792:	220c      	movs	r2, #12
 8001794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	e009      	b.n	80017b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017a2:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <_sbrk+0x64>)
 80017ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ae:	68fb      	ldr	r3, [r7, #12]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20020000 	.word	0x20020000
 80017bc:	00000400 	.word	0x00000400
 80017c0:	20003104 	.word	0x20003104
 80017c4:	20007b80 	.word	0x20007b80

080017c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <SystemInit+0x20>)
 80017ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d2:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <SystemInit+0x20>)
 80017d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001824 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f0:	480d      	ldr	r0, [pc, #52]	; (8001828 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017f2:	490e      	ldr	r1, [pc, #56]	; (800182c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017f4:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f8:	e002      	b.n	8001800 <LoopCopyDataInit>

080017fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fe:	3304      	adds	r3, #4

08001800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001804:	d3f9      	bcc.n	80017fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001806:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001808:	4c0b      	ldr	r4, [pc, #44]	; (8001838 <LoopFillZerobss+0x26>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800180c:	e001      	b.n	8001812 <LoopFillZerobss>

0800180e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001810:	3204      	adds	r2, #4

08001812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001814:	d3fb      	bcc.n	800180e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001816:	f7ff ffd7 	bl	80017c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800181a:	f00d fc51 	bl	800f0c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181e:	f7ff f9d7 	bl	8000bd0 <main>
  bx  lr    
 8001822:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001824:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800182c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001830:	080871a4 	.word	0x080871a4
  ldr r2, =_sbss
 8001834:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001838:	20007b7c 	.word	0x20007b7c

0800183c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800183c:	e7fe      	b.n	800183c <ADC_IRQHandler>
	...

08001840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001844:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <HAL_Init+0x40>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <HAL_Init+0x40>)
 800184a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800184e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <HAL_Init+0x40>)
 8001856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800185a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <HAL_Init+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a07      	ldr	r2, [pc, #28]	; (8001880 <HAL_Init+0x40>)
 8001862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001868:	2003      	movs	r0, #3
 800186a:	f000 f94f 	bl	8001b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186e:	200f      	movs	r0, #15
 8001870:	f000 f808 	bl	8001884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001874:	f7ff fc20 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40023c00 	.word	0x40023c00

08001884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_InitTick+0x54>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_InitTick+0x58>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189a:	fbb3 f3f1 	udiv	r3, r3, r1
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f967 	bl	8001b76 <HAL_SYSTICK_Config>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00e      	b.n	80018d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b0f      	cmp	r3, #15
 80018b6:	d80a      	bhi.n	80018ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b8:	2200      	movs	r2, #0
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f000 f92f 	bl	8001b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c4:	4a06      	ldr	r2, [pc, #24]	; (80018e0 <HAL_InitTick+0x5c>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e000      	b.n	80018d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000018 	.word	0x20000018
 80018dc:	20000020 	.word	0x20000020
 80018e0:	2000001c 	.word	0x2000001c

080018e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x20>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_IncTick+0x24>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <HAL_IncTick+0x24>)
 80018f6:	6013      	str	r3, [r2, #0]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000020 	.word	0x20000020
 8001908:	20005420 	.word	0x20005420

0800190c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <HAL_GetTick+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20005420 	.word	0x20005420

08001924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800192c:	f7ff ffee 	bl	800190c <HAL_GetTick>
 8001930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193c:	d005      	beq.n	800194a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_Delay+0x44>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800194a:	bf00      	nop
 800194c:	f7ff ffde 	bl	800190c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	429a      	cmp	r2, r3
 800195a:	d8f7      	bhi.n	800194c <HAL_Delay+0x28>
  {
  }
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000020 	.word	0x20000020

0800196c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <__NVIC_SetPriorityGrouping+0x44>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001988:	4013      	ands	r3, r2
 800198a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199e:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <__NVIC_SetPriorityGrouping+0x44>)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	60d3      	str	r3, [r2, #12]
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <__NVIC_GetPriorityGrouping+0x18>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	f003 0307 	and.w	r3, r3, #7
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	db0b      	blt.n	80019fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	f003 021f 	and.w	r2, r3, #31
 80019e8:	4907      	ldr	r1, [pc, #28]	; (8001a08 <__NVIC_EnableIRQ+0x38>)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	095b      	lsrs	r3, r3, #5
 80019f0:	2001      	movs	r0, #1
 80019f2:	fa00 f202 	lsl.w	r2, r0, r2
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000e100 	.word	0xe000e100

08001a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	6039      	str	r1, [r7, #0]
 8001a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	db0a      	blt.n	8001a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	490c      	ldr	r1, [pc, #48]	; (8001a58 <__NVIC_SetPriority+0x4c>)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	0112      	lsls	r2, r2, #4
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	440b      	add	r3, r1
 8001a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a34:	e00a      	b.n	8001a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4908      	ldr	r1, [pc, #32]	; (8001a5c <__NVIC_SetPriority+0x50>)
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	3b04      	subs	r3, #4
 8001a44:	0112      	lsls	r2, r2, #4
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	440b      	add	r3, r1
 8001a4a:	761a      	strb	r2, [r3, #24]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000e100 	.word	0xe000e100
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b089      	sub	sp, #36	; 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f1c3 0307 	rsb	r3, r3, #7
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	bf28      	it	cs
 8001a7e:	2304      	movcs	r3, #4
 8001a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3304      	adds	r3, #4
 8001a86:	2b06      	cmp	r3, #6
 8001a88:	d902      	bls.n	8001a90 <NVIC_EncodePriority+0x30>
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3b03      	subs	r3, #3
 8001a8e:	e000      	b.n	8001a92 <NVIC_EncodePriority+0x32>
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	f04f 32ff 	mov.w	r2, #4294967295
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43da      	mvns	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	43d9      	mvns	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	4313      	orrs	r3, r2
         );
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3724      	adds	r7, #36	; 0x24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad8:	d301      	bcc.n	8001ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00f      	b.n	8001afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ade:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <SysTick_Config+0x40>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae6:	210f      	movs	r1, #15
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aec:	f7ff ff8e 	bl	8001a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <SysTick_Config+0x40>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af6:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <SysTick_Config+0x40>)
 8001af8:	2207      	movs	r2, #7
 8001afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	e000e010 	.word	0xe000e010

08001b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff ff29 	bl	800196c <__NVIC_SetPriorityGrouping>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4603      	mov	r3, r0
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b34:	f7ff ff3e 	bl	80019b4 <__NVIC_GetPriorityGrouping>
 8001b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	6978      	ldr	r0, [r7, #20]
 8001b40:	f7ff ff8e 	bl	8001a60 <NVIC_EncodePriority>
 8001b44:	4602      	mov	r2, r0
 8001b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff5d 	bl	8001a0c <__NVIC_SetPriority>
}
 8001b52:	bf00      	nop
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff31 	bl	80019d0 <__NVIC_EnableIRQ>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ffa2 	bl	8001ac8 <SysTick_Config>
 8001b84:	4603      	mov	r3, r0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b9c:	f7ff feb6 	bl	800190c <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e099      	b.n	8001ce0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0201 	bic.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bcc:	e00f      	b.n	8001bee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bce:	f7ff fe9d 	bl	800190c <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b05      	cmp	r3, #5
 8001bda:	d908      	bls.n	8001bee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2220      	movs	r2, #32
 8001be0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2203      	movs	r2, #3
 8001be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e078      	b.n	8001ce0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1e8      	bne.n	8001bce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	4b38      	ldr	r3, [pc, #224]	; (8001ce8 <HAL_DMA_Init+0x158>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d107      	bne.n	8001c58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	4313      	orrs	r3, r2
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f023 0307 	bic.w	r3, r3, #7
 8001c6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d117      	bne.n	8001cb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00e      	beq.n	8001cb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fa59 	bl	800214c <DMA_CheckFifoParam>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d008      	beq.n	8001cb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2240      	movs	r2, #64	; 0x40
 8001ca4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e016      	b.n	8001ce0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 fa10 	bl	80020e0 <DMA_CalcBaseAndBitshift>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc8:	223f      	movs	r2, #63	; 0x3f
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	f010803f 	.word	0xf010803f

08001cec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cfa:	f7ff fe07 	bl	800190c <HAL_GetTick>
 8001cfe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d008      	beq.n	8001d1e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2280      	movs	r2, #128	; 0x80
 8001d10:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e052      	b.n	8001dc4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0216 	bic.w	r2, r2, #22
 8001d2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	695a      	ldr	r2, [r3, #20]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d103      	bne.n	8001d4e <HAL_DMA_Abort+0x62>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d007      	beq.n	8001d5e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0208 	bic.w	r2, r2, #8
 8001d5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0201 	bic.w	r2, r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d6e:	e013      	b.n	8001d98 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d70:	f7ff fdcc 	bl	800190c <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b05      	cmp	r3, #5
 8001d7c:	d90c      	bls.n	8001d98 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2220      	movs	r2, #32
 8001d82:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2203      	movs	r2, #3
 8001d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e015      	b.n	8001dc4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1e4      	bne.n	8001d70 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001daa:	223f      	movs	r2, #63	; 0x3f
 8001dac:	409a      	lsls	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dd8:	4b92      	ldr	r3, [pc, #584]	; (8002024 <HAL_DMA_IRQHandler+0x258>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a92      	ldr	r2, [pc, #584]	; (8002028 <HAL_DMA_IRQHandler+0x25c>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	0a9b      	lsrs	r3, r3, #10
 8001de4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df6:	2208      	movs	r2, #8
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d01a      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d013      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0204 	bic.w	r2, r2, #4
 8001e1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e24:	2208      	movs	r2, #8
 8001e26:	409a      	lsls	r2, r3
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e30:	f043 0201 	orr.w	r2, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d012      	beq.n	8001e6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00b      	beq.n	8001e6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e66:	f043 0202 	orr.w	r2, r3, #2
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e72:	2204      	movs	r2, #4
 8001e74:	409a      	lsls	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d012      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00b      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e90:	2204      	movs	r2, #4
 8001e92:	409a      	lsls	r2, r3
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9c:	f043 0204 	orr.w	r2, r3, #4
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d043      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d03c      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec6:	2210      	movs	r2, #16
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d018      	beq.n	8001f0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d108      	bne.n	8001efc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d024      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	4798      	blx	r3
 8001efa:	e01f      	b.n	8001f3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01b      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	4798      	blx	r3
 8001f0c:	e016      	b.n	8001f3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d107      	bne.n	8001f2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0208 	bic.w	r2, r2, #8
 8001f2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f40:	2220      	movs	r2, #32
 8001f42:	409a      	lsls	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 808e 	beq.w	800206a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 8086 	beq.w	800206a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f62:	2220      	movs	r2, #32
 8001f64:	409a      	lsls	r2, r3
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b05      	cmp	r3, #5
 8001f74:	d136      	bne.n	8001fe4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0216 	bic.w	r2, r2, #22
 8001f84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	695a      	ldr	r2, [r3, #20]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d103      	bne.n	8001fa6 <HAL_DMA_IRQHandler+0x1da>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d007      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0208 	bic.w	r2, r2, #8
 8001fb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fba:	223f      	movs	r2, #63	; 0x3f
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d07d      	beq.n	80020d6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	4798      	blx	r3
        }
        return;
 8001fe2:	e078      	b.n	80020d6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d01c      	beq.n	800202c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d108      	bne.n	8002012 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002004:	2b00      	cmp	r3, #0
 8002006:	d030      	beq.n	800206a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	4798      	blx	r3
 8002010:	e02b      	b.n	800206a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002016:	2b00      	cmp	r3, #0
 8002018:	d027      	beq.n	800206a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	4798      	blx	r3
 8002022:	e022      	b.n	800206a <HAL_DMA_IRQHandler+0x29e>
 8002024:	20000018 	.word	0x20000018
 8002028:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10f      	bne.n	800205a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0210 	bic.w	r2, r2, #16
 8002048:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206e:	2b00      	cmp	r3, #0
 8002070:	d032      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d022      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2205      	movs	r2, #5
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0201 	bic.w	r2, r2, #1
 8002094:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	3301      	adds	r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d307      	bcc.n	80020b2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f2      	bne.n	8002096 <HAL_DMA_IRQHandler+0x2ca>
 80020b0:	e000      	b.n	80020b4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80020b2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	4798      	blx	r3
 80020d4:	e000      	b.n	80020d8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80020d6:	bf00      	nop
    }
  }
}
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop

080020e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	3b10      	subs	r3, #16
 80020f0:	4a14      	ldr	r2, [pc, #80]	; (8002144 <DMA_CalcBaseAndBitshift+0x64>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	091b      	lsrs	r3, r3, #4
 80020f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020fa:	4a13      	ldr	r2, [pc, #76]	; (8002148 <DMA_CalcBaseAndBitshift+0x68>)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4413      	add	r3, r2
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2b03      	cmp	r3, #3
 800210c:	d909      	bls.n	8002122 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002116:	f023 0303 	bic.w	r3, r3, #3
 800211a:	1d1a      	adds	r2, r3, #4
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	659a      	str	r2, [r3, #88]	; 0x58
 8002120:	e007      	b.n	8002132 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800212a:	f023 0303 	bic.w	r3, r3, #3
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002136:	4618      	mov	r0, r3
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	aaaaaaab 	.word	0xaaaaaaab
 8002148:	080870e0 	.word	0x080870e0

0800214c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d11f      	bne.n	80021a6 <DMA_CheckFifoParam+0x5a>
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d856      	bhi.n	800221a <DMA_CheckFifoParam+0xce>
 800216c:	a201      	add	r2, pc, #4	; (adr r2, 8002174 <DMA_CheckFifoParam+0x28>)
 800216e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002172:	bf00      	nop
 8002174:	08002185 	.word	0x08002185
 8002178:	08002197 	.word	0x08002197
 800217c:	08002185 	.word	0x08002185
 8002180:	0800221b 	.word	0x0800221b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d046      	beq.n	800221e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002194:	e043      	b.n	800221e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800219e:	d140      	bne.n	8002222 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a4:	e03d      	b.n	8002222 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ae:	d121      	bne.n	80021f4 <DMA_CheckFifoParam+0xa8>
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d837      	bhi.n	8002226 <DMA_CheckFifoParam+0xda>
 80021b6:	a201      	add	r2, pc, #4	; (adr r2, 80021bc <DMA_CheckFifoParam+0x70>)
 80021b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021bc:	080021cd 	.word	0x080021cd
 80021c0:	080021d3 	.word	0x080021d3
 80021c4:	080021cd 	.word	0x080021cd
 80021c8:	080021e5 	.word	0x080021e5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
      break;
 80021d0:	e030      	b.n	8002234 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d025      	beq.n	800222a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021e2:	e022      	b.n	800222a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021ec:	d11f      	bne.n	800222e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021f2:	e01c      	b.n	800222e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d903      	bls.n	8002202 <DMA_CheckFifoParam+0xb6>
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d003      	beq.n	8002208 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002200:	e018      	b.n	8002234 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	73fb      	strb	r3, [r7, #15]
      break;
 8002206:	e015      	b.n	8002234 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00e      	beq.n	8002232 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	73fb      	strb	r3, [r7, #15]
      break;
 8002218:	e00b      	b.n	8002232 <DMA_CheckFifoParam+0xe6>
      break;
 800221a:	bf00      	nop
 800221c:	e00a      	b.n	8002234 <DMA_CheckFifoParam+0xe8>
      break;
 800221e:	bf00      	nop
 8002220:	e008      	b.n	8002234 <DMA_CheckFifoParam+0xe8>
      break;
 8002222:	bf00      	nop
 8002224:	e006      	b.n	8002234 <DMA_CheckFifoParam+0xe8>
      break;
 8002226:	bf00      	nop
 8002228:	e004      	b.n	8002234 <DMA_CheckFifoParam+0xe8>
      break;
 800222a:	bf00      	nop
 800222c:	e002      	b.n	8002234 <DMA_CheckFifoParam+0xe8>
      break;   
 800222e:	bf00      	nop
 8002230:	e000      	b.n	8002234 <DMA_CheckFifoParam+0xe8>
      break;
 8002232:	bf00      	nop
    }
  } 
  
  return status; 
 8002234:	7bfb      	ldrb	r3, [r7, #15]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop

08002244 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b80      	cmp	r3, #128	; 0x80
 800225c:	d106      	bne.n	800226c <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002264:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	f001 b913 	b.w	8003492 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002270:	2b00      	cmp	r3, #0
 8002272:	d007      	beq.n	8002284 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002280:	2b00      	cmp	r3, #0
 8002282:	d105      	bne.n	8002290 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2240      	movs	r2, #64	; 0x40
 8002288:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	f001 b901 	b.w	8003492 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002296:	2b01      	cmp	r3, #1
 8002298:	d102      	bne.n	80022a0 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 800229a:	2302      	movs	r3, #2
 800229c:	f001 b8f9 	b.w	8003492 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	f041 80e7 	bne.w	8003484 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2202      	movs	r2, #2
 80022ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80022d2:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f001 f8f6 	bl	80034d4 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b99      	ldr	r3, [pc, #612]	; (8002554 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d960      	bls.n	80023b6 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a97      	ldr	r2, [pc, #604]	; (8002558 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d057      	beq.n	80023ae <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a96      	ldr	r2, [pc, #600]	; (800255c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d050      	beq.n	80023aa <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a94      	ldr	r2, [pc, #592]	; (8002560 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d049      	beq.n	80023a6 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a93      	ldr	r2, [pc, #588]	; (8002564 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d042      	beq.n	80023a2 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a91      	ldr	r2, [pc, #580]	; (8002568 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d03a      	beq.n	800239c <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a90      	ldr	r2, [pc, #576]	; (800256c <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d032      	beq.n	8002396 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a8e      	ldr	r2, [pc, #568]	; (8002570 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d02a      	beq.n	8002390 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a8d      	ldr	r2, [pc, #564]	; (8002574 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d022      	beq.n	800238a <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a8b      	ldr	r2, [pc, #556]	; (8002578 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d01a      	beq.n	8002384 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a8a      	ldr	r2, [pc, #552]	; (800257c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d012      	beq.n	800237e <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a88      	ldr	r2, [pc, #544]	; (8002580 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00a      	beq.n	8002378 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a87      	ldr	r2, [pc, #540]	; (8002584 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d102      	bne.n	8002372 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 800236c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002370:	e01e      	b.n	80023b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002372:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002376:	e01b      	b.n	80023b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002378:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800237c:	e018      	b.n	80023b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800237e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002382:	e015      	b.n	80023b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002384:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002388:	e012      	b.n	80023b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800238a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800238e:	e00f      	b.n	80023b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002390:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002394:	e00c      	b.n	80023b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002396:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800239a:	e009      	b.n	80023b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800239c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023a0:	e006      	b.n	80023b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80023a2:	2320      	movs	r3, #32
 80023a4:	e004      	b.n	80023b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80023a6:	2320      	movs	r3, #32
 80023a8:	e002      	b.n	80023b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80023aa:	2320      	movs	r3, #32
 80023ac:	e000      	b.n	80023b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80023ae:	2320      	movs	r3, #32
 80023b0:	4a75      	ldr	r2, [pc, #468]	; (8002588 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 80023b2:	60d3      	str	r3, [r2, #12]
 80023b4:	e150      	b.n	8002658 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b73      	ldr	r3, [pc, #460]	; (800258c <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 80023be:	429a      	cmp	r2, r3
 80023c0:	d960      	bls.n	8002484 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a64      	ldr	r2, [pc, #400]	; (8002558 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d057      	beq.n	800247c <HAL_DMAEx_MultiBufferStart_IT+0x238>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a62      	ldr	r2, [pc, #392]	; (800255c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d050      	beq.n	8002478 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a61      	ldr	r2, [pc, #388]	; (8002560 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d049      	beq.n	8002474 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a5f      	ldr	r2, [pc, #380]	; (8002564 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d042      	beq.n	8002470 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a5e      	ldr	r2, [pc, #376]	; (8002568 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d03a      	beq.n	800246a <HAL_DMAEx_MultiBufferStart_IT+0x226>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a5c      	ldr	r2, [pc, #368]	; (800256c <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d032      	beq.n	8002464 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a5b      	ldr	r2, [pc, #364]	; (8002570 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d02a      	beq.n	800245e <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a59      	ldr	r2, [pc, #356]	; (8002574 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d022      	beq.n	8002458 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a58      	ldr	r2, [pc, #352]	; (8002578 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d01a      	beq.n	8002452 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a56      	ldr	r2, [pc, #344]	; (800257c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d012      	beq.n	800244c <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a55      	ldr	r2, [pc, #340]	; (8002580 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d00a      	beq.n	8002446 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a53      	ldr	r2, [pc, #332]	; (8002584 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d102      	bne.n	8002440 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800243a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800243e:	e01e      	b.n	800247e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002440:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002444:	e01b      	b.n	800247e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002446:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800244a:	e018      	b.n	800247e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800244c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002450:	e015      	b.n	800247e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002452:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002456:	e012      	b.n	800247e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002458:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800245c:	e00f      	b.n	800247e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800245e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002462:	e00c      	b.n	800247e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002464:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002468:	e009      	b.n	800247e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800246a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800246e:	e006      	b.n	800247e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002470:	2320      	movs	r3, #32
 8002472:	e004      	b.n	800247e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002474:	2320      	movs	r3, #32
 8002476:	e002      	b.n	800247e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002478:	2320      	movs	r3, #32
 800247a:	e000      	b.n	800247e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800247c:	2320      	movs	r3, #32
 800247e:	4a42      	ldr	r2, [pc, #264]	; (8002588 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8002480:	6093      	str	r3, [r2, #8]
 8002482:	e0e9      	b.n	8002658 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	4b41      	ldr	r3, [pc, #260]	; (8002590 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 800248c:	429a      	cmp	r2, r3
 800248e:	f240 8083 	bls.w	8002598 <HAL_DMAEx_MultiBufferStart_IT+0x354>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a30      	ldr	r2, [pc, #192]	; (8002558 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d057      	beq.n	800254c <HAL_DMAEx_MultiBufferStart_IT+0x308>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a2e      	ldr	r2, [pc, #184]	; (800255c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d050      	beq.n	8002548 <HAL_DMAEx_MultiBufferStart_IT+0x304>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a2d      	ldr	r2, [pc, #180]	; (8002560 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d049      	beq.n	8002544 <HAL_DMAEx_MultiBufferStart_IT+0x300>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a2b      	ldr	r2, [pc, #172]	; (8002564 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d042      	beq.n	8002540 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a2a      	ldr	r2, [pc, #168]	; (8002568 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d03a      	beq.n	800253a <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a28      	ldr	r2, [pc, #160]	; (800256c <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d032      	beq.n	8002534 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a27      	ldr	r2, [pc, #156]	; (8002570 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d02a      	beq.n	800252e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a25      	ldr	r2, [pc, #148]	; (8002574 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d022      	beq.n	8002528 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a24      	ldr	r2, [pc, #144]	; (8002578 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d01a      	beq.n	8002522 <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a22      	ldr	r2, [pc, #136]	; (800257c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d012      	beq.n	800251c <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a21      	ldr	r2, [pc, #132]	; (8002580 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d00a      	beq.n	8002516 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a1f      	ldr	r2, [pc, #124]	; (8002584 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d102      	bne.n	8002510 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 800250a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800250e:	e01e      	b.n	800254e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002510:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002514:	e01b      	b.n	800254e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002516:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800251a:	e018      	b.n	800254e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800251c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002520:	e015      	b.n	800254e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002522:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002526:	e012      	b.n	800254e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002528:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800252c:	e00f      	b.n	800254e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800252e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002532:	e00c      	b.n	800254e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002534:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002538:	e009      	b.n	800254e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800253a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800253e:	e006      	b.n	800254e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002540:	2320      	movs	r3, #32
 8002542:	e004      	b.n	800254e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002544:	2320      	movs	r3, #32
 8002546:	e002      	b.n	800254e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002548:	2320      	movs	r3, #32
 800254a:	e000      	b.n	800254e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800254c:	2320      	movs	r3, #32
 800254e:	4a11      	ldr	r2, [pc, #68]	; (8002594 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8002550:	60d3      	str	r3, [r2, #12]
 8002552:	e081      	b.n	8002658 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002554:	40026458 	.word	0x40026458
 8002558:	40026010 	.word	0x40026010
 800255c:	40026410 	.word	0x40026410
 8002560:	40026070 	.word	0x40026070
 8002564:	40026470 	.word	0x40026470
 8002568:	40026028 	.word	0x40026028
 800256c:	40026428 	.word	0x40026428
 8002570:	40026088 	.word	0x40026088
 8002574:	40026488 	.word	0x40026488
 8002578:	40026040 	.word	0x40026040
 800257c:	40026440 	.word	0x40026440
 8002580:	400260a0 	.word	0x400260a0
 8002584:	400264a0 	.word	0x400264a0
 8002588:	40026400 	.word	0x40026400
 800258c:	400260b8 	.word	0x400260b8
 8002590:	40026058 	.word	0x40026058
 8002594:	40026000 	.word	0x40026000
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a96      	ldr	r2, [pc, #600]	; (80027f8 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d057      	beq.n	8002652 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a95      	ldr	r2, [pc, #596]	; (80027fc <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d050      	beq.n	800264e <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a93      	ldr	r2, [pc, #588]	; (8002800 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d049      	beq.n	800264a <HAL_DMAEx_MultiBufferStart_IT+0x406>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a92      	ldr	r2, [pc, #584]	; (8002804 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d042      	beq.n	8002646 <HAL_DMAEx_MultiBufferStart_IT+0x402>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a90      	ldr	r2, [pc, #576]	; (8002808 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d03a      	beq.n	8002640 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a8f      	ldr	r2, [pc, #572]	; (800280c <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d032      	beq.n	800263a <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a8d      	ldr	r2, [pc, #564]	; (8002810 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d02a      	beq.n	8002634 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a8c      	ldr	r2, [pc, #560]	; (8002814 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d022      	beq.n	800262e <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a8a      	ldr	r2, [pc, #552]	; (8002818 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d01a      	beq.n	8002628 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a89      	ldr	r2, [pc, #548]	; (800281c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d012      	beq.n	8002622 <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a87      	ldr	r2, [pc, #540]	; (8002820 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d00a      	beq.n	800261c <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a86      	ldr	r2, [pc, #536]	; (8002824 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d102      	bne.n	8002616 <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8002610:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002614:	e01e      	b.n	8002654 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002616:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800261a:	e01b      	b.n	8002654 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800261c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002620:	e018      	b.n	8002654 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002622:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002626:	e015      	b.n	8002654 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002628:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800262c:	e012      	b.n	8002654 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800262e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002632:	e00f      	b.n	8002654 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002634:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002638:	e00c      	b.n	8002654 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800263a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800263e:	e009      	b.n	8002654 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002640:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002644:	e006      	b.n	8002654 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002646:	2320      	movs	r3, #32
 8002648:	e004      	b.n	8002654 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800264a:	2320      	movs	r3, #32
 800264c:	e002      	b.n	8002654 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800264e:	2320      	movs	r3, #32
 8002650:	e000      	b.n	8002654 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002652:	2320      	movs	r3, #32
 8002654:	4a74      	ldr	r2, [pc, #464]	; (8002828 <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 8002656:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	4b73      	ldr	r3, [pc, #460]	; (800282c <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 8002660:	429a      	cmp	r2, r3
 8002662:	d960      	bls.n	8002726 <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a63      	ldr	r2, [pc, #396]	; (80027f8 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d057      	beq.n	800271e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a62      	ldr	r2, [pc, #392]	; (80027fc <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d050      	beq.n	800271a <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a60      	ldr	r2, [pc, #384]	; (8002800 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d049      	beq.n	8002716 <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a5f      	ldr	r2, [pc, #380]	; (8002804 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d042      	beq.n	8002712 <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a5d      	ldr	r2, [pc, #372]	; (8002808 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d03a      	beq.n	800270c <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a5c      	ldr	r2, [pc, #368]	; (800280c <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d032      	beq.n	8002706 <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a5a      	ldr	r2, [pc, #360]	; (8002810 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d02a      	beq.n	8002700 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a59      	ldr	r2, [pc, #356]	; (8002814 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d022      	beq.n	80026fa <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a57      	ldr	r2, [pc, #348]	; (8002818 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d01a      	beq.n	80026f4 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a56      	ldr	r2, [pc, #344]	; (800281c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d012      	beq.n	80026ee <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a54      	ldr	r2, [pc, #336]	; (8002820 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00a      	beq.n	80026e8 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a53      	ldr	r2, [pc, #332]	; (8002824 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d102      	bne.n	80026e2 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 80026dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026e0:	e01e      	b.n	8002720 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80026e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026e6:	e01b      	b.n	8002720 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80026e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026ec:	e018      	b.n	8002720 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80026ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026f2:	e015      	b.n	8002720 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80026f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026f8:	e012      	b.n	8002720 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80026fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026fe:	e00f      	b.n	8002720 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002704:	e00c      	b.n	8002720 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800270a:	e009      	b.n	8002720 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800270c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002710:	e006      	b.n	8002720 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002712:	2310      	movs	r3, #16
 8002714:	e004      	b.n	8002720 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002716:	2310      	movs	r3, #16
 8002718:	e002      	b.n	8002720 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800271a:	2310      	movs	r3, #16
 800271c:	e000      	b.n	8002720 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800271e:	2310      	movs	r3, #16
 8002720:	4a43      	ldr	r2, [pc, #268]	; (8002830 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8002722:	60d3      	str	r3, [r2, #12]
 8002724:	e14f      	b.n	80029c6 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	4b41      	ldr	r3, [pc, #260]	; (8002834 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 800272e:	429a      	cmp	r2, r3
 8002730:	f240 8082 	bls.w	8002838 <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a2f      	ldr	r2, [pc, #188]	; (80027f8 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d057      	beq.n	80027ee <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a2e      	ldr	r2, [pc, #184]	; (80027fc <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d050      	beq.n	80027ea <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a2c      	ldr	r2, [pc, #176]	; (8002800 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d049      	beq.n	80027e6 <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a2b      	ldr	r2, [pc, #172]	; (8002804 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d042      	beq.n	80027e2 <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a29      	ldr	r2, [pc, #164]	; (8002808 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d03a      	beq.n	80027dc <HAL_DMAEx_MultiBufferStart_IT+0x598>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a28      	ldr	r2, [pc, #160]	; (800280c <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d032      	beq.n	80027d6 <HAL_DMAEx_MultiBufferStart_IT+0x592>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a26      	ldr	r2, [pc, #152]	; (8002810 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d02a      	beq.n	80027d0 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a25      	ldr	r2, [pc, #148]	; (8002814 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d022      	beq.n	80027ca <HAL_DMAEx_MultiBufferStart_IT+0x586>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a23      	ldr	r2, [pc, #140]	; (8002818 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d01a      	beq.n	80027c4 <HAL_DMAEx_MultiBufferStart_IT+0x580>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a22      	ldr	r2, [pc, #136]	; (800281c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d012      	beq.n	80027be <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a20      	ldr	r2, [pc, #128]	; (8002820 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d00a      	beq.n	80027b8 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a1f      	ldr	r2, [pc, #124]	; (8002824 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d102      	bne.n	80027b2 <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 80027ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027b0:	e01e      	b.n	80027f0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80027b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80027b6:	e01b      	b.n	80027f0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80027b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027bc:	e018      	b.n	80027f0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80027be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027c2:	e015      	b.n	80027f0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80027c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027c8:	e012      	b.n	80027f0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80027ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027ce:	e00f      	b.n	80027f0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80027d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027d4:	e00c      	b.n	80027f0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80027d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027da:	e009      	b.n	80027f0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80027dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027e0:	e006      	b.n	80027f0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80027e2:	2310      	movs	r3, #16
 80027e4:	e004      	b.n	80027f0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80027e6:	2310      	movs	r3, #16
 80027e8:	e002      	b.n	80027f0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80027ea:	2310      	movs	r3, #16
 80027ec:	e000      	b.n	80027f0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80027ee:	2310      	movs	r3, #16
 80027f0:	4a0f      	ldr	r2, [pc, #60]	; (8002830 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 80027f2:	6093      	str	r3, [r2, #8]
 80027f4:	e0e7      	b.n	80029c6 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 80027f6:	bf00      	nop
 80027f8:	40026010 	.word	0x40026010
 80027fc:	40026410 	.word	0x40026410
 8002800:	40026070 	.word	0x40026070
 8002804:	40026470 	.word	0x40026470
 8002808:	40026028 	.word	0x40026028
 800280c:	40026428 	.word	0x40026428
 8002810:	40026088 	.word	0x40026088
 8002814:	40026488 	.word	0x40026488
 8002818:	40026040 	.word	0x40026040
 800281c:	40026440 	.word	0x40026440
 8002820:	400260a0 	.word	0x400260a0
 8002824:	400264a0 	.word	0x400264a0
 8002828:	40026000 	.word	0x40026000
 800282c:	40026458 	.word	0x40026458
 8002830:	40026400 	.word	0x40026400
 8002834:	400260b8 	.word	0x400260b8
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	4b96      	ldr	r3, [pc, #600]	; (8002a98 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002840:	429a      	cmp	r2, r3
 8002842:	d960      	bls.n	8002906 <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a94      	ldr	r2, [pc, #592]	; (8002a9c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d057      	beq.n	80028fe <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a93      	ldr	r2, [pc, #588]	; (8002aa0 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d050      	beq.n	80028fa <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a91      	ldr	r2, [pc, #580]	; (8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d049      	beq.n	80028f6 <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a90      	ldr	r2, [pc, #576]	; (8002aa8 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d042      	beq.n	80028f2 <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a8e      	ldr	r2, [pc, #568]	; (8002aac <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d03a      	beq.n	80028ec <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a8d      	ldr	r2, [pc, #564]	; (8002ab0 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d032      	beq.n	80028e6 <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a8b      	ldr	r2, [pc, #556]	; (8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d02a      	beq.n	80028e0 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a8a      	ldr	r2, [pc, #552]	; (8002ab8 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d022      	beq.n	80028da <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a88      	ldr	r2, [pc, #544]	; (8002abc <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d01a      	beq.n	80028d4 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a87      	ldr	r2, [pc, #540]	; (8002ac0 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d012      	beq.n	80028ce <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a85      	ldr	r2, [pc, #532]	; (8002ac4 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00a      	beq.n	80028c8 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a84      	ldr	r2, [pc, #528]	; (8002ac8 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d102      	bne.n	80028c2 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 80028bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028c0:	e01e      	b.n	8002900 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80028c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80028c6:	e01b      	b.n	8002900 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80028c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028cc:	e018      	b.n	8002900 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80028ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028d2:	e015      	b.n	8002900 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80028d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028d8:	e012      	b.n	8002900 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80028da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028de:	e00f      	b.n	8002900 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80028e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e4:	e00c      	b.n	8002900 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80028e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ea:	e009      	b.n	8002900 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80028ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028f0:	e006      	b.n	8002900 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80028f2:	2310      	movs	r3, #16
 80028f4:	e004      	b.n	8002900 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80028f6:	2310      	movs	r3, #16
 80028f8:	e002      	b.n	8002900 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80028fa:	2310      	movs	r3, #16
 80028fc:	e000      	b.n	8002900 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80028fe:	2310      	movs	r3, #16
 8002900:	4a72      	ldr	r2, [pc, #456]	; (8002acc <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8002902:	60d3      	str	r3, [r2, #12]
 8002904:	e05f      	b.n	80029c6 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a64      	ldr	r2, [pc, #400]	; (8002a9c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d057      	beq.n	80029c0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a62      	ldr	r2, [pc, #392]	; (8002aa0 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d050      	beq.n	80029bc <HAL_DMAEx_MultiBufferStart_IT+0x778>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a61      	ldr	r2, [pc, #388]	; (8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d049      	beq.n	80029b8 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a5f      	ldr	r2, [pc, #380]	; (8002aa8 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d042      	beq.n	80029b4 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a5e      	ldr	r2, [pc, #376]	; (8002aac <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d03a      	beq.n	80029ae <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a5c      	ldr	r2, [pc, #368]	; (8002ab0 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d032      	beq.n	80029a8 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a5b      	ldr	r2, [pc, #364]	; (8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d02a      	beq.n	80029a2 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a59      	ldr	r2, [pc, #356]	; (8002ab8 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d022      	beq.n	800299c <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a58      	ldr	r2, [pc, #352]	; (8002abc <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d01a      	beq.n	8002996 <HAL_DMAEx_MultiBufferStart_IT+0x752>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a56      	ldr	r2, [pc, #344]	; (8002ac0 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d012      	beq.n	8002990 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a55      	ldr	r2, [pc, #340]	; (8002ac4 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d00a      	beq.n	800298a <HAL_DMAEx_MultiBufferStart_IT+0x746>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a53      	ldr	r2, [pc, #332]	; (8002ac8 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d102      	bne.n	8002984 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 800297e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002982:	e01e      	b.n	80029c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002984:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002988:	e01b      	b.n	80029c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800298a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800298e:	e018      	b.n	80029c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002990:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002994:	e015      	b.n	80029c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002996:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800299a:	e012      	b.n	80029c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800299c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029a0:	e00f      	b.n	80029c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80029a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029a6:	e00c      	b.n	80029c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80029a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ac:	e009      	b.n	80029c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80029ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029b2:	e006      	b.n	80029c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80029b4:	2310      	movs	r3, #16
 80029b6:	e004      	b.n	80029c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80029b8:	2310      	movs	r3, #16
 80029ba:	e002      	b.n	80029c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80029bc:	2310      	movs	r3, #16
 80029be:	e000      	b.n	80029c2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80029c0:	2310      	movs	r3, #16
 80029c2:	4a42      	ldr	r2, [pc, #264]	; (8002acc <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 80029c4:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	4b40      	ldr	r3, [pc, #256]	; (8002ad0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 80029ce:	429a      	cmp	r2, r3
 80029d0:	f240 8082 	bls.w	8002ad8 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a30      	ldr	r2, [pc, #192]	; (8002a9c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d057      	beq.n	8002a8e <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a2f      	ldr	r2, [pc, #188]	; (8002aa0 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d050      	beq.n	8002a8a <HAL_DMAEx_MultiBufferStart_IT+0x846>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a2d      	ldr	r2, [pc, #180]	; (8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d049      	beq.n	8002a86 <HAL_DMAEx_MultiBufferStart_IT+0x842>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a2c      	ldr	r2, [pc, #176]	; (8002aa8 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d042      	beq.n	8002a82 <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a2a      	ldr	r2, [pc, #168]	; (8002aac <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d03a      	beq.n	8002a7c <HAL_DMAEx_MultiBufferStart_IT+0x838>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a29      	ldr	r2, [pc, #164]	; (8002ab0 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d032      	beq.n	8002a76 <HAL_DMAEx_MultiBufferStart_IT+0x832>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a27      	ldr	r2, [pc, #156]	; (8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d02a      	beq.n	8002a70 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a26      	ldr	r2, [pc, #152]	; (8002ab8 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d022      	beq.n	8002a6a <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a24      	ldr	r2, [pc, #144]	; (8002abc <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d01a      	beq.n	8002a64 <HAL_DMAEx_MultiBufferStart_IT+0x820>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a23      	ldr	r2, [pc, #140]	; (8002ac0 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d012      	beq.n	8002a5e <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a21      	ldr	r2, [pc, #132]	; (8002ac4 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00a      	beq.n	8002a58 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a20      	ldr	r2, [pc, #128]	; (8002ac8 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d102      	bne.n	8002a52 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8002a4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a50:	e01e      	b.n	8002a90 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a56:	e01b      	b.n	8002a90 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002a58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a5c:	e018      	b.n	8002a90 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002a5e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a62:	e015      	b.n	8002a90 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002a64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a68:	e012      	b.n	8002a90 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002a6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a6e:	e00f      	b.n	8002a90 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a74:	e00c      	b.n	8002a90 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002a76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a7a:	e009      	b.n	8002a90 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a80:	e006      	b.n	8002a90 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002a82:	2308      	movs	r3, #8
 8002a84:	e004      	b.n	8002a90 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002a86:	2308      	movs	r3, #8
 8002a88:	e002      	b.n	8002a90 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002a8a:	2308      	movs	r3, #8
 8002a8c:	e000      	b.n	8002a90 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002a8e:	2308      	movs	r3, #8
 8002a90:	4a10      	ldr	r2, [pc, #64]	; (8002ad4 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 8002a92:	60d3      	str	r3, [r2, #12]
 8002a94:	e16f      	b.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8002a96:	bf00      	nop
 8002a98:	40026058 	.word	0x40026058
 8002a9c:	40026010 	.word	0x40026010
 8002aa0:	40026410 	.word	0x40026410
 8002aa4:	40026070 	.word	0x40026070
 8002aa8:	40026470 	.word	0x40026470
 8002aac:	40026028 	.word	0x40026028
 8002ab0:	40026428 	.word	0x40026428
 8002ab4:	40026088 	.word	0x40026088
 8002ab8:	40026488 	.word	0x40026488
 8002abc:	40026040 	.word	0x40026040
 8002ac0:	40026440 	.word	0x40026440
 8002ac4:	400260a0 	.word	0x400260a0
 8002ac8:	400264a0 	.word	0x400264a0
 8002acc:	40026000 	.word	0x40026000
 8002ad0:	40026458 	.word	0x40026458
 8002ad4:	40026400 	.word	0x40026400
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	4b94      	ldr	r3, [pc, #592]	; (8002d30 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d960      	bls.n	8002ba6 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a92      	ldr	r2, [pc, #584]	; (8002d34 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d057      	beq.n	8002b9e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a91      	ldr	r2, [pc, #580]	; (8002d38 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d050      	beq.n	8002b9a <HAL_DMAEx_MultiBufferStart_IT+0x956>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a8f      	ldr	r2, [pc, #572]	; (8002d3c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d049      	beq.n	8002b96 <HAL_DMAEx_MultiBufferStart_IT+0x952>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a8e      	ldr	r2, [pc, #568]	; (8002d40 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d042      	beq.n	8002b92 <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a8c      	ldr	r2, [pc, #560]	; (8002d44 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d03a      	beq.n	8002b8c <HAL_DMAEx_MultiBufferStart_IT+0x948>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a8b      	ldr	r2, [pc, #556]	; (8002d48 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d032      	beq.n	8002b86 <HAL_DMAEx_MultiBufferStart_IT+0x942>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a89      	ldr	r2, [pc, #548]	; (8002d4c <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d02a      	beq.n	8002b80 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a88      	ldr	r2, [pc, #544]	; (8002d50 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d022      	beq.n	8002b7a <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a86      	ldr	r2, [pc, #536]	; (8002d54 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d01a      	beq.n	8002b74 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a85      	ldr	r2, [pc, #532]	; (8002d58 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d012      	beq.n	8002b6e <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a83      	ldr	r2, [pc, #524]	; (8002d5c <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d00a      	beq.n	8002b68 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a82      	ldr	r2, [pc, #520]	; (8002d60 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d102      	bne.n	8002b62 <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 8002b5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002b60:	e01e      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b66:	e01b      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002b68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002b6c:	e018      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002b6e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002b72:	e015      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002b74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002b78:	e012      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002b7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b7e:	e00f      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002b80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b84:	e00c      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002b86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b8a:	e009      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b90:	e006      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002b92:	2308      	movs	r3, #8
 8002b94:	e004      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002b96:	2308      	movs	r3, #8
 8002b98:	e002      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002b9a:	2308      	movs	r3, #8
 8002b9c:	e000      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002b9e:	2308      	movs	r3, #8
 8002ba0:	4a70      	ldr	r2, [pc, #448]	; (8002d64 <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 8002ba2:	6093      	str	r3, [r2, #8]
 8002ba4:	e0e7      	b.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	4b6e      	ldr	r3, [pc, #440]	; (8002d68 <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d960      	bls.n	8002c74 <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a5f      	ldr	r2, [pc, #380]	; (8002d34 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d057      	beq.n	8002c6c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a5d      	ldr	r2, [pc, #372]	; (8002d38 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d050      	beq.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a5c      	ldr	r2, [pc, #368]	; (8002d3c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d049      	beq.n	8002c64 <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a5a      	ldr	r2, [pc, #360]	; (8002d40 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d042      	beq.n	8002c60 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a59      	ldr	r2, [pc, #356]	; (8002d44 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d03a      	beq.n	8002c5a <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a57      	ldr	r2, [pc, #348]	; (8002d48 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d032      	beq.n	8002c54 <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a56      	ldr	r2, [pc, #344]	; (8002d4c <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d02a      	beq.n	8002c4e <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a54      	ldr	r2, [pc, #336]	; (8002d50 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d022      	beq.n	8002c48 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a53      	ldr	r2, [pc, #332]	; (8002d54 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d01a      	beq.n	8002c42 <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a51      	ldr	r2, [pc, #324]	; (8002d58 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d012      	beq.n	8002c3c <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a50      	ldr	r2, [pc, #320]	; (8002d5c <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d00a      	beq.n	8002c36 <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a4e      	ldr	r2, [pc, #312]	; (8002d60 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d102      	bne.n	8002c30 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 8002c2a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c2e:	e01e      	b.n	8002c6e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002c30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c34:	e01b      	b.n	8002c6e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002c36:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c3a:	e018      	b.n	8002c6e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002c3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c40:	e015      	b.n	8002c6e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002c42:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c46:	e012      	b.n	8002c6e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c4c:	e00f      	b.n	8002c6e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c52:	e00c      	b.n	8002c6e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c58:	e009      	b.n	8002c6e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002c5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c5e:	e006      	b.n	8002c6e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002c60:	2308      	movs	r3, #8
 8002c62:	e004      	b.n	8002c6e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002c64:	2308      	movs	r3, #8
 8002c66:	e002      	b.n	8002c6e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002c68:	2308      	movs	r3, #8
 8002c6a:	e000      	b.n	8002c6e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002c6c:	2308      	movs	r3, #8
 8002c6e:	4a3f      	ldr	r2, [pc, #252]	; (8002d6c <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 8002c70:	60d3      	str	r3, [r2, #12]
 8002c72:	e080      	b.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a2e      	ldr	r2, [pc, #184]	; (8002d34 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d078      	beq.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a2d      	ldr	r2, [pc, #180]	; (8002d38 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d050      	beq.n	8002d2a <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a2b      	ldr	r2, [pc, #172]	; (8002d3c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d049      	beq.n	8002d26 <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a2a      	ldr	r2, [pc, #168]	; (8002d40 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d042      	beq.n	8002d22 <HAL_DMAEx_MultiBufferStart_IT+0xade>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a28      	ldr	r2, [pc, #160]	; (8002d44 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d03a      	beq.n	8002d1c <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a27      	ldr	r2, [pc, #156]	; (8002d48 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d032      	beq.n	8002d16 <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a25      	ldr	r2, [pc, #148]	; (8002d4c <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d02a      	beq.n	8002d10 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a24      	ldr	r2, [pc, #144]	; (8002d50 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d022      	beq.n	8002d0a <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a22      	ldr	r2, [pc, #136]	; (8002d54 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d01a      	beq.n	8002d04 <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a21      	ldr	r2, [pc, #132]	; (8002d58 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d012      	beq.n	8002cfe <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1f      	ldr	r2, [pc, #124]	; (8002d5c <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00a      	beq.n	8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a1e      	ldr	r2, [pc, #120]	; (8002d60 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d102      	bne.n	8002cf2 <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 8002cec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002cf0:	e03f      	b.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002cf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cf6:	e03c      	b.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002cf8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002cfc:	e039      	b.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002cfe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d02:	e036      	b.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002d04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d08:	e033      	b.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d0e:	e030      	b.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d14:	e02d      	b.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002d16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d1a:	e02a      	b.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d20:	e027      	b.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002d22:	2308      	movs	r3, #8
 8002d24:	e025      	b.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002d26:	2308      	movs	r3, #8
 8002d28:	e023      	b.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002d2a:	2308      	movs	r3, #8
 8002d2c:	e021      	b.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002d2e:	bf00      	nop
 8002d30:	400260b8 	.word	0x400260b8
 8002d34:	40026010 	.word	0x40026010
 8002d38:	40026410 	.word	0x40026410
 8002d3c:	40026070 	.word	0x40026070
 8002d40:	40026470 	.word	0x40026470
 8002d44:	40026028 	.word	0x40026028
 8002d48:	40026428 	.word	0x40026428
 8002d4c:	40026088 	.word	0x40026088
 8002d50:	40026488 	.word	0x40026488
 8002d54:	40026040 	.word	0x40026040
 8002d58:	40026440 	.word	0x40026440
 8002d5c:	400260a0 	.word	0x400260a0
 8002d60:	400264a0 	.word	0x400264a0
 8002d64:	40026400 	.word	0x40026400
 8002d68:	40026058 	.word	0x40026058
 8002d6c:	40026000 	.word	0x40026000
 8002d70:	2308      	movs	r3, #8
 8002d72:	4a9a      	ldr	r2, [pc, #616]	; (8002fdc <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8002d74:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4b98      	ldr	r3, [pc, #608]	; (8002fe0 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d960      	bls.n	8002e44 <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a97      	ldr	r2, [pc, #604]	; (8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d057      	beq.n	8002e3c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a95      	ldr	r2, [pc, #596]	; (8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d050      	beq.n	8002e38 <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a94      	ldr	r2, [pc, #592]	; (8002fec <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d049      	beq.n	8002e34 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a92      	ldr	r2, [pc, #584]	; (8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d042      	beq.n	8002e30 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a91      	ldr	r2, [pc, #580]	; (8002ff4 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d03a      	beq.n	8002e2a <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a8f      	ldr	r2, [pc, #572]	; (8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d032      	beq.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a8e      	ldr	r2, [pc, #568]	; (8002ffc <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d02a      	beq.n	8002e1e <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a8c      	ldr	r2, [pc, #560]	; (8003000 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d022      	beq.n	8002e18 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a8b      	ldr	r2, [pc, #556]	; (8003004 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d01a      	beq.n	8002e12 <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a89      	ldr	r2, [pc, #548]	; (8003008 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d012      	beq.n	8002e0c <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a88      	ldr	r2, [pc, #544]	; (800300c <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00a      	beq.n	8002e06 <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a86      	ldr	r2, [pc, #536]	; (8003010 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d102      	bne.n	8002e00 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 8002dfa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002dfe:	e01e      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e04:	e01b      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e06:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e0a:	e018      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e10:	e015      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e16:	e012      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e1c:	e00f      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e22:	e00c      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e28:	e009      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e2e:	e006      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e30:	2304      	movs	r3, #4
 8002e32:	e004      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e34:	2304      	movs	r3, #4
 8002e36:	e002      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e38:	2304      	movs	r3, #4
 8002e3a:	e000      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e3c:	2304      	movs	r3, #4
 8002e3e:	4a75      	ldr	r2, [pc, #468]	; (8003014 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8002e40:	60d3      	str	r3, [r2, #12]
 8002e42:	e151      	b.n	80030e8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4b73      	ldr	r3, [pc, #460]	; (8003018 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d960      	bls.n	8002f12 <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a63      	ldr	r2, [pc, #396]	; (8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d057      	beq.n	8002f0a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a62      	ldr	r2, [pc, #392]	; (8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d050      	beq.n	8002f06 <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a60      	ldr	r2, [pc, #384]	; (8002fec <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d049      	beq.n	8002f02 <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a5f      	ldr	r2, [pc, #380]	; (8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d042      	beq.n	8002efe <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a5d      	ldr	r2, [pc, #372]	; (8002ff4 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d03a      	beq.n	8002ef8 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a5c      	ldr	r2, [pc, #368]	; (8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d032      	beq.n	8002ef2 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a5a      	ldr	r2, [pc, #360]	; (8002ffc <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d02a      	beq.n	8002eec <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a59      	ldr	r2, [pc, #356]	; (8003000 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d022      	beq.n	8002ee6 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a57      	ldr	r2, [pc, #348]	; (8003004 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d01a      	beq.n	8002ee0 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a56      	ldr	r2, [pc, #344]	; (8003008 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d012      	beq.n	8002eda <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a54      	ldr	r2, [pc, #336]	; (800300c <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d00a      	beq.n	8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a53      	ldr	r2, [pc, #332]	; (8003010 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d102      	bne.n	8002ece <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 8002ec8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ecc:	e01e      	b.n	8002f0c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002ece:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ed2:	e01b      	b.n	8002f0c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002ed4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ed8:	e018      	b.n	8002f0c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002eda:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ede:	e015      	b.n	8002f0c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002ee0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ee4:	e012      	b.n	8002f0c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eea:	e00f      	b.n	8002f0c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ef0:	e00c      	b.n	8002f0c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ef6:	e009      	b.n	8002f0c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002efc:	e006      	b.n	8002f0c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002efe:	2304      	movs	r3, #4
 8002f00:	e004      	b.n	8002f0c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002f02:	2304      	movs	r3, #4
 8002f04:	e002      	b.n	8002f0c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002f06:	2304      	movs	r3, #4
 8002f08:	e000      	b.n	8002f0c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002f0a:	2304      	movs	r3, #4
 8002f0c:	4a41      	ldr	r2, [pc, #260]	; (8003014 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8002f0e:	6093      	str	r3, [r2, #8]
 8002f10:	e0ea      	b.n	80030e8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	4b40      	ldr	r3, [pc, #256]	; (800301c <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	f240 8084 	bls.w	8003028 <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a2f      	ldr	r2, [pc, #188]	; (8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d07a      	beq.n	8003020 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a2e      	ldr	r2, [pc, #184]	; (8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d050      	beq.n	8002fd6 <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a2c      	ldr	r2, [pc, #176]	; (8002fec <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d049      	beq.n	8002fd2 <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a2b      	ldr	r2, [pc, #172]	; (8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d042      	beq.n	8002fce <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a29      	ldr	r2, [pc, #164]	; (8002ff4 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d03a      	beq.n	8002fc8 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a28      	ldr	r2, [pc, #160]	; (8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d032      	beq.n	8002fc2 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a26      	ldr	r2, [pc, #152]	; (8002ffc <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d02a      	beq.n	8002fbc <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a25      	ldr	r2, [pc, #148]	; (8003000 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d022      	beq.n	8002fb6 <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a23      	ldr	r2, [pc, #140]	; (8003004 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d01a      	beq.n	8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a22      	ldr	r2, [pc, #136]	; (8003008 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d012      	beq.n	8002faa <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a20      	ldr	r2, [pc, #128]	; (800300c <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a1f      	ldr	r2, [pc, #124]	; (8003010 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d102      	bne.n	8002f9e <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8002f98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f9c:	e041      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002f9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fa2:	e03e      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002fa4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fa8:	e03b      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002faa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fae:	e038      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002fb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fb4:	e035      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fba:	e032      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002fbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fc0:	e02f      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fc6:	e02c      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002fc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fcc:	e029      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002fce:	2304      	movs	r3, #4
 8002fd0:	e027      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002fd2:	2304      	movs	r3, #4
 8002fd4:	e025      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002fd6:	2304      	movs	r3, #4
 8002fd8:	e023      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002fda:	bf00      	nop
 8002fdc:	40026000 	.word	0x40026000
 8002fe0:	40026458 	.word	0x40026458
 8002fe4:	40026010 	.word	0x40026010
 8002fe8:	40026410 	.word	0x40026410
 8002fec:	40026070 	.word	0x40026070
 8002ff0:	40026470 	.word	0x40026470
 8002ff4:	40026028 	.word	0x40026028
 8002ff8:	40026428 	.word	0x40026428
 8002ffc:	40026088 	.word	0x40026088
 8003000:	40026488 	.word	0x40026488
 8003004:	40026040 	.word	0x40026040
 8003008:	40026440 	.word	0x40026440
 800300c:	400260a0 	.word	0x400260a0
 8003010:	400264a0 	.word	0x400264a0
 8003014:	40026400 	.word	0x40026400
 8003018:	400260b8 	.word	0x400260b8
 800301c:	40026058 	.word	0x40026058
 8003020:	2304      	movs	r3, #4
 8003022:	4a94      	ldr	r2, [pc, #592]	; (8003274 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003024:	60d3      	str	r3, [r2, #12]
 8003026:	e05f      	b.n	80030e8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a92      	ldr	r2, [pc, #584]	; (8003278 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d057      	beq.n	80030e2 <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a91      	ldr	r2, [pc, #580]	; (800327c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d050      	beq.n	80030de <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a8f      	ldr	r2, [pc, #572]	; (8003280 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d049      	beq.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a8e      	ldr	r2, [pc, #568]	; (8003284 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d042      	beq.n	80030d6 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a8c      	ldr	r2, [pc, #560]	; (8003288 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d03a      	beq.n	80030d0 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a8b      	ldr	r2, [pc, #556]	; (800328c <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d032      	beq.n	80030ca <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a89      	ldr	r2, [pc, #548]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d02a      	beq.n	80030c4 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a88      	ldr	r2, [pc, #544]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d022      	beq.n	80030be <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a86      	ldr	r2, [pc, #536]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01a      	beq.n	80030b8 <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a85      	ldr	r2, [pc, #532]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d012      	beq.n	80030b2 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a83      	ldr	r2, [pc, #524]	; (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d00a      	beq.n	80030ac <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a82      	ldr	r2, [pc, #520]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d102      	bne.n	80030a6 <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 80030a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030a4:	e01e      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80030a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030aa:	e01b      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80030ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030b0:	e018      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80030b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030b6:	e015      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80030b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030bc:	e012      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80030be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030c2:	e00f      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80030c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030c8:	e00c      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80030ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ce:	e009      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80030d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030d4:	e006      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80030d6:	2304      	movs	r3, #4
 80030d8:	e004      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80030da:	2304      	movs	r3, #4
 80030dc:	e002      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80030de:	2304      	movs	r3, #4
 80030e0:	e000      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80030e2:	2304      	movs	r3, #4
 80030e4:	4a63      	ldr	r2, [pc, #396]	; (8003274 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80030e6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	4b6e      	ldr	r3, [pc, #440]	; (80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d95c      	bls.n	80031ae <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a5f      	ldr	r2, [pc, #380]	; (8003278 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d053      	beq.n	80031a6 <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a5e      	ldr	r2, [pc, #376]	; (800327c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d04c      	beq.n	80031a2 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a5c      	ldr	r2, [pc, #368]	; (8003280 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d045      	beq.n	800319e <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a5b      	ldr	r2, [pc, #364]	; (8003284 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d03e      	beq.n	800319a <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a59      	ldr	r2, [pc, #356]	; (8003288 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d037      	beq.n	8003196 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a58      	ldr	r2, [pc, #352]	; (800328c <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d030      	beq.n	8003192 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a56      	ldr	r2, [pc, #344]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d029      	beq.n	800318e <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a55      	ldr	r2, [pc, #340]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d022      	beq.n	800318a <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a53      	ldr	r2, [pc, #332]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d01a      	beq.n	8003184 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a52      	ldr	r2, [pc, #328]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d012      	beq.n	800317e <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a50      	ldr	r2, [pc, #320]	; (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00a      	beq.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a4f      	ldr	r2, [pc, #316]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d102      	bne.n	8003172 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 800316c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003170:	e01a      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003172:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003176:	e017      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003178:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800317c:	e014      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800317e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003182:	e011      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003188:	e00e      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800318a:	2340      	movs	r3, #64	; 0x40
 800318c:	e00c      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800318e:	2340      	movs	r3, #64	; 0x40
 8003190:	e00a      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003192:	2340      	movs	r3, #64	; 0x40
 8003194:	e008      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003196:	2340      	movs	r3, #64	; 0x40
 8003198:	e006      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800319a:	2301      	movs	r3, #1
 800319c:	e004      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800319e:	2301      	movs	r3, #1
 80031a0:	e002      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80031a6:	2301      	movs	r3, #1
 80031a8:	4a40      	ldr	r2, [pc, #256]	; (80032ac <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 80031aa:	60d3      	str	r3, [r2, #12]
 80031ac:	e141      	b.n	8003432 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	4b3e      	ldr	r3, [pc, #248]	; (80032b0 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d97c      	bls.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a2e      	ldr	r2, [pc, #184]	; (8003278 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d053      	beq.n	800326c <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a2c      	ldr	r2, [pc, #176]	; (800327c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d04c      	beq.n	8003268 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a2b      	ldr	r2, [pc, #172]	; (8003280 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d045      	beq.n	8003264 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a29      	ldr	r2, [pc, #164]	; (8003284 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d03e      	beq.n	8003260 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a28      	ldr	r2, [pc, #160]	; (8003288 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d037      	beq.n	800325c <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a26      	ldr	r2, [pc, #152]	; (800328c <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d030      	beq.n	8003258 <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a25      	ldr	r2, [pc, #148]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d029      	beq.n	8003254 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a23      	ldr	r2, [pc, #140]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d022      	beq.n	8003250 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a22      	ldr	r2, [pc, #136]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d01a      	beq.n	800324a <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a20      	ldr	r2, [pc, #128]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d012      	beq.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1f      	ldr	r2, [pc, #124]	; (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d00a      	beq.n	800323e <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a1d      	ldr	r2, [pc, #116]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d102      	bne.n	8003238 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8003232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003236:	e01a      	b.n	800326e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003238:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800323c:	e017      	b.n	800326e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800323e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003242:	e014      	b.n	800326e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003248:	e011      	b.n	800326e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800324a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800324e:	e00e      	b.n	800326e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003250:	2340      	movs	r3, #64	; 0x40
 8003252:	e00c      	b.n	800326e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003254:	2340      	movs	r3, #64	; 0x40
 8003256:	e00a      	b.n	800326e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003258:	2340      	movs	r3, #64	; 0x40
 800325a:	e008      	b.n	800326e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800325c:	2340      	movs	r3, #64	; 0x40
 800325e:	e006      	b.n	800326e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003260:	2301      	movs	r3, #1
 8003262:	e004      	b.n	800326e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003264:	2301      	movs	r3, #1
 8003266:	e002      	b.n	800326e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800326c:	2301      	movs	r3, #1
 800326e:	4a0f      	ldr	r2, [pc, #60]	; (80032ac <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8003270:	6093      	str	r3, [r2, #8]
 8003272:	e0de      	b.n	8003432 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003274:	40026000 	.word	0x40026000
 8003278:	40026010 	.word	0x40026010
 800327c:	40026410 	.word	0x40026410
 8003280:	40026070 	.word	0x40026070
 8003284:	40026470 	.word	0x40026470
 8003288:	40026028 	.word	0x40026028
 800328c:	40026428 	.word	0x40026428
 8003290:	40026088 	.word	0x40026088
 8003294:	40026488 	.word	0x40026488
 8003298:	40026040 	.word	0x40026040
 800329c:	40026440 	.word	0x40026440
 80032a0:	400260a0 	.word	0x400260a0
 80032a4:	400264a0 	.word	0x400264a0
 80032a8:	40026458 	.word	0x40026458
 80032ac:	40026400 	.word	0x40026400
 80032b0:	400260b8 	.word	0x400260b8
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	4b78      	ldr	r3, [pc, #480]	; (800349c <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80032bc:	429a      	cmp	r2, r3
 80032be:	d95c      	bls.n	800337a <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a76      	ldr	r2, [pc, #472]	; (80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d053      	beq.n	8003372 <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a75      	ldr	r2, [pc, #468]	; (80034a4 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d04c      	beq.n	800336e <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a73      	ldr	r2, [pc, #460]	; (80034a8 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d045      	beq.n	800336a <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a72      	ldr	r2, [pc, #456]	; (80034ac <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d03e      	beq.n	8003366 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a70      	ldr	r2, [pc, #448]	; (80034b0 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d037      	beq.n	8003362 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a6f      	ldr	r2, [pc, #444]	; (80034b4 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d030      	beq.n	800335e <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a6d      	ldr	r2, [pc, #436]	; (80034b8 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d029      	beq.n	800335a <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a6c      	ldr	r2, [pc, #432]	; (80034bc <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d022      	beq.n	8003356 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a6a      	ldr	r2, [pc, #424]	; (80034c0 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d01a      	beq.n	8003350 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a69      	ldr	r2, [pc, #420]	; (80034c4 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d012      	beq.n	800334a <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a67      	ldr	r2, [pc, #412]	; (80034c8 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00a      	beq.n	8003344 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a66      	ldr	r2, [pc, #408]	; (80034cc <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d102      	bne.n	800333e <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8003338:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800333c:	e01a      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800333e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003342:	e017      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003344:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003348:	e014      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800334a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800334e:	e011      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003350:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003354:	e00e      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003356:	2340      	movs	r3, #64	; 0x40
 8003358:	e00c      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800335a:	2340      	movs	r3, #64	; 0x40
 800335c:	e00a      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800335e:	2340      	movs	r3, #64	; 0x40
 8003360:	e008      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003362:	2340      	movs	r3, #64	; 0x40
 8003364:	e006      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003366:	2301      	movs	r3, #1
 8003368:	e004      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800336a:	2301      	movs	r3, #1
 800336c:	e002      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003372:	2301      	movs	r3, #1
 8003374:	4a56      	ldr	r2, [pc, #344]	; (80034d0 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003376:	60d3      	str	r3, [r2, #12]
 8003378:	e05b      	b.n	8003432 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a48      	ldr	r2, [pc, #288]	; (80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d053      	beq.n	800342c <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a46      	ldr	r2, [pc, #280]	; (80034a4 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d04c      	beq.n	8003428 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a45      	ldr	r2, [pc, #276]	; (80034a8 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d045      	beq.n	8003424 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a43      	ldr	r2, [pc, #268]	; (80034ac <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d03e      	beq.n	8003420 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a42      	ldr	r2, [pc, #264]	; (80034b0 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d037      	beq.n	800341c <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a40      	ldr	r2, [pc, #256]	; (80034b4 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d030      	beq.n	8003418 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a3f      	ldr	r2, [pc, #252]	; (80034b8 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d029      	beq.n	8003414 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a3d      	ldr	r2, [pc, #244]	; (80034bc <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d022      	beq.n	8003410 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a3c      	ldr	r2, [pc, #240]	; (80034c0 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d01a      	beq.n	800340a <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a3a      	ldr	r2, [pc, #232]	; (80034c4 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d012      	beq.n	8003404 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a39      	ldr	r2, [pc, #228]	; (80034c8 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00a      	beq.n	80033fe <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a37      	ldr	r2, [pc, #220]	; (80034cc <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d102      	bne.n	80033f8 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 80033f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033f6:	e01a      	b.n	800342e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80033f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033fc:	e017      	b.n	800342e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80033fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003402:	e014      	b.n	800342e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003404:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003408:	e011      	b.n	800342e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800340a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800340e:	e00e      	b.n	800342e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003410:	2340      	movs	r3, #64	; 0x40
 8003412:	e00c      	b.n	800342e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003414:	2340      	movs	r3, #64	; 0x40
 8003416:	e00a      	b.n	800342e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003418:	2340      	movs	r3, #64	; 0x40
 800341a:	e008      	b.n	800342e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800341c:	2340      	movs	r3, #64	; 0x40
 800341e:	e006      	b.n	800342e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003420:	2301      	movs	r3, #1
 8003422:	e004      	b.n	800342e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003424:	2301      	movs	r3, #1
 8003426:	e002      	b.n	800342e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800342c:	2301      	movs	r3, #1
 800342e:	4a28      	ldr	r2, [pc, #160]	; (80034d0 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003430:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 0216 	orr.w	r2, r2, #22
 8003440:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003450:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d103      	bne.n	8003462 <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0208 	orr.w	r2, r2, #8
 8003470:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 0201 	orr.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	e005      	b.n	8003490 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800348c:	2302      	movs	r3, #2
 800348e:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003490:	7dfb      	ldrb	r3, [r7, #23]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40026058 	.word	0x40026058
 80034a0:	40026010 	.word	0x40026010
 80034a4:	40026410 	.word	0x40026410
 80034a8:	40026070 	.word	0x40026070
 80034ac:	40026470 	.word	0x40026470
 80034b0:	40026028 	.word	0x40026028
 80034b4:	40026428 	.word	0x40026428
 80034b8:	40026088 	.word	0x40026088
 80034bc:	40026488 	.word	0x40026488
 80034c0:	40026040 	.word	0x40026040
 80034c4:	40026440 	.word	0x40026440
 80034c8:	400260a0 	.word	0x400260a0
 80034cc:	400264a0 	.word	0x400264a0
 80034d0:	40026000 	.word	0x40026000

080034d4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b40      	cmp	r3, #64	; 0x40
 80034f0:	d108      	bne.n	8003504 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003502:	e007      	b.n	8003514 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	60da      	str	r2, [r3, #12]
}
 8003514:	bf00      	nop
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003520:	b480      	push	{r7}
 8003522:	b089      	sub	sp, #36	; 0x24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800352e:	2300      	movs	r3, #0
 8003530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003532:	2300      	movs	r3, #0
 8003534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003536:	2300      	movs	r3, #0
 8003538:	61fb      	str	r3, [r7, #28]
 800353a:	e16b      	b.n	8003814 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800353c:	2201      	movs	r2, #1
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4013      	ands	r3, r2
 800354e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	429a      	cmp	r2, r3
 8003556:	f040 815a 	bne.w	800380e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2b01      	cmp	r3, #1
 8003564:	d005      	beq.n	8003572 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800356e:	2b02      	cmp	r3, #2
 8003570:	d130      	bne.n	80035d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	2203      	movs	r2, #3
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43db      	mvns	r3, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4013      	ands	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035a8:	2201      	movs	r2, #1
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 0201 	and.w	r2, r3, #1
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 0303 	and.w	r3, r3, #3
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d017      	beq.n	8003610 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	2203      	movs	r2, #3
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4013      	ands	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4313      	orrs	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d123      	bne.n	8003664 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	08da      	lsrs	r2, r3, #3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3208      	adds	r2, #8
 8003624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003628:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	220f      	movs	r2, #15
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	08da      	lsrs	r2, r3, #3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3208      	adds	r2, #8
 800365e:	69b9      	ldr	r1, [r7, #24]
 8003660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	2203      	movs	r2, #3
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	43db      	mvns	r3, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4013      	ands	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 0203 	and.w	r2, r3, #3
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80b4 	beq.w	800380e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	4b60      	ldr	r3, [pc, #384]	; (800382c <HAL_GPIO_Init+0x30c>)
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	4a5f      	ldr	r2, [pc, #380]	; (800382c <HAL_GPIO_Init+0x30c>)
 80036b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036b4:	6453      	str	r3, [r2, #68]	; 0x44
 80036b6:	4b5d      	ldr	r3, [pc, #372]	; (800382c <HAL_GPIO_Init+0x30c>)
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036c2:	4a5b      	ldr	r2, [pc, #364]	; (8003830 <HAL_GPIO_Init+0x310>)
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	089b      	lsrs	r3, r3, #2
 80036c8:	3302      	adds	r3, #2
 80036ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	220f      	movs	r2, #15
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43db      	mvns	r3, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4013      	ands	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a52      	ldr	r2, [pc, #328]	; (8003834 <HAL_GPIO_Init+0x314>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d02b      	beq.n	8003746 <HAL_GPIO_Init+0x226>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a51      	ldr	r2, [pc, #324]	; (8003838 <HAL_GPIO_Init+0x318>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d025      	beq.n	8003742 <HAL_GPIO_Init+0x222>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a50      	ldr	r2, [pc, #320]	; (800383c <HAL_GPIO_Init+0x31c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d01f      	beq.n	800373e <HAL_GPIO_Init+0x21e>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a4f      	ldr	r2, [pc, #316]	; (8003840 <HAL_GPIO_Init+0x320>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d019      	beq.n	800373a <HAL_GPIO_Init+0x21a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a4e      	ldr	r2, [pc, #312]	; (8003844 <HAL_GPIO_Init+0x324>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d013      	beq.n	8003736 <HAL_GPIO_Init+0x216>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a4d      	ldr	r2, [pc, #308]	; (8003848 <HAL_GPIO_Init+0x328>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00d      	beq.n	8003732 <HAL_GPIO_Init+0x212>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a4c      	ldr	r2, [pc, #304]	; (800384c <HAL_GPIO_Init+0x32c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d007      	beq.n	800372e <HAL_GPIO_Init+0x20e>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a4b      	ldr	r2, [pc, #300]	; (8003850 <HAL_GPIO_Init+0x330>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d101      	bne.n	800372a <HAL_GPIO_Init+0x20a>
 8003726:	2307      	movs	r3, #7
 8003728:	e00e      	b.n	8003748 <HAL_GPIO_Init+0x228>
 800372a:	2308      	movs	r3, #8
 800372c:	e00c      	b.n	8003748 <HAL_GPIO_Init+0x228>
 800372e:	2306      	movs	r3, #6
 8003730:	e00a      	b.n	8003748 <HAL_GPIO_Init+0x228>
 8003732:	2305      	movs	r3, #5
 8003734:	e008      	b.n	8003748 <HAL_GPIO_Init+0x228>
 8003736:	2304      	movs	r3, #4
 8003738:	e006      	b.n	8003748 <HAL_GPIO_Init+0x228>
 800373a:	2303      	movs	r3, #3
 800373c:	e004      	b.n	8003748 <HAL_GPIO_Init+0x228>
 800373e:	2302      	movs	r3, #2
 8003740:	e002      	b.n	8003748 <HAL_GPIO_Init+0x228>
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <HAL_GPIO_Init+0x228>
 8003746:	2300      	movs	r3, #0
 8003748:	69fa      	ldr	r2, [r7, #28]
 800374a:	f002 0203 	and.w	r2, r2, #3
 800374e:	0092      	lsls	r2, r2, #2
 8003750:	4093      	lsls	r3, r2
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4313      	orrs	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003758:	4935      	ldr	r1, [pc, #212]	; (8003830 <HAL_GPIO_Init+0x310>)
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	089b      	lsrs	r3, r3, #2
 800375e:	3302      	adds	r3, #2
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003766:	4b3b      	ldr	r3, [pc, #236]	; (8003854 <HAL_GPIO_Init+0x334>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	43db      	mvns	r3, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800378a:	4a32      	ldr	r2, [pc, #200]	; (8003854 <HAL_GPIO_Init+0x334>)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003790:	4b30      	ldr	r3, [pc, #192]	; (8003854 <HAL_GPIO_Init+0x334>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	43db      	mvns	r3, r3
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4013      	ands	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037b4:	4a27      	ldr	r2, [pc, #156]	; (8003854 <HAL_GPIO_Init+0x334>)
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037ba:	4b26      	ldr	r3, [pc, #152]	; (8003854 <HAL_GPIO_Init+0x334>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	43db      	mvns	r3, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4013      	ands	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037de:	4a1d      	ldr	r2, [pc, #116]	; (8003854 <HAL_GPIO_Init+0x334>)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037e4:	4b1b      	ldr	r3, [pc, #108]	; (8003854 <HAL_GPIO_Init+0x334>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003808:	4a12      	ldr	r2, [pc, #72]	; (8003854 <HAL_GPIO_Init+0x334>)
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	3301      	adds	r3, #1
 8003812:	61fb      	str	r3, [r7, #28]
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	2b0f      	cmp	r3, #15
 8003818:	f67f ae90 	bls.w	800353c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800381c:	bf00      	nop
 800381e:	bf00      	nop
 8003820:	3724      	adds	r7, #36	; 0x24
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800
 8003830:	40013800 	.word	0x40013800
 8003834:	40020000 	.word	0x40020000
 8003838:	40020400 	.word	0x40020400
 800383c:	40020800 	.word	0x40020800
 8003840:	40020c00 	.word	0x40020c00
 8003844:	40021000 	.word	0x40021000
 8003848:	40021400 	.word	0x40021400
 800384c:	40021800 	.word	0x40021800
 8003850:	40021c00 	.word	0x40021c00
 8003854:	40013c00 	.word	0x40013c00

08003858 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800385a:	b08f      	sub	sp, #60	; 0x3c
 800385c:	af0a      	add	r7, sp, #40	; 0x28
 800385e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e054      	b.n	8003914 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f00b f961 	bl	800eb4c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2203      	movs	r2, #3
 800388e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389a:	2b00      	cmp	r3, #0
 800389c:	d102      	bne.n	80038a4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f004 f98b 	bl	8007bc4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	687e      	ldr	r6, [r7, #4]
 80038b6:	466d      	mov	r5, sp
 80038b8:	f106 0410 	add.w	r4, r6, #16
 80038bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80038cc:	1d33      	adds	r3, r6, #4
 80038ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038d0:	6838      	ldr	r0, [r7, #0]
 80038d2:	f004 f905 	bl	8007ae0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2101      	movs	r1, #1
 80038dc:	4618      	mov	r0, r3
 80038de:	f004 f982 	bl	8007be6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	603b      	str	r3, [r7, #0]
 80038e8:	687e      	ldr	r6, [r7, #4]
 80038ea:	466d      	mov	r5, sp
 80038ec:	f106 0410 	add.w	r4, r6, #16
 80038f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003900:	1d33      	adds	r3, r6, #4
 8003902:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003904:	6838      	ldr	r0, [r7, #0]
 8003906:	f004 fae9 	bl	8007edc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800391c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800391c:	b590      	push	{r4, r7, lr}
 800391e:	b089      	sub	sp, #36	; 0x24
 8003920:	af04      	add	r7, sp, #16
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	4608      	mov	r0, r1
 8003926:	4611      	mov	r1, r2
 8003928:	461a      	mov	r2, r3
 800392a:	4603      	mov	r3, r0
 800392c:	70fb      	strb	r3, [r7, #3]
 800392e:	460b      	mov	r3, r1
 8003930:	70bb      	strb	r3, [r7, #2]
 8003932:	4613      	mov	r3, r2
 8003934:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_HCD_HC_Init+0x28>
 8003940:	2302      	movs	r3, #2
 8003942:	e076      	b.n	8003a32 <HAL_HCD_HC_Init+0x116>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	212c      	movs	r1, #44	; 0x2c
 8003952:	fb01 f303 	mul.w	r3, r1, r3
 8003956:	4413      	add	r3, r2
 8003958:	333d      	adds	r3, #61	; 0x3d
 800395a:	2200      	movs	r2, #0
 800395c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	212c      	movs	r1, #44	; 0x2c
 8003964:	fb01 f303 	mul.w	r3, r1, r3
 8003968:	4413      	add	r3, r2
 800396a:	3338      	adds	r3, #56	; 0x38
 800396c:	787a      	ldrb	r2, [r7, #1]
 800396e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	212c      	movs	r1, #44	; 0x2c
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	4413      	add	r3, r2
 800397c:	3340      	adds	r3, #64	; 0x40
 800397e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003980:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	212c      	movs	r1, #44	; 0x2c
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	4413      	add	r3, r2
 800398e:	3339      	adds	r3, #57	; 0x39
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	212c      	movs	r1, #44	; 0x2c
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	4413      	add	r3, r2
 80039a0:	333f      	adds	r3, #63	; 0x3f
 80039a2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80039a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80039a8:	78fb      	ldrb	r3, [r7, #3]
 80039aa:	78ba      	ldrb	r2, [r7, #2]
 80039ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039b0:	b2d0      	uxtb	r0, r2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	212c      	movs	r1, #44	; 0x2c
 80039b6:	fb01 f303 	mul.w	r3, r1, r3
 80039ba:	4413      	add	r3, r2
 80039bc:	333a      	adds	r3, #58	; 0x3a
 80039be:	4602      	mov	r2, r0
 80039c0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80039c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	da09      	bge.n	80039de <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80039ca:	78fb      	ldrb	r3, [r7, #3]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	212c      	movs	r1, #44	; 0x2c
 80039d0:	fb01 f303 	mul.w	r3, r1, r3
 80039d4:	4413      	add	r3, r2
 80039d6:	333b      	adds	r3, #59	; 0x3b
 80039d8:	2201      	movs	r2, #1
 80039da:	701a      	strb	r2, [r3, #0]
 80039dc:	e008      	b.n	80039f0 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80039de:	78fb      	ldrb	r3, [r7, #3]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	212c      	movs	r1, #44	; 0x2c
 80039e4:	fb01 f303 	mul.w	r3, r1, r3
 80039e8:	4413      	add	r3, r2
 80039ea:	333b      	adds	r3, #59	; 0x3b
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	212c      	movs	r1, #44	; 0x2c
 80039f6:	fb01 f303 	mul.w	r3, r1, r3
 80039fa:	4413      	add	r3, r2
 80039fc:	333c      	adds	r3, #60	; 0x3c
 80039fe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003a02:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6818      	ldr	r0, [r3, #0]
 8003a08:	787c      	ldrb	r4, [r7, #1]
 8003a0a:	78ba      	ldrb	r2, [r7, #2]
 8003a0c:	78f9      	ldrb	r1, [r7, #3]
 8003a0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003a10:	9302      	str	r3, [sp, #8]
 8003a12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	4623      	mov	r3, r4
 8003a20:	f004 fbd6 	bl	80081d0 <USB_HC_Init>
 8003a24:	4603      	mov	r3, r0
 8003a26:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd90      	pop	{r4, r7, pc}

08003a3a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	460b      	mov	r3, r1
 8003a44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_HCD_HC_Halt+0x1e>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e00f      	b.n	8003a78 <HAL_HCD_HC_Halt+0x3e>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	4611      	mov	r1, r2
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f004 fe12 	bl	8008692 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	4608      	mov	r0, r1
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4603      	mov	r3, r0
 8003a90:	70fb      	strb	r3, [r7, #3]
 8003a92:	460b      	mov	r3, r1
 8003a94:	70bb      	strb	r3, [r7, #2]
 8003a96:	4613      	mov	r3, r2
 8003a98:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003a9a:	78fb      	ldrb	r3, [r7, #3]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	212c      	movs	r1, #44	; 0x2c
 8003aa0:	fb01 f303 	mul.w	r3, r1, r3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	333b      	adds	r3, #59	; 0x3b
 8003aa8:	78ba      	ldrb	r2, [r7, #2]
 8003aaa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	212c      	movs	r1, #44	; 0x2c
 8003ab2:	fb01 f303 	mul.w	r3, r1, r3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	333f      	adds	r3, #63	; 0x3f
 8003aba:	787a      	ldrb	r2, [r7, #1]
 8003abc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003abe:	7c3b      	ldrb	r3, [r7, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d112      	bne.n	8003aea <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	212c      	movs	r1, #44	; 0x2c
 8003aca:	fb01 f303 	mul.w	r3, r1, r3
 8003ace:	4413      	add	r3, r2
 8003ad0:	3342      	adds	r3, #66	; 0x42
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003ad6:	78fb      	ldrb	r3, [r7, #3]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	212c      	movs	r1, #44	; 0x2c
 8003adc:	fb01 f303 	mul.w	r3, r1, r3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	333d      	adds	r3, #61	; 0x3d
 8003ae4:	7f3a      	ldrb	r2, [r7, #28]
 8003ae6:	701a      	strb	r2, [r3, #0]
 8003ae8:	e008      	b.n	8003afc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	212c      	movs	r1, #44	; 0x2c
 8003af0:	fb01 f303 	mul.w	r3, r1, r3
 8003af4:	4413      	add	r3, r2
 8003af6:	3342      	adds	r3, #66	; 0x42
 8003af8:	2202      	movs	r2, #2
 8003afa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003afc:	787b      	ldrb	r3, [r7, #1]
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	f200 80c6 	bhi.w	8003c90 <HAL_HCD_HC_SubmitRequest+0x210>
 8003b04:	a201      	add	r2, pc, #4	; (adr r2, 8003b0c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0a:	bf00      	nop
 8003b0c:	08003b1d 	.word	0x08003b1d
 8003b10:	08003c7d 	.word	0x08003c7d
 8003b14:	08003b81 	.word	0x08003b81
 8003b18:	08003bff 	.word	0x08003bff
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003b1c:	7c3b      	ldrb	r3, [r7, #16]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	f040 80b8 	bne.w	8003c94 <HAL_HCD_HC_SubmitRequest+0x214>
 8003b24:	78bb      	ldrb	r3, [r7, #2]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f040 80b4 	bne.w	8003c94 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003b2c:	8b3b      	ldrh	r3, [r7, #24]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d108      	bne.n	8003b44 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003b32:	78fb      	ldrb	r3, [r7, #3]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	212c      	movs	r1, #44	; 0x2c
 8003b38:	fb01 f303 	mul.w	r3, r1, r3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3355      	adds	r3, #85	; 0x55
 8003b40:	2201      	movs	r2, #1
 8003b42:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	212c      	movs	r1, #44	; 0x2c
 8003b4a:	fb01 f303 	mul.w	r3, r1, r3
 8003b4e:	4413      	add	r3, r2
 8003b50:	3355      	adds	r3, #85	; 0x55
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d109      	bne.n	8003b6c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	212c      	movs	r1, #44	; 0x2c
 8003b5e:	fb01 f303 	mul.w	r3, r1, r3
 8003b62:	4413      	add	r3, r2
 8003b64:	3342      	adds	r3, #66	; 0x42
 8003b66:	2200      	movs	r2, #0
 8003b68:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003b6a:	e093      	b.n	8003c94 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	212c      	movs	r1, #44	; 0x2c
 8003b72:	fb01 f303 	mul.w	r3, r1, r3
 8003b76:	4413      	add	r3, r2
 8003b78:	3342      	adds	r3, #66	; 0x42
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	701a      	strb	r2, [r3, #0]
      break;
 8003b7e:	e089      	b.n	8003c94 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003b80:	78bb      	ldrb	r3, [r7, #2]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d11d      	bne.n	8003bc2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	212c      	movs	r1, #44	; 0x2c
 8003b8c:	fb01 f303 	mul.w	r3, r1, r3
 8003b90:	4413      	add	r3, r2
 8003b92:	3355      	adds	r3, #85	; 0x55
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b9a:	78fb      	ldrb	r3, [r7, #3]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	212c      	movs	r1, #44	; 0x2c
 8003ba0:	fb01 f303 	mul.w	r3, r1, r3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	3342      	adds	r3, #66	; 0x42
 8003ba8:	2200      	movs	r2, #0
 8003baa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003bac:	e073      	b.n	8003c96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bae:	78fb      	ldrb	r3, [r7, #3]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	212c      	movs	r1, #44	; 0x2c
 8003bb4:	fb01 f303 	mul.w	r3, r1, r3
 8003bb8:	4413      	add	r3, r2
 8003bba:	3342      	adds	r3, #66	; 0x42
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	701a      	strb	r2, [r3, #0]
      break;
 8003bc0:	e069      	b.n	8003c96 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	212c      	movs	r1, #44	; 0x2c
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	4413      	add	r3, r2
 8003bce:	3354      	adds	r3, #84	; 0x54
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	212c      	movs	r1, #44	; 0x2c
 8003bdc:	fb01 f303 	mul.w	r3, r1, r3
 8003be0:	4413      	add	r3, r2
 8003be2:	3342      	adds	r3, #66	; 0x42
 8003be4:	2200      	movs	r2, #0
 8003be6:	701a      	strb	r2, [r3, #0]
      break;
 8003be8:	e055      	b.n	8003c96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	212c      	movs	r1, #44	; 0x2c
 8003bf0:	fb01 f303 	mul.w	r3, r1, r3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3342      	adds	r3, #66	; 0x42
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	701a      	strb	r2, [r3, #0]
      break;
 8003bfc:	e04b      	b.n	8003c96 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003bfe:	78bb      	ldrb	r3, [r7, #2]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d11d      	bne.n	8003c40 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	212c      	movs	r1, #44	; 0x2c
 8003c0a:	fb01 f303 	mul.w	r3, r1, r3
 8003c0e:	4413      	add	r3, r2
 8003c10:	3355      	adds	r3, #85	; 0x55
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d109      	bne.n	8003c2c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	212c      	movs	r1, #44	; 0x2c
 8003c1e:	fb01 f303 	mul.w	r3, r1, r3
 8003c22:	4413      	add	r3, r2
 8003c24:	3342      	adds	r3, #66	; 0x42
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003c2a:	e034      	b.n	8003c96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	212c      	movs	r1, #44	; 0x2c
 8003c32:	fb01 f303 	mul.w	r3, r1, r3
 8003c36:	4413      	add	r3, r2
 8003c38:	3342      	adds	r3, #66	; 0x42
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	701a      	strb	r2, [r3, #0]
      break;
 8003c3e:	e02a      	b.n	8003c96 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003c40:	78fb      	ldrb	r3, [r7, #3]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	212c      	movs	r1, #44	; 0x2c
 8003c46:	fb01 f303 	mul.w	r3, r1, r3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	3354      	adds	r3, #84	; 0x54
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d109      	bne.n	8003c68 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	212c      	movs	r1, #44	; 0x2c
 8003c5a:	fb01 f303 	mul.w	r3, r1, r3
 8003c5e:	4413      	add	r3, r2
 8003c60:	3342      	adds	r3, #66	; 0x42
 8003c62:	2200      	movs	r2, #0
 8003c64:	701a      	strb	r2, [r3, #0]
      break;
 8003c66:	e016      	b.n	8003c96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	212c      	movs	r1, #44	; 0x2c
 8003c6e:	fb01 f303 	mul.w	r3, r1, r3
 8003c72:	4413      	add	r3, r2
 8003c74:	3342      	adds	r3, #66	; 0x42
 8003c76:	2202      	movs	r2, #2
 8003c78:	701a      	strb	r2, [r3, #0]
      break;
 8003c7a:	e00c      	b.n	8003c96 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	212c      	movs	r1, #44	; 0x2c
 8003c82:	fb01 f303 	mul.w	r3, r1, r3
 8003c86:	4413      	add	r3, r2
 8003c88:	3342      	adds	r3, #66	; 0x42
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	701a      	strb	r2, [r3, #0]
      break;
 8003c8e:	e002      	b.n	8003c96 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003c90:	bf00      	nop
 8003c92:	e000      	b.n	8003c96 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003c94:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003c96:	78fb      	ldrb	r3, [r7, #3]
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	212c      	movs	r1, #44	; 0x2c
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3344      	adds	r3, #68	; 0x44
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	8b3a      	ldrh	r2, [r7, #24]
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	202c      	movs	r0, #44	; 0x2c
 8003cb0:	fb00 f303 	mul.w	r3, r0, r3
 8003cb4:	440b      	add	r3, r1
 8003cb6:	334c      	adds	r3, #76	; 0x4c
 8003cb8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003cba:	78fb      	ldrb	r3, [r7, #3]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	212c      	movs	r1, #44	; 0x2c
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	3360      	adds	r3, #96	; 0x60
 8003cc8:	2200      	movs	r2, #0
 8003cca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003ccc:	78fb      	ldrb	r3, [r7, #3]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	212c      	movs	r1, #44	; 0x2c
 8003cd2:	fb01 f303 	mul.w	r3, r1, r3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3350      	adds	r3, #80	; 0x50
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003cde:	78fb      	ldrb	r3, [r7, #3]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	212c      	movs	r1, #44	; 0x2c
 8003ce4:	fb01 f303 	mul.w	r3, r1, r3
 8003ce8:	4413      	add	r3, r2
 8003cea:	3339      	adds	r3, #57	; 0x39
 8003cec:	78fa      	ldrb	r2, [r7, #3]
 8003cee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	212c      	movs	r1, #44	; 0x2c
 8003cf6:	fb01 f303 	mul.w	r3, r1, r3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3361      	adds	r3, #97	; 0x61
 8003cfe:	2200      	movs	r2, #0
 8003d00:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	78fb      	ldrb	r3, [r7, #3]
 8003d08:	222c      	movs	r2, #44	; 0x2c
 8003d0a:	fb02 f303 	mul.w	r3, r2, r3
 8003d0e:	3338      	adds	r3, #56	; 0x38
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	18d1      	adds	r1, r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f004 fb66 	bl	80083ec <USB_HC_StartXfer>
 8003d20:	4603      	mov	r3, r0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop

08003d2c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f004 f889 	bl	8007e5a <USB_GetMode>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	f040 80f6 	bne.w	8003f3c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f004 f86d 	bl	8007e34 <USB_ReadInterrupts>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 80ec 	beq.w	8003f3a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f004 f864 	bl	8007e34 <USB_ReadInterrupts>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d76:	d104      	bne.n	8003d82 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003d80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f004 f854 	bl	8007e34 <USB_ReadInterrupts>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d96:	d104      	bne.n	8003da2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003da0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f004 f844 	bl	8007e34 <USB_ReadInterrupts>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003db2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003db6:	d104      	bne.n	8003dc2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003dc0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f004 f834 	bl	8007e34 <USB_ReadInterrupts>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d103      	bne.n	8003dde <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f004 f826 	bl	8007e34 <USB_ReadInterrupts>
 8003de8:	4603      	mov	r3, r0
 8003dea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003df2:	d11c      	bne.n	8003e2e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003dfc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10f      	bne.n	8003e2e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003e0e:	2110      	movs	r1, #16
 8003e10:	6938      	ldr	r0, [r7, #16]
 8003e12:	f003 ff35 	bl	8007c80 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003e16:	6938      	ldr	r0, [r7, #16]
 8003e18:	f003 ff56 	bl	8007cc8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2101      	movs	r1, #1
 8003e22:	4618      	mov	r0, r3
 8003e24:	f004 f90e 	bl	8008044 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f00a ff0d 	bl	800ec48 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f003 fffe 	bl	8007e34 <USB_ReadInterrupts>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e42:	d102      	bne.n	8003e4a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f001 fa03 	bl	8005250 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f003 fff0 	bl	8007e34 <USB_ReadInterrupts>
 8003e54:	4603      	mov	r3, r0
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d106      	bne.n	8003e6c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f00a fed6 	bl	800ec10 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2208      	movs	r2, #8
 8003e6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f003 ffdf 	bl	8007e34 <USB_ReadInterrupts>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b10      	cmp	r3, #16
 8003e7e:	d101      	bne.n	8003e84 <HAL_HCD_IRQHandler+0x158>
 8003e80:	2301      	movs	r3, #1
 8003e82:	e000      	b.n	8003e86 <HAL_HCD_IRQHandler+0x15a>
 8003e84:	2300      	movs	r3, #0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d012      	beq.n	8003eb0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699a      	ldr	r2, [r3, #24]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0210 	bic.w	r2, r2, #16
 8003e98:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f001 f906 	bl	80050ac <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699a      	ldr	r2, [r3, #24]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0210 	orr.w	r2, r2, #16
 8003eae:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f003 ffbd 	bl	8007e34 <USB_ReadInterrupts>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ec4:	d13a      	bne.n	8003f3c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f004 fbd0 	bl	8008670 <USB_HC_ReadInterrupt>
 8003ed0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]
 8003ed6:	e025      	b.n	8003f24 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d018      	beq.n	8003f1e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f02:	d106      	bne.n	8003f12 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	4619      	mov	r1, r3
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f8ab 	bl	8004066 <HCD_HC_IN_IRQHandler>
 8003f10:	e005      	b.n	8003f1e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	4619      	mov	r1, r3
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fcc6 	bl	80048aa <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	3301      	adds	r3, #1
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d3d4      	bcc.n	8003ed8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f36:	615a      	str	r2, [r3, #20]
 8003f38:	e000      	b.n	8003f3c <HAL_HCD_IRQHandler+0x210>
      return;
 8003f3a:	bf00      	nop
    }
  }
}
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_HCD_Start+0x16>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e013      	b.n	8003f80 <HAL_HCD_Start+0x3e>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2101      	movs	r1, #1
 8003f66:	4618      	mov	r0, r3
 8003f68:	f004 f8d0 	bl	800810c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f003 fe16 	bl	8007ba2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_HCD_Stop+0x16>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e00d      	b.n	8003fba <HAL_HCD_Stop+0x32>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f004 fcca 	bl	8008944 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f004 f872 	bl	80080b8 <USB_ResetPort>
 8003fd4:	4603      	mov	r3, r0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003fea:	78fb      	ldrb	r3, [r7, #3]
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	212c      	movs	r1, #44	; 0x2c
 8003ff0:	fb01 f303 	mul.w	r3, r1, r3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	3360      	adds	r3, #96	; 0x60
 8003ff8:	781b      	ldrb	r3, [r3, #0]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	460b      	mov	r3, r1
 8004010:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004012:	78fb      	ldrb	r3, [r7, #3]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	212c      	movs	r1, #44	; 0x2c
 8004018:	fb01 f303 	mul.w	r3, r1, r3
 800401c:	4413      	add	r3, r2
 800401e:	3350      	adds	r3, #80	; 0x50
 8004020:	681b      	ldr	r3, [r3, #0]
}
 8004022:	4618      	mov	r0, r3
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f004 f8b6 	bl	80081ac <USB_GetCurrentFrame>
 8004040:	4603      	mov	r3, r0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f004 f891 	bl	800817e <USB_GetHostSpeed>
 800405c:	4603      	mov	r3, r0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b086      	sub	sp, #24
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	460b      	mov	r3, r1
 8004070:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4413      	add	r3, r2
 8004088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b04      	cmp	r3, #4
 8004094:	d119      	bne.n	80040ca <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	4413      	add	r3, r2
 800409e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a2:	461a      	mov	r2, r3
 80040a4:	2304      	movs	r3, #4
 80040a6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	0151      	lsls	r1, r2, #5
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	440a      	add	r2, r1
 80040be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040c2:	f043 0302 	orr.w	r3, r3, #2
 80040c6:	60d3      	str	r3, [r2, #12]
 80040c8:	e101      	b.n	80042ce <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040e0:	d12b      	bne.n	800413a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ee:	461a      	mov	r2, r3
 80040f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	212c      	movs	r1, #44	; 0x2c
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	4413      	add	r3, r2
 8004102:	3361      	adds	r3, #97	; 0x61
 8004104:	2207      	movs	r2, #7
 8004106:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4413      	add	r3, r2
 8004110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	0151      	lsls	r1, r2, #5
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	440a      	add	r2, r1
 800411e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004122:	f043 0302 	orr.w	r3, r3, #2
 8004126:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	4611      	mov	r1, r2
 8004132:	4618      	mov	r0, r3
 8004134:	f004 faad 	bl	8008692 <USB_HC_Halt>
 8004138:	e0c9      	b.n	80042ce <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	4413      	add	r3, r2
 8004142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 0320 	and.w	r3, r3, #32
 800414c:	2b20      	cmp	r3, #32
 800414e:	d109      	bne.n	8004164 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4413      	add	r3, r2
 8004158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415c:	461a      	mov	r2, r3
 800415e:	2320      	movs	r3, #32
 8004160:	6093      	str	r3, [r2, #8]
 8004162:	e0b4      	b.n	80042ce <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	4413      	add	r3, r2
 800416c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	2b08      	cmp	r3, #8
 8004178:	d133      	bne.n	80041e2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	4413      	add	r3, r2
 8004182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	0151      	lsls	r1, r2, #5
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	440a      	add	r2, r1
 8004190:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004194:	f043 0302 	orr.w	r3, r3, #2
 8004198:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	212c      	movs	r1, #44	; 0x2c
 80041a0:	fb01 f303 	mul.w	r3, r1, r3
 80041a4:	4413      	add	r3, r2
 80041a6:	3361      	adds	r3, #97	; 0x61
 80041a8:	2205      	movs	r2, #5
 80041aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b8:	461a      	mov	r2, r3
 80041ba:	2310      	movs	r3, #16
 80041bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ca:	461a      	mov	r2, r3
 80041cc:	2308      	movs	r3, #8
 80041ce:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	4611      	mov	r1, r2
 80041da:	4618      	mov	r0, r3
 80041dc:	f004 fa59 	bl	8008692 <USB_HC_Halt>
 80041e0:	e075      	b.n	80042ce <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f8:	d134      	bne.n	8004264 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	4413      	add	r3, r2
 8004202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	0151      	lsls	r1, r2, #5
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	440a      	add	r2, r1
 8004210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004214:	f043 0302 	orr.w	r3, r3, #2
 8004218:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	212c      	movs	r1, #44	; 0x2c
 8004220:	fb01 f303 	mul.w	r3, r1, r3
 8004224:	4413      	add	r3, r2
 8004226:	3361      	adds	r3, #97	; 0x61
 8004228:	2208      	movs	r2, #8
 800422a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	4413      	add	r3, r2
 8004234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004238:	461a      	mov	r2, r3
 800423a:	2310      	movs	r3, #16
 800423c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	4413      	add	r3, r2
 8004246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424a:	461a      	mov	r2, r3
 800424c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004250:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	4611      	mov	r1, r2
 800425c:	4618      	mov	r0, r3
 800425e:	f004 fa18 	bl	8008692 <USB_HC_Halt>
 8004262:	e034      	b.n	80042ce <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4413      	add	r3, r2
 800426c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004276:	2b80      	cmp	r3, #128	; 0x80
 8004278:	d129      	bne.n	80042ce <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	4413      	add	r3, r2
 8004282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	0151      	lsls	r1, r2, #5
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	440a      	add	r2, r1
 8004290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004294:	f043 0302 	orr.w	r3, r3, #2
 8004298:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	212c      	movs	r1, #44	; 0x2c
 80042a0:	fb01 f303 	mul.w	r3, r1, r3
 80042a4:	4413      	add	r3, r2
 80042a6:	3361      	adds	r3, #97	; 0x61
 80042a8:	2206      	movs	r2, #6
 80042aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	4611      	mov	r1, r2
 80042b6:	4618      	mov	r0, r3
 80042b8:	f004 f9eb 	bl	8008692 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c8:	461a      	mov	r2, r3
 80042ca:	2380      	movs	r3, #128	; 0x80
 80042cc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042e4:	d122      	bne.n	800432c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	0151      	lsls	r1, r2, #5
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	440a      	add	r2, r1
 80042fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004300:	f043 0302 	orr.w	r3, r3, #2
 8004304:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	4611      	mov	r1, r2
 8004310:	4618      	mov	r0, r3
 8004312:	f004 f9be 	bl	8008692 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4413      	add	r3, r2
 800431e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004322:	461a      	mov	r2, r3
 8004324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004328:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800432a:	e2ba      	b.n	80048a2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	4413      	add	r3, r2
 8004334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b01      	cmp	r3, #1
 8004340:	f040 811b 	bne.w	800457a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d019      	beq.n	8004380 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	212c      	movs	r1, #44	; 0x2c
 8004352:	fb01 f303 	mul.w	r3, r1, r3
 8004356:	4413      	add	r3, r2
 8004358:	3348      	adds	r3, #72	; 0x48
 800435a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	0159      	lsls	r1, r3, #5
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	440b      	add	r3, r1
 8004364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800436e:	1ad2      	subs	r2, r2, r3
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	202c      	movs	r0, #44	; 0x2c
 8004376:	fb00 f303 	mul.w	r3, r0, r3
 800437a:	440b      	add	r3, r1
 800437c:	3350      	adds	r3, #80	; 0x50
 800437e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	212c      	movs	r1, #44	; 0x2c
 8004386:	fb01 f303 	mul.w	r3, r1, r3
 800438a:	4413      	add	r3, r2
 800438c:	3361      	adds	r3, #97	; 0x61
 800438e:	2201      	movs	r2, #1
 8004390:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	212c      	movs	r1, #44	; 0x2c
 8004398:	fb01 f303 	mul.w	r3, r1, r3
 800439c:	4413      	add	r3, r2
 800439e:	335c      	adds	r3, #92	; 0x5c
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b0:	461a      	mov	r2, r3
 80043b2:	2301      	movs	r3, #1
 80043b4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	212c      	movs	r1, #44	; 0x2c
 80043bc:	fb01 f303 	mul.w	r3, r1, r3
 80043c0:	4413      	add	r3, r2
 80043c2:	333f      	adds	r3, #63	; 0x3f
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d009      	beq.n	80043de <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	212c      	movs	r1, #44	; 0x2c
 80043d0:	fb01 f303 	mul.w	r3, r1, r3
 80043d4:	4413      	add	r3, r2
 80043d6:	333f      	adds	r3, #63	; 0x3f
 80043d8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d121      	bne.n	8004422 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	0151      	lsls	r1, r2, #5
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	440a      	add	r2, r1
 80043f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043f8:	f043 0302 	orr.w	r3, r3, #2
 80043fc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	4611      	mov	r1, r2
 8004408:	4618      	mov	r0, r3
 800440a:	f004 f942 	bl	8008692 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	4413      	add	r3, r2
 8004416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800441a:	461a      	mov	r2, r3
 800441c:	2310      	movs	r3, #16
 800441e:	6093      	str	r3, [r2, #8]
 8004420:	e066      	b.n	80044f0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	212c      	movs	r1, #44	; 0x2c
 8004428:	fb01 f303 	mul.w	r3, r1, r3
 800442c:	4413      	add	r3, r2
 800442e:	333f      	adds	r3, #63	; 0x3f
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b03      	cmp	r3, #3
 8004434:	d127      	bne.n	8004486 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	4413      	add	r3, r2
 800443e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	0151      	lsls	r1, r2, #5
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	440a      	add	r2, r1
 800444c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004450:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004454:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	212c      	movs	r1, #44	; 0x2c
 800445c:	fb01 f303 	mul.w	r3, r1, r3
 8004460:	4413      	add	r3, r2
 8004462:	3360      	adds	r3, #96	; 0x60
 8004464:	2201      	movs	r2, #1
 8004466:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	b2d9      	uxtb	r1, r3
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	202c      	movs	r0, #44	; 0x2c
 8004472:	fb00 f303 	mul.w	r3, r0, r3
 8004476:	4413      	add	r3, r2
 8004478:	3360      	adds	r3, #96	; 0x60
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f00a fbf0 	bl	800ec64 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004484:	e034      	b.n	80044f0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	212c      	movs	r1, #44	; 0x2c
 800448c:	fb01 f303 	mul.w	r3, r1, r3
 8004490:	4413      	add	r3, r2
 8004492:	333f      	adds	r3, #63	; 0x3f
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d12a      	bne.n	80044f0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	212c      	movs	r1, #44	; 0x2c
 80044a0:	fb01 f303 	mul.w	r3, r1, r3
 80044a4:	4413      	add	r3, r2
 80044a6:	3360      	adds	r3, #96	; 0x60
 80044a8:	2201      	movs	r2, #1
 80044aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	212c      	movs	r1, #44	; 0x2c
 80044b2:	fb01 f303 	mul.w	r3, r1, r3
 80044b6:	4413      	add	r3, r2
 80044b8:	3354      	adds	r3, #84	; 0x54
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	f083 0301 	eor.w	r3, r3, #1
 80044c0:	b2d8      	uxtb	r0, r3
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	212c      	movs	r1, #44	; 0x2c
 80044c8:	fb01 f303 	mul.w	r3, r1, r3
 80044cc:	4413      	add	r3, r2
 80044ce:	3354      	adds	r3, #84	; 0x54
 80044d0:	4602      	mov	r2, r0
 80044d2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	b2d9      	uxtb	r1, r3
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	202c      	movs	r0, #44	; 0x2c
 80044de:	fb00 f303 	mul.w	r3, r0, r3
 80044e2:	4413      	add	r3, r2
 80044e4:	3360      	adds	r3, #96	; 0x60
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f00a fbba 	bl	800ec64 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d12b      	bne.n	8004550 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	212c      	movs	r1, #44	; 0x2c
 80044fe:	fb01 f303 	mul.w	r3, r1, r3
 8004502:	4413      	add	r3, r2
 8004504:	3348      	adds	r3, #72	; 0x48
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	202c      	movs	r0, #44	; 0x2c
 800450e:	fb00 f202 	mul.w	r2, r0, r2
 8004512:	440a      	add	r2, r1
 8004514:	3240      	adds	r2, #64	; 0x40
 8004516:	8812      	ldrh	r2, [r2, #0]
 8004518:	fbb3 f3f2 	udiv	r3, r3, r2
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 81be 	beq.w	80048a2 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	212c      	movs	r1, #44	; 0x2c
 800452c:	fb01 f303 	mul.w	r3, r1, r3
 8004530:	4413      	add	r3, r2
 8004532:	3354      	adds	r3, #84	; 0x54
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	f083 0301 	eor.w	r3, r3, #1
 800453a:	b2d8      	uxtb	r0, r3
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	212c      	movs	r1, #44	; 0x2c
 8004542:	fb01 f303 	mul.w	r3, r1, r3
 8004546:	4413      	add	r3, r2
 8004548:	3354      	adds	r3, #84	; 0x54
 800454a:	4602      	mov	r2, r0
 800454c:	701a      	strb	r2, [r3, #0]
}
 800454e:	e1a8      	b.n	80048a2 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	212c      	movs	r1, #44	; 0x2c
 8004556:	fb01 f303 	mul.w	r3, r1, r3
 800455a:	4413      	add	r3, r2
 800455c:	3354      	adds	r3, #84	; 0x54
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	f083 0301 	eor.w	r3, r3, #1
 8004564:	b2d8      	uxtb	r0, r3
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	212c      	movs	r1, #44	; 0x2c
 800456c:	fb01 f303 	mul.w	r3, r1, r3
 8004570:	4413      	add	r3, r2
 8004572:	3354      	adds	r3, #84	; 0x54
 8004574:	4602      	mov	r2, r0
 8004576:	701a      	strb	r2, [r3, #0]
}
 8004578:	e193      	b.n	80048a2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4413      	add	r3, r2
 8004582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b02      	cmp	r3, #2
 800458e:	f040 8106 	bne.w	800479e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	4413      	add	r3, r2
 800459a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	0151      	lsls	r1, r2, #5
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	440a      	add	r2, r1
 80045a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045ac:	f023 0302 	bic.w	r3, r3, #2
 80045b0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	212c      	movs	r1, #44	; 0x2c
 80045b8:	fb01 f303 	mul.w	r3, r1, r3
 80045bc:	4413      	add	r3, r2
 80045be:	3361      	adds	r3, #97	; 0x61
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d109      	bne.n	80045da <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	212c      	movs	r1, #44	; 0x2c
 80045cc:	fb01 f303 	mul.w	r3, r1, r3
 80045d0:	4413      	add	r3, r2
 80045d2:	3360      	adds	r3, #96	; 0x60
 80045d4:	2201      	movs	r2, #1
 80045d6:	701a      	strb	r2, [r3, #0]
 80045d8:	e0c9      	b.n	800476e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	212c      	movs	r1, #44	; 0x2c
 80045e0:	fb01 f303 	mul.w	r3, r1, r3
 80045e4:	4413      	add	r3, r2
 80045e6:	3361      	adds	r3, #97	; 0x61
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	2b05      	cmp	r3, #5
 80045ec:	d109      	bne.n	8004602 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	212c      	movs	r1, #44	; 0x2c
 80045f4:	fb01 f303 	mul.w	r3, r1, r3
 80045f8:	4413      	add	r3, r2
 80045fa:	3360      	adds	r3, #96	; 0x60
 80045fc:	2205      	movs	r2, #5
 80045fe:	701a      	strb	r2, [r3, #0]
 8004600:	e0b5      	b.n	800476e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	212c      	movs	r1, #44	; 0x2c
 8004608:	fb01 f303 	mul.w	r3, r1, r3
 800460c:	4413      	add	r3, r2
 800460e:	3361      	adds	r3, #97	; 0x61
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b06      	cmp	r3, #6
 8004614:	d009      	beq.n	800462a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	212c      	movs	r1, #44	; 0x2c
 800461c:	fb01 f303 	mul.w	r3, r1, r3
 8004620:	4413      	add	r3, r2
 8004622:	3361      	adds	r3, #97	; 0x61
 8004624:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004626:	2b08      	cmp	r3, #8
 8004628:	d150      	bne.n	80046cc <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	212c      	movs	r1, #44	; 0x2c
 8004630:	fb01 f303 	mul.w	r3, r1, r3
 8004634:	4413      	add	r3, r2
 8004636:	335c      	adds	r3, #92	; 0x5c
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	202c      	movs	r0, #44	; 0x2c
 8004642:	fb00 f303 	mul.w	r3, r0, r3
 8004646:	440b      	add	r3, r1
 8004648:	335c      	adds	r3, #92	; 0x5c
 800464a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	212c      	movs	r1, #44	; 0x2c
 8004652:	fb01 f303 	mul.w	r3, r1, r3
 8004656:	4413      	add	r3, r2
 8004658:	335c      	adds	r3, #92	; 0x5c
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d912      	bls.n	8004686 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	212c      	movs	r1, #44	; 0x2c
 8004666:	fb01 f303 	mul.w	r3, r1, r3
 800466a:	4413      	add	r3, r2
 800466c:	335c      	adds	r3, #92	; 0x5c
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	212c      	movs	r1, #44	; 0x2c
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	4413      	add	r3, r2
 800467e:	3360      	adds	r3, #96	; 0x60
 8004680:	2204      	movs	r2, #4
 8004682:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004684:	e073      	b.n	800476e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	212c      	movs	r1, #44	; 0x2c
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	4413      	add	r3, r2
 8004692:	3360      	adds	r3, #96	; 0x60
 8004694:	2202      	movs	r2, #2
 8004696:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046ae:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046b6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c4:	461a      	mov	r2, r3
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80046ca:	e050      	b.n	800476e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	212c      	movs	r1, #44	; 0x2c
 80046d2:	fb01 f303 	mul.w	r3, r1, r3
 80046d6:	4413      	add	r3, r2
 80046d8:	3361      	adds	r3, #97	; 0x61
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b03      	cmp	r3, #3
 80046de:	d122      	bne.n	8004726 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	212c      	movs	r1, #44	; 0x2c
 80046e6:	fb01 f303 	mul.w	r3, r1, r3
 80046ea:	4413      	add	r3, r2
 80046ec:	3360      	adds	r3, #96	; 0x60
 80046ee:	2202      	movs	r2, #2
 80046f0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004708:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004710:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	4413      	add	r3, r2
 800471a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800471e:	461a      	mov	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	e023      	b.n	800476e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	212c      	movs	r1, #44	; 0x2c
 800472c:	fb01 f303 	mul.w	r3, r1, r3
 8004730:	4413      	add	r3, r2
 8004732:	3361      	adds	r3, #97	; 0x61
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	2b07      	cmp	r3, #7
 8004738:	d119      	bne.n	800476e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	212c      	movs	r1, #44	; 0x2c
 8004740:	fb01 f303 	mul.w	r3, r1, r3
 8004744:	4413      	add	r3, r2
 8004746:	335c      	adds	r3, #92	; 0x5c
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	202c      	movs	r0, #44	; 0x2c
 8004752:	fb00 f303 	mul.w	r3, r0, r3
 8004756:	440b      	add	r3, r1
 8004758:	335c      	adds	r3, #92	; 0x5c
 800475a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	212c      	movs	r1, #44	; 0x2c
 8004762:	fb01 f303 	mul.w	r3, r1, r3
 8004766:	4413      	add	r3, r2
 8004768:	3360      	adds	r3, #96	; 0x60
 800476a:	2204      	movs	r2, #4
 800476c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	4413      	add	r3, r2
 8004776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800477a:	461a      	mov	r2, r3
 800477c:	2302      	movs	r3, #2
 800477e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	b2d9      	uxtb	r1, r3
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	202c      	movs	r0, #44	; 0x2c
 800478a:	fb00 f303 	mul.w	r3, r0, r3
 800478e:	4413      	add	r3, r2
 8004790:	3360      	adds	r3, #96	; 0x60
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	461a      	mov	r2, r3
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f00a fa64 	bl	800ec64 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800479c:	e081      	b.n	80048a2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 0310 	and.w	r3, r3, #16
 80047b0:	2b10      	cmp	r3, #16
 80047b2:	d176      	bne.n	80048a2 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	212c      	movs	r1, #44	; 0x2c
 80047ba:	fb01 f303 	mul.w	r3, r1, r3
 80047be:	4413      	add	r3, r2
 80047c0:	333f      	adds	r3, #63	; 0x3f
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	d121      	bne.n	800480c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	212c      	movs	r1, #44	; 0x2c
 80047ce:	fb01 f303 	mul.w	r3, r1, r3
 80047d2:	4413      	add	r3, r2
 80047d4:	335c      	adds	r3, #92	; 0x5c
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	0151      	lsls	r1, r2, #5
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	440a      	add	r2, r1
 80047f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047f4:	f043 0302 	orr.w	r3, r3, #2
 80047f8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	4611      	mov	r1, r2
 8004804:	4618      	mov	r0, r3
 8004806:	f003 ff44 	bl	8008692 <USB_HC_Halt>
 800480a:	e041      	b.n	8004890 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	212c      	movs	r1, #44	; 0x2c
 8004812:	fb01 f303 	mul.w	r3, r1, r3
 8004816:	4413      	add	r3, r2
 8004818:	333f      	adds	r3, #63	; 0x3f
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d009      	beq.n	8004834 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	212c      	movs	r1, #44	; 0x2c
 8004826:	fb01 f303 	mul.w	r3, r1, r3
 800482a:	4413      	add	r3, r2
 800482c:	333f      	adds	r3, #63	; 0x3f
 800482e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004830:	2b02      	cmp	r3, #2
 8004832:	d12d      	bne.n	8004890 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	212c      	movs	r1, #44	; 0x2c
 800483a:	fb01 f303 	mul.w	r3, r1, r3
 800483e:	4413      	add	r3, r2
 8004840:	335c      	adds	r3, #92	; 0x5c
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d120      	bne.n	8004890 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	212c      	movs	r1, #44	; 0x2c
 8004854:	fb01 f303 	mul.w	r3, r1, r3
 8004858:	4413      	add	r3, r2
 800485a:	3361      	adds	r3, #97	; 0x61
 800485c:	2203      	movs	r2, #3
 800485e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	4413      	add	r3, r2
 8004868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	0151      	lsls	r1, r2, #5
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	440a      	add	r2, r1
 8004876:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800487a:	f043 0302 	orr.w	r3, r3, #2
 800487e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	4611      	mov	r1, r2
 800488a:	4618      	mov	r0, r3
 800488c:	f003 ff01 	bl	8008692 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	4413      	add	r3, r2
 8004898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489c:	461a      	mov	r2, r3
 800489e:	2310      	movs	r3, #16
 80048a0:	6093      	str	r3, [r2, #8]
}
 80048a2:	bf00      	nop
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b088      	sub	sp, #32
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	460b      	mov	r3, r1
 80048b4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d119      	bne.n	800490e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e6:	461a      	mov	r2, r3
 80048e8:	2304      	movs	r3, #4
 80048ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	0151      	lsls	r1, r2, #5
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	440a      	add	r2, r1
 8004902:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004906:	f043 0302 	orr.w	r3, r3, #2
 800490a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800490c:	e3ca      	b.n	80050a4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	4413      	add	r3, r2
 8004916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 0320 	and.w	r3, r3, #32
 8004920:	2b20      	cmp	r3, #32
 8004922:	d13e      	bne.n	80049a2 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	4413      	add	r3, r2
 800492c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004930:	461a      	mov	r2, r3
 8004932:	2320      	movs	r3, #32
 8004934:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	212c      	movs	r1, #44	; 0x2c
 800493c:	fb01 f303 	mul.w	r3, r1, r3
 8004940:	4413      	add	r3, r2
 8004942:	333d      	adds	r3, #61	; 0x3d
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b01      	cmp	r3, #1
 8004948:	f040 83ac 	bne.w	80050a4 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	212c      	movs	r1, #44	; 0x2c
 8004952:	fb01 f303 	mul.w	r3, r1, r3
 8004956:	4413      	add	r3, r2
 8004958:	333d      	adds	r3, #61	; 0x3d
 800495a:	2200      	movs	r2, #0
 800495c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	212c      	movs	r1, #44	; 0x2c
 8004964:	fb01 f303 	mul.w	r3, r1, r3
 8004968:	4413      	add	r3, r2
 800496a:	3360      	adds	r3, #96	; 0x60
 800496c:	2202      	movs	r2, #2
 800496e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	4413      	add	r3, r2
 8004978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	0151      	lsls	r1, r2, #5
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	440a      	add	r2, r1
 8004986:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800498a:	f043 0302 	orr.w	r3, r3, #2
 800498e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	4611      	mov	r1, r2
 800499a:	4618      	mov	r0, r3
 800499c:	f003 fe79 	bl	8008692 <USB_HC_Halt>
}
 80049a0:	e380      	b.n	80050a4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049b8:	d122      	bne.n	8004a00 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	0151      	lsls	r1, r2, #5
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	440a      	add	r2, r1
 80049d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049d4:	f043 0302 	orr.w	r3, r3, #2
 80049d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	4611      	mov	r1, r2
 80049e4:	4618      	mov	r0, r3
 80049e6:	f003 fe54 	bl	8008692 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f6:	461a      	mov	r2, r3
 80049f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049fc:	6093      	str	r3, [r2, #8]
}
 80049fe:	e351      	b.n	80050a4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d150      	bne.n	8004ab8 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	212c      	movs	r1, #44	; 0x2c
 8004a1c:	fb01 f303 	mul.w	r3, r1, r3
 8004a20:	4413      	add	r3, r2
 8004a22:	335c      	adds	r3, #92	; 0x5c
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3a:	2b40      	cmp	r3, #64	; 0x40
 8004a3c:	d111      	bne.n	8004a62 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	212c      	movs	r1, #44	; 0x2c
 8004a44:	fb01 f303 	mul.w	r3, r1, r3
 8004a48:	4413      	add	r3, r2
 8004a4a:	333d      	adds	r3, #61	; 0x3d
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	2340      	movs	r3, #64	; 0x40
 8004a60:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	0151      	lsls	r1, r2, #5
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	440a      	add	r2, r1
 8004a78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a7c:	f043 0302 	orr.w	r3, r3, #2
 8004a80:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f003 fe00 	bl	8008692 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	212c      	movs	r1, #44	; 0x2c
 8004aaa:	fb01 f303 	mul.w	r3, r1, r3
 8004aae:	4413      	add	r3, r2
 8004ab0:	3361      	adds	r3, #97	; 0x61
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	701a      	strb	r2, [r3, #0]
}
 8004ab6:	e2f5      	b.n	80050a4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aca:	2b40      	cmp	r3, #64	; 0x40
 8004acc:	d13c      	bne.n	8004b48 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	212c      	movs	r1, #44	; 0x2c
 8004ad4:	fb01 f303 	mul.w	r3, r1, r3
 8004ad8:	4413      	add	r3, r2
 8004ada:	3361      	adds	r3, #97	; 0x61
 8004adc:	2204      	movs	r2, #4
 8004ade:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	212c      	movs	r1, #44	; 0x2c
 8004ae6:	fb01 f303 	mul.w	r3, r1, r3
 8004aea:	4413      	add	r3, r2
 8004aec:	333d      	adds	r3, #61	; 0x3d
 8004aee:	2201      	movs	r2, #1
 8004af0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	212c      	movs	r1, #44	; 0x2c
 8004af8:	fb01 f303 	mul.w	r3, r1, r3
 8004afc:	4413      	add	r3, r2
 8004afe:	335c      	adds	r3, #92	; 0x5c
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	0151      	lsls	r1, r2, #5
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	440a      	add	r2, r1
 8004b1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b1e:	f043 0302 	orr.w	r3, r3, #2
 8004b22:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f003 fdaf 	bl	8008692 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b40:	461a      	mov	r2, r3
 8004b42:	2340      	movs	r3, #64	; 0x40
 8004b44:	6093      	str	r3, [r2, #8]
}
 8004b46:	e2ad      	b.n	80050a4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d12a      	bne.n	8004bb4 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	2308      	movs	r3, #8
 8004b6e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	0151      	lsls	r1, r2, #5
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	440a      	add	r2, r1
 8004b86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b8a:	f043 0302 	orr.w	r3, r3, #2
 8004b8e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	4611      	mov	r1, r2
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f003 fd79 	bl	8008692 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	212c      	movs	r1, #44	; 0x2c
 8004ba6:	fb01 f303 	mul.w	r3, r1, r3
 8004baa:	4413      	add	r3, r2
 8004bac:	3361      	adds	r3, #97	; 0x61
 8004bae:	2205      	movs	r2, #5
 8004bb0:	701a      	strb	r2, [r3, #0]
}
 8004bb2:	e277      	b.n	80050a4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 0310 	and.w	r3, r3, #16
 8004bc6:	2b10      	cmp	r3, #16
 8004bc8:	d150      	bne.n	8004c6c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	212c      	movs	r1, #44	; 0x2c
 8004bd0:	fb01 f303 	mul.w	r3, r1, r3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	335c      	adds	r3, #92	; 0x5c
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	212c      	movs	r1, #44	; 0x2c
 8004be2:	fb01 f303 	mul.w	r3, r1, r3
 8004be6:	4413      	add	r3, r2
 8004be8:	3361      	adds	r3, #97	; 0x61
 8004bea:	2203      	movs	r2, #3
 8004bec:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	212c      	movs	r1, #44	; 0x2c
 8004bf4:	fb01 f303 	mul.w	r3, r1, r3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	333d      	adds	r3, #61	; 0x3d
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d112      	bne.n	8004c28 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	212c      	movs	r1, #44	; 0x2c
 8004c08:	fb01 f303 	mul.w	r3, r1, r3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	333c      	adds	r3, #60	; 0x3c
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d108      	bne.n	8004c28 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	212c      	movs	r1, #44	; 0x2c
 8004c1c:	fb01 f303 	mul.w	r3, r1, r3
 8004c20:	4413      	add	r3, r2
 8004c22:	333d      	adds	r3, #61	; 0x3d
 8004c24:	2201      	movs	r2, #1
 8004c26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	0151      	lsls	r1, r2, #5
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	440a      	add	r2, r1
 8004c3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c42:	f043 0302 	orr.w	r3, r3, #2
 8004c46:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	4611      	mov	r1, r2
 8004c52:	4618      	mov	r0, r3
 8004c54:	f003 fd1d 	bl	8008692 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c64:	461a      	mov	r2, r3
 8004c66:	2310      	movs	r3, #16
 8004c68:	6093      	str	r3, [r2, #8]
}
 8004c6a:	e21b      	b.n	80050a4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7e:	2b80      	cmp	r3, #128	; 0x80
 8004c80:	d174      	bne.n	8004d6c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d121      	bne.n	8004cce <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	212c      	movs	r1, #44	; 0x2c
 8004c90:	fb01 f303 	mul.w	r3, r1, r3
 8004c94:	4413      	add	r3, r2
 8004c96:	3361      	adds	r3, #97	; 0x61
 8004c98:	2206      	movs	r2, #6
 8004c9a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	0151      	lsls	r1, r2, #5
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	440a      	add	r2, r1
 8004cb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cb6:	f043 0302 	orr.w	r3, r3, #2
 8004cba:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	4611      	mov	r1, r2
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f003 fce3 	bl	8008692 <USB_HC_Halt>
 8004ccc:	e044      	b.n	8004d58 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	212c      	movs	r1, #44	; 0x2c
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	4413      	add	r3, r2
 8004cda:	335c      	adds	r3, #92	; 0x5c
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	202c      	movs	r0, #44	; 0x2c
 8004ce6:	fb00 f303 	mul.w	r3, r0, r3
 8004cea:	440b      	add	r3, r1
 8004cec:	335c      	adds	r3, #92	; 0x5c
 8004cee:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	212c      	movs	r1, #44	; 0x2c
 8004cf6:	fb01 f303 	mul.w	r3, r1, r3
 8004cfa:	4413      	add	r3, r2
 8004cfc:	335c      	adds	r3, #92	; 0x5c
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d920      	bls.n	8004d46 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	212c      	movs	r1, #44	; 0x2c
 8004d0a:	fb01 f303 	mul.w	r3, r1, r3
 8004d0e:	4413      	add	r3, r2
 8004d10:	335c      	adds	r3, #92	; 0x5c
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	212c      	movs	r1, #44	; 0x2c
 8004d1c:	fb01 f303 	mul.w	r3, r1, r3
 8004d20:	4413      	add	r3, r2
 8004d22:	3360      	adds	r3, #96	; 0x60
 8004d24:	2204      	movs	r2, #4
 8004d26:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	b2d9      	uxtb	r1, r3
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	202c      	movs	r0, #44	; 0x2c
 8004d32:	fb00 f303 	mul.w	r3, r0, r3
 8004d36:	4413      	add	r3, r2
 8004d38:	3360      	adds	r3, #96	; 0x60
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f009 ff90 	bl	800ec64 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004d44:	e008      	b.n	8004d58 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	212c      	movs	r1, #44	; 0x2c
 8004d4c:	fb01 f303 	mul.w	r3, r1, r3
 8004d50:	4413      	add	r3, r2
 8004d52:	3360      	adds	r3, #96	; 0x60
 8004d54:	2202      	movs	r2, #2
 8004d56:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d64:	461a      	mov	r2, r3
 8004d66:	2380      	movs	r3, #128	; 0x80
 8004d68:	6093      	str	r3, [r2, #8]
}
 8004d6a:	e19b      	b.n	80050a4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d82:	d134      	bne.n	8004dee <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	0151      	lsls	r1, r2, #5
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	440a      	add	r2, r1
 8004d9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d9e:	f043 0302 	orr.w	r3, r3, #2
 8004da2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	4611      	mov	r1, r2
 8004dae:	4618      	mov	r0, r3
 8004db0:	f003 fc6f 	bl	8008692 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	2310      	movs	r3, #16
 8004dc4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dd8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	212c      	movs	r1, #44	; 0x2c
 8004de0:	fb01 f303 	mul.w	r3, r1, r3
 8004de4:	4413      	add	r3, r2
 8004de6:	3361      	adds	r3, #97	; 0x61
 8004de8:	2208      	movs	r2, #8
 8004dea:	701a      	strb	r2, [r3, #0]
}
 8004dec:	e15a      	b.n	80050a4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	f040 814f 	bne.w	80050a4 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	0151      	lsls	r1, r2, #5
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	440a      	add	r2, r1
 8004e1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e20:	f023 0302 	bic.w	r3, r3, #2
 8004e24:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	212c      	movs	r1, #44	; 0x2c
 8004e2c:	fb01 f303 	mul.w	r3, r1, r3
 8004e30:	4413      	add	r3, r2
 8004e32:	3361      	adds	r3, #97	; 0x61
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d17d      	bne.n	8004f36 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	212c      	movs	r1, #44	; 0x2c
 8004e40:	fb01 f303 	mul.w	r3, r1, r3
 8004e44:	4413      	add	r3, r2
 8004e46:	3360      	adds	r3, #96	; 0x60
 8004e48:	2201      	movs	r2, #1
 8004e4a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	212c      	movs	r1, #44	; 0x2c
 8004e52:	fb01 f303 	mul.w	r3, r1, r3
 8004e56:	4413      	add	r3, r2
 8004e58:	333f      	adds	r3, #63	; 0x3f
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d00a      	beq.n	8004e76 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	212c      	movs	r1, #44	; 0x2c
 8004e66:	fb01 f303 	mul.w	r3, r1, r3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	333f      	adds	r3, #63	; 0x3f
 8004e6e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004e70:	2b03      	cmp	r3, #3
 8004e72:	f040 8100 	bne.w	8005076 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d113      	bne.n	8004ea6 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	212c      	movs	r1, #44	; 0x2c
 8004e84:	fb01 f303 	mul.w	r3, r1, r3
 8004e88:	4413      	add	r3, r2
 8004e8a:	3355      	adds	r3, #85	; 0x55
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	f083 0301 	eor.w	r3, r3, #1
 8004e92:	b2d8      	uxtb	r0, r3
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	212c      	movs	r1, #44	; 0x2c
 8004e9a:	fb01 f303 	mul.w	r3, r1, r3
 8004e9e:	4413      	add	r3, r2
 8004ea0:	3355      	adds	r3, #85	; 0x55
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	f040 80e3 	bne.w	8005076 <HCD_HC_OUT_IRQHandler+0x7cc>
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	212c      	movs	r1, #44	; 0x2c
 8004eb6:	fb01 f303 	mul.w	r3, r1, r3
 8004eba:	4413      	add	r3, r2
 8004ebc:	334c      	adds	r3, #76	; 0x4c
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 80d8 	beq.w	8005076 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	212c      	movs	r1, #44	; 0x2c
 8004ecc:	fb01 f303 	mul.w	r3, r1, r3
 8004ed0:	4413      	add	r3, r2
 8004ed2:	334c      	adds	r3, #76	; 0x4c
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	202c      	movs	r0, #44	; 0x2c
 8004edc:	fb00 f202 	mul.w	r2, r0, r2
 8004ee0:	440a      	add	r2, r1
 8004ee2:	3240      	adds	r2, #64	; 0x40
 8004ee4:	8812      	ldrh	r2, [r2, #0]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	6879      	ldr	r1, [r7, #4]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	202c      	movs	r0, #44	; 0x2c
 8004ef0:	fb00 f202 	mul.w	r2, r0, r2
 8004ef4:	440a      	add	r2, r1
 8004ef6:	3240      	adds	r2, #64	; 0x40
 8004ef8:	8812      	ldrh	r2, [r2, #0]
 8004efa:	fbb3 f3f2 	udiv	r3, r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 80b5 	beq.w	8005076 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	212c      	movs	r1, #44	; 0x2c
 8004f12:	fb01 f303 	mul.w	r3, r1, r3
 8004f16:	4413      	add	r3, r2
 8004f18:	3355      	adds	r3, #85	; 0x55
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	f083 0301 	eor.w	r3, r3, #1
 8004f20:	b2d8      	uxtb	r0, r3
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	212c      	movs	r1, #44	; 0x2c
 8004f28:	fb01 f303 	mul.w	r3, r1, r3
 8004f2c:	4413      	add	r3, r2
 8004f2e:	3355      	adds	r3, #85	; 0x55
 8004f30:	4602      	mov	r2, r0
 8004f32:	701a      	strb	r2, [r3, #0]
 8004f34:	e09f      	b.n	8005076 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	212c      	movs	r1, #44	; 0x2c
 8004f3c:	fb01 f303 	mul.w	r3, r1, r3
 8004f40:	4413      	add	r3, r2
 8004f42:	3361      	adds	r3, #97	; 0x61
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d109      	bne.n	8004f5e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	212c      	movs	r1, #44	; 0x2c
 8004f50:	fb01 f303 	mul.w	r3, r1, r3
 8004f54:	4413      	add	r3, r2
 8004f56:	3360      	adds	r3, #96	; 0x60
 8004f58:	2202      	movs	r2, #2
 8004f5a:	701a      	strb	r2, [r3, #0]
 8004f5c:	e08b      	b.n	8005076 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	212c      	movs	r1, #44	; 0x2c
 8004f64:	fb01 f303 	mul.w	r3, r1, r3
 8004f68:	4413      	add	r3, r2
 8004f6a:	3361      	adds	r3, #97	; 0x61
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d109      	bne.n	8004f86 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	212c      	movs	r1, #44	; 0x2c
 8004f78:	fb01 f303 	mul.w	r3, r1, r3
 8004f7c:	4413      	add	r3, r2
 8004f7e:	3360      	adds	r3, #96	; 0x60
 8004f80:	2202      	movs	r2, #2
 8004f82:	701a      	strb	r2, [r3, #0]
 8004f84:	e077      	b.n	8005076 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	212c      	movs	r1, #44	; 0x2c
 8004f8c:	fb01 f303 	mul.w	r3, r1, r3
 8004f90:	4413      	add	r3, r2
 8004f92:	3361      	adds	r3, #97	; 0x61
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	2b05      	cmp	r3, #5
 8004f98:	d109      	bne.n	8004fae <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	212c      	movs	r1, #44	; 0x2c
 8004fa0:	fb01 f303 	mul.w	r3, r1, r3
 8004fa4:	4413      	add	r3, r2
 8004fa6:	3360      	adds	r3, #96	; 0x60
 8004fa8:	2205      	movs	r2, #5
 8004faa:	701a      	strb	r2, [r3, #0]
 8004fac:	e063      	b.n	8005076 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	212c      	movs	r1, #44	; 0x2c
 8004fb4:	fb01 f303 	mul.w	r3, r1, r3
 8004fb8:	4413      	add	r3, r2
 8004fba:	3361      	adds	r3, #97	; 0x61
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b06      	cmp	r3, #6
 8004fc0:	d009      	beq.n	8004fd6 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	212c      	movs	r1, #44	; 0x2c
 8004fc8:	fb01 f303 	mul.w	r3, r1, r3
 8004fcc:	4413      	add	r3, r2
 8004fce:	3361      	adds	r3, #97	; 0x61
 8004fd0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004fd2:	2b08      	cmp	r3, #8
 8004fd4:	d14f      	bne.n	8005076 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	212c      	movs	r1, #44	; 0x2c
 8004fdc:	fb01 f303 	mul.w	r3, r1, r3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	335c      	adds	r3, #92	; 0x5c
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	6879      	ldr	r1, [r7, #4]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	202c      	movs	r0, #44	; 0x2c
 8004fee:	fb00 f303 	mul.w	r3, r0, r3
 8004ff2:	440b      	add	r3, r1
 8004ff4:	335c      	adds	r3, #92	; 0x5c
 8004ff6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	212c      	movs	r1, #44	; 0x2c
 8004ffe:	fb01 f303 	mul.w	r3, r1, r3
 8005002:	4413      	add	r3, r2
 8005004:	335c      	adds	r3, #92	; 0x5c
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b02      	cmp	r3, #2
 800500a:	d912      	bls.n	8005032 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	212c      	movs	r1, #44	; 0x2c
 8005012:	fb01 f303 	mul.w	r3, r1, r3
 8005016:	4413      	add	r3, r2
 8005018:	335c      	adds	r3, #92	; 0x5c
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	212c      	movs	r1, #44	; 0x2c
 8005024:	fb01 f303 	mul.w	r3, r1, r3
 8005028:	4413      	add	r3, r2
 800502a:	3360      	adds	r3, #96	; 0x60
 800502c:	2204      	movs	r2, #4
 800502e:	701a      	strb	r2, [r3, #0]
 8005030:	e021      	b.n	8005076 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	212c      	movs	r1, #44	; 0x2c
 8005038:	fb01 f303 	mul.w	r3, r1, r3
 800503c:	4413      	add	r3, r2
 800503e:	3360      	adds	r3, #96	; 0x60
 8005040:	2202      	movs	r2, #2
 8005042:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	4413      	add	r3, r2
 800504c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800505a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005062:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	4413      	add	r3, r2
 800506c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005070:	461a      	mov	r2, r3
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	4413      	add	r3, r2
 800507e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005082:	461a      	mov	r2, r3
 8005084:	2302      	movs	r3, #2
 8005086:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	b2d9      	uxtb	r1, r3
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	202c      	movs	r0, #44	; 0x2c
 8005092:	fb00 f303 	mul.w	r3, r0, r3
 8005096:	4413      	add	r3, r2
 8005098:	3360      	adds	r3, #96	; 0x60
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f009 fde0 	bl	800ec64 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80050a4:	bf00      	nop
 80050a6:	3720      	adds	r7, #32
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08a      	sub	sp, #40	; 0x28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	f003 030f 	and.w	r3, r3, #15
 80050cc:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	0c5b      	lsrs	r3, r3, #17
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	091b      	lsrs	r3, r3, #4
 80050dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050e0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d004      	beq.n	80050f2 <HCD_RXQLVL_IRQHandler+0x46>
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2b05      	cmp	r3, #5
 80050ec:	f000 80a9 	beq.w	8005242 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80050f0:	e0aa      	b.n	8005248 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 80a6 	beq.w	8005246 <HCD_RXQLVL_IRQHandler+0x19a>
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	212c      	movs	r1, #44	; 0x2c
 8005100:	fb01 f303 	mul.w	r3, r1, r3
 8005104:	4413      	add	r3, r2
 8005106:	3344      	adds	r3, #68	; 0x44
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 809b 	beq.w	8005246 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	212c      	movs	r1, #44	; 0x2c
 8005116:	fb01 f303 	mul.w	r3, r1, r3
 800511a:	4413      	add	r3, r2
 800511c:	3350      	adds	r3, #80	; 0x50
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	441a      	add	r2, r3
 8005124:	6879      	ldr	r1, [r7, #4]
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	202c      	movs	r0, #44	; 0x2c
 800512a:	fb00 f303 	mul.w	r3, r0, r3
 800512e:	440b      	add	r3, r1
 8005130:	334c      	adds	r3, #76	; 0x4c
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	429a      	cmp	r2, r3
 8005136:	d87a      	bhi.n	800522e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6818      	ldr	r0, [r3, #0]
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	212c      	movs	r1, #44	; 0x2c
 8005142:	fb01 f303 	mul.w	r3, r1, r3
 8005146:	4413      	add	r3, r2
 8005148:	3344      	adds	r3, #68	; 0x44
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	b292      	uxth	r2, r2
 8005150:	4619      	mov	r1, r3
 8005152:	f002 fe17 	bl	8007d84 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	212c      	movs	r1, #44	; 0x2c
 800515c:	fb01 f303 	mul.w	r3, r1, r3
 8005160:	4413      	add	r3, r2
 8005162:	3344      	adds	r3, #68	; 0x44
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	441a      	add	r2, r3
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	202c      	movs	r0, #44	; 0x2c
 8005170:	fb00 f303 	mul.w	r3, r0, r3
 8005174:	440b      	add	r3, r1
 8005176:	3344      	adds	r3, #68	; 0x44
 8005178:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	212c      	movs	r1, #44	; 0x2c
 8005180:	fb01 f303 	mul.w	r3, r1, r3
 8005184:	4413      	add	r3, r2
 8005186:	3350      	adds	r3, #80	; 0x50
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	441a      	add	r2, r3
 800518e:	6879      	ldr	r1, [r7, #4]
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	202c      	movs	r0, #44	; 0x2c
 8005194:	fb00 f303 	mul.w	r3, r0, r3
 8005198:	440b      	add	r3, r1
 800519a:	3350      	adds	r3, #80	; 0x50
 800519c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	0cdb      	lsrs	r3, r3, #19
 80051ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051b2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	212c      	movs	r1, #44	; 0x2c
 80051ba:	fb01 f303 	mul.w	r3, r1, r3
 80051be:	4413      	add	r3, r2
 80051c0:	3340      	adds	r3, #64	; 0x40
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	461a      	mov	r2, r3
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d13c      	bne.n	8005246 <HCD_RXQLVL_IRQHandler+0x19a>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d039      	beq.n	8005246 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051e8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051f0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fe:	461a      	mov	r2, r3
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	212c      	movs	r1, #44	; 0x2c
 800520a:	fb01 f303 	mul.w	r3, r1, r3
 800520e:	4413      	add	r3, r2
 8005210:	3354      	adds	r3, #84	; 0x54
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	f083 0301 	eor.w	r3, r3, #1
 8005218:	b2d8      	uxtb	r0, r3
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	212c      	movs	r1, #44	; 0x2c
 8005220:	fb01 f303 	mul.w	r3, r1, r3
 8005224:	4413      	add	r3, r2
 8005226:	3354      	adds	r3, #84	; 0x54
 8005228:	4602      	mov	r2, r0
 800522a:	701a      	strb	r2, [r3, #0]
      break;
 800522c:	e00b      	b.n	8005246 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	212c      	movs	r1, #44	; 0x2c
 8005234:	fb01 f303 	mul.w	r3, r1, r3
 8005238:	4413      	add	r3, r2
 800523a:	3360      	adds	r3, #96	; 0x60
 800523c:	2204      	movs	r2, #4
 800523e:	701a      	strb	r2, [r3, #0]
      break;
 8005240:	e001      	b.n	8005246 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005242:	bf00      	nop
 8005244:	e000      	b.n	8005248 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005246:	bf00      	nop
  }
}
 8005248:	bf00      	nop
 800524a:	3728      	adds	r7, #40	; 0x28
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800527c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b02      	cmp	r3, #2
 8005286:	d10b      	bne.n	80052a0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b01      	cmp	r3, #1
 8005290:	d102      	bne.n	8005298 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f009 fcca 	bl	800ec2c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f043 0302 	orr.w	r3, r3, #2
 800529e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	d132      	bne.n	8005310 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f043 0308 	orr.w	r3, r3, #8
 80052b0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	d126      	bne.n	800530a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d113      	bne.n	80052ec <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80052ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052ce:	d106      	bne.n	80052de <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2102      	movs	r1, #2
 80052d6:	4618      	mov	r0, r3
 80052d8:	f002 feb4 	bl	8008044 <USB_InitFSLSPClkSel>
 80052dc:	e011      	b.n	8005302 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2101      	movs	r1, #1
 80052e4:	4618      	mov	r0, r3
 80052e6:	f002 fead 	bl	8008044 <USB_InitFSLSPClkSel>
 80052ea:	e00a      	b.n	8005302 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d106      	bne.n	8005302 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052fa:	461a      	mov	r2, r3
 80052fc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005300:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f009 fcbc 	bl	800ec80 <HAL_HCD_PortEnabled_Callback>
 8005308:	e002      	b.n	8005310 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f009 fcc6 	bl	800ec9c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f003 0320 	and.w	r3, r3, #32
 8005316:	2b20      	cmp	r3, #32
 8005318:	d103      	bne.n	8005322 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	f043 0320 	orr.w	r3, r3, #32
 8005320:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005328:	461a      	mov	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	6013      	str	r3, [r2, #0]
}
 800532e:	bf00      	nop
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e12b      	b.n	80055a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d106      	bne.n	8005364 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7fb fed2 	bl	8001108 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2224      	movs	r2, #36	; 0x24
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0201 	bic.w	r2, r2, #1
 800537a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800538a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800539a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800539c:	f001 ff22 	bl	80071e4 <HAL_RCC_GetPCLK1Freq>
 80053a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	4a81      	ldr	r2, [pc, #516]	; (80055ac <HAL_I2C_Init+0x274>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d807      	bhi.n	80053bc <HAL_I2C_Init+0x84>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4a80      	ldr	r2, [pc, #512]	; (80055b0 <HAL_I2C_Init+0x278>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	bf94      	ite	ls
 80053b4:	2301      	movls	r3, #1
 80053b6:	2300      	movhi	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	e006      	b.n	80053ca <HAL_I2C_Init+0x92>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4a7d      	ldr	r2, [pc, #500]	; (80055b4 <HAL_I2C_Init+0x27c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	bf94      	ite	ls
 80053c4:	2301      	movls	r3, #1
 80053c6:	2300      	movhi	r3, #0
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e0e7      	b.n	80055a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4a78      	ldr	r2, [pc, #480]	; (80055b8 <HAL_I2C_Init+0x280>)
 80053d6:	fba2 2303 	umull	r2, r3, r2, r3
 80053da:	0c9b      	lsrs	r3, r3, #18
 80053dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	4a6a      	ldr	r2, [pc, #424]	; (80055ac <HAL_I2C_Init+0x274>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d802      	bhi.n	800540c <HAL_I2C_Init+0xd4>
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	3301      	adds	r3, #1
 800540a:	e009      	b.n	8005420 <HAL_I2C_Init+0xe8>
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005412:	fb02 f303 	mul.w	r3, r2, r3
 8005416:	4a69      	ldr	r2, [pc, #420]	; (80055bc <HAL_I2C_Init+0x284>)
 8005418:	fba2 2303 	umull	r2, r3, r2, r3
 800541c:	099b      	lsrs	r3, r3, #6
 800541e:	3301      	adds	r3, #1
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6812      	ldr	r2, [r2, #0]
 8005424:	430b      	orrs	r3, r1
 8005426:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005432:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	495c      	ldr	r1, [pc, #368]	; (80055ac <HAL_I2C_Init+0x274>)
 800543c:	428b      	cmp	r3, r1
 800543e:	d819      	bhi.n	8005474 <HAL_I2C_Init+0x13c>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	1e59      	subs	r1, r3, #1
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	fbb1 f3f3 	udiv	r3, r1, r3
 800544e:	1c59      	adds	r1, r3, #1
 8005450:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005454:	400b      	ands	r3, r1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <HAL_I2C_Init+0x138>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	1e59      	subs	r1, r3, #1
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	fbb1 f3f3 	udiv	r3, r1, r3
 8005468:	3301      	adds	r3, #1
 800546a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800546e:	e051      	b.n	8005514 <HAL_I2C_Init+0x1dc>
 8005470:	2304      	movs	r3, #4
 8005472:	e04f      	b.n	8005514 <HAL_I2C_Init+0x1dc>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d111      	bne.n	80054a0 <HAL_I2C_Init+0x168>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	1e58      	subs	r0, r3, #1
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6859      	ldr	r1, [r3, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	440b      	add	r3, r1
 800548a:	fbb0 f3f3 	udiv	r3, r0, r3
 800548e:	3301      	adds	r3, #1
 8005490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005494:	2b00      	cmp	r3, #0
 8005496:	bf0c      	ite	eq
 8005498:	2301      	moveq	r3, #1
 800549a:	2300      	movne	r3, #0
 800549c:	b2db      	uxtb	r3, r3
 800549e:	e012      	b.n	80054c6 <HAL_I2C_Init+0x18e>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	1e58      	subs	r0, r3, #1
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6859      	ldr	r1, [r3, #4]
 80054a8:	460b      	mov	r3, r1
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	440b      	add	r3, r1
 80054ae:	0099      	lsls	r1, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80054b6:	3301      	adds	r3, #1
 80054b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054bc:	2b00      	cmp	r3, #0
 80054be:	bf0c      	ite	eq
 80054c0:	2301      	moveq	r3, #1
 80054c2:	2300      	movne	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <HAL_I2C_Init+0x196>
 80054ca:	2301      	movs	r3, #1
 80054cc:	e022      	b.n	8005514 <HAL_I2C_Init+0x1dc>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10e      	bne.n	80054f4 <HAL_I2C_Init+0x1bc>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	1e58      	subs	r0, r3, #1
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6859      	ldr	r1, [r3, #4]
 80054de:	460b      	mov	r3, r1
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	440b      	add	r3, r1
 80054e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80054e8:	3301      	adds	r3, #1
 80054ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054f2:	e00f      	b.n	8005514 <HAL_I2C_Init+0x1dc>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	1e58      	subs	r0, r3, #1
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6859      	ldr	r1, [r3, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	440b      	add	r3, r1
 8005502:	0099      	lsls	r1, r3, #2
 8005504:	440b      	add	r3, r1
 8005506:	fbb0 f3f3 	udiv	r3, r0, r3
 800550a:	3301      	adds	r3, #1
 800550c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005510:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	6809      	ldr	r1, [r1, #0]
 8005518:	4313      	orrs	r3, r2
 800551a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	69da      	ldr	r2, [r3, #28]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005542:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6911      	ldr	r1, [r2, #16]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	68d2      	ldr	r2, [r2, #12]
 800554e:	4311      	orrs	r1, r2
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6812      	ldr	r2, [r2, #0]
 8005554:	430b      	orrs	r3, r1
 8005556:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695a      	ldr	r2, [r3, #20]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0201 	orr.w	r2, r2, #1
 8005582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2220      	movs	r2, #32
 800558e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	000186a0 	.word	0x000186a0
 80055b0:	001e847f 	.word	0x001e847f
 80055b4:	003d08ff 	.word	0x003d08ff
 80055b8:	431bde83 	.word	0x431bde83
 80055bc:	10624dd3 	.word	0x10624dd3

080055c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b088      	sub	sp, #32
 80055c4:	af02      	add	r7, sp, #8
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	607a      	str	r2, [r7, #4]
 80055ca:	461a      	mov	r2, r3
 80055cc:	460b      	mov	r3, r1
 80055ce:	817b      	strh	r3, [r7, #10]
 80055d0:	4613      	mov	r3, r2
 80055d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055d4:	f7fc f99a 	bl	800190c <HAL_GetTick>
 80055d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	f040 80e0 	bne.w	80057a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	2319      	movs	r3, #25
 80055ee:	2201      	movs	r2, #1
 80055f0:	4970      	ldr	r1, [pc, #448]	; (80057b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 f964 	bl	80058c0 <I2C_WaitOnFlagUntilTimeout>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80055fe:	2302      	movs	r3, #2
 8005600:	e0d3      	b.n	80057aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_I2C_Master_Transmit+0x50>
 800560c:	2302      	movs	r3, #2
 800560e:	e0cc      	b.n	80057aa <HAL_I2C_Master_Transmit+0x1ea>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b01      	cmp	r3, #1
 8005624:	d007      	beq.n	8005636 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f042 0201 	orr.w	r2, r2, #1
 8005634:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005644:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2221      	movs	r2, #33	; 0x21
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2210      	movs	r2, #16
 8005652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	893a      	ldrh	r2, [r7, #8]
 8005666:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566c:	b29a      	uxth	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4a50      	ldr	r2, [pc, #320]	; (80057b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8005676:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005678:	8979      	ldrh	r1, [r7, #10]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	6a3a      	ldr	r2, [r7, #32]
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 f89c 	bl	80057bc <I2C_MasterRequestWrite>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e08d      	b.n	80057aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800568e:	2300      	movs	r3, #0
 8005690:	613b      	str	r3, [r7, #16]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	613b      	str	r3, [r7, #16]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	613b      	str	r3, [r7, #16]
 80056a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80056a4:	e066      	b.n	8005774 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	6a39      	ldr	r1, [r7, #32]
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 f9de 	bl	8005a6c <I2C_WaitOnTXEFlagUntilTimeout>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00d      	beq.n	80056d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d107      	bne.n	80056ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e06b      	b.n	80057aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	781a      	ldrb	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	3b01      	subs	r3, #1
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b04      	cmp	r3, #4
 800570e:	d11b      	bne.n	8005748 <HAL_I2C_Master_Transmit+0x188>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005714:	2b00      	cmp	r3, #0
 8005716:	d017      	beq.n	8005748 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	781a      	ldrb	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005740:	3b01      	subs	r3, #1
 8005742:	b29a      	uxth	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	6a39      	ldr	r1, [r7, #32]
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 f9ce 	bl	8005aee <I2C_WaitOnBTFFlagUntilTimeout>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00d      	beq.n	8005774 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575c:	2b04      	cmp	r3, #4
 800575e:	d107      	bne.n	8005770 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800576e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e01a      	b.n	80057aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005778:	2b00      	cmp	r3, #0
 800577a:	d194      	bne.n	80056a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800578a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2220      	movs	r2, #32
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057a4:	2300      	movs	r3, #0
 80057a6:	e000      	b.n	80057aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80057a8:	2302      	movs	r3, #2
  }
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	00100002 	.word	0x00100002
 80057b8:	ffff0000 	.word	0xffff0000

080057bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af02      	add	r7, sp, #8
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	607a      	str	r2, [r7, #4]
 80057c6:	603b      	str	r3, [r7, #0]
 80057c8:	460b      	mov	r3, r1
 80057ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b08      	cmp	r3, #8
 80057d6:	d006      	beq.n	80057e6 <I2C_MasterRequestWrite+0x2a>
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d003      	beq.n	80057e6 <I2C_MasterRequestWrite+0x2a>
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057e4:	d108      	bne.n	80057f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	e00b      	b.n	8005810 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	2b12      	cmp	r3, #18
 80057fe:	d107      	bne.n	8005810 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800580e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 f84f 	bl	80058c0 <I2C_WaitOnFlagUntilTimeout>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00d      	beq.n	8005844 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005836:	d103      	bne.n	8005840 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800583e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e035      	b.n	80058b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800584c:	d108      	bne.n	8005860 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800584e:	897b      	ldrh	r3, [r7, #10]
 8005850:	b2db      	uxtb	r3, r3
 8005852:	461a      	mov	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800585c:	611a      	str	r2, [r3, #16]
 800585e:	e01b      	b.n	8005898 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005860:	897b      	ldrh	r3, [r7, #10]
 8005862:	11db      	asrs	r3, r3, #7
 8005864:	b2db      	uxtb	r3, r3
 8005866:	f003 0306 	and.w	r3, r3, #6
 800586a:	b2db      	uxtb	r3, r3
 800586c:	f063 030f 	orn	r3, r3, #15
 8005870:	b2da      	uxtb	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	490e      	ldr	r1, [pc, #56]	; (80058b8 <I2C_MasterRequestWrite+0xfc>)
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f000 f875 	bl	800596e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e010      	b.n	80058b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800588e:	897b      	ldrh	r3, [r7, #10]
 8005890:	b2da      	uxtb	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	4907      	ldr	r1, [pc, #28]	; (80058bc <I2C_MasterRequestWrite+0x100>)
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 f865 	bl	800596e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e000      	b.n	80058b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	00010008 	.word	0x00010008
 80058bc:	00010002 	.word	0x00010002

080058c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	603b      	str	r3, [r7, #0]
 80058cc:	4613      	mov	r3, r2
 80058ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058d0:	e025      	b.n	800591e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d8:	d021      	beq.n	800591e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058da:	f7fc f817 	bl	800190c <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d302      	bcc.n	80058f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d116      	bne.n	800591e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2220      	movs	r2, #32
 80058fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	f043 0220 	orr.w	r2, r3, #32
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e023      	b.n	8005966 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	0c1b      	lsrs	r3, r3, #16
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b01      	cmp	r3, #1
 8005926:	d10d      	bne.n	8005944 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	43da      	mvns	r2, r3
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	4013      	ands	r3, r2
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	bf0c      	ite	eq
 800593a:	2301      	moveq	r3, #1
 800593c:	2300      	movne	r3, #0
 800593e:	b2db      	uxtb	r3, r3
 8005940:	461a      	mov	r2, r3
 8005942:	e00c      	b.n	800595e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	43da      	mvns	r2, r3
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	4013      	ands	r3, r2
 8005950:	b29b      	uxth	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	bf0c      	ite	eq
 8005956:	2301      	moveq	r3, #1
 8005958:	2300      	movne	r3, #0
 800595a:	b2db      	uxtb	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	79fb      	ldrb	r3, [r7, #7]
 8005960:	429a      	cmp	r2, r3
 8005962:	d0b6      	beq.n	80058d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b084      	sub	sp, #16
 8005972:	af00      	add	r7, sp, #0
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	60b9      	str	r1, [r7, #8]
 8005978:	607a      	str	r2, [r7, #4]
 800597a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800597c:	e051      	b.n	8005a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800598c:	d123      	bne.n	80059d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800599c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	f043 0204 	orr.w	r2, r3, #4
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e046      	b.n	8005a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059dc:	d021      	beq.n	8005a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059de:	f7fb ff95 	bl	800190c <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d302      	bcc.n	80059f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d116      	bne.n	8005a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	f043 0220 	orr.w	r2, r3, #32
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e020      	b.n	8005a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	0c1b      	lsrs	r3, r3, #16
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d10c      	bne.n	8005a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	43da      	mvns	r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	4013      	ands	r3, r2
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	bf14      	ite	ne
 8005a3e:	2301      	movne	r3, #1
 8005a40:	2300      	moveq	r3, #0
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	e00b      	b.n	8005a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	43da      	mvns	r2, r3
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	4013      	ands	r3, r2
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	bf14      	ite	ne
 8005a58:	2301      	movne	r3, #1
 8005a5a:	2300      	moveq	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d18d      	bne.n	800597e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a78:	e02d      	b.n	8005ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 f878 	bl	8005b70 <I2C_IsAcknowledgeFailed>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e02d      	b.n	8005ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a90:	d021      	beq.n	8005ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a92:	f7fb ff3b 	bl	800190c <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d302      	bcc.n	8005aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d116      	bne.n	8005ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	f043 0220 	orr.w	r2, r3, #32
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e007      	b.n	8005ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae0:	2b80      	cmp	r3, #128	; 0x80
 8005ae2:	d1ca      	bne.n	8005a7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b084      	sub	sp, #16
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
 8005af6:	60b9      	str	r1, [r7, #8]
 8005af8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005afa:	e02d      	b.n	8005b58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 f837 	bl	8005b70 <I2C_IsAcknowledgeFailed>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e02d      	b.n	8005b68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b12:	d021      	beq.n	8005b58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b14:	f7fb fefa 	bl	800190c <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d302      	bcc.n	8005b2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d116      	bne.n	8005b58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b44:	f043 0220 	orr.w	r2, r3, #32
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e007      	b.n	8005b68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	f003 0304 	and.w	r3, r3, #4
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	d1ca      	bne.n	8005afc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b86:	d11b      	bne.n	8005bc0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bac:	f043 0204 	orr.w	r2, r3, #4
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e000      	b.n	8005bc2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
	...

08005bd0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b088      	sub	sp, #32
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e128      	b.n	8005e34 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d109      	bne.n	8005c02 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a90      	ldr	r2, [pc, #576]	; (8005e3c <HAL_I2S_Init+0x26c>)
 8005bfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7fb fb01 	bl	8001204 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2202      	movs	r2, #2
 8005c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	6812      	ldr	r2, [r2, #0]
 8005c14:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005c18:	f023 030f 	bic.w	r3, r3, #15
 8005c1c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2202      	movs	r2, #2
 8005c24:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d060      	beq.n	8005cf0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d102      	bne.n	8005c3c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005c36:	2310      	movs	r3, #16
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	e001      	b.n	8005c40 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005c3c:	2320      	movs	r3, #32
 8005c3e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	d802      	bhi.n	8005c4e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005c4e:	2001      	movs	r0, #1
 8005c50:	f001 fbd2 	bl	80073f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005c54:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c5e:	d125      	bne.n	8005cac <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d010      	beq.n	8005c8a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c72:	4613      	mov	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c84:	3305      	adds	r3, #5
 8005c86:	613b      	str	r3, [r7, #16]
 8005c88:	e01f      	b.n	8005cca <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c94:	4613      	mov	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca6:	3305      	adds	r3, #5
 8005ca8:	613b      	str	r3, [r7, #16]
 8005caa:	e00e      	b.n	8005cca <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc6:	3305      	adds	r3, #5
 8005cc8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	4a5c      	ldr	r2, [pc, #368]	; (8005e40 <HAL_I2S_Init+0x270>)
 8005cce:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd2:	08db      	lsrs	r3, r3, #3
 8005cd4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	085b      	lsrs	r3, r3, #1
 8005ce6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	021b      	lsls	r3, r3, #8
 8005cec:	61bb      	str	r3, [r7, #24]
 8005cee:	e003      	b.n	8005cf8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d902      	bls.n	8005d04 <HAL_I2S_Init+0x134>
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	2bff      	cmp	r3, #255	; 0xff
 8005d02:	d907      	bls.n	8005d14 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d08:	f043 0210 	orr.w	r2, r3, #16
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e08f      	b.n	8005e34 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691a      	ldr	r2, [r3, #16]
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	ea42 0103 	orr.w	r1, r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69fa      	ldr	r2, [r7, #28]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005d32:	f023 030f 	bic.w	r3, r3, #15
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6851      	ldr	r1, [r2, #4]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	6892      	ldr	r2, [r2, #8]
 8005d3e:	4311      	orrs	r1, r2
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	68d2      	ldr	r2, [r2, #12]
 8005d44:	4311      	orrs	r1, r2
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	6992      	ldr	r2, [r2, #24]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d56:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d161      	bne.n	8005e24 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a38      	ldr	r2, [pc, #224]	; (8005e44 <HAL_I2S_Init+0x274>)
 8005d64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a37      	ldr	r2, [pc, #220]	; (8005e48 <HAL_I2S_Init+0x278>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d101      	bne.n	8005d74 <HAL_I2S_Init+0x1a4>
 8005d70:	4b36      	ldr	r3, [pc, #216]	; (8005e4c <HAL_I2S_Init+0x27c>)
 8005d72:	e001      	b.n	8005d78 <HAL_I2S_Init+0x1a8>
 8005d74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6812      	ldr	r2, [r2, #0]
 8005d7e:	4932      	ldr	r1, [pc, #200]	; (8005e48 <HAL_I2S_Init+0x278>)
 8005d80:	428a      	cmp	r2, r1
 8005d82:	d101      	bne.n	8005d88 <HAL_I2S_Init+0x1b8>
 8005d84:	4a31      	ldr	r2, [pc, #196]	; (8005e4c <HAL_I2S_Init+0x27c>)
 8005d86:	e001      	b.n	8005d8c <HAL_I2S_Init+0x1bc>
 8005d88:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005d8c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005d90:	f023 030f 	bic.w	r3, r3, #15
 8005d94:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a2b      	ldr	r2, [pc, #172]	; (8005e48 <HAL_I2S_Init+0x278>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d101      	bne.n	8005da4 <HAL_I2S_Init+0x1d4>
 8005da0:	4b2a      	ldr	r3, [pc, #168]	; (8005e4c <HAL_I2S_Init+0x27c>)
 8005da2:	e001      	b.n	8005da8 <HAL_I2S_Init+0x1d8>
 8005da4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005da8:	2202      	movs	r2, #2
 8005daa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a25      	ldr	r2, [pc, #148]	; (8005e48 <HAL_I2S_Init+0x278>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d101      	bne.n	8005dba <HAL_I2S_Init+0x1ea>
 8005db6:	4b25      	ldr	r3, [pc, #148]	; (8005e4c <HAL_I2S_Init+0x27c>)
 8005db8:	e001      	b.n	8005dbe <HAL_I2S_Init+0x1ee>
 8005dba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dca:	d003      	beq.n	8005dd4 <HAL_I2S_Init+0x204>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d103      	bne.n	8005ddc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005dd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005dd8:	613b      	str	r3, [r7, #16]
 8005dda:	e001      	b.n	8005de0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005dea:	4313      	orrs	r3, r2
 8005dec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005df4:	4313      	orrs	r3, r2
 8005df6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	897b      	ldrh	r3, [r7, #10]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005e0c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a0d      	ldr	r2, [pc, #52]	; (8005e48 <HAL_I2S_Init+0x278>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d101      	bne.n	8005e1c <HAL_I2S_Init+0x24c>
 8005e18:	4b0c      	ldr	r3, [pc, #48]	; (8005e4c <HAL_I2S_Init+0x27c>)
 8005e1a:	e001      	b.n	8005e20 <HAL_I2S_Init+0x250>
 8005e1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e20:	897a      	ldrh	r2, [r7, #10]
 8005e22:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3720      	adds	r7, #32
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	08006313 	.word	0x08006313
 8005e40:	cccccccd 	.word	0xcccccccd
 8005e44:	08006499 	.word	0x08006499
 8005e48:	40003800 	.word	0x40003800
 8005e4c:	40003400 	.word	0x40003400

08005e50 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b088      	sub	sp, #32
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e64:	d004      	beq.n	8005e70 <HAL_I2S_DMAStop+0x20>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f040 80d1 	bne.w	8006012 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00f      	beq.n	8005e98 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7fb ff35 	bl	8001cec <HAL_DMA_Abort>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d007      	beq.n	8005e98 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8c:	f043 0208 	orr.w	r2, r3, #8
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005e98:	2364      	movs	r3, #100	; 0x64
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	2102      	movs	r1, #2
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fac1 	bl	8006426 <I2S_WaitFlagStateUntilTimeout>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00b      	beq.n	8005ec2 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eae:	f043 0201 	orr.w	r2, r3, #1
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005ec2:	2364      	movs	r3, #100	; 0x64
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	2180      	movs	r1, #128	; 0x80
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 faac 	bl	8006426 <I2S_WaitFlagStateUntilTimeout>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00b      	beq.n	8005eec <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed8:	f043 0201 	orr.w	r2, r3, #1
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	69da      	ldr	r2, [r3, #28]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005efa:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005efc:	2300      	movs	r3, #0
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 0202 	bic.w	r2, r2, #2
 8005f18:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b05      	cmp	r3, #5
 8005f24:	f040 8165 	bne.w	80061f2 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00f      	beq.n	8005f50 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7fb fed9 	bl	8001cec <HAL_DMA_Abort>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d007      	beq.n	8005f50 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f44:	f043 0208 	orr.w	r2, r3, #8
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a8a      	ldr	r2, [pc, #552]	; (8006180 <HAL_I2S_DMAStop+0x330>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d101      	bne.n	8005f5e <HAL_I2S_DMAStop+0x10e>
 8005f5a:	4b8a      	ldr	r3, [pc, #552]	; (8006184 <HAL_I2S_DMAStop+0x334>)
 8005f5c:	e001      	b.n	8005f62 <HAL_I2S_DMAStop+0x112>
 8005f5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f62:	69da      	ldr	r2, [r3, #28]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4985      	ldr	r1, [pc, #532]	; (8006180 <HAL_I2S_DMAStop+0x330>)
 8005f6a:	428b      	cmp	r3, r1
 8005f6c:	d101      	bne.n	8005f72 <HAL_I2S_DMAStop+0x122>
 8005f6e:	4b85      	ldr	r3, [pc, #532]	; (8006184 <HAL_I2S_DMAStop+0x334>)
 8005f70:	e001      	b.n	8005f76 <HAL_I2S_DMAStop+0x126>
 8005f72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f7a:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a7e      	ldr	r2, [pc, #504]	; (8006180 <HAL_I2S_DMAStop+0x330>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d101      	bne.n	8005f8e <HAL_I2S_DMAStop+0x13e>
 8005f8a:	4b7e      	ldr	r3, [pc, #504]	; (8006184 <HAL_I2S_DMAStop+0x334>)
 8005f8c:	e001      	b.n	8005f92 <HAL_I2S_DMAStop+0x142>
 8005f8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	613b      	str	r3, [r7, #16]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a79      	ldr	r2, [pc, #484]	; (8006180 <HAL_I2S_DMAStop+0x330>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d101      	bne.n	8005fa4 <HAL_I2S_DMAStop+0x154>
 8005fa0:	4b78      	ldr	r3, [pc, #480]	; (8006184 <HAL_I2S_DMAStop+0x334>)
 8005fa2:	e001      	b.n	8005fa8 <HAL_I2S_DMAStop+0x158>
 8005fa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	613b      	str	r3, [r7, #16]
 8005fac:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a73      	ldr	r2, [pc, #460]	; (8006180 <HAL_I2S_DMAStop+0x330>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d101      	bne.n	8005fbc <HAL_I2S_DMAStop+0x16c>
 8005fb8:	4b72      	ldr	r3, [pc, #456]	; (8006184 <HAL_I2S_DMAStop+0x334>)
 8005fba:	e001      	b.n	8005fc0 <HAL_I2S_DMAStop+0x170>
 8005fbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	496e      	ldr	r1, [pc, #440]	; (8006180 <HAL_I2S_DMAStop+0x330>)
 8005fc8:	428b      	cmp	r3, r1
 8005fca:	d101      	bne.n	8005fd0 <HAL_I2S_DMAStop+0x180>
 8005fcc:	4b6d      	ldr	r3, [pc, #436]	; (8006184 <HAL_I2S_DMAStop+0x334>)
 8005fce:	e001      	b.n	8005fd4 <HAL_I2S_DMAStop+0x184>
 8005fd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fd4:	f022 0201 	bic.w	r2, r2, #1
 8005fd8:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10c      	bne.n	8005ffc <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005ffa:	e0fa      	b.n	80061f2 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a5f      	ldr	r2, [pc, #380]	; (8006180 <HAL_I2S_DMAStop+0x330>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d101      	bne.n	800600a <HAL_I2S_DMAStop+0x1ba>
 8006006:	4b5f      	ldr	r3, [pc, #380]	; (8006184 <HAL_I2S_DMAStop+0x334>)
 8006008:	e001      	b.n	800600e <HAL_I2S_DMAStop+0x1be>
 800600a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800600e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006010:	e0ef      	b.n	80061f2 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800601a:	d005      	beq.n	8006028 <HAL_I2S_DMAStop+0x1d8>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006024:	f040 80e5 	bne.w	80061f2 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00f      	beq.n	8006050 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006034:	4618      	mov	r0, r3
 8006036:	f7fb fe59 	bl	8001cec <HAL_DMA_Abort>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d007      	beq.n	8006050 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006044:	f043 0208 	orr.w	r2, r3, #8
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b05      	cmp	r3, #5
 800605a:	f040 809a 	bne.w	8006192 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00f      	beq.n	8006086 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	4618      	mov	r0, r3
 800606c:	f7fb fe3e 	bl	8001cec <HAL_DMA_Abort>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d007      	beq.n	8006086 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607a:	f043 0208 	orr.w	r2, r3, #8
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8006086:	f7fb fc41 	bl	800190c <HAL_GetTick>
 800608a:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800608c:	e012      	b.n	80060b4 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800608e:	f7fb fc3d 	bl	800190c <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	2b64      	cmp	r3, #100	; 0x64
 800609a:	d90b      	bls.n	80060b4 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a0:	f043 0201 	orr.w	r2, r3, #1
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a31      	ldr	r2, [pc, #196]	; (8006180 <HAL_I2S_DMAStop+0x330>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d101      	bne.n	80060c2 <HAL_I2S_DMAStop+0x272>
 80060be:	4b31      	ldr	r3, [pc, #196]	; (8006184 <HAL_I2S_DMAStop+0x334>)
 80060c0:	e001      	b.n	80060c6 <HAL_I2S_DMAStop+0x276>
 80060c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d1de      	bne.n	800608e <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80060d0:	e012      	b.n	80060f8 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80060d2:	f7fb fc1b 	bl	800190c <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	2b64      	cmp	r3, #100	; 0x64
 80060de:	d90b      	bls.n	80060f8 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e4:	f043 0201 	orr.w	r2, r3, #1
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a20      	ldr	r2, [pc, #128]	; (8006180 <HAL_I2S_DMAStop+0x330>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d101      	bne.n	8006106 <HAL_I2S_DMAStop+0x2b6>
 8006102:	4b20      	ldr	r3, [pc, #128]	; (8006184 <HAL_I2S_DMAStop+0x334>)
 8006104:	e001      	b.n	800610a <HAL_I2S_DMAStop+0x2ba>
 8006106:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006110:	2b80      	cmp	r3, #128	; 0x80
 8006112:	d0de      	beq.n	80060d2 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a19      	ldr	r2, [pc, #100]	; (8006180 <HAL_I2S_DMAStop+0x330>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d101      	bne.n	8006122 <HAL_I2S_DMAStop+0x2d2>
 800611e:	4b19      	ldr	r3, [pc, #100]	; (8006184 <HAL_I2S_DMAStop+0x334>)
 8006120:	e001      	b.n	8006126 <HAL_I2S_DMAStop+0x2d6>
 8006122:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006126:	69da      	ldr	r2, [r3, #28]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4914      	ldr	r1, [pc, #80]	; (8006180 <HAL_I2S_DMAStop+0x330>)
 800612e:	428b      	cmp	r3, r1
 8006130:	d101      	bne.n	8006136 <HAL_I2S_DMAStop+0x2e6>
 8006132:	4b14      	ldr	r3, [pc, #80]	; (8006184 <HAL_I2S_DMAStop+0x334>)
 8006134:	e001      	b.n	800613a <HAL_I2S_DMAStop+0x2ea>
 8006136:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800613a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800613e:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8006140:	2300      	movs	r3, #0
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a0d      	ldr	r2, [pc, #52]	; (8006180 <HAL_I2S_DMAStop+0x330>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d101      	bne.n	8006152 <HAL_I2S_DMAStop+0x302>
 800614e:	4b0d      	ldr	r3, [pc, #52]	; (8006184 <HAL_I2S_DMAStop+0x334>)
 8006150:	e001      	b.n	8006156 <HAL_I2S_DMAStop+0x306>
 8006152:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	60fb      	str	r3, [r7, #12]
 800615a:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a07      	ldr	r2, [pc, #28]	; (8006180 <HAL_I2S_DMAStop+0x330>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d101      	bne.n	800616a <HAL_I2S_DMAStop+0x31a>
 8006166:	4b07      	ldr	r3, [pc, #28]	; (8006184 <HAL_I2S_DMAStop+0x334>)
 8006168:	e001      	b.n	800616e <HAL_I2S_DMAStop+0x31e>
 800616a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4902      	ldr	r1, [pc, #8]	; (8006180 <HAL_I2S_DMAStop+0x330>)
 8006176:	428b      	cmp	r3, r1
 8006178:	d106      	bne.n	8006188 <HAL_I2S_DMAStop+0x338>
 800617a:	4b02      	ldr	r3, [pc, #8]	; (8006184 <HAL_I2S_DMAStop+0x334>)
 800617c:	e006      	b.n	800618c <HAL_I2S_DMAStop+0x33c>
 800617e:	bf00      	nop
 8006180:	40003800 	.word	0x40003800
 8006184:	40003400 	.word	0x40003400
 8006188:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800618c:	f022 0202 	bic.w	r2, r2, #2
 8006190:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69da      	ldr	r2, [r3, #28]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061a0:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80061a2:	2300      	movs	r3, #0
 80061a4:	60bb      	str	r3, [r7, #8]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	60bb      	str	r3, [r7, #8]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	60bb      	str	r3, [r7, #8]
 80061b6:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 0201 	bic.w	r2, r2, #1
 80061c6:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061d0:	d10c      	bne.n	80061ec <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	77fb      	strb	r3, [r7, #31]
 80061ea:	e002      	b.n	80061f2 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 80061fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3720      	adds	r7, #32
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	4798      	blx	r3
}
 8006214:	bf00      	nop
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006264:	881a      	ldrh	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006270:	1c9a      	adds	r2, r3, #2
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800627a:	b29b      	uxth	r3, r3
 800627c:	3b01      	subs	r3, #1
 800627e:	b29a      	uxth	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006288:	b29b      	uxth	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10e      	bne.n	80062ac <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800629c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7ff ffb8 	bl	800621c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80062ac:	bf00      	nop
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c6:	b292      	uxth	r2, r2
 80062c8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ce:	1c9a      	adds	r2, r3, #2
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80062d8:	b29b      	uxth	r3, r3
 80062da:	3b01      	subs	r3, #1
 80062dc:	b29a      	uxth	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10e      	bne.n	800630a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80062fa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7ff ff93 	bl	8006230 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800630a:	bf00      	nop
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b086      	sub	sp, #24
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b04      	cmp	r3, #4
 800632c:	d13a      	bne.n	80063a4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	2b01      	cmp	r3, #1
 8006336:	d109      	bne.n	800634c <I2S_IRQHandler+0x3a>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006342:	2b40      	cmp	r3, #64	; 0x40
 8006344:	d102      	bne.n	800634c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7ff ffb4 	bl	80062b4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006352:	2b40      	cmp	r3, #64	; 0x40
 8006354:	d126      	bne.n	80063a4 <I2S_IRQHandler+0x92>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f003 0320 	and.w	r3, r3, #32
 8006360:	2b20      	cmp	r3, #32
 8006362:	d11f      	bne.n	80063a4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006372:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006374:	2300      	movs	r3, #0
 8006376:	613b      	str	r3, [r7, #16]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	613b      	str	r3, [r7, #16]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	613b      	str	r3, [r7, #16]
 8006388:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006396:	f043 0202 	orr.w	r2, r3, #2
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7ff ff50 	bl	8006244 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b03      	cmp	r3, #3
 80063ae:	d136      	bne.n	800641e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d109      	bne.n	80063ce <I2S_IRQHandler+0xbc>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c4:	2b80      	cmp	r3, #128	; 0x80
 80063c6:	d102      	bne.n	80063ce <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff ff45 	bl	8006258 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f003 0308 	and.w	r3, r3, #8
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d122      	bne.n	800641e <I2S_IRQHandler+0x10c>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	d11b      	bne.n	800641e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80063f4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80063f6:	2300      	movs	r3, #0
 80063f8:	60fb      	str	r3, [r7, #12]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006410:	f043 0204 	orr.w	r2, r3, #4
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7ff ff13 	bl	8006244 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800641e:	bf00      	nop
 8006420:	3718      	adds	r7, #24
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b086      	sub	sp, #24
 800642a:	af00      	add	r7, sp, #0
 800642c:	60f8      	str	r0, [r7, #12]
 800642e:	60b9      	str	r1, [r7, #8]
 8006430:	603b      	str	r3, [r7, #0]
 8006432:	4613      	mov	r3, r2
 8006434:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006436:	f7fb fa69 	bl	800190c <HAL_GetTick>
 800643a:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800643c:	e018      	b.n	8006470 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006444:	d014      	beq.n	8006470 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006446:	f7fb fa61 	bl	800190c <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d902      	bls.n	800645c <I2S_WaitFlagStateUntilTimeout+0x36>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d109      	bne.n	8006470 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e00f      	b.n	8006490 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	4013      	ands	r3, r2
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	429a      	cmp	r2, r3
 800647e:	bf0c      	ite	eq
 8006480:	2301      	moveq	r3, #1
 8006482:	2300      	movne	r3, #0
 8006484:	b2db      	uxtb	r3, r3
 8006486:	461a      	mov	r2, r3
 8006488:	79fb      	ldrb	r3, [r7, #7]
 800648a:	429a      	cmp	r2, r3
 800648c:	d1d7      	bne.n	800643e <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3718      	adds	r7, #24
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4aa2      	ldr	r2, [pc, #648]	; (8006738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d101      	bne.n	80064b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80064b2:	4ba2      	ldr	r3, [pc, #648]	; (800673c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80064b4:	e001      	b.n	80064ba <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80064b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a9b      	ldr	r2, [pc, #620]	; (8006738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d101      	bne.n	80064d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80064d0:	4b9a      	ldr	r3, [pc, #616]	; (800673c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80064d2:	e001      	b.n	80064d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80064d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064e4:	d004      	beq.n	80064f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f040 8099 	bne.w	8006622 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d107      	bne.n	800650a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f925 	bl	8006754 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b01      	cmp	r3, #1
 8006512:	d107      	bne.n	8006524 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651a:	2b00      	cmp	r3, #0
 800651c:	d002      	beq.n	8006524 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f9c8 	bl	80068b4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652a:	2b40      	cmp	r3, #64	; 0x40
 800652c:	d13a      	bne.n	80065a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f003 0320 	and.w	r3, r3, #32
 8006534:	2b00      	cmp	r3, #0
 8006536:	d035      	beq.n	80065a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a7e      	ldr	r2, [pc, #504]	; (8006738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d101      	bne.n	8006546 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006542:	4b7e      	ldr	r3, [pc, #504]	; (800673c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006544:	e001      	b.n	800654a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006546:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4979      	ldr	r1, [pc, #484]	; (8006738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006552:	428b      	cmp	r3, r1
 8006554:	d101      	bne.n	800655a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006556:	4b79      	ldr	r3, [pc, #484]	; (800673c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006558:	e001      	b.n	800655e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800655a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800655e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006562:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006572:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	60fb      	str	r3, [r7, #12]
 8006588:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006596:	f043 0202 	orr.w	r2, r3, #2
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7ff fe50 	bl	8006244 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	f003 0308 	and.w	r3, r3, #8
 80065aa:	2b08      	cmp	r3, #8
 80065ac:	f040 80be 	bne.w	800672c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f003 0320 	and.w	r3, r3, #32
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 80b8 	beq.w	800672c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065ca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a59      	ldr	r2, [pc, #356]	; (8006738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d101      	bne.n	80065da <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80065d6:	4b59      	ldr	r3, [pc, #356]	; (800673c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065d8:	e001      	b.n	80065de <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80065da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4954      	ldr	r1, [pc, #336]	; (8006738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065e6:	428b      	cmp	r3, r1
 80065e8:	d101      	bne.n	80065ee <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80065ea:	4b54      	ldr	r3, [pc, #336]	; (800673c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065ec:	e001      	b.n	80065f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80065ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065f6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80065f8:	2300      	movs	r3, #0
 80065fa:	60bb      	str	r3, [r7, #8]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	60bb      	str	r3, [r7, #8]
 8006604:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006612:	f043 0204 	orr.w	r2, r3, #4
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7ff fe12 	bl	8006244 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006620:	e084      	b.n	800672c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b02      	cmp	r3, #2
 800662a:	d107      	bne.n	800663c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f8be 	bl	80067b8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	2b01      	cmp	r3, #1
 8006644:	d107      	bne.n	8006656 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f8fd 	bl	8006850 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665c:	2b40      	cmp	r3, #64	; 0x40
 800665e:	d12f      	bne.n	80066c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f003 0320 	and.w	r3, r3, #32
 8006666:	2b00      	cmp	r3, #0
 8006668:	d02a      	beq.n	80066c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006678:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a2e      	ldr	r2, [pc, #184]	; (8006738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d101      	bne.n	8006688 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006684:	4b2d      	ldr	r3, [pc, #180]	; (800673c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006686:	e001      	b.n	800668c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006688:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4929      	ldr	r1, [pc, #164]	; (8006738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006694:	428b      	cmp	r3, r1
 8006696:	d101      	bne.n	800669c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006698:	4b28      	ldr	r3, [pc, #160]	; (800673c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800669a:	e001      	b.n	80066a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800669c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066a4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b2:	f043 0202 	orr.w	r2, r3, #2
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7ff fdc2 	bl	8006244 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	f003 0308 	and.w	r3, r3, #8
 80066c6:	2b08      	cmp	r3, #8
 80066c8:	d131      	bne.n	800672e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f003 0320 	and.w	r3, r3, #32
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d02c      	beq.n	800672e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a17      	ldr	r2, [pc, #92]	; (8006738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d101      	bne.n	80066e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80066de:	4b17      	ldr	r3, [pc, #92]	; (800673c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80066e0:	e001      	b.n	80066e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80066e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4912      	ldr	r1, [pc, #72]	; (8006738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80066ee:	428b      	cmp	r3, r1
 80066f0:	d101      	bne.n	80066f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80066f2:	4b12      	ldr	r3, [pc, #72]	; (800673c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80066f4:	e001      	b.n	80066fa <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80066f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066fe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800670e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671c:	f043 0204 	orr.w	r2, r3, #4
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7ff fd8d 	bl	8006244 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800672a:	e000      	b.n	800672e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800672c:	bf00      	nop
}
 800672e:	bf00      	nop
 8006730:	3720      	adds	r7, #32
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	40003800 	.word	0x40003800
 800673c:	40003400 	.word	0x40003400

08006740 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	1c99      	adds	r1, r3, #2
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	6251      	str	r1, [r2, #36]	; 0x24
 8006766:	881a      	ldrh	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006772:	b29b      	uxth	r3, r3
 8006774:	3b01      	subs	r3, #1
 8006776:	b29a      	uxth	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006780:	b29b      	uxth	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d113      	bne.n	80067ae <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006794:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800679a:	b29b      	uxth	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d106      	bne.n	80067ae <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7ff ffc9 	bl	8006740 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067ae:	bf00      	nop
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
	...

080067b8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c4:	1c99      	adds	r1, r3, #2
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	6251      	str	r1, [r2, #36]	; 0x24
 80067ca:	8819      	ldrh	r1, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a1d      	ldr	r2, [pc, #116]	; (8006848 <I2SEx_TxISR_I2SExt+0x90>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d101      	bne.n	80067da <I2SEx_TxISR_I2SExt+0x22>
 80067d6:	4b1d      	ldr	r3, [pc, #116]	; (800684c <I2SEx_TxISR_I2SExt+0x94>)
 80067d8:	e001      	b.n	80067de <I2SEx_TxISR_I2SExt+0x26>
 80067da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067de:	460a      	mov	r2, r1
 80067e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d121      	bne.n	800683e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a12      	ldr	r2, [pc, #72]	; (8006848 <I2SEx_TxISR_I2SExt+0x90>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d101      	bne.n	8006808 <I2SEx_TxISR_I2SExt+0x50>
 8006804:	4b11      	ldr	r3, [pc, #68]	; (800684c <I2SEx_TxISR_I2SExt+0x94>)
 8006806:	e001      	b.n	800680c <I2SEx_TxISR_I2SExt+0x54>
 8006808:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	490d      	ldr	r1, [pc, #52]	; (8006848 <I2SEx_TxISR_I2SExt+0x90>)
 8006814:	428b      	cmp	r3, r1
 8006816:	d101      	bne.n	800681c <I2SEx_TxISR_I2SExt+0x64>
 8006818:	4b0c      	ldr	r3, [pc, #48]	; (800684c <I2SEx_TxISR_I2SExt+0x94>)
 800681a:	e001      	b.n	8006820 <I2SEx_TxISR_I2SExt+0x68>
 800681c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006820:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006824:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800682a:	b29b      	uxth	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d106      	bne.n	800683e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7ff ff81 	bl	8006740 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800683e:	bf00      	nop
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	40003800 	.word	0x40003800
 800684c:	40003400 	.word	0x40003400

08006850 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68d8      	ldr	r0, [r3, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006862:	1c99      	adds	r1, r3, #2
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006868:	b282      	uxth	r2, r0
 800686a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006870:	b29b      	uxth	r3, r3
 8006872:	3b01      	subs	r3, #1
 8006874:	b29a      	uxth	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800687e:	b29b      	uxth	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	d113      	bne.n	80068ac <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006892:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006898:	b29b      	uxth	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d106      	bne.n	80068ac <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff ff4a 	bl	8006740 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80068ac:	bf00      	nop
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a20      	ldr	r2, [pc, #128]	; (8006944 <I2SEx_RxISR_I2SExt+0x90>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d101      	bne.n	80068ca <I2SEx_RxISR_I2SExt+0x16>
 80068c6:	4b20      	ldr	r3, [pc, #128]	; (8006948 <I2SEx_RxISR_I2SExt+0x94>)
 80068c8:	e001      	b.n	80068ce <I2SEx_RxISR_I2SExt+0x1a>
 80068ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068ce:	68d8      	ldr	r0, [r3, #12]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d4:	1c99      	adds	r1, r3, #2
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80068da:	b282      	uxth	r2, r0
 80068dc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	3b01      	subs	r3, #1
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d121      	bne.n	800693a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a12      	ldr	r2, [pc, #72]	; (8006944 <I2SEx_RxISR_I2SExt+0x90>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d101      	bne.n	8006904 <I2SEx_RxISR_I2SExt+0x50>
 8006900:	4b11      	ldr	r3, [pc, #68]	; (8006948 <I2SEx_RxISR_I2SExt+0x94>)
 8006902:	e001      	b.n	8006908 <I2SEx_RxISR_I2SExt+0x54>
 8006904:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	490d      	ldr	r1, [pc, #52]	; (8006944 <I2SEx_RxISR_I2SExt+0x90>)
 8006910:	428b      	cmp	r3, r1
 8006912:	d101      	bne.n	8006918 <I2SEx_RxISR_I2SExt+0x64>
 8006914:	4b0c      	ldr	r3, [pc, #48]	; (8006948 <I2SEx_RxISR_I2SExt+0x94>)
 8006916:	e001      	b.n	800691c <I2SEx_RxISR_I2SExt+0x68>
 8006918:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800691c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006920:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006926:	b29b      	uxth	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	d106      	bne.n	800693a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff ff03 	bl	8006740 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800693a:	bf00      	nop
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	40003800 	.word	0x40003800
 8006948:	40003400 	.word	0x40003400

0800694c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e264      	b.n	8006e28 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b00      	cmp	r3, #0
 8006968:	d075      	beq.n	8006a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800696a:	4ba3      	ldr	r3, [pc, #652]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f003 030c 	and.w	r3, r3, #12
 8006972:	2b04      	cmp	r3, #4
 8006974:	d00c      	beq.n	8006990 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006976:	4ba0      	ldr	r3, [pc, #640]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800697e:	2b08      	cmp	r3, #8
 8006980:	d112      	bne.n	80069a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006982:	4b9d      	ldr	r3, [pc, #628]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800698a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800698e:	d10b      	bne.n	80069a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006990:	4b99      	ldr	r3, [pc, #612]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d05b      	beq.n	8006a54 <HAL_RCC_OscConfig+0x108>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d157      	bne.n	8006a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e23f      	b.n	8006e28 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b0:	d106      	bne.n	80069c0 <HAL_RCC_OscConfig+0x74>
 80069b2:	4b91      	ldr	r3, [pc, #580]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a90      	ldr	r2, [pc, #576]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 80069b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	e01d      	b.n	80069fc <HAL_RCC_OscConfig+0xb0>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069c8:	d10c      	bne.n	80069e4 <HAL_RCC_OscConfig+0x98>
 80069ca:	4b8b      	ldr	r3, [pc, #556]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a8a      	ldr	r2, [pc, #552]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 80069d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	4b88      	ldr	r3, [pc, #544]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a87      	ldr	r2, [pc, #540]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 80069dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	e00b      	b.n	80069fc <HAL_RCC_OscConfig+0xb0>
 80069e4:	4b84      	ldr	r3, [pc, #528]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a83      	ldr	r2, [pc, #524]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 80069ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ee:	6013      	str	r3, [r2, #0]
 80069f0:	4b81      	ldr	r3, [pc, #516]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a80      	ldr	r2, [pc, #512]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 80069f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d013      	beq.n	8006a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a04:	f7fa ff82 	bl	800190c <HAL_GetTick>
 8006a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a0a:	e008      	b.n	8006a1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a0c:	f7fa ff7e 	bl	800190c <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b64      	cmp	r3, #100	; 0x64
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e204      	b.n	8006e28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a1e:	4b76      	ldr	r3, [pc, #472]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0f0      	beq.n	8006a0c <HAL_RCC_OscConfig+0xc0>
 8006a2a:	e014      	b.n	8006a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a2c:	f7fa ff6e 	bl	800190c <HAL_GetTick>
 8006a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a34:	f7fa ff6a 	bl	800190c <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b64      	cmp	r3, #100	; 0x64
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e1f0      	b.n	8006e28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a46:	4b6c      	ldr	r3, [pc, #432]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1f0      	bne.n	8006a34 <HAL_RCC_OscConfig+0xe8>
 8006a52:	e000      	b.n	8006a56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d063      	beq.n	8006b2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a62:	4b65      	ldr	r3, [pc, #404]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f003 030c 	and.w	r3, r3, #12
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00b      	beq.n	8006a86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a6e:	4b62      	ldr	r3, [pc, #392]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a76:	2b08      	cmp	r3, #8
 8006a78:	d11c      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a7a:	4b5f      	ldr	r3, [pc, #380]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d116      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a86:	4b5c      	ldr	r3, [pc, #368]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d005      	beq.n	8006a9e <HAL_RCC_OscConfig+0x152>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d001      	beq.n	8006a9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e1c4      	b.n	8006e28 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a9e:	4b56      	ldr	r3, [pc, #344]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	00db      	lsls	r3, r3, #3
 8006aac:	4952      	ldr	r1, [pc, #328]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ab2:	e03a      	b.n	8006b2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d020      	beq.n	8006afe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006abc:	4b4f      	ldr	r3, [pc, #316]	; (8006bfc <HAL_RCC_OscConfig+0x2b0>)
 8006abe:	2201      	movs	r2, #1
 8006ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac2:	f7fa ff23 	bl	800190c <HAL_GetTick>
 8006ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ac8:	e008      	b.n	8006adc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006aca:	f7fa ff1f 	bl	800190c <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d901      	bls.n	8006adc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e1a5      	b.n	8006e28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006adc:	4b46      	ldr	r3, [pc, #280]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d0f0      	beq.n	8006aca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ae8:	4b43      	ldr	r3, [pc, #268]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	00db      	lsls	r3, r3, #3
 8006af6:	4940      	ldr	r1, [pc, #256]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	600b      	str	r3, [r1, #0]
 8006afc:	e015      	b.n	8006b2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006afe:	4b3f      	ldr	r3, [pc, #252]	; (8006bfc <HAL_RCC_OscConfig+0x2b0>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b04:	f7fa ff02 	bl	800190c <HAL_GetTick>
 8006b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b0a:	e008      	b.n	8006b1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b0c:	f7fa fefe 	bl	800190c <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e184      	b.n	8006e28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b1e:	4b36      	ldr	r3, [pc, #216]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1f0      	bne.n	8006b0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0308 	and.w	r3, r3, #8
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d030      	beq.n	8006b98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d016      	beq.n	8006b6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b3e:	4b30      	ldr	r3, [pc, #192]	; (8006c00 <HAL_RCC_OscConfig+0x2b4>)
 8006b40:	2201      	movs	r2, #1
 8006b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b44:	f7fa fee2 	bl	800190c <HAL_GetTick>
 8006b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b4a:	e008      	b.n	8006b5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b4c:	f7fa fede 	bl	800190c <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d901      	bls.n	8006b5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e164      	b.n	8006e28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b5e:	4b26      	ldr	r3, [pc, #152]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d0f0      	beq.n	8006b4c <HAL_RCC_OscConfig+0x200>
 8006b6a:	e015      	b.n	8006b98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b6c:	4b24      	ldr	r3, [pc, #144]	; (8006c00 <HAL_RCC_OscConfig+0x2b4>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b72:	f7fa fecb 	bl	800190c <HAL_GetTick>
 8006b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b78:	e008      	b.n	8006b8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b7a:	f7fa fec7 	bl	800190c <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d901      	bls.n	8006b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e14d      	b.n	8006e28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b8c:	4b1a      	ldr	r3, [pc, #104]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b90:	f003 0302 	and.w	r3, r3, #2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1f0      	bne.n	8006b7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0304 	and.w	r3, r3, #4
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 80a0 	beq.w	8006ce6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006baa:	4b13      	ldr	r3, [pc, #76]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10f      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	60bb      	str	r3, [r7, #8]
 8006bba:	4b0f      	ldr	r3, [pc, #60]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	4a0e      	ldr	r2, [pc, #56]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8006bc6:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bce:	60bb      	str	r3, [r7, #8]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bd6:	4b0b      	ldr	r3, [pc, #44]	; (8006c04 <HAL_RCC_OscConfig+0x2b8>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d121      	bne.n	8006c26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006be2:	4b08      	ldr	r3, [pc, #32]	; (8006c04 <HAL_RCC_OscConfig+0x2b8>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a07      	ldr	r2, [pc, #28]	; (8006c04 <HAL_RCC_OscConfig+0x2b8>)
 8006be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bee:	f7fa fe8d 	bl	800190c <HAL_GetTick>
 8006bf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bf4:	e011      	b.n	8006c1a <HAL_RCC_OscConfig+0x2ce>
 8006bf6:	bf00      	nop
 8006bf8:	40023800 	.word	0x40023800
 8006bfc:	42470000 	.word	0x42470000
 8006c00:	42470e80 	.word	0x42470e80
 8006c04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c08:	f7fa fe80 	bl	800190c <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e106      	b.n	8006e28 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c1a:	4b85      	ldr	r3, [pc, #532]	; (8006e30 <HAL_RCC_OscConfig+0x4e4>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0f0      	beq.n	8006c08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d106      	bne.n	8006c3c <HAL_RCC_OscConfig+0x2f0>
 8006c2e:	4b81      	ldr	r3, [pc, #516]	; (8006e34 <HAL_RCC_OscConfig+0x4e8>)
 8006c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c32:	4a80      	ldr	r2, [pc, #512]	; (8006e34 <HAL_RCC_OscConfig+0x4e8>)
 8006c34:	f043 0301 	orr.w	r3, r3, #1
 8006c38:	6713      	str	r3, [r2, #112]	; 0x70
 8006c3a:	e01c      	b.n	8006c76 <HAL_RCC_OscConfig+0x32a>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	2b05      	cmp	r3, #5
 8006c42:	d10c      	bne.n	8006c5e <HAL_RCC_OscConfig+0x312>
 8006c44:	4b7b      	ldr	r3, [pc, #492]	; (8006e34 <HAL_RCC_OscConfig+0x4e8>)
 8006c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c48:	4a7a      	ldr	r2, [pc, #488]	; (8006e34 <HAL_RCC_OscConfig+0x4e8>)
 8006c4a:	f043 0304 	orr.w	r3, r3, #4
 8006c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c50:	4b78      	ldr	r3, [pc, #480]	; (8006e34 <HAL_RCC_OscConfig+0x4e8>)
 8006c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c54:	4a77      	ldr	r2, [pc, #476]	; (8006e34 <HAL_RCC_OscConfig+0x4e8>)
 8006c56:	f043 0301 	orr.w	r3, r3, #1
 8006c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c5c:	e00b      	b.n	8006c76 <HAL_RCC_OscConfig+0x32a>
 8006c5e:	4b75      	ldr	r3, [pc, #468]	; (8006e34 <HAL_RCC_OscConfig+0x4e8>)
 8006c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c62:	4a74      	ldr	r2, [pc, #464]	; (8006e34 <HAL_RCC_OscConfig+0x4e8>)
 8006c64:	f023 0301 	bic.w	r3, r3, #1
 8006c68:	6713      	str	r3, [r2, #112]	; 0x70
 8006c6a:	4b72      	ldr	r3, [pc, #456]	; (8006e34 <HAL_RCC_OscConfig+0x4e8>)
 8006c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6e:	4a71      	ldr	r2, [pc, #452]	; (8006e34 <HAL_RCC_OscConfig+0x4e8>)
 8006c70:	f023 0304 	bic.w	r3, r3, #4
 8006c74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d015      	beq.n	8006caa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c7e:	f7fa fe45 	bl	800190c <HAL_GetTick>
 8006c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c84:	e00a      	b.n	8006c9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c86:	f7fa fe41 	bl	800190c <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d901      	bls.n	8006c9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e0c5      	b.n	8006e28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c9c:	4b65      	ldr	r3, [pc, #404]	; (8006e34 <HAL_RCC_OscConfig+0x4e8>)
 8006c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca0:	f003 0302 	and.w	r3, r3, #2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d0ee      	beq.n	8006c86 <HAL_RCC_OscConfig+0x33a>
 8006ca8:	e014      	b.n	8006cd4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006caa:	f7fa fe2f 	bl	800190c <HAL_GetTick>
 8006cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cb0:	e00a      	b.n	8006cc8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cb2:	f7fa fe2b 	bl	800190c <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e0af      	b.n	8006e28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cc8:	4b5a      	ldr	r3, [pc, #360]	; (8006e34 <HAL_RCC_OscConfig+0x4e8>)
 8006cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1ee      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cd4:	7dfb      	ldrb	r3, [r7, #23]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d105      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cda:	4b56      	ldr	r3, [pc, #344]	; (8006e34 <HAL_RCC_OscConfig+0x4e8>)
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	4a55      	ldr	r2, [pc, #340]	; (8006e34 <HAL_RCC_OscConfig+0x4e8>)
 8006ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ce4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 809b 	beq.w	8006e26 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006cf0:	4b50      	ldr	r3, [pc, #320]	; (8006e34 <HAL_RCC_OscConfig+0x4e8>)
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f003 030c 	and.w	r3, r3, #12
 8006cf8:	2b08      	cmp	r3, #8
 8006cfa:	d05c      	beq.n	8006db6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d141      	bne.n	8006d88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d04:	4b4c      	ldr	r3, [pc, #304]	; (8006e38 <HAL_RCC_OscConfig+0x4ec>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d0a:	f7fa fdff 	bl	800190c <HAL_GetTick>
 8006d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d10:	e008      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d12:	f7fa fdfb 	bl	800190c <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d901      	bls.n	8006d24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e081      	b.n	8006e28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d24:	4b43      	ldr	r3, [pc, #268]	; (8006e34 <HAL_RCC_OscConfig+0x4e8>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1f0      	bne.n	8006d12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	69da      	ldr	r2, [r3, #28]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	019b      	lsls	r3, r3, #6
 8006d40:	431a      	orrs	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d46:	085b      	lsrs	r3, r3, #1
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	041b      	lsls	r3, r3, #16
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d52:	061b      	lsls	r3, r3, #24
 8006d54:	4937      	ldr	r1, [pc, #220]	; (8006e34 <HAL_RCC_OscConfig+0x4e8>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d5a:	4b37      	ldr	r3, [pc, #220]	; (8006e38 <HAL_RCC_OscConfig+0x4ec>)
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d60:	f7fa fdd4 	bl	800190c <HAL_GetTick>
 8006d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d66:	e008      	b.n	8006d7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d68:	f7fa fdd0 	bl	800190c <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d901      	bls.n	8006d7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e056      	b.n	8006e28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d7a:	4b2e      	ldr	r3, [pc, #184]	; (8006e34 <HAL_RCC_OscConfig+0x4e8>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d0f0      	beq.n	8006d68 <HAL_RCC_OscConfig+0x41c>
 8006d86:	e04e      	b.n	8006e26 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d88:	4b2b      	ldr	r3, [pc, #172]	; (8006e38 <HAL_RCC_OscConfig+0x4ec>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d8e:	f7fa fdbd 	bl	800190c <HAL_GetTick>
 8006d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d94:	e008      	b.n	8006da8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d96:	f7fa fdb9 	bl	800190c <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d901      	bls.n	8006da8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e03f      	b.n	8006e28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006da8:	4b22      	ldr	r3, [pc, #136]	; (8006e34 <HAL_RCC_OscConfig+0x4e8>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1f0      	bne.n	8006d96 <HAL_RCC_OscConfig+0x44a>
 8006db4:	e037      	b.n	8006e26 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d101      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e032      	b.n	8006e28 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006dc2:	4b1c      	ldr	r3, [pc, #112]	; (8006e34 <HAL_RCC_OscConfig+0x4e8>)
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d028      	beq.n	8006e22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d121      	bne.n	8006e22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d11a      	bne.n	8006e22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006df2:	4013      	ands	r3, r2
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006df8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d111      	bne.n	8006e22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e08:	085b      	lsrs	r3, r3, #1
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d107      	bne.n	8006e22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d001      	beq.n	8006e26 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e000      	b.n	8006e28 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3718      	adds	r7, #24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	40007000 	.word	0x40007000
 8006e34:	40023800 	.word	0x40023800
 8006e38:	42470060 	.word	0x42470060

08006e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e0cc      	b.n	8006fea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e50:	4b68      	ldr	r3, [pc, #416]	; (8006ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0307 	and.w	r3, r3, #7
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d90c      	bls.n	8006e78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e5e:	4b65      	ldr	r3, [pc, #404]	; (8006ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	b2d2      	uxtb	r2, r2
 8006e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e66:	4b63      	ldr	r3, [pc, #396]	; (8006ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0307 	and.w	r3, r3, #7
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d001      	beq.n	8006e78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e0b8      	b.n	8006fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d020      	beq.n	8006ec6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0304 	and.w	r3, r3, #4
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d005      	beq.n	8006e9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e90:	4b59      	ldr	r3, [pc, #356]	; (8006ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	4a58      	ldr	r2, [pc, #352]	; (8006ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0308 	and.w	r3, r3, #8
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d005      	beq.n	8006eb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ea8:	4b53      	ldr	r3, [pc, #332]	; (8006ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	4a52      	ldr	r2, [pc, #328]	; (8006ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8006eae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006eb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006eb4:	4b50      	ldr	r3, [pc, #320]	; (8006ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	494d      	ldr	r1, [pc, #308]	; (8006ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d044      	beq.n	8006f5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d107      	bne.n	8006eea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eda:	4b47      	ldr	r3, [pc, #284]	; (8006ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d119      	bne.n	8006f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e07f      	b.n	8006fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d003      	beq.n	8006efa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d107      	bne.n	8006f0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006efa:	4b3f      	ldr	r3, [pc, #252]	; (8006ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d109      	bne.n	8006f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e06f      	b.n	8006fea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f0a:	4b3b      	ldr	r3, [pc, #236]	; (8006ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e067      	b.n	8006fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f1a:	4b37      	ldr	r3, [pc, #220]	; (8006ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f023 0203 	bic.w	r2, r3, #3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	4934      	ldr	r1, [pc, #208]	; (8006ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f2c:	f7fa fcee 	bl	800190c <HAL_GetTick>
 8006f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f32:	e00a      	b.n	8006f4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f34:	f7fa fcea 	bl	800190c <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d901      	bls.n	8006f4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e04f      	b.n	8006fea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f4a:	4b2b      	ldr	r3, [pc, #172]	; (8006ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f003 020c 	and.w	r2, r3, #12
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d1eb      	bne.n	8006f34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f5c:	4b25      	ldr	r3, [pc, #148]	; (8006ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0307 	and.w	r3, r3, #7
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d20c      	bcs.n	8006f84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f6a:	4b22      	ldr	r3, [pc, #136]	; (8006ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	b2d2      	uxtb	r2, r2
 8006f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f72:	4b20      	ldr	r3, [pc, #128]	; (8006ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0307 	and.w	r3, r3, #7
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d001      	beq.n	8006f84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e032      	b.n	8006fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0304 	and.w	r3, r3, #4
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d008      	beq.n	8006fa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f90:	4b19      	ldr	r3, [pc, #100]	; (8006ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	4916      	ldr	r1, [pc, #88]	; (8006ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0308 	and.w	r3, r3, #8
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d009      	beq.n	8006fc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fae:	4b12      	ldr	r3, [pc, #72]	; (8006ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	00db      	lsls	r3, r3, #3
 8006fbc:	490e      	ldr	r1, [pc, #56]	; (8006ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006fc2:	f000 f821 	bl	8007008 <HAL_RCC_GetSysClockFreq>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	4b0b      	ldr	r3, [pc, #44]	; (8006ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	091b      	lsrs	r3, r3, #4
 8006fce:	f003 030f 	and.w	r3, r3, #15
 8006fd2:	490a      	ldr	r1, [pc, #40]	; (8006ffc <HAL_RCC_ClockConfig+0x1c0>)
 8006fd4:	5ccb      	ldrb	r3, [r1, r3]
 8006fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006fda:	4a09      	ldr	r2, [pc, #36]	; (8007000 <HAL_RCC_ClockConfig+0x1c4>)
 8006fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006fde:	4b09      	ldr	r3, [pc, #36]	; (8007004 <HAL_RCC_ClockConfig+0x1c8>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fa fc4e 	bl	8001884 <HAL_InitTick>

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	40023c00 	.word	0x40023c00
 8006ff8:	40023800 	.word	0x40023800
 8006ffc:	080870c8 	.word	0x080870c8
 8007000:	20000018 	.word	0x20000018
 8007004:	2000001c 	.word	0x2000001c

08007008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007008:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800700c:	b084      	sub	sp, #16
 800700e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007010:	2300      	movs	r3, #0
 8007012:	607b      	str	r3, [r7, #4]
 8007014:	2300      	movs	r3, #0
 8007016:	60fb      	str	r3, [r7, #12]
 8007018:	2300      	movs	r3, #0
 800701a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007020:	4b67      	ldr	r3, [pc, #412]	; (80071c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f003 030c 	and.w	r3, r3, #12
 8007028:	2b08      	cmp	r3, #8
 800702a:	d00d      	beq.n	8007048 <HAL_RCC_GetSysClockFreq+0x40>
 800702c:	2b08      	cmp	r3, #8
 800702e:	f200 80bd 	bhi.w	80071ac <HAL_RCC_GetSysClockFreq+0x1a4>
 8007032:	2b00      	cmp	r3, #0
 8007034:	d002      	beq.n	800703c <HAL_RCC_GetSysClockFreq+0x34>
 8007036:	2b04      	cmp	r3, #4
 8007038:	d003      	beq.n	8007042 <HAL_RCC_GetSysClockFreq+0x3a>
 800703a:	e0b7      	b.n	80071ac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800703c:	4b61      	ldr	r3, [pc, #388]	; (80071c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800703e:	60bb      	str	r3, [r7, #8]
       break;
 8007040:	e0b7      	b.n	80071b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007042:	4b61      	ldr	r3, [pc, #388]	; (80071c8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007044:	60bb      	str	r3, [r7, #8]
      break;
 8007046:	e0b4      	b.n	80071b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007048:	4b5d      	ldr	r3, [pc, #372]	; (80071c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007050:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007052:	4b5b      	ldr	r3, [pc, #364]	; (80071c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d04d      	beq.n	80070fa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800705e:	4b58      	ldr	r3, [pc, #352]	; (80071c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	099b      	lsrs	r3, r3, #6
 8007064:	461a      	mov	r2, r3
 8007066:	f04f 0300 	mov.w	r3, #0
 800706a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800706e:	f04f 0100 	mov.w	r1, #0
 8007072:	ea02 0800 	and.w	r8, r2, r0
 8007076:	ea03 0901 	and.w	r9, r3, r1
 800707a:	4640      	mov	r0, r8
 800707c:	4649      	mov	r1, r9
 800707e:	f04f 0200 	mov.w	r2, #0
 8007082:	f04f 0300 	mov.w	r3, #0
 8007086:	014b      	lsls	r3, r1, #5
 8007088:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800708c:	0142      	lsls	r2, r0, #5
 800708e:	4610      	mov	r0, r2
 8007090:	4619      	mov	r1, r3
 8007092:	ebb0 0008 	subs.w	r0, r0, r8
 8007096:	eb61 0109 	sbc.w	r1, r1, r9
 800709a:	f04f 0200 	mov.w	r2, #0
 800709e:	f04f 0300 	mov.w	r3, #0
 80070a2:	018b      	lsls	r3, r1, #6
 80070a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80070a8:	0182      	lsls	r2, r0, #6
 80070aa:	1a12      	subs	r2, r2, r0
 80070ac:	eb63 0301 	sbc.w	r3, r3, r1
 80070b0:	f04f 0000 	mov.w	r0, #0
 80070b4:	f04f 0100 	mov.w	r1, #0
 80070b8:	00d9      	lsls	r1, r3, #3
 80070ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070be:	00d0      	lsls	r0, r2, #3
 80070c0:	4602      	mov	r2, r0
 80070c2:	460b      	mov	r3, r1
 80070c4:	eb12 0208 	adds.w	r2, r2, r8
 80070c8:	eb43 0309 	adc.w	r3, r3, r9
 80070cc:	f04f 0000 	mov.w	r0, #0
 80070d0:	f04f 0100 	mov.w	r1, #0
 80070d4:	0259      	lsls	r1, r3, #9
 80070d6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80070da:	0250      	lsls	r0, r2, #9
 80070dc:	4602      	mov	r2, r0
 80070de:	460b      	mov	r3, r1
 80070e0:	4610      	mov	r0, r2
 80070e2:	4619      	mov	r1, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	461a      	mov	r2, r3
 80070e8:	f04f 0300 	mov.w	r3, #0
 80070ec:	f7f9 f8c0 	bl	8000270 <__aeabi_uldivmod>
 80070f0:	4602      	mov	r2, r0
 80070f2:	460b      	mov	r3, r1
 80070f4:	4613      	mov	r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]
 80070f8:	e04a      	b.n	8007190 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070fa:	4b31      	ldr	r3, [pc, #196]	; (80071c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	099b      	lsrs	r3, r3, #6
 8007100:	461a      	mov	r2, r3
 8007102:	f04f 0300 	mov.w	r3, #0
 8007106:	f240 10ff 	movw	r0, #511	; 0x1ff
 800710a:	f04f 0100 	mov.w	r1, #0
 800710e:	ea02 0400 	and.w	r4, r2, r0
 8007112:	ea03 0501 	and.w	r5, r3, r1
 8007116:	4620      	mov	r0, r4
 8007118:	4629      	mov	r1, r5
 800711a:	f04f 0200 	mov.w	r2, #0
 800711e:	f04f 0300 	mov.w	r3, #0
 8007122:	014b      	lsls	r3, r1, #5
 8007124:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007128:	0142      	lsls	r2, r0, #5
 800712a:	4610      	mov	r0, r2
 800712c:	4619      	mov	r1, r3
 800712e:	1b00      	subs	r0, r0, r4
 8007130:	eb61 0105 	sbc.w	r1, r1, r5
 8007134:	f04f 0200 	mov.w	r2, #0
 8007138:	f04f 0300 	mov.w	r3, #0
 800713c:	018b      	lsls	r3, r1, #6
 800713e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007142:	0182      	lsls	r2, r0, #6
 8007144:	1a12      	subs	r2, r2, r0
 8007146:	eb63 0301 	sbc.w	r3, r3, r1
 800714a:	f04f 0000 	mov.w	r0, #0
 800714e:	f04f 0100 	mov.w	r1, #0
 8007152:	00d9      	lsls	r1, r3, #3
 8007154:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007158:	00d0      	lsls	r0, r2, #3
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	1912      	adds	r2, r2, r4
 8007160:	eb45 0303 	adc.w	r3, r5, r3
 8007164:	f04f 0000 	mov.w	r0, #0
 8007168:	f04f 0100 	mov.w	r1, #0
 800716c:	0299      	lsls	r1, r3, #10
 800716e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007172:	0290      	lsls	r0, r2, #10
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4610      	mov	r0, r2
 800717a:	4619      	mov	r1, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	461a      	mov	r2, r3
 8007180:	f04f 0300 	mov.w	r3, #0
 8007184:	f7f9 f874 	bl	8000270 <__aeabi_uldivmod>
 8007188:	4602      	mov	r2, r0
 800718a:	460b      	mov	r3, r1
 800718c:	4613      	mov	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007190:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	0c1b      	lsrs	r3, r3, #16
 8007196:	f003 0303 	and.w	r3, r3, #3
 800719a:	3301      	adds	r3, #1
 800719c:	005b      	lsls	r3, r3, #1
 800719e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a8:	60bb      	str	r3, [r7, #8]
      break;
 80071aa:	e002      	b.n	80071b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80071ac:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80071ae:	60bb      	str	r3, [r7, #8]
      break;
 80071b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071b2:	68bb      	ldr	r3, [r7, #8]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80071be:	bf00      	nop
 80071c0:	40023800 	.word	0x40023800
 80071c4:	00f42400 	.word	0x00f42400
 80071c8:	007a1200 	.word	0x007a1200

080071cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071cc:	b480      	push	{r7}
 80071ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071d0:	4b03      	ldr	r3, [pc, #12]	; (80071e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80071d2:	681b      	ldr	r3, [r3, #0]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	20000018 	.word	0x20000018

080071e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80071e8:	f7ff fff0 	bl	80071cc <HAL_RCC_GetHCLKFreq>
 80071ec:	4602      	mov	r2, r0
 80071ee:	4b05      	ldr	r3, [pc, #20]	; (8007204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	0a9b      	lsrs	r3, r3, #10
 80071f4:	f003 0307 	and.w	r3, r3, #7
 80071f8:	4903      	ldr	r1, [pc, #12]	; (8007208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071fa:	5ccb      	ldrb	r3, [r1, r3]
 80071fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007200:	4618      	mov	r0, r3
 8007202:	bd80      	pop	{r7, pc}
 8007204:	40023800 	.word	0x40023800
 8007208:	080870d8 	.word	0x080870d8

0800720c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007210:	f7ff ffdc 	bl	80071cc <HAL_RCC_GetHCLKFreq>
 8007214:	4602      	mov	r2, r0
 8007216:	4b05      	ldr	r3, [pc, #20]	; (800722c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	0b5b      	lsrs	r3, r3, #13
 800721c:	f003 0307 	and.w	r3, r3, #7
 8007220:	4903      	ldr	r1, [pc, #12]	; (8007230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007222:	5ccb      	ldrb	r3, [r1, r3]
 8007224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007228:	4618      	mov	r0, r3
 800722a:	bd80      	pop	{r7, pc}
 800722c:	40023800 	.word	0x40023800
 8007230:	080870d8 	.word	0x080870d8

08007234 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800723c:	2300      	movs	r3, #0
 800723e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0301 	and.w	r3, r3, #1
 800724c:	2b00      	cmp	r3, #0
 800724e:	d105      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007258:	2b00      	cmp	r3, #0
 800725a:	d035      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800725c:	4b62      	ldr	r3, [pc, #392]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007262:	f7fa fb53 	bl	800190c <HAL_GetTick>
 8007266:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007268:	e008      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800726a:	f7fa fb4f 	bl	800190c <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	2b02      	cmp	r3, #2
 8007276:	d901      	bls.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e0b0      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800727c:	4b5b      	ldr	r3, [pc, #364]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1f0      	bne.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	019a      	lsls	r2, r3, #6
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	071b      	lsls	r3, r3, #28
 8007294:	4955      	ldr	r1, [pc, #340]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007296:	4313      	orrs	r3, r2
 8007298:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800729c:	4b52      	ldr	r3, [pc, #328]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800729e:	2201      	movs	r2, #1
 80072a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072a2:	f7fa fb33 	bl	800190c <HAL_GetTick>
 80072a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072a8:	e008      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80072aa:	f7fa fb2f 	bl	800190c <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d901      	bls.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e090      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072bc:	4b4b      	ldr	r3, [pc, #300]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0f0      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 8083 	beq.w	80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80072d6:	2300      	movs	r3, #0
 80072d8:	60fb      	str	r3, [r7, #12]
 80072da:	4b44      	ldr	r3, [pc, #272]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072de:	4a43      	ldr	r2, [pc, #268]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072e4:	6413      	str	r3, [r2, #64]	; 0x40
 80072e6:	4b41      	ldr	r3, [pc, #260]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80072f2:	4b3f      	ldr	r3, [pc, #252]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a3e      	ldr	r2, [pc, #248]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80072f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80072fe:	f7fa fb05 	bl	800190c <HAL_GetTick>
 8007302:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007304:	e008      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007306:	f7fa fb01 	bl	800190c <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	2b02      	cmp	r3, #2
 8007312:	d901      	bls.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e062      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007318:	4b35      	ldr	r3, [pc, #212]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007320:	2b00      	cmp	r3, #0
 8007322:	d0f0      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007324:	4b31      	ldr	r3, [pc, #196]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800732c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d02f      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	429a      	cmp	r2, r3
 8007340:	d028      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007342:	4b2a      	ldr	r3, [pc, #168]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800734a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800734c:	4b29      	ldr	r3, [pc, #164]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800734e:	2201      	movs	r2, #1
 8007350:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007352:	4b28      	ldr	r3, [pc, #160]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007354:	2200      	movs	r2, #0
 8007356:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007358:	4a24      	ldr	r2, [pc, #144]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800735e:	4b23      	ldr	r3, [pc, #140]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007362:	f003 0301 	and.w	r3, r3, #1
 8007366:	2b01      	cmp	r3, #1
 8007368:	d114      	bne.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800736a:	f7fa facf 	bl	800190c <HAL_GetTick>
 800736e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007370:	e00a      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007372:	f7fa facb 	bl	800190c <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007380:	4293      	cmp	r3, r2
 8007382:	d901      	bls.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e02a      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007388:	4b18      	ldr	r3, [pc, #96]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800738a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738c:	f003 0302 	and.w	r3, r3, #2
 8007390:	2b00      	cmp	r3, #0
 8007392:	d0ee      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800739c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073a0:	d10d      	bne.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80073a2:	4b12      	ldr	r3, [pc, #72]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80073b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073b6:	490d      	ldr	r1, [pc, #52]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	608b      	str	r3, [r1, #8]
 80073bc:	e005      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 80073be:	4b0b      	ldr	r3, [pc, #44]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	4a0a      	ldr	r2, [pc, #40]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80073c8:	6093      	str	r3, [r2, #8]
 80073ca:	4b08      	ldr	r3, [pc, #32]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073d6:	4905      	ldr	r1, [pc, #20]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3718      	adds	r7, #24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	42470068 	.word	0x42470068
 80073ec:	40023800 	.word	0x40023800
 80073f0:	40007000 	.word	0x40007000
 80073f4:	42470e40 	.word	0x42470e40

080073f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007400:	2300      	movs	r3, #0
 8007402:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800740c:	2300      	movs	r3, #0
 800740e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d13e      	bne.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007416:	4b23      	ldr	r3, [pc, #140]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800741e:	60fb      	str	r3, [r7, #12]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d005      	beq.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d12f      	bne.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800742c:	4b1e      	ldr	r3, [pc, #120]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800742e:	617b      	str	r3, [r7, #20]
          break;
 8007430:	e02f      	b.n	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007432:	4b1c      	ldr	r3, [pc, #112]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800743a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800743e:	d108      	bne.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007440:	4b18      	ldr	r3, [pc, #96]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007448:	4a18      	ldr	r2, [pc, #96]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800744a:	fbb2 f3f3 	udiv	r3, r2, r3
 800744e:	613b      	str	r3, [r7, #16]
 8007450:	e007      	b.n	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007452:	4b14      	ldr	r3, [pc, #80]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800745a:	4a15      	ldr	r2, [pc, #84]	; (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800745c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007460:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007462:	4b10      	ldr	r3, [pc, #64]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007468:	099b      	lsrs	r3, r3, #6
 800746a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	fb02 f303 	mul.w	r3, r2, r3
 8007474:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007476:	4b0b      	ldr	r3, [pc, #44]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800747c:	0f1b      	lsrs	r3, r3, #28
 800747e:	f003 0307 	and.w	r3, r3, #7
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	fbb2 f3f3 	udiv	r3, r2, r3
 8007488:	617b      	str	r3, [r7, #20]
          break;
 800748a:	e002      	b.n	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	617b      	str	r3, [r7, #20]
          break;
 8007490:	bf00      	nop
        }
      }
      break;
 8007492:	bf00      	nop
    }
  }
  return frequency;
 8007494:	697b      	ldr	r3, [r7, #20]
}
 8007496:	4618      	mov	r0, r3
 8007498:	371c      	adds	r7, #28
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	40023800 	.word	0x40023800
 80074a8:	00bb8000 	.word	0x00bb8000
 80074ac:	007a1200 	.word	0x007a1200
 80074b0:	00f42400 	.word	0x00f42400

080074b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e03f      	b.n	8007546 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d106      	bne.n	80074e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7fa f816 	bl	800150c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2224      	movs	r2, #36	; 0x24
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68da      	ldr	r2, [r3, #12]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f929 	bl	8007750 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	691a      	ldr	r2, [r3, #16]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800750c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	695a      	ldr	r2, [r3, #20]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800751c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800752c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2220      	movs	r2, #32
 8007538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2220      	movs	r2, #32
 8007540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b08a      	sub	sp, #40	; 0x28
 8007552:	af02      	add	r7, sp, #8
 8007554:	60f8      	str	r0, [r7, #12]
 8007556:	60b9      	str	r1, [r7, #8]
 8007558:	603b      	str	r3, [r7, #0]
 800755a:	4613      	mov	r3, r2
 800755c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b20      	cmp	r3, #32
 800756c:	d17c      	bne.n	8007668 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d002      	beq.n	800757a <HAL_UART_Transmit+0x2c>
 8007574:	88fb      	ldrh	r3, [r7, #6]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e075      	b.n	800766a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007584:	2b01      	cmp	r3, #1
 8007586:	d101      	bne.n	800758c <HAL_UART_Transmit+0x3e>
 8007588:	2302      	movs	r3, #2
 800758a:	e06e      	b.n	800766a <HAL_UART_Transmit+0x11c>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2221      	movs	r2, #33	; 0x21
 800759e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075a2:	f7fa f9b3 	bl	800190c <HAL_GetTick>
 80075a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	88fa      	ldrh	r2, [r7, #6]
 80075ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	88fa      	ldrh	r2, [r7, #6]
 80075b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075bc:	d108      	bne.n	80075d0 <HAL_UART_Transmit+0x82>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d104      	bne.n	80075d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80075c6:	2300      	movs	r3, #0
 80075c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	61bb      	str	r3, [r7, #24]
 80075ce:	e003      	b.n	80075d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075d4:	2300      	movs	r3, #0
 80075d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80075e0:	e02a      	b.n	8007638 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2200      	movs	r2, #0
 80075ea:	2180      	movs	r1, #128	; 0x80
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f000 f840 	bl	8007672 <UART_WaitOnFlagUntilTimeout>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e036      	b.n	800766a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10b      	bne.n	800761a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	881b      	ldrh	r3, [r3, #0]
 8007606:	461a      	mov	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007610:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	3302      	adds	r3, #2
 8007616:	61bb      	str	r3, [r7, #24]
 8007618:	e007      	b.n	800762a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	781a      	ldrb	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	3301      	adds	r3, #1
 8007628:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800762e:	b29b      	uxth	r3, r3
 8007630:	3b01      	subs	r3, #1
 8007632:	b29a      	uxth	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800763c:	b29b      	uxth	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1cf      	bne.n	80075e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2200      	movs	r2, #0
 800764a:	2140      	movs	r1, #64	; 0x40
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 f810 	bl	8007672 <UART_WaitOnFlagUntilTimeout>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e006      	b.n	800766a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2220      	movs	r2, #32
 8007660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	e000      	b.n	800766a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007668:	2302      	movs	r3, #2
  }
}
 800766a:	4618      	mov	r0, r3
 800766c:	3720      	adds	r7, #32
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b090      	sub	sp, #64	; 0x40
 8007676:	af00      	add	r7, sp, #0
 8007678:	60f8      	str	r0, [r7, #12]
 800767a:	60b9      	str	r1, [r7, #8]
 800767c:	603b      	str	r3, [r7, #0]
 800767e:	4613      	mov	r3, r2
 8007680:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007682:	e050      	b.n	8007726 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768a:	d04c      	beq.n	8007726 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800768c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800768e:	2b00      	cmp	r3, #0
 8007690:	d007      	beq.n	80076a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8007692:	f7fa f93b 	bl	800190c <HAL_GetTick>
 8007696:	4602      	mov	r2, r0
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800769e:	429a      	cmp	r2, r3
 80076a0:	d241      	bcs.n	8007726 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	330c      	adds	r3, #12
 80076a8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	330c      	adds	r3, #12
 80076c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076c2:	637a      	str	r2, [r7, #52]	; 0x34
 80076c4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076ca:	e841 2300 	strex	r3, r2, [r1]
 80076ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80076d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1e5      	bne.n	80076a2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3314      	adds	r3, #20
 80076dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	e853 3f00 	ldrex	r3, [r3]
 80076e4:	613b      	str	r3, [r7, #16]
   return(result);
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f023 0301 	bic.w	r3, r3, #1
 80076ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3314      	adds	r3, #20
 80076f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076f6:	623a      	str	r2, [r7, #32]
 80076f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fa:	69f9      	ldr	r1, [r7, #28]
 80076fc:	6a3a      	ldr	r2, [r7, #32]
 80076fe:	e841 2300 	strex	r3, r2, [r1]
 8007702:	61bb      	str	r3, [r7, #24]
   return(result);
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1e5      	bne.n	80076d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2220      	movs	r2, #32
 800770e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2220      	movs	r2, #32
 8007716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e00f      	b.n	8007746 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	4013      	ands	r3, r2
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	429a      	cmp	r2, r3
 8007734:	bf0c      	ite	eq
 8007736:	2301      	moveq	r3, #1
 8007738:	2300      	movne	r3, #0
 800773a:	b2db      	uxtb	r3, r3
 800773c:	461a      	mov	r2, r3
 800773e:	79fb      	ldrb	r3, [r7, #7]
 8007740:	429a      	cmp	r2, r3
 8007742:	d09f      	beq.n	8007684 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3740      	adds	r7, #64	; 0x40
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
	...

08007750 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007754:	b09f      	sub	sp, #124	; 0x7c
 8007756:	af00      	add	r7, sp, #0
 8007758:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800775a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007766:	68d9      	ldr	r1, [r3, #12]
 8007768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	ea40 0301 	orr.w	r3, r0, r1
 8007770:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007774:	689a      	ldr	r2, [r3, #8]
 8007776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	431a      	orrs	r2, r3
 800777c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	431a      	orrs	r2, r3
 8007782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007784:	69db      	ldr	r3, [r3, #28]
 8007786:	4313      	orrs	r3, r2
 8007788:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800778a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007794:	f021 010c 	bic.w	r1, r1, #12
 8007798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800779e:	430b      	orrs	r3, r1
 80077a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	695b      	ldr	r3, [r3, #20]
 80077a8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80077ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ae:	6999      	ldr	r1, [r3, #24]
 80077b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	ea40 0301 	orr.w	r3, r0, r1
 80077b8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	4bc5      	ldr	r3, [pc, #788]	; (8007ad4 <UART_SetConfig+0x384>)
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d004      	beq.n	80077ce <UART_SetConfig+0x7e>
 80077c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	4bc3      	ldr	r3, [pc, #780]	; (8007ad8 <UART_SetConfig+0x388>)
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d103      	bne.n	80077d6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077ce:	f7ff fd1d 	bl	800720c <HAL_RCC_GetPCLK2Freq>
 80077d2:	6778      	str	r0, [r7, #116]	; 0x74
 80077d4:	e002      	b.n	80077dc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077d6:	f7ff fd05 	bl	80071e4 <HAL_RCC_GetPCLK1Freq>
 80077da:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077e4:	f040 80b6 	bne.w	8007954 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077ea:	461c      	mov	r4, r3
 80077ec:	f04f 0500 	mov.w	r5, #0
 80077f0:	4622      	mov	r2, r4
 80077f2:	462b      	mov	r3, r5
 80077f4:	1891      	adds	r1, r2, r2
 80077f6:	6439      	str	r1, [r7, #64]	; 0x40
 80077f8:	415b      	adcs	r3, r3
 80077fa:	647b      	str	r3, [r7, #68]	; 0x44
 80077fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007800:	1912      	adds	r2, r2, r4
 8007802:	eb45 0303 	adc.w	r3, r5, r3
 8007806:	f04f 0000 	mov.w	r0, #0
 800780a:	f04f 0100 	mov.w	r1, #0
 800780e:	00d9      	lsls	r1, r3, #3
 8007810:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007814:	00d0      	lsls	r0, r2, #3
 8007816:	4602      	mov	r2, r0
 8007818:	460b      	mov	r3, r1
 800781a:	1911      	adds	r1, r2, r4
 800781c:	6639      	str	r1, [r7, #96]	; 0x60
 800781e:	416b      	adcs	r3, r5
 8007820:	667b      	str	r3, [r7, #100]	; 0x64
 8007822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	461a      	mov	r2, r3
 8007828:	f04f 0300 	mov.w	r3, #0
 800782c:	1891      	adds	r1, r2, r2
 800782e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007830:	415b      	adcs	r3, r3
 8007832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007834:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007838:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800783c:	f7f8 fd18 	bl	8000270 <__aeabi_uldivmod>
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	4ba5      	ldr	r3, [pc, #660]	; (8007adc <UART_SetConfig+0x38c>)
 8007846:	fba3 2302 	umull	r2, r3, r3, r2
 800784a:	095b      	lsrs	r3, r3, #5
 800784c:	011e      	lsls	r6, r3, #4
 800784e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007850:	461c      	mov	r4, r3
 8007852:	f04f 0500 	mov.w	r5, #0
 8007856:	4622      	mov	r2, r4
 8007858:	462b      	mov	r3, r5
 800785a:	1891      	adds	r1, r2, r2
 800785c:	6339      	str	r1, [r7, #48]	; 0x30
 800785e:	415b      	adcs	r3, r3
 8007860:	637b      	str	r3, [r7, #52]	; 0x34
 8007862:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007866:	1912      	adds	r2, r2, r4
 8007868:	eb45 0303 	adc.w	r3, r5, r3
 800786c:	f04f 0000 	mov.w	r0, #0
 8007870:	f04f 0100 	mov.w	r1, #0
 8007874:	00d9      	lsls	r1, r3, #3
 8007876:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800787a:	00d0      	lsls	r0, r2, #3
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	1911      	adds	r1, r2, r4
 8007882:	65b9      	str	r1, [r7, #88]	; 0x58
 8007884:	416b      	adcs	r3, r5
 8007886:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	461a      	mov	r2, r3
 800788e:	f04f 0300 	mov.w	r3, #0
 8007892:	1891      	adds	r1, r2, r2
 8007894:	62b9      	str	r1, [r7, #40]	; 0x28
 8007896:	415b      	adcs	r3, r3
 8007898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800789a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800789e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80078a2:	f7f8 fce5 	bl	8000270 <__aeabi_uldivmod>
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	4b8c      	ldr	r3, [pc, #560]	; (8007adc <UART_SetConfig+0x38c>)
 80078ac:	fba3 1302 	umull	r1, r3, r3, r2
 80078b0:	095b      	lsrs	r3, r3, #5
 80078b2:	2164      	movs	r1, #100	; 0x64
 80078b4:	fb01 f303 	mul.w	r3, r1, r3
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	00db      	lsls	r3, r3, #3
 80078bc:	3332      	adds	r3, #50	; 0x32
 80078be:	4a87      	ldr	r2, [pc, #540]	; (8007adc <UART_SetConfig+0x38c>)
 80078c0:	fba2 2303 	umull	r2, r3, r2, r3
 80078c4:	095b      	lsrs	r3, r3, #5
 80078c6:	005b      	lsls	r3, r3, #1
 80078c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80078cc:	441e      	add	r6, r3
 80078ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078d0:	4618      	mov	r0, r3
 80078d2:	f04f 0100 	mov.w	r1, #0
 80078d6:	4602      	mov	r2, r0
 80078d8:	460b      	mov	r3, r1
 80078da:	1894      	adds	r4, r2, r2
 80078dc:	623c      	str	r4, [r7, #32]
 80078de:	415b      	adcs	r3, r3
 80078e0:	627b      	str	r3, [r7, #36]	; 0x24
 80078e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078e6:	1812      	adds	r2, r2, r0
 80078e8:	eb41 0303 	adc.w	r3, r1, r3
 80078ec:	f04f 0400 	mov.w	r4, #0
 80078f0:	f04f 0500 	mov.w	r5, #0
 80078f4:	00dd      	lsls	r5, r3, #3
 80078f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80078fa:	00d4      	lsls	r4, r2, #3
 80078fc:	4622      	mov	r2, r4
 80078fe:	462b      	mov	r3, r5
 8007900:	1814      	adds	r4, r2, r0
 8007902:	653c      	str	r4, [r7, #80]	; 0x50
 8007904:	414b      	adcs	r3, r1
 8007906:	657b      	str	r3, [r7, #84]	; 0x54
 8007908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	461a      	mov	r2, r3
 800790e:	f04f 0300 	mov.w	r3, #0
 8007912:	1891      	adds	r1, r2, r2
 8007914:	61b9      	str	r1, [r7, #24]
 8007916:	415b      	adcs	r3, r3
 8007918:	61fb      	str	r3, [r7, #28]
 800791a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800791e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007922:	f7f8 fca5 	bl	8000270 <__aeabi_uldivmod>
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	4b6c      	ldr	r3, [pc, #432]	; (8007adc <UART_SetConfig+0x38c>)
 800792c:	fba3 1302 	umull	r1, r3, r3, r2
 8007930:	095b      	lsrs	r3, r3, #5
 8007932:	2164      	movs	r1, #100	; 0x64
 8007934:	fb01 f303 	mul.w	r3, r1, r3
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	00db      	lsls	r3, r3, #3
 800793c:	3332      	adds	r3, #50	; 0x32
 800793e:	4a67      	ldr	r2, [pc, #412]	; (8007adc <UART_SetConfig+0x38c>)
 8007940:	fba2 2303 	umull	r2, r3, r2, r3
 8007944:	095b      	lsrs	r3, r3, #5
 8007946:	f003 0207 	and.w	r2, r3, #7
 800794a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4432      	add	r2, r6
 8007950:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007952:	e0b9      	b.n	8007ac8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007954:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007956:	461c      	mov	r4, r3
 8007958:	f04f 0500 	mov.w	r5, #0
 800795c:	4622      	mov	r2, r4
 800795e:	462b      	mov	r3, r5
 8007960:	1891      	adds	r1, r2, r2
 8007962:	6139      	str	r1, [r7, #16]
 8007964:	415b      	adcs	r3, r3
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800796c:	1912      	adds	r2, r2, r4
 800796e:	eb45 0303 	adc.w	r3, r5, r3
 8007972:	f04f 0000 	mov.w	r0, #0
 8007976:	f04f 0100 	mov.w	r1, #0
 800797a:	00d9      	lsls	r1, r3, #3
 800797c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007980:	00d0      	lsls	r0, r2, #3
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	eb12 0804 	adds.w	r8, r2, r4
 800798a:	eb43 0905 	adc.w	r9, r3, r5
 800798e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	4618      	mov	r0, r3
 8007994:	f04f 0100 	mov.w	r1, #0
 8007998:	f04f 0200 	mov.w	r2, #0
 800799c:	f04f 0300 	mov.w	r3, #0
 80079a0:	008b      	lsls	r3, r1, #2
 80079a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80079a6:	0082      	lsls	r2, r0, #2
 80079a8:	4640      	mov	r0, r8
 80079aa:	4649      	mov	r1, r9
 80079ac:	f7f8 fc60 	bl	8000270 <__aeabi_uldivmod>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	4b49      	ldr	r3, [pc, #292]	; (8007adc <UART_SetConfig+0x38c>)
 80079b6:	fba3 2302 	umull	r2, r3, r3, r2
 80079ba:	095b      	lsrs	r3, r3, #5
 80079bc:	011e      	lsls	r6, r3, #4
 80079be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079c0:	4618      	mov	r0, r3
 80079c2:	f04f 0100 	mov.w	r1, #0
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	1894      	adds	r4, r2, r2
 80079cc:	60bc      	str	r4, [r7, #8]
 80079ce:	415b      	adcs	r3, r3
 80079d0:	60fb      	str	r3, [r7, #12]
 80079d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079d6:	1812      	adds	r2, r2, r0
 80079d8:	eb41 0303 	adc.w	r3, r1, r3
 80079dc:	f04f 0400 	mov.w	r4, #0
 80079e0:	f04f 0500 	mov.w	r5, #0
 80079e4:	00dd      	lsls	r5, r3, #3
 80079e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80079ea:	00d4      	lsls	r4, r2, #3
 80079ec:	4622      	mov	r2, r4
 80079ee:	462b      	mov	r3, r5
 80079f0:	1814      	adds	r4, r2, r0
 80079f2:	64bc      	str	r4, [r7, #72]	; 0x48
 80079f4:	414b      	adcs	r3, r1
 80079f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f04f 0100 	mov.w	r1, #0
 8007a02:	f04f 0200 	mov.w	r2, #0
 8007a06:	f04f 0300 	mov.w	r3, #0
 8007a0a:	008b      	lsls	r3, r1, #2
 8007a0c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a10:	0082      	lsls	r2, r0, #2
 8007a12:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007a16:	f7f8 fc2b 	bl	8000270 <__aeabi_uldivmod>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4b2f      	ldr	r3, [pc, #188]	; (8007adc <UART_SetConfig+0x38c>)
 8007a20:	fba3 1302 	umull	r1, r3, r3, r2
 8007a24:	095b      	lsrs	r3, r3, #5
 8007a26:	2164      	movs	r1, #100	; 0x64
 8007a28:	fb01 f303 	mul.w	r3, r1, r3
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	011b      	lsls	r3, r3, #4
 8007a30:	3332      	adds	r3, #50	; 0x32
 8007a32:	4a2a      	ldr	r2, [pc, #168]	; (8007adc <UART_SetConfig+0x38c>)
 8007a34:	fba2 2303 	umull	r2, r3, r2, r3
 8007a38:	095b      	lsrs	r3, r3, #5
 8007a3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a3e:	441e      	add	r6, r3
 8007a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a42:	4618      	mov	r0, r3
 8007a44:	f04f 0100 	mov.w	r1, #0
 8007a48:	4602      	mov	r2, r0
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	1894      	adds	r4, r2, r2
 8007a4e:	603c      	str	r4, [r7, #0]
 8007a50:	415b      	adcs	r3, r3
 8007a52:	607b      	str	r3, [r7, #4]
 8007a54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a58:	1812      	adds	r2, r2, r0
 8007a5a:	eb41 0303 	adc.w	r3, r1, r3
 8007a5e:	f04f 0400 	mov.w	r4, #0
 8007a62:	f04f 0500 	mov.w	r5, #0
 8007a66:	00dd      	lsls	r5, r3, #3
 8007a68:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a6c:	00d4      	lsls	r4, r2, #3
 8007a6e:	4622      	mov	r2, r4
 8007a70:	462b      	mov	r3, r5
 8007a72:	eb12 0a00 	adds.w	sl, r2, r0
 8007a76:	eb43 0b01 	adc.w	fp, r3, r1
 8007a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f04f 0100 	mov.w	r1, #0
 8007a84:	f04f 0200 	mov.w	r2, #0
 8007a88:	f04f 0300 	mov.w	r3, #0
 8007a8c:	008b      	lsls	r3, r1, #2
 8007a8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a92:	0082      	lsls	r2, r0, #2
 8007a94:	4650      	mov	r0, sl
 8007a96:	4659      	mov	r1, fp
 8007a98:	f7f8 fbea 	bl	8000270 <__aeabi_uldivmod>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	4b0e      	ldr	r3, [pc, #56]	; (8007adc <UART_SetConfig+0x38c>)
 8007aa2:	fba3 1302 	umull	r1, r3, r3, r2
 8007aa6:	095b      	lsrs	r3, r3, #5
 8007aa8:	2164      	movs	r1, #100	; 0x64
 8007aaa:	fb01 f303 	mul.w	r3, r1, r3
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	011b      	lsls	r3, r3, #4
 8007ab2:	3332      	adds	r3, #50	; 0x32
 8007ab4:	4a09      	ldr	r2, [pc, #36]	; (8007adc <UART_SetConfig+0x38c>)
 8007ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aba:	095b      	lsrs	r3, r3, #5
 8007abc:	f003 020f 	and.w	r2, r3, #15
 8007ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4432      	add	r2, r6
 8007ac6:	609a      	str	r2, [r3, #8]
}
 8007ac8:	bf00      	nop
 8007aca:	377c      	adds	r7, #124	; 0x7c
 8007acc:	46bd      	mov	sp, r7
 8007ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad2:	bf00      	nop
 8007ad4:	40011000 	.word	0x40011000
 8007ad8:	40011400 	.word	0x40011400
 8007adc:	51eb851f 	.word	0x51eb851f

08007ae0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ae0:	b084      	sub	sp, #16
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b084      	sub	sp, #16
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	f107 001c 	add.w	r0, r7, #28
 8007aee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d122      	bne.n	8007b3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d105      	bne.n	8007b32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f9a0 	bl	8007e78 <USB_CoreReset>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	73fb      	strb	r3, [r7, #15]
 8007b3c:	e01a      	b.n	8007b74 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f994 	bl	8007e78 <USB_CoreReset>
 8007b50:	4603      	mov	r3, r0
 8007b52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d106      	bne.n	8007b68 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	639a      	str	r2, [r3, #56]	; 0x38
 8007b66:	e005      	b.n	8007b74 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d10b      	bne.n	8007b92 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f043 0206 	orr.w	r2, r3, #6
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f043 0220 	orr.w	r2, r3, #32
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b9e:	b004      	add	sp, #16
 8007ba0:	4770      	bx	lr

08007ba2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b083      	sub	sp, #12
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	f043 0201 	orr.w	r2, r3, #1
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f023 0201 	bic.w	r2, r3, #1
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	370c      	adds	r7, #12
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b084      	sub	sp, #16
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
 8007bee:	460b      	mov	r3, r1
 8007bf0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007c02:	78fb      	ldrb	r3, [r7, #3]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d115      	bne.n	8007c34 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c14:	2001      	movs	r0, #1
 8007c16:	f7f9 fe85 	bl	8001924 <HAL_Delay>
      ms++;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f91a 	bl	8007e5a <USB_GetMode>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d01e      	beq.n	8007c6a <USB_SetCurrentMode+0x84>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2b31      	cmp	r3, #49	; 0x31
 8007c30:	d9f0      	bls.n	8007c14 <USB_SetCurrentMode+0x2e>
 8007c32:	e01a      	b.n	8007c6a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c34:	78fb      	ldrb	r3, [r7, #3]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d115      	bne.n	8007c66 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c46:	2001      	movs	r0, #1
 8007c48:	f7f9 fe6c 	bl	8001924 <HAL_Delay>
      ms++;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f901 	bl	8007e5a <USB_GetMode>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d005      	beq.n	8007c6a <USB_SetCurrentMode+0x84>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2b31      	cmp	r3, #49	; 0x31
 8007c62:	d9f0      	bls.n	8007c46 <USB_SetCurrentMode+0x60>
 8007c64:	e001      	b.n	8007c6a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e005      	b.n	8007c76 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2b32      	cmp	r3, #50	; 0x32
 8007c6e:	d101      	bne.n	8007c74 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e000      	b.n	8007c76 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
	...

08007c80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	019b      	lsls	r3, r3, #6
 8007c92:	f043 0220 	orr.w	r2, r3, #32
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	60fb      	str	r3, [r7, #12]
 8007ca0:	4a08      	ldr	r2, [pc, #32]	; (8007cc4 <USB_FlushTxFifo+0x44>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d901      	bls.n	8007caa <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e006      	b.n	8007cb8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	f003 0320 	and.w	r3, r3, #32
 8007cb2:	2b20      	cmp	r3, #32
 8007cb4:	d0f1      	beq.n	8007c9a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	00030d40 	.word	0x00030d40

08007cc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2210      	movs	r2, #16
 8007cd8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	4a08      	ldr	r2, [pc, #32]	; (8007d04 <USB_FlushRxFifo+0x3c>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d901      	bls.n	8007cea <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e006      	b.n	8007cf8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	f003 0310 	and.w	r3, r3, #16
 8007cf2:	2b10      	cmp	r3, #16
 8007cf4:	d0f1      	beq.n	8007cda <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr
 8007d04:	00030d40 	.word	0x00030d40

08007d08 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b089      	sub	sp, #36	; 0x24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	4611      	mov	r1, r2
 8007d14:	461a      	mov	r2, r3
 8007d16:	460b      	mov	r3, r1
 8007d18:	71fb      	strb	r3, [r7, #7]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007d26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d123      	bne.n	8007d76 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007d2e:	88bb      	ldrh	r3, [r7, #4]
 8007d30:	3303      	adds	r3, #3
 8007d32:	089b      	lsrs	r3, r3, #2
 8007d34:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007d36:	2300      	movs	r3, #0
 8007d38:	61bb      	str	r3, [r7, #24]
 8007d3a:	e018      	b.n	8007d6e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007d3c:	79fb      	ldrb	r3, [r7, #7]
 8007d3e:	031a      	lsls	r2, r3, #12
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d48:	461a      	mov	r2, r3
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	3301      	adds	r3, #1
 8007d54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	3301      	adds	r3, #1
 8007d66:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	61bb      	str	r3, [r7, #24]
 8007d6e:	69ba      	ldr	r2, [r7, #24]
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d3e2      	bcc.n	8007d3c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3724      	adds	r7, #36	; 0x24
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b08b      	sub	sp, #44	; 0x2c
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	4613      	mov	r3, r2
 8007d90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007d9a:	88fb      	ldrh	r3, [r7, #6]
 8007d9c:	089b      	lsrs	r3, r3, #2
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007da2:	88fb      	ldrh	r3, [r7, #6]
 8007da4:	f003 0303 	and.w	r3, r3, #3
 8007da8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007daa:	2300      	movs	r3, #0
 8007dac:	623b      	str	r3, [r7, #32]
 8007dae:	e014      	b.n	8007dda <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	601a      	str	r2, [r3, #0]
    pDest++;
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dca:	3301      	adds	r3, #1
 8007dcc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007dd4:	6a3b      	ldr	r3, [r7, #32]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	623b      	str	r3, [r7, #32]
 8007dda:	6a3a      	ldr	r2, [r7, #32]
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d3e6      	bcc.n	8007db0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007de2:	8bfb      	ldrh	r3, [r7, #30]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d01e      	beq.n	8007e26 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007de8:	2300      	movs	r3, #0
 8007dea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007df2:	461a      	mov	r2, r3
 8007df4:	f107 0310 	add.w	r3, r7, #16
 8007df8:	6812      	ldr	r2, [r2, #0]
 8007dfa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	00db      	lsls	r3, r3, #3
 8007e04:	fa22 f303 	lsr.w	r3, r2, r3
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	701a      	strb	r2, [r3, #0]
      i++;
 8007e0e:	6a3b      	ldr	r3, [r7, #32]
 8007e10:	3301      	adds	r3, #1
 8007e12:	623b      	str	r3, [r7, #32]
      pDest++;
 8007e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e16:	3301      	adds	r3, #1
 8007e18:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007e1a:	8bfb      	ldrh	r3, [r7, #30]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007e20:	8bfb      	ldrh	r3, [r7, #30]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1ea      	bne.n	8007dfc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	372c      	adds	r7, #44	; 0x2c
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	4013      	ands	r3, r2
 8007e4a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3714      	adds	r7, #20
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b083      	sub	sp, #12
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	695b      	ldr	r3, [r3, #20]
 8007e66:	f003 0301 	and.w	r3, r3, #1
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
	...

08007e78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e80:	2300      	movs	r3, #0
 8007e82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3301      	adds	r3, #1
 8007e88:	60fb      	str	r3, [r7, #12]
 8007e8a:	4a13      	ldr	r2, [pc, #76]	; (8007ed8 <USB_CoreReset+0x60>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d901      	bls.n	8007e94 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e01a      	b.n	8007eca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	daf3      	bge.n	8007e84 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	f043 0201 	orr.w	r2, r3, #1
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	60fb      	str	r3, [r7, #12]
 8007eb2:	4a09      	ldr	r2, [pc, #36]	; (8007ed8 <USB_CoreReset+0x60>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d901      	bls.n	8007ebc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e006      	b.n	8007eca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	f003 0301 	and.w	r3, r3, #1
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d0f1      	beq.n	8007eac <USB_CoreReset+0x34>

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	00030d40 	.word	0x00030d40

08007edc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007edc:	b084      	sub	sp, #16
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	f107 001c 	add.w	r0, r7, #28
 8007eea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ef8:	461a      	mov	r2, r3
 8007efa:	2300      	movs	r3, #0
 8007efc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d018      	beq.n	8007f60 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d10a      	bne.n	8007f4a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f42:	f043 0304 	orr.w	r3, r3, #4
 8007f46:	6013      	str	r3, [r2, #0]
 8007f48:	e014      	b.n	8007f74 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f58:	f023 0304 	bic.w	r3, r3, #4
 8007f5c:	6013      	str	r3, [r2, #0]
 8007f5e:	e009      	b.n	8007f74 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f6e:	f023 0304 	bic.w	r3, r3, #4
 8007f72:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007f74:	2110      	movs	r1, #16
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7ff fe82 	bl	8007c80 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7ff fea3 	bl	8007cc8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007f82:	2300      	movs	r3, #0
 8007f84:	60fb      	str	r3, [r7, #12]
 8007f86:	e015      	b.n	8007fb4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f94:	461a      	mov	r2, r3
 8007f96:	f04f 33ff 	mov.w	r3, #4294967295
 8007f9a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fa8:	461a      	mov	r2, r3
 8007faa:	2300      	movs	r3, #0
 8007fac:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d3e5      	bcc.n	8007f88 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00b      	beq.n	8007fee <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fdc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a13      	ldr	r2, [pc, #76]	; (8008030 <USB_HostInit+0x154>)
 8007fe2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a13      	ldr	r2, [pc, #76]	; (8008034 <USB_HostInit+0x158>)
 8007fe8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007fec:	e009      	b.n	8008002 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2280      	movs	r2, #128	; 0x80
 8007ff2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a10      	ldr	r2, [pc, #64]	; (8008038 <USB_HostInit+0x15c>)
 8007ff8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a0f      	ldr	r2, [pc, #60]	; (800803c <USB_HostInit+0x160>)
 8007ffe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008004:	2b00      	cmp	r3, #0
 8008006:	d105      	bne.n	8008014 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	f043 0210 	orr.w	r2, r3, #16
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	699a      	ldr	r2, [r3, #24]
 8008018:	4b09      	ldr	r3, [pc, #36]	; (8008040 <USB_HostInit+0x164>)
 800801a:	4313      	orrs	r3, r2
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800802c:	b004      	add	sp, #16
 800802e:	4770      	bx	lr
 8008030:	01000200 	.word	0x01000200
 8008034:	00e00300 	.word	0x00e00300
 8008038:	00600080 	.word	0x00600080
 800803c:	004000e0 	.word	0x004000e0
 8008040:	a3200008 	.word	0xa3200008

08008044 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	460b      	mov	r3, r1
 800804e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008062:	f023 0303 	bic.w	r3, r3, #3
 8008066:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	78fb      	ldrb	r3, [r7, #3]
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	68f9      	ldr	r1, [r7, #12]
 8008078:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800807c:	4313      	orrs	r3, r2
 800807e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008080:	78fb      	ldrb	r3, [r7, #3]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d107      	bne.n	8008096 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800808c:	461a      	mov	r2, r3
 800808e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008092:	6053      	str	r3, [r2, #4]
 8008094:	e009      	b.n	80080aa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008096:	78fb      	ldrb	r3, [r7, #3]
 8008098:	2b02      	cmp	r3, #2
 800809a:	d106      	bne.n	80080aa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080a2:	461a      	mov	r2, r3
 80080a4:	f241 7370 	movw	r3, #6000	; 0x1770
 80080a8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3714      	adds	r7, #20
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80080c4:	2300      	movs	r3, #0
 80080c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80080d8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80080e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080e6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80080e8:	2064      	movs	r0, #100	; 0x64
 80080ea:	f7f9 fc1b 	bl	8001924 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80080f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080fa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80080fc:	200a      	movs	r0, #10
 80080fe:	f7f9 fc11 	bl	8001924 <HAL_Delay>

  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800811c:	2300      	movs	r3, #0
 800811e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008130:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d109      	bne.n	8008150 <USB_DriveVbus+0x44>
 800813c:	78fb      	ldrb	r3, [r7, #3]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d106      	bne.n	8008150 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800814a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800814e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800815a:	d109      	bne.n	8008170 <USB_DriveVbus+0x64>
 800815c:	78fb      	ldrb	r3, [r7, #3]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d106      	bne.n	8008170 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800816a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800816e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr

0800817e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800817e:	b480      	push	{r7}
 8008180:	b085      	sub	sp, #20
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800818a:	2300      	movs	r3, #0
 800818c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	0c5b      	lsrs	r3, r3, #17
 800819c:	f003 0303 	and.w	r3, r3, #3
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	b29b      	uxth	r3, r3
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
	...

080081d0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b088      	sub	sp, #32
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	4608      	mov	r0, r1
 80081da:	4611      	mov	r1, r2
 80081dc:	461a      	mov	r2, r3
 80081de:	4603      	mov	r3, r0
 80081e0:	70fb      	strb	r3, [r7, #3]
 80081e2:	460b      	mov	r3, r1
 80081e4:	70bb      	strb	r3, [r7, #2]
 80081e6:	4613      	mov	r3, r2
 80081e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80081f2:	78fb      	ldrb	r3, [r7, #3]
 80081f4:	015a      	lsls	r2, r3, #5
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081fe:	461a      	mov	r2, r3
 8008200:	f04f 33ff 	mov.w	r3, #4294967295
 8008204:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008206:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800820a:	2b03      	cmp	r3, #3
 800820c:	d87e      	bhi.n	800830c <USB_HC_Init+0x13c>
 800820e:	a201      	add	r2, pc, #4	; (adr r2, 8008214 <USB_HC_Init+0x44>)
 8008210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008214:	08008225 	.word	0x08008225
 8008218:	080082cf 	.word	0x080082cf
 800821c:	08008225 	.word	0x08008225
 8008220:	08008291 	.word	0x08008291
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008224:	78fb      	ldrb	r3, [r7, #3]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	4413      	add	r3, r2
 800822c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008230:	461a      	mov	r2, r3
 8008232:	f240 439d 	movw	r3, #1181	; 0x49d
 8008236:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008238:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800823c:	2b00      	cmp	r3, #0
 800823e:	da10      	bge.n	8008262 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008240:	78fb      	ldrb	r3, [r7, #3]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	4413      	add	r3, r2
 8008248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	78fa      	ldrb	r2, [r7, #3]
 8008250:	0151      	lsls	r1, r2, #5
 8008252:	693a      	ldr	r2, [r7, #16]
 8008254:	440a      	add	r2, r1
 8008256:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800825a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800825e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008260:	e057      	b.n	8008312 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800826a:	2b00      	cmp	r3, #0
 800826c:	d051      	beq.n	8008312 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800826e:	78fb      	ldrb	r3, [r7, #3]
 8008270:	015a      	lsls	r2, r3, #5
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	4413      	add	r3, r2
 8008276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	78fa      	ldrb	r2, [r7, #3]
 800827e:	0151      	lsls	r1, r2, #5
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	440a      	add	r2, r1
 8008284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008288:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800828c:	60d3      	str	r3, [r2, #12]
      break;
 800828e:	e040      	b.n	8008312 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008290:	78fb      	ldrb	r3, [r7, #3]
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	4413      	add	r3, r2
 8008298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800829c:	461a      	mov	r2, r3
 800829e:	f240 639d 	movw	r3, #1693	; 0x69d
 80082a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80082a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	da34      	bge.n	8008316 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80082ac:	78fb      	ldrb	r3, [r7, #3]
 80082ae:	015a      	lsls	r2, r3, #5
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	4413      	add	r3, r2
 80082b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	78fa      	ldrb	r2, [r7, #3]
 80082bc:	0151      	lsls	r1, r2, #5
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	440a      	add	r2, r1
 80082c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082ca:	60d3      	str	r3, [r2, #12]
      }

      break;
 80082cc:	e023      	b.n	8008316 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80082ce:	78fb      	ldrb	r3, [r7, #3]
 80082d0:	015a      	lsls	r2, r3, #5
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	4413      	add	r3, r2
 80082d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082da:	461a      	mov	r2, r3
 80082dc:	f240 2325 	movw	r3, #549	; 0x225
 80082e0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80082e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	da17      	bge.n	800831a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80082ea:	78fb      	ldrb	r3, [r7, #3]
 80082ec:	015a      	lsls	r2, r3, #5
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	4413      	add	r3, r2
 80082f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	78fa      	ldrb	r2, [r7, #3]
 80082fa:	0151      	lsls	r1, r2, #5
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	440a      	add	r2, r1
 8008300:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008304:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008308:	60d3      	str	r3, [r2, #12]
      }
      break;
 800830a:	e006      	b.n	800831a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	77fb      	strb	r3, [r7, #31]
      break;
 8008310:	e004      	b.n	800831c <USB_HC_Init+0x14c>
      break;
 8008312:	bf00      	nop
 8008314:	e002      	b.n	800831c <USB_HC_Init+0x14c>
      break;
 8008316:	bf00      	nop
 8008318:	e000      	b.n	800831c <USB_HC_Init+0x14c>
      break;
 800831a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008322:	699a      	ldr	r2, [r3, #24]
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	f003 030f 	and.w	r3, r3, #15
 800832a:	2101      	movs	r1, #1
 800832c:	fa01 f303 	lsl.w	r3, r1, r3
 8008330:	6939      	ldr	r1, [r7, #16]
 8008332:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008336:	4313      	orrs	r3, r2
 8008338:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008346:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800834a:	2b00      	cmp	r3, #0
 800834c:	da03      	bge.n	8008356 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800834e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008352:	61bb      	str	r3, [r7, #24]
 8008354:	e001      	b.n	800835a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008356:	2300      	movs	r3, #0
 8008358:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7ff ff0f 	bl	800817e <USB_GetHostSpeed>
 8008360:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008362:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008366:	2b02      	cmp	r3, #2
 8008368:	d106      	bne.n	8008378 <USB_HC_Init+0x1a8>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2b02      	cmp	r3, #2
 800836e:	d003      	beq.n	8008378 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008370:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008374:	617b      	str	r3, [r7, #20]
 8008376:	e001      	b.n	800837c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008378:	2300      	movs	r3, #0
 800837a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800837c:	787b      	ldrb	r3, [r7, #1]
 800837e:	059b      	lsls	r3, r3, #22
 8008380:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008384:	78bb      	ldrb	r3, [r7, #2]
 8008386:	02db      	lsls	r3, r3, #11
 8008388:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800838c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800838e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008392:	049b      	lsls	r3, r3, #18
 8008394:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008398:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800839a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800839c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80083a0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083a6:	78fb      	ldrb	r3, [r7, #3]
 80083a8:	0159      	lsls	r1, r3, #5
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	440b      	add	r3, r1
 80083ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083b2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083b8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80083ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083be:	2b03      	cmp	r3, #3
 80083c0:	d10f      	bne.n	80083e2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80083c2:	78fb      	ldrb	r3, [r7, #3]
 80083c4:	015a      	lsls	r2, r3, #5
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	4413      	add	r3, r2
 80083ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	78fa      	ldrb	r2, [r7, #3]
 80083d2:	0151      	lsls	r1, r2, #5
 80083d4:	693a      	ldr	r2, [r7, #16]
 80083d6:	440a      	add	r2, r1
 80083d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083e0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80083e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3720      	adds	r7, #32
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08c      	sub	sp, #48	; 0x30
 80083f0:	af02      	add	r7, sp, #8
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	4613      	mov	r3, r2
 80083f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	785b      	ldrb	r3, [r3, #1]
 8008402:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008408:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800840e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008412:	2b00      	cmp	r3, #0
 8008414:	d02d      	beq.n	8008472 <USB_HC_StartXfer+0x86>
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	791b      	ldrb	r3, [r3, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d129      	bne.n	8008472 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800841e:	79fb      	ldrb	r3, [r7, #7]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d117      	bne.n	8008454 <USB_HC_StartXfer+0x68>
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	79db      	ldrb	r3, [r3, #7]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d003      	beq.n	8008434 <USB_HC_StartXfer+0x48>
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	79db      	ldrb	r3, [r3, #7]
 8008430:	2b02      	cmp	r3, #2
 8008432:	d10f      	bne.n	8008454 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	4413      	add	r3, r2
 800843c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	69fa      	ldr	r2, [r7, #28]
 8008444:	0151      	lsls	r1, r2, #5
 8008446:	6a3a      	ldr	r2, [r7, #32]
 8008448:	440a      	add	r2, r1
 800844a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800844e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008452:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008454:	79fb      	ldrb	r3, [r7, #7]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10b      	bne.n	8008472 <USB_HC_StartXfer+0x86>
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	795b      	ldrb	r3, [r3, #5]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d107      	bne.n	8008472 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	785b      	ldrb	r3, [r3, #1]
 8008466:	4619      	mov	r1, r3
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f000 fa2f 	bl	80088cc <USB_DoPing>
      return HAL_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	e0f8      	b.n	8008664 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d018      	beq.n	80084ac <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	8912      	ldrh	r2, [r2, #8]
 8008482:	4413      	add	r3, r2
 8008484:	3b01      	subs	r3, #1
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	8912      	ldrh	r2, [r2, #8]
 800848a:	fbb3 f3f2 	udiv	r3, r3, r2
 800848e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008490:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008492:	8b7b      	ldrh	r3, [r7, #26]
 8008494:	429a      	cmp	r2, r3
 8008496:	d90b      	bls.n	80084b0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008498:	8b7b      	ldrh	r3, [r7, #26]
 800849a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800849c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	8912      	ldrh	r2, [r2, #8]
 80084a2:	fb02 f203 	mul.w	r2, r2, r3
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	611a      	str	r2, [r3, #16]
 80084aa:	e001      	b.n	80084b0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80084ac:	2301      	movs	r3, #1
 80084ae:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	78db      	ldrb	r3, [r3, #3]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d007      	beq.n	80084c8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80084b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	8912      	ldrh	r2, [r2, #8]
 80084be:	fb02 f203 	mul.w	r2, r2, r3
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	611a      	str	r2, [r3, #16]
 80084c6:	e003      	b.n	80084d0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	695a      	ldr	r2, [r3, #20]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80084d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084da:	04d9      	lsls	r1, r3, #19
 80084dc:	4b63      	ldr	r3, [pc, #396]	; (800866c <USB_HC_StartXfer+0x280>)
 80084de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80084e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	7a9b      	ldrb	r3, [r3, #10]
 80084e6:	075b      	lsls	r3, r3, #29
 80084e8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80084ec:	69f9      	ldr	r1, [r7, #28]
 80084ee:	0148      	lsls	r0, r1, #5
 80084f0:	6a39      	ldr	r1, [r7, #32]
 80084f2:	4401      	add	r1, r0
 80084f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80084f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80084fa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80084fc:	79fb      	ldrb	r3, [r7, #7]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d009      	beq.n	8008516 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	68d9      	ldr	r1, [r3, #12]
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	6a3b      	ldr	r3, [r7, #32]
 800850c:	4413      	add	r3, r2
 800850e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008512:	460a      	mov	r2, r1
 8008514:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f003 0301 	and.w	r3, r3, #1
 8008522:	2b00      	cmp	r3, #0
 8008524:	bf0c      	ite	eq
 8008526:	2301      	moveq	r3, #1
 8008528:	2300      	movne	r3, #0
 800852a:	b2db      	uxtb	r3, r3
 800852c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	015a      	lsls	r2, r3, #5
 8008532:	6a3b      	ldr	r3, [r7, #32]
 8008534:	4413      	add	r3, r2
 8008536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	69fa      	ldr	r2, [r7, #28]
 800853e:	0151      	lsls	r1, r2, #5
 8008540:	6a3a      	ldr	r2, [r7, #32]
 8008542:	440a      	add	r2, r1
 8008544:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008548:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800854c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	015a      	lsls	r2, r3, #5
 8008552:	6a3b      	ldr	r3, [r7, #32]
 8008554:	4413      	add	r3, r2
 8008556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	7e7b      	ldrb	r3, [r7, #25]
 800855e:	075b      	lsls	r3, r3, #29
 8008560:	69f9      	ldr	r1, [r7, #28]
 8008562:	0148      	lsls	r0, r1, #5
 8008564:	6a39      	ldr	r1, [r7, #32]
 8008566:	4401      	add	r1, r0
 8008568:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800856c:	4313      	orrs	r3, r2
 800856e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	4413      	add	r3, r2
 8008578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008586:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	78db      	ldrb	r3, [r3, #3]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d004      	beq.n	800859a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008596:	613b      	str	r3, [r7, #16]
 8008598:	e003      	b.n	80085a2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085a0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085a8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	015a      	lsls	r2, r3, #5
 80085ae:	6a3b      	ldr	r3, [r7, #32]
 80085b0:	4413      	add	r3, r2
 80085b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085b6:	461a      	mov	r2, r3
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80085bc:	79fb      	ldrb	r3, [r7, #7]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	e04e      	b.n	8008664 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	78db      	ldrb	r3, [r3, #3]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d149      	bne.n	8008662 <USB_HC_StartXfer+0x276>
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d045      	beq.n	8008662 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	79db      	ldrb	r3, [r3, #7]
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d830      	bhi.n	8008640 <USB_HC_StartXfer+0x254>
 80085de:	a201      	add	r2, pc, #4	; (adr r2, 80085e4 <USB_HC_StartXfer+0x1f8>)
 80085e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e4:	080085f5 	.word	0x080085f5
 80085e8:	08008619 	.word	0x08008619
 80085ec:	080085f5 	.word	0x080085f5
 80085f0:	08008619 	.word	0x08008619
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	3303      	adds	r3, #3
 80085fa:	089b      	lsrs	r3, r3, #2
 80085fc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80085fe:	8afa      	ldrh	r2, [r7, #22]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008604:	b29b      	uxth	r3, r3
 8008606:	429a      	cmp	r2, r3
 8008608:	d91c      	bls.n	8008644 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	f043 0220 	orr.w	r2, r3, #32
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	619a      	str	r2, [r3, #24]
        }
        break;
 8008616:	e015      	b.n	8008644 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	695b      	ldr	r3, [r3, #20]
 800861c:	3303      	adds	r3, #3
 800861e:	089b      	lsrs	r3, r3, #2
 8008620:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008622:	8afa      	ldrh	r2, [r7, #22]
 8008624:	6a3b      	ldr	r3, [r7, #32]
 8008626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	b29b      	uxth	r3, r3
 800862e:	429a      	cmp	r2, r3
 8008630:	d90a      	bls.n	8008648 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	619a      	str	r2, [r3, #24]
        }
        break;
 800863e:	e003      	b.n	8008648 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008640:	bf00      	nop
 8008642:	e002      	b.n	800864a <USB_HC_StartXfer+0x25e>
        break;
 8008644:	bf00      	nop
 8008646:	e000      	b.n	800864a <USB_HC_StartXfer+0x25e>
        break;
 8008648:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	68d9      	ldr	r1, [r3, #12]
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	785a      	ldrb	r2, [r3, #1]
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	b29b      	uxth	r3, r3
 8008658:	2000      	movs	r0, #0
 800865a:	9000      	str	r0, [sp, #0]
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f7ff fb53 	bl	8007d08 <USB_WritePacket>
  }

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3728      	adds	r7, #40	; 0x28
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	1ff80000 	.word	0x1ff80000

08008670 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	b29b      	uxth	r3, r3
}
 8008686:	4618      	mov	r0, r3
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr

08008692 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008692:	b480      	push	{r7}
 8008694:	b089      	sub	sp, #36	; 0x24
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	460b      	mov	r3, r1
 800869c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80086a2:	78fb      	ldrb	r3, [r7, #3]
 80086a4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	015a      	lsls	r2, r3, #5
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	4413      	add	r3, r2
 80086b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	0c9b      	lsrs	r3, r3, #18
 80086ba:	f003 0303 	and.w	r3, r3, #3
 80086be:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	015a      	lsls	r2, r3, #5
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	0fdb      	lsrs	r3, r3, #31
 80086d0:	f003 0301 	and.w	r3, r3, #1
 80086d4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	f003 0320 	and.w	r3, r3, #32
 80086de:	2b20      	cmp	r3, #32
 80086e0:	d104      	bne.n	80086ec <USB_HC_Halt+0x5a>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d101      	bne.n	80086ec <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	e0e8      	b.n	80088be <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d002      	beq.n	80086f8 <USB_HC_Halt+0x66>
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d173      	bne.n	80087e0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	015a      	lsls	r2, r3, #5
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	4413      	add	r3, r2
 8008700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	0151      	lsls	r1, r2, #5
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	440a      	add	r2, r1
 800870e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008712:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008716:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	f003 0320 	and.w	r3, r3, #32
 8008720:	2b00      	cmp	r3, #0
 8008722:	f040 80cb 	bne.w	80088bc <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d143      	bne.n	80087ba <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	015a      	lsls	r2, r3, #5
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	4413      	add	r3, r2
 800873a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	0151      	lsls	r1, r2, #5
 8008744:	69ba      	ldr	r2, [r7, #24]
 8008746:	440a      	add	r2, r1
 8008748:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800874c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008750:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	015a      	lsls	r2, r3, #5
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	4413      	add	r3, r2
 800875a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	0151      	lsls	r1, r2, #5
 8008764:	69ba      	ldr	r2, [r7, #24]
 8008766:	440a      	add	r2, r1
 8008768:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800876c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008770:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	015a      	lsls	r2, r3, #5
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	4413      	add	r3, r2
 800877a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	0151      	lsls	r1, r2, #5
 8008784:	69ba      	ldr	r2, [r7, #24]
 8008786:	440a      	add	r2, r1
 8008788:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800878c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008790:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	3301      	adds	r3, #1
 8008796:	61fb      	str	r3, [r7, #28]
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800879e:	d81d      	bhi.n	80087dc <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	015a      	lsls	r2, r3, #5
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087b6:	d0ec      	beq.n	8008792 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087b8:	e080      	b.n	80088bc <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	0151      	lsls	r1, r2, #5
 80087cc:	69ba      	ldr	r2, [r7, #24]
 80087ce:	440a      	add	r2, r1
 80087d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087d8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087da:	e06f      	b.n	80088bc <USB_HC_Halt+0x22a>
            break;
 80087dc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087de:	e06d      	b.n	80088bc <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	0151      	lsls	r1, r2, #5
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	440a      	add	r2, r1
 80087f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087fe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d143      	bne.n	8008898 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	015a      	lsls	r2, r3, #5
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	4413      	add	r3, r2
 8008818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	0151      	lsls	r1, r2, #5
 8008822:	69ba      	ldr	r2, [r7, #24]
 8008824:	440a      	add	r2, r1
 8008826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800882a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800882e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	015a      	lsls	r2, r3, #5
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	4413      	add	r3, r2
 8008838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	0151      	lsls	r1, r2, #5
 8008842:	69ba      	ldr	r2, [r7, #24]
 8008844:	440a      	add	r2, r1
 8008846:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800884a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800884e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	4413      	add	r3, r2
 8008858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	0151      	lsls	r1, r2, #5
 8008862:	69ba      	ldr	r2, [r7, #24]
 8008864:	440a      	add	r2, r1
 8008866:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800886a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800886e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	3301      	adds	r3, #1
 8008874:	61fb      	str	r3, [r7, #28]
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800887c:	d81d      	bhi.n	80088ba <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	4413      	add	r3, r2
 8008886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008890:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008894:	d0ec      	beq.n	8008870 <USB_HC_Halt+0x1de>
 8008896:	e011      	b.n	80088bc <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	4413      	add	r3, r2
 80088a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	0151      	lsls	r1, r2, #5
 80088aa:	69ba      	ldr	r2, [r7, #24]
 80088ac:	440a      	add	r2, r1
 80088ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088b6:	6013      	str	r3, [r2, #0]
 80088b8:	e000      	b.n	80088bc <USB_HC_Halt+0x22a>
          break;
 80088ba:	bf00      	nop
    }
  }

  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3724      	adds	r7, #36	; 0x24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
	...

080088cc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b087      	sub	sp, #28
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	460b      	mov	r3, r1
 80088d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80088dc:	78fb      	ldrb	r3, [r7, #3]
 80088de:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80088e0:	2301      	movs	r3, #1
 80088e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	04da      	lsls	r2, r3, #19
 80088e8:	4b15      	ldr	r3, [pc, #84]	; (8008940 <USB_DoPing+0x74>)
 80088ea:	4013      	ands	r3, r2
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	0151      	lsls	r1, r2, #5
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	440a      	add	r2, r1
 80088f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088fc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	015a      	lsls	r2, r3, #5
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	4413      	add	r3, r2
 8008906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008914:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800891c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	015a      	lsls	r2, r3, #5
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	4413      	add	r3, r2
 8008926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800892a:	461a      	mov	r2, r3
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	371c      	adds	r7, #28
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	1ff80000 	.word	0x1ff80000

08008944 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b086      	sub	sp, #24
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008950:	2300      	movs	r3, #0
 8008952:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f7ff f935 	bl	8007bc4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800895a:	2110      	movs	r1, #16
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f7ff f98f 	bl	8007c80 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7ff f9b0 	bl	8007cc8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008968:	2300      	movs	r3, #0
 800896a:	613b      	str	r3, [r7, #16]
 800896c:	e01f      	b.n	80089ae <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	015a      	lsls	r2, r3, #5
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	4413      	add	r3, r2
 8008976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008984:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800898c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008994:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	015a      	lsls	r2, r3, #5
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	4413      	add	r3, r2
 800899e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089a2:	461a      	mov	r2, r3
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	3301      	adds	r3, #1
 80089ac:	613b      	str	r3, [r7, #16]
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	2b0f      	cmp	r3, #15
 80089b2:	d9dc      	bls.n	800896e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80089b4:	2300      	movs	r3, #0
 80089b6:	613b      	str	r3, [r7, #16]
 80089b8:	e034      	b.n	8008a24 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	015a      	lsls	r2, r3, #5
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	4413      	add	r3, r2
 80089c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089d0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089e0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	015a      	lsls	r2, r3, #5
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ee:	461a      	mov	r2, r3
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	3301      	adds	r3, #1
 80089f8:	617b      	str	r3, [r7, #20]
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a00:	d80c      	bhi.n	8008a1c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	015a      	lsls	r2, r3, #5
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	4413      	add	r3, r2
 8008a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a18:	d0ec      	beq.n	80089f4 <USB_StopHost+0xb0>
 8008a1a:	e000      	b.n	8008a1e <USB_StopHost+0xda>
        break;
 8008a1c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	3301      	adds	r3, #1
 8008a22:	613b      	str	r3, [r7, #16]
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	2b0f      	cmp	r3, #15
 8008a28:	d9c7      	bls.n	80089ba <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a30:	461a      	mov	r2, r3
 8008a32:	f04f 33ff 	mov.w	r3, #4294967295
 8008a36:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a3e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff f8ae 	bl	8007ba2 <USB_EnableGlobalInt>

  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3718      	adds	r7, #24
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008a54:	4904      	ldr	r1, [pc, #16]	; (8008a68 <MX_FATFS_Init+0x18>)
 8008a56:	4805      	ldr	r0, [pc, #20]	; (8008a6c <MX_FATFS_Init+0x1c>)
 8008a58:	f006 f80a 	bl	800ea70 <FATFS_LinkDriver>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	461a      	mov	r2, r3
 8008a60:	4b03      	ldr	r3, [pc, #12]	; (8008a70 <MX_FATFS_Init+0x20>)
 8008a62:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008a64:	bf00      	nop
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	20005424 	.word	0x20005424
 8008a6c:	080870e8 	.word	0x080870e8
 8008a70:	2000748c 	.word	0x2000748c

08008a74 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008a74:	b480      	push	{r7}
 8008a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008a78:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8008aaa:	79fb      	ldrb	r3, [r7, #7]
 8008aac:	4619      	mov	r1, r3
 8008aae:	4808      	ldr	r0, [pc, #32]	; (8008ad0 <USBH_status+0x34>)
 8008ab0:	f000 ff98 	bl	80099e4 <USBH_MSC_UnitIsReady>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d002      	beq.n	8008ac0 <USBH_status+0x24>
  {
    res = RES_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	73fb      	strb	r3, [r7, #15]
 8008abe:	e001      	b.n	8008ac4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20007490 	.word	0x20007490

08008ad4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b094      	sub	sp, #80	; 0x50
 8008ad8:	af02      	add	r7, sp, #8
 8008ada:	60b9      	str	r1, [r7, #8]
 8008adc:	607a      	str	r2, [r7, #4]
 8008ade:	603b      	str	r3, [r7, #0]
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8008aea:	7bf9      	ldrb	r1, [r7, #15]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	4818      	ldr	r0, [pc, #96]	; (8008b58 <USBH_read+0x84>)
 8008af6:	f000 ffbf 	bl	8009a78 <USBH_MSC_Read>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d103      	bne.n	8008b08 <USBH_read+0x34>
  {
    res = RES_OK;
 8008b00:	2300      	movs	r3, #0
 8008b02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008b06:	e020      	b.n	8008b4a <USBH_read+0x76>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008b08:	f107 0210 	add.w	r2, r7, #16
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	4619      	mov	r1, r3
 8008b10:	4811      	ldr	r0, [pc, #68]	; (8008b58 <USBH_read+0x84>)
 8008b12:	f000 ff8d 	bl	8009a30 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008b16:	7f7b      	ldrb	r3, [r7, #29]
 8008b18:	2b3a      	cmp	r3, #58	; 0x3a
 8008b1a:	d005      	beq.n	8008b28 <USBH_read+0x54>
 8008b1c:	2b3a      	cmp	r3, #58	; 0x3a
 8008b1e:	dc10      	bgt.n	8008b42 <USBH_read+0x6e>
 8008b20:	2b04      	cmp	r3, #4
 8008b22:	d001      	beq.n	8008b28 <USBH_read+0x54>
 8008b24:	2b28      	cmp	r3, #40	; 0x28
 8008b26:	d10c      	bne.n	8008b42 <USBH_read+0x6e>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
 8008b28:	480c      	ldr	r0, [pc, #48]	; (8008b5c <USBH_read+0x88>)
 8008b2a:	f006 fbbd 	bl	800f2a8 <iprintf>
 8008b2e:	480c      	ldr	r0, [pc, #48]	; (8008b60 <USBH_read+0x8c>)
 8008b30:	f006 fbba 	bl	800f2a8 <iprintf>
 8008b34:	200a      	movs	r0, #10
 8008b36:	f006 fbcf 	bl	800f2d8 <putchar>
      res = RES_NOTRDY;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008b40:	e003      	b.n	8008b4a <USBH_read+0x76>

    default:
      res = RES_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008b48:	bf00      	nop
    }
  }

  return res;
 8008b4a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3748      	adds	r7, #72	; 0x48
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	20007490 	.word	0x20007490
 8008b5c:	080100f8 	.word	0x080100f8
 8008b60:	08010100 	.word	0x08010100

08008b64 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b094      	sub	sp, #80	; 0x50
 8008b68:	af02      	add	r7, sp, #8
 8008b6a:	60b9      	str	r1, [r7, #8]
 8008b6c:	607a      	str	r2, [r7, #4]
 8008b6e:	603b      	str	r3, [r7, #0]
 8008b70:	4603      	mov	r3, r0
 8008b72:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8008b7a:	7bf9      	ldrb	r1, [r7, #15]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	4820      	ldr	r0, [pc, #128]	; (8008c08 <USBH_write+0xa4>)
 8008b86:	f000 ffe0 	bl	8009b4a <USBH_MSC_Write>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d103      	bne.n	8008b98 <USBH_write+0x34>
  {
    res = RES_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008b96:	e031      	b.n	8008bfc <USBH_write+0x98>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008b98:	f107 0210 	add.w	r2, r7, #16
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	4819      	ldr	r0, [pc, #100]	; (8008c08 <USBH_write+0xa4>)
 8008ba2:	f000 ff45 	bl	8009a30 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008ba6:	7f7b      	ldrb	r3, [r7, #29]
 8008ba8:	2b3a      	cmp	r3, #58	; 0x3a
 8008baa:	d016      	beq.n	8008bda <USBH_write+0x76>
 8008bac:	2b3a      	cmp	r3, #58	; 0x3a
 8008bae:	dc21      	bgt.n	8008bf4 <USBH_write+0x90>
 8008bb0:	2b28      	cmp	r3, #40	; 0x28
 8008bb2:	d012      	beq.n	8008bda <USBH_write+0x76>
 8008bb4:	2b28      	cmp	r3, #40	; 0x28
 8008bb6:	dc1d      	bgt.n	8008bf4 <USBH_write+0x90>
 8008bb8:	2b04      	cmp	r3, #4
 8008bba:	d00e      	beq.n	8008bda <USBH_write+0x76>
 8008bbc:	2b27      	cmp	r3, #39	; 0x27
 8008bbe:	d119      	bne.n	8008bf4 <USBH_write+0x90>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
 8008bc0:	4812      	ldr	r0, [pc, #72]	; (8008c0c <USBH_write+0xa8>)
 8008bc2:	f006 fb71 	bl	800f2a8 <iprintf>
 8008bc6:	4812      	ldr	r0, [pc, #72]	; (8008c10 <USBH_write+0xac>)
 8008bc8:	f006 fb6e 	bl	800f2a8 <iprintf>
 8008bcc:	200a      	movs	r0, #10
 8008bce:	f006 fb83 	bl	800f2d8 <putchar>
      res = RES_WRPRT;
 8008bd2:	2302      	movs	r3, #2
 8008bd4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008bd8:	e010      	b.n	8008bfc <USBH_write+0x98>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
 8008bda:	480c      	ldr	r0, [pc, #48]	; (8008c0c <USBH_write+0xa8>)
 8008bdc:	f006 fb64 	bl	800f2a8 <iprintf>
 8008be0:	480c      	ldr	r0, [pc, #48]	; (8008c14 <USBH_write+0xb0>)
 8008be2:	f006 fb61 	bl	800f2a8 <iprintf>
 8008be6:	200a      	movs	r0, #10
 8008be8:	f006 fb76 	bl	800f2d8 <putchar>
      res = RES_NOTRDY;
 8008bec:	2303      	movs	r3, #3
 8008bee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008bf2:	e003      	b.n	8008bfc <USBH_write+0x98>

    default:
      res = RES_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008bfa:	bf00      	nop
    }
  }

  return res;
 8008bfc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3748      	adds	r7, #72	; 0x48
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	20007490 	.word	0x20007490
 8008c0c:	080100f8 	.word	0x080100f8
 8008c10:	08010118 	.word	0x08010118
 8008c14:	08010100 	.word	0x08010100

08008c18 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b090      	sub	sp, #64	; 0x40
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	4603      	mov	r3, r0
 8008c20:	603a      	str	r2, [r7, #0]
 8008c22:	71fb      	strb	r3, [r7, #7]
 8008c24:	460b      	mov	r3, r1
 8008c26:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008c2e:	79bb      	ldrb	r3, [r7, #6]
 8008c30:	2b03      	cmp	r3, #3
 8008c32:	d852      	bhi.n	8008cda <USBH_ioctl+0xc2>
 8008c34:	a201      	add	r2, pc, #4	; (adr r2, 8008c3c <USBH_ioctl+0x24>)
 8008c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3a:	bf00      	nop
 8008c3c:	08008c4d 	.word	0x08008c4d
 8008c40:	08008c55 	.word	0x08008c55
 8008c44:	08008c7f 	.word	0x08008c7f
 8008c48:	08008cab 	.word	0x08008cab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008c52:	e045      	b.n	8008ce0 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008c54:	f107 0208 	add.w	r2, r7, #8
 8008c58:	79fb      	ldrb	r3, [r7, #7]
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	4823      	ldr	r0, [pc, #140]	; (8008cec <USBH_ioctl+0xd4>)
 8008c5e:	f000 fee7 	bl	8009a30 <USBH_MSC_GetLUNInfo>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d106      	bne.n	8008c76 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008c74:	e034      	b.n	8008ce0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008c7c:	e030      	b.n	8008ce0 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008c7e:	f107 0208 	add.w	r2, r7, #8
 8008c82:	79fb      	ldrb	r3, [r7, #7]
 8008c84:	4619      	mov	r1, r3
 8008c86:	4819      	ldr	r0, [pc, #100]	; (8008cec <USBH_ioctl+0xd4>)
 8008c88:	f000 fed2 	bl	8009a30 <USBH_MSC_GetLUNInfo>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d107      	bne.n	8008ca2 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008c92:	8a3b      	ldrh	r3, [r7, #16]
 8008c94:	461a      	mov	r2, r3
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008ca0:	e01e      	b.n	8008ce0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008ca8:	e01a      	b.n	8008ce0 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008caa:	f107 0208 	add.w	r2, r7, #8
 8008cae:	79fb      	ldrb	r3, [r7, #7]
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	480e      	ldr	r0, [pc, #56]	; (8008cec <USBH_ioctl+0xd4>)
 8008cb4:	f000 febc 	bl	8009a30 <USBH_MSC_GetLUNInfo>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d109      	bne.n	8008cd2 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008cbe:	8a3b      	ldrh	r3, [r7, #16]
 8008cc0:	0a5b      	lsrs	r3, r3, #9
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008cd0:	e006      	b.n	8008ce0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008cd8:	e002      	b.n	8008ce0 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8008cda:	2304      	movs	r3, #4
 8008cdc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008ce0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3740      	adds	r7, #64	; 0x40
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	20007490 	.word	0x20007490

08008cf0 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008cf0:	b590      	push	{r4, r7, lr}
 8008cf2:	b089      	sub	sp, #36	; 0x24
 8008cf4:	af04      	add	r7, sp, #16
 8008cf6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cfe:	7919      	ldrb	r1, [r3, #4]
 8008d00:	2350      	movs	r3, #80	; 0x50
 8008d02:	2206      	movs	r2, #6
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f001 fe1b 	bl	800a940 <USBH_FindInterface>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
 8008d10:	2bff      	cmp	r3, #255	; 0xff
 8008d12:	d002      	beq.n	8008d1a <USBH_MSC_InterfaceInit+0x2a>
 8008d14:	7bfb      	ldrb	r3, [r7, #15]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d90f      	bls.n	8008d3a <USBH_MSC_InterfaceInit+0x4a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 8008d1a:	4886      	ldr	r0, [pc, #536]	; (8008f34 <USBH_MSC_InterfaceInit+0x244>)
 8008d1c:	f006 fac4 	bl	800f2a8 <iprintf>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4883      	ldr	r0, [pc, #524]	; (8008f38 <USBH_MSC_InterfaceInit+0x248>)
 8008d2c:	f006 fabc 	bl	800f2a8 <iprintf>
 8008d30:	200a      	movs	r0, #10
 8008d32:	f006 fad1 	bl	800f2d8 <putchar>
    return USBH_FAIL;
 8008d36:	2302      	movs	r3, #2
 8008d38:	e0f8      	b.n	8008f2c <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8008d3a:	7bfb      	ldrb	r3, [r7, #15]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f001 fd96 	bl	800a870 <USBH_SelectInterface>
 8008d44:	4603      	mov	r3, r0
 8008d46:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d001      	beq.n	8008d52 <USBH_MSC_InterfaceInit+0x62>
  {
    return USBH_FAIL;
 8008d4e:	2302      	movs	r3, #2
 8008d50:	e0ec      	b.n	8008f2c <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008d58:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008d5c:	f006 f9d4 	bl	800f108 <malloc>
 8008d60:	4603      	mov	r3, r0
 8008d62:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d6a:	69db      	ldr	r3, [r3, #28]
 8008d6c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10a      	bne.n	8008d8a <USBH_MSC_InterfaceInit+0x9a>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
 8008d74:	486f      	ldr	r0, [pc, #444]	; (8008f34 <USBH_MSC_InterfaceInit+0x244>)
 8008d76:	f006 fa97 	bl	800f2a8 <iprintf>
 8008d7a:	4870      	ldr	r0, [pc, #448]	; (8008f3c <USBH_MSC_InterfaceInit+0x24c>)
 8008d7c:	f006 fa94 	bl	800f2a8 <iprintf>
 8008d80:	200a      	movs	r0, #10
 8008d82:	f006 faa9 	bl	800f2d8 <putchar>
    return USBH_FAIL;
 8008d86:	2302      	movs	r3, #2
 8008d88:	e0d0      	b.n	8008f2c <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d8e:	2100      	movs	r1, #0
 8008d90:	68b8      	ldr	r0, [r7, #8]
 8008d92:	f006 f9d7 	bl	800f144 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008d96:	7bfb      	ldrb	r3, [r7, #15]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	211a      	movs	r1, #26
 8008d9c:	fb01 f303 	mul.w	r3, r1, r3
 8008da0:	4413      	add	r3, r2
 8008da2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	b25b      	sxtb	r3, r3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	da16      	bge.n	8008ddc <USBH_MSC_InterfaceInit+0xec>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008dae:	7bfb      	ldrb	r3, [r7, #15]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	211a      	movs	r1, #26
 8008db4:	fb01 f303 	mul.w	r3, r1, r3
 8008db8:	4413      	add	r3, r2
 8008dba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008dbe:	781a      	ldrb	r2, [r3, #0]
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008dc4:	7bfb      	ldrb	r3, [r7, #15]
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	211a      	movs	r1, #26
 8008dca:	fb01 f303 	mul.w	r3, r1, r3
 8008dce:	4413      	add	r3, r2
 8008dd0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008dd4:	881a      	ldrh	r2, [r3, #0]
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	815a      	strh	r2, [r3, #10]
 8008dda:	e015      	b.n	8008e08 <USBH_MSC_InterfaceInit+0x118>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	211a      	movs	r1, #26
 8008de2:	fb01 f303 	mul.w	r3, r1, r3
 8008de6:	4413      	add	r3, r2
 8008de8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008dec:	781a      	ldrb	r2, [r3, #0]
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	211a      	movs	r1, #26
 8008df8:	fb01 f303 	mul.w	r3, r1, r3
 8008dfc:	4413      	add	r3, r2
 8008dfe:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008e02:	881a      	ldrh	r2, [r3, #0]
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008e08:	7bfb      	ldrb	r3, [r7, #15]
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	211a      	movs	r1, #26
 8008e0e:	fb01 f303 	mul.w	r3, r1, r3
 8008e12:	4413      	add	r3, r2
 8008e14:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	b25b      	sxtb	r3, r3
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	da16      	bge.n	8008e4e <USBH_MSC_InterfaceInit+0x15e>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	211a      	movs	r1, #26
 8008e26:	fb01 f303 	mul.w	r3, r1, r3
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008e30:	781a      	ldrb	r2, [r3, #0]
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008e36:	7bfb      	ldrb	r3, [r7, #15]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	211a      	movs	r1, #26
 8008e3c:	fb01 f303 	mul.w	r3, r1, r3
 8008e40:	4413      	add	r3, r2
 8008e42:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008e46:	881a      	ldrh	r2, [r3, #0]
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	815a      	strh	r2, [r3, #10]
 8008e4c:	e015      	b.n	8008e7a <USBH_MSC_InterfaceInit+0x18a>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	211a      	movs	r1, #26
 8008e54:	fb01 f303 	mul.w	r3, r1, r3
 8008e58:	4413      	add	r3, r2
 8008e5a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008e5e:	781a      	ldrb	r2, [r3, #0]
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	211a      	movs	r1, #26
 8008e6a:	fb01 f303 	mul.w	r3, r1, r3
 8008e6e:	4413      	add	r3, r2
 8008e70:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008e74:	881a      	ldrh	r2, [r3, #0]
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	2200      	movs	r2, #0
 8008e84:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	799b      	ldrb	r3, [r3, #6]
 8008e90:	4619      	mov	r1, r3
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f003 f8cf 	bl	800c036 <USBH_AllocPipe>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	79db      	ldrb	r3, [r3, #7]
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f003 f8c5 	bl	800c036 <USBH_AllocPipe>
 8008eac:	4603      	mov	r3, r0
 8008eae:	461a      	mov	r2, r3
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 feed 	bl	8009c94 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	7959      	ldrb	r1, [r3, #5]
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	7998      	ldrb	r0, [r3, #6]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	8912      	ldrh	r2, [r2, #8]
 8008ed2:	9202      	str	r2, [sp, #8]
 8008ed4:	2202      	movs	r2, #2
 8008ed6:	9201      	str	r2, [sp, #4]
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	4623      	mov	r3, r4
 8008edc:	4602      	mov	r2, r0
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f003 f87a 	bl	800bfd8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	7919      	ldrb	r1, [r3, #4]
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	79d8      	ldrb	r0, [r3, #7]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ef8:	68ba      	ldr	r2, [r7, #8]
 8008efa:	8952      	ldrh	r2, [r2, #10]
 8008efc:	9202      	str	r2, [sp, #8]
 8008efe:	2202      	movs	r2, #2
 8008f00:	9201      	str	r2, [sp, #4]
 8008f02:	9300      	str	r3, [sp, #0]
 8008f04:	4623      	mov	r3, r4
 8008f06:	4602      	mov	r2, r0
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f003 f865 	bl	800bfd8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	791b      	ldrb	r3, [r3, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	4619      	mov	r1, r3
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f006 f835 	bl	800ef86 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	795b      	ldrb	r3, [r3, #5]
 8008f20:	2200      	movs	r2, #0
 8008f22:	4619      	mov	r1, r3
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f006 f82e 	bl	800ef86 <USBH_LL_SetToggle>

  return USBH_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3714      	adds	r7, #20
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd90      	pop	{r4, r7, pc}
 8008f34:	0801013c 	.word	0x0801013c
 8008f38:	08010148 	.word	0x08010148
 8008f3c:	08010170 	.word	0x08010170

08008f40 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f4e:	69db      	ldr	r3, [r3, #28]
 8008f50:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	795b      	ldrb	r3, [r3, #5]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00e      	beq.n	8008f78 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	795b      	ldrb	r3, [r3, #5]
 8008f5e:	4619      	mov	r1, r3
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f003 f858 	bl	800c016 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	795b      	ldrb	r3, [r3, #5]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f003 f883 	bl	800c078 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	791b      	ldrb	r3, [r3, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00e      	beq.n	8008f9e <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	791b      	ldrb	r3, [r3, #4]
 8008f84:	4619      	mov	r1, r3
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f003 f845 	bl	800c016 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	791b      	ldrb	r3, [r3, #4]
 8008f90:	4619      	mov	r1, r3
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f003 f870 	bl	800c078 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fa4:	69db      	ldr	r3, [r3, #28]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00b      	beq.n	8008fc2 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fb0:	69db      	ldr	r3, [r3, #28]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f006 f8b0 	bl	800f118 <free>
    phost->pActiveClass->pData = 0U;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fda:	69db      	ldr	r3, [r3, #28]
 8008fdc:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	7b9b      	ldrb	r3, [r3, #14]
 8008fe6:	2b03      	cmp	r3, #3
 8008fe8:	d04a      	beq.n	8009080 <USBH_MSC_ClassRequest+0xb4>
 8008fea:	2b03      	cmp	r3, #3
 8008fec:	dc54      	bgt.n	8009098 <USBH_MSC_ClassRequest+0xcc>
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d001      	beq.n	8008ff6 <USBH_MSC_ClassRequest+0x2a>
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d150      	bne.n	8009098 <USBH_MSC_ClassRequest+0xcc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fe2b 	bl	8009c56 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8009000:	4603      	mov	r3, r0
 8009002:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	2b03      	cmp	r3, #3
 8009008:	d104      	bne.n	8009014 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	2200      	movs	r2, #0
 800900e:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8009010:	2300      	movs	r3, #0
 8009012:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8009014:	7bfb      	ldrb	r3, [r7, #15]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d140      	bne.n	800909c <USBH_MSC_ClassRequest+0xd0>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	2b02      	cmp	r3, #2
 8009020:	d804      	bhi.n	800902c <USBH_MSC_ClassRequest+0x60>
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	3301      	adds	r3, #1
 8009028:	b2da      	uxtb	r2, r3
 800902a:	e000      	b.n	800902e <USBH_MSC_ClassRequest+0x62>
 800902c:	2202      	movs	r2, #2
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	4619      	mov	r1, r3
 8009038:	481c      	ldr	r0, [pc, #112]	; (80090ac <USBH_MSC_ClassRequest+0xe0>)
 800903a:	f006 f935 	bl	800f2a8 <iprintf>
 800903e:	200a      	movs	r0, #10
 8009040:	f006 f94a 	bl	800f2d8 <putchar>

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009044:	2300      	movs	r3, #0
 8009046:	73bb      	strb	r3, [r7, #14]
 8009048:	e014      	b.n	8009074 <USBH_MSC_ClassRequest+0xa8>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800904a:	7bbb      	ldrb	r3, [r7, #14]
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	2134      	movs	r1, #52	; 0x34
 8009050:	fb01 f303 	mul.w	r3, r1, r3
 8009054:	4413      	add	r3, r2
 8009056:	3392      	adds	r3, #146	; 0x92
 8009058:	2202      	movs	r2, #2
 800905a:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800905c:	7bbb      	ldrb	r3, [r7, #14]
 800905e:	68ba      	ldr	r2, [r7, #8]
 8009060:	2134      	movs	r1, #52	; 0x34
 8009062:	fb01 f303 	mul.w	r3, r1, r3
 8009066:	4413      	add	r3, r2
 8009068:	33c1      	adds	r3, #193	; 0xc1
 800906a:	2200      	movs	r2, #0
 800906c:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800906e:	7bbb      	ldrb	r3, [r7, #14]
 8009070:	3301      	adds	r3, #1
 8009072:	73bb      	strb	r3, [r7, #14]
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	7bba      	ldrb	r2, [r7, #14]
 800907a:	429a      	cmp	r2, r3
 800907c:	d3e5      	bcc.n	800904a <USBH_MSC_ClassRequest+0x7e>
        }
      }
      break;
 800907e:	e00d      	b.n	800909c <USBH_MSC_ClassRequest+0xd0>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009080:	2100      	movs	r1, #0
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f002 fb69 	bl	800b75a <USBH_ClrFeature>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d108      	bne.n	80090a0 <USBH_MSC_ClassRequest+0xd4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	7bda      	ldrb	r2, [r3, #15]
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	739a      	strb	r2, [r3, #14]
      }
      break;
 8009096:	e003      	b.n	80090a0 <USBH_MSC_ClassRequest+0xd4>

    default:
      break;
 8009098:	bf00      	nop
 800909a:	e002      	b.n	80090a2 <USBH_MSC_ClassRequest+0xd6>
      break;
 800909c:	bf00      	nop
 800909e:	e000      	b.n	80090a2 <USBH_MSC_ClassRequest+0xd6>
      break;
 80090a0:	bf00      	nop
  }

  return status;
 80090a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	08010198 	.word	0x08010198

080090b0 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090be:	69db      	ldr	r3, [r3, #28]
 80090c0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80090c2:	2301      	movs	r3, #1
 80090c4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80090c6:	2301      	movs	r3, #1
 80090c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80090ca:	2301      	movs	r3, #1
 80090cc:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	7b1b      	ldrb	r3, [r3, #12]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <USBH_MSC_Process+0x2e>
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	f000 8355 	beq.w	8009786 <USBH_MSC_Process+0x6d6>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80090dc:	e356      	b.n	800978c <USBH_MSC_Process+0x6dc>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	429a      	cmp	r2, r3
 80090ec:	f080 8333 	bcs.w	8009756 <USBH_MSC_Process+0x6a6>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090f6:	4619      	mov	r1, r3
 80090f8:	693a      	ldr	r2, [r7, #16]
 80090fa:	2334      	movs	r3, #52	; 0x34
 80090fc:	fb03 f301 	mul.w	r3, r3, r1
 8009100:	4413      	add	r3, r2
 8009102:	3391      	adds	r3, #145	; 0x91
 8009104:	2201      	movs	r2, #1
 8009106:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800910e:	4619      	mov	r1, r3
 8009110:	693a      	ldr	r2, [r7, #16]
 8009112:	2334      	movs	r3, #52	; 0x34
 8009114:	fb03 f301 	mul.w	r3, r3, r1
 8009118:	4413      	add	r3, r2
 800911a:	3390      	adds	r3, #144	; 0x90
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	2b08      	cmp	r3, #8
 8009120:	f200 8327 	bhi.w	8009772 <USBH_MSC_Process+0x6c2>
 8009124:	a201      	add	r2, pc, #4	; (adr r2, 800912c <USBH_MSC_Process+0x7c>)
 8009126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912a:	bf00      	nop
 800912c:	08009151 	.word	0x08009151
 8009130:	08009773 	.word	0x08009773
 8009134:	08009299 	.word	0x08009299
 8009138:	0800944d 	.word	0x0800944d
 800913c:	0800918b 	.word	0x0800918b
 8009140:	080095b9 	.word	0x080095b9
 8009144:	08009773 	.word	0x08009773
 8009148:	08009773 	.word	0x08009773
 800914c:	08009745 	.word	0x08009745
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009156:	4619      	mov	r1, r3
 8009158:	48b6      	ldr	r0, [pc, #728]	; (8009434 <USBH_MSC_Process+0x384>)
 800915a:	f006 f8a5 	bl	800f2a8 <iprintf>
 800915e:	200a      	movs	r0, #10
 8009160:	f006 f8ba 	bl	800f2d8 <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800916a:	4619      	mov	r1, r3
 800916c:	693a      	ldr	r2, [r7, #16]
 800916e:	2334      	movs	r3, #52	; 0x34
 8009170:	fb03 f301 	mul.w	r3, r3, r1
 8009174:	4413      	add	r3, r2
 8009176:	3390      	adds	r3, #144	; 0x90
 8009178:	2204      	movs	r2, #4
 800917a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8009188:	e2fc      	b.n	8009784 <USBH_MSC_Process+0x6d4>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009190:	b2d9      	uxtb	r1, r3
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009198:	461a      	mov	r2, r3
 800919a:	2334      	movs	r3, #52	; 0x34
 800919c:	fb03 f302 	mul.w	r3, r3, r2
 80091a0:	3398      	adds	r3, #152	; 0x98
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	4413      	add	r3, r2
 80091a6:	3307      	adds	r3, #7
 80091a8:	461a      	mov	r2, r3
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f001 f890 	bl	800a2d0 <USBH_MSC_SCSI_Inquiry>
 80091b0:	4603      	mov	r3, r0
 80091b2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d141      	bne.n	800923e <USBH_MSC_Process+0x18e>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091c0:	461a      	mov	r2, r3
 80091c2:	2334      	movs	r3, #52	; 0x34
 80091c4:	fb03 f302 	mul.w	r3, r3, r2
 80091c8:	3398      	adds	r3, #152	; 0x98
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	4413      	add	r3, r2
 80091ce:	330a      	adds	r3, #10
 80091d0:	4619      	mov	r1, r3
 80091d2:	4899      	ldr	r0, [pc, #612]	; (8009438 <USBH_MSC_Process+0x388>)
 80091d4:	f006 f868 	bl	800f2a8 <iprintf>
 80091d8:	200a      	movs	r0, #10
 80091da:	f006 f87d 	bl	800f2d8 <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091e4:	461a      	mov	r2, r3
 80091e6:	2334      	movs	r3, #52	; 0x34
 80091e8:	fb03 f302 	mul.w	r3, r3, r2
 80091ec:	33a0      	adds	r3, #160	; 0xa0
 80091ee:	693a      	ldr	r2, [r7, #16]
 80091f0:	4413      	add	r3, r2
 80091f2:	330b      	adds	r3, #11
 80091f4:	4619      	mov	r1, r3
 80091f6:	4891      	ldr	r0, [pc, #580]	; (800943c <USBH_MSC_Process+0x38c>)
 80091f8:	f006 f856 	bl	800f2a8 <iprintf>
 80091fc:	200a      	movs	r0, #10
 80091fe:	f006 f86b 	bl	800f2d8 <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009208:	461a      	mov	r2, r3
 800920a:	2334      	movs	r3, #52	; 0x34
 800920c:	fb03 f302 	mul.w	r3, r3, r2
 8009210:	33b0      	adds	r3, #176	; 0xb0
 8009212:	693a      	ldr	r2, [r7, #16]
 8009214:	4413      	add	r3, r2
 8009216:	330c      	adds	r3, #12
 8009218:	4619      	mov	r1, r3
 800921a:	4889      	ldr	r0, [pc, #548]	; (8009440 <USBH_MSC_Process+0x390>)
 800921c:	f006 f844 	bl	800f2a8 <iprintf>
 8009220:	200a      	movs	r0, #10
 8009222:	f006 f859 	bl	800f2d8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800922c:	4619      	mov	r1, r3
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	2334      	movs	r3, #52	; 0x34
 8009232:	fb03 f301 	mul.w	r3, r3, r1
 8009236:	4413      	add	r3, r2
 8009238:	3390      	adds	r3, #144	; 0x90
 800923a:	2202      	movs	r2, #2
 800923c:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800923e:	7bfb      	ldrb	r3, [r7, #15]
 8009240:	2b02      	cmp	r3, #2
 8009242:	d10c      	bne.n	800925e <USBH_MSC_Process+0x1ae>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800924a:	4619      	mov	r1, r3
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	2334      	movs	r3, #52	; 0x34
 8009250:	fb03 f301 	mul.w	r3, r3, r1
 8009254:	4413      	add	r3, r2
 8009256:	3390      	adds	r3, #144	; 0x90
 8009258:	2205      	movs	r2, #5
 800925a:	701a      	strb	r2, [r3, #0]
            break;
 800925c:	e28b      	b.n	8009776 <USBH_MSC_Process+0x6c6>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800925e:	7bfb      	ldrb	r3, [r7, #15]
 8009260:	2b04      	cmp	r3, #4
 8009262:	f040 8288 	bne.w	8009776 <USBH_MSC_Process+0x6c6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800926c:	4619      	mov	r1, r3
 800926e:	693a      	ldr	r2, [r7, #16]
 8009270:	2334      	movs	r3, #52	; 0x34
 8009272:	fb03 f301 	mul.w	r3, r3, r1
 8009276:	4413      	add	r3, r2
 8009278:	3390      	adds	r3, #144	; 0x90
 800927a:	2201      	movs	r2, #1
 800927c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009284:	4619      	mov	r1, r3
 8009286:	693a      	ldr	r2, [r7, #16]
 8009288:	2334      	movs	r3, #52	; 0x34
 800928a:	fb03 f301 	mul.w	r3, r3, r1
 800928e:	4413      	add	r3, r2
 8009290:	3391      	adds	r3, #145	; 0x91
 8009292:	2202      	movs	r2, #2
 8009294:	701a      	strb	r2, [r3, #0]
            break;
 8009296:	e26e      	b.n	8009776 <USBH_MSC_Process+0x6c6>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	4619      	mov	r1, r3
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 ff56 	bl	800a154 <USBH_MSC_SCSI_TestUnitReady>
 80092a8:	4603      	mov	r3, r0
 80092aa:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80092ac:	7bbb      	ldrb	r3, [r7, #14]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d14f      	bne.n	8009352 <USBH_MSC_Process+0x2a2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092b8:	4619      	mov	r1, r3
 80092ba:	693a      	ldr	r2, [r7, #16]
 80092bc:	2334      	movs	r3, #52	; 0x34
 80092be:	fb03 f301 	mul.w	r3, r3, r1
 80092c2:	4413      	add	r3, r2
 80092c4:	3392      	adds	r3, #146	; 0x92
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d012      	beq.n	80092f2 <USBH_MSC_Process+0x242>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092d2:	4619      	mov	r1, r3
 80092d4:	693a      	ldr	r2, [r7, #16]
 80092d6:	2334      	movs	r3, #52	; 0x34
 80092d8:	fb03 f301 	mul.w	r3, r3, r1
 80092dc:	4413      	add	r3, r2
 80092de:	33c1      	adds	r3, #193	; 0xc1
 80092e0:	2201      	movs	r2, #1
 80092e2:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device ready");
 80092e4:	4857      	ldr	r0, [pc, #348]	; (8009444 <USBH_MSC_Process+0x394>)
 80092e6:	f005 ffdf 	bl	800f2a8 <iprintf>
 80092ea:	200a      	movs	r0, #10
 80092ec:	f005 fff4 	bl	800f2d8 <putchar>
 80092f0:	e00b      	b.n	800930a <USBH_MSC_Process+0x25a>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092f8:	4619      	mov	r1, r3
 80092fa:	693a      	ldr	r2, [r7, #16]
 80092fc:	2334      	movs	r3, #52	; 0x34
 80092fe:	fb03 f301 	mul.w	r3, r3, r1
 8009302:	4413      	add	r3, r2
 8009304:	33c1      	adds	r3, #193	; 0xc1
 8009306:	2200      	movs	r2, #0
 8009308:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009310:	4619      	mov	r1, r3
 8009312:	693a      	ldr	r2, [r7, #16]
 8009314:	2334      	movs	r3, #52	; 0x34
 8009316:	fb03 f301 	mul.w	r3, r3, r1
 800931a:	4413      	add	r3, r2
 800931c:	3390      	adds	r3, #144	; 0x90
 800931e:	2203      	movs	r2, #3
 8009320:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009328:	4619      	mov	r1, r3
 800932a:	693a      	ldr	r2, [r7, #16]
 800932c:	2334      	movs	r3, #52	; 0x34
 800932e:	fb03 f301 	mul.w	r3, r3, r1
 8009332:	4413      	add	r3, r2
 8009334:	3391      	adds	r3, #145	; 0x91
 8009336:	2200      	movs	r2, #0
 8009338:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009340:	4619      	mov	r1, r3
 8009342:	693a      	ldr	r2, [r7, #16]
 8009344:	2334      	movs	r3, #52	; 0x34
 8009346:	fb03 f301 	mul.w	r3, r3, r1
 800934a:	4413      	add	r3, r2
 800934c:	3392      	adds	r3, #146	; 0x92
 800934e:	2200      	movs	r2, #0
 8009350:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009352:	7bbb      	ldrb	r3, [r7, #14]
 8009354:	2b02      	cmp	r3, #2
 8009356:	d150      	bne.n	80093fa <USBH_MSC_Process+0x34a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800935e:	4619      	mov	r1, r3
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	2334      	movs	r3, #52	; 0x34
 8009364:	fb03 f301 	mul.w	r3, r3, r1
 8009368:	4413      	add	r3, r2
 800936a:	3392      	adds	r3, #146	; 0x92
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	2b02      	cmp	r3, #2
 8009370:	d012      	beq.n	8009398 <USBH_MSC_Process+0x2e8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009378:	4619      	mov	r1, r3
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	2334      	movs	r3, #52	; 0x34
 800937e:	fb03 f301 	mul.w	r3, r3, r1
 8009382:	4413      	add	r3, r2
 8009384:	33c1      	adds	r3, #193	; 0xc1
 8009386:	2201      	movs	r2, #1
 8009388:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device NOT ready");
 800938a:	482f      	ldr	r0, [pc, #188]	; (8009448 <USBH_MSC_Process+0x398>)
 800938c:	f005 ff8c 	bl	800f2a8 <iprintf>
 8009390:	200a      	movs	r0, #10
 8009392:	f005 ffa1 	bl	800f2d8 <putchar>
 8009396:	e00b      	b.n	80093b0 <USBH_MSC_Process+0x300>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800939e:	4619      	mov	r1, r3
 80093a0:	693a      	ldr	r2, [r7, #16]
 80093a2:	2334      	movs	r3, #52	; 0x34
 80093a4:	fb03 f301 	mul.w	r3, r3, r1
 80093a8:	4413      	add	r3, r2
 80093aa:	33c1      	adds	r3, #193	; 0xc1
 80093ac:	2200      	movs	r2, #0
 80093ae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093b6:	4619      	mov	r1, r3
 80093b8:	693a      	ldr	r2, [r7, #16]
 80093ba:	2334      	movs	r3, #52	; 0x34
 80093bc:	fb03 f301 	mul.w	r3, r3, r1
 80093c0:	4413      	add	r3, r2
 80093c2:	3390      	adds	r3, #144	; 0x90
 80093c4:	2205      	movs	r2, #5
 80093c6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093ce:	4619      	mov	r1, r3
 80093d0:	693a      	ldr	r2, [r7, #16]
 80093d2:	2334      	movs	r3, #52	; 0x34
 80093d4:	fb03 f301 	mul.w	r3, r3, r1
 80093d8:	4413      	add	r3, r2
 80093da:	3391      	adds	r3, #145	; 0x91
 80093dc:	2201      	movs	r2, #1
 80093de:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093e6:	4619      	mov	r1, r3
 80093e8:	693a      	ldr	r2, [r7, #16]
 80093ea:	2334      	movs	r3, #52	; 0x34
 80093ec:	fb03 f301 	mul.w	r3, r3, r1
 80093f0:	4413      	add	r3, r2
 80093f2:	3392      	adds	r3, #146	; 0x92
 80093f4:	2202      	movs	r2, #2
 80093f6:	701a      	strb	r2, [r3, #0]
            break;
 80093f8:	e1bf      	b.n	800977a <USBH_MSC_Process+0x6ca>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80093fa:	7bbb      	ldrb	r3, [r7, #14]
 80093fc:	2b04      	cmp	r3, #4
 80093fe:	f040 81bc 	bne.w	800977a <USBH_MSC_Process+0x6ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009408:	4619      	mov	r1, r3
 800940a:	693a      	ldr	r2, [r7, #16]
 800940c:	2334      	movs	r3, #52	; 0x34
 800940e:	fb03 f301 	mul.w	r3, r3, r1
 8009412:	4413      	add	r3, r2
 8009414:	3390      	adds	r3, #144	; 0x90
 8009416:	2201      	movs	r2, #1
 8009418:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009420:	4619      	mov	r1, r3
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	2334      	movs	r3, #52	; 0x34
 8009426:	fb03 f301 	mul.w	r3, r3, r1
 800942a:	4413      	add	r3, r2
 800942c:	3391      	adds	r3, #145	; 0x91
 800942e:	2202      	movs	r2, #2
 8009430:	701a      	strb	r2, [r3, #0]
            break;
 8009432:	e1a2      	b.n	800977a <USBH_MSC_Process+0x6ca>
 8009434:	080101b4 	.word	0x080101b4
 8009438:	080101c0 	.word	0x080101c0
 800943c:	080101d8 	.word	0x080101d8
 8009440:	080101f0 	.word	0x080101f0
 8009444:	08010208 	.word	0x08010208
 8009448:	0801021c 	.word	0x0801021c
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009452:	b2d9      	uxtb	r1, r3
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800945a:	461a      	mov	r2, r3
 800945c:	2334      	movs	r3, #52	; 0x34
 800945e:	fb03 f302 	mul.w	r3, r3, r2
 8009462:	3390      	adds	r3, #144	; 0x90
 8009464:	693a      	ldr	r2, [r7, #16]
 8009466:	4413      	add	r3, r2
 8009468:	3304      	adds	r3, #4
 800946a:	461a      	mov	r2, r3
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 feb4 	bl	800a1da <USBH_MSC_SCSI_ReadCapacity>
 8009472:	4603      	mov	r3, r0
 8009474:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009476:	7bfb      	ldrb	r3, [r7, #15]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d170      	bne.n	800955e <USBH_MSC_Process+0x4ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009482:	4619      	mov	r1, r3
 8009484:	693a      	ldr	r2, [r7, #16]
 8009486:	2334      	movs	r3, #52	; 0x34
 8009488:	fb03 f301 	mul.w	r3, r3, r1
 800948c:	4413      	add	r3, r2
 800948e:	33c1      	adds	r3, #193	; 0xc1
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d142      	bne.n	800951c <USBH_MSC_Process+0x46c>
                USBH_UsrLog("MSC Device capacity : %lu Bytes", \
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800949c:	4619      	mov	r1, r3
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	2334      	movs	r3, #52	; 0x34
 80094a2:	fb03 f301 	mul.w	r3, r3, r1
 80094a6:	4413      	add	r3, r2
 80094a8:	3394      	adds	r3, #148	; 0x94
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	693a      	ldr	r2, [r7, #16]
 80094ae:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 80094b2:	4610      	mov	r0, r2
 80094b4:	6939      	ldr	r1, [r7, #16]
 80094b6:	2234      	movs	r2, #52	; 0x34
 80094b8:	fb02 f200 	mul.w	r2, r2, r0
 80094bc:	440a      	add	r2, r1
 80094be:	3298      	adds	r2, #152	; 0x98
 80094c0:	8812      	ldrh	r2, [r2, #0]
 80094c2:	fb02 f303 	mul.w	r3, r2, r3
 80094c6:	4619      	mov	r1, r3
 80094c8:	48b3      	ldr	r0, [pc, #716]	; (8009798 <USBH_MSC_Process+0x6e8>)
 80094ca:	f005 feed 	bl	800f2a8 <iprintf>
 80094ce:	200a      	movs	r0, #10
 80094d0:	f005 ff02 	bl	800f2d8 <putchar>
                USBH_UsrLog("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094da:	4619      	mov	r1, r3
 80094dc:	693a      	ldr	r2, [r7, #16]
 80094de:	2334      	movs	r3, #52	; 0x34
 80094e0:	fb03 f301 	mul.w	r3, r3, r1
 80094e4:	4413      	add	r3, r2
 80094e6:	3394      	adds	r3, #148	; 0x94
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4619      	mov	r1, r3
 80094ec:	48ab      	ldr	r0, [pc, #684]	; (800979c <USBH_MSC_Process+0x6ec>)
 80094ee:	f005 fedb 	bl	800f2a8 <iprintf>
 80094f2:	200a      	movs	r0, #10
 80094f4:	f005 fef0 	bl	800f2d8 <putchar>
                USBH_UsrLog("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094fe:	4619      	mov	r1, r3
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	2334      	movs	r3, #52	; 0x34
 8009504:	fb03 f301 	mul.w	r3, r3, r1
 8009508:	4413      	add	r3, r2
 800950a:	3398      	adds	r3, #152	; 0x98
 800950c:	881b      	ldrh	r3, [r3, #0]
 800950e:	4619      	mov	r1, r3
 8009510:	48a3      	ldr	r0, [pc, #652]	; (80097a0 <USBH_MSC_Process+0x6f0>)
 8009512:	f005 fec9 	bl	800f2a8 <iprintf>
 8009516:	200a      	movs	r0, #10
 8009518:	f005 fede 	bl	800f2d8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009522:	4619      	mov	r1, r3
 8009524:	693a      	ldr	r2, [r7, #16]
 8009526:	2334      	movs	r3, #52	; 0x34
 8009528:	fb03 f301 	mul.w	r3, r3, r1
 800952c:	4413      	add	r3, r2
 800952e:	3390      	adds	r3, #144	; 0x90
 8009530:	2201      	movs	r2, #1
 8009532:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800953a:	4619      	mov	r1, r3
 800953c:	693a      	ldr	r2, [r7, #16]
 800953e:	2334      	movs	r3, #52	; 0x34
 8009540:	fb03 f301 	mul.w	r3, r3, r1
 8009544:	4413      	add	r3, r2
 8009546:	3391      	adds	r3, #145	; 0x91
 8009548:	2200      	movs	r2, #0
 800954a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009552:	3301      	adds	r3, #1
 8009554:	b29a      	uxth	r2, r3
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800955c:	e10f      	b.n	800977e <USBH_MSC_Process+0x6ce>
            else if (scsi_status == USBH_FAIL)
 800955e:	7bfb      	ldrb	r3, [r7, #15]
 8009560:	2b02      	cmp	r3, #2
 8009562:	d10c      	bne.n	800957e <USBH_MSC_Process+0x4ce>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800956a:	4619      	mov	r1, r3
 800956c:	693a      	ldr	r2, [r7, #16]
 800956e:	2334      	movs	r3, #52	; 0x34
 8009570:	fb03 f301 	mul.w	r3, r3, r1
 8009574:	4413      	add	r3, r2
 8009576:	3390      	adds	r3, #144	; 0x90
 8009578:	2205      	movs	r2, #5
 800957a:	701a      	strb	r2, [r3, #0]
            break;
 800957c:	e0ff      	b.n	800977e <USBH_MSC_Process+0x6ce>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800957e:	7bfb      	ldrb	r3, [r7, #15]
 8009580:	2b04      	cmp	r3, #4
 8009582:	f040 80fc 	bne.w	800977e <USBH_MSC_Process+0x6ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800958c:	4619      	mov	r1, r3
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	2334      	movs	r3, #52	; 0x34
 8009592:	fb03 f301 	mul.w	r3, r3, r1
 8009596:	4413      	add	r3, r2
 8009598:	3390      	adds	r3, #144	; 0x90
 800959a:	2201      	movs	r2, #1
 800959c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095a4:	4619      	mov	r1, r3
 80095a6:	693a      	ldr	r2, [r7, #16]
 80095a8:	2334      	movs	r3, #52	; 0x34
 80095aa:	fb03 f301 	mul.w	r3, r3, r1
 80095ae:	4413      	add	r3, r2
 80095b0:	3391      	adds	r3, #145	; 0x91
 80095b2:	2202      	movs	r2, #2
 80095b4:	701a      	strb	r2, [r3, #0]
            break;
 80095b6:	e0e2      	b.n	800977e <USBH_MSC_Process+0x6ce>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095be:	b2d9      	uxtb	r1, r3
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095c6:	461a      	mov	r2, r3
 80095c8:	2334      	movs	r3, #52	; 0x34
 80095ca:	fb03 f302 	mul.w	r3, r3, r2
 80095ce:	3398      	adds	r3, #152	; 0x98
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	4413      	add	r3, r2
 80095d4:	3304      	adds	r3, #4
 80095d6:	461a      	mov	r2, r3
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 ff1e 	bl	800a41a <USBH_MSC_SCSI_RequestSense>
 80095de:	4603      	mov	r3, r0
 80095e0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80095e2:	7bfb      	ldrb	r3, [r7, #15]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d17b      	bne.n	80096e0 <USBH_MSC_Process+0x630>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095ee:	4619      	mov	r1, r3
 80095f0:	693a      	ldr	r2, [r7, #16]
 80095f2:	2334      	movs	r3, #52	; 0x34
 80095f4:	fb03 f301 	mul.w	r3, r3, r1
 80095f8:	4413      	add	r3, r2
 80095fa:	339c      	adds	r3, #156	; 0x9c
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	2b06      	cmp	r3, #6
 8009600:	d00c      	beq.n	800961c <USBH_MSC_Process+0x56c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009608:	4619      	mov	r1, r3
 800960a:	693a      	ldr	r2, [r7, #16]
 800960c:	2334      	movs	r3, #52	; 0x34
 800960e:	fb03 f301 	mul.w	r3, r3, r1
 8009612:	4413      	add	r3, r2
 8009614:	339c      	adds	r3, #156	; 0x9c
 8009616:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009618:	2b02      	cmp	r3, #2
 800961a:	d117      	bne.n	800964c <USBH_MSC_Process+0x59c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8009628:	1ad3      	subs	r3, r2, r3
 800962a:	f242 720f 	movw	r2, #9999	; 0x270f
 800962e:	4293      	cmp	r3, r2
 8009630:	d80c      	bhi.n	800964c <USBH_MSC_Process+0x59c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009638:	4619      	mov	r1, r3
 800963a:	693a      	ldr	r2, [r7, #16]
 800963c:	2334      	movs	r3, #52	; 0x34
 800963e:	fb03 f301 	mul.w	r3, r3, r1
 8009642:	4413      	add	r3, r2
 8009644:	3390      	adds	r3, #144	; 0x90
 8009646:	2202      	movs	r2, #2
 8009648:	701a      	strb	r2, [r3, #0]
                  break;
 800964a:	e09b      	b.n	8009784 <USBH_MSC_Process+0x6d4>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009652:	4619      	mov	r1, r3
 8009654:	693a      	ldr	r2, [r7, #16]
 8009656:	2334      	movs	r3, #52	; 0x34
 8009658:	fb03 f301 	mul.w	r3, r3, r1
 800965c:	4413      	add	r3, r2
 800965e:	339c      	adds	r3, #156	; 0x9c
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	4619      	mov	r1, r3
 8009664:	484f      	ldr	r0, [pc, #316]	; (80097a4 <USBH_MSC_Process+0x6f4>)
 8009666:	f005 fe1f 	bl	800f2a8 <iprintf>
 800966a:	200a      	movs	r0, #10
 800966c:	f005 fe34 	bl	800f2d8 <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009676:	4619      	mov	r1, r3
 8009678:	693a      	ldr	r2, [r7, #16]
 800967a:	2334      	movs	r3, #52	; 0x34
 800967c:	fb03 f301 	mul.w	r3, r3, r1
 8009680:	4413      	add	r3, r2
 8009682:	339d      	adds	r3, #157	; 0x9d
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	4619      	mov	r1, r3
 8009688:	4847      	ldr	r0, [pc, #284]	; (80097a8 <USBH_MSC_Process+0x6f8>)
 800968a:	f005 fe0d 	bl	800f2a8 <iprintf>
 800968e:	200a      	movs	r0, #10
 8009690:	f005 fe22 	bl	800f2d8 <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800969a:	4619      	mov	r1, r3
 800969c:	693a      	ldr	r2, [r7, #16]
 800969e:	2334      	movs	r3, #52	; 0x34
 80096a0:	fb03 f301 	mul.w	r3, r3, r1
 80096a4:	4413      	add	r3, r2
 80096a6:	339e      	adds	r3, #158	; 0x9e
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	4619      	mov	r1, r3
 80096ac:	483f      	ldr	r0, [pc, #252]	; (80097ac <USBH_MSC_Process+0x6fc>)
 80096ae:	f005 fdfb 	bl	800f2a8 <iprintf>
 80096b2:	200a      	movs	r0, #10
 80096b4:	f005 fe10 	bl	800f2d8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096be:	4619      	mov	r1, r3
 80096c0:	693a      	ldr	r2, [r7, #16]
 80096c2:	2334      	movs	r3, #52	; 0x34
 80096c4:	fb03 f301 	mul.w	r3, r3, r1
 80096c8:	4413      	add	r3, r2
 80096ca:	3390      	adds	r3, #144	; 0x90
 80096cc:	2201      	movs	r2, #1
 80096ce:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096d6:	3301      	adds	r3, #1
 80096d8:	b29a      	uxth	r2, r3
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d112      	bne.n	800970c <USBH_MSC_Process+0x65c>
              USBH_UsrLog("MSC Device NOT ready");
 80096e6:	4832      	ldr	r0, [pc, #200]	; (80097b0 <USBH_MSC_Process+0x700>)
 80096e8:	f005 fdde 	bl	800f2a8 <iprintf>
 80096ec:	200a      	movs	r0, #10
 80096ee:	f005 fdf3 	bl	800f2d8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096f8:	4619      	mov	r1, r3
 80096fa:	693a      	ldr	r2, [r7, #16]
 80096fc:	2334      	movs	r3, #52	; 0x34
 80096fe:	fb03 f301 	mul.w	r3, r3, r1
 8009702:	4413      	add	r3, r2
 8009704:	3390      	adds	r3, #144	; 0x90
 8009706:	2208      	movs	r2, #8
 8009708:	701a      	strb	r2, [r3, #0]
            break;
 800970a:	e03a      	b.n	8009782 <USBH_MSC_Process+0x6d2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800970c:	7bfb      	ldrb	r3, [r7, #15]
 800970e:	2b04      	cmp	r3, #4
 8009710:	d137      	bne.n	8009782 <USBH_MSC_Process+0x6d2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009718:	4619      	mov	r1, r3
 800971a:	693a      	ldr	r2, [r7, #16]
 800971c:	2334      	movs	r3, #52	; 0x34
 800971e:	fb03 f301 	mul.w	r3, r3, r1
 8009722:	4413      	add	r3, r2
 8009724:	3390      	adds	r3, #144	; 0x90
 8009726:	2201      	movs	r2, #1
 8009728:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009730:	4619      	mov	r1, r3
 8009732:	693a      	ldr	r2, [r7, #16]
 8009734:	2334      	movs	r3, #52	; 0x34
 8009736:	fb03 f301 	mul.w	r3, r3, r1
 800973a:	4413      	add	r3, r2
 800973c:	3391      	adds	r3, #145	; 0x91
 800973e:	2202      	movs	r2, #2
 8009740:	701a      	strb	r2, [r3, #0]
            break;
 8009742:	e01e      	b.n	8009782 <USBH_MSC_Process+0x6d2>
            MSC_Handle->current_lun++;
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800974a:	3301      	adds	r3, #1
 800974c:	b29a      	uxth	r2, r3
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009754:	e016      	b.n	8009784 <USBH_MSC_Process+0x6d4>
        MSC_Handle->current_lun = 0U;
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	2200      	movs	r2, #0
 800975a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	2201      	movs	r2, #1
 8009762:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800976a:	2102      	movs	r1, #2
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	4798      	blx	r3
      break;
 8009770:	e00c      	b.n	800978c <USBH_MSC_Process+0x6dc>
            break;
 8009772:	bf00      	nop
 8009774:	e00a      	b.n	800978c <USBH_MSC_Process+0x6dc>
            break;
 8009776:	bf00      	nop
 8009778:	e008      	b.n	800978c <USBH_MSC_Process+0x6dc>
            break;
 800977a:	bf00      	nop
 800977c:	e006      	b.n	800978c <USBH_MSC_Process+0x6dc>
            break;
 800977e:	bf00      	nop
 8009780:	e004      	b.n	800978c <USBH_MSC_Process+0x6dc>
            break;
 8009782:	bf00      	nop
      break;
 8009784:	e002      	b.n	800978c <USBH_MSC_Process+0x6dc>
      error = USBH_OK;
 8009786:	2300      	movs	r3, #0
 8009788:	75fb      	strb	r3, [r7, #23]
      break;
 800978a:	bf00      	nop
  }
  return error;
 800978c:	7dfb      	ldrb	r3, [r7, #23]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3718      	adds	r7, #24
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	08010234 	.word	0x08010234
 800979c:	08010254 	.word	0x08010254
 80097a0:	08010268 	.word	0x08010268
 80097a4:	0801027c 	.word	0x0801027c
 80097a8:	0801028c 	.word	0x0801028c
 80097ac:	080102a8 	.word	0x080102a8
 80097b0:	0801021c 	.word	0x0801021c

080097b4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	370c      	adds	r7, #12
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
	...

080097cc <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b088      	sub	sp, #32
 80097d0:	af02      	add	r7, sp, #8
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	460b      	mov	r3, r1
 80097d6:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097de:	69db      	ldr	r3, [r3, #28]
 80097e0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80097e2:	2301      	movs	r3, #1
 80097e4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80097e6:	2301      	movs	r3, #1
 80097e8:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80097ea:	78fb      	ldrb	r3, [r7, #3]
 80097ec:	693a      	ldr	r2, [r7, #16]
 80097ee:	2134      	movs	r1, #52	; 0x34
 80097f0:	fb01 f303 	mul.w	r3, r1, r3
 80097f4:	4413      	add	r3, r2
 80097f6:	3390      	adds	r3, #144	; 0x90
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	2b07      	cmp	r3, #7
 80097fc:	d03d      	beq.n	800987a <USBH_MSC_RdWrProcess+0xae>
 80097fe:	2b07      	cmp	r3, #7
 8009800:	f300 80dc 	bgt.w	80099bc <USBH_MSC_RdWrProcess+0x1f0>
 8009804:	2b05      	cmp	r3, #5
 8009806:	d06d      	beq.n	80098e4 <USBH_MSC_RdWrProcess+0x118>
 8009808:	2b06      	cmp	r3, #6
 800980a:	f040 80d7 	bne.w	80099bc <USBH_MSC_RdWrProcess+0x1f0>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800980e:	78f9      	ldrb	r1, [r7, #3]
 8009810:	2300      	movs	r3, #0
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	2300      	movs	r3, #0
 8009816:	2200      	movs	r2, #0
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fee2 	bl	800a5e2 <USBH_MSC_SCSI_Read>
 800981e:	4603      	mov	r3, r0
 8009820:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009822:	7bfb      	ldrb	r3, [r7, #15]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d10b      	bne.n	8009840 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009828:	78fb      	ldrb	r3, [r7, #3]
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	2134      	movs	r1, #52	; 0x34
 800982e:	fb01 f303 	mul.w	r3, r1, r3
 8009832:	4413      	add	r3, r2
 8009834:	3390      	adds	r3, #144	; 0x90
 8009836:	2201      	movs	r2, #1
 8009838:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800983e:	e0bf      	b.n	80099c0 <USBH_MSC_RdWrProcess+0x1f4>
      else if (scsi_status == USBH_FAIL)
 8009840:	7bfb      	ldrb	r3, [r7, #15]
 8009842:	2b02      	cmp	r3, #2
 8009844:	d109      	bne.n	800985a <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009846:	78fb      	ldrb	r3, [r7, #3]
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	2134      	movs	r1, #52	; 0x34
 800984c:	fb01 f303 	mul.w	r3, r1, r3
 8009850:	4413      	add	r3, r2
 8009852:	3390      	adds	r3, #144	; 0x90
 8009854:	2205      	movs	r2, #5
 8009856:	701a      	strb	r2, [r3, #0]
      break;
 8009858:	e0b2      	b.n	80099c0 <USBH_MSC_RdWrProcess+0x1f4>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800985a:	7bfb      	ldrb	r3, [r7, #15]
 800985c:	2b04      	cmp	r3, #4
 800985e:	f040 80af 	bne.w	80099c0 <USBH_MSC_RdWrProcess+0x1f4>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009862:	78fb      	ldrb	r3, [r7, #3]
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	2134      	movs	r1, #52	; 0x34
 8009868:	fb01 f303 	mul.w	r3, r1, r3
 800986c:	4413      	add	r3, r2
 800986e:	3390      	adds	r3, #144	; 0x90
 8009870:	2208      	movs	r2, #8
 8009872:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009874:	2302      	movs	r3, #2
 8009876:	75fb      	strb	r3, [r7, #23]
      break;
 8009878:	e0a2      	b.n	80099c0 <USBH_MSC_RdWrProcess+0x1f4>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800987a:	78f9      	ldrb	r1, [r7, #3]
 800987c:	2300      	movs	r3, #0
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	2300      	movs	r3, #0
 8009882:	2200      	movs	r2, #0
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 fe41 	bl	800a50c <USBH_MSC_SCSI_Write>
 800988a:	4603      	mov	r3, r0
 800988c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800988e:	7bfb      	ldrb	r3, [r7, #15]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d10b      	bne.n	80098ac <USBH_MSC_RdWrProcess+0xe0>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009894:	78fb      	ldrb	r3, [r7, #3]
 8009896:	693a      	ldr	r2, [r7, #16]
 8009898:	2134      	movs	r1, #52	; 0x34
 800989a:	fb01 f303 	mul.w	r3, r1, r3
 800989e:	4413      	add	r3, r2
 80098a0:	3390      	adds	r3, #144	; 0x90
 80098a2:	2201      	movs	r2, #1
 80098a4:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80098a6:	2300      	movs	r3, #0
 80098a8:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80098aa:	e08b      	b.n	80099c4 <USBH_MSC_RdWrProcess+0x1f8>
      else if (scsi_status == USBH_FAIL)
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d109      	bne.n	80098c6 <USBH_MSC_RdWrProcess+0xfa>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80098b2:	78fb      	ldrb	r3, [r7, #3]
 80098b4:	693a      	ldr	r2, [r7, #16]
 80098b6:	2134      	movs	r1, #52	; 0x34
 80098b8:	fb01 f303 	mul.w	r3, r1, r3
 80098bc:	4413      	add	r3, r2
 80098be:	3390      	adds	r3, #144	; 0x90
 80098c0:	2205      	movs	r2, #5
 80098c2:	701a      	strb	r2, [r3, #0]
      break;
 80098c4:	e07e      	b.n	80099c4 <USBH_MSC_RdWrProcess+0x1f8>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80098c6:	7bfb      	ldrb	r3, [r7, #15]
 80098c8:	2b04      	cmp	r3, #4
 80098ca:	d17b      	bne.n	80099c4 <USBH_MSC_RdWrProcess+0x1f8>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80098cc:	78fb      	ldrb	r3, [r7, #3]
 80098ce:	693a      	ldr	r2, [r7, #16]
 80098d0:	2134      	movs	r1, #52	; 0x34
 80098d2:	fb01 f303 	mul.w	r3, r1, r3
 80098d6:	4413      	add	r3, r2
 80098d8:	3390      	adds	r3, #144	; 0x90
 80098da:	2208      	movs	r2, #8
 80098dc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80098de:	2302      	movs	r3, #2
 80098e0:	75fb      	strb	r3, [r7, #23]
      break;
 80098e2:	e06f      	b.n	80099c4 <USBH_MSC_RdWrProcess+0x1f8>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80098e4:	78fb      	ldrb	r3, [r7, #3]
 80098e6:	2234      	movs	r2, #52	; 0x34
 80098e8:	fb02 f303 	mul.w	r3, r2, r3
 80098ec:	3398      	adds	r3, #152	; 0x98
 80098ee:	693a      	ldr	r2, [r7, #16]
 80098f0:	4413      	add	r3, r2
 80098f2:	1d1a      	adds	r2, r3, #4
 80098f4:	78fb      	ldrb	r3, [r7, #3]
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 fd8e 	bl	800a41a <USBH_MSC_SCSI_RequestSense>
 80098fe:	4603      	mov	r3, r0
 8009900:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009902:	7bfb      	ldrb	r3, [r7, #15]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d140      	bne.n	800998a <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 8009908:	78fb      	ldrb	r3, [r7, #3]
 800990a:	693a      	ldr	r2, [r7, #16]
 800990c:	2134      	movs	r1, #52	; 0x34
 800990e:	fb01 f303 	mul.w	r3, r1, r3
 8009912:	4413      	add	r3, r2
 8009914:	339c      	adds	r3, #156	; 0x9c
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	4619      	mov	r1, r3
 800991a:	482e      	ldr	r0, [pc, #184]	; (80099d4 <USBH_MSC_RdWrProcess+0x208>)
 800991c:	f005 fcc4 	bl	800f2a8 <iprintf>
 8009920:	200a      	movs	r0, #10
 8009922:	f005 fcd9 	bl	800f2d8 <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
 8009926:	78fb      	ldrb	r3, [r7, #3]
 8009928:	693a      	ldr	r2, [r7, #16]
 800992a:	2134      	movs	r1, #52	; 0x34
 800992c:	fb01 f303 	mul.w	r3, r1, r3
 8009930:	4413      	add	r3, r2
 8009932:	339d      	adds	r3, #157	; 0x9d
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	4619      	mov	r1, r3
 8009938:	4827      	ldr	r0, [pc, #156]	; (80099d8 <USBH_MSC_RdWrProcess+0x20c>)
 800993a:	f005 fcb5 	bl	800f2a8 <iprintf>
 800993e:	200a      	movs	r0, #10
 8009940:	f005 fcca 	bl	800f2d8 <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
 8009944:	78fb      	ldrb	r3, [r7, #3]
 8009946:	693a      	ldr	r2, [r7, #16]
 8009948:	2134      	movs	r1, #52	; 0x34
 800994a:	fb01 f303 	mul.w	r3, r1, r3
 800994e:	4413      	add	r3, r2
 8009950:	339e      	adds	r3, #158	; 0x9e
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	4619      	mov	r1, r3
 8009956:	4821      	ldr	r0, [pc, #132]	; (80099dc <USBH_MSC_RdWrProcess+0x210>)
 8009958:	f005 fca6 	bl	800f2a8 <iprintf>
 800995c:	200a      	movs	r0, #10
 800995e:	f005 fcbb 	bl	800f2d8 <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009962:	78fb      	ldrb	r3, [r7, #3]
 8009964:	693a      	ldr	r2, [r7, #16]
 8009966:	2134      	movs	r1, #52	; 0x34
 8009968:	fb01 f303 	mul.w	r3, r1, r3
 800996c:	4413      	add	r3, r2
 800996e:	3390      	adds	r3, #144	; 0x90
 8009970:	2201      	movs	r2, #1
 8009972:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009974:	78fb      	ldrb	r3, [r7, #3]
 8009976:	693a      	ldr	r2, [r7, #16]
 8009978:	2134      	movs	r1, #52	; 0x34
 800997a:	fb01 f303 	mul.w	r3, r1, r3
 800997e:	4413      	add	r3, r2
 8009980:	3391      	adds	r3, #145	; 0x91
 8009982:	2202      	movs	r2, #2
 8009984:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009986:	2302      	movs	r3, #2
 8009988:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800998a:	7bfb      	ldrb	r3, [r7, #15]
 800998c:	2b02      	cmp	r3, #2
 800998e:	d106      	bne.n	800999e <USBH_MSC_RdWrProcess+0x1d2>
      {
        USBH_UsrLog("MSC Device NOT ready");
 8009990:	4813      	ldr	r0, [pc, #76]	; (80099e0 <USBH_MSC_RdWrProcess+0x214>)
 8009992:	f005 fc89 	bl	800f2a8 <iprintf>
 8009996:	200a      	movs	r0, #10
 8009998:	f005 fc9e 	bl	800f2d8 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800999c:	e014      	b.n	80099c8 <USBH_MSC_RdWrProcess+0x1fc>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800999e:	7bfb      	ldrb	r3, [r7, #15]
 80099a0:	2b04      	cmp	r3, #4
 80099a2:	d111      	bne.n	80099c8 <USBH_MSC_RdWrProcess+0x1fc>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80099a4:	78fb      	ldrb	r3, [r7, #3]
 80099a6:	693a      	ldr	r2, [r7, #16]
 80099a8:	2134      	movs	r1, #52	; 0x34
 80099aa:	fb01 f303 	mul.w	r3, r1, r3
 80099ae:	4413      	add	r3, r2
 80099b0:	3390      	adds	r3, #144	; 0x90
 80099b2:	2208      	movs	r2, #8
 80099b4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80099b6:	2302      	movs	r3, #2
 80099b8:	75fb      	strb	r3, [r7, #23]
      break;
 80099ba:	e005      	b.n	80099c8 <USBH_MSC_RdWrProcess+0x1fc>

    default:
      break;
 80099bc:	bf00      	nop
 80099be:	e004      	b.n	80099ca <USBH_MSC_RdWrProcess+0x1fe>
      break;
 80099c0:	bf00      	nop
 80099c2:	e002      	b.n	80099ca <USBH_MSC_RdWrProcess+0x1fe>
      break;
 80099c4:	bf00      	nop
 80099c6:	e000      	b.n	80099ca <USBH_MSC_RdWrProcess+0x1fe>
      break;
 80099c8:	bf00      	nop

  }
  return error;
 80099ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3718      	adds	r7, #24
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	0801027c 	.word	0x0801027c
 80099d8:	0801028c 	.word	0x0801028c
 80099dc:	080102a8 	.word	0x080102a8
 80099e0:	0801021c 	.word	0x0801021c

080099e4 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	460b      	mov	r3, r1
 80099ee:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099f6:	69db      	ldr	r3, [r3, #28]
 80099f8:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	2b0b      	cmp	r3, #11
 8009a02:	d10c      	bne.n	8009a1e <USBH_MSC_UnitIsReady+0x3a>
 8009a04:	78fb      	ldrb	r3, [r7, #3]
 8009a06:	68ba      	ldr	r2, [r7, #8]
 8009a08:	2134      	movs	r1, #52	; 0x34
 8009a0a:	fb01 f303 	mul.w	r3, r1, r3
 8009a0e:	4413      	add	r3, r2
 8009a10:	3391      	adds	r3, #145	; 0x91
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d102      	bne.n	8009a1e <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	73fb      	strb	r3, [r7, #15]
 8009a1c:	e001      	b.n	8009a22 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3714      	adds	r7, #20
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b086      	sub	sp, #24
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	460b      	mov	r3, r1
 8009a3a:	607a      	str	r2, [r7, #4]
 8009a3c:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a44:	69db      	ldr	r3, [r3, #28]
 8009a46:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	2b0b      	cmp	r3, #11
 8009a50:	d10d      	bne.n	8009a6e <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8009a52:	7afb      	ldrb	r3, [r7, #11]
 8009a54:	2234      	movs	r2, #52	; 0x34
 8009a56:	fb02 f303 	mul.w	r3, r2, r3
 8009a5a:	3390      	adds	r3, #144	; 0x90
 8009a5c:	697a      	ldr	r2, [r7, #20]
 8009a5e:	4413      	add	r3, r2
 8009a60:	2234      	movs	r2, #52	; 0x34
 8009a62:	4619      	mov	r1, r3
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f005 fb5f 	bl	800f128 <memcpy>
    return USBH_OK;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	e000      	b.n	8009a70 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8009a6e:	2302      	movs	r3, #2
  }
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3718      	adds	r7, #24
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b088      	sub	sp, #32
 8009a7c:	af02      	add	r7, sp, #8
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	607a      	str	r2, [r7, #4]
 8009a82:	603b      	str	r3, [r7, #0]
 8009a84:	460b      	mov	r3, r1
 8009a86:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a8e:	69db      	ldr	r3, [r3, #28]
 8009a90:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00e      	beq.n	8009abc <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009aa4:	2b0b      	cmp	r3, #11
 8009aa6:	d109      	bne.n	8009abc <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009aa8:	7afb      	ldrb	r3, [r7, #11]
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	2134      	movs	r1, #52	; 0x34
 8009aae:	fb01 f303 	mul.w	r3, r1, r3
 8009ab2:	4413      	add	r3, r2
 8009ab4:	3390      	adds	r3, #144	; 0x90
 8009ab6:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d001      	beq.n	8009ac0 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009abc:	2302      	movs	r3, #2
 8009abe:	e040      	b.n	8009b42 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	2206      	movs	r2, #6
 8009ac4:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009ac6:	7afb      	ldrb	r3, [r7, #11]
 8009ac8:	697a      	ldr	r2, [r7, #20]
 8009aca:	2134      	movs	r1, #52	; 0x34
 8009acc:	fb01 f303 	mul.w	r3, r1, r3
 8009ad0:	4413      	add	r3, r2
 8009ad2:	3390      	adds	r3, #144	; 0x90
 8009ad4:	2206      	movs	r2, #6
 8009ad6:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009ad8:	7afb      	ldrb	r3, [r7, #11]
 8009ada:	b29a      	uxth	r2, r3
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009ae2:	7af9      	ldrb	r1, [r7, #11]
 8009ae4:	6a3b      	ldr	r3, [r7, #32]
 8009ae6:	9300      	str	r3, [sp, #0]
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f000 fd78 	bl	800a5e2 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009af8:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009afa:	e016      	b.n	8009b2a <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	1ad2      	subs	r2, r2, r3
 8009b06:	6a3b      	ldr	r3, [r7, #32]
 8009b08:	f242 7110 	movw	r1, #10000	; 0x2710
 8009b0c:	fb01 f303 	mul.w	r3, r1, r3
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d805      	bhi.n	8009b20 <USBH_MSC_Read+0xa8>
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d104      	bne.n	8009b2a <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	2201      	movs	r2, #1
 8009b24:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009b26:	2302      	movs	r3, #2
 8009b28:	e00b      	b.n	8009b42 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009b2a:	7afb      	ldrb	r3, [r7, #11]
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f7ff fe4c 	bl	80097cc <USBH_MSC_RdWrProcess>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d0e0      	beq.n	8009afc <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3718      	adds	r7, #24
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b088      	sub	sp, #32
 8009b4e:	af02      	add	r7, sp, #8
 8009b50:	60f8      	str	r0, [r7, #12]
 8009b52:	607a      	str	r2, [r7, #4]
 8009b54:	603b      	str	r3, [r7, #0]
 8009b56:	460b      	mov	r3, r1
 8009b58:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b60:	69db      	ldr	r3, [r3, #28]
 8009b62:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00e      	beq.n	8009b8e <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009b76:	2b0b      	cmp	r3, #11
 8009b78:	d109      	bne.n	8009b8e <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009b7a:	7afb      	ldrb	r3, [r7, #11]
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	2134      	movs	r1, #52	; 0x34
 8009b80:	fb01 f303 	mul.w	r3, r1, r3
 8009b84:	4413      	add	r3, r2
 8009b86:	3390      	adds	r3, #144	; 0x90
 8009b88:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d001      	beq.n	8009b92 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009b8e:	2302      	movs	r3, #2
 8009b90:	e040      	b.n	8009c14 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	2207      	movs	r2, #7
 8009b96:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009b98:	7afb      	ldrb	r3, [r7, #11]
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	2134      	movs	r1, #52	; 0x34
 8009b9e:	fb01 f303 	mul.w	r3, r1, r3
 8009ba2:	4413      	add	r3, r2
 8009ba4:	3390      	adds	r3, #144	; 0x90
 8009ba6:	2207      	movs	r2, #7
 8009ba8:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009baa:	7afb      	ldrb	r3, [r7, #11]
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009bb4:	7af9      	ldrb	r1, [r7, #11]
 8009bb6:	6a3b      	ldr	r3, [r7, #32]
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f000 fca4 	bl	800a50c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009bca:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009bcc:	e016      	b.n	8009bfc <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	1ad2      	subs	r2, r2, r3
 8009bd8:	6a3b      	ldr	r3, [r7, #32]
 8009bda:	f242 7110 	movw	r1, #10000	; 0x2710
 8009bde:	fb01 f303 	mul.w	r3, r1, r3
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d805      	bhi.n	8009bf2 <USBH_MSC_Write+0xa8>
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d104      	bne.n	8009bfc <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009bf8:	2302      	movs	r3, #2
 8009bfa:	e00b      	b.n	8009c14 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009bfc:	7afb      	ldrb	r3, [r7, #11]
 8009bfe:	4619      	mov	r1, r3
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f7ff fde3 	bl	80097cc <USBH_MSC_RdWrProcess>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d0e0      	beq.n	8009bce <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009c12:	2300      	movs	r3, #0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3718      	adds	r7, #24
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2221      	movs	r2, #33	; 0x21
 8009c28:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	22ff      	movs	r2, #255	; 0xff
 8009c2e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8009c42:	2200      	movs	r2, #0
 8009c44:	2100      	movs	r1, #0
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f001 ff67 	bl	800bb1a <USBH_CtlReq>
 8009c4c:	4603      	mov	r3, r0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b082      	sub	sp, #8
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
 8009c5e:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	22a1      	movs	r2, #161	; 0xa1
 8009c64:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	22fe      	movs	r2, #254	; 0xfe
 8009c6a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009c7e:	2201      	movs	r2, #1
 8009c80:	6839      	ldr	r1, [r7, #0]
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f001 ff49 	bl	800bb1a <USBH_CtlReq>
 8009c88:	4603      	mov	r3, r0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
	...

08009c94 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ca2:	69db      	ldr	r3, [r3, #28]
 8009ca4:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	4a09      	ldr	r2, [pc, #36]	; (8009cd0 <USBH_MSC_BOT_Init+0x3c>)
 8009caa:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	4a09      	ldr	r2, [pc, #36]	; (8009cd4 <USBH_MSC_BOT_Init+0x40>)
 8009cb0:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3714      	adds	r7, #20
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr
 8009cd0:	43425355 	.word	0x43425355
 8009cd4:	20304050 	.word	0x20304050

08009cd8 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b088      	sub	sp, #32
 8009cdc:	af02      	add	r7, sp, #8
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009cec:	2301      	movs	r3, #1
 8009cee:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cfa:	69db      	ldr	r3, [r3, #28]
 8009cfc:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	2b0a      	cmp	r3, #10
 8009d0c:	f200 819e 	bhi.w	800a04c <USBH_MSC_BOT_Process+0x374>
 8009d10:	a201      	add	r2, pc, #4	; (adr r2, 8009d18 <USBH_MSC_BOT_Process+0x40>)
 8009d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d16:	bf00      	nop
 8009d18:	08009d45 	.word	0x08009d45
 8009d1c:	08009d6d 	.word	0x08009d6d
 8009d20:	08009dd7 	.word	0x08009dd7
 8009d24:	08009df5 	.word	0x08009df5
 8009d28:	08009e79 	.word	0x08009e79
 8009d2c:	08009e9b 	.word	0x08009e9b
 8009d30:	08009f33 	.word	0x08009f33
 8009d34:	08009f4f 	.word	0x08009f4f
 8009d38:	08009fa1 	.word	0x08009fa1
 8009d3c:	08009fd1 	.word	0x08009fd1
 8009d40:	0800a033 	.word	0x0800a033
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	78fa      	ldrb	r2, [r7, #3]
 8009d48:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	2202      	movs	r2, #2
 8009d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	795b      	ldrb	r3, [r3, #5]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	9200      	str	r2, [sp, #0]
 8009d62:	221f      	movs	r2, #31
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f002 f8f4 	bl	800bf52 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009d6a:	e17e      	b.n	800a06a <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	795b      	ldrb	r3, [r3, #5]
 8009d70:	4619      	mov	r1, r3
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f005 f8e6 	bl	800ef44 <USBH_LL_GetURBState>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009d7c:	7d3b      	ldrb	r3, [r7, #20]
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d118      	bne.n	8009db4 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00f      	beq.n	8009daa <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009d90:	b25b      	sxtb	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	da04      	bge.n	8009da0 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	2203      	movs	r2, #3
 8009d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009d9e:	e157      	b.n	800a050 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	2205      	movs	r2, #5
 8009da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009da8:	e152      	b.n	800a050 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	2207      	movs	r2, #7
 8009dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009db2:	e14d      	b.n	800a050 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009db4:	7d3b      	ldrb	r3, [r7, #20]
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d104      	bne.n	8009dc4 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009dc2:	e145      	b.n	800a050 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009dc4:	7d3b      	ldrb	r3, [r7, #20]
 8009dc6:	2b05      	cmp	r3, #5
 8009dc8:	f040 8142 	bne.w	800a050 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	220a      	movs	r2, #10
 8009dd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009dd4:	e13c      	b.n	800a050 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	895a      	ldrh	r2, [r3, #10]
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	791b      	ldrb	r3, [r3, #4]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f002 f8d9 	bl	800bf9c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	2204      	movs	r2, #4
 8009dee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009df2:	e13a      	b.n	800a06a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	791b      	ldrb	r3, [r3, #4]
 8009df8:	4619      	mov	r1, r3
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f005 f8a2 	bl	800ef44 <USBH_LL_GetURBState>
 8009e00:	4603      	mov	r3, r0
 8009e02:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009e04:	7d3b      	ldrb	r3, [r7, #20]
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d12d      	bne.n	8009e66 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e0e:	693a      	ldr	r2, [r7, #16]
 8009e10:	8952      	ldrh	r2, [r2, #10]
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d910      	bls.n	8009e38 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e1c:	693a      	ldr	r2, [r7, #16]
 8009e1e:	8952      	ldrh	r2, [r2, #10]
 8009e20:	441a      	add	r2, r3
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e2c:	693a      	ldr	r2, [r7, #16]
 8009e2e:	8952      	ldrh	r2, [r2, #10]
 8009e30:	1a9a      	subs	r2, r3, r2
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	65da      	str	r2, [r3, #92]	; 0x5c
 8009e36:	e002      	b.n	8009e3e <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00a      	beq.n	8009e5c <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	895a      	ldrh	r2, [r3, #10]
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	791b      	ldrb	r3, [r3, #4]
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f002 f8a1 	bl	800bf9c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009e5a:	e0fb      	b.n	800a054 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	2207      	movs	r2, #7
 8009e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009e64:	e0f6      	b.n	800a054 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8009e66:	7d3b      	ldrb	r3, [r7, #20]
 8009e68:	2b05      	cmp	r3, #5
 8009e6a:	f040 80f3 	bne.w	800a054 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	2209      	movs	r2, #9
 8009e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009e76:	e0ed      	b.n	800a054 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	891a      	ldrh	r2, [r3, #8]
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	795b      	ldrb	r3, [r3, #5]
 8009e86:	2001      	movs	r0, #1
 8009e88:	9000      	str	r0, [sp, #0]
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f002 f861 	bl	800bf52 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	2206      	movs	r2, #6
 8009e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009e98:	e0e7      	b.n	800a06a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	795b      	ldrb	r3, [r3, #5]
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f005 f84f 	bl	800ef44 <USBH_LL_GetURBState>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009eaa:	7d3b      	ldrb	r3, [r7, #20]
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d12f      	bne.n	8009f10 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eb4:	693a      	ldr	r2, [r7, #16]
 8009eb6:	8912      	ldrh	r2, [r2, #8]
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d910      	bls.n	8009ede <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ec2:	693a      	ldr	r2, [r7, #16]
 8009ec4:	8912      	ldrh	r2, [r2, #8]
 8009ec6:	441a      	add	r2, r3
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ed2:	693a      	ldr	r2, [r7, #16]
 8009ed4:	8912      	ldrh	r2, [r2, #8]
 8009ed6:	1a9a      	subs	r2, r3, r2
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	65da      	str	r2, [r3, #92]	; 0x5c
 8009edc:	e002      	b.n	8009ee4 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00c      	beq.n	8009f06 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	891a      	ldrh	r2, [r3, #8]
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	795b      	ldrb	r3, [r3, #5]
 8009efa:	2001      	movs	r0, #1
 8009efc:	9000      	str	r0, [sp, #0]
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f002 f827 	bl	800bf52 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009f04:	e0a8      	b.n	800a058 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	2207      	movs	r2, #7
 8009f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f0e:	e0a3      	b.n	800a058 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009f10:	7d3b      	ldrb	r3, [r7, #20]
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d104      	bne.n	8009f20 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	2205      	movs	r2, #5
 8009f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f1e:	e09b      	b.n	800a058 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009f20:	7d3b      	ldrb	r3, [r7, #20]
 8009f22:	2b05      	cmp	r3, #5
 8009f24:	f040 8098 	bne.w	800a058 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	220a      	movs	r2, #10
 8009f2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f30:	e092      	b.n	800a058 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	791b      	ldrb	r3, [r3, #4]
 8009f3c:	220d      	movs	r2, #13
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f002 f82c 	bl	800bf9c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	2208      	movs	r2, #8
 8009f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f4c:	e08d      	b.n	800a06a <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	791b      	ldrb	r3, [r3, #4]
 8009f52:	4619      	mov	r1, r3
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f004 fff5 	bl	800ef44 <USBH_LL_GetURBState>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009f5e:	7d3b      	ldrb	r3, [r7, #20]
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d115      	bne.n	8009f90 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 f8a9 	bl	800a0cc <USBH_MSC_DecodeCSW>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009f7e:	7d7b      	ldrb	r3, [r7, #21]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d102      	bne.n	8009f8a <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8009f84:	2300      	movs	r3, #0
 8009f86:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009f88:	e068      	b.n	800a05c <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8009f8a:	2302      	movs	r3, #2
 8009f8c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f8e:	e065      	b.n	800a05c <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009f90:	7d3b      	ldrb	r3, [r7, #20]
 8009f92:	2b05      	cmp	r3, #5
 8009f94:	d162      	bne.n	800a05c <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	2209      	movs	r2, #9
 8009f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f9e:	e05d      	b.n	800a05c <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009fa0:	78fb      	ldrb	r3, [r7, #3]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f864 	bl	800a074 <USBH_MSC_BOT_Abort>
 8009fac:	4603      	mov	r3, r0
 8009fae:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009fb0:	7dbb      	ldrb	r3, [r7, #22]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d104      	bne.n	8009fc0 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	2207      	movs	r2, #7
 8009fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009fbe:	e04f      	b.n	800a060 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009fc0:	7dbb      	ldrb	r3, [r7, #22]
 8009fc2:	2b04      	cmp	r3, #4
 8009fc4:	d14c      	bne.n	800a060 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	220b      	movs	r2, #11
 8009fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009fce:	e047      	b.n	800a060 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009fd0:	78fb      	ldrb	r3, [r7, #3]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f84c 	bl	800a074 <USBH_MSC_BOT_Abort>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009fe0:	7dbb      	ldrb	r3, [r7, #22]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d11d      	bne.n	800a022 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	795b      	ldrb	r3, [r3, #5]
 8009fea:	4619      	mov	r1, r3
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f004 fffa 	bl	800efe6 <USBH_LL_GetToggle>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	7959      	ldrb	r1, [r3, #5]
 8009ffa:	7bfb      	ldrb	r3, [r7, #15]
 8009ffc:	f1c3 0301 	rsb	r3, r3, #1
 800a000:	b2db      	uxtb	r3, r3
 800a002:	461a      	mov	r2, r3
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f004 ffbe 	bl	800ef86 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	791b      	ldrb	r3, [r3, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	4619      	mov	r1, r3
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f004 ffb7 	bl	800ef86 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	2209      	movs	r2, #9
 800a01c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800a020:	e020      	b.n	800a064 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800a022:	7dbb      	ldrb	r3, [r7, #22]
 800a024:	2b04      	cmp	r3, #4
 800a026:	d11d      	bne.n	800a064 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	220b      	movs	r2, #11
 800a02c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a030:	e018      	b.n	800a064 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f7ff fdf2 	bl	8009c1c <USBH_MSC_BOT_REQ_Reset>
 800a038:	4603      	mov	r3, r0
 800a03a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a03c:	7dfb      	ldrb	r3, [r7, #23]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d112      	bne.n	800a068 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	2201      	movs	r2, #1
 800a046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800a04a:	e00d      	b.n	800a068 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800a04c:	bf00      	nop
 800a04e:	e00c      	b.n	800a06a <USBH_MSC_BOT_Process+0x392>
      break;
 800a050:	bf00      	nop
 800a052:	e00a      	b.n	800a06a <USBH_MSC_BOT_Process+0x392>
      break;
 800a054:	bf00      	nop
 800a056:	e008      	b.n	800a06a <USBH_MSC_BOT_Process+0x392>
      break;
 800a058:	bf00      	nop
 800a05a:	e006      	b.n	800a06a <USBH_MSC_BOT_Process+0x392>
      break;
 800a05c:	bf00      	nop
 800a05e:	e004      	b.n	800a06a <USBH_MSC_BOT_Process+0x392>
      break;
 800a060:	bf00      	nop
 800a062:	e002      	b.n	800a06a <USBH_MSC_BOT_Process+0x392>
      break;
 800a064:	bf00      	nop
 800a066:	e000      	b.n	800a06a <USBH_MSC_BOT_Process+0x392>
      break;
 800a068:	bf00      	nop
  }
  return status;
 800a06a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3718      	adds	r7, #24
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	460b      	mov	r3, r1
 800a07e:	70fb      	strb	r3, [r7, #3]
 800a080:	4613      	mov	r3, r2
 800a082:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800a084:	2302      	movs	r3, #2
 800a086:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a08e:	69db      	ldr	r3, [r3, #28]
 800a090:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800a092:	78bb      	ldrb	r3, [r7, #2]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d002      	beq.n	800a09e <USBH_MSC_BOT_Abort+0x2a>
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d009      	beq.n	800a0b0 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800a09c:	e011      	b.n	800a0c2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	79db      	ldrb	r3, [r3, #7]
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f001 fb58 	bl	800b75a <USBH_ClrFeature>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	73fb      	strb	r3, [r7, #15]
      break;
 800a0ae:	e008      	b.n	800a0c2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	799b      	ldrb	r3, [r3, #6]
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f001 fb4f 	bl	800b75a <USBH_ClrFeature>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	73fb      	strb	r3, [r7, #15]
      break;
 800a0c0:	bf00      	nop
  }
  return status;
 800a0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0da:	69db      	ldr	r3, [r3, #28]
 800a0dc:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	791b      	ldrb	r3, [r3, #4]
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f004 fe99 	bl	800ee20 <USBH_LL_GetLastXferSize>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b0d      	cmp	r3, #13
 800a0f2:	d002      	beq.n	800a0fa <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800a0f4:	2302      	movs	r3, #2
 800a0f6:	73fb      	strb	r3, [r7, #15]
 800a0f8:	e024      	b.n	800a144 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0fe:	4a14      	ldr	r2, [pc, #80]	; (800a150 <USBH_MSC_DecodeCSW+0x84>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d11d      	bne.n	800a140 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d119      	bne.n	800a144 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a116:	2b00      	cmp	r3, #0
 800a118:	d102      	bne.n	800a120 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800a11a:	2300      	movs	r3, #0
 800a11c:	73fb      	strb	r3, [r7, #15]
 800a11e:	e011      	b.n	800a144 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a126:	2b01      	cmp	r3, #1
 800a128:	d102      	bne.n	800a130 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800a12a:	2301      	movs	r3, #1
 800a12c:	73fb      	strb	r3, [r7, #15]
 800a12e:	e009      	b.n	800a144 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a136:	2b02      	cmp	r3, #2
 800a138:	d104      	bne.n	800a144 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800a13a:	2302      	movs	r3, #2
 800a13c:	73fb      	strb	r3, [r7, #15]
 800a13e:	e001      	b.n	800a144 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800a140:	2302      	movs	r3, #2
 800a142:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800a144:	7bfb      	ldrb	r3, [r7, #15]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	53425355 	.word	0x53425355

0800a154 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	460b      	mov	r3, r1
 800a15e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a160:	2302      	movs	r3, #2
 800a162:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a16a:	69db      	ldr	r3, [r3, #28]
 800a16c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a174:	2b01      	cmp	r3, #1
 800a176:	d002      	beq.n	800a17e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d021      	beq.n	800a1c0 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a17c:	e028      	b.n	800a1d0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	2200      	movs	r2, #0
 800a182:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	2200      	movs	r2, #0
 800a188:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	220a      	movs	r2, #10
 800a190:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	3363      	adds	r3, #99	; 0x63
 800a198:	2210      	movs	r2, #16
 800a19a:	2100      	movs	r1, #0
 800a19c:	4618      	mov	r0, r3
 800a19e:	f004 ffd1 	bl	800f144 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	2202      	movs	r2, #2
 800a1b6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	73fb      	strb	r3, [r7, #15]
      break;
 800a1be:	e007      	b.n	800a1d0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a1c0:	78fb      	ldrb	r3, [r7, #3]
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f7ff fd87 	bl	8009cd8 <USBH_MSC_BOT_Process>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a1ce:	bf00      	nop
  }

  return error;
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b086      	sub	sp, #24
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	60f8      	str	r0, [r7, #12]
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	607a      	str	r2, [r7, #4]
 800a1e6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1f2:	69db      	ldr	r3, [r3, #28]
 800a1f4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d002      	beq.n	800a206 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800a200:	2b02      	cmp	r3, #2
 800a202:	d027      	beq.n	800a254 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800a204:	e05f      	b.n	800a2c6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	2208      	movs	r2, #8
 800a20a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	2280      	movs	r2, #128	; 0x80
 800a210:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	220a      	movs	r2, #10
 800a218:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	3363      	adds	r3, #99	; 0x63
 800a220:	2210      	movs	r2, #16
 800a222:	2100      	movs	r1, #0
 800a224:	4618      	mov	r0, r3
 800a226:	f004 ff8d 	bl	800f144 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	2225      	movs	r2, #37	; 0x25
 800a22e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	2201      	movs	r2, #1
 800a236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	2202      	movs	r2, #2
 800a23e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	f103 0210 	add.w	r2, r3, #16
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a24e:	2301      	movs	r3, #1
 800a250:	75fb      	strb	r3, [r7, #23]
      break;
 800a252:	e038      	b.n	800a2c6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a254:	7afb      	ldrb	r3, [r7, #11]
 800a256:	4619      	mov	r1, r3
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f7ff fd3d 	bl	8009cd8 <USBH_MSC_BOT_Process>
 800a25e:	4603      	mov	r3, r0
 800a260:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a262:	7dfb      	ldrb	r3, [r7, #23]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d12d      	bne.n	800a2c4 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a26e:	3303      	adds	r3, #3
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	461a      	mov	r2, r3
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a27a:	3302      	adds	r3, #2
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	021b      	lsls	r3, r3, #8
 800a280:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a288:	3301      	adds	r3, #1
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a28e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	061b      	lsls	r3, r3, #24
 800a29a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2a6:	3307      	adds	r3, #7
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	b29a      	uxth	r2, r3
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2b2:	3306      	adds	r3, #6
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	021b      	lsls	r3, r3, #8
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	809a      	strh	r2, [r3, #4]
      break;
 800a2c4:	bf00      	nop
  }

  return error;
 800a2c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3718      	adds	r7, #24
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b086      	sub	sp, #24
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	460b      	mov	r3, r1
 800a2da:	607a      	str	r2, [r7, #4]
 800a2dc:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a2de:	2302      	movs	r3, #2
 800a2e0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2e8:	69db      	ldr	r3, [r3, #28]
 800a2ea:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d002      	beq.n	800a2fc <USBH_MSC_SCSI_Inquiry+0x2c>
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	d03d      	beq.n	800a376 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a2fa:	e089      	b.n	800a410 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	2224      	movs	r2, #36	; 0x24
 800a300:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	2280      	movs	r2, #128	; 0x80
 800a306:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	220a      	movs	r2, #10
 800a30e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	3363      	adds	r3, #99	; 0x63
 800a316:	220a      	movs	r2, #10
 800a318:	2100      	movs	r1, #0
 800a31a:	4618      	mov	r0, r3
 800a31c:	f004 ff12 	bl	800f144 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	2212      	movs	r2, #18
 800a324:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a328:	7afb      	ldrb	r3, [r7, #11]
 800a32a:	015b      	lsls	r3, r3, #5
 800a32c:	b2da      	uxtb	r2, r3
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	2200      	movs	r2, #0
 800a338:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	2200      	movs	r2, #0
 800a340:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	2224      	movs	r2, #36	; 0x24
 800a348:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	2200      	movs	r2, #0
 800a350:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	2201      	movs	r2, #1
 800a358:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	2202      	movs	r2, #2
 800a360:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	f103 0210 	add.w	r2, r3, #16
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a370:	2301      	movs	r3, #1
 800a372:	75fb      	strb	r3, [r7, #23]
      break;
 800a374:	e04c      	b.n	800a410 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a376:	7afb      	ldrb	r3, [r7, #11]
 800a378:	4619      	mov	r1, r3
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f7ff fcac 	bl	8009cd8 <USBH_MSC_BOT_Process>
 800a380:	4603      	mov	r3, r0
 800a382:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a384:	7dfb      	ldrb	r3, [r7, #23]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d141      	bne.n	800a40e <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a38a:	2222      	movs	r2, #34	; 0x22
 800a38c:	2100      	movs	r1, #0
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f004 fed8 	bl	800f144 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	f003 031f 	and.w	r3, r3, #31
 800a3a0:	b2da      	uxtb	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	095b      	lsrs	r3, r3, #5
 800a3b0:	b2da      	uxtb	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3bc:	3301      	adds	r3, #1
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	b25b      	sxtb	r3, r3
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	da03      	bge.n	800a3ce <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	709a      	strb	r2, [r3, #2]
 800a3cc:	e002      	b.n	800a3d4 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	1cd8      	adds	r0, r3, #3
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3de:	3308      	adds	r3, #8
 800a3e0:	2208      	movs	r2, #8
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	f004 fea0 	bl	800f128 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f103 000c 	add.w	r0, r3, #12
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3f4:	3310      	adds	r3, #16
 800a3f6:	2210      	movs	r2, #16
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	f004 fe95 	bl	800f128 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	331d      	adds	r3, #29
 800a402:	693a      	ldr	r2, [r7, #16]
 800a404:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a408:	3220      	adds	r2, #32
 800a40a:	6812      	ldr	r2, [r2, #0]
 800a40c:	601a      	str	r2, [r3, #0]
      break;
 800a40e:	bf00      	nop
  }

  return error;
 800a410:	7dfb      	ldrb	r3, [r7, #23]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3718      	adds	r7, #24
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b086      	sub	sp, #24
 800a41e:	af00      	add	r7, sp, #0
 800a420:	60f8      	str	r0, [r7, #12]
 800a422:	460b      	mov	r3, r1
 800a424:	607a      	str	r2, [r7, #4]
 800a426:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a428:	2302      	movs	r3, #2
 800a42a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a432:	69db      	ldr	r3, [r3, #28]
 800a434:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d002      	beq.n	800a446 <USBH_MSC_SCSI_RequestSense+0x2c>
 800a440:	2b02      	cmp	r3, #2
 800a442:	d03d      	beq.n	800a4c0 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a444:	e05d      	b.n	800a502 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	220e      	movs	r2, #14
 800a44a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	2280      	movs	r2, #128	; 0x80
 800a450:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	220a      	movs	r2, #10
 800a458:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	3363      	adds	r3, #99	; 0x63
 800a460:	2210      	movs	r2, #16
 800a462:	2100      	movs	r1, #0
 800a464:	4618      	mov	r0, r3
 800a466:	f004 fe6d 	bl	800f144 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	2203      	movs	r2, #3
 800a46e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a472:	7afb      	ldrb	r3, [r7, #11]
 800a474:	015b      	lsls	r3, r3, #5
 800a476:	b2da      	uxtb	r2, r3
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	2200      	movs	r2, #0
 800a482:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	2200      	movs	r2, #0
 800a48a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	220e      	movs	r2, #14
 800a492:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	2200      	movs	r2, #0
 800a49a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	2202      	movs	r2, #2
 800a4aa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	f103 0210 	add.w	r2, r3, #16
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	75fb      	strb	r3, [r7, #23]
      break;
 800a4be:	e020      	b.n	800a502 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a4c0:	7afb      	ldrb	r3, [r7, #11]
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f7ff fc07 	bl	8009cd8 <USBH_MSC_BOT_Process>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a4ce:	7dfb      	ldrb	r3, [r7, #23]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d115      	bne.n	800a500 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4da:	3302      	adds	r3, #2
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	f003 030f 	and.w	r3, r3, #15
 800a4e2:	b2da      	uxtb	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4ee:	7b1a      	ldrb	r2, [r3, #12]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4fa:	7b5a      	ldrb	r2, [r3, #13]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	709a      	strb	r2, [r3, #2]
      break;
 800a500:	bf00      	nop
  }

  return error;
 800a502:	7dfb      	ldrb	r3, [r7, #23]
}
 800a504:	4618      	mov	r0, r3
 800a506:	3718      	adds	r7, #24
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b086      	sub	sp, #24
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	607a      	str	r2, [r7, #4]
 800a516:	603b      	str	r3, [r7, #0]
 800a518:	460b      	mov	r3, r1
 800a51a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a51c:	2302      	movs	r3, #2
 800a51e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a526:	69db      	ldr	r3, [r3, #28]
 800a528:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a530:	2b01      	cmp	r3, #1
 800a532:	d002      	beq.n	800a53a <USBH_MSC_SCSI_Write+0x2e>
 800a534:	2b02      	cmp	r3, #2
 800a536:	d047      	beq.n	800a5c8 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a538:	e04e      	b.n	800a5d8 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a540:	461a      	mov	r2, r3
 800a542:	6a3b      	ldr	r3, [r7, #32]
 800a544:	fb03 f202 	mul.w	r2, r3, r2
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	220a      	movs	r2, #10
 800a558:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	3363      	adds	r3, #99	; 0x63
 800a560:	2210      	movs	r2, #16
 800a562:	2100      	movs	r1, #0
 800a564:	4618      	mov	r0, r3
 800a566:	f004 fded 	bl	800f144 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	222a      	movs	r2, #42	; 0x2a
 800a56e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a572:	79fa      	ldrb	r2, [r7, #7]
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a57a:	79ba      	ldrb	r2, [r7, #6]
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a582:	797a      	ldrb	r2, [r7, #5]
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a58a:	1d3b      	adds	r3, r7, #4
 800a58c:	781a      	ldrb	r2, [r3, #0]
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a594:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a59e:	f107 0320 	add.w	r3, r7, #32
 800a5a2:	781a      	ldrb	r2, [r3, #0]
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	2202      	movs	r2, #2
 800a5b6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	683a      	ldr	r2, [r7, #0]
 800a5be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	75fb      	strb	r3, [r7, #23]
      break;
 800a5c6:	e007      	b.n	800a5d8 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a5c8:	7afb      	ldrb	r3, [r7, #11]
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f7ff fb83 	bl	8009cd8 <USBH_MSC_BOT_Process>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	75fb      	strb	r3, [r7, #23]
      break;
 800a5d6:	bf00      	nop
  }

  return error;
 800a5d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3718      	adds	r7, #24
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b086      	sub	sp, #24
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	60f8      	str	r0, [r7, #12]
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	603b      	str	r3, [r7, #0]
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a5f2:	2302      	movs	r3, #2
 800a5f4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5fc:	69db      	ldr	r3, [r3, #28]
 800a5fe:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a606:	2b01      	cmp	r3, #1
 800a608:	d002      	beq.n	800a610 <USBH_MSC_SCSI_Read+0x2e>
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	d047      	beq.n	800a69e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a60e:	e04e      	b.n	800a6ae <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a616:	461a      	mov	r2, r3
 800a618:	6a3b      	ldr	r3, [r7, #32]
 800a61a:	fb03 f202 	mul.w	r2, r3, r2
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	2280      	movs	r2, #128	; 0x80
 800a626:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	220a      	movs	r2, #10
 800a62e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	3363      	adds	r3, #99	; 0x63
 800a636:	2210      	movs	r2, #16
 800a638:	2100      	movs	r1, #0
 800a63a:	4618      	mov	r0, r3
 800a63c:	f004 fd82 	bl	800f144 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	2228      	movs	r2, #40	; 0x28
 800a644:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a648:	79fa      	ldrb	r2, [r7, #7]
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a650:	79ba      	ldrb	r2, [r7, #6]
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a658:	797a      	ldrb	r2, [r7, #5]
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a660:	1d3b      	adds	r3, r7, #4
 800a662:	781a      	ldrb	r2, [r3, #0]
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a66a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a674:	f107 0320 	add.w	r3, r7, #32
 800a678:	781a      	ldrb	r2, [r3, #0]
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	2202      	movs	r2, #2
 800a68c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	683a      	ldr	r2, [r7, #0]
 800a694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a698:	2301      	movs	r3, #1
 800a69a:	75fb      	strb	r3, [r7, #23]
      break;
 800a69c:	e007      	b.n	800a6ae <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a69e:	7afb      	ldrb	r3, [r7, #11]
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	f7ff fb18 	bl	8009cd8 <USBH_MSC_BOT_Process>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	75fb      	strb	r3, [r7, #23]
      break;
 800a6ac:	bf00      	nop
  }

  return error;
 800a6ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3718      	adds	r7, #24
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10a      	bne.n	800a6e2 <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800a6cc:	481c      	ldr	r0, [pc, #112]	; (800a740 <USBH_Init+0x88>)
 800a6ce:	f004 fdeb 	bl	800f2a8 <iprintf>
 800a6d2:	481c      	ldr	r0, [pc, #112]	; (800a744 <USBH_Init+0x8c>)
 800a6d4:	f004 fde8 	bl	800f2a8 <iprintf>
 800a6d8:	200a      	movs	r0, #10
 800a6da:	f004 fdfd 	bl	800f2d8 <putchar>
    return USBH_FAIL;
 800a6de:	2302      	movs	r3, #2
 800a6e0:	e029      	b.n	800a736 <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	79fa      	ldrb	r2, [r7, #7]
 800a6e6:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f000 f824 	bl	800a748 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d003      	beq.n	800a72e <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	68ba      	ldr	r2, [r7, #8]
 800a72a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	f004 fac2 	bl	800ecb8 <USBH_LL_Init>

  return USBH_OK;
 800a734:	2300      	movs	r3, #0
}
 800a736:	4618      	mov	r0, r3
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	080102cc 	.word	0x080102cc
 800a744:	080102d4 	.word	0x080102d4

0800a748 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a750:	2300      	movs	r3, #0
 800a752:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a754:	2300      	movs	r3, #0
 800a756:	60fb      	str	r3, [r7, #12]
 800a758:	e009      	b.n	800a76e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	33e0      	adds	r3, #224	; 0xe0
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	4413      	add	r3, r2
 800a764:	2200      	movs	r2, #0
 800a766:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	3301      	adds	r3, #1
 800a76c:	60fb      	str	r3, [r7, #12]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2b0e      	cmp	r3, #14
 800a772:	d9f2      	bls.n	800a75a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a774:	2300      	movs	r3, #0
 800a776:	60fb      	str	r3, [r7, #12]
 800a778:	e009      	b.n	800a78e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	4413      	add	r3, r2
 800a780:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a784:	2200      	movs	r2, #0
 800a786:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	3301      	adds	r3, #1
 800a78c:	60fb      	str	r3, [r7, #12]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a794:	d3f1      	bcc.n	800a77a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2240      	movs	r2, #64	; 0x40
 800a7ba:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3714      	adds	r7, #20
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d01f      	beq.n	800a844 <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d10e      	bne.n	800a82c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a814:	1c59      	adds	r1, r3, #1
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	33de      	adds	r3, #222	; 0xde
 800a820:	6839      	ldr	r1, [r7, #0]
 800a822:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	73fb      	strb	r3, [r7, #15]
 800a82a:	e016      	b.n	800a85a <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800a82c:	480d      	ldr	r0, [pc, #52]	; (800a864 <USBH_RegisterClass+0x74>)
 800a82e:	f004 fd3b 	bl	800f2a8 <iprintf>
 800a832:	480d      	ldr	r0, [pc, #52]	; (800a868 <USBH_RegisterClass+0x78>)
 800a834:	f004 fd38 	bl	800f2a8 <iprintf>
 800a838:	200a      	movs	r0, #10
 800a83a:	f004 fd4d 	bl	800f2d8 <putchar>
      status = USBH_FAIL;
 800a83e:	2302      	movs	r3, #2
 800a840:	73fb      	strb	r3, [r7, #15]
 800a842:	e00a      	b.n	800a85a <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800a844:	4807      	ldr	r0, [pc, #28]	; (800a864 <USBH_RegisterClass+0x74>)
 800a846:	f004 fd2f 	bl	800f2a8 <iprintf>
 800a84a:	4808      	ldr	r0, [pc, #32]	; (800a86c <USBH_RegisterClass+0x7c>)
 800a84c:	f004 fd2c 	bl	800f2a8 <iprintf>
 800a850:	200a      	movs	r0, #10
 800a852:	f004 fd41 	bl	800f2d8 <putchar>
    status = USBH_FAIL;
 800a856:	2302      	movs	r3, #2
 800a858:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a85a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3710      	adds	r7, #16
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	080102cc 	.word	0x080102cc
 800a868:	080102e8 	.word	0x080102e8
 800a86c:	08010304 	.word	0x08010304

0800a870 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	460b      	mov	r3, r1
 800a87a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a87c:	2300      	movs	r3, #0
 800a87e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a886:	78fa      	ldrb	r2, [r7, #3]
 800a888:	429a      	cmp	r2, r3
 800a88a:	d23c      	bcs.n	800a906 <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	78fa      	ldrb	r2, [r7, #3]
 800a890:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800a894:	78fb      	ldrb	r3, [r7, #3]
 800a896:	4619      	mov	r1, r3
 800a898:	4823      	ldr	r0, [pc, #140]	; (800a928 <USBH_SelectInterface+0xb8>)
 800a89a:	f004 fd05 	bl	800f2a8 <iprintf>
 800a89e:	200a      	movs	r0, #10
 800a8a0:	f004 fd1a 	bl	800f2d8 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800a8a4:	78fb      	ldrb	r3, [r7, #3]
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	211a      	movs	r1, #26
 800a8aa:	fb01 f303 	mul.w	r3, r1, r3
 800a8ae:	4413      	add	r3, r2
 800a8b0:	f203 3347 	addw	r3, r3, #839	; 0x347
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	481c      	ldr	r0, [pc, #112]	; (800a92c <USBH_SelectInterface+0xbc>)
 800a8ba:	f004 fcf5 	bl	800f2a8 <iprintf>
 800a8be:	200a      	movs	r0, #10
 800a8c0:	f004 fd0a 	bl	800f2d8 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800a8c4:	78fb      	ldrb	r3, [r7, #3]
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	211a      	movs	r1, #26
 800a8ca:	fb01 f303 	mul.w	r3, r1, r3
 800a8ce:	4413      	add	r3, r2
 800a8d0:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	4815      	ldr	r0, [pc, #84]	; (800a930 <USBH_SelectInterface+0xc0>)
 800a8da:	f004 fce5 	bl	800f2a8 <iprintf>
 800a8de:	200a      	movs	r0, #10
 800a8e0:	f004 fcfa 	bl	800f2d8 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800a8e4:	78fb      	ldrb	r3, [r7, #3]
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	211a      	movs	r1, #26
 800a8ea:	fb01 f303 	mul.w	r3, r1, r3
 800a8ee:	4413      	add	r3, r2
 800a8f0:	f203 3349 	addw	r3, r3, #841	; 0x349
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	480e      	ldr	r0, [pc, #56]	; (800a934 <USBH_SelectInterface+0xc4>)
 800a8fa:	f004 fcd5 	bl	800f2a8 <iprintf>
 800a8fe:	200a      	movs	r0, #10
 800a900:	f004 fcea 	bl	800f2d8 <putchar>
 800a904:	e00a      	b.n	800a91c <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800a906:	480c      	ldr	r0, [pc, #48]	; (800a938 <USBH_SelectInterface+0xc8>)
 800a908:	f004 fcce 	bl	800f2a8 <iprintf>
 800a90c:	480b      	ldr	r0, [pc, #44]	; (800a93c <USBH_SelectInterface+0xcc>)
 800a90e:	f004 fccb 	bl	800f2a8 <iprintf>
 800a912:	200a      	movs	r0, #10
 800a914:	f004 fce0 	bl	800f2d8 <putchar>
    status = USBH_FAIL;
 800a918:	2302      	movs	r3, #2
 800a91a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3710      	adds	r7, #16
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	0801031c 	.word	0x0801031c
 800a92c:	0801033c 	.word	0x0801033c
 800a930:	0801034c 	.word	0x0801034c
 800a934:	0801035c 	.word	0x0801035c
 800a938:	080102cc 	.word	0x080102cc
 800a93c:	0801036c 	.word	0x0801036c

0800a940 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a940:	b480      	push	{r7}
 800a942:	b087      	sub	sp, #28
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	4608      	mov	r0, r1
 800a94a:	4611      	mov	r1, r2
 800a94c:	461a      	mov	r2, r3
 800a94e:	4603      	mov	r3, r0
 800a950:	70fb      	strb	r3, [r7, #3]
 800a952:	460b      	mov	r3, r1
 800a954:	70bb      	strb	r3, [r7, #2]
 800a956:	4613      	mov	r3, r2
 800a958:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a95a:	2300      	movs	r3, #0
 800a95c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a95e:	2300      	movs	r3, #0
 800a960:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a968:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a96a:	e025      	b.n	800a9b8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a96c:	7dfb      	ldrb	r3, [r7, #23]
 800a96e:	221a      	movs	r2, #26
 800a970:	fb02 f303 	mul.w	r3, r2, r3
 800a974:	3308      	adds	r3, #8
 800a976:	68fa      	ldr	r2, [r7, #12]
 800a978:	4413      	add	r3, r2
 800a97a:	3302      	adds	r3, #2
 800a97c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	795b      	ldrb	r3, [r3, #5]
 800a982:	78fa      	ldrb	r2, [r7, #3]
 800a984:	429a      	cmp	r2, r3
 800a986:	d002      	beq.n	800a98e <USBH_FindInterface+0x4e>
 800a988:	78fb      	ldrb	r3, [r7, #3]
 800a98a:	2bff      	cmp	r3, #255	; 0xff
 800a98c:	d111      	bne.n	800a9b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a992:	78ba      	ldrb	r2, [r7, #2]
 800a994:	429a      	cmp	r2, r3
 800a996:	d002      	beq.n	800a99e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a998:	78bb      	ldrb	r3, [r7, #2]
 800a99a:	2bff      	cmp	r3, #255	; 0xff
 800a99c:	d109      	bne.n	800a9b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a9a2:	787a      	ldrb	r2, [r7, #1]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d002      	beq.n	800a9ae <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a9a8:	787b      	ldrb	r3, [r7, #1]
 800a9aa:	2bff      	cmp	r3, #255	; 0xff
 800a9ac:	d101      	bne.n	800a9b2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a9ae:	7dfb      	ldrb	r3, [r7, #23]
 800a9b0:	e006      	b.n	800a9c0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a9b2:	7dfb      	ldrb	r3, [r7, #23]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a9b8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d9d6      	bls.n	800a96c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a9be:	23ff      	movs	r3, #255	; 0xff
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	371c      	adds	r7, #28
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f004 f9ab 	bl	800ed30 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a9da:	2101      	movs	r1, #1
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f004 fac4 	bl	800ef6a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a9e2:	2300      	movs	r3, #0
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3708      	adds	r7, #8
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b088      	sub	sp, #32
 800a9f0:	af04      	add	r7, sp, #16
 800a9f2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a9f4:	2302      	movs	r3, #2
 800a9f6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d102      	bne.n	800aa0e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2203      	movs	r2, #3
 800aa0c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	2b0b      	cmp	r3, #11
 800aa16:	f200 822b 	bhi.w	800ae70 <USBH_Process+0x484>
 800aa1a:	a201      	add	r2, pc, #4	; (adr r2, 800aa20 <USBH_Process+0x34>)
 800aa1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa20:	0800aa51 	.word	0x0800aa51
 800aa24:	0800aa8f 	.word	0x0800aa8f
 800aa28:	0800ab0f 	.word	0x0800ab0f
 800aa2c:	0800adff 	.word	0x0800adff
 800aa30:	0800ae71 	.word	0x0800ae71
 800aa34:	0800abb3 	.word	0x0800abb3
 800aa38:	0800ad81 	.word	0x0800ad81
 800aa3c:	0800ac01 	.word	0x0800ac01
 800aa40:	0800ac21 	.word	0x0800ac21
 800aa44:	0800ac4d 	.word	0x0800ac4d
 800aa48:	0800ac87 	.word	0x0800ac87
 800aa4c:	0800ade7 	.word	0x0800ade7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	f000 820b 	beq.w	800ae74 <USBH_Process+0x488>
      {
        USBH_UsrLog("USB Device Connected");
 800aa5e:	48b9      	ldr	r0, [pc, #740]	; (800ad44 <USBH_Process+0x358>)
 800aa60:	f004 fc22 	bl	800f2a8 <iprintf>
 800aa64:	200a      	movs	r0, #10
 800aa66:	f004 fc37 	bl	800f2d8 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800aa70:	20c8      	movs	r0, #200	; 0xc8
 800aa72:	f004 fae8 	bl	800f046 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f004 f9b7 	bl	800edea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800aa8c:	e1f2      	b.n	800ae74 <USBH_Process+0x488>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d10d      	bne.n	800aab4 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800aa98:	48ab      	ldr	r0, [pc, #684]	; (800ad48 <USBH_Process+0x35c>)
 800aa9a:	f004 fc05 	bl	800f2a8 <iprintf>
 800aa9e:	200a      	movs	r0, #10
 800aaa0:	f004 fc1a 	bl	800f2d8 <putchar>
        phost->device.RstCnt = 0U;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2202      	movs	r2, #2
 800aab0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aab2:	e1ec      	b.n	800ae8e <USBH_Process+0x4a2>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800aaba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aabe:	d91a      	bls.n	800aaf6 <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800aac6:	3301      	adds	r3, #1
 800aac8:	b2da      	uxtb	r2, r3
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800aad6:	2b03      	cmp	r3, #3
 800aad8:	d909      	bls.n	800aaee <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800aada:	489c      	ldr	r0, [pc, #624]	; (800ad4c <USBH_Process+0x360>)
 800aadc:	f004 fbe4 	bl	800f2a8 <iprintf>
 800aae0:	200a      	movs	r0, #10
 800aae2:	f004 fbf9 	bl	800f2d8 <putchar>
            phost->gState = HOST_ABORT_STATE;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	220d      	movs	r2, #13
 800aaea:	701a      	strb	r2, [r3, #0]
      break;
 800aaec:	e1cf      	b.n	800ae8e <USBH_Process+0x4a2>
            phost->gState = HOST_IDLE;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	701a      	strb	r2, [r3, #0]
      break;
 800aaf4:	e1cb      	b.n	800ae8e <USBH_Process+0x4a2>
          phost->Timeout += 10U;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800aafc:	f103 020a 	add.w	r2, r3, #10
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ab06:	200a      	movs	r0, #10
 800ab08:	f004 fa9d 	bl	800f046 <USBH_Delay>
      break;
 800ab0c:	e1bf      	b.n	800ae8e <USBH_Process+0x4a2>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d005      	beq.n	800ab24 <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab1e:	2104      	movs	r1, #4
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ab24:	2064      	movs	r0, #100	; 0x64
 800ab26:	f004 fa8e 	bl	800f046 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f004 f936 	bl	800ed9c <USBH_LL_GetSpeed>
 800ab30:	4603      	mov	r3, r0
 800ab32:	461a      	mov	r2, r3
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2205      	movs	r2, #5
 800ab3e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ab40:	2100      	movs	r1, #0
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f001 fa77 	bl	800c036 <USBH_AllocPipe>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ab50:	2180      	movs	r1, #128	; 0x80
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f001 fa6f 	bl	800c036 <USBH_AllocPipe>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	7919      	ldrb	r1, [r3, #4]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ab74:	b292      	uxth	r2, r2
 800ab76:	9202      	str	r2, [sp, #8]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	9201      	str	r2, [sp, #4]
 800ab7c:	9300      	str	r3, [sp, #0]
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2280      	movs	r2, #128	; 0x80
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f001 fa28 	bl	800bfd8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	7959      	ldrb	r1, [r3, #5]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ab9c:	b292      	uxth	r2, r2
 800ab9e:	9202      	str	r2, [sp, #8]
 800aba0:	2200      	movs	r2, #0
 800aba2:	9201      	str	r2, [sp, #4]
 800aba4:	9300      	str	r3, [sp, #0]
 800aba6:	4603      	mov	r3, r0
 800aba8:	2200      	movs	r2, #0
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f001 fa14 	bl	800bfd8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800abb0:	e16d      	b.n	800ae8e <USBH_Process+0x4a2>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 f97a 	bl	800aeac <USBH_HandleEnum>
 800abb8:	4603      	mov	r3, r0
 800abba:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800abbc:	7bbb      	ldrb	r3, [r7, #14]
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f040 8159 	bne.w	800ae78 <USBH_Process+0x48c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800abc6:	4862      	ldr	r0, [pc, #392]	; (800ad50 <USBH_Process+0x364>)
 800abc8:	f004 fb6e 	bl	800f2a8 <iprintf>
 800abcc:	200a      	movs	r0, #10
 800abce:	f004 fb83 	bl	800f2d8 <putchar>

        phost->device.current_interface = 0U;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d109      	bne.n	800abf8 <USBH_Process+0x20c>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800abe4:	485b      	ldr	r0, [pc, #364]	; (800ad54 <USBH_Process+0x368>)
 800abe6:	f004 fb5f 	bl	800f2a8 <iprintf>
 800abea:	200a      	movs	r0, #10
 800abec:	f004 fb74 	bl	800f2d8 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2208      	movs	r2, #8
 800abf4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800abf6:	e13f      	b.n	800ae78 <USBH_Process+0x48c>
          phost->gState = HOST_INPUT;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2207      	movs	r2, #7
 800abfc:	701a      	strb	r2, [r3, #0]
      break;
 800abfe:	e13b      	b.n	800ae78 <USBH_Process+0x48c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	f000 8138 	beq.w	800ae7c <USBH_Process+0x490>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac12:	2101      	movs	r1, #1
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2208      	movs	r2, #8
 800ac1c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ac1e:	e12d      	b.n	800ae7c <USBH_Process+0x490>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	4619      	mov	r1, r3
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fd4e 	bl	800b6cc <USBH_SetCfg>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	f040 8124 	bne.w	800ae80 <USBH_Process+0x494>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2209      	movs	r2, #9
 800ac3c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800ac3e:	4846      	ldr	r0, [pc, #280]	; (800ad58 <USBH_Process+0x36c>)
 800ac40:	f004 fb32 	bl	800f2a8 <iprintf>
 800ac44:	200a      	movs	r0, #10
 800ac46:	f004 fb47 	bl	800f2d8 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ac4a:	e119      	b.n	800ae80 <USBH_Process+0x494>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ac52:	f003 0320 	and.w	r3, r3, #32
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d011      	beq.n	800ac7e <USBH_Process+0x292>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ac5a:	2101      	movs	r1, #1
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 fd58 	bl	800b712 <USBH_SetFeature>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f040 810d 	bne.w	800ae84 <USBH_Process+0x498>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800ac6a:	483c      	ldr	r0, [pc, #240]	; (800ad5c <USBH_Process+0x370>)
 800ac6c:	f004 fb1c 	bl	800f2a8 <iprintf>
 800ac70:	200a      	movs	r0, #10
 800ac72:	f004 fb31 	bl	800f2d8 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	220a      	movs	r2, #10
 800ac7a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ac7c:	e102      	b.n	800ae84 <USBH_Process+0x498>
        phost->gState = HOST_CHECK_CLASS;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	220a      	movs	r2, #10
 800ac82:	701a      	strb	r2, [r3, #0]
      break;
 800ac84:	e0fe      	b.n	800ae84 <USBH_Process+0x498>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d106      	bne.n	800ac9e <USBH_Process+0x2b2>
      {
        USBH_UsrLog("No Class has been registered.");
 800ac90:	4833      	ldr	r0, [pc, #204]	; (800ad60 <USBH_Process+0x374>)
 800ac92:	f004 fb09 	bl	800f2a8 <iprintf>
 800ac96:	200a      	movs	r0, #10
 800ac98:	f004 fb1e 	bl	800f2d8 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ac9c:	e0f7      	b.n	800ae8e <USBH_Process+0x4a2>
        phost->pActiveClass = NULL;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aca6:	2300      	movs	r3, #0
 800aca8:	73fb      	strb	r3, [r7, #15]
 800acaa:	e016      	b.n	800acda <USBH_Process+0x2ee>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800acac:	7bfa      	ldrb	r2, [r7, #15]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	32de      	adds	r2, #222	; 0xde
 800acb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acb6:	791a      	ldrb	r2, [r3, #4]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d108      	bne.n	800acd4 <USBH_Process+0x2e8>
            phost->pActiveClass = phost->pClass[idx];
 800acc2:	7bfa      	ldrb	r2, [r7, #15]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	32de      	adds	r2, #222	; 0xde
 800acc8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800acd2:	e005      	b.n	800ace0 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800acd4:	7bfb      	ldrb	r3, [r7, #15]
 800acd6:	3301      	adds	r3, #1
 800acd8:	73fb      	strb	r3, [r7, #15]
 800acda:	7bfb      	ldrb	r3, [r7, #15]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d0e5      	beq.n	800acac <USBH_Process+0x2c0>
        if (phost->pActiveClass != NULL)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d040      	beq.n	800ad6c <USBH_Process+0x380>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	4798      	blx	r3
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d114      	bne.n	800ad26 <USBH_Process+0x33a>
            phost->gState = HOST_CLASS_REQUEST;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2206      	movs	r2, #6
 800ad00:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	4815      	ldr	r0, [pc, #84]	; (800ad64 <USBH_Process+0x378>)
 800ad0e:	f004 facb 	bl	800f2a8 <iprintf>
 800ad12:	200a      	movs	r0, #10
 800ad14:	f004 fae0 	bl	800f2d8 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad1e:	2103      	movs	r1, #3
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	4798      	blx	r3
      break;
 800ad24:	e0b3      	b.n	800ae8e <USBH_Process+0x4a2>
            phost->gState = HOST_ABORT_STATE;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	220d      	movs	r2, #13
 800ad2a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4619      	mov	r1, r3
 800ad36:	480c      	ldr	r0, [pc, #48]	; (800ad68 <USBH_Process+0x37c>)
 800ad38:	f004 fab6 	bl	800f2a8 <iprintf>
 800ad3c:	200a      	movs	r0, #10
 800ad3e:	f004 facb 	bl	800f2d8 <putchar>
      break;
 800ad42:	e0a4      	b.n	800ae8e <USBH_Process+0x4a2>
 800ad44:	0801038c 	.word	0x0801038c
 800ad48:	080103a4 	.word	0x080103a4
 800ad4c:	080103c0 	.word	0x080103c0
 800ad50:	080103ec 	.word	0x080103ec
 800ad54:	08010400 	.word	0x08010400
 800ad58:	08010428 	.word	0x08010428
 800ad5c:	08010444 	.word	0x08010444
 800ad60:	08010464 	.word	0x08010464
 800ad64:	08010484 	.word	0x08010484
 800ad68:	08010498 	.word	0x08010498
          phost->gState = HOST_ABORT_STATE;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	220d      	movs	r2, #13
 800ad70:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800ad72:	4849      	ldr	r0, [pc, #292]	; (800ae98 <USBH_Process+0x4ac>)
 800ad74:	f004 fa98 	bl	800f2a8 <iprintf>
 800ad78:	200a      	movs	r0, #10
 800ad7a:	f004 faad 	bl	800f2d8 <putchar>
      break;
 800ad7e:	e086      	b.n	800ae8e <USBH_Process+0x4a2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d020      	beq.n	800adcc <USBH_Process+0x3e0>
      {
        status = phost->pActiveClass->Requests(phost);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	4798      	blx	r3
 800ad96:	4603      	mov	r3, r0
 800ad98:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ad9a:	7bbb      	ldrb	r3, [r7, #14]
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d103      	bne.n	800adaa <USBH_Process+0x3be>
        {
          phost->gState = HOST_CLASS;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	220b      	movs	r2, #11
 800ada6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ada8:	e06e      	b.n	800ae88 <USBH_Process+0x49c>
        else if (status == USBH_FAIL)
 800adaa:	7bbb      	ldrb	r3, [r7, #14]
 800adac:	b2db      	uxtb	r3, r3
 800adae:	2b02      	cmp	r3, #2
 800adb0:	d16a      	bne.n	800ae88 <USBH_Process+0x49c>
          phost->gState = HOST_ABORT_STATE;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	220d      	movs	r2, #13
 800adb6:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800adb8:	4838      	ldr	r0, [pc, #224]	; (800ae9c <USBH_Process+0x4b0>)
 800adba:	f004 fa75 	bl	800f2a8 <iprintf>
 800adbe:	4838      	ldr	r0, [pc, #224]	; (800aea0 <USBH_Process+0x4b4>)
 800adc0:	f004 fa72 	bl	800f2a8 <iprintf>
 800adc4:	200a      	movs	r0, #10
 800adc6:	f004 fa87 	bl	800f2d8 <putchar>
      break;
 800adca:	e05d      	b.n	800ae88 <USBH_Process+0x49c>
        phost->gState = HOST_ABORT_STATE;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	220d      	movs	r2, #13
 800add0:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800add2:	4832      	ldr	r0, [pc, #200]	; (800ae9c <USBH_Process+0x4b0>)
 800add4:	f004 fa68 	bl	800f2a8 <iprintf>
 800add8:	4832      	ldr	r0, [pc, #200]	; (800aea4 <USBH_Process+0x4b8>)
 800adda:	f004 fa65 	bl	800f2a8 <iprintf>
 800adde:	200a      	movs	r0, #10
 800ade0:	f004 fa7a 	bl	800f2d8 <putchar>
      break;
 800ade4:	e050      	b.n	800ae88 <USBH_Process+0x49c>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adec:	2b00      	cmp	r3, #0
 800adee:	d04d      	beq.n	800ae8c <USBH_Process+0x4a0>
      {
        phost->pActiveClass->BgndProcess(phost);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adf6:	695b      	ldr	r3, [r3, #20]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	4798      	blx	r3
      }
      break;
 800adfc:	e046      	b.n	800ae8c <USBH_Process+0x4a0>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f7ff fc9e 	bl	800a748 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d009      	beq.n	800ae2a <USBH_Process+0x43e>
      {
        phost->pActiveClass->DeInit(phost);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2200      	movs	r2, #0
 800ae26:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d005      	beq.n	800ae40 <USBH_Process+0x454>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae3a:	2105      	movs	r1, #5
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800ae40:	4819      	ldr	r0, [pc, #100]	; (800aea8 <USBH_Process+0x4bc>)
 800ae42:	f004 fa31 	bl	800f2a8 <iprintf>
 800ae46:	200a      	movs	r0, #10
 800ae48:	f004 fa46 	bl	800f2d8 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d107      	bne.n	800ae68 <USBH_Process+0x47c>
      {
        phost->device.is_ReEnumerated = 0U;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f7ff fdb3 	bl	800a9cc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ae66:	e012      	b.n	800ae8e <USBH_Process+0x4a2>
        USBH_LL_Start(phost);
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f003 ff61 	bl	800ed30 <USBH_LL_Start>
      break;
 800ae6e:	e00e      	b.n	800ae8e <USBH_Process+0x4a2>

    case HOST_ABORT_STATE:
    default :
      break;
 800ae70:	bf00      	nop
 800ae72:	e00c      	b.n	800ae8e <USBH_Process+0x4a2>
      break;
 800ae74:	bf00      	nop
 800ae76:	e00a      	b.n	800ae8e <USBH_Process+0x4a2>
      break;
 800ae78:	bf00      	nop
 800ae7a:	e008      	b.n	800ae8e <USBH_Process+0x4a2>
    break;
 800ae7c:	bf00      	nop
 800ae7e:	e006      	b.n	800ae8e <USBH_Process+0x4a2>
      break;
 800ae80:	bf00      	nop
 800ae82:	e004      	b.n	800ae8e <USBH_Process+0x4a2>
      break;
 800ae84:	bf00      	nop
 800ae86:	e002      	b.n	800ae8e <USBH_Process+0x4a2>
      break;
 800ae88:	bf00      	nop
 800ae8a:	e000      	b.n	800ae8e <USBH_Process+0x4a2>
      break;
 800ae8c:	bf00      	nop
  }
  return USBH_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	080104b8 	.word	0x080104b8
 800ae9c:	080102cc 	.word	0x080102cc
 800aea0:	080104e0 	.word	0x080104e0
 800aea4:	08010508 	.word	0x08010508
 800aea8:	08010520 	.word	0x08010520

0800aeac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b088      	sub	sp, #32
 800aeb0:	af04      	add	r7, sp, #16
 800aeb2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	785b      	ldrb	r3, [r3, #1]
 800aec0:	2b07      	cmp	r3, #7
 800aec2:	f200 8280 	bhi.w	800b3c6 <USBH_HandleEnum+0x51a>
 800aec6:	a201      	add	r2, pc, #4	; (adr r2, 800aecc <USBH_HandleEnum+0x20>)
 800aec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aecc:	0800aeed 	.word	0x0800aeed
 800aed0:	0800afc9 	.word	0x0800afc9
 800aed4:	0800b079 	.word	0x0800b079
 800aed8:	0800b139 	.word	0x0800b139
 800aedc:	0800b1c1 	.word	0x0800b1c1
 800aee0:	0800b275 	.word	0x0800b275
 800aee4:	0800b2e9 	.word	0x0800b2e9
 800aee8:	0800b35b 	.word	0x0800b35b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800aeec:	2108      	movs	r1, #8
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 fb1c 	bl	800b52c <USBH_Get_DevDesc>
 800aef4:	4603      	mov	r3, r0
 800aef6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aef8:	7bbb      	ldrb	r3, [r7, #14]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d130      	bne.n	800af60 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	7919      	ldrb	r1, [r3, #4]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800af22:	b292      	uxth	r2, r2
 800af24:	9202      	str	r2, [sp, #8]
 800af26:	2200      	movs	r2, #0
 800af28:	9201      	str	r2, [sp, #4]
 800af2a:	9300      	str	r3, [sp, #0]
 800af2c:	4603      	mov	r3, r0
 800af2e:	2280      	movs	r2, #128	; 0x80
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f001 f851 	bl	800bfd8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	7959      	ldrb	r1, [r3, #5]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800af4a:	b292      	uxth	r2, r2
 800af4c:	9202      	str	r2, [sp, #8]
 800af4e:	2200      	movs	r2, #0
 800af50:	9201      	str	r2, [sp, #4]
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	4603      	mov	r3, r0
 800af56:	2200      	movs	r2, #0
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f001 f83d 	bl	800bfd8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800af5e:	e234      	b.n	800b3ca <USBH_HandleEnum+0x51e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af60:	7bbb      	ldrb	r3, [r7, #14]
 800af62:	2b03      	cmp	r3, #3
 800af64:	f040 8231 	bne.w	800b3ca <USBH_HandleEnum+0x51e>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800af68:	48b9      	ldr	r0, [pc, #740]	; (800b250 <USBH_HandleEnum+0x3a4>)
 800af6a:	f004 f99d 	bl	800f2a8 <iprintf>
 800af6e:	48b9      	ldr	r0, [pc, #740]	; (800b254 <USBH_HandleEnum+0x3a8>)
 800af70:	f004 f99a 	bl	800f2a8 <iprintf>
 800af74:	200a      	movs	r0, #10
 800af76:	f004 f9af 	bl	800f2d8 <putchar>
        phost->device.EnumCnt++;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af80:	3301      	adds	r3, #1
 800af82:	b2da      	uxtb	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af90:	2b03      	cmp	r3, #3
 800af92:	d909      	bls.n	800afa8 <USBH_HandleEnum+0xfc>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800af94:	48b0      	ldr	r0, [pc, #704]	; (800b258 <USBH_HandleEnum+0x3ac>)
 800af96:	f004 f987 	bl	800f2a8 <iprintf>
 800af9a:	200a      	movs	r0, #10
 800af9c:	f004 f99c 	bl	800f2d8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	220d      	movs	r2, #13
 800afa4:	701a      	strb	r2, [r3, #0]
      break;
 800afa6:	e210      	b.n	800b3ca <USBH_HandleEnum+0x51e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	795b      	ldrb	r3, [r3, #5]
 800afac:	4619      	mov	r1, r3
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f001 f862 	bl	800c078 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	791b      	ldrb	r3, [r3, #4]
 800afb8:	4619      	mov	r1, r3
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f001 f85c 	bl	800c078 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	701a      	strb	r2, [r3, #0]
      break;
 800afc6:	e200      	b.n	800b3ca <USBH_HandleEnum+0x51e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800afc8:	2112      	movs	r1, #18
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 faae 	bl	800b52c <USBH_Get_DevDesc>
 800afd0:	4603      	mov	r3, r0
 800afd2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800afd4:	7bbb      	ldrb	r3, [r7, #14]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d117      	bne.n	800b00a <USBH_HandleEnum+0x15e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 800afe0:	4619      	mov	r1, r3
 800afe2:	489e      	ldr	r0, [pc, #632]	; (800b25c <USBH_HandleEnum+0x3b0>)
 800afe4:	f004 f960 	bl	800f2a8 <iprintf>
 800afe8:	200a      	movs	r0, #10
 800afea:	f004 f975 	bl	800f2d8 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
 800aff4:	4619      	mov	r1, r3
 800aff6:	489a      	ldr	r0, [pc, #616]	; (800b260 <USBH_HandleEnum+0x3b4>)
 800aff8:	f004 f956 	bl	800f2a8 <iprintf>
 800affc:	200a      	movs	r0, #10
 800affe:	f004 f96b 	bl	800f2d8 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2202      	movs	r2, #2
 800b006:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b008:	e1e1      	b.n	800b3ce <USBH_HandleEnum+0x522>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b00a:	7bbb      	ldrb	r3, [r7, #14]
 800b00c:	2b03      	cmp	r3, #3
 800b00e:	f040 81de 	bne.w	800b3ce <USBH_HandleEnum+0x522>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800b012:	488f      	ldr	r0, [pc, #572]	; (800b250 <USBH_HandleEnum+0x3a4>)
 800b014:	f004 f948 	bl	800f2a8 <iprintf>
 800b018:	4892      	ldr	r0, [pc, #584]	; (800b264 <USBH_HandleEnum+0x3b8>)
 800b01a:	f004 f945 	bl	800f2a8 <iprintf>
 800b01e:	200a      	movs	r0, #10
 800b020:	f004 f95a 	bl	800f2d8 <putchar>
        phost->device.EnumCnt++;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b02a:	3301      	adds	r3, #1
 800b02c:	b2da      	uxtb	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b03a:	2b03      	cmp	r3, #3
 800b03c:	d909      	bls.n	800b052 <USBH_HandleEnum+0x1a6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800b03e:	4886      	ldr	r0, [pc, #536]	; (800b258 <USBH_HandleEnum+0x3ac>)
 800b040:	f004 f932 	bl	800f2a8 <iprintf>
 800b044:	200a      	movs	r0, #10
 800b046:	f004 f947 	bl	800f2d8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	220d      	movs	r2, #13
 800b04e:	701a      	strb	r2, [r3, #0]
      break;
 800b050:	e1bd      	b.n	800b3ce <USBH_HandleEnum+0x522>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	795b      	ldrb	r3, [r3, #5]
 800b056:	4619      	mov	r1, r3
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f001 f80d 	bl	800c078 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	791b      	ldrb	r3, [r3, #4]
 800b062:	4619      	mov	r1, r3
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f001 f807 	bl	800c078 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	701a      	strb	r2, [r3, #0]
      break;
 800b076:	e1aa      	b.n	800b3ce <USBH_HandleEnum+0x522>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b078:	2101      	movs	r1, #1
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 fb02 	bl	800b684 <USBH_SetAddress>
 800b080:	4603      	mov	r3, r0
 800b082:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b084:	7bbb      	ldrb	r3, [r7, #14]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d13c      	bne.n	800b104 <USBH_HandleEnum+0x258>
      {
        USBH_Delay(2U);
 800b08a:	2002      	movs	r0, #2
 800b08c:	f003 ffdb 	bl	800f046 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2201      	movs	r2, #1
 800b094:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 800b09e:	4619      	mov	r1, r3
 800b0a0:	4871      	ldr	r0, [pc, #452]	; (800b268 <USBH_HandleEnum+0x3bc>)
 800b0a2:	f004 f901 	bl	800f2a8 <iprintf>
 800b0a6:	200a      	movs	r0, #10
 800b0a8:	f004 f916 	bl	800f2d8 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2203      	movs	r2, #3
 800b0b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	7919      	ldrb	r1, [r3, #4]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b0c6:	b292      	uxth	r2, r2
 800b0c8:	9202      	str	r2, [sp, #8]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	9201      	str	r2, [sp, #4]
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2280      	movs	r2, #128	; 0x80
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 ff7f 	bl	800bfd8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	7959      	ldrb	r1, [r3, #5]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b0ee:	b292      	uxth	r2, r2
 800b0f0:	9202      	str	r2, [sp, #8]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	9201      	str	r2, [sp, #4]
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 ff6b 	bl	800bfd8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b102:	e166      	b.n	800b3d2 <USBH_HandleEnum+0x526>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b104:	7bbb      	ldrb	r3, [r7, #14]
 800b106:	2b03      	cmp	r3, #3
 800b108:	f040 8163 	bne.w	800b3d2 <USBH_HandleEnum+0x526>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800b10c:	4850      	ldr	r0, [pc, #320]	; (800b250 <USBH_HandleEnum+0x3a4>)
 800b10e:	f004 f8cb 	bl	800f2a8 <iprintf>
 800b112:	4856      	ldr	r0, [pc, #344]	; (800b26c <USBH_HandleEnum+0x3c0>)
 800b114:	f004 f8c8 	bl	800f2a8 <iprintf>
 800b118:	200a      	movs	r0, #10
 800b11a:	f004 f8dd 	bl	800f2d8 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800b11e:	484e      	ldr	r0, [pc, #312]	; (800b258 <USBH_HandleEnum+0x3ac>)
 800b120:	f004 f8c2 	bl	800f2a8 <iprintf>
 800b124:	200a      	movs	r0, #10
 800b126:	f004 f8d7 	bl	800f2d8 <putchar>
        phost->gState = HOST_ABORT_STATE;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	220d      	movs	r2, #13
 800b12e:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	705a      	strb	r2, [r3, #1]
      break;
 800b136:	e14c      	b.n	800b3d2 <USBH_HandleEnum+0x526>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b138:	2109      	movs	r1, #9
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 fa1e 	bl	800b57c <USBH_Get_CfgDesc>
 800b140:	4603      	mov	r3, r0
 800b142:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b144:	7bbb      	ldrb	r3, [r7, #14]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d103      	bne.n	800b152 <USBH_HandleEnum+0x2a6>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2204      	movs	r2, #4
 800b14e:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b150:	e141      	b.n	800b3d6 <USBH_HandleEnum+0x52a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b152:	7bbb      	ldrb	r3, [r7, #14]
 800b154:	2b03      	cmp	r3, #3
 800b156:	f040 813e 	bne.w	800b3d6 <USBH_HandleEnum+0x52a>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800b15a:	483d      	ldr	r0, [pc, #244]	; (800b250 <USBH_HandleEnum+0x3a4>)
 800b15c:	f004 f8a4 	bl	800f2a8 <iprintf>
 800b160:	4843      	ldr	r0, [pc, #268]	; (800b270 <USBH_HandleEnum+0x3c4>)
 800b162:	f004 f8a1 	bl	800f2a8 <iprintf>
 800b166:	200a      	movs	r0, #10
 800b168:	f004 f8b6 	bl	800f2d8 <putchar>
        phost->device.EnumCnt++;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b172:	3301      	adds	r3, #1
 800b174:	b2da      	uxtb	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b182:	2b03      	cmp	r3, #3
 800b184:	d909      	bls.n	800b19a <USBH_HandleEnum+0x2ee>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800b186:	4834      	ldr	r0, [pc, #208]	; (800b258 <USBH_HandleEnum+0x3ac>)
 800b188:	f004 f88e 	bl	800f2a8 <iprintf>
 800b18c:	200a      	movs	r0, #10
 800b18e:	f004 f8a3 	bl	800f2d8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	220d      	movs	r2, #13
 800b196:	701a      	strb	r2, [r3, #0]
      break;
 800b198:	e11d      	b.n	800b3d6 <USBH_HandleEnum+0x52a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	795b      	ldrb	r3, [r3, #5]
 800b19e:	4619      	mov	r1, r3
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 ff69 	bl	800c078 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	791b      	ldrb	r3, [r3, #4]
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 ff63 	bl	800c078 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	701a      	strb	r2, [r3, #0]
      break;
 800b1be:	e10a      	b.n	800b3d6 <USBH_HandleEnum+0x52a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f9d7 	bl	800b57c <USBH_Get_CfgDesc>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b1d2:	7bbb      	ldrb	r3, [r7, #14]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d103      	bne.n	800b1e0 <USBH_HandleEnum+0x334>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2205      	movs	r2, #5
 800b1dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b1de:	e0fc      	b.n	800b3da <USBH_HandleEnum+0x52e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1e0:	7bbb      	ldrb	r3, [r7, #14]
 800b1e2:	2b03      	cmp	r3, #3
 800b1e4:	f040 80f9 	bne.w	800b3da <USBH_HandleEnum+0x52e>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800b1e8:	4819      	ldr	r0, [pc, #100]	; (800b250 <USBH_HandleEnum+0x3a4>)
 800b1ea:	f004 f85d 	bl	800f2a8 <iprintf>
 800b1ee:	4820      	ldr	r0, [pc, #128]	; (800b270 <USBH_HandleEnum+0x3c4>)
 800b1f0:	f004 f85a 	bl	800f2a8 <iprintf>
 800b1f4:	200a      	movs	r0, #10
 800b1f6:	f004 f86f 	bl	800f2d8 <putchar>
        phost->device.EnumCnt++;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b200:	3301      	adds	r3, #1
 800b202:	b2da      	uxtb	r2, r3
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b210:	2b03      	cmp	r3, #3
 800b212:	d909      	bls.n	800b228 <USBH_HandleEnum+0x37c>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800b214:	4810      	ldr	r0, [pc, #64]	; (800b258 <USBH_HandleEnum+0x3ac>)
 800b216:	f004 f847 	bl	800f2a8 <iprintf>
 800b21a:	200a      	movs	r0, #10
 800b21c:	f004 f85c 	bl	800f2d8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	220d      	movs	r2, #13
 800b224:	701a      	strb	r2, [r3, #0]
      break;
 800b226:	e0d8      	b.n	800b3da <USBH_HandleEnum+0x52e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	795b      	ldrb	r3, [r3, #5]
 800b22c:	4619      	mov	r1, r3
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f000 ff22 	bl	800c078 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	791b      	ldrb	r3, [r3, #4]
 800b238:	4619      	mov	r1, r3
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 ff1c 	bl	800c078 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	701a      	strb	r2, [r3, #0]
      break;
 800b24c:	e0c5      	b.n	800b3da <USBH_HandleEnum+0x52e>
 800b24e:	bf00      	nop
 800b250:	080102cc 	.word	0x080102cc
 800b254:	08010538 	.word	0x08010538
 800b258:	0801056c 	.word	0x0801056c
 800b25c:	080105ac 	.word	0x080105ac
 800b260:	080105b8 	.word	0x080105b8
 800b264:	080105c4 	.word	0x080105c4
 800b268:	08010600 	.word	0x08010600
 800b26c:	08010618 	.word	0x08010618
 800b270:	0801064c 	.word	0x0801064c

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d02a      	beq.n	800b2d4 <USBH_HandleEnum+0x428>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b28a:	23ff      	movs	r3, #255	; 0xff
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 f999 	bl	800b5c4 <USBH_Get_StringDesc>
 800b292:	4603      	mov	r3, r0
 800b294:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b296:	7bbb      	ldrb	r3, [r7, #14]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d10d      	bne.n	800b2b8 <USBH_HandleEnum+0x40c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	4853      	ldr	r0, [pc, #332]	; (800b3f4 <USBH_HandleEnum+0x548>)
 800b2a6:	f003 ffff 	bl	800f2a8 <iprintf>
 800b2aa:	200a      	movs	r0, #10
 800b2ac:	f004 f814 	bl	800f2d8 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2206      	movs	r2, #6
 800b2b4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b2b6:	e092      	b.n	800b3de <USBH_HandleEnum+0x532>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b2b8:	7bbb      	ldrb	r3, [r7, #14]
 800b2ba:	2b03      	cmp	r3, #3
 800b2bc:	f040 808f 	bne.w	800b3de <USBH_HandleEnum+0x532>
          USBH_UsrLog("Manufacturer : N/A");
 800b2c0:	484d      	ldr	r0, [pc, #308]	; (800b3f8 <USBH_HandleEnum+0x54c>)
 800b2c2:	f003 fff1 	bl	800f2a8 <iprintf>
 800b2c6:	200a      	movs	r0, #10
 800b2c8:	f004 f806 	bl	800f2d8 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2206      	movs	r2, #6
 800b2d0:	705a      	strb	r2, [r3, #1]
      break;
 800b2d2:	e084      	b.n	800b3de <USBH_HandleEnum+0x532>
        USBH_UsrLog("Manufacturer : N/A");
 800b2d4:	4848      	ldr	r0, [pc, #288]	; (800b3f8 <USBH_HandleEnum+0x54c>)
 800b2d6:	f003 ffe7 	bl	800f2a8 <iprintf>
 800b2da:	200a      	movs	r0, #10
 800b2dc:	f003 fffc 	bl	800f2d8 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2206      	movs	r2, #6
 800b2e4:	705a      	strb	r2, [r3, #1]
      break;
 800b2e6:	e07a      	b.n	800b3de <USBH_HandleEnum+0x532>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d029      	beq.n	800b346 <USBH_HandleEnum+0x49a>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b2fe:	23ff      	movs	r3, #255	; 0xff
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 f95f 	bl	800b5c4 <USBH_Get_StringDesc>
 800b306:	4603      	mov	r3, r0
 800b308:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b30a:	7bbb      	ldrb	r3, [r7, #14]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d10d      	bne.n	800b32c <USBH_HandleEnum+0x480>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b316:	4619      	mov	r1, r3
 800b318:	4838      	ldr	r0, [pc, #224]	; (800b3fc <USBH_HandleEnum+0x550>)
 800b31a:	f003 ffc5 	bl	800f2a8 <iprintf>
 800b31e:	200a      	movs	r0, #10
 800b320:	f003 ffda 	bl	800f2d8 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2207      	movs	r2, #7
 800b328:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b32a:	e05a      	b.n	800b3e2 <USBH_HandleEnum+0x536>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b32c:	7bbb      	ldrb	r3, [r7, #14]
 800b32e:	2b03      	cmp	r3, #3
 800b330:	d157      	bne.n	800b3e2 <USBH_HandleEnum+0x536>
          USBH_UsrLog("Product : N/A");
 800b332:	4833      	ldr	r0, [pc, #204]	; (800b400 <USBH_HandleEnum+0x554>)
 800b334:	f003 ffb8 	bl	800f2a8 <iprintf>
 800b338:	200a      	movs	r0, #10
 800b33a:	f003 ffcd 	bl	800f2d8 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2207      	movs	r2, #7
 800b342:	705a      	strb	r2, [r3, #1]
      break;
 800b344:	e04d      	b.n	800b3e2 <USBH_HandleEnum+0x536>
        USBH_UsrLog("Product : N/A");
 800b346:	482e      	ldr	r0, [pc, #184]	; (800b400 <USBH_HandleEnum+0x554>)
 800b348:	f003 ffae 	bl	800f2a8 <iprintf>
 800b34c:	200a      	movs	r0, #10
 800b34e:	f003 ffc3 	bl	800f2d8 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2207      	movs	r2, #7
 800b356:	705a      	strb	r2, [r3, #1]
      break;
 800b358:	e043      	b.n	800b3e2 <USBH_HandleEnum+0x536>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b360:	2b00      	cmp	r3, #0
 800b362:	d027      	beq.n	800b3b4 <USBH_HandleEnum+0x508>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b370:	23ff      	movs	r3, #255	; 0xff
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 f926 	bl	800b5c4 <USBH_Get_StringDesc>
 800b378:	4603      	mov	r3, r0
 800b37a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b37c:	7bbb      	ldrb	r3, [r7, #14]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d10c      	bne.n	800b39c <USBH_HandleEnum+0x4f0>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b388:	4619      	mov	r1, r3
 800b38a:	481e      	ldr	r0, [pc, #120]	; (800b404 <USBH_HandleEnum+0x558>)
 800b38c:	f003 ff8c 	bl	800f2a8 <iprintf>
 800b390:	200a      	movs	r0, #10
 800b392:	f003 ffa1 	bl	800f2d8 <putchar>
          Status = USBH_OK;
 800b396:	2300      	movs	r3, #0
 800b398:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b39a:	e024      	b.n	800b3e6 <USBH_HandleEnum+0x53a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b39c:	7bbb      	ldrb	r3, [r7, #14]
 800b39e:	2b03      	cmp	r3, #3
 800b3a0:	d121      	bne.n	800b3e6 <USBH_HandleEnum+0x53a>
          USBH_UsrLog("Serial Number : N/A");
 800b3a2:	4819      	ldr	r0, [pc, #100]	; (800b408 <USBH_HandleEnum+0x55c>)
 800b3a4:	f003 ff80 	bl	800f2a8 <iprintf>
 800b3a8:	200a      	movs	r0, #10
 800b3aa:	f003 ff95 	bl	800f2d8 <putchar>
          Status = USBH_OK;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	73fb      	strb	r3, [r7, #15]
      break;
 800b3b2:	e018      	b.n	800b3e6 <USBH_HandleEnum+0x53a>
        USBH_UsrLog("Serial Number : N/A");
 800b3b4:	4814      	ldr	r0, [pc, #80]	; (800b408 <USBH_HandleEnum+0x55c>)
 800b3b6:	f003 ff77 	bl	800f2a8 <iprintf>
 800b3ba:	200a      	movs	r0, #10
 800b3bc:	f003 ff8c 	bl	800f2d8 <putchar>
        Status = USBH_OK;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	73fb      	strb	r3, [r7, #15]
      break;
 800b3c4:	e00f      	b.n	800b3e6 <USBH_HandleEnum+0x53a>

    default:
      break;
 800b3c6:	bf00      	nop
 800b3c8:	e00e      	b.n	800b3e8 <USBH_HandleEnum+0x53c>
      break;
 800b3ca:	bf00      	nop
 800b3cc:	e00c      	b.n	800b3e8 <USBH_HandleEnum+0x53c>
      break;
 800b3ce:	bf00      	nop
 800b3d0:	e00a      	b.n	800b3e8 <USBH_HandleEnum+0x53c>
      break;
 800b3d2:	bf00      	nop
 800b3d4:	e008      	b.n	800b3e8 <USBH_HandleEnum+0x53c>
      break;
 800b3d6:	bf00      	nop
 800b3d8:	e006      	b.n	800b3e8 <USBH_HandleEnum+0x53c>
      break;
 800b3da:	bf00      	nop
 800b3dc:	e004      	b.n	800b3e8 <USBH_HandleEnum+0x53c>
      break;
 800b3de:	bf00      	nop
 800b3e0:	e002      	b.n	800b3e8 <USBH_HandleEnum+0x53c>
      break;
 800b3e2:	bf00      	nop
 800b3e4:	e000      	b.n	800b3e8 <USBH_HandleEnum+0x53c>
      break;
 800b3e6:	bf00      	nop
  }
  return Status;
 800b3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3710      	adds	r7, #16
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	08010690 	.word	0x08010690
 800b3f8:	080106a4 	.word	0x080106a4
 800b3fc:	080106b8 	.word	0x080106b8
 800b400:	080106c8 	.word	0x080106c8
 800b404:	080106d8 	.word	0x080106d8
 800b408:	080106ec 	.word	0x080106ec

0800b40c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	683a      	ldr	r2, [r7, #0]
 800b41a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b41e:	bf00      	nop
 800b420:	370c      	adds	r7, #12
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr

0800b42a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b082      	sub	sp, #8
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b438:	1c5a      	adds	r2, r3, #1
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f000 f804 	bl	800b44e <USBH_HandleSof>
}
 800b446:	bf00      	nop
 800b448:	3708      	adds	r7, #8
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b082      	sub	sp, #8
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	2b0b      	cmp	r3, #11
 800b45e:	d10a      	bne.n	800b476 <USBH_HandleSof+0x28>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b466:	2b00      	cmp	r3, #0
 800b468:	d005      	beq.n	800b476 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b470:	699b      	ldr	r3, [r3, #24]
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	4798      	blx	r3
  }
}
 800b476:	bf00      	nop
 800b478:	3708      	adds	r7, #8
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}

0800b47e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b47e:	b480      	push	{r7}
 800b480:	b083      	sub	sp, #12
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2201      	movs	r2, #1
 800b48a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b48e:	bf00      	nop
}
 800b490:	370c      	adds	r7, #12
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr

0800b49a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b49a:	b480      	push	{r7}
 800b49c:	b083      	sub	sp, #12
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b4aa:	bf00      	nop
}
 800b4ac:	370c      	adds	r7, #12
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr

0800b4b6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b4b6:	b480      	push	{r7}
 800b4b8:	b083      	sub	sp, #12
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b4d6:	2300      	movs	r3, #0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	370c      	adds	r7, #12
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b082      	sub	sp, #8
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f003 fc2e 	bl	800ed66 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	791b      	ldrb	r3, [r3, #4]
 800b50e:	4619      	mov	r1, r3
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 fdb1 	bl	800c078 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	795b      	ldrb	r3, [r3, #5]
 800b51a:	4619      	mov	r1, r3
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 fdab 	bl	800c078 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	3708      	adds	r7, #8
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b086      	sub	sp, #24
 800b530:	af02      	add	r7, sp, #8
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	460b      	mov	r3, r1
 800b536:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b53e:	78fb      	ldrb	r3, [r7, #3]
 800b540:	b29b      	uxth	r3, r3
 800b542:	9300      	str	r3, [sp, #0]
 800b544:	4613      	mov	r3, r2
 800b546:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b54a:	2100      	movs	r1, #0
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 f864 	bl	800b61a <USBH_GetDescriptor>
 800b552:	4603      	mov	r3, r0
 800b554:	73fb      	strb	r3, [r7, #15]
 800b556:	7bfb      	ldrb	r3, [r7, #15]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d10a      	bne.n	800b572 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b568:	78fa      	ldrb	r2, [r7, #3]
 800b56a:	b292      	uxth	r2, r2
 800b56c:	4619      	mov	r1, r3
 800b56e:	f000 f918 	bl	800b7a2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b572:	7bfb      	ldrb	r3, [r7, #15]
}
 800b574:	4618      	mov	r0, r3
 800b576:	3710      	adds	r7, #16
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b086      	sub	sp, #24
 800b580:	af02      	add	r7, sp, #8
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	460b      	mov	r3, r1
 800b586:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	331c      	adds	r3, #28
 800b58c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b58e:	887b      	ldrh	r3, [r7, #2]
 800b590:	9300      	str	r3, [sp, #0]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b598:	2100      	movs	r1, #0
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 f83d 	bl	800b61a <USBH_GetDescriptor>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	72fb      	strb	r3, [r7, #11]
 800b5a4:	7afb      	ldrb	r3, [r7, #11]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d107      	bne.n	800b5ba <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b5b0:	887a      	ldrh	r2, [r7, #2]
 800b5b2:	68f9      	ldr	r1, [r7, #12]
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f000 f964 	bl	800b882 <USBH_ParseCfgDesc>
  }

  return status;
 800b5ba:	7afb      	ldrb	r3, [r7, #11]
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3710      	adds	r7, #16
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b088      	sub	sp, #32
 800b5c8:	af02      	add	r7, sp, #8
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	607a      	str	r2, [r7, #4]
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	72fb      	strb	r3, [r7, #11]
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b5d8:	7afb      	ldrb	r3, [r7, #11]
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b5e0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b5e8:	893b      	ldrh	r3, [r7, #8]
 800b5ea:	9300      	str	r3, [sp, #0]
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	2100      	movs	r1, #0
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	f000 f812 	bl	800b61a <USBH_GetDescriptor>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	75fb      	strb	r3, [r7, #23]
 800b5fa:	7dfb      	ldrb	r3, [r7, #23]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d107      	bne.n	800b610 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b606:	893a      	ldrh	r2, [r7, #8]
 800b608:	6879      	ldr	r1, [r7, #4]
 800b60a:	4618      	mov	r0, r3
 800b60c:	f000 fa37 	bl	800ba7e <USBH_ParseStringDesc>
  }

  return status;
 800b610:	7dfb      	ldrb	r3, [r7, #23]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3718      	adds	r7, #24
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b084      	sub	sp, #16
 800b61e:	af00      	add	r7, sp, #0
 800b620:	60f8      	str	r0, [r7, #12]
 800b622:	607b      	str	r3, [r7, #4]
 800b624:	460b      	mov	r3, r1
 800b626:	72fb      	strb	r3, [r7, #11]
 800b628:	4613      	mov	r3, r2
 800b62a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	789b      	ldrb	r3, [r3, #2]
 800b630:	2b01      	cmp	r3, #1
 800b632:	d11c      	bne.n	800b66e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b634:	7afb      	ldrb	r3, [r7, #11]
 800b636:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b63a:	b2da      	uxtb	r2, r3
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2206      	movs	r2, #6
 800b644:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	893a      	ldrh	r2, [r7, #8]
 800b64a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b64c:	893b      	ldrh	r3, [r7, #8]
 800b64e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b652:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b656:	d104      	bne.n	800b662 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f240 4209 	movw	r2, #1033	; 0x409
 800b65e:	829a      	strh	r2, [r3, #20]
 800b660:	e002      	b.n	800b668 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2200      	movs	r2, #0
 800b666:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	8b3a      	ldrh	r2, [r7, #24]
 800b66c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b66e:	8b3b      	ldrh	r3, [r7, #24]
 800b670:	461a      	mov	r2, r3
 800b672:	6879      	ldr	r1, [r7, #4]
 800b674:	68f8      	ldr	r0, [r7, #12]
 800b676:	f000 fa50 	bl	800bb1a <USBH_CtlReq>
 800b67a:	4603      	mov	r3, r0
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3710      	adds	r7, #16
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	460b      	mov	r3, r1
 800b68e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	789b      	ldrb	r3, [r3, #2]
 800b694:	2b01      	cmp	r3, #1
 800b696:	d10f      	bne.n	800b6b8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2205      	movs	r2, #5
 800b6a2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b6a4:	78fb      	ldrb	r3, [r7, #3]
 800b6a6:	b29a      	uxth	r2, r3
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 fa2c 	bl	800bb1a <USBH_CtlReq>
 800b6c2:	4603      	mov	r3, r0
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3708      	adds	r7, #8
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	789b      	ldrb	r3, [r3, #2]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d10e      	bne.n	800b6fe <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2209      	movs	r2, #9
 800b6ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	887a      	ldrh	r2, [r7, #2]
 800b6f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b6fe:	2200      	movs	r2, #0
 800b700:	2100      	movs	r1, #0
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 fa09 	bl	800bb1a <USBH_CtlReq>
 800b708:	4603      	mov	r3, r0
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3708      	adds	r7, #8
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}

0800b712 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b712:	b580      	push	{r7, lr}
 800b714:	b082      	sub	sp, #8
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
 800b71a:	460b      	mov	r3, r1
 800b71c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	789b      	ldrb	r3, [r3, #2]
 800b722:	2b01      	cmp	r3, #1
 800b724:	d10f      	bne.n	800b746 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2203      	movs	r2, #3
 800b730:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b732:	78fb      	ldrb	r3, [r7, #3]
 800b734:	b29a      	uxth	r2, r3
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b746:	2200      	movs	r2, #0
 800b748:	2100      	movs	r1, #0
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 f9e5 	bl	800bb1a <USBH_CtlReq>
 800b750:	4603      	mov	r3, r0
}
 800b752:	4618      	mov	r0, r3
 800b754:	3708      	adds	r7, #8
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}

0800b75a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b75a:	b580      	push	{r7, lr}
 800b75c:	b082      	sub	sp, #8
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]
 800b762:	460b      	mov	r3, r1
 800b764:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	789b      	ldrb	r3, [r3, #2]
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d10f      	bne.n	800b78e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2202      	movs	r2, #2
 800b772:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2201      	movs	r2, #1
 800b778:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b780:	78fb      	ldrb	r3, [r7, #3]
 800b782:	b29a      	uxth	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2200      	movs	r2, #0
 800b78c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b78e:	2200      	movs	r2, #0
 800b790:	2100      	movs	r1, #0
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 f9c1 	bl	800bb1a <USBH_CtlReq>
 800b798:	4603      	mov	r3, r0
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3708      	adds	r7, #8
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b7a2:	b480      	push	{r7}
 800b7a4:	b085      	sub	sp, #20
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	60f8      	str	r0, [r7, #12]
 800b7aa:	60b9      	str	r1, [r7, #8]
 800b7ac:	4613      	mov	r3, r2
 800b7ae:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	781a      	ldrb	r2, [r3, #0]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	785a      	ldrb	r2, [r3, #1]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	3302      	adds	r3, #2
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	b29a      	uxth	r2, r3
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	3303      	adds	r3, #3
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	021b      	lsls	r3, r3, #8
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	b29a      	uxth	r2, r3
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	791a      	ldrb	r2, [r3, #4]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	795a      	ldrb	r2, [r3, #5]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	799a      	ldrb	r2, [r3, #6]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	79da      	ldrb	r2, [r3, #7]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b7fc:	88fb      	ldrh	r3, [r7, #6]
 800b7fe:	2b08      	cmp	r3, #8
 800b800:	d939      	bls.n	800b876 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	3308      	adds	r3, #8
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	b29a      	uxth	r2, r3
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	3309      	adds	r3, #9
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	b29b      	uxth	r3, r3
 800b812:	021b      	lsls	r3, r3, #8
 800b814:	b29b      	uxth	r3, r3
 800b816:	4313      	orrs	r3, r2
 800b818:	b29a      	uxth	r2, r3
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	330a      	adds	r3, #10
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	b29a      	uxth	r2, r3
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	330b      	adds	r3, #11
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	021b      	lsls	r3, r3, #8
 800b830:	b29b      	uxth	r3, r3
 800b832:	4313      	orrs	r3, r2
 800b834:	b29a      	uxth	r2, r3
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	330c      	adds	r3, #12
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	b29a      	uxth	r2, r3
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	330d      	adds	r3, #13
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	b29b      	uxth	r3, r3
 800b84a:	021b      	lsls	r3, r3, #8
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	4313      	orrs	r3, r2
 800b850:	b29a      	uxth	r2, r3
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	7b9a      	ldrb	r2, [r3, #14]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	7bda      	ldrb	r2, [r3, #15]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	7c1a      	ldrb	r2, [r3, #16]
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	7c5a      	ldrb	r2, [r3, #17]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	745a      	strb	r2, [r3, #17]
  }
}
 800b876:	bf00      	nop
 800b878:	3714      	adds	r7, #20
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr

0800b882 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b882:	b580      	push	{r7, lr}
 800b884:	b08a      	sub	sp, #40	; 0x28
 800b886:	af00      	add	r7, sp, #0
 800b888:	60f8      	str	r0, [r7, #12]
 800b88a:	60b9      	str	r1, [r7, #8]
 800b88c:	4613      	mov	r3, r2
 800b88e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b894:	2300      	movs	r3, #0
 800b896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b89a:	2300      	movs	r3, #0
 800b89c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	781a      	ldrb	r2, [r3, #0]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	785a      	ldrb	r2, [r3, #1]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	3302      	adds	r3, #2
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	b29a      	uxth	r2, r3
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	3303      	adds	r3, #3
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	021b      	lsls	r3, r3, #8
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	b29a      	uxth	r2, r3
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	791a      	ldrb	r2, [r3, #4]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	795a      	ldrb	r2, [r3, #5]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	799a      	ldrb	r2, [r3, #6]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	79da      	ldrb	r2, [r3, #7]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	7a1a      	ldrb	r2, [r3, #8]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b8f8:	88fb      	ldrh	r3, [r7, #6]
 800b8fa:	2b09      	cmp	r3, #9
 800b8fc:	d95f      	bls.n	800b9be <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b8fe:	2309      	movs	r3, #9
 800b900:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b902:	2300      	movs	r3, #0
 800b904:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b906:	e051      	b.n	800b9ac <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b908:	f107 0316 	add.w	r3, r7, #22
 800b90c:	4619      	mov	r1, r3
 800b90e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b910:	f000 f8e8 	bl	800bae4 <USBH_GetNextDesc>
 800b914:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b918:	785b      	ldrb	r3, [r3, #1]
 800b91a:	2b04      	cmp	r3, #4
 800b91c:	d146      	bne.n	800b9ac <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b91e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b922:	221a      	movs	r2, #26
 800b924:	fb02 f303 	mul.w	r3, r2, r3
 800b928:	3308      	adds	r3, #8
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	4413      	add	r3, r2
 800b92e:	3302      	adds	r3, #2
 800b930:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b932:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b934:	69f8      	ldr	r0, [r7, #28]
 800b936:	f000 f846 	bl	800b9c6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b93a:	2300      	movs	r3, #0
 800b93c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b940:	2300      	movs	r3, #0
 800b942:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b944:	e022      	b.n	800b98c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b946:	f107 0316 	add.w	r3, r7, #22
 800b94a:	4619      	mov	r1, r3
 800b94c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b94e:	f000 f8c9 	bl	800bae4 <USBH_GetNextDesc>
 800b952:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b956:	785b      	ldrb	r3, [r3, #1]
 800b958:	2b05      	cmp	r3, #5
 800b95a:	d117      	bne.n	800b98c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b95c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b960:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b964:	3201      	adds	r2, #1
 800b966:	00d2      	lsls	r2, r2, #3
 800b968:	211a      	movs	r1, #26
 800b96a:	fb01 f303 	mul.w	r3, r1, r3
 800b96e:	4413      	add	r3, r2
 800b970:	3308      	adds	r3, #8
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	4413      	add	r3, r2
 800b976:	3304      	adds	r3, #4
 800b978:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b97a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b97c:	69b8      	ldr	r0, [r7, #24]
 800b97e:	f000 f851 	bl	800ba24 <USBH_ParseEPDesc>
            ep_ix++;
 800b982:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b986:	3301      	adds	r3, #1
 800b988:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b98c:	69fb      	ldr	r3, [r7, #28]
 800b98e:	791b      	ldrb	r3, [r3, #4]
 800b990:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b994:	429a      	cmp	r2, r3
 800b996:	d204      	bcs.n	800b9a2 <USBH_ParseCfgDesc+0x120>
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	885a      	ldrh	r2, [r3, #2]
 800b99c:	8afb      	ldrh	r3, [r7, #22]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d8d1      	bhi.n	800b946 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b9a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b9ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d804      	bhi.n	800b9be <USBH_ParseCfgDesc+0x13c>
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	885a      	ldrh	r2, [r3, #2]
 800b9b8:	8afb      	ldrh	r3, [r7, #22]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d8a4      	bhi.n	800b908 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b9be:	bf00      	nop
 800b9c0:	3728      	adds	r7, #40	; 0x28
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b9c6:	b480      	push	{r7}
 800b9c8:	b083      	sub	sp, #12
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
 800b9ce:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	781a      	ldrb	r2, [r3, #0]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	785a      	ldrb	r2, [r3, #1]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	789a      	ldrb	r2, [r3, #2]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	78da      	ldrb	r2, [r3, #3]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	791a      	ldrb	r2, [r3, #4]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	795a      	ldrb	r2, [r3, #5]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	799a      	ldrb	r2, [r3, #6]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	79da      	ldrb	r2, [r3, #7]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	7a1a      	ldrb	r2, [r3, #8]
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	721a      	strb	r2, [r3, #8]
}
 800ba18:	bf00      	nop
 800ba1a:	370c      	adds	r7, #12
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr

0800ba24 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	781a      	ldrb	r2, [r3, #0]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	785a      	ldrb	r2, [r3, #1]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	789a      	ldrb	r2, [r3, #2]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	78da      	ldrb	r2, [r3, #3]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	3304      	adds	r3, #4
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	b29a      	uxth	r2, r3
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	3305      	adds	r3, #5
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	021b      	lsls	r3, r3, #8
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	4313      	orrs	r3, r2
 800ba64:	b29a      	uxth	r2, r3
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	799a      	ldrb	r2, [r3, #6]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	719a      	strb	r2, [r3, #6]
}
 800ba72:	bf00      	nop
 800ba74:	370c      	adds	r7, #12
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr

0800ba7e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ba7e:	b480      	push	{r7}
 800ba80:	b087      	sub	sp, #28
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	60f8      	str	r0, [r7, #12]
 800ba86:	60b9      	str	r1, [r7, #8]
 800ba88:	4613      	mov	r3, r2
 800ba8a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	2b03      	cmp	r3, #3
 800ba94:	d120      	bne.n	800bad8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	1e9a      	subs	r2, r3, #2
 800ba9c:	88fb      	ldrh	r3, [r7, #6]
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	bf28      	it	cs
 800baa2:	4613      	movcs	r3, r2
 800baa4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	3302      	adds	r3, #2
 800baaa:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800baac:	2300      	movs	r3, #0
 800baae:	82fb      	strh	r3, [r7, #22]
 800bab0:	e00b      	b.n	800baca <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bab2:	8afb      	ldrh	r3, [r7, #22]
 800bab4:	68fa      	ldr	r2, [r7, #12]
 800bab6:	4413      	add	r3, r2
 800bab8:	781a      	ldrb	r2, [r3, #0]
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	701a      	strb	r2, [r3, #0]
      pdest++;
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	3301      	adds	r3, #1
 800bac2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bac4:	8afb      	ldrh	r3, [r7, #22]
 800bac6:	3302      	adds	r3, #2
 800bac8:	82fb      	strh	r3, [r7, #22]
 800baca:	8afa      	ldrh	r2, [r7, #22]
 800bacc:	8abb      	ldrh	r3, [r7, #20]
 800bace:	429a      	cmp	r2, r3
 800bad0:	d3ef      	bcc.n	800bab2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	2200      	movs	r2, #0
 800bad6:	701a      	strb	r2, [r3, #0]
  }
}
 800bad8:	bf00      	nop
 800bada:	371c      	adds	r7, #28
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b085      	sub	sp, #20
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	881a      	ldrh	r2, [r3, #0]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	4413      	add	r3, r2
 800bafa:	b29a      	uxth	r2, r3
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4413      	add	r3, r2
 800bb0a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3714      	adds	r7, #20
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr

0800bb1a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b086      	sub	sp, #24
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	60f8      	str	r0, [r7, #12]
 800bb22:	60b9      	str	r1, [r7, #8]
 800bb24:	4613      	mov	r3, r2
 800bb26:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	789b      	ldrb	r3, [r3, #2]
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d002      	beq.n	800bb3a <USBH_CtlReq+0x20>
 800bb34:	2b02      	cmp	r3, #2
 800bb36:	d00f      	beq.n	800bb58 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bb38:	e027      	b.n	800bb8a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	68ba      	ldr	r2, [r7, #8]
 800bb3e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	88fa      	ldrh	r2, [r7, #6]
 800bb44:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2201      	movs	r2, #1
 800bb4a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2202      	movs	r2, #2
 800bb50:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bb52:	2301      	movs	r3, #1
 800bb54:	75fb      	strb	r3, [r7, #23]
      break;
 800bb56:	e018      	b.n	800bb8a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800bb58:	68f8      	ldr	r0, [r7, #12]
 800bb5a:	f000 f81b 	bl	800bb94 <USBH_HandleControl>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bb62:	7dfb      	ldrb	r3, [r7, #23]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d002      	beq.n	800bb6e <USBH_CtlReq+0x54>
 800bb68:	7dfb      	ldrb	r3, [r7, #23]
 800bb6a:	2b03      	cmp	r3, #3
 800bb6c:	d106      	bne.n	800bb7c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2201      	movs	r2, #1
 800bb72:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2200      	movs	r2, #0
 800bb78:	761a      	strb	r2, [r3, #24]
      break;
 800bb7a:	e005      	b.n	800bb88 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800bb7c:	7dfb      	ldrb	r3, [r7, #23]
 800bb7e:	2b02      	cmp	r3, #2
 800bb80:	d102      	bne.n	800bb88 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2201      	movs	r2, #1
 800bb86:	709a      	strb	r2, [r3, #2]
      break;
 800bb88:	bf00      	nop
  }
  return status;
 800bb8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3718      	adds	r7, #24
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}

0800bb94 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b086      	sub	sp, #24
 800bb98:	af02      	add	r7, sp, #8
 800bb9a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bba0:	2300      	movs	r3, #0
 800bba2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	7e1b      	ldrb	r3, [r3, #24]
 800bba8:	3b01      	subs	r3, #1
 800bbaa:	2b0a      	cmp	r3, #10
 800bbac:	f200 815f 	bhi.w	800be6e <USBH_HandleControl+0x2da>
 800bbb0:	a201      	add	r2, pc, #4	; (adr r2, 800bbb8 <USBH_HandleControl+0x24>)
 800bbb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb6:	bf00      	nop
 800bbb8:	0800bbe5 	.word	0x0800bbe5
 800bbbc:	0800bbff 	.word	0x0800bbff
 800bbc0:	0800bc69 	.word	0x0800bc69
 800bbc4:	0800bc8f 	.word	0x0800bc8f
 800bbc8:	0800bcc7 	.word	0x0800bcc7
 800bbcc:	0800bcf1 	.word	0x0800bcf1
 800bbd0:	0800bd43 	.word	0x0800bd43
 800bbd4:	0800bd65 	.word	0x0800bd65
 800bbd8:	0800bda1 	.word	0x0800bda1
 800bbdc:	0800bdc7 	.word	0x0800bdc7
 800bbe0:	0800be05 	.word	0x0800be05
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f103 0110 	add.w	r1, r3, #16
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	795b      	ldrb	r3, [r3, #5]
 800bbee:	461a      	mov	r2, r3
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 f951 	bl	800be98 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2202      	movs	r2, #2
 800bbfa:	761a      	strb	r2, [r3, #24]
      break;
 800bbfc:	e142      	b.n	800be84 <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	795b      	ldrb	r3, [r3, #5]
 800bc02:	4619      	mov	r1, r3
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f003 f99d 	bl	800ef44 <USBH_LL_GetURBState>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bc0e:	7bbb      	ldrb	r3, [r7, #14]
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d11e      	bne.n	800bc52 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	7c1b      	ldrb	r3, [r3, #16]
 800bc18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bc1c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	8adb      	ldrh	r3, [r3, #22]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d00a      	beq.n	800bc3c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800bc26:	7b7b      	ldrb	r3, [r7, #13]
 800bc28:	2b80      	cmp	r3, #128	; 0x80
 800bc2a:	d103      	bne.n	800bc34 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2203      	movs	r2, #3
 800bc30:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bc32:	e11e      	b.n	800be72 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2205      	movs	r2, #5
 800bc38:	761a      	strb	r2, [r3, #24]
      break;
 800bc3a:	e11a      	b.n	800be72 <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 800bc3c:	7b7b      	ldrb	r3, [r7, #13]
 800bc3e:	2b80      	cmp	r3, #128	; 0x80
 800bc40:	d103      	bne.n	800bc4a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2209      	movs	r2, #9
 800bc46:	761a      	strb	r2, [r3, #24]
      break;
 800bc48:	e113      	b.n	800be72 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2207      	movs	r2, #7
 800bc4e:	761a      	strb	r2, [r3, #24]
      break;
 800bc50:	e10f      	b.n	800be72 <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bc52:	7bbb      	ldrb	r3, [r7, #14]
 800bc54:	2b04      	cmp	r3, #4
 800bc56:	d003      	beq.n	800bc60 <USBH_HandleControl+0xcc>
 800bc58:	7bbb      	ldrb	r3, [r7, #14]
 800bc5a:	2b02      	cmp	r3, #2
 800bc5c:	f040 8109 	bne.w	800be72 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	220b      	movs	r2, #11
 800bc64:	761a      	strb	r2, [r3, #24]
      break;
 800bc66:	e104      	b.n	800be72 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bc6e:	b29a      	uxth	r2, r3
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6899      	ldr	r1, [r3, #8]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	899a      	ldrh	r2, [r3, #12]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	791b      	ldrb	r3, [r3, #4]
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 f948 	bl	800bf16 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2204      	movs	r2, #4
 800bc8a:	761a      	strb	r2, [r3, #24]
      break;
 800bc8c:	e0fa      	b.n	800be84 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	791b      	ldrb	r3, [r3, #4]
 800bc92:	4619      	mov	r1, r3
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f003 f955 	bl	800ef44 <USBH_LL_GetURBState>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bc9e:	7bbb      	ldrb	r3, [r7, #14]
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d102      	bne.n	800bcaa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2209      	movs	r2, #9
 800bca8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bcaa:	7bbb      	ldrb	r3, [r7, #14]
 800bcac:	2b05      	cmp	r3, #5
 800bcae:	d102      	bne.n	800bcb6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bcb0:	2303      	movs	r3, #3
 800bcb2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bcb4:	e0df      	b.n	800be76 <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800bcb6:	7bbb      	ldrb	r3, [r7, #14]
 800bcb8:	2b04      	cmp	r3, #4
 800bcba:	f040 80dc 	bne.w	800be76 <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	220b      	movs	r2, #11
 800bcc2:	761a      	strb	r2, [r3, #24]
      break;
 800bcc4:	e0d7      	b.n	800be76 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6899      	ldr	r1, [r3, #8]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	899a      	ldrh	r2, [r3, #12]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	795b      	ldrb	r3, [r3, #5]
 800bcd2:	2001      	movs	r0, #1
 800bcd4:	9000      	str	r0, [sp, #0]
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f8f8 	bl	800becc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bce2:	b29a      	uxth	r2, r3
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2206      	movs	r2, #6
 800bcec:	761a      	strb	r2, [r3, #24]
      break;
 800bcee:	e0c9      	b.n	800be84 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	795b      	ldrb	r3, [r3, #5]
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f003 f924 	bl	800ef44 <USBH_LL_GetURBState>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bd00:	7bbb      	ldrb	r3, [r7, #14]
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d103      	bne.n	800bd0e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2207      	movs	r2, #7
 800bd0a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bd0c:	e0b5      	b.n	800be7a <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 800bd0e:	7bbb      	ldrb	r3, [r7, #14]
 800bd10:	2b05      	cmp	r3, #5
 800bd12:	d105      	bne.n	800bd20 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	220c      	movs	r2, #12
 800bd18:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bd1a:	2303      	movs	r3, #3
 800bd1c:	73fb      	strb	r3, [r7, #15]
      break;
 800bd1e:	e0ac      	b.n	800be7a <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bd20:	7bbb      	ldrb	r3, [r7, #14]
 800bd22:	2b02      	cmp	r3, #2
 800bd24:	d103      	bne.n	800bd2e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2205      	movs	r2, #5
 800bd2a:	761a      	strb	r2, [r3, #24]
      break;
 800bd2c:	e0a5      	b.n	800be7a <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 800bd2e:	7bbb      	ldrb	r3, [r7, #14]
 800bd30:	2b04      	cmp	r3, #4
 800bd32:	f040 80a2 	bne.w	800be7a <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	220b      	movs	r2, #11
 800bd3a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bd3c:	2302      	movs	r3, #2
 800bd3e:	73fb      	strb	r3, [r7, #15]
      break;
 800bd40:	e09b      	b.n	800be7a <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	791b      	ldrb	r3, [r3, #4]
 800bd46:	2200      	movs	r2, #0
 800bd48:	2100      	movs	r1, #0
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 f8e3 	bl	800bf16 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bd56:	b29a      	uxth	r2, r3
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2208      	movs	r2, #8
 800bd60:	761a      	strb	r2, [r3, #24]

      break;
 800bd62:	e08f      	b.n	800be84 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	791b      	ldrb	r3, [r3, #4]
 800bd68:	4619      	mov	r1, r3
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f003 f8ea 	bl	800ef44 <USBH_LL_GetURBState>
 800bd70:	4603      	mov	r3, r0
 800bd72:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bd74:	7bbb      	ldrb	r3, [r7, #14]
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d105      	bne.n	800bd86 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	220d      	movs	r2, #13
 800bd7e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bd80:	2300      	movs	r3, #0
 800bd82:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bd84:	e07b      	b.n	800be7e <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 800bd86:	7bbb      	ldrb	r3, [r7, #14]
 800bd88:	2b04      	cmp	r3, #4
 800bd8a:	d103      	bne.n	800bd94 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	220b      	movs	r2, #11
 800bd90:	761a      	strb	r2, [r3, #24]
      break;
 800bd92:	e074      	b.n	800be7e <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 800bd94:	7bbb      	ldrb	r3, [r7, #14]
 800bd96:	2b05      	cmp	r3, #5
 800bd98:	d171      	bne.n	800be7e <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 800bd9a:	2303      	movs	r3, #3
 800bd9c:	73fb      	strb	r3, [r7, #15]
      break;
 800bd9e:	e06e      	b.n	800be7e <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	795b      	ldrb	r3, [r3, #5]
 800bda4:	2201      	movs	r2, #1
 800bda6:	9200      	str	r2, [sp, #0]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	2100      	movs	r1, #0
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 f88d 	bl	800becc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bdb8:	b29a      	uxth	r2, r3
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	220a      	movs	r2, #10
 800bdc2:	761a      	strb	r2, [r3, #24]
      break;
 800bdc4:	e05e      	b.n	800be84 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	795b      	ldrb	r3, [r3, #5]
 800bdca:	4619      	mov	r1, r3
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f003 f8b9 	bl	800ef44 <USBH_LL_GetURBState>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bdd6:	7bbb      	ldrb	r3, [r7, #14]
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	d105      	bne.n	800bde8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bddc:	2300      	movs	r3, #0
 800bdde:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	220d      	movs	r2, #13
 800bde4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bde6:	e04c      	b.n	800be82 <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bde8:	7bbb      	ldrb	r3, [r7, #14]
 800bdea:	2b02      	cmp	r3, #2
 800bdec:	d103      	bne.n	800bdf6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2209      	movs	r2, #9
 800bdf2:	761a      	strb	r2, [r3, #24]
      break;
 800bdf4:	e045      	b.n	800be82 <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800bdf6:	7bbb      	ldrb	r3, [r7, #14]
 800bdf8:	2b04      	cmp	r3, #4
 800bdfa:	d142      	bne.n	800be82 <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	220b      	movs	r2, #11
 800be00:	761a      	strb	r2, [r3, #24]
      break;
 800be02:	e03e      	b.n	800be82 <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	7e5b      	ldrb	r3, [r3, #25]
 800be08:	3301      	adds	r3, #1
 800be0a:	b2da      	uxtb	r2, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	765a      	strb	r2, [r3, #25]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	7e5b      	ldrb	r3, [r3, #25]
 800be14:	2b02      	cmp	r3, #2
 800be16:	d806      	bhi.n	800be26 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2201      	movs	r2, #1
 800be1c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2201      	movs	r2, #1
 800be22:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800be24:	e02e      	b.n	800be84 <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be2c:	2106      	movs	r1, #6
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2200      	movs	r2, #0
 800be36:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800be38:	4815      	ldr	r0, [pc, #84]	; (800be90 <USBH_HandleControl+0x2fc>)
 800be3a:	f003 fa35 	bl	800f2a8 <iprintf>
 800be3e:	4815      	ldr	r0, [pc, #84]	; (800be94 <USBH_HandleControl+0x300>)
 800be40:	f003 fa32 	bl	800f2a8 <iprintf>
 800be44:	200a      	movs	r0, #10
 800be46:	f003 fa47 	bl	800f2d8 <putchar>
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	795b      	ldrb	r3, [r3, #5]
 800be4e:	4619      	mov	r1, r3
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 f911 	bl	800c078 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	791b      	ldrb	r3, [r3, #4]
 800be5a:	4619      	mov	r1, r3
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 f90b 	bl	800c078 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2200      	movs	r2, #0
 800be66:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800be68:	2302      	movs	r3, #2
 800be6a:	73fb      	strb	r3, [r7, #15]
      break;
 800be6c:	e00a      	b.n	800be84 <USBH_HandleControl+0x2f0>

    default:
      break;
 800be6e:	bf00      	nop
 800be70:	e008      	b.n	800be84 <USBH_HandleControl+0x2f0>
      break;
 800be72:	bf00      	nop
 800be74:	e006      	b.n	800be84 <USBH_HandleControl+0x2f0>
      break;
 800be76:	bf00      	nop
 800be78:	e004      	b.n	800be84 <USBH_HandleControl+0x2f0>
      break;
 800be7a:	bf00      	nop
 800be7c:	e002      	b.n	800be84 <USBH_HandleControl+0x2f0>
      break;
 800be7e:	bf00      	nop
 800be80:	e000      	b.n	800be84 <USBH_HandleControl+0x2f0>
      break;
 800be82:	bf00      	nop
  }

  return status;
 800be84:	7bfb      	ldrb	r3, [r7, #15]
}
 800be86:	4618      	mov	r0, r3
 800be88:	3710      	adds	r7, #16
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	08010700 	.word	0x08010700
 800be94:	08010708 	.word	0x08010708

0800be98 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b088      	sub	sp, #32
 800be9c:	af04      	add	r7, sp, #16
 800be9e:	60f8      	str	r0, [r7, #12]
 800bea0:	60b9      	str	r1, [r7, #8]
 800bea2:	4613      	mov	r3, r2
 800bea4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bea6:	79f9      	ldrb	r1, [r7, #7]
 800bea8:	2300      	movs	r3, #0
 800beaa:	9303      	str	r3, [sp, #12]
 800beac:	2308      	movs	r3, #8
 800beae:	9302      	str	r3, [sp, #8]
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	9301      	str	r3, [sp, #4]
 800beb4:	2300      	movs	r3, #0
 800beb6:	9300      	str	r3, [sp, #0]
 800beb8:	2300      	movs	r3, #0
 800beba:	2200      	movs	r2, #0
 800bebc:	68f8      	ldr	r0, [r7, #12]
 800bebe:	f003 f810 	bl	800eee2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800bec2:	2300      	movs	r3, #0
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3710      	adds	r7, #16
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b088      	sub	sp, #32
 800bed0:	af04      	add	r7, sp, #16
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	4611      	mov	r1, r2
 800bed8:	461a      	mov	r2, r3
 800beda:	460b      	mov	r3, r1
 800bedc:	80fb      	strh	r3, [r7, #6]
 800bede:	4613      	mov	r3, r2
 800bee0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d001      	beq.n	800bef0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800beec:	2300      	movs	r3, #0
 800beee:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bef0:	7979      	ldrb	r1, [r7, #5]
 800bef2:	7e3b      	ldrb	r3, [r7, #24]
 800bef4:	9303      	str	r3, [sp, #12]
 800bef6:	88fb      	ldrh	r3, [r7, #6]
 800bef8:	9302      	str	r3, [sp, #8]
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	9301      	str	r3, [sp, #4]
 800befe:	2301      	movs	r3, #1
 800bf00:	9300      	str	r3, [sp, #0]
 800bf02:	2300      	movs	r3, #0
 800bf04:	2200      	movs	r2, #0
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	f002 ffeb 	bl	800eee2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bf0c:	2300      	movs	r3, #0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3710      	adds	r7, #16
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}

0800bf16 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bf16:	b580      	push	{r7, lr}
 800bf18:	b088      	sub	sp, #32
 800bf1a:	af04      	add	r7, sp, #16
 800bf1c:	60f8      	str	r0, [r7, #12]
 800bf1e:	60b9      	str	r1, [r7, #8]
 800bf20:	4611      	mov	r1, r2
 800bf22:	461a      	mov	r2, r3
 800bf24:	460b      	mov	r3, r1
 800bf26:	80fb      	strh	r3, [r7, #6]
 800bf28:	4613      	mov	r3, r2
 800bf2a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bf2c:	7979      	ldrb	r1, [r7, #5]
 800bf2e:	2300      	movs	r3, #0
 800bf30:	9303      	str	r3, [sp, #12]
 800bf32:	88fb      	ldrh	r3, [r7, #6]
 800bf34:	9302      	str	r3, [sp, #8]
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	9301      	str	r3, [sp, #4]
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	9300      	str	r3, [sp, #0]
 800bf3e:	2300      	movs	r3, #0
 800bf40:	2201      	movs	r2, #1
 800bf42:	68f8      	ldr	r0, [r7, #12]
 800bf44:	f002 ffcd 	bl	800eee2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bf48:	2300      	movs	r3, #0

}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3710      	adds	r7, #16
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}

0800bf52 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b088      	sub	sp, #32
 800bf56:	af04      	add	r7, sp, #16
 800bf58:	60f8      	str	r0, [r7, #12]
 800bf5a:	60b9      	str	r1, [r7, #8]
 800bf5c:	4611      	mov	r1, r2
 800bf5e:	461a      	mov	r2, r3
 800bf60:	460b      	mov	r3, r1
 800bf62:	80fb      	strh	r3, [r7, #6]
 800bf64:	4613      	mov	r3, r2
 800bf66:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d001      	beq.n	800bf76 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bf72:	2300      	movs	r3, #0
 800bf74:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bf76:	7979      	ldrb	r1, [r7, #5]
 800bf78:	7e3b      	ldrb	r3, [r7, #24]
 800bf7a:	9303      	str	r3, [sp, #12]
 800bf7c:	88fb      	ldrh	r3, [r7, #6]
 800bf7e:	9302      	str	r3, [sp, #8]
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	9301      	str	r3, [sp, #4]
 800bf84:	2301      	movs	r3, #1
 800bf86:	9300      	str	r3, [sp, #0]
 800bf88:	2302      	movs	r3, #2
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	68f8      	ldr	r0, [r7, #12]
 800bf8e:	f002 ffa8 	bl	800eee2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bf92:	2300      	movs	r3, #0
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3710      	adds	r7, #16
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b088      	sub	sp, #32
 800bfa0:	af04      	add	r7, sp, #16
 800bfa2:	60f8      	str	r0, [r7, #12]
 800bfa4:	60b9      	str	r1, [r7, #8]
 800bfa6:	4611      	mov	r1, r2
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	460b      	mov	r3, r1
 800bfac:	80fb      	strh	r3, [r7, #6]
 800bfae:	4613      	mov	r3, r2
 800bfb0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bfb2:	7979      	ldrb	r1, [r7, #5]
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	9303      	str	r3, [sp, #12]
 800bfb8:	88fb      	ldrh	r3, [r7, #6]
 800bfba:	9302      	str	r3, [sp, #8]
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	9301      	str	r3, [sp, #4]
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	9300      	str	r3, [sp, #0]
 800bfc4:	2302      	movs	r3, #2
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	f002 ff8a 	bl	800eee2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bfce:	2300      	movs	r3, #0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b086      	sub	sp, #24
 800bfdc:	af04      	add	r7, sp, #16
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	4608      	mov	r0, r1
 800bfe2:	4611      	mov	r1, r2
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	70fb      	strb	r3, [r7, #3]
 800bfea:	460b      	mov	r3, r1
 800bfec:	70bb      	strb	r3, [r7, #2]
 800bfee:	4613      	mov	r3, r2
 800bff0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bff2:	7878      	ldrb	r0, [r7, #1]
 800bff4:	78ba      	ldrb	r2, [r7, #2]
 800bff6:	78f9      	ldrb	r1, [r7, #3]
 800bff8:	8b3b      	ldrh	r3, [r7, #24]
 800bffa:	9302      	str	r3, [sp, #8]
 800bffc:	7d3b      	ldrb	r3, [r7, #20]
 800bffe:	9301      	str	r3, [sp, #4]
 800c000:	7c3b      	ldrb	r3, [r7, #16]
 800c002:	9300      	str	r3, [sp, #0]
 800c004:	4603      	mov	r3, r0
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f002 ff1d 	bl	800ee46 <USBH_LL_OpenPipe>

  return USBH_OK;
 800c00c:	2300      	movs	r3, #0
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3708      	adds	r7, #8
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c016:	b580      	push	{r7, lr}
 800c018:	b082      	sub	sp, #8
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
 800c01e:	460b      	mov	r3, r1
 800c020:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800c022:	78fb      	ldrb	r3, [r7, #3]
 800c024:	4619      	mov	r1, r3
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f002 ff3c 	bl	800eea4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c02c:	2300      	movs	r3, #0
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3708      	adds	r7, #8
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}

0800c036 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c036:	b580      	push	{r7, lr}
 800c038:	b084      	sub	sp, #16
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
 800c03e:	460b      	mov	r3, r1
 800c040:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f836 	bl	800c0b4 <USBH_GetFreePipe>
 800c048:	4603      	mov	r3, r0
 800c04a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c04c:	89fb      	ldrh	r3, [r7, #14]
 800c04e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c052:	4293      	cmp	r3, r2
 800c054:	d00a      	beq.n	800c06c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800c056:	78fa      	ldrb	r2, [r7, #3]
 800c058:	89fb      	ldrh	r3, [r7, #14]
 800c05a:	f003 030f 	and.w	r3, r3, #15
 800c05e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c062:	6879      	ldr	r1, [r7, #4]
 800c064:	33e0      	adds	r3, #224	; 0xe0
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	440b      	add	r3, r1
 800c06a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c06c:	89fb      	ldrh	r3, [r7, #14]
 800c06e:	b2db      	uxtb	r3, r3
}
 800c070:	4618      	mov	r0, r3
 800c072:	3710      	adds	r7, #16
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c084:	78fb      	ldrb	r3, [r7, #3]
 800c086:	2b0a      	cmp	r3, #10
 800c088:	d80d      	bhi.n	800c0a6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c08a:	78fb      	ldrb	r3, [r7, #3]
 800c08c:	687a      	ldr	r2, [r7, #4]
 800c08e:	33e0      	adds	r3, #224	; 0xe0
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	4413      	add	r3, r2
 800c094:	685a      	ldr	r2, [r3, #4]
 800c096:	78fb      	ldrb	r3, [r7, #3]
 800c098:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c09c:	6879      	ldr	r1, [r7, #4]
 800c09e:	33e0      	adds	r3, #224	; 0xe0
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	440b      	add	r3, r1
 800c0a4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c0a6:	2300      	movs	r3, #0
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	370c      	adds	r7, #12
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	73fb      	strb	r3, [r7, #15]
 800c0c4:	e00f      	b.n	800c0e6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c0c6:	7bfb      	ldrb	r3, [r7, #15]
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	33e0      	adds	r3, #224	; 0xe0
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	4413      	add	r3, r2
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d102      	bne.n	800c0e0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c0da:	7bfb      	ldrb	r3, [r7, #15]
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	e007      	b.n	800c0f0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800c0e0:	7bfb      	ldrb	r3, [r7, #15]
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	73fb      	strb	r3, [r7, #15]
 800c0e6:	7bfb      	ldrb	r3, [r7, #15]
 800c0e8:	2b0a      	cmp	r3, #10
 800c0ea:	d9ec      	bls.n	800c0c6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c0ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3714      	adds	r7, #20
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	4603      	mov	r3, r0
 800c104:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c106:	79fb      	ldrb	r3, [r7, #7]
 800c108:	4a08      	ldr	r2, [pc, #32]	; (800c12c <disk_status+0x30>)
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	4413      	add	r3, r2
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	79fa      	ldrb	r2, [r7, #7]
 800c114:	4905      	ldr	r1, [pc, #20]	; (800c12c <disk_status+0x30>)
 800c116:	440a      	add	r2, r1
 800c118:	7a12      	ldrb	r2, [r2, #8]
 800c11a:	4610      	mov	r0, r2
 800c11c:	4798      	blx	r3
 800c11e:	4603      	mov	r3, r0
 800c120:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c122:	7bfb      	ldrb	r3, [r7, #15]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3710      	adds	r7, #16
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	20003130 	.word	0x20003130

0800c130 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b084      	sub	sp, #16
 800c134:	af00      	add	r7, sp, #0
 800c136:	4603      	mov	r3, r0
 800c138:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c13a:	2300      	movs	r3, #0
 800c13c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c13e:	79fb      	ldrb	r3, [r7, #7]
 800c140:	4a0d      	ldr	r2, [pc, #52]	; (800c178 <disk_initialize+0x48>)
 800c142:	5cd3      	ldrb	r3, [r2, r3]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d111      	bne.n	800c16c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c148:	79fb      	ldrb	r3, [r7, #7]
 800c14a:	4a0b      	ldr	r2, [pc, #44]	; (800c178 <disk_initialize+0x48>)
 800c14c:	2101      	movs	r1, #1
 800c14e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c150:	79fb      	ldrb	r3, [r7, #7]
 800c152:	4a09      	ldr	r2, [pc, #36]	; (800c178 <disk_initialize+0x48>)
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	4413      	add	r3, r2
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	79fa      	ldrb	r2, [r7, #7]
 800c15e:	4906      	ldr	r1, [pc, #24]	; (800c178 <disk_initialize+0x48>)
 800c160:	440a      	add	r2, r1
 800c162:	7a12      	ldrb	r2, [r2, #8]
 800c164:	4610      	mov	r0, r2
 800c166:	4798      	blx	r3
 800c168:	4603      	mov	r3, r0
 800c16a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3710      	adds	r7, #16
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	20003130 	.word	0x20003130

0800c17c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c17c:	b590      	push	{r4, r7, lr}
 800c17e:	b087      	sub	sp, #28
 800c180:	af00      	add	r7, sp, #0
 800c182:	60b9      	str	r1, [r7, #8]
 800c184:	607a      	str	r2, [r7, #4]
 800c186:	603b      	str	r3, [r7, #0]
 800c188:	4603      	mov	r3, r0
 800c18a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c18c:	7bfb      	ldrb	r3, [r7, #15]
 800c18e:	4a0a      	ldr	r2, [pc, #40]	; (800c1b8 <disk_read+0x3c>)
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	4413      	add	r3, r2
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	689c      	ldr	r4, [r3, #8]
 800c198:	7bfb      	ldrb	r3, [r7, #15]
 800c19a:	4a07      	ldr	r2, [pc, #28]	; (800c1b8 <disk_read+0x3c>)
 800c19c:	4413      	add	r3, r2
 800c19e:	7a18      	ldrb	r0, [r3, #8]
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	68b9      	ldr	r1, [r7, #8]
 800c1a6:	47a0      	blx	r4
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	75fb      	strb	r3, [r7, #23]
  return res;
 800c1ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	371c      	adds	r7, #28
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd90      	pop	{r4, r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	20003130 	.word	0x20003130

0800c1bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c1bc:	b590      	push	{r4, r7, lr}
 800c1be:	b087      	sub	sp, #28
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60b9      	str	r1, [r7, #8]
 800c1c4:	607a      	str	r2, [r7, #4]
 800c1c6:	603b      	str	r3, [r7, #0]
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c1cc:	7bfb      	ldrb	r3, [r7, #15]
 800c1ce:	4a0a      	ldr	r2, [pc, #40]	; (800c1f8 <disk_write+0x3c>)
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	4413      	add	r3, r2
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	68dc      	ldr	r4, [r3, #12]
 800c1d8:	7bfb      	ldrb	r3, [r7, #15]
 800c1da:	4a07      	ldr	r2, [pc, #28]	; (800c1f8 <disk_write+0x3c>)
 800c1dc:	4413      	add	r3, r2
 800c1de:	7a18      	ldrb	r0, [r3, #8]
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	68b9      	ldr	r1, [r7, #8]
 800c1e6:	47a0      	blx	r4
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	75fb      	strb	r3, [r7, #23]
  return res;
 800c1ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	371c      	adds	r7, #28
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd90      	pop	{r4, r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	20003130 	.word	0x20003130

0800c1fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b084      	sub	sp, #16
 800c200:	af00      	add	r7, sp, #0
 800c202:	4603      	mov	r3, r0
 800c204:	603a      	str	r2, [r7, #0]
 800c206:	71fb      	strb	r3, [r7, #7]
 800c208:	460b      	mov	r3, r1
 800c20a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c20c:	79fb      	ldrb	r3, [r7, #7]
 800c20e:	4a09      	ldr	r2, [pc, #36]	; (800c234 <disk_ioctl+0x38>)
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	4413      	add	r3, r2
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	691b      	ldr	r3, [r3, #16]
 800c218:	79fa      	ldrb	r2, [r7, #7]
 800c21a:	4906      	ldr	r1, [pc, #24]	; (800c234 <disk_ioctl+0x38>)
 800c21c:	440a      	add	r2, r1
 800c21e:	7a10      	ldrb	r0, [r2, #8]
 800c220:	79b9      	ldrb	r1, [r7, #6]
 800c222:	683a      	ldr	r2, [r7, #0]
 800c224:	4798      	blx	r3
 800c226:	4603      	mov	r3, r0
 800c228:	73fb      	strb	r3, [r7, #15]
  return res;
 800c22a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3710      	adds	r7, #16
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	20003130 	.word	0x20003130

0800c238 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c238:	b480      	push	{r7}
 800c23a:	b085      	sub	sp, #20
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	3301      	adds	r3, #1
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c248:	89fb      	ldrh	r3, [r7, #14]
 800c24a:	021b      	lsls	r3, r3, #8
 800c24c:	b21a      	sxth	r2, r3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	b21b      	sxth	r3, r3
 800c254:	4313      	orrs	r3, r2
 800c256:	b21b      	sxth	r3, r3
 800c258:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c25a:	89fb      	ldrh	r3, [r7, #14]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3714      	adds	r7, #20
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr

0800c268 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c268:	b480      	push	{r7}
 800c26a:	b085      	sub	sp, #20
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	3303      	adds	r3, #3
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	021b      	lsls	r3, r3, #8
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	3202      	adds	r2, #2
 800c280:	7812      	ldrb	r2, [r2, #0]
 800c282:	4313      	orrs	r3, r2
 800c284:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	021b      	lsls	r3, r3, #8
 800c28a:	687a      	ldr	r2, [r7, #4]
 800c28c:	3201      	adds	r2, #1
 800c28e:	7812      	ldrb	r2, [r2, #0]
 800c290:	4313      	orrs	r3, r2
 800c292:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	021b      	lsls	r3, r3, #8
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	7812      	ldrb	r2, [r2, #0]
 800c29c:	4313      	orrs	r3, r2
 800c29e:	60fb      	str	r3, [r7, #12]
	return rv;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3714      	adds	r7, #20
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr

0800c2ae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c2ae:	b480      	push	{r7}
 800c2b0:	b083      	sub	sp, #12
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
 800c2b6:	460b      	mov	r3, r1
 800c2b8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	1c5a      	adds	r2, r3, #1
 800c2be:	607a      	str	r2, [r7, #4]
 800c2c0:	887a      	ldrh	r2, [r7, #2]
 800c2c2:	b2d2      	uxtb	r2, r2
 800c2c4:	701a      	strb	r2, [r3, #0]
 800c2c6:	887b      	ldrh	r3, [r7, #2]
 800c2c8:	0a1b      	lsrs	r3, r3, #8
 800c2ca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	1c5a      	adds	r2, r3, #1
 800c2d0:	607a      	str	r2, [r7, #4]
 800c2d2:	887a      	ldrh	r2, [r7, #2]
 800c2d4:	b2d2      	uxtb	r2, r2
 800c2d6:	701a      	strb	r2, [r3, #0]
}
 800c2d8:	bf00      	nop
 800c2da:	370c      	adds	r7, #12
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b083      	sub	sp, #12
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	1c5a      	adds	r2, r3, #1
 800c2f2:	607a      	str	r2, [r7, #4]
 800c2f4:	683a      	ldr	r2, [r7, #0]
 800c2f6:	b2d2      	uxtb	r2, r2
 800c2f8:	701a      	strb	r2, [r3, #0]
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	0a1b      	lsrs	r3, r3, #8
 800c2fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	1c5a      	adds	r2, r3, #1
 800c304:	607a      	str	r2, [r7, #4]
 800c306:	683a      	ldr	r2, [r7, #0]
 800c308:	b2d2      	uxtb	r2, r2
 800c30a:	701a      	strb	r2, [r3, #0]
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	0a1b      	lsrs	r3, r3, #8
 800c310:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	1c5a      	adds	r2, r3, #1
 800c316:	607a      	str	r2, [r7, #4]
 800c318:	683a      	ldr	r2, [r7, #0]
 800c31a:	b2d2      	uxtb	r2, r2
 800c31c:	701a      	strb	r2, [r3, #0]
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	0a1b      	lsrs	r3, r3, #8
 800c322:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	1c5a      	adds	r2, r3, #1
 800c328:	607a      	str	r2, [r7, #4]
 800c32a:	683a      	ldr	r2, [r7, #0]
 800c32c:	b2d2      	uxtb	r2, r2
 800c32e:	701a      	strb	r2, [r3, #0]
}
 800c330:	bf00      	nop
 800c332:	370c      	adds	r7, #12
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr

0800c33c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c33c:	b480      	push	{r7}
 800c33e:	b087      	sub	sp, #28
 800c340:	af00      	add	r7, sp, #0
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d00d      	beq.n	800c372 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c356:	693a      	ldr	r2, [r7, #16]
 800c358:	1c53      	adds	r3, r2, #1
 800c35a:	613b      	str	r3, [r7, #16]
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	1c59      	adds	r1, r3, #1
 800c360:	6179      	str	r1, [r7, #20]
 800c362:	7812      	ldrb	r2, [r2, #0]
 800c364:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	3b01      	subs	r3, #1
 800c36a:	607b      	str	r3, [r7, #4]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d1f1      	bne.n	800c356 <mem_cpy+0x1a>
	}
}
 800c372:	bf00      	nop
 800c374:	371c      	adds	r7, #28
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr

0800c37e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c37e:	b480      	push	{r7}
 800c380:	b087      	sub	sp, #28
 800c382:	af00      	add	r7, sp, #0
 800c384:	60f8      	str	r0, [r7, #12]
 800c386:	60b9      	str	r1, [r7, #8]
 800c388:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	1c5a      	adds	r2, r3, #1
 800c392:	617a      	str	r2, [r7, #20]
 800c394:	68ba      	ldr	r2, [r7, #8]
 800c396:	b2d2      	uxtb	r2, r2
 800c398:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	3b01      	subs	r3, #1
 800c39e:	607b      	str	r3, [r7, #4]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d1f3      	bne.n	800c38e <mem_set+0x10>
}
 800c3a6:	bf00      	nop
 800c3a8:	bf00      	nop
 800c3aa:	371c      	adds	r7, #28
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c3b4:	b480      	push	{r7}
 800c3b6:	b089      	sub	sp, #36	; 0x24
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	61fb      	str	r3, [r7, #28]
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	1c5a      	adds	r2, r3, #1
 800c3d0:	61fa      	str	r2, [r7, #28]
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	1c5a      	adds	r2, r3, #1
 800c3da:	61ba      	str	r2, [r7, #24]
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	1acb      	subs	r3, r1, r3
 800c3e0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	3b01      	subs	r3, #1
 800c3e6:	607b      	str	r3, [r7, #4]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d002      	beq.n	800c3f4 <mem_cmp+0x40>
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d0eb      	beq.n	800c3cc <mem_cmp+0x18>

	return r;
 800c3f4:	697b      	ldr	r3, [r7, #20]
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3724      	adds	r7, #36	; 0x24
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr

0800c402 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c402:	b480      	push	{r7}
 800c404:	b083      	sub	sp, #12
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]
 800c40a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c40c:	e002      	b.n	800c414 <chk_chr+0x12>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	3301      	adds	r3, #1
 800c412:	607b      	str	r3, [r7, #4]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d005      	beq.n	800c428 <chk_chr+0x26>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	461a      	mov	r2, r3
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	4293      	cmp	r3, r2
 800c426:	d1f2      	bne.n	800c40e <chk_chr+0xc>
	return *str;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	781b      	ldrb	r3, [r3, #0]
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	370c      	adds	r7, #12
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr

0800c438 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c438:	b480      	push	{r7}
 800c43a:	b085      	sub	sp, #20
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c442:	2300      	movs	r3, #0
 800c444:	60bb      	str	r3, [r7, #8]
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	60fb      	str	r3, [r7, #12]
 800c44a:	e029      	b.n	800c4a0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c44c:	4a27      	ldr	r2, [pc, #156]	; (800c4ec <chk_lock+0xb4>)
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	011b      	lsls	r3, r3, #4
 800c452:	4413      	add	r3, r2
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d01d      	beq.n	800c496 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c45a:	4a24      	ldr	r2, [pc, #144]	; (800c4ec <chk_lock+0xb4>)
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	011b      	lsls	r3, r3, #4
 800c460:	4413      	add	r3, r2
 800c462:	681a      	ldr	r2, [r3, #0]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d116      	bne.n	800c49a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c46c:	4a1f      	ldr	r2, [pc, #124]	; (800c4ec <chk_lock+0xb4>)
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	011b      	lsls	r3, r3, #4
 800c472:	4413      	add	r3, r2
 800c474:	3304      	adds	r3, #4
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d10c      	bne.n	800c49a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c480:	4a1a      	ldr	r2, [pc, #104]	; (800c4ec <chk_lock+0xb4>)
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	011b      	lsls	r3, r3, #4
 800c486:	4413      	add	r3, r2
 800c488:	3308      	adds	r3, #8
 800c48a:	681a      	ldr	r2, [r3, #0]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c490:	429a      	cmp	r2, r3
 800c492:	d102      	bne.n	800c49a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c494:	e007      	b.n	800c4a6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c496:	2301      	movs	r3, #1
 800c498:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	3301      	adds	r3, #1
 800c49e:	60fb      	str	r3, [r7, #12]
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d9d2      	bls.n	800c44c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2b02      	cmp	r3, #2
 800c4aa:	d109      	bne.n	800c4c0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d102      	bne.n	800c4b8 <chk_lock+0x80>
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	2b02      	cmp	r3, #2
 800c4b6:	d101      	bne.n	800c4bc <chk_lock+0x84>
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	e010      	b.n	800c4de <chk_lock+0xa6>
 800c4bc:	2312      	movs	r3, #18
 800c4be:	e00e      	b.n	800c4de <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d108      	bne.n	800c4d8 <chk_lock+0xa0>
 800c4c6:	4a09      	ldr	r2, [pc, #36]	; (800c4ec <chk_lock+0xb4>)
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	011b      	lsls	r3, r3, #4
 800c4cc:	4413      	add	r3, r2
 800c4ce:	330c      	adds	r3, #12
 800c4d0:	881b      	ldrh	r3, [r3, #0]
 800c4d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4d6:	d101      	bne.n	800c4dc <chk_lock+0xa4>
 800c4d8:	2310      	movs	r3, #16
 800c4da:	e000      	b.n	800c4de <chk_lock+0xa6>
 800c4dc:	2300      	movs	r3, #0
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3714      	adds	r7, #20
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr
 800c4ea:	bf00      	nop
 800c4ec:	20003110 	.word	0x20003110

0800c4f0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	607b      	str	r3, [r7, #4]
 800c4fa:	e002      	b.n	800c502 <enq_lock+0x12>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	3301      	adds	r3, #1
 800c500:	607b      	str	r3, [r7, #4]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2b01      	cmp	r3, #1
 800c506:	d806      	bhi.n	800c516 <enq_lock+0x26>
 800c508:	4a09      	ldr	r2, [pc, #36]	; (800c530 <enq_lock+0x40>)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	011b      	lsls	r3, r3, #4
 800c50e:	4413      	add	r3, r2
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d1f2      	bne.n	800c4fc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2b02      	cmp	r3, #2
 800c51a:	bf14      	ite	ne
 800c51c:	2301      	movne	r3, #1
 800c51e:	2300      	moveq	r3, #0
 800c520:	b2db      	uxtb	r3, r3
}
 800c522:	4618      	mov	r0, r3
 800c524:	370c      	adds	r7, #12
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr
 800c52e:	bf00      	nop
 800c530:	20003110 	.word	0x20003110

0800c534 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c534:	b480      	push	{r7}
 800c536:	b085      	sub	sp, #20
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c53e:	2300      	movs	r3, #0
 800c540:	60fb      	str	r3, [r7, #12]
 800c542:	e01f      	b.n	800c584 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c544:	4a41      	ldr	r2, [pc, #260]	; (800c64c <inc_lock+0x118>)
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	011b      	lsls	r3, r3, #4
 800c54a:	4413      	add	r3, r2
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	429a      	cmp	r2, r3
 800c554:	d113      	bne.n	800c57e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c556:	4a3d      	ldr	r2, [pc, #244]	; (800c64c <inc_lock+0x118>)
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	011b      	lsls	r3, r3, #4
 800c55c:	4413      	add	r3, r2
 800c55e:	3304      	adds	r3, #4
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c566:	429a      	cmp	r2, r3
 800c568:	d109      	bne.n	800c57e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c56a:	4a38      	ldr	r2, [pc, #224]	; (800c64c <inc_lock+0x118>)
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	011b      	lsls	r3, r3, #4
 800c570:	4413      	add	r3, r2
 800c572:	3308      	adds	r3, #8
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d006      	beq.n	800c58c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	3301      	adds	r3, #1
 800c582:	60fb      	str	r3, [r7, #12]
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2b01      	cmp	r3, #1
 800c588:	d9dc      	bls.n	800c544 <inc_lock+0x10>
 800c58a:	e000      	b.n	800c58e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c58c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2b02      	cmp	r3, #2
 800c592:	d132      	bne.n	800c5fa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c594:	2300      	movs	r3, #0
 800c596:	60fb      	str	r3, [r7, #12]
 800c598:	e002      	b.n	800c5a0 <inc_lock+0x6c>
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	3301      	adds	r3, #1
 800c59e:	60fb      	str	r3, [r7, #12]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d806      	bhi.n	800c5b4 <inc_lock+0x80>
 800c5a6:	4a29      	ldr	r2, [pc, #164]	; (800c64c <inc_lock+0x118>)
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	011b      	lsls	r3, r3, #4
 800c5ac:	4413      	add	r3, r2
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d1f2      	bne.n	800c59a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2b02      	cmp	r3, #2
 800c5b8:	d101      	bne.n	800c5be <inc_lock+0x8a>
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	e040      	b.n	800c640 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	4922      	ldr	r1, [pc, #136]	; (800c64c <inc_lock+0x118>)
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	011b      	lsls	r3, r3, #4
 800c5c8:	440b      	add	r3, r1
 800c5ca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	689a      	ldr	r2, [r3, #8]
 800c5d0:	491e      	ldr	r1, [pc, #120]	; (800c64c <inc_lock+0x118>)
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	011b      	lsls	r3, r3, #4
 800c5d6:	440b      	add	r3, r1
 800c5d8:	3304      	adds	r3, #4
 800c5da:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	695a      	ldr	r2, [r3, #20]
 800c5e0:	491a      	ldr	r1, [pc, #104]	; (800c64c <inc_lock+0x118>)
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	011b      	lsls	r3, r3, #4
 800c5e6:	440b      	add	r3, r1
 800c5e8:	3308      	adds	r3, #8
 800c5ea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c5ec:	4a17      	ldr	r2, [pc, #92]	; (800c64c <inc_lock+0x118>)
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	011b      	lsls	r3, r3, #4
 800c5f2:	4413      	add	r3, r2
 800c5f4:	330c      	adds	r3, #12
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d009      	beq.n	800c614 <inc_lock+0xe0>
 800c600:	4a12      	ldr	r2, [pc, #72]	; (800c64c <inc_lock+0x118>)
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	011b      	lsls	r3, r3, #4
 800c606:	4413      	add	r3, r2
 800c608:	330c      	adds	r3, #12
 800c60a:	881b      	ldrh	r3, [r3, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d001      	beq.n	800c614 <inc_lock+0xe0>
 800c610:	2300      	movs	r3, #0
 800c612:	e015      	b.n	800c640 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d108      	bne.n	800c62c <inc_lock+0xf8>
 800c61a:	4a0c      	ldr	r2, [pc, #48]	; (800c64c <inc_lock+0x118>)
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	011b      	lsls	r3, r3, #4
 800c620:	4413      	add	r3, r2
 800c622:	330c      	adds	r3, #12
 800c624:	881b      	ldrh	r3, [r3, #0]
 800c626:	3301      	adds	r3, #1
 800c628:	b29a      	uxth	r2, r3
 800c62a:	e001      	b.n	800c630 <inc_lock+0xfc>
 800c62c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c630:	4906      	ldr	r1, [pc, #24]	; (800c64c <inc_lock+0x118>)
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	011b      	lsls	r3, r3, #4
 800c636:	440b      	add	r3, r1
 800c638:	330c      	adds	r3, #12
 800c63a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	3301      	adds	r3, #1
}
 800c640:	4618      	mov	r0, r3
 800c642:	3714      	adds	r7, #20
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr
 800c64c:	20003110 	.word	0x20003110

0800c650 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c650:	b480      	push	{r7}
 800c652:	b085      	sub	sp, #20
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	3b01      	subs	r3, #1
 800c65c:	607b      	str	r3, [r7, #4]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2b01      	cmp	r3, #1
 800c662:	d825      	bhi.n	800c6b0 <dec_lock+0x60>
		n = Files[i].ctr;
 800c664:	4a17      	ldr	r2, [pc, #92]	; (800c6c4 <dec_lock+0x74>)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	011b      	lsls	r3, r3, #4
 800c66a:	4413      	add	r3, r2
 800c66c:	330c      	adds	r3, #12
 800c66e:	881b      	ldrh	r3, [r3, #0]
 800c670:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c672:	89fb      	ldrh	r3, [r7, #14]
 800c674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c678:	d101      	bne.n	800c67e <dec_lock+0x2e>
 800c67a:	2300      	movs	r3, #0
 800c67c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c67e:	89fb      	ldrh	r3, [r7, #14]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d002      	beq.n	800c68a <dec_lock+0x3a>
 800c684:	89fb      	ldrh	r3, [r7, #14]
 800c686:	3b01      	subs	r3, #1
 800c688:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c68a:	4a0e      	ldr	r2, [pc, #56]	; (800c6c4 <dec_lock+0x74>)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	011b      	lsls	r3, r3, #4
 800c690:	4413      	add	r3, r2
 800c692:	330c      	adds	r3, #12
 800c694:	89fa      	ldrh	r2, [r7, #14]
 800c696:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c698:	89fb      	ldrh	r3, [r7, #14]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d105      	bne.n	800c6aa <dec_lock+0x5a>
 800c69e:	4a09      	ldr	r2, [pc, #36]	; (800c6c4 <dec_lock+0x74>)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	011b      	lsls	r3, r3, #4
 800c6a4:	4413      	add	r3, r2
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	737b      	strb	r3, [r7, #13]
 800c6ae:	e001      	b.n	800c6b4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c6b0:	2302      	movs	r3, #2
 800c6b2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c6b4:	7b7b      	ldrb	r3, [r7, #13]
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3714      	adds	r7, #20
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr
 800c6c2:	bf00      	nop
 800c6c4:	20003110 	.word	0x20003110

0800c6c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b085      	sub	sp, #20
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	60fb      	str	r3, [r7, #12]
 800c6d4:	e010      	b.n	800c6f8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c6d6:	4a0d      	ldr	r2, [pc, #52]	; (800c70c <clear_lock+0x44>)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	011b      	lsls	r3, r3, #4
 800c6dc:	4413      	add	r3, r2
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d105      	bne.n	800c6f2 <clear_lock+0x2a>
 800c6e6:	4a09      	ldr	r2, [pc, #36]	; (800c70c <clear_lock+0x44>)
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	011b      	lsls	r3, r3, #4
 800c6ec:	4413      	add	r3, r2
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	60fb      	str	r3, [r7, #12]
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2b01      	cmp	r3, #1
 800c6fc:	d9eb      	bls.n	800c6d6 <clear_lock+0xe>
	}
}
 800c6fe:	bf00      	nop
 800c700:	bf00      	nop
 800c702:	3714      	adds	r7, #20
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr
 800c70c:	20003110 	.word	0x20003110

0800c710 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b086      	sub	sp, #24
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c718:	2300      	movs	r3, #0
 800c71a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	78db      	ldrb	r3, [r3, #3]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d034      	beq.n	800c78e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c728:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	7858      	ldrb	r0, [r3, #1]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c734:	2301      	movs	r3, #1
 800c736:	697a      	ldr	r2, [r7, #20]
 800c738:	f7ff fd40 	bl	800c1bc <disk_write>
 800c73c:	4603      	mov	r3, r0
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d002      	beq.n	800c748 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c742:	2301      	movs	r3, #1
 800c744:	73fb      	strb	r3, [r7, #15]
 800c746:	e022      	b.n	800c78e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c752:	697a      	ldr	r2, [r7, #20]
 800c754:	1ad2      	subs	r2, r2, r3
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	69db      	ldr	r3, [r3, #28]
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d217      	bcs.n	800c78e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	789b      	ldrb	r3, [r3, #2]
 800c762:	613b      	str	r3, [r7, #16]
 800c764:	e010      	b.n	800c788 <sync_window+0x78>
					wsect += fs->fsize;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	69db      	ldr	r3, [r3, #28]
 800c76a:	697a      	ldr	r2, [r7, #20]
 800c76c:	4413      	add	r3, r2
 800c76e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	7858      	ldrb	r0, [r3, #1]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c77a:	2301      	movs	r3, #1
 800c77c:	697a      	ldr	r2, [r7, #20]
 800c77e:	f7ff fd1d 	bl	800c1bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	3b01      	subs	r3, #1
 800c786:	613b      	str	r3, [r7, #16]
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d8eb      	bhi.n	800c766 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c78e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c790:	4618      	mov	r0, r3
 800c792:	3718      	adds	r7, #24
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7aa:	683a      	ldr	r2, [r7, #0]
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d01b      	beq.n	800c7e8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f7ff ffad 	bl	800c710 <sync_window>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c7ba:	7bfb      	ldrb	r3, [r7, #15]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d113      	bne.n	800c7e8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	7858      	ldrb	r0, [r3, #1]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	683a      	ldr	r2, [r7, #0]
 800c7ce:	f7ff fcd5 	bl	800c17c <disk_read>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d004      	beq.n	800c7e2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c7d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c7dc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c7de:	2301      	movs	r3, #1
 800c7e0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	683a      	ldr	r2, [r7, #0]
 800c7e6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3710      	adds	r7, #16
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}
	...

0800c7f4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f7ff ff87 	bl	800c710 <sync_window>
 800c802:	4603      	mov	r3, r0
 800c804:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c806:	7bfb      	ldrb	r3, [r7, #15]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d159      	bne.n	800c8c0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	2b03      	cmp	r3, #3
 800c812:	d149      	bne.n	800c8a8 <sync_fs+0xb4>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	791b      	ldrb	r3, [r3, #4]
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d145      	bne.n	800c8a8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	899b      	ldrh	r3, [r3, #12]
 800c826:	461a      	mov	r2, r3
 800c828:	2100      	movs	r1, #0
 800c82a:	f7ff fda8 	bl	800c37e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	3334      	adds	r3, #52	; 0x34
 800c832:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c836:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7ff fd37 	bl	800c2ae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	3334      	adds	r3, #52	; 0x34
 800c844:	4921      	ldr	r1, [pc, #132]	; (800c8cc <sync_fs+0xd8>)
 800c846:	4618      	mov	r0, r3
 800c848:	f7ff fd4c 	bl	800c2e4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	3334      	adds	r3, #52	; 0x34
 800c850:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c854:	491e      	ldr	r1, [pc, #120]	; (800c8d0 <sync_fs+0xdc>)
 800c856:	4618      	mov	r0, r3
 800c858:	f7ff fd44 	bl	800c2e4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	3334      	adds	r3, #52	; 0x34
 800c860:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	695b      	ldr	r3, [r3, #20]
 800c868:	4619      	mov	r1, r3
 800c86a:	4610      	mov	r0, r2
 800c86c:	f7ff fd3a 	bl	800c2e4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	3334      	adds	r3, #52	; 0x34
 800c874:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	691b      	ldr	r3, [r3, #16]
 800c87c:	4619      	mov	r1, r3
 800c87e:	4610      	mov	r0, r2
 800c880:	f7ff fd30 	bl	800c2e4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6a1b      	ldr	r3, [r3, #32]
 800c888:	1c5a      	adds	r2, r3, #1
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	7858      	ldrb	r0, [r3, #1]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c89c:	2301      	movs	r3, #1
 800c89e:	f7ff fc8d 	bl	800c1bc <disk_write>
			fs->fsi_flag = 0;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	785b      	ldrb	r3, [r3, #1]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	2100      	movs	r1, #0
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7ff fca3 	bl	800c1fc <disk_ioctl>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d001      	beq.n	800c8c0 <sync_fs+0xcc>
 800c8bc:	2301      	movs	r3, #1
 800c8be:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3710      	adds	r7, #16
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	41615252 	.word	0x41615252
 800c8d0:	61417272 	.word	0x61417272

0800c8d4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b083      	sub	sp, #12
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	3b02      	subs	r3, #2
 800c8e2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	699b      	ldr	r3, [r3, #24]
 800c8e8:	3b02      	subs	r3, #2
 800c8ea:	683a      	ldr	r2, [r7, #0]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d301      	bcc.n	800c8f4 <clust2sect+0x20>
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	e008      	b.n	800c906 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	895b      	ldrh	r3, [r3, #10]
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	fb03 f202 	mul.w	r2, r3, r2
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c904:	4413      	add	r3, r2
}
 800c906:	4618      	mov	r0, r3
 800c908:	370c      	adds	r7, #12
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr

0800c912 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c912:	b580      	push	{r7, lr}
 800c914:	b086      	sub	sp, #24
 800c916:	af00      	add	r7, sp, #0
 800c918:	6078      	str	r0, [r7, #4]
 800c91a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	2b01      	cmp	r3, #1
 800c926:	d904      	bls.n	800c932 <get_fat+0x20>
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	699b      	ldr	r3, [r3, #24]
 800c92c:	683a      	ldr	r2, [r7, #0]
 800c92e:	429a      	cmp	r2, r3
 800c930:	d302      	bcc.n	800c938 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c932:	2301      	movs	r3, #1
 800c934:	617b      	str	r3, [r7, #20]
 800c936:	e0bb      	b.n	800cab0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c938:	f04f 33ff 	mov.w	r3, #4294967295
 800c93c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	2b03      	cmp	r3, #3
 800c944:	f000 8083 	beq.w	800ca4e <get_fat+0x13c>
 800c948:	2b03      	cmp	r3, #3
 800c94a:	f300 80a7 	bgt.w	800ca9c <get_fat+0x18a>
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d002      	beq.n	800c958 <get_fat+0x46>
 800c952:	2b02      	cmp	r3, #2
 800c954:	d056      	beq.n	800ca04 <get_fat+0xf2>
 800c956:	e0a1      	b.n	800ca9c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	60fb      	str	r3, [r7, #12]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	085b      	lsrs	r3, r3, #1
 800c960:	68fa      	ldr	r2, [r7, #12]
 800c962:	4413      	add	r3, r2
 800c964:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	899b      	ldrh	r3, [r3, #12]
 800c96e:	4619      	mov	r1, r3
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	fbb3 f3f1 	udiv	r3, r3, r1
 800c976:	4413      	add	r3, r2
 800c978:	4619      	mov	r1, r3
 800c97a:	6938      	ldr	r0, [r7, #16]
 800c97c:	f7ff ff0c 	bl	800c798 <move_window>
 800c980:	4603      	mov	r3, r0
 800c982:	2b00      	cmp	r3, #0
 800c984:	f040 808d 	bne.w	800caa2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	1c5a      	adds	r2, r3, #1
 800c98c:	60fa      	str	r2, [r7, #12]
 800c98e:	693a      	ldr	r2, [r7, #16]
 800c990:	8992      	ldrh	r2, [r2, #12]
 800c992:	fbb3 f1f2 	udiv	r1, r3, r2
 800c996:	fb02 f201 	mul.w	r2, r2, r1
 800c99a:	1a9b      	subs	r3, r3, r2
 800c99c:	693a      	ldr	r2, [r7, #16]
 800c99e:	4413      	add	r3, r2
 800c9a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c9a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	899b      	ldrh	r3, [r3, #12]
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	fbb3 f3f1 	udiv	r3, r3, r1
 800c9b6:	4413      	add	r3, r2
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	6938      	ldr	r0, [r7, #16]
 800c9bc:	f7ff feec 	bl	800c798 <move_window>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d16f      	bne.n	800caa6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	899b      	ldrh	r3, [r3, #12]
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800c9d2:	fb02 f201 	mul.w	r2, r2, r1
 800c9d6:	1a9b      	subs	r3, r3, r2
 800c9d8:	693a      	ldr	r2, [r7, #16]
 800c9da:	4413      	add	r3, r2
 800c9dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c9e0:	021b      	lsls	r3, r3, #8
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	f003 0301 	and.w	r3, r3, #1
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d002      	beq.n	800c9fa <get_fat+0xe8>
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	091b      	lsrs	r3, r3, #4
 800c9f8:	e002      	b.n	800ca00 <get_fat+0xee>
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca00:	617b      	str	r3, [r7, #20]
			break;
 800ca02:	e055      	b.n	800cab0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	899b      	ldrh	r3, [r3, #12]
 800ca0c:	085b      	lsrs	r3, r3, #1
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	4619      	mov	r1, r3
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	fbb3 f3f1 	udiv	r3, r3, r1
 800ca18:	4413      	add	r3, r2
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	6938      	ldr	r0, [r7, #16]
 800ca1e:	f7ff febb 	bl	800c798 <move_window>
 800ca22:	4603      	mov	r3, r0
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d140      	bne.n	800caaa <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	005b      	lsls	r3, r3, #1
 800ca32:	693a      	ldr	r2, [r7, #16]
 800ca34:	8992      	ldrh	r2, [r2, #12]
 800ca36:	fbb3 f0f2 	udiv	r0, r3, r2
 800ca3a:	fb02 f200 	mul.w	r2, r2, r0
 800ca3e:	1a9b      	subs	r3, r3, r2
 800ca40:	440b      	add	r3, r1
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7ff fbf8 	bl	800c238 <ld_word>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	617b      	str	r3, [r7, #20]
			break;
 800ca4c:	e030      	b.n	800cab0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	899b      	ldrh	r3, [r3, #12]
 800ca56:	089b      	lsrs	r3, r3, #2
 800ca58:	b29b      	uxth	r3, r3
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ca62:	4413      	add	r3, r2
 800ca64:	4619      	mov	r1, r3
 800ca66:	6938      	ldr	r0, [r7, #16]
 800ca68:	f7ff fe96 	bl	800c798 <move_window>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d11d      	bne.n	800caae <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	693a      	ldr	r2, [r7, #16]
 800ca7e:	8992      	ldrh	r2, [r2, #12]
 800ca80:	fbb3 f0f2 	udiv	r0, r3, r2
 800ca84:	fb02 f200 	mul.w	r2, r2, r0
 800ca88:	1a9b      	subs	r3, r3, r2
 800ca8a:	440b      	add	r3, r1
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7ff fbeb 	bl	800c268 <ld_dword>
 800ca92:	4603      	mov	r3, r0
 800ca94:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ca98:	617b      	str	r3, [r7, #20]
			break;
 800ca9a:	e009      	b.n	800cab0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	617b      	str	r3, [r7, #20]
 800caa0:	e006      	b.n	800cab0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800caa2:	bf00      	nop
 800caa4:	e004      	b.n	800cab0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800caa6:	bf00      	nop
 800caa8:	e002      	b.n	800cab0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800caaa:	bf00      	nop
 800caac:	e000      	b.n	800cab0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800caae:	bf00      	nop
		}
	}

	return val;
 800cab0:	697b      	ldr	r3, [r7, #20]
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3718      	adds	r7, #24
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800caba:	b590      	push	{r4, r7, lr}
 800cabc:	b089      	sub	sp, #36	; 0x24
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	60f8      	str	r0, [r7, #12]
 800cac2:	60b9      	str	r1, [r7, #8]
 800cac4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cac6:	2302      	movs	r3, #2
 800cac8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	2b01      	cmp	r3, #1
 800cace:	f240 8102 	bls.w	800ccd6 <put_fat+0x21c>
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	699b      	ldr	r3, [r3, #24]
 800cad6:	68ba      	ldr	r2, [r7, #8]
 800cad8:	429a      	cmp	r2, r3
 800cada:	f080 80fc 	bcs.w	800ccd6 <put_fat+0x21c>
		switch (fs->fs_type) {
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	2b03      	cmp	r3, #3
 800cae4:	f000 80b6 	beq.w	800cc54 <put_fat+0x19a>
 800cae8:	2b03      	cmp	r3, #3
 800caea:	f300 80fd 	bgt.w	800cce8 <put_fat+0x22e>
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d003      	beq.n	800cafa <put_fat+0x40>
 800caf2:	2b02      	cmp	r3, #2
 800caf4:	f000 8083 	beq.w	800cbfe <put_fat+0x144>
 800caf8:	e0f6      	b.n	800cce8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	61bb      	str	r3, [r7, #24]
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	085b      	lsrs	r3, r3, #1
 800cb02:	69ba      	ldr	r2, [r7, #24]
 800cb04:	4413      	add	r3, r2
 800cb06:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	899b      	ldrh	r3, [r3, #12]
 800cb10:	4619      	mov	r1, r3
 800cb12:	69bb      	ldr	r3, [r7, #24]
 800cb14:	fbb3 f3f1 	udiv	r3, r3, r1
 800cb18:	4413      	add	r3, r2
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	68f8      	ldr	r0, [r7, #12]
 800cb1e:	f7ff fe3b 	bl	800c798 <move_window>
 800cb22:	4603      	mov	r3, r0
 800cb24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cb26:	7ffb      	ldrb	r3, [r7, #31]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	f040 80d6 	bne.w	800ccda <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cb34:	69bb      	ldr	r3, [r7, #24]
 800cb36:	1c5a      	adds	r2, r3, #1
 800cb38:	61ba      	str	r2, [r7, #24]
 800cb3a:	68fa      	ldr	r2, [r7, #12]
 800cb3c:	8992      	ldrh	r2, [r2, #12]
 800cb3e:	fbb3 f0f2 	udiv	r0, r3, r2
 800cb42:	fb02 f200 	mul.w	r2, r2, r0
 800cb46:	1a9b      	subs	r3, r3, r2
 800cb48:	440b      	add	r3, r1
 800cb4a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	f003 0301 	and.w	r3, r3, #1
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d00d      	beq.n	800cb72 <put_fat+0xb8>
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	b25b      	sxtb	r3, r3
 800cb5c:	f003 030f 	and.w	r3, r3, #15
 800cb60:	b25a      	sxtb	r2, r3
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	011b      	lsls	r3, r3, #4
 800cb68:	b25b      	sxtb	r3, r3
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	b25b      	sxtb	r3, r3
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	e001      	b.n	800cb76 <put_fat+0xbc>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	b2db      	uxtb	r3, r3
 800cb76:	697a      	ldr	r2, [r7, #20]
 800cb78:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	899b      	ldrh	r3, [r3, #12]
 800cb88:	4619      	mov	r1, r3
 800cb8a:	69bb      	ldr	r3, [r7, #24]
 800cb8c:	fbb3 f3f1 	udiv	r3, r3, r1
 800cb90:	4413      	add	r3, r2
 800cb92:	4619      	mov	r1, r3
 800cb94:	68f8      	ldr	r0, [r7, #12]
 800cb96:	f7ff fdff 	bl	800c798 <move_window>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cb9e:	7ffb      	ldrb	r3, [r7, #31]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	f040 809c 	bne.w	800ccde <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	899b      	ldrh	r3, [r3, #12]
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	69bb      	ldr	r3, [r7, #24]
 800cbb4:	fbb3 f0f2 	udiv	r0, r3, r2
 800cbb8:	fb02 f200 	mul.w	r2, r2, r0
 800cbbc:	1a9b      	subs	r3, r3, r2
 800cbbe:	440b      	add	r3, r1
 800cbc0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	f003 0301 	and.w	r3, r3, #1
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d003      	beq.n	800cbd4 <put_fat+0x11a>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	091b      	lsrs	r3, r3, #4
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	e00e      	b.n	800cbf2 <put_fat+0x138>
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	b25b      	sxtb	r3, r3
 800cbda:	f023 030f 	bic.w	r3, r3, #15
 800cbde:	b25a      	sxtb	r2, r3
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	0a1b      	lsrs	r3, r3, #8
 800cbe4:	b25b      	sxtb	r3, r3
 800cbe6:	f003 030f 	and.w	r3, r3, #15
 800cbea:	b25b      	sxtb	r3, r3
 800cbec:	4313      	orrs	r3, r2
 800cbee:	b25b      	sxtb	r3, r3
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	697a      	ldr	r2, [r7, #20]
 800cbf4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	70da      	strb	r2, [r3, #3]
			break;
 800cbfc:	e074      	b.n	800cce8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	899b      	ldrh	r3, [r3, #12]
 800cc06:	085b      	lsrs	r3, r3, #1
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	fbb3 f3f1 	udiv	r3, r3, r1
 800cc12:	4413      	add	r3, r2
 800cc14:	4619      	mov	r1, r3
 800cc16:	68f8      	ldr	r0, [r7, #12]
 800cc18:	f7ff fdbe 	bl	800c798 <move_window>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cc20:	7ffb      	ldrb	r3, [r7, #31]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d15d      	bne.n	800cce2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	005b      	lsls	r3, r3, #1
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	8992      	ldrh	r2, [r2, #12]
 800cc34:	fbb3 f0f2 	udiv	r0, r3, r2
 800cc38:	fb02 f200 	mul.w	r2, r2, r0
 800cc3c:	1a9b      	subs	r3, r3, r2
 800cc3e:	440b      	add	r3, r1
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	b292      	uxth	r2, r2
 800cc44:	4611      	mov	r1, r2
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7ff fb31 	bl	800c2ae <st_word>
			fs->wflag = 1;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	70da      	strb	r2, [r3, #3]
			break;
 800cc52:	e049      	b.n	800cce8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	899b      	ldrh	r3, [r3, #12]
 800cc5c:	089b      	lsrs	r3, r3, #2
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	4619      	mov	r1, r3
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	fbb3 f3f1 	udiv	r3, r3, r1
 800cc68:	4413      	add	r3, r2
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	68f8      	ldr	r0, [r7, #12]
 800cc6e:	f7ff fd93 	bl	800c798 <move_window>
 800cc72:	4603      	mov	r3, r0
 800cc74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cc76:	7ffb      	ldrb	r3, [r7, #31]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d134      	bne.n	800cce6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	009b      	lsls	r3, r3, #2
 800cc8c:	68fa      	ldr	r2, [r7, #12]
 800cc8e:	8992      	ldrh	r2, [r2, #12]
 800cc90:	fbb3 f0f2 	udiv	r0, r3, r2
 800cc94:	fb02 f200 	mul.w	r2, r2, r0
 800cc98:	1a9b      	subs	r3, r3, r2
 800cc9a:	440b      	add	r3, r1
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f7ff fae3 	bl	800c268 <ld_dword>
 800cca2:	4603      	mov	r3, r0
 800cca4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cca8:	4323      	orrs	r3, r4
 800ccaa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	68fa      	ldr	r2, [r7, #12]
 800ccb8:	8992      	ldrh	r2, [r2, #12]
 800ccba:	fbb3 f0f2 	udiv	r0, r3, r2
 800ccbe:	fb02 f200 	mul.w	r2, r2, r0
 800ccc2:	1a9b      	subs	r3, r3, r2
 800ccc4:	440b      	add	r3, r1
 800ccc6:	6879      	ldr	r1, [r7, #4]
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f7ff fb0b 	bl	800c2e4 <st_dword>
			fs->wflag = 1;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	70da      	strb	r2, [r3, #3]
			break;
 800ccd4:	e008      	b.n	800cce8 <put_fat+0x22e>
		}
	}
 800ccd6:	bf00      	nop
 800ccd8:	e006      	b.n	800cce8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ccda:	bf00      	nop
 800ccdc:	e004      	b.n	800cce8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ccde:	bf00      	nop
 800cce0:	e002      	b.n	800cce8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800cce2:	bf00      	nop
 800cce4:	e000      	b.n	800cce8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800cce6:	bf00      	nop
	return res;
 800cce8:	7ffb      	ldrb	r3, [r7, #31]
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3724      	adds	r7, #36	; 0x24
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd90      	pop	{r4, r7, pc}

0800ccf2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ccf2:	b580      	push	{r7, lr}
 800ccf4:	b088      	sub	sp, #32
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	60f8      	str	r0, [r7, #12]
 800ccfa:	60b9      	str	r1, [r7, #8]
 800ccfc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d904      	bls.n	800cd18 <remove_chain+0x26>
 800cd0e:	69bb      	ldr	r3, [r7, #24]
 800cd10:	699b      	ldr	r3, [r3, #24]
 800cd12:	68ba      	ldr	r2, [r7, #8]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d301      	bcc.n	800cd1c <remove_chain+0x2a>
 800cd18:	2302      	movs	r3, #2
 800cd1a:	e04b      	b.n	800cdb4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d00c      	beq.n	800cd3c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cd22:	f04f 32ff 	mov.w	r2, #4294967295
 800cd26:	6879      	ldr	r1, [r7, #4]
 800cd28:	69b8      	ldr	r0, [r7, #24]
 800cd2a:	f7ff fec6 	bl	800caba <put_fat>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cd32:	7ffb      	ldrb	r3, [r7, #31]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d001      	beq.n	800cd3c <remove_chain+0x4a>
 800cd38:	7ffb      	ldrb	r3, [r7, #31]
 800cd3a:	e03b      	b.n	800cdb4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cd3c:	68b9      	ldr	r1, [r7, #8]
 800cd3e:	68f8      	ldr	r0, [r7, #12]
 800cd40:	f7ff fde7 	bl	800c912 <get_fat>
 800cd44:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d031      	beq.n	800cdb0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	2b01      	cmp	r3, #1
 800cd50:	d101      	bne.n	800cd56 <remove_chain+0x64>
 800cd52:	2302      	movs	r3, #2
 800cd54:	e02e      	b.n	800cdb4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd5c:	d101      	bne.n	800cd62 <remove_chain+0x70>
 800cd5e:	2301      	movs	r3, #1
 800cd60:	e028      	b.n	800cdb4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cd62:	2200      	movs	r2, #0
 800cd64:	68b9      	ldr	r1, [r7, #8]
 800cd66:	69b8      	ldr	r0, [r7, #24]
 800cd68:	f7ff fea7 	bl	800caba <put_fat>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cd70:	7ffb      	ldrb	r3, [r7, #31]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d001      	beq.n	800cd7a <remove_chain+0x88>
 800cd76:	7ffb      	ldrb	r3, [r7, #31]
 800cd78:	e01c      	b.n	800cdb4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cd7a:	69bb      	ldr	r3, [r7, #24]
 800cd7c:	695a      	ldr	r2, [r3, #20]
 800cd7e:	69bb      	ldr	r3, [r7, #24]
 800cd80:	699b      	ldr	r3, [r3, #24]
 800cd82:	3b02      	subs	r3, #2
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d20b      	bcs.n	800cda0 <remove_chain+0xae>
			fs->free_clst++;
 800cd88:	69bb      	ldr	r3, [r7, #24]
 800cd8a:	695b      	ldr	r3, [r3, #20]
 800cd8c:	1c5a      	adds	r2, r3, #1
 800cd8e:	69bb      	ldr	r3, [r7, #24]
 800cd90:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800cd92:	69bb      	ldr	r3, [r7, #24]
 800cd94:	791b      	ldrb	r3, [r3, #4]
 800cd96:	f043 0301 	orr.w	r3, r3, #1
 800cd9a:	b2da      	uxtb	r2, r3
 800cd9c:	69bb      	ldr	r3, [r7, #24]
 800cd9e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cda4:	69bb      	ldr	r3, [r7, #24]
 800cda6:	699b      	ldr	r3, [r3, #24]
 800cda8:	68ba      	ldr	r2, [r7, #8]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d3c6      	bcc.n	800cd3c <remove_chain+0x4a>
 800cdae:	e000      	b.n	800cdb2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cdb0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cdb2:	2300      	movs	r3, #0
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3720      	adds	r7, #32
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b088      	sub	sp, #32
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d10d      	bne.n	800cdee <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	691b      	ldr	r3, [r3, #16]
 800cdd6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cdd8:	69bb      	ldr	r3, [r7, #24]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d004      	beq.n	800cde8 <create_chain+0x2c>
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	699b      	ldr	r3, [r3, #24]
 800cde2:	69ba      	ldr	r2, [r7, #24]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d31b      	bcc.n	800ce20 <create_chain+0x64>
 800cde8:	2301      	movs	r3, #1
 800cdea:	61bb      	str	r3, [r7, #24]
 800cdec:	e018      	b.n	800ce20 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cdee:	6839      	ldr	r1, [r7, #0]
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f7ff fd8e 	bl	800c912 <get_fat>
 800cdf6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d801      	bhi.n	800ce02 <create_chain+0x46>
 800cdfe:	2301      	movs	r3, #1
 800ce00:	e070      	b.n	800cee4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce08:	d101      	bne.n	800ce0e <create_chain+0x52>
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	e06a      	b.n	800cee4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	699b      	ldr	r3, [r3, #24]
 800ce12:	68fa      	ldr	r2, [r7, #12]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d201      	bcs.n	800ce1c <create_chain+0x60>
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	e063      	b.n	800cee4 <create_chain+0x128>
		scl = clst;
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ce20:	69bb      	ldr	r3, [r7, #24]
 800ce22:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ce24:	69fb      	ldr	r3, [r7, #28]
 800ce26:	3301      	adds	r3, #1
 800ce28:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	699b      	ldr	r3, [r3, #24]
 800ce2e:	69fa      	ldr	r2, [r7, #28]
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d307      	bcc.n	800ce44 <create_chain+0x88>
				ncl = 2;
 800ce34:	2302      	movs	r3, #2
 800ce36:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ce38:	69fa      	ldr	r2, [r7, #28]
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d901      	bls.n	800ce44 <create_chain+0x88>
 800ce40:	2300      	movs	r3, #0
 800ce42:	e04f      	b.n	800cee4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ce44:	69f9      	ldr	r1, [r7, #28]
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f7ff fd63 	bl	800c912 <get_fat>
 800ce4c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d00e      	beq.n	800ce72 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	d003      	beq.n	800ce62 <create_chain+0xa6>
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce60:	d101      	bne.n	800ce66 <create_chain+0xaa>
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	e03e      	b.n	800cee4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ce66:	69fa      	ldr	r2, [r7, #28]
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d1da      	bne.n	800ce24 <create_chain+0x68>
 800ce6e:	2300      	movs	r3, #0
 800ce70:	e038      	b.n	800cee4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ce72:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ce74:	f04f 32ff 	mov.w	r2, #4294967295
 800ce78:	69f9      	ldr	r1, [r7, #28]
 800ce7a:	6938      	ldr	r0, [r7, #16]
 800ce7c:	f7ff fe1d 	bl	800caba <put_fat>
 800ce80:	4603      	mov	r3, r0
 800ce82:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ce84:	7dfb      	ldrb	r3, [r7, #23]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d109      	bne.n	800ce9e <create_chain+0xe2>
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d006      	beq.n	800ce9e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ce90:	69fa      	ldr	r2, [r7, #28]
 800ce92:	6839      	ldr	r1, [r7, #0]
 800ce94:	6938      	ldr	r0, [r7, #16]
 800ce96:	f7ff fe10 	bl	800caba <put_fat>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ce9e:	7dfb      	ldrb	r3, [r7, #23]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d116      	bne.n	800ced2 <create_chain+0x116>
		fs->last_clst = ncl;
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	69fa      	ldr	r2, [r7, #28]
 800cea8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	695a      	ldr	r2, [r3, #20]
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	699b      	ldr	r3, [r3, #24]
 800ceb2:	3b02      	subs	r3, #2
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d804      	bhi.n	800cec2 <create_chain+0x106>
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	695b      	ldr	r3, [r3, #20]
 800cebc:	1e5a      	subs	r2, r3, #1
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	791b      	ldrb	r3, [r3, #4]
 800cec6:	f043 0301 	orr.w	r3, r3, #1
 800ceca:	b2da      	uxtb	r2, r3
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	711a      	strb	r2, [r3, #4]
 800ced0:	e007      	b.n	800cee2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ced2:	7dfb      	ldrb	r3, [r7, #23]
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d102      	bne.n	800cede <create_chain+0x122>
 800ced8:	f04f 33ff 	mov.w	r3, #4294967295
 800cedc:	e000      	b.n	800cee0 <create_chain+0x124>
 800cede:	2301      	movs	r3, #1
 800cee0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cee2:	69fb      	ldr	r3, [r7, #28]
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3720      	adds	r7, #32
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b087      	sub	sp, #28
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf00:	3304      	adds	r3, #4
 800cf02:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	899b      	ldrh	r3, [r3, #12]
 800cf08:	461a      	mov	r2, r3
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf10:	68fa      	ldr	r2, [r7, #12]
 800cf12:	8952      	ldrh	r2, [r2, #10]
 800cf14:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf18:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	1d1a      	adds	r2, r3, #4
 800cf1e:	613a      	str	r2, [r7, #16]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d101      	bne.n	800cf2e <clmt_clust+0x42>
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	e010      	b.n	800cf50 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800cf2e:	697a      	ldr	r2, [r7, #20]
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d307      	bcc.n	800cf46 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800cf36:	697a      	ldr	r2, [r7, #20]
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	1ad3      	subs	r3, r2, r3
 800cf3c:	617b      	str	r3, [r7, #20]
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	3304      	adds	r3, #4
 800cf42:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cf44:	e7e9      	b.n	800cf1a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800cf46:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	681a      	ldr	r2, [r3, #0]
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	4413      	add	r3, r2
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	371c      	adds	r7, #28
 800cf54:	46bd      	mov	sp, r7
 800cf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5a:	4770      	bx	lr

0800cf5c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b086      	sub	sp, #24
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cf72:	d204      	bcs.n	800cf7e <dir_sdi+0x22>
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	f003 031f 	and.w	r3, r3, #31
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d001      	beq.n	800cf82 <dir_sdi+0x26>
		return FR_INT_ERR;
 800cf7e:	2302      	movs	r3, #2
 800cf80:	e071      	b.n	800d066 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	683a      	ldr	r2, [r7, #0]
 800cf86:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	689b      	ldr	r3, [r3, #8]
 800cf8c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d106      	bne.n	800cfa2 <dir_sdi+0x46>
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	2b02      	cmp	r3, #2
 800cf9a:	d902      	bls.n	800cfa2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfa0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d10c      	bne.n	800cfc2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	095b      	lsrs	r3, r3, #5
 800cfac:	693a      	ldr	r2, [r7, #16]
 800cfae:	8912      	ldrh	r2, [r2, #8]
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d301      	bcc.n	800cfb8 <dir_sdi+0x5c>
 800cfb4:	2302      	movs	r3, #2
 800cfb6:	e056      	b.n	800d066 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	61da      	str	r2, [r3, #28]
 800cfc0:	e02d      	b.n	800d01e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	895b      	ldrh	r3, [r3, #10]
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	899b      	ldrh	r3, [r3, #12]
 800cfcc:	fb03 f302 	mul.w	r3, r3, r2
 800cfd0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cfd2:	e019      	b.n	800d008 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6979      	ldr	r1, [r7, #20]
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7ff fc9a 	bl	800c912 <get_fat>
 800cfde:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfe6:	d101      	bne.n	800cfec <dir_sdi+0x90>
 800cfe8:	2301      	movs	r3, #1
 800cfea:	e03c      	b.n	800d066 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	2b01      	cmp	r3, #1
 800cff0:	d904      	bls.n	800cffc <dir_sdi+0xa0>
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	699b      	ldr	r3, [r3, #24]
 800cff6:	697a      	ldr	r2, [r7, #20]
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d301      	bcc.n	800d000 <dir_sdi+0xa4>
 800cffc:	2302      	movs	r3, #2
 800cffe:	e032      	b.n	800d066 <dir_sdi+0x10a>
			ofs -= csz;
 800d000:	683a      	ldr	r2, [r7, #0]
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	1ad3      	subs	r3, r2, r3
 800d006:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d008:	683a      	ldr	r2, [r7, #0]
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d2e1      	bcs.n	800cfd4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800d010:	6979      	ldr	r1, [r7, #20]
 800d012:	6938      	ldr	r0, [r7, #16]
 800d014:	f7ff fc5e 	bl	800c8d4 <clust2sect>
 800d018:	4602      	mov	r2, r0
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	697a      	ldr	r2, [r7, #20]
 800d022:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	69db      	ldr	r3, [r3, #28]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d101      	bne.n	800d030 <dir_sdi+0xd4>
 800d02c:	2302      	movs	r3, #2
 800d02e:	e01a      	b.n	800d066 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	69da      	ldr	r2, [r3, #28]
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	899b      	ldrh	r3, [r3, #12]
 800d038:	4619      	mov	r1, r3
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	fbb3 f3f1 	udiv	r3, r3, r1
 800d040:	441a      	add	r2, r3
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	899b      	ldrh	r3, [r3, #12]
 800d050:	461a      	mov	r2, r3
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	fbb3 f0f2 	udiv	r0, r3, r2
 800d058:	fb02 f200 	mul.w	r2, r2, r0
 800d05c:	1a9b      	subs	r3, r3, r2
 800d05e:	18ca      	adds	r2, r1, r3
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d064:	2300      	movs	r3, #0
}
 800d066:	4618      	mov	r0, r3
 800d068:	3718      	adds	r7, #24
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}

0800d06e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d06e:	b580      	push	{r7, lr}
 800d070:	b086      	sub	sp, #24
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
 800d076:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	695b      	ldr	r3, [r3, #20]
 800d082:	3320      	adds	r3, #32
 800d084:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	69db      	ldr	r3, [r3, #28]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d003      	beq.n	800d096 <dir_next+0x28>
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d094:	d301      	bcc.n	800d09a <dir_next+0x2c>
 800d096:	2304      	movs	r3, #4
 800d098:	e0bb      	b.n	800d212 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	899b      	ldrh	r3, [r3, #12]
 800d09e:	461a      	mov	r2, r3
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	fbb3 f1f2 	udiv	r1, r3, r2
 800d0a6:	fb02 f201 	mul.w	r2, r2, r1
 800d0aa:	1a9b      	subs	r3, r3, r2
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	f040 809d 	bne.w	800d1ec <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	69db      	ldr	r3, [r3, #28]
 800d0b6:	1c5a      	adds	r2, r3, #1
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	699b      	ldr	r3, [r3, #24]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10b      	bne.n	800d0dc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	095b      	lsrs	r3, r3, #5
 800d0c8:	68fa      	ldr	r2, [r7, #12]
 800d0ca:	8912      	ldrh	r2, [r2, #8]
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	f0c0 808d 	bcc.w	800d1ec <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	61da      	str	r2, [r3, #28]
 800d0d8:	2304      	movs	r3, #4
 800d0da:	e09a      	b.n	800d212 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	899b      	ldrh	r3, [r3, #12]
 800d0e0:	461a      	mov	r2, r3
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	8952      	ldrh	r2, [r2, #10]
 800d0ec:	3a01      	subs	r2, #1
 800d0ee:	4013      	ands	r3, r2
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d17b      	bne.n	800d1ec <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d0f4:	687a      	ldr	r2, [r7, #4]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	699b      	ldr	r3, [r3, #24]
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	4610      	mov	r0, r2
 800d0fe:	f7ff fc08 	bl	800c912 <get_fat>
 800d102:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	2b01      	cmp	r3, #1
 800d108:	d801      	bhi.n	800d10e <dir_next+0xa0>
 800d10a:	2302      	movs	r3, #2
 800d10c:	e081      	b.n	800d212 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d114:	d101      	bne.n	800d11a <dir_next+0xac>
 800d116:	2301      	movs	r3, #1
 800d118:	e07b      	b.n	800d212 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	699b      	ldr	r3, [r3, #24]
 800d11e:	697a      	ldr	r2, [r7, #20]
 800d120:	429a      	cmp	r2, r3
 800d122:	d359      	bcc.n	800d1d8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d104      	bne.n	800d134 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2200      	movs	r2, #0
 800d12e:	61da      	str	r2, [r3, #28]
 800d130:	2304      	movs	r3, #4
 800d132:	e06e      	b.n	800d212 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	699b      	ldr	r3, [r3, #24]
 800d13a:	4619      	mov	r1, r3
 800d13c:	4610      	mov	r0, r2
 800d13e:	f7ff fe3d 	bl	800cdbc <create_chain>
 800d142:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d101      	bne.n	800d14e <dir_next+0xe0>
 800d14a:	2307      	movs	r3, #7
 800d14c:	e061      	b.n	800d212 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	2b01      	cmp	r3, #1
 800d152:	d101      	bne.n	800d158 <dir_next+0xea>
 800d154:	2302      	movs	r3, #2
 800d156:	e05c      	b.n	800d212 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d15e:	d101      	bne.n	800d164 <dir_next+0xf6>
 800d160:	2301      	movs	r3, #1
 800d162:	e056      	b.n	800d212 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d164:	68f8      	ldr	r0, [r7, #12]
 800d166:	f7ff fad3 	bl	800c710 <sync_window>
 800d16a:	4603      	mov	r3, r0
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d001      	beq.n	800d174 <dir_next+0x106>
 800d170:	2301      	movs	r3, #1
 800d172:	e04e      	b.n	800d212 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	899b      	ldrh	r3, [r3, #12]
 800d17e:	461a      	mov	r2, r3
 800d180:	2100      	movs	r1, #0
 800d182:	f7ff f8fc 	bl	800c37e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d186:	2300      	movs	r3, #0
 800d188:	613b      	str	r3, [r7, #16]
 800d18a:	6979      	ldr	r1, [r7, #20]
 800d18c:	68f8      	ldr	r0, [r7, #12]
 800d18e:	f7ff fba1 	bl	800c8d4 <clust2sect>
 800d192:	4602      	mov	r2, r0
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	631a      	str	r2, [r3, #48]	; 0x30
 800d198:	e012      	b.n	800d1c0 <dir_next+0x152>
						fs->wflag = 1;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2201      	movs	r2, #1
 800d19e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d1a0:	68f8      	ldr	r0, [r7, #12]
 800d1a2:	f7ff fab5 	bl	800c710 <sync_window>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d001      	beq.n	800d1b0 <dir_next+0x142>
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	e030      	b.n	800d212 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	613b      	str	r3, [r7, #16]
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ba:	1c5a      	adds	r2, r3, #1
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	631a      	str	r2, [r3, #48]	; 0x30
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	895b      	ldrh	r3, [r3, #10]
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d3e6      	bcc.n	800d19a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	1ad2      	subs	r2, r2, r3
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	697a      	ldr	r2, [r7, #20]
 800d1dc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d1de:	6979      	ldr	r1, [r7, #20]
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f7ff fb77 	bl	800c8d4 <clust2sect>
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	68ba      	ldr	r2, [r7, #8]
 800d1f0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	899b      	ldrh	r3, [r3, #12]
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	fbb3 f0f2 	udiv	r0, r3, r2
 800d204:	fb02 f200 	mul.w	r2, r2, r0
 800d208:	1a9b      	subs	r3, r3, r2
 800d20a:	18ca      	adds	r2, r1, r3
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d210:	2300      	movs	r3, #0
}
 800d212:	4618      	mov	r0, r3
 800d214:	3718      	adds	r7, #24
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}

0800d21a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d21a:	b580      	push	{r7, lr}
 800d21c:	b086      	sub	sp, #24
 800d21e:	af00      	add	r7, sp, #0
 800d220:	6078      	str	r0, [r7, #4]
 800d222:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d22a:	2100      	movs	r1, #0
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f7ff fe95 	bl	800cf5c <dir_sdi>
 800d232:	4603      	mov	r3, r0
 800d234:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d236:	7dfb      	ldrb	r3, [r7, #23]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d12b      	bne.n	800d294 <dir_alloc+0x7a>
		n = 0;
 800d23c:	2300      	movs	r3, #0
 800d23e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	69db      	ldr	r3, [r3, #28]
 800d244:	4619      	mov	r1, r3
 800d246:	68f8      	ldr	r0, [r7, #12]
 800d248:	f7ff faa6 	bl	800c798 <move_window>
 800d24c:	4603      	mov	r3, r0
 800d24e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d250:	7dfb      	ldrb	r3, [r7, #23]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d11d      	bne.n	800d292 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6a1b      	ldr	r3, [r3, #32]
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	2be5      	cmp	r3, #229	; 0xe5
 800d25e:	d004      	beq.n	800d26a <dir_alloc+0x50>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6a1b      	ldr	r3, [r3, #32]
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d107      	bne.n	800d27a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	3301      	adds	r3, #1
 800d26e:	613b      	str	r3, [r7, #16]
 800d270:	693a      	ldr	r2, [r7, #16]
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	429a      	cmp	r2, r3
 800d276:	d102      	bne.n	800d27e <dir_alloc+0x64>
 800d278:	e00c      	b.n	800d294 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d27a:	2300      	movs	r3, #0
 800d27c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d27e:	2101      	movs	r1, #1
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f7ff fef4 	bl	800d06e <dir_next>
 800d286:	4603      	mov	r3, r0
 800d288:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d28a:	7dfb      	ldrb	r3, [r7, #23]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d0d7      	beq.n	800d240 <dir_alloc+0x26>
 800d290:	e000      	b.n	800d294 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d292:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d294:	7dfb      	ldrb	r3, [r7, #23]
 800d296:	2b04      	cmp	r3, #4
 800d298:	d101      	bne.n	800d29e <dir_alloc+0x84>
 800d29a:	2307      	movs	r3, #7
 800d29c:	75fb      	strb	r3, [r7, #23]
	return res;
 800d29e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3718      	adds	r7, #24
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b084      	sub	sp, #16
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	331a      	adds	r3, #26
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7fe ffbe 	bl	800c238 <ld_word>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	2b03      	cmp	r3, #3
 800d2c6:	d109      	bne.n	800d2dc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	3314      	adds	r3, #20
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f7fe ffb3 	bl	800c238 <ld_word>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	041b      	lsls	r3, r3, #16
 800d2d6:	68fa      	ldr	r2, [r7, #12]
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3710      	adds	r7, #16
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}

0800d2e6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d2e6:	b580      	push	{r7, lr}
 800d2e8:	b084      	sub	sp, #16
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	60f8      	str	r0, [r7, #12]
 800d2ee:	60b9      	str	r1, [r7, #8]
 800d2f0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	331a      	adds	r3, #26
 800d2f6:	687a      	ldr	r2, [r7, #4]
 800d2f8:	b292      	uxth	r2, r2
 800d2fa:	4611      	mov	r1, r2
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7fe ffd6 	bl	800c2ae <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	2b03      	cmp	r3, #3
 800d308:	d109      	bne.n	800d31e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	f103 0214 	add.w	r2, r3, #20
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	0c1b      	lsrs	r3, r3, #16
 800d314:	b29b      	uxth	r3, r3
 800d316:	4619      	mov	r1, r3
 800d318:	4610      	mov	r0, r2
 800d31a:	f7fe ffc8 	bl	800c2ae <st_word>
	}
}
 800d31e:	bf00      	nop
 800d320:	3710      	adds	r7, #16
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}

0800d326 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d326:	b580      	push	{r7, lr}
 800d328:	b086      	sub	sp, #24
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d334:	2100      	movs	r1, #0
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f7ff fe10 	bl	800cf5c <dir_sdi>
 800d33c:	4603      	mov	r3, r0
 800d33e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d340:	7dfb      	ldrb	r3, [r7, #23]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d001      	beq.n	800d34a <dir_find+0x24>
 800d346:	7dfb      	ldrb	r3, [r7, #23]
 800d348:	e03e      	b.n	800d3c8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	69db      	ldr	r3, [r3, #28]
 800d34e:	4619      	mov	r1, r3
 800d350:	6938      	ldr	r0, [r7, #16]
 800d352:	f7ff fa21 	bl	800c798 <move_window>
 800d356:	4603      	mov	r3, r0
 800d358:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d35a:	7dfb      	ldrb	r3, [r7, #23]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d12f      	bne.n	800d3c0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6a1b      	ldr	r3, [r3, #32]
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d368:	7bfb      	ldrb	r3, [r7, #15]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d102      	bne.n	800d374 <dir_find+0x4e>
 800d36e:	2304      	movs	r3, #4
 800d370:	75fb      	strb	r3, [r7, #23]
 800d372:	e028      	b.n	800d3c6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6a1b      	ldr	r3, [r3, #32]
 800d378:	330b      	adds	r3, #11
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d380:	b2da      	uxtb	r2, r3
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6a1b      	ldr	r3, [r3, #32]
 800d38a:	330b      	adds	r3, #11
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	f003 0308 	and.w	r3, r3, #8
 800d392:	2b00      	cmp	r3, #0
 800d394:	d10a      	bne.n	800d3ac <dir_find+0x86>
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6a18      	ldr	r0, [r3, #32]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	3324      	adds	r3, #36	; 0x24
 800d39e:	220b      	movs	r2, #11
 800d3a0:	4619      	mov	r1, r3
 800d3a2:	f7ff f807 	bl	800c3b4 <mem_cmp>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d00b      	beq.n	800d3c4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d3ac:	2100      	movs	r1, #0
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f7ff fe5d 	bl	800d06e <dir_next>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d3b8:	7dfb      	ldrb	r3, [r7, #23]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d0c5      	beq.n	800d34a <dir_find+0x24>
 800d3be:	e002      	b.n	800d3c6 <dir_find+0xa0>
		if (res != FR_OK) break;
 800d3c0:	bf00      	nop
 800d3c2:	e000      	b.n	800d3c6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d3c4:	bf00      	nop

	return res;
 800d3c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3718      	adds	r7, #24
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b084      	sub	sp, #16
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d3de:	2101      	movs	r1, #1
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f7ff ff1a 	bl	800d21a <dir_alloc>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d3ea:	7bfb      	ldrb	r3, [r7, #15]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d11c      	bne.n	800d42a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	69db      	ldr	r3, [r3, #28]
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	68b8      	ldr	r0, [r7, #8]
 800d3f8:	f7ff f9ce 	bl	800c798 <move_window>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d400:	7bfb      	ldrb	r3, [r7, #15]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d111      	bne.n	800d42a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6a1b      	ldr	r3, [r3, #32]
 800d40a:	2220      	movs	r2, #32
 800d40c:	2100      	movs	r1, #0
 800d40e:	4618      	mov	r0, r3
 800d410:	f7fe ffb5 	bl	800c37e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6a18      	ldr	r0, [r3, #32]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	3324      	adds	r3, #36	; 0x24
 800d41c:	220b      	movs	r2, #11
 800d41e:	4619      	mov	r1, r3
 800d420:	f7fe ff8c 	bl	800c33c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	2201      	movs	r2, #1
 800d428:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b08a      	sub	sp, #40	; 0x28
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	617b      	str	r3, [r7, #20]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	3324      	adds	r3, #36	; 0x24
 800d448:	613b      	str	r3, [r7, #16]
	mem_set(sfn, ' ', 11);
 800d44a:	220b      	movs	r2, #11
 800d44c:	2120      	movs	r1, #32
 800d44e:	6938      	ldr	r0, [r7, #16]
 800d450:	f7fe ff95 	bl	800c37e <mem_set>
	si = i = 0; ni = 8;
 800d454:	2300      	movs	r3, #0
 800d456:	61bb      	str	r3, [r7, #24]
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	61fb      	str	r3, [r7, #28]
 800d45c:	2308      	movs	r3, #8
 800d45e:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d460:	69fb      	ldr	r3, [r7, #28]
 800d462:	1c5a      	adds	r2, r3, #1
 800d464:	61fa      	str	r2, [r7, #28]
 800d466:	697a      	ldr	r2, [r7, #20]
 800d468:	4413      	add	r3, r2
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d474:	2b20      	cmp	r3, #32
 800d476:	f240 8083 	bls.w	800d580 <create_name+0x14c>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d47a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d47e:	2b2f      	cmp	r3, #47	; 0x2f
 800d480:	d007      	beq.n	800d492 <create_name+0x5e>
 800d482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d486:	2b5c      	cmp	r3, #92	; 0x5c
 800d488:	d110      	bne.n	800d4ac <create_name+0x78>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d48a:	e002      	b.n	800d492 <create_name+0x5e>
 800d48c:	69fb      	ldr	r3, [r7, #28]
 800d48e:	3301      	adds	r3, #1
 800d490:	61fb      	str	r3, [r7, #28]
 800d492:	697a      	ldr	r2, [r7, #20]
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	4413      	add	r3, r2
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	2b2f      	cmp	r3, #47	; 0x2f
 800d49c:	d0f6      	beq.n	800d48c <create_name+0x58>
 800d49e:	697a      	ldr	r2, [r7, #20]
 800d4a0:	69fb      	ldr	r3, [r7, #28]
 800d4a2:	4413      	add	r3, r2
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	2b5c      	cmp	r3, #92	; 0x5c
 800d4a8:	d0f0      	beq.n	800d48c <create_name+0x58>
			break;
 800d4aa:	e06a      	b.n	800d582 <create_name+0x14e>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d4ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4b0:	2b2e      	cmp	r3, #46	; 0x2e
 800d4b2:	d003      	beq.n	800d4bc <create_name+0x88>
 800d4b4:	69ba      	ldr	r2, [r7, #24]
 800d4b6:	6a3b      	ldr	r3, [r7, #32]
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d30d      	bcc.n	800d4d8 <create_name+0xa4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d4bc:	6a3b      	ldr	r3, [r7, #32]
 800d4be:	2b0b      	cmp	r3, #11
 800d4c0:	d003      	beq.n	800d4ca <create_name+0x96>
 800d4c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4c6:	2b2e      	cmp	r3, #46	; 0x2e
 800d4c8:	d001      	beq.n	800d4ce <create_name+0x9a>
 800d4ca:	2306      	movs	r3, #6
 800d4cc:	e075      	b.n	800d5ba <create_name+0x186>
			i = 8; ni = 11;				/* Goto extension */
 800d4ce:	2308      	movs	r3, #8
 800d4d0:	61bb      	str	r3, [r7, #24]
 800d4d2:	230b      	movs	r3, #11
 800d4d4:	623b      	str	r3, [r7, #32]
			continue;
 800d4d6:	e052      	b.n	800d57e <create_name+0x14a>
#if !_DF1S
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false at SBCS cfg.) */
 800d4d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4dc:	2b80      	cmp	r3, #128	; 0x80
 800d4de:	d92e      	bls.n	800d53e <create_name+0x10a>
 800d4e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4e4:	2bff      	cmp	r3, #255	; 0xff
 800d4e6:	d02a      	beq.n	800d53e <create_name+0x10a>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 800d4e8:	69fb      	ldr	r3, [r7, #28]
 800d4ea:	1c5a      	adds	r2, r3, #1
 800d4ec:	61fa      	str	r2, [r7, #28]
 800d4ee:	697a      	ldr	r2, [r7, #20]
 800d4f0:	4413      	add	r3, r2
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	73fb      	strb	r3, [r7, #15]
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 800d4f6:	7bfb      	ldrb	r3, [r7, #15]
 800d4f8:	2b3f      	cmp	r3, #63	; 0x3f
 800d4fa:	d902      	bls.n	800d502 <create_name+0xce>
 800d4fc:	7bfb      	ldrb	r3, [r7, #15]
 800d4fe:	2b7e      	cmp	r3, #126	; 0x7e
 800d500:	d906      	bls.n	800d510 <create_name+0xdc>
 800d502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d506:	2b00      	cmp	r3, #0
 800d508:	da07      	bge.n	800d51a <create_name+0xe6>
 800d50a:	7bfb      	ldrb	r3, [r7, #15]
 800d50c:	2bff      	cmp	r3, #255	; 0xff
 800d50e:	d004      	beq.n	800d51a <create_name+0xe6>
 800d510:	6a3b      	ldr	r3, [r7, #32]
 800d512:	3b01      	subs	r3, #1
 800d514:	69ba      	ldr	r2, [r7, #24]
 800d516:	429a      	cmp	r2, r3
 800d518:	d301      	bcc.n	800d51e <create_name+0xea>
 800d51a:	2306      	movs	r3, #6
 800d51c:	e04d      	b.n	800d5ba <create_name+0x186>
			sfn[i++] = c;
 800d51e:	69bb      	ldr	r3, [r7, #24]
 800d520:	1c5a      	adds	r2, r3, #1
 800d522:	61ba      	str	r2, [r7, #24]
 800d524:	693a      	ldr	r2, [r7, #16]
 800d526:	4413      	add	r3, r2
 800d528:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d52c:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 800d52e:	69bb      	ldr	r3, [r7, #24]
 800d530:	1c5a      	adds	r2, r3, #1
 800d532:	61ba      	str	r2, [r7, #24]
 800d534:	693a      	ldr	r2, [r7, #16]
 800d536:	4413      	add	r3, r2
 800d538:	7bfa      	ldrb	r2, [r7, #15]
 800d53a:	701a      	strb	r2, [r3, #0]
 800d53c:	e01f      	b.n	800d57e <create_name+0x14a>
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d53e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d542:	4619      	mov	r1, r3
 800d544:	481f      	ldr	r0, [pc, #124]	; (800d5c4 <create_name+0x190>)
 800d546:	f7fe ff5c 	bl	800c402 <chk_chr>
 800d54a:	4603      	mov	r3, r0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d001      	beq.n	800d554 <create_name+0x120>
 800d550:	2306      	movs	r3, #6
 800d552:	e032      	b.n	800d5ba <create_name+0x186>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d558:	2b60      	cmp	r3, #96	; 0x60
 800d55a:	d908      	bls.n	800d56e <create_name+0x13a>
 800d55c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d560:	2b7a      	cmp	r3, #122	; 0x7a
 800d562:	d804      	bhi.n	800d56e <create_name+0x13a>
 800d564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d568:	3b20      	subs	r3, #32
 800d56a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	1c5a      	adds	r2, r3, #1
 800d572:	61ba      	str	r2, [r7, #24]
 800d574:	693a      	ldr	r2, [r7, #16]
 800d576:	4413      	add	r3, r2
 800d578:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d57c:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d57e:	e76f      	b.n	800d460 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d580:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d582:	697a      	ldr	r2, [r7, #20]
 800d584:	69fb      	ldr	r3, [r7, #28]
 800d586:	441a      	add	r2, r3
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d58c:	69bb      	ldr	r3, [r7, #24]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d101      	bne.n	800d596 <create_name+0x162>
 800d592:	2306      	movs	r3, #6
 800d594:	e011      	b.n	800d5ba <create_name+0x186>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	2be5      	cmp	r3, #229	; 0xe5
 800d59c:	d102      	bne.n	800d5a4 <create_name+0x170>
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	2205      	movs	r2, #5
 800d5a2:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d5a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5a8:	2b20      	cmp	r3, #32
 800d5aa:	d801      	bhi.n	800d5b0 <create_name+0x17c>
 800d5ac:	2204      	movs	r2, #4
 800d5ae:	e000      	b.n	800d5b2 <create_name+0x17e>
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	330b      	adds	r3, #11
 800d5b6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d5b8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3728      	adds	r7, #40	; 0x28
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	08010730 	.word	0x08010730

0800d5c8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b086      	sub	sp, #24
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d5dc:	e002      	b.n	800d5e4 <follow_path+0x1c>
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	603b      	str	r3, [r7, #0]
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	2b2f      	cmp	r3, #47	; 0x2f
 800d5ea:	d0f8      	beq.n	800d5de <follow_path+0x16>
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	781b      	ldrb	r3, [r3, #0]
 800d5f0:	2b5c      	cmp	r3, #92	; 0x5c
 800d5f2:	d0f4      	beq.n	800d5de <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	2b1f      	cmp	r3, #31
 800d600:	d80a      	bhi.n	800d618 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2280      	movs	r2, #128	; 0x80
 800d606:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d60a:	2100      	movs	r1, #0
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f7ff fca5 	bl	800cf5c <dir_sdi>
 800d612:	4603      	mov	r3, r0
 800d614:	75fb      	strb	r3, [r7, #23]
 800d616:	e048      	b.n	800d6aa <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d618:	463b      	mov	r3, r7
 800d61a:	4619      	mov	r1, r3
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f7ff ff09 	bl	800d434 <create_name>
 800d622:	4603      	mov	r3, r0
 800d624:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d626:	7dfb      	ldrb	r3, [r7, #23]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d139      	bne.n	800d6a0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f7ff fe7a 	bl	800d326 <dir_find>
 800d632:	4603      	mov	r3, r0
 800d634:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d63c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d63e:	7dfb      	ldrb	r3, [r7, #23]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d00a      	beq.n	800d65a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d644:	7dfb      	ldrb	r3, [r7, #23]
 800d646:	2b04      	cmp	r3, #4
 800d648:	d12c      	bne.n	800d6a4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d64a:	7afb      	ldrb	r3, [r7, #11]
 800d64c:	f003 0304 	and.w	r3, r3, #4
 800d650:	2b00      	cmp	r3, #0
 800d652:	d127      	bne.n	800d6a4 <follow_path+0xdc>
 800d654:	2305      	movs	r3, #5
 800d656:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d658:	e024      	b.n	800d6a4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d65a:	7afb      	ldrb	r3, [r7, #11]
 800d65c:	f003 0304 	and.w	r3, r3, #4
 800d660:	2b00      	cmp	r3, #0
 800d662:	d121      	bne.n	800d6a8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	799b      	ldrb	r3, [r3, #6]
 800d668:	f003 0310 	and.w	r3, r3, #16
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d102      	bne.n	800d676 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d670:	2305      	movs	r3, #5
 800d672:	75fb      	strb	r3, [r7, #23]
 800d674:	e019      	b.n	800d6aa <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	695b      	ldr	r3, [r3, #20]
 800d680:	68fa      	ldr	r2, [r7, #12]
 800d682:	8992      	ldrh	r2, [r2, #12]
 800d684:	fbb3 f0f2 	udiv	r0, r3, r2
 800d688:	fb02 f200 	mul.w	r2, r2, r0
 800d68c:	1a9b      	subs	r3, r3, r2
 800d68e:	440b      	add	r3, r1
 800d690:	4619      	mov	r1, r3
 800d692:	68f8      	ldr	r0, [r7, #12]
 800d694:	f7ff fe08 	bl	800d2a8 <ld_clust>
 800d698:	4602      	mov	r2, r0
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d69e:	e7bb      	b.n	800d618 <follow_path+0x50>
			if (res != FR_OK) break;
 800d6a0:	bf00      	nop
 800d6a2:	e002      	b.n	800d6aa <follow_path+0xe2>
				break;
 800d6a4:	bf00      	nop
 800d6a6:	e000      	b.n	800d6aa <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d6a8:	bf00      	nop
			}
		}
	}

	return res;
 800d6aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3718      	adds	r7, #24
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b087      	sub	sp, #28
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d6bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d6c0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d031      	beq.n	800d72e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	617b      	str	r3, [r7, #20]
 800d6d0:	e002      	b.n	800d6d8 <get_ldnumber+0x24>
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	617b      	str	r3, [r7, #20]
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	781b      	ldrb	r3, [r3, #0]
 800d6dc:	2b20      	cmp	r3, #32
 800d6de:	d903      	bls.n	800d6e8 <get_ldnumber+0x34>
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	2b3a      	cmp	r3, #58	; 0x3a
 800d6e6:	d1f4      	bne.n	800d6d2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	2b3a      	cmp	r3, #58	; 0x3a
 800d6ee:	d11c      	bne.n	800d72a <get_ldnumber+0x76>
			tp = *path;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	1c5a      	adds	r2, r3, #1
 800d6fa:	60fa      	str	r2, [r7, #12]
 800d6fc:	781b      	ldrb	r3, [r3, #0]
 800d6fe:	3b30      	subs	r3, #48	; 0x30
 800d700:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	2b09      	cmp	r3, #9
 800d706:	d80e      	bhi.n	800d726 <get_ldnumber+0x72>
 800d708:	68fa      	ldr	r2, [r7, #12]
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d10a      	bne.n	800d726 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d107      	bne.n	800d726 <get_ldnumber+0x72>
					vol = (int)i;
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	3301      	adds	r3, #1
 800d71e:	617b      	str	r3, [r7, #20]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	697a      	ldr	r2, [r7, #20]
 800d724:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	e002      	b.n	800d730 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d72a:	2300      	movs	r3, #0
 800d72c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d72e:	693b      	ldr	r3, [r7, #16]
}
 800d730:	4618      	mov	r0, r3
 800d732:	371c      	adds	r7, #28
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr

0800d73c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b082      	sub	sp, #8
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2200      	movs	r2, #0
 800d74a:	70da      	strb	r2, [r3, #3]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f04f 32ff 	mov.w	r2, #4294967295
 800d752:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d754:	6839      	ldr	r1, [r7, #0]
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f7ff f81e 	bl	800c798 <move_window>
 800d75c:	4603      	mov	r3, r0
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d001      	beq.n	800d766 <check_fs+0x2a>
 800d762:	2304      	movs	r3, #4
 800d764:	e038      	b.n	800d7d8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	3334      	adds	r3, #52	; 0x34
 800d76a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d76e:	4618      	mov	r0, r3
 800d770:	f7fe fd62 	bl	800c238 <ld_word>
 800d774:	4603      	mov	r3, r0
 800d776:	461a      	mov	r2, r3
 800d778:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d001      	beq.n	800d784 <check_fs+0x48>
 800d780:	2303      	movs	r3, #3
 800d782:	e029      	b.n	800d7d8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d78a:	2be9      	cmp	r3, #233	; 0xe9
 800d78c:	d009      	beq.n	800d7a2 <check_fs+0x66>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d794:	2beb      	cmp	r3, #235	; 0xeb
 800d796:	d11e      	bne.n	800d7d6 <check_fs+0x9a>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d79e:	2b90      	cmp	r3, #144	; 0x90
 800d7a0:	d119      	bne.n	800d7d6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	3334      	adds	r3, #52	; 0x34
 800d7a6:	3336      	adds	r3, #54	; 0x36
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7fe fd5d 	bl	800c268 <ld_dword>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d7b4:	4a0a      	ldr	r2, [pc, #40]	; (800d7e0 <check_fs+0xa4>)
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	d101      	bne.n	800d7be <check_fs+0x82>
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	e00c      	b.n	800d7d8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	3334      	adds	r3, #52	; 0x34
 800d7c2:	3352      	adds	r3, #82	; 0x52
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f7fe fd4f 	bl	800c268 <ld_dword>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	4a05      	ldr	r2, [pc, #20]	; (800d7e4 <check_fs+0xa8>)
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	d101      	bne.n	800d7d6 <check_fs+0x9a>
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	e000      	b.n	800d7d8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d7d6:	2302      	movs	r3, #2
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3708      	adds	r7, #8
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	00544146 	.word	0x00544146
 800d7e4:	33544146 	.word	0x33544146

0800d7e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b096      	sub	sp, #88	; 0x58
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	60f8      	str	r0, [r7, #12]
 800d7f0:	60b9      	str	r1, [r7, #8]
 800d7f2:	4613      	mov	r3, r2
 800d7f4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d7fc:	68f8      	ldr	r0, [r7, #12]
 800d7fe:	f7ff ff59 	bl	800d6b4 <get_ldnumber>
 800d802:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d806:	2b00      	cmp	r3, #0
 800d808:	da01      	bge.n	800d80e <find_volume+0x26>
 800d80a:	230b      	movs	r3, #11
 800d80c:	e265      	b.n	800dcda <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d80e:	4ab0      	ldr	r2, [pc, #704]	; (800dad0 <find_volume+0x2e8>)
 800d810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d816:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d101      	bne.n	800d822 <find_volume+0x3a>
 800d81e:	230c      	movs	r3, #12
 800d820:	e25b      	b.n	800dcda <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d826:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d828:	79fb      	ldrb	r3, [r7, #7]
 800d82a:	f023 0301 	bic.w	r3, r3, #1
 800d82e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d01a      	beq.n	800d86e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d83a:	785b      	ldrb	r3, [r3, #1]
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7fe fc5d 	bl	800c0fc <disk_status>
 800d842:	4603      	mov	r3, r0
 800d844:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d848:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d84c:	f003 0301 	and.w	r3, r3, #1
 800d850:	2b00      	cmp	r3, #0
 800d852:	d10c      	bne.n	800d86e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d854:	79fb      	ldrb	r3, [r7, #7]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d007      	beq.n	800d86a <find_volume+0x82>
 800d85a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d85e:	f003 0304 	and.w	r3, r3, #4
 800d862:	2b00      	cmp	r3, #0
 800d864:	d001      	beq.n	800d86a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d866:	230a      	movs	r3, #10
 800d868:	e237      	b.n	800dcda <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800d86a:	2300      	movs	r3, #0
 800d86c:	e235      	b.n	800dcda <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d870:	2200      	movs	r2, #0
 800d872:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d876:	b2da      	uxtb	r2, r3
 800d878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d87a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d87e:	785b      	ldrb	r3, [r3, #1]
 800d880:	4618      	mov	r0, r3
 800d882:	f7fe fc55 	bl	800c130 <disk_initialize>
 800d886:	4603      	mov	r3, r0
 800d888:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d88c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d890:	f003 0301 	and.w	r3, r3, #1
 800d894:	2b00      	cmp	r3, #0
 800d896:	d001      	beq.n	800d89c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d898:	2303      	movs	r3, #3
 800d89a:	e21e      	b.n	800dcda <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d89c:	79fb      	ldrb	r3, [r7, #7]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d007      	beq.n	800d8b2 <find_volume+0xca>
 800d8a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d8a6:	f003 0304 	and.w	r3, r3, #4
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d001      	beq.n	800d8b2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d8ae:	230a      	movs	r3, #10
 800d8b0:	e213      	b.n	800dcda <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b4:	7858      	ldrb	r0, [r3, #1]
 800d8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b8:	330c      	adds	r3, #12
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	2102      	movs	r1, #2
 800d8be:	f7fe fc9d 	bl	800c1fc <disk_ioctl>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d001      	beq.n	800d8cc <find_volume+0xe4>
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	e206      	b.n	800dcda <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ce:	899b      	ldrh	r3, [r3, #12]
 800d8d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8d4:	d80d      	bhi.n	800d8f2 <find_volume+0x10a>
 800d8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d8:	899b      	ldrh	r3, [r3, #12]
 800d8da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d8de:	d308      	bcc.n	800d8f2 <find_volume+0x10a>
 800d8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8e2:	899b      	ldrh	r3, [r3, #12]
 800d8e4:	461a      	mov	r2, r3
 800d8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8e8:	899b      	ldrh	r3, [r3, #12]
 800d8ea:	3b01      	subs	r3, #1
 800d8ec:	4013      	ands	r3, r2
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d001      	beq.n	800d8f6 <find_volume+0x10e>
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	e1f1      	b.n	800dcda <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d8fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d8fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d8fe:	f7ff ff1d 	bl	800d73c <check_fs>
 800d902:	4603      	mov	r3, r0
 800d904:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d908:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d90c:	2b02      	cmp	r3, #2
 800d90e:	d14b      	bne.n	800d9a8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d910:	2300      	movs	r3, #0
 800d912:	643b      	str	r3, [r7, #64]	; 0x40
 800d914:	e01f      	b.n	800d956 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d918:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d91c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d91e:	011b      	lsls	r3, r3, #4
 800d920:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d924:	4413      	add	r3, r2
 800d926:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92a:	3304      	adds	r3, #4
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d006      	beq.n	800d940 <find_volume+0x158>
 800d932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d934:	3308      	adds	r3, #8
 800d936:	4618      	mov	r0, r3
 800d938:	f7fe fc96 	bl	800c268 <ld_dword>
 800d93c:	4602      	mov	r2, r0
 800d93e:	e000      	b.n	800d942 <find_volume+0x15a>
 800d940:	2200      	movs	r2, #0
 800d942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d944:	009b      	lsls	r3, r3, #2
 800d946:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d94a:	440b      	add	r3, r1
 800d94c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d952:	3301      	adds	r3, #1
 800d954:	643b      	str	r3, [r7, #64]	; 0x40
 800d956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d958:	2b03      	cmp	r3, #3
 800d95a:	d9dc      	bls.n	800d916 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d95c:	2300      	movs	r3, #0
 800d95e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d962:	2b00      	cmp	r3, #0
 800d964:	d002      	beq.n	800d96c <find_volume+0x184>
 800d966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d968:	3b01      	subs	r3, #1
 800d96a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d96c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d96e:	009b      	lsls	r3, r3, #2
 800d970:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d974:	4413      	add	r3, r2
 800d976:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d97a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d97c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d005      	beq.n	800d98e <find_volume+0x1a6>
 800d982:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d984:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d986:	f7ff fed9 	bl	800d73c <check_fs>
 800d98a:	4603      	mov	r3, r0
 800d98c:	e000      	b.n	800d990 <find_volume+0x1a8>
 800d98e:	2303      	movs	r3, #3
 800d990:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d994:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d998:	2b01      	cmp	r3, #1
 800d99a:	d905      	bls.n	800d9a8 <find_volume+0x1c0>
 800d99c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d99e:	3301      	adds	r3, #1
 800d9a0:	643b      	str	r3, [r7, #64]	; 0x40
 800d9a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9a4:	2b03      	cmp	r3, #3
 800d9a6:	d9e1      	bls.n	800d96c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d9a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d9ac:	2b04      	cmp	r3, #4
 800d9ae:	d101      	bne.n	800d9b4 <find_volume+0x1cc>
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	e192      	b.n	800dcda <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d9b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d901      	bls.n	800d9c0 <find_volume+0x1d8>
 800d9bc:	230d      	movs	r3, #13
 800d9be:	e18c      	b.n	800dcda <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c2:	3334      	adds	r3, #52	; 0x34
 800d9c4:	330b      	adds	r3, #11
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7fe fc36 	bl	800c238 <ld_word>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d2:	899b      	ldrh	r3, [r3, #12]
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d001      	beq.n	800d9dc <find_volume+0x1f4>
 800d9d8:	230d      	movs	r3, #13
 800d9da:	e17e      	b.n	800dcda <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9de:	3334      	adds	r3, #52	; 0x34
 800d9e0:	3316      	adds	r3, #22
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7fe fc28 	bl	800c238 <ld_word>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d9ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d106      	bne.n	800da00 <find_volume+0x218>
 800d9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f4:	3334      	adds	r3, #52	; 0x34
 800d9f6:	3324      	adds	r3, #36	; 0x24
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f7fe fc35 	bl	800c268 <ld_dword>
 800d9fe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800da00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800da04:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800da06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da08:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800da0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da0e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800da10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da12:	789b      	ldrb	r3, [r3, #2]
 800da14:	2b01      	cmp	r3, #1
 800da16:	d005      	beq.n	800da24 <find_volume+0x23c>
 800da18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da1a:	789b      	ldrb	r3, [r3, #2]
 800da1c:	2b02      	cmp	r3, #2
 800da1e:	d001      	beq.n	800da24 <find_volume+0x23c>
 800da20:	230d      	movs	r3, #13
 800da22:	e15a      	b.n	800dcda <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800da24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da26:	789b      	ldrb	r3, [r3, #2]
 800da28:	461a      	mov	r2, r3
 800da2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da2c:	fb02 f303 	mul.w	r3, r2, r3
 800da30:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800da32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800da38:	b29a      	uxth	r2, r3
 800da3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da3c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800da3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da40:	895b      	ldrh	r3, [r3, #10]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d008      	beq.n	800da58 <find_volume+0x270>
 800da46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da48:	895b      	ldrh	r3, [r3, #10]
 800da4a:	461a      	mov	r2, r3
 800da4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4e:	895b      	ldrh	r3, [r3, #10]
 800da50:	3b01      	subs	r3, #1
 800da52:	4013      	ands	r3, r2
 800da54:	2b00      	cmp	r3, #0
 800da56:	d001      	beq.n	800da5c <find_volume+0x274>
 800da58:	230d      	movs	r3, #13
 800da5a:	e13e      	b.n	800dcda <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800da5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da5e:	3334      	adds	r3, #52	; 0x34
 800da60:	3311      	adds	r3, #17
 800da62:	4618      	mov	r0, r3
 800da64:	f7fe fbe8 	bl	800c238 <ld_word>
 800da68:	4603      	mov	r3, r0
 800da6a:	461a      	mov	r2, r3
 800da6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da6e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800da70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da72:	891b      	ldrh	r3, [r3, #8]
 800da74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da76:	8992      	ldrh	r2, [r2, #12]
 800da78:	0952      	lsrs	r2, r2, #5
 800da7a:	b292      	uxth	r2, r2
 800da7c:	fbb3 f1f2 	udiv	r1, r3, r2
 800da80:	fb02 f201 	mul.w	r2, r2, r1
 800da84:	1a9b      	subs	r3, r3, r2
 800da86:	b29b      	uxth	r3, r3
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d001      	beq.n	800da90 <find_volume+0x2a8>
 800da8c:	230d      	movs	r3, #13
 800da8e:	e124      	b.n	800dcda <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800da90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da92:	3334      	adds	r3, #52	; 0x34
 800da94:	3313      	adds	r3, #19
 800da96:	4618      	mov	r0, r3
 800da98:	f7fe fbce 	bl	800c238 <ld_word>
 800da9c:	4603      	mov	r3, r0
 800da9e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800daa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d106      	bne.n	800dab4 <find_volume+0x2cc>
 800daa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa8:	3334      	adds	r3, #52	; 0x34
 800daaa:	3320      	adds	r3, #32
 800daac:	4618      	mov	r0, r3
 800daae:	f7fe fbdb 	bl	800c268 <ld_dword>
 800dab2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab6:	3334      	adds	r3, #52	; 0x34
 800dab8:	330e      	adds	r3, #14
 800daba:	4618      	mov	r0, r3
 800dabc:	f7fe fbbc 	bl	800c238 <ld_word>
 800dac0:	4603      	mov	r3, r0
 800dac2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800dac4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d104      	bne.n	800dad4 <find_volume+0x2ec>
 800daca:	230d      	movs	r3, #13
 800dacc:	e105      	b.n	800dcda <find_volume+0x4f2>
 800dace:	bf00      	nop
 800dad0:	20003108 	.word	0x20003108

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800dad4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dad8:	4413      	add	r3, r2
 800dada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dadc:	8911      	ldrh	r1, [r2, #8]
 800dade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dae0:	8992      	ldrh	r2, [r2, #12]
 800dae2:	0952      	lsrs	r2, r2, #5
 800dae4:	b292      	uxth	r2, r2
 800dae6:	fbb1 f2f2 	udiv	r2, r1, r2
 800daea:	b292      	uxth	r2, r2
 800daec:	4413      	add	r3, r2
 800daee:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800daf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800daf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d201      	bcs.n	800dafc <find_volume+0x314>
 800daf8:	230d      	movs	r3, #13
 800dafa:	e0ee      	b.n	800dcda <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800dafc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db00:	1ad3      	subs	r3, r2, r3
 800db02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db04:	8952      	ldrh	r2, [r2, #10]
 800db06:	fbb3 f3f2 	udiv	r3, r3, r2
 800db0a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800db0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d101      	bne.n	800db16 <find_volume+0x32e>
 800db12:	230d      	movs	r3, #13
 800db14:	e0e1      	b.n	800dcda <find_volume+0x4f2>
		fmt = FS_FAT32;
 800db16:	2303      	movs	r3, #3
 800db18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800db1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800db22:	4293      	cmp	r3, r2
 800db24:	d802      	bhi.n	800db2c <find_volume+0x344>
 800db26:	2302      	movs	r3, #2
 800db28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800db2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800db32:	4293      	cmp	r3, r2
 800db34:	d802      	bhi.n	800db3c <find_volume+0x354>
 800db36:	2301      	movs	r3, #1
 800db38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800db3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3e:	1c9a      	adds	r2, r3, #2
 800db40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db42:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800db44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800db48:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800db4a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800db4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db4e:	441a      	add	r2, r3
 800db50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db52:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800db54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800db56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db58:	441a      	add	r2, r3
 800db5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db5c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800db5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800db62:	2b03      	cmp	r3, #3
 800db64:	d11e      	bne.n	800dba4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800db66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db68:	3334      	adds	r3, #52	; 0x34
 800db6a:	332a      	adds	r3, #42	; 0x2a
 800db6c:	4618      	mov	r0, r3
 800db6e:	f7fe fb63 	bl	800c238 <ld_word>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d001      	beq.n	800db7c <find_volume+0x394>
 800db78:	230d      	movs	r3, #13
 800db7a:	e0ae      	b.n	800dcda <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800db7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db7e:	891b      	ldrh	r3, [r3, #8]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d001      	beq.n	800db88 <find_volume+0x3a0>
 800db84:	230d      	movs	r3, #13
 800db86:	e0a8      	b.n	800dcda <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800db88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db8a:	3334      	adds	r3, #52	; 0x34
 800db8c:	332c      	adds	r3, #44	; 0x2c
 800db8e:	4618      	mov	r0, r3
 800db90:	f7fe fb6a 	bl	800c268 <ld_dword>
 800db94:	4602      	mov	r2, r0
 800db96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db98:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800db9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db9c:	699b      	ldr	r3, [r3, #24]
 800db9e:	009b      	lsls	r3, r3, #2
 800dba0:	647b      	str	r3, [r7, #68]	; 0x44
 800dba2:	e01f      	b.n	800dbe4 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba6:	891b      	ldrh	r3, [r3, #8]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d101      	bne.n	800dbb0 <find_volume+0x3c8>
 800dbac:	230d      	movs	r3, #13
 800dbae:	e094      	b.n	800dcda <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dbb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbb6:	441a      	add	r2, r3
 800dbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbba:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dbbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dbc0:	2b02      	cmp	r3, #2
 800dbc2:	d103      	bne.n	800dbcc <find_volume+0x3e4>
 800dbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc6:	699b      	ldr	r3, [r3, #24]
 800dbc8:	005b      	lsls	r3, r3, #1
 800dbca:	e00a      	b.n	800dbe2 <find_volume+0x3fa>
 800dbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbce:	699a      	ldr	r2, [r3, #24]
 800dbd0:	4613      	mov	r3, r2
 800dbd2:	005b      	lsls	r3, r3, #1
 800dbd4:	4413      	add	r3, r2
 800dbd6:	085a      	lsrs	r2, r3, #1
 800dbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbda:	699b      	ldr	r3, [r3, #24]
 800dbdc:	f003 0301 	and.w	r3, r3, #1
 800dbe0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800dbe2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800dbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe6:	69da      	ldr	r2, [r3, #28]
 800dbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbea:	899b      	ldrh	r3, [r3, #12]
 800dbec:	4619      	mov	r1, r3
 800dbee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbf0:	440b      	add	r3, r1
 800dbf2:	3b01      	subs	r3, #1
 800dbf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dbf6:	8989      	ldrh	r1, [r1, #12]
 800dbf8:	fbb3 f3f1 	udiv	r3, r3, r1
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	d201      	bcs.n	800dc04 <find_volume+0x41c>
 800dc00:	230d      	movs	r3, #13
 800dc02:	e06a      	b.n	800dcda <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc06:	f04f 32ff 	mov.w	r2, #4294967295
 800dc0a:	615a      	str	r2, [r3, #20]
 800dc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc0e:	695a      	ldr	r2, [r3, #20]
 800dc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc12:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800dc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc16:	2280      	movs	r2, #128	; 0x80
 800dc18:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dc1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc1e:	2b03      	cmp	r3, #3
 800dc20:	d149      	bne.n	800dcb6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc24:	3334      	adds	r3, #52	; 0x34
 800dc26:	3330      	adds	r3, #48	; 0x30
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f7fe fb05 	bl	800c238 <ld_word>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d140      	bne.n	800dcb6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dc34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc36:	3301      	adds	r3, #1
 800dc38:	4619      	mov	r1, r3
 800dc3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dc3c:	f7fe fdac 	bl	800c798 <move_window>
 800dc40:	4603      	mov	r3, r0
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d137      	bne.n	800dcb6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800dc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc48:	2200      	movs	r2, #0
 800dc4a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc4e:	3334      	adds	r3, #52	; 0x34
 800dc50:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7fe faef 	bl	800c238 <ld_word>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d127      	bne.n	800dcb6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc68:	3334      	adds	r3, #52	; 0x34
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7fe fafc 	bl	800c268 <ld_dword>
 800dc70:	4603      	mov	r3, r0
 800dc72:	4a1c      	ldr	r2, [pc, #112]	; (800dce4 <find_volume+0x4fc>)
 800dc74:	4293      	cmp	r3, r2
 800dc76:	d11e      	bne.n	800dcb6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc7a:	3334      	adds	r3, #52	; 0x34
 800dc7c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7fe faf1 	bl	800c268 <ld_dword>
 800dc86:	4603      	mov	r3, r0
 800dc88:	4a17      	ldr	r2, [pc, #92]	; (800dce8 <find_volume+0x500>)
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d113      	bne.n	800dcb6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc90:	3334      	adds	r3, #52	; 0x34
 800dc92:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7fe fae6 	bl	800c268 <ld_dword>
 800dc9c:	4602      	mov	r2, r0
 800dc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800dca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca4:	3334      	adds	r3, #52	; 0x34
 800dca6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f7fe fadc 	bl	800c268 <ld_dword>
 800dcb0:	4602      	mov	r2, r0
 800dcb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dcb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800dcbc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800dcbe:	4b0b      	ldr	r3, [pc, #44]	; (800dcec <find_volume+0x504>)
 800dcc0:	881b      	ldrh	r3, [r3, #0]
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	b29a      	uxth	r2, r3
 800dcc6:	4b09      	ldr	r3, [pc, #36]	; (800dcec <find_volume+0x504>)
 800dcc8:	801a      	strh	r2, [r3, #0]
 800dcca:	4b08      	ldr	r3, [pc, #32]	; (800dcec <find_volume+0x504>)
 800dccc:	881a      	ldrh	r2, [r3, #0]
 800dcce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dcd2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dcd4:	f7fe fcf8 	bl	800c6c8 <clear_lock>
#endif
	return FR_OK;
 800dcd8:	2300      	movs	r3, #0
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3758      	adds	r7, #88	; 0x58
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	41615252 	.word	0x41615252
 800dce8:	61417272 	.word	0x61417272
 800dcec:	2000310c 	.word	0x2000310c

0800dcf0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800dcfa:	2309      	movs	r3, #9
 800dcfc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d01c      	beq.n	800dd3e <validate+0x4e>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d018      	beq.n	800dd3e <validate+0x4e>
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d013      	beq.n	800dd3e <validate+0x4e>
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	889a      	ldrh	r2, [r3, #4]
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	88db      	ldrh	r3, [r3, #6]
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d10c      	bne.n	800dd3e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	785b      	ldrb	r3, [r3, #1]
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f7fe f9e6 	bl	800c0fc <disk_status>
 800dd30:	4603      	mov	r3, r0
 800dd32:	f003 0301 	and.w	r3, r3, #1
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d101      	bne.n	800dd3e <validate+0x4e>
			res = FR_OK;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800dd3e:	7bfb      	ldrb	r3, [r7, #15]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d102      	bne.n	800dd4a <validate+0x5a>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	e000      	b.n	800dd4c <validate+0x5c>
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	683a      	ldr	r2, [r7, #0]
 800dd4e:	6013      	str	r3, [r2, #0]
	return res;
 800dd50:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
	...

0800dd5c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b088      	sub	sp, #32
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	4613      	mov	r3, r2
 800dd68:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800dd6e:	f107 0310 	add.w	r3, r7, #16
 800dd72:	4618      	mov	r0, r3
 800dd74:	f7ff fc9e 	bl	800d6b4 <get_ldnumber>
 800dd78:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	da01      	bge.n	800dd84 <f_mount+0x28>
 800dd80:	230b      	movs	r3, #11
 800dd82:	e02b      	b.n	800dddc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800dd84:	4a17      	ldr	r2, [pc, #92]	; (800dde4 <f_mount+0x88>)
 800dd86:	69fb      	ldr	r3, [r7, #28]
 800dd88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd8c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800dd8e:	69bb      	ldr	r3, [r7, #24]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d005      	beq.n	800dda0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800dd94:	69b8      	ldr	r0, [r7, #24]
 800dd96:	f7fe fc97 	bl	800c6c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800dd9a:	69bb      	ldr	r3, [r7, #24]
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d002      	beq.n	800ddac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ddac:	68fa      	ldr	r2, [r7, #12]
 800ddae:	490d      	ldr	r1, [pc, #52]	; (800dde4 <f_mount+0x88>)
 800ddb0:	69fb      	ldr	r3, [r7, #28]
 800ddb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d002      	beq.n	800ddc2 <f_mount+0x66>
 800ddbc:	79fb      	ldrb	r3, [r7, #7]
 800ddbe:	2b01      	cmp	r3, #1
 800ddc0:	d001      	beq.n	800ddc6 <f_mount+0x6a>
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	e00a      	b.n	800dddc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ddc6:	f107 010c 	add.w	r1, r7, #12
 800ddca:	f107 0308 	add.w	r3, r7, #8
 800ddce:	2200      	movs	r2, #0
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f7ff fd09 	bl	800d7e8 <find_volume>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ddda:	7dfb      	ldrb	r3, [r7, #23]
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3720      	adds	r7, #32
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}
 800dde4:	20003108 	.word	0x20003108

0800dde8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b098      	sub	sp, #96	; 0x60
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	60f8      	str	r0, [r7, #12]
 800ddf0:	60b9      	str	r1, [r7, #8]
 800ddf2:	4613      	mov	r3, r2
 800ddf4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d101      	bne.n	800de00 <f_open+0x18>
 800ddfc:	2309      	movs	r3, #9
 800ddfe:	e1bb      	b.n	800e178 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800de00:	79fb      	ldrb	r3, [r7, #7]
 800de02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de06:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800de08:	79fa      	ldrb	r2, [r7, #7]
 800de0a:	f107 0110 	add.w	r1, r7, #16
 800de0e:	f107 0308 	add.w	r3, r7, #8
 800de12:	4618      	mov	r0, r3
 800de14:	f7ff fce8 	bl	800d7e8 <find_volume>
 800de18:	4603      	mov	r3, r0
 800de1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800de1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de22:	2b00      	cmp	r3, #0
 800de24:	f040 819f 	bne.w	800e166 <f_open+0x37e>
		dj.obj.fs = fs;
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800de2c:	68ba      	ldr	r2, [r7, #8]
 800de2e:	f107 0314 	add.w	r3, r7, #20
 800de32:	4611      	mov	r1, r2
 800de34:	4618      	mov	r0, r3
 800de36:	f7ff fbc7 	bl	800d5c8 <follow_path>
 800de3a:	4603      	mov	r3, r0
 800de3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800de40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de44:	2b00      	cmp	r3, #0
 800de46:	d11a      	bne.n	800de7e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800de48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800de4c:	b25b      	sxtb	r3, r3
 800de4e:	2b00      	cmp	r3, #0
 800de50:	da03      	bge.n	800de5a <f_open+0x72>
				res = FR_INVALID_NAME;
 800de52:	2306      	movs	r3, #6
 800de54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800de58:	e011      	b.n	800de7e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800de5a:	79fb      	ldrb	r3, [r7, #7]
 800de5c:	f023 0301 	bic.w	r3, r3, #1
 800de60:	2b00      	cmp	r3, #0
 800de62:	bf14      	ite	ne
 800de64:	2301      	movne	r3, #1
 800de66:	2300      	moveq	r3, #0
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	461a      	mov	r2, r3
 800de6c:	f107 0314 	add.w	r3, r7, #20
 800de70:	4611      	mov	r1, r2
 800de72:	4618      	mov	r0, r3
 800de74:	f7fe fae0 	bl	800c438 <chk_lock>
 800de78:	4603      	mov	r3, r0
 800de7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800de7e:	79fb      	ldrb	r3, [r7, #7]
 800de80:	f003 031c 	and.w	r3, r3, #28
 800de84:	2b00      	cmp	r3, #0
 800de86:	d07f      	beq.n	800df88 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800de88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d017      	beq.n	800dec0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800de90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de94:	2b04      	cmp	r3, #4
 800de96:	d10e      	bne.n	800deb6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800de98:	f7fe fb2a 	bl	800c4f0 <enq_lock>
 800de9c:	4603      	mov	r3, r0
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d006      	beq.n	800deb0 <f_open+0xc8>
 800dea2:	f107 0314 	add.w	r3, r7, #20
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7ff fa92 	bl	800d3d0 <dir_register>
 800deac:	4603      	mov	r3, r0
 800deae:	e000      	b.n	800deb2 <f_open+0xca>
 800deb0:	2312      	movs	r3, #18
 800deb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800deb6:	79fb      	ldrb	r3, [r7, #7]
 800deb8:	f043 0308 	orr.w	r3, r3, #8
 800debc:	71fb      	strb	r3, [r7, #7]
 800debe:	e010      	b.n	800dee2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dec0:	7ebb      	ldrb	r3, [r7, #26]
 800dec2:	f003 0311 	and.w	r3, r3, #17
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d003      	beq.n	800ded2 <f_open+0xea>
					res = FR_DENIED;
 800deca:	2307      	movs	r3, #7
 800decc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ded0:	e007      	b.n	800dee2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ded2:	79fb      	ldrb	r3, [r7, #7]
 800ded4:	f003 0304 	and.w	r3, r3, #4
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d002      	beq.n	800dee2 <f_open+0xfa>
 800dedc:	2308      	movs	r3, #8
 800dede:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dee2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d168      	bne.n	800dfbc <f_open+0x1d4>
 800deea:	79fb      	ldrb	r3, [r7, #7]
 800deec:	f003 0308 	and.w	r3, r3, #8
 800def0:	2b00      	cmp	r3, #0
 800def2:	d063      	beq.n	800dfbc <f_open+0x1d4>
				dw = GET_FATTIME();
 800def4:	f7fa fdbe 	bl	8008a74 <get_fattime>
 800def8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800defa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800defc:	330e      	adds	r3, #14
 800defe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800df00:	4618      	mov	r0, r3
 800df02:	f7fe f9ef 	bl	800c2e4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800df06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df08:	3316      	adds	r3, #22
 800df0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7fe f9e9 	bl	800c2e4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800df12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df14:	330b      	adds	r3, #11
 800df16:	2220      	movs	r2, #32
 800df18:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df1e:	4611      	mov	r1, r2
 800df20:	4618      	mov	r0, r3
 800df22:	f7ff f9c1 	bl	800d2a8 <ld_clust>
 800df26:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800df2c:	2200      	movs	r2, #0
 800df2e:	4618      	mov	r0, r3
 800df30:	f7ff f9d9 	bl	800d2e6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800df34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df36:	331c      	adds	r3, #28
 800df38:	2100      	movs	r1, #0
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7fe f9d2 	bl	800c2e4 <st_dword>
					fs->wflag = 1;
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	2201      	movs	r2, #1
 800df44:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800df46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d037      	beq.n	800dfbc <f_open+0x1d4>
						dw = fs->winsect;
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df50:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800df52:	f107 0314 	add.w	r3, r7, #20
 800df56:	2200      	movs	r2, #0
 800df58:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7fe fec9 	bl	800ccf2 <remove_chain>
 800df60:	4603      	mov	r3, r0
 800df62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800df66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d126      	bne.n	800dfbc <f_open+0x1d4>
							res = move_window(fs, dw);
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800df72:	4618      	mov	r0, r3
 800df74:	f7fe fc10 	bl	800c798 <move_window>
 800df78:	4603      	mov	r3, r0
 800df7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800df82:	3a01      	subs	r2, #1
 800df84:	611a      	str	r2, [r3, #16]
 800df86:	e019      	b.n	800dfbc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800df88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d115      	bne.n	800dfbc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800df90:	7ebb      	ldrb	r3, [r7, #26]
 800df92:	f003 0310 	and.w	r3, r3, #16
 800df96:	2b00      	cmp	r3, #0
 800df98:	d003      	beq.n	800dfa2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800df9a:	2304      	movs	r3, #4
 800df9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dfa0:	e00c      	b.n	800dfbc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dfa2:	79fb      	ldrb	r3, [r7, #7]
 800dfa4:	f003 0302 	and.w	r3, r3, #2
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d007      	beq.n	800dfbc <f_open+0x1d4>
 800dfac:	7ebb      	ldrb	r3, [r7, #26]
 800dfae:	f003 0301 	and.w	r3, r3, #1
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d002      	beq.n	800dfbc <f_open+0x1d4>
						res = FR_DENIED;
 800dfb6:	2307      	movs	r3, #7
 800dfb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800dfbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d128      	bne.n	800e016 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dfc4:	79fb      	ldrb	r3, [r7, #7]
 800dfc6:	f003 0308 	and.w	r3, r3, #8
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d003      	beq.n	800dfd6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800dfce:	79fb      	ldrb	r3, [r7, #7]
 800dfd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfd4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800dfde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dfe4:	79fb      	ldrb	r3, [r7, #7]
 800dfe6:	f023 0301 	bic.w	r3, r3, #1
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	bf14      	ite	ne
 800dfee:	2301      	movne	r3, #1
 800dff0:	2300      	moveq	r3, #0
 800dff2:	b2db      	uxtb	r3, r3
 800dff4:	461a      	mov	r2, r3
 800dff6:	f107 0314 	add.w	r3, r7, #20
 800dffa:	4611      	mov	r1, r2
 800dffc:	4618      	mov	r0, r3
 800dffe:	f7fe fa99 	bl	800c534 <inc_lock>
 800e002:	4602      	mov	r2, r0
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	691b      	ldr	r3, [r3, #16]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d102      	bne.n	800e016 <f_open+0x22e>
 800e010:	2302      	movs	r3, #2
 800e012:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e016:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	f040 80a3 	bne.w	800e166 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e024:	4611      	mov	r1, r2
 800e026:	4618      	mov	r0, r3
 800e028:	f7ff f93e 	bl	800d2a8 <ld_clust>
 800e02c:	4602      	mov	r2, r0
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e034:	331c      	adds	r3, #28
 800e036:	4618      	mov	r0, r3
 800e038:	f7fe f916 	bl	800c268 <ld_dword>
 800e03c:	4602      	mov	r2, r0
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	2200      	movs	r2, #0
 800e046:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e048:	693a      	ldr	r2, [r7, #16]
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	88da      	ldrh	r2, [r3, #6]
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	79fa      	ldrb	r2, [r7, #7]
 800e05a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2200      	movs	r2, #0
 800e060:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	2200      	movs	r2, #0
 800e066:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	2200      	movs	r2, #0
 800e06c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	3330      	adds	r3, #48	; 0x30
 800e072:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e076:	2100      	movs	r1, #0
 800e078:	4618      	mov	r0, r3
 800e07a:	f7fe f980 	bl	800c37e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e07e:	79fb      	ldrb	r3, [r7, #7]
 800e080:	f003 0320 	and.w	r3, r3, #32
 800e084:	2b00      	cmp	r3, #0
 800e086:	d06e      	beq.n	800e166 <f_open+0x37e>
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	68db      	ldr	r3, [r3, #12]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d06a      	beq.n	800e166 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	68da      	ldr	r2, [r3, #12]
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	895b      	ldrh	r3, [r3, #10]
 800e09c:	461a      	mov	r2, r3
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	899b      	ldrh	r3, [r3, #12]
 800e0a2:	fb03 f302 	mul.w	r3, r3, r2
 800e0a6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	689b      	ldr	r3, [r3, #8]
 800e0ac:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	68db      	ldr	r3, [r3, #12]
 800e0b2:	657b      	str	r3, [r7, #84]	; 0x54
 800e0b4:	e016      	b.n	800e0e4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7fe fc29 	bl	800c912 <get_fat>
 800e0c0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e0c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	d802      	bhi.n	800e0ce <f_open+0x2e6>
 800e0c8:	2302      	movs	r3, #2
 800e0ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e0ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e0d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0d4:	d102      	bne.n	800e0dc <f_open+0x2f4>
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e0dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e0de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0e0:	1ad3      	subs	r3, r2, r3
 800e0e2:	657b      	str	r3, [r7, #84]	; 0x54
 800e0e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d103      	bne.n	800e0f4 <f_open+0x30c>
 800e0ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e0ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0f0:	429a      	cmp	r2, r3
 800e0f2:	d8e0      	bhi.n	800e0b6 <f_open+0x2ce>
				}
				fp->clust = clst;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e0f8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e0fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d131      	bne.n	800e166 <f_open+0x37e>
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	899b      	ldrh	r3, [r3, #12]
 800e106:	461a      	mov	r2, r3
 800e108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e10a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e10e:	fb02 f201 	mul.w	r2, r2, r1
 800e112:	1a9b      	subs	r3, r3, r2
 800e114:	2b00      	cmp	r3, #0
 800e116:	d026      	beq.n	800e166 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7fe fbd9 	bl	800c8d4 <clust2sect>
 800e122:	6478      	str	r0, [r7, #68]	; 0x44
 800e124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e126:	2b00      	cmp	r3, #0
 800e128:	d103      	bne.n	800e132 <f_open+0x34a>
						res = FR_INT_ERR;
 800e12a:	2302      	movs	r3, #2
 800e12c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e130:	e019      	b.n	800e166 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	899b      	ldrh	r3, [r3, #12]
 800e136:	461a      	mov	r2, r3
 800e138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e13a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e13e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e140:	441a      	add	r2, r3
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	7858      	ldrb	r0, [r3, #1]
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	6a1a      	ldr	r2, [r3, #32]
 800e154:	2301      	movs	r3, #1
 800e156:	f7fe f811 	bl	800c17c <disk_read>
 800e15a:	4603      	mov	r3, r0
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d002      	beq.n	800e166 <f_open+0x37e>
 800e160:	2301      	movs	r3, #1
 800e162:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e166:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d002      	beq.n	800e174 <f_open+0x38c>
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	2200      	movs	r2, #0
 800e172:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e174:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e178:	4618      	mov	r0, r3
 800e17a:	3760      	adds	r7, #96	; 0x60
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}

0800e180 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b08e      	sub	sp, #56	; 0x38
 800e184:	af00      	add	r7, sp, #0
 800e186:	60f8      	str	r0, [r7, #12]
 800e188:	60b9      	str	r1, [r7, #8]
 800e18a:	607a      	str	r2, [r7, #4]
 800e18c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	2200      	movs	r2, #0
 800e196:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	f107 0214 	add.w	r2, r7, #20
 800e19e:	4611      	mov	r1, r2
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7ff fda5 	bl	800dcf0 <validate>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e1ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d107      	bne.n	800e1c4 <f_read+0x44>
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	7d5b      	ldrb	r3, [r3, #21]
 800e1b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e1bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d002      	beq.n	800e1ca <f_read+0x4a>
 800e1c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1c8:	e135      	b.n	800e436 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	7d1b      	ldrb	r3, [r3, #20]
 800e1ce:	f003 0301 	and.w	r3, r3, #1
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d101      	bne.n	800e1da <f_read+0x5a>
 800e1d6:	2307      	movs	r3, #7
 800e1d8:	e12d      	b.n	800e436 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	68da      	ldr	r2, [r3, #12]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	699b      	ldr	r3, [r3, #24]
 800e1e2:	1ad3      	subs	r3, r2, r3
 800e1e4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e1e6:	687a      	ldr	r2, [r7, #4]
 800e1e8:	6a3b      	ldr	r3, [r7, #32]
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	f240 811e 	bls.w	800e42c <f_read+0x2ac>
 800e1f0:	6a3b      	ldr	r3, [r7, #32]
 800e1f2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e1f4:	e11a      	b.n	800e42c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	699b      	ldr	r3, [r3, #24]
 800e1fa:	697a      	ldr	r2, [r7, #20]
 800e1fc:	8992      	ldrh	r2, [r2, #12]
 800e1fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800e202:	fb02 f201 	mul.w	r2, r2, r1
 800e206:	1a9b      	subs	r3, r3, r2
 800e208:	2b00      	cmp	r3, #0
 800e20a:	f040 80d5 	bne.w	800e3b8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	699b      	ldr	r3, [r3, #24]
 800e212:	697a      	ldr	r2, [r7, #20]
 800e214:	8992      	ldrh	r2, [r2, #12]
 800e216:	fbb3 f3f2 	udiv	r3, r3, r2
 800e21a:	697a      	ldr	r2, [r7, #20]
 800e21c:	8952      	ldrh	r2, [r2, #10]
 800e21e:	3a01      	subs	r2, #1
 800e220:	4013      	ands	r3, r2
 800e222:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e224:	69fb      	ldr	r3, [r7, #28]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d12f      	bne.n	800e28a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	699b      	ldr	r3, [r3, #24]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d103      	bne.n	800e23a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	689b      	ldr	r3, [r3, #8]
 800e236:	633b      	str	r3, [r7, #48]	; 0x30
 800e238:	e013      	b.n	800e262 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d007      	beq.n	800e252 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	699b      	ldr	r3, [r3, #24]
 800e246:	4619      	mov	r1, r3
 800e248:	68f8      	ldr	r0, [r7, #12]
 800e24a:	f7fe fe4f 	bl	800ceec <clmt_clust>
 800e24e:	6338      	str	r0, [r7, #48]	; 0x30
 800e250:	e007      	b.n	800e262 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e252:	68fa      	ldr	r2, [r7, #12]
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	69db      	ldr	r3, [r3, #28]
 800e258:	4619      	mov	r1, r3
 800e25a:	4610      	mov	r0, r2
 800e25c:	f7fe fb59 	bl	800c912 <get_fat>
 800e260:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e264:	2b01      	cmp	r3, #1
 800e266:	d804      	bhi.n	800e272 <f_read+0xf2>
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	2202      	movs	r2, #2
 800e26c:	755a      	strb	r2, [r3, #21]
 800e26e:	2302      	movs	r3, #2
 800e270:	e0e1      	b.n	800e436 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e274:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e278:	d104      	bne.n	800e284 <f_read+0x104>
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	2201      	movs	r2, #1
 800e27e:	755a      	strb	r2, [r3, #21]
 800e280:	2301      	movs	r3, #1
 800e282:	e0d8      	b.n	800e436 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e288:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e28a:	697a      	ldr	r2, [r7, #20]
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	69db      	ldr	r3, [r3, #28]
 800e290:	4619      	mov	r1, r3
 800e292:	4610      	mov	r0, r2
 800e294:	f7fe fb1e 	bl	800c8d4 <clust2sect>
 800e298:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e29a:	69bb      	ldr	r3, [r7, #24]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d104      	bne.n	800e2aa <f_read+0x12a>
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2202      	movs	r2, #2
 800e2a4:	755a      	strb	r2, [r3, #21]
 800e2a6:	2302      	movs	r3, #2
 800e2a8:	e0c5      	b.n	800e436 <f_read+0x2b6>
			sect += csect;
 800e2aa:	69ba      	ldr	r2, [r7, #24]
 800e2ac:	69fb      	ldr	r3, [r7, #28]
 800e2ae:	4413      	add	r3, r2
 800e2b0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	899b      	ldrh	r3, [r3, #12]
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2be:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d041      	beq.n	800e34a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e2c6:	69fa      	ldr	r2, [r7, #28]
 800e2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ca:	4413      	add	r3, r2
 800e2cc:	697a      	ldr	r2, [r7, #20]
 800e2ce:	8952      	ldrh	r2, [r2, #10]
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	d905      	bls.n	800e2e0 <f_read+0x160>
					cc = fs->csize - csect;
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	895b      	ldrh	r3, [r3, #10]
 800e2d8:	461a      	mov	r2, r3
 800e2da:	69fb      	ldr	r3, [r7, #28]
 800e2dc:	1ad3      	subs	r3, r2, r3
 800e2de:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	7858      	ldrb	r0, [r3, #1]
 800e2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e6:	69ba      	ldr	r2, [r7, #24]
 800e2e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e2ea:	f7fd ff47 	bl	800c17c <disk_read>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d004      	beq.n	800e2fe <f_read+0x17e>
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	755a      	strb	r2, [r3, #21]
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	e09b      	b.n	800e436 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	7d1b      	ldrb	r3, [r3, #20]
 800e302:	b25b      	sxtb	r3, r3
 800e304:	2b00      	cmp	r3, #0
 800e306:	da18      	bge.n	800e33a <f_read+0x1ba>
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	6a1a      	ldr	r2, [r3, #32]
 800e30c:	69bb      	ldr	r3, [r7, #24]
 800e30e:	1ad3      	subs	r3, r2, r3
 800e310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e312:	429a      	cmp	r2, r3
 800e314:	d911      	bls.n	800e33a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	6a1a      	ldr	r2, [r3, #32]
 800e31a:	69bb      	ldr	r3, [r7, #24]
 800e31c:	1ad3      	subs	r3, r2, r3
 800e31e:	697a      	ldr	r2, [r7, #20]
 800e320:	8992      	ldrh	r2, [r2, #12]
 800e322:	fb02 f303 	mul.w	r3, r2, r3
 800e326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e328:	18d0      	adds	r0, r2, r3
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	899b      	ldrh	r3, [r3, #12]
 800e334:	461a      	mov	r2, r3
 800e336:	f7fe f801 	bl	800c33c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	899b      	ldrh	r3, [r3, #12]
 800e33e:	461a      	mov	r2, r3
 800e340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e342:	fb02 f303 	mul.w	r3, r2, r3
 800e346:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e348:	e05c      	b.n	800e404 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	6a1b      	ldr	r3, [r3, #32]
 800e34e:	69ba      	ldr	r2, [r7, #24]
 800e350:	429a      	cmp	r2, r3
 800e352:	d02e      	beq.n	800e3b2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	7d1b      	ldrb	r3, [r3, #20]
 800e358:	b25b      	sxtb	r3, r3
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	da18      	bge.n	800e390 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e35e:	697b      	ldr	r3, [r7, #20]
 800e360:	7858      	ldrb	r0, [r3, #1]
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	6a1a      	ldr	r2, [r3, #32]
 800e36c:	2301      	movs	r3, #1
 800e36e:	f7fd ff25 	bl	800c1bc <disk_write>
 800e372:	4603      	mov	r3, r0
 800e374:	2b00      	cmp	r3, #0
 800e376:	d004      	beq.n	800e382 <f_read+0x202>
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2201      	movs	r2, #1
 800e37c:	755a      	strb	r2, [r3, #21]
 800e37e:	2301      	movs	r3, #1
 800e380:	e059      	b.n	800e436 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	7d1b      	ldrb	r3, [r3, #20]
 800e386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e38a:	b2da      	uxtb	r2, r3
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	7858      	ldrb	r0, [r3, #1]
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e39a:	2301      	movs	r3, #1
 800e39c:	69ba      	ldr	r2, [r7, #24]
 800e39e:	f7fd feed 	bl	800c17c <disk_read>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d004      	beq.n	800e3b2 <f_read+0x232>
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	755a      	strb	r2, [r3, #21]
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	e041      	b.n	800e436 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	69ba      	ldr	r2, [r7, #24]
 800e3b6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	899b      	ldrh	r3, [r3, #12]
 800e3bc:	4618      	mov	r0, r3
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	699b      	ldr	r3, [r3, #24]
 800e3c2:	697a      	ldr	r2, [r7, #20]
 800e3c4:	8992      	ldrh	r2, [r2, #12]
 800e3c6:	fbb3 f1f2 	udiv	r1, r3, r2
 800e3ca:	fb02 f201 	mul.w	r2, r2, r1
 800e3ce:	1a9b      	subs	r3, r3, r2
 800e3d0:	1ac3      	subs	r3, r0, r3
 800e3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e3d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d901      	bls.n	800e3e0 <f_read+0x260>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	699b      	ldr	r3, [r3, #24]
 800e3ea:	697a      	ldr	r2, [r7, #20]
 800e3ec:	8992      	ldrh	r2, [r2, #12]
 800e3ee:	fbb3 f0f2 	udiv	r0, r3, r2
 800e3f2:	fb02 f200 	mul.w	r2, r2, r0
 800e3f6:	1a9b      	subs	r3, r3, r2
 800e3f8:	440b      	add	r3, r1
 800e3fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3fc:	4619      	mov	r1, r3
 800e3fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e400:	f7fd ff9c 	bl	800c33c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e408:	4413      	add	r3, r2
 800e40a:	627b      	str	r3, [r7, #36]	; 0x24
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	699a      	ldr	r2, [r3, #24]
 800e410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e412:	441a      	add	r2, r3
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	619a      	str	r2, [r3, #24]
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	681a      	ldr	r2, [r3, #0]
 800e41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41e:	441a      	add	r2, r3
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	601a      	str	r2, [r3, #0]
 800e424:	687a      	ldr	r2, [r7, #4]
 800e426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e428:	1ad3      	subs	r3, r2, r3
 800e42a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	f47f aee1 	bne.w	800e1f6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e434:	2300      	movs	r3, #0
}
 800e436:	4618      	mov	r0, r3
 800e438:	3738      	adds	r7, #56	; 0x38
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}

0800e43e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e43e:	b580      	push	{r7, lr}
 800e440:	b086      	sub	sp, #24
 800e442:	af00      	add	r7, sp, #0
 800e444:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f107 0208 	add.w	r2, r7, #8
 800e44c:	4611      	mov	r1, r2
 800e44e:	4618      	mov	r0, r3
 800e450:	f7ff fc4e 	bl	800dcf0 <validate>
 800e454:	4603      	mov	r3, r0
 800e456:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e458:	7dfb      	ldrb	r3, [r7, #23]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d168      	bne.n	800e530 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	7d1b      	ldrb	r3, [r3, #20]
 800e462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e466:	2b00      	cmp	r3, #0
 800e468:	d062      	beq.n	800e530 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	7d1b      	ldrb	r3, [r3, #20]
 800e46e:	b25b      	sxtb	r3, r3
 800e470:	2b00      	cmp	r3, #0
 800e472:	da15      	bge.n	800e4a0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	7858      	ldrb	r0, [r3, #1]
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6a1a      	ldr	r2, [r3, #32]
 800e482:	2301      	movs	r3, #1
 800e484:	f7fd fe9a 	bl	800c1bc <disk_write>
 800e488:	4603      	mov	r3, r0
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d001      	beq.n	800e492 <f_sync+0x54>
 800e48e:	2301      	movs	r3, #1
 800e490:	e04f      	b.n	800e532 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	7d1b      	ldrb	r3, [r3, #20]
 800e496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e49a:	b2da      	uxtb	r2, r3
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e4a0:	f7fa fae8 	bl	8008a74 <get_fattime>
 800e4a4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e4a6:	68ba      	ldr	r2, [r7, #8]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	4610      	mov	r0, r2
 800e4b0:	f7fe f972 	bl	800c798 <move_window>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e4b8:	7dfb      	ldrb	r3, [r7, #23]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d138      	bne.n	800e530 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4c2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	330b      	adds	r3, #11
 800e4c8:	781a      	ldrb	r2, [r3, #0]
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	330b      	adds	r3, #11
 800e4ce:	f042 0220 	orr.w	r2, r2, #32
 800e4d2:	b2d2      	uxtb	r2, r2
 800e4d4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	6818      	ldr	r0, [r3, #0]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	689b      	ldr	r3, [r3, #8]
 800e4de:	461a      	mov	r2, r3
 800e4e0:	68f9      	ldr	r1, [r7, #12]
 800e4e2:	f7fe ff00 	bl	800d2e6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	f103 021c 	add.w	r2, r3, #28
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	68db      	ldr	r3, [r3, #12]
 800e4f0:	4619      	mov	r1, r3
 800e4f2:	4610      	mov	r0, r2
 800e4f4:	f7fd fef6 	bl	800c2e4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	3316      	adds	r3, #22
 800e4fc:	6939      	ldr	r1, [r7, #16]
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7fd fef0 	bl	800c2e4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	3312      	adds	r3, #18
 800e508:	2100      	movs	r1, #0
 800e50a:	4618      	mov	r0, r3
 800e50c:	f7fd fecf 	bl	800c2ae <st_word>
					fs->wflag = 1;
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	2201      	movs	r2, #1
 800e514:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	4618      	mov	r0, r3
 800e51a:	f7fe f96b 	bl	800c7f4 <sync_fs>
 800e51e:	4603      	mov	r3, r0
 800e520:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	7d1b      	ldrb	r3, [r3, #20]
 800e526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e52a:	b2da      	uxtb	r2, r3
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e530:	7dfb      	ldrb	r3, [r7, #23]
}
 800e532:	4618      	mov	r0, r3
 800e534:	3718      	adds	r7, #24
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}

0800e53a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e53a:	b580      	push	{r7, lr}
 800e53c:	b084      	sub	sp, #16
 800e53e:	af00      	add	r7, sp, #0
 800e540:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f7ff ff7b 	bl	800e43e <f_sync>
 800e548:	4603      	mov	r3, r0
 800e54a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e54c:	7bfb      	ldrb	r3, [r7, #15]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d118      	bne.n	800e584 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f107 0208 	add.w	r2, r7, #8
 800e558:	4611      	mov	r1, r2
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7ff fbc8 	bl	800dcf0 <validate>
 800e560:	4603      	mov	r3, r0
 800e562:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e564:	7bfb      	ldrb	r3, [r7, #15]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d10c      	bne.n	800e584 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	691b      	ldr	r3, [r3, #16]
 800e56e:	4618      	mov	r0, r3
 800e570:	f7fe f86e 	bl	800c650 <dec_lock>
 800e574:	4603      	mov	r3, r0
 800e576:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e578:	7bfb      	ldrb	r3, [r7, #15]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d102      	bne.n	800e584 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2200      	movs	r2, #0
 800e582:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e584:	7bfb      	ldrb	r3, [r7, #15]
}
 800e586:	4618      	mov	r0, r3
 800e588:	3710      	adds	r7, #16
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}

0800e58e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e58e:	b580      	push	{r7, lr}
 800e590:	b090      	sub	sp, #64	; 0x40
 800e592:	af00      	add	r7, sp, #0
 800e594:	6078      	str	r0, [r7, #4]
 800e596:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f107 0208 	add.w	r2, r7, #8
 800e59e:	4611      	mov	r1, r2
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7ff fba5 	bl	800dcf0 <validate>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e5ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d103      	bne.n	800e5bc <f_lseek+0x2e>
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	7d5b      	ldrb	r3, [r3, #21]
 800e5b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e5bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d002      	beq.n	800e5ca <f_lseek+0x3c>
 800e5c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e5c8:	e201      	b.n	800e9ce <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	f000 80d9 	beq.w	800e786 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5da:	d15a      	bne.n	800e692 <f_lseek+0x104>
			tbl = fp->cltbl;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5e0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e4:	1d1a      	adds	r2, r3, #4
 800e5e6:	627a      	str	r2, [r7, #36]	; 0x24
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	617b      	str	r3, [r7, #20]
 800e5ec:	2302      	movs	r3, #2
 800e5ee:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	689b      	ldr	r3, [r3, #8]
 800e5f4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800e5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d03a      	beq.n	800e672 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5fe:	613b      	str	r3, [r7, #16]
 800e600:	2300      	movs	r3, #0
 800e602:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e606:	3302      	adds	r3, #2
 800e608:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800e60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e60c:	60fb      	str	r3, [r7, #12]
 800e60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e610:	3301      	adds	r3, #1
 800e612:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e618:	4618      	mov	r0, r3
 800e61a:	f7fe f97a 	bl	800c912 <get_fat>
 800e61e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e622:	2b01      	cmp	r3, #1
 800e624:	d804      	bhi.n	800e630 <f_lseek+0xa2>
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2202      	movs	r2, #2
 800e62a:	755a      	strb	r2, [r3, #21]
 800e62c:	2302      	movs	r3, #2
 800e62e:	e1ce      	b.n	800e9ce <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e632:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e636:	d104      	bne.n	800e642 <f_lseek+0xb4>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2201      	movs	r2, #1
 800e63c:	755a      	strb	r2, [r3, #21]
 800e63e:	2301      	movs	r3, #1
 800e640:	e1c5      	b.n	800e9ce <f_lseek+0x440>
					} while (cl == pcl + 1);
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	3301      	adds	r3, #1
 800e646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e648:	429a      	cmp	r2, r3
 800e64a:	d0de      	beq.n	800e60a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e64c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	429a      	cmp	r2, r3
 800e652:	d809      	bhi.n	800e668 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e656:	1d1a      	adds	r2, r3, #4
 800e658:	627a      	str	r2, [r7, #36]	; 0x24
 800e65a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e65c:	601a      	str	r2, [r3, #0]
 800e65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e660:	1d1a      	adds	r2, r3, #4
 800e662:	627a      	str	r2, [r7, #36]	; 0x24
 800e664:	693a      	ldr	r2, [r7, #16]
 800e666:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	699b      	ldr	r3, [r3, #24]
 800e66c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e66e:	429a      	cmp	r2, r3
 800e670:	d3c4      	bcc.n	800e5fc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e678:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e67a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	429a      	cmp	r2, r3
 800e680:	d803      	bhi.n	800e68a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e684:	2200      	movs	r2, #0
 800e686:	601a      	str	r2, [r3, #0]
 800e688:	e19f      	b.n	800e9ca <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e68a:	2311      	movs	r3, #17
 800e68c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e690:	e19b      	b.n	800e9ca <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	68db      	ldr	r3, [r3, #12]
 800e696:	683a      	ldr	r2, [r7, #0]
 800e698:	429a      	cmp	r2, r3
 800e69a:	d902      	bls.n	800e6a2 <f_lseek+0x114>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	68db      	ldr	r3, [r3, #12]
 800e6a0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	683a      	ldr	r2, [r7, #0]
 800e6a6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	f000 818d 	beq.w	800e9ca <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	3b01      	subs	r3, #1
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f7fe fc18 	bl	800ceec <clmt_clust>
 800e6bc:	4602      	mov	r2, r0
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e6c2:	68ba      	ldr	r2, [r7, #8]
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	69db      	ldr	r3, [r3, #28]
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	4610      	mov	r0, r2
 800e6cc:	f7fe f902 	bl	800c8d4 <clust2sect>
 800e6d0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e6d2:	69bb      	ldr	r3, [r7, #24]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d104      	bne.n	800e6e2 <f_lseek+0x154>
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2202      	movs	r2, #2
 800e6dc:	755a      	strb	r2, [r3, #21]
 800e6de:	2302      	movs	r3, #2
 800e6e0:	e175      	b.n	800e9ce <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	3b01      	subs	r3, #1
 800e6e6:	68ba      	ldr	r2, [r7, #8]
 800e6e8:	8992      	ldrh	r2, [r2, #12]
 800e6ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800e6ee:	68ba      	ldr	r2, [r7, #8]
 800e6f0:	8952      	ldrh	r2, [r2, #10]
 800e6f2:	3a01      	subs	r2, #1
 800e6f4:	4013      	ands	r3, r2
 800e6f6:	69ba      	ldr	r2, [r7, #24]
 800e6f8:	4413      	add	r3, r2
 800e6fa:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	699b      	ldr	r3, [r3, #24]
 800e700:	68ba      	ldr	r2, [r7, #8]
 800e702:	8992      	ldrh	r2, [r2, #12]
 800e704:	fbb3 f1f2 	udiv	r1, r3, r2
 800e708:	fb02 f201 	mul.w	r2, r2, r1
 800e70c:	1a9b      	subs	r3, r3, r2
 800e70e:	2b00      	cmp	r3, #0
 800e710:	f000 815b 	beq.w	800e9ca <f_lseek+0x43c>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6a1b      	ldr	r3, [r3, #32]
 800e718:	69ba      	ldr	r2, [r7, #24]
 800e71a:	429a      	cmp	r2, r3
 800e71c:	f000 8155 	beq.w	800e9ca <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	7d1b      	ldrb	r3, [r3, #20]
 800e724:	b25b      	sxtb	r3, r3
 800e726:	2b00      	cmp	r3, #0
 800e728:	da18      	bge.n	800e75c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	7858      	ldrb	r0, [r3, #1]
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6a1a      	ldr	r2, [r3, #32]
 800e738:	2301      	movs	r3, #1
 800e73a:	f7fd fd3f 	bl	800c1bc <disk_write>
 800e73e:	4603      	mov	r3, r0
 800e740:	2b00      	cmp	r3, #0
 800e742:	d004      	beq.n	800e74e <f_lseek+0x1c0>
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2201      	movs	r2, #1
 800e748:	755a      	strb	r2, [r3, #21]
 800e74a:	2301      	movs	r3, #1
 800e74c:	e13f      	b.n	800e9ce <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	7d1b      	ldrb	r3, [r3, #20]
 800e752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e756:	b2da      	uxtb	r2, r3
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	7858      	ldrb	r0, [r3, #1]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e766:	2301      	movs	r3, #1
 800e768:	69ba      	ldr	r2, [r7, #24]
 800e76a:	f7fd fd07 	bl	800c17c <disk_read>
 800e76e:	4603      	mov	r3, r0
 800e770:	2b00      	cmp	r3, #0
 800e772:	d004      	beq.n	800e77e <f_lseek+0x1f0>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2201      	movs	r2, #1
 800e778:	755a      	strb	r2, [r3, #21]
 800e77a:	2301      	movs	r3, #1
 800e77c:	e127      	b.n	800e9ce <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	69ba      	ldr	r2, [r7, #24]
 800e782:	621a      	str	r2, [r3, #32]
 800e784:	e121      	b.n	800e9ca <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	68db      	ldr	r3, [r3, #12]
 800e78a:	683a      	ldr	r2, [r7, #0]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d908      	bls.n	800e7a2 <f_lseek+0x214>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	7d1b      	ldrb	r3, [r3, #20]
 800e794:	f003 0302 	and.w	r3, r3, #2
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d102      	bne.n	800e7a2 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	699b      	ldr	r3, [r3, #24]
 800e7a6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	637b      	str	r3, [r7, #52]	; 0x34
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7b0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	f000 80b5 	beq.w	800e924 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	895b      	ldrh	r3, [r3, #10]
 800e7be:	461a      	mov	r2, r3
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	899b      	ldrh	r3, [r3, #12]
 800e7c4:	fb03 f302 	mul.w	r3, r3, r2
 800e7c8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e7ca:	6a3b      	ldr	r3, [r7, #32]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d01b      	beq.n	800e808 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	1e5a      	subs	r2, r3, #1
 800e7d4:	69fb      	ldr	r3, [r7, #28]
 800e7d6:	fbb2 f2f3 	udiv	r2, r2, r3
 800e7da:	6a3b      	ldr	r3, [r7, #32]
 800e7dc:	1e59      	subs	r1, r3, #1
 800e7de:	69fb      	ldr	r3, [r7, #28]
 800e7e0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d30f      	bcc.n	800e808 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e7e8:	6a3b      	ldr	r3, [r7, #32]
 800e7ea:	1e5a      	subs	r2, r3, #1
 800e7ec:	69fb      	ldr	r3, [r7, #28]
 800e7ee:	425b      	negs	r3, r3
 800e7f0:	401a      	ands	r2, r3
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	699b      	ldr	r3, [r3, #24]
 800e7fa:	683a      	ldr	r2, [r7, #0]
 800e7fc:	1ad3      	subs	r3, r2, r3
 800e7fe:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	69db      	ldr	r3, [r3, #28]
 800e804:	63bb      	str	r3, [r7, #56]	; 0x38
 800e806:	e022      	b.n	800e84e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	689b      	ldr	r3, [r3, #8]
 800e80c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e810:	2b00      	cmp	r3, #0
 800e812:	d119      	bne.n	800e848 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2100      	movs	r1, #0
 800e818:	4618      	mov	r0, r3
 800e81a:	f7fe facf 	bl	800cdbc <create_chain>
 800e81e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e822:	2b01      	cmp	r3, #1
 800e824:	d104      	bne.n	800e830 <f_lseek+0x2a2>
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2202      	movs	r2, #2
 800e82a:	755a      	strb	r2, [r3, #21]
 800e82c:	2302      	movs	r3, #2
 800e82e:	e0ce      	b.n	800e9ce <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e836:	d104      	bne.n	800e842 <f_lseek+0x2b4>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2201      	movs	r2, #1
 800e83c:	755a      	strb	r2, [r3, #21]
 800e83e:	2301      	movs	r3, #1
 800e840:	e0c5      	b.n	800e9ce <f_lseek+0x440>
					fp->obj.sclust = clst;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e846:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e84c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e850:	2b00      	cmp	r3, #0
 800e852:	d067      	beq.n	800e924 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800e854:	e03a      	b.n	800e8cc <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800e856:	683a      	ldr	r2, [r7, #0]
 800e858:	69fb      	ldr	r3, [r7, #28]
 800e85a:	1ad3      	subs	r3, r2, r3
 800e85c:	603b      	str	r3, [r7, #0]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	699a      	ldr	r2, [r3, #24]
 800e862:	69fb      	ldr	r3, [r7, #28]
 800e864:	441a      	add	r2, r3
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	7d1b      	ldrb	r3, [r3, #20]
 800e86e:	f003 0302 	and.w	r3, r3, #2
 800e872:	2b00      	cmp	r3, #0
 800e874:	d00b      	beq.n	800e88e <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e87a:	4618      	mov	r0, r3
 800e87c:	f7fe fa9e 	bl	800cdbc <create_chain>
 800e880:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e884:	2b00      	cmp	r3, #0
 800e886:	d108      	bne.n	800e89a <f_lseek+0x30c>
							ofs = 0; break;
 800e888:	2300      	movs	r3, #0
 800e88a:	603b      	str	r3, [r7, #0]
 800e88c:	e022      	b.n	800e8d4 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e892:	4618      	mov	r0, r3
 800e894:	f7fe f83d 	bl	800c912 <get_fat>
 800e898:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8a0:	d104      	bne.n	800e8ac <f_lseek+0x31e>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	755a      	strb	r2, [r3, #21]
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	e090      	b.n	800e9ce <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ae:	2b01      	cmp	r3, #1
 800e8b0:	d904      	bls.n	800e8bc <f_lseek+0x32e>
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	699b      	ldr	r3, [r3, #24]
 800e8b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d304      	bcc.n	800e8c6 <f_lseek+0x338>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2202      	movs	r2, #2
 800e8c0:	755a      	strb	r2, [r3, #21]
 800e8c2:	2302      	movs	r3, #2
 800e8c4:	e083      	b.n	800e9ce <f_lseek+0x440>
					fp->clust = clst;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8ca:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e8cc:	683a      	ldr	r2, [r7, #0]
 800e8ce:	69fb      	ldr	r3, [r7, #28]
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d8c0      	bhi.n	800e856 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	699a      	ldr	r2, [r3, #24]
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	441a      	add	r2, r3
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	899b      	ldrh	r3, [r3, #12]
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	fbb3 f1f2 	udiv	r1, r3, r2
 800e8ec:	fb02 f201 	mul.w	r2, r2, r1
 800e8f0:	1a9b      	subs	r3, r3, r2
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d016      	beq.n	800e924 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7fd ffea 	bl	800c8d4 <clust2sect>
 800e900:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e904:	2b00      	cmp	r3, #0
 800e906:	d104      	bne.n	800e912 <f_lseek+0x384>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2202      	movs	r2, #2
 800e90c:	755a      	strb	r2, [r3, #21]
 800e90e:	2302      	movs	r3, #2
 800e910:	e05d      	b.n	800e9ce <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	899b      	ldrh	r3, [r3, #12]
 800e916:	461a      	mov	r2, r3
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e91e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e920:	4413      	add	r3, r2
 800e922:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	699a      	ldr	r2, [r3, #24]
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d90a      	bls.n	800e946 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	699a      	ldr	r2, [r3, #24]
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	7d1b      	ldrb	r3, [r3, #20]
 800e93c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e940:	b2da      	uxtb	r2, r3
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	699b      	ldr	r3, [r3, #24]
 800e94a:	68ba      	ldr	r2, [r7, #8]
 800e94c:	8992      	ldrh	r2, [r2, #12]
 800e94e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e952:	fb02 f201 	mul.w	r2, r2, r1
 800e956:	1a9b      	subs	r3, r3, r2
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d036      	beq.n	800e9ca <f_lseek+0x43c>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6a1b      	ldr	r3, [r3, #32]
 800e960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e962:	429a      	cmp	r2, r3
 800e964:	d031      	beq.n	800e9ca <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	7d1b      	ldrb	r3, [r3, #20]
 800e96a:	b25b      	sxtb	r3, r3
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	da18      	bge.n	800e9a2 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	7858      	ldrb	r0, [r3, #1]
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6a1a      	ldr	r2, [r3, #32]
 800e97e:	2301      	movs	r3, #1
 800e980:	f7fd fc1c 	bl	800c1bc <disk_write>
 800e984:	4603      	mov	r3, r0
 800e986:	2b00      	cmp	r3, #0
 800e988:	d004      	beq.n	800e994 <f_lseek+0x406>
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2201      	movs	r2, #1
 800e98e:	755a      	strb	r2, [r3, #21]
 800e990:	2301      	movs	r3, #1
 800e992:	e01c      	b.n	800e9ce <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	7d1b      	ldrb	r3, [r3, #20]
 800e998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e99c:	b2da      	uxtb	r2, r3
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	7858      	ldrb	r0, [r3, #1]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9b0:	f7fd fbe4 	bl	800c17c <disk_read>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d004      	beq.n	800e9c4 <f_lseek+0x436>
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2201      	movs	r2, #1
 800e9be:	755a      	strb	r2, [r3, #21]
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	e004      	b.n	800e9ce <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9c8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e9ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3740      	adds	r7, #64	; 0x40
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}
	...

0800e9d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b087      	sub	sp, #28
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	60f8      	str	r0, [r7, #12]
 800e9e0:	60b9      	str	r1, [r7, #8]
 800e9e2:	4613      	mov	r3, r2
 800e9e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e9ee:	4b1f      	ldr	r3, [pc, #124]	; (800ea6c <FATFS_LinkDriverEx+0x94>)
 800e9f0:	7a5b      	ldrb	r3, [r3, #9]
 800e9f2:	b2db      	uxtb	r3, r3
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d131      	bne.n	800ea5c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e9f8:	4b1c      	ldr	r3, [pc, #112]	; (800ea6c <FATFS_LinkDriverEx+0x94>)
 800e9fa:	7a5b      	ldrb	r3, [r3, #9]
 800e9fc:	b2db      	uxtb	r3, r3
 800e9fe:	461a      	mov	r2, r3
 800ea00:	4b1a      	ldr	r3, [pc, #104]	; (800ea6c <FATFS_LinkDriverEx+0x94>)
 800ea02:	2100      	movs	r1, #0
 800ea04:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ea06:	4b19      	ldr	r3, [pc, #100]	; (800ea6c <FATFS_LinkDriverEx+0x94>)
 800ea08:	7a5b      	ldrb	r3, [r3, #9]
 800ea0a:	b2db      	uxtb	r3, r3
 800ea0c:	4a17      	ldr	r2, [pc, #92]	; (800ea6c <FATFS_LinkDriverEx+0x94>)
 800ea0e:	009b      	lsls	r3, r3, #2
 800ea10:	4413      	add	r3, r2
 800ea12:	68fa      	ldr	r2, [r7, #12]
 800ea14:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ea16:	4b15      	ldr	r3, [pc, #84]	; (800ea6c <FATFS_LinkDriverEx+0x94>)
 800ea18:	7a5b      	ldrb	r3, [r3, #9]
 800ea1a:	b2db      	uxtb	r3, r3
 800ea1c:	461a      	mov	r2, r3
 800ea1e:	4b13      	ldr	r3, [pc, #76]	; (800ea6c <FATFS_LinkDriverEx+0x94>)
 800ea20:	4413      	add	r3, r2
 800ea22:	79fa      	ldrb	r2, [r7, #7]
 800ea24:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ea26:	4b11      	ldr	r3, [pc, #68]	; (800ea6c <FATFS_LinkDriverEx+0x94>)
 800ea28:	7a5b      	ldrb	r3, [r3, #9]
 800ea2a:	b2db      	uxtb	r3, r3
 800ea2c:	1c5a      	adds	r2, r3, #1
 800ea2e:	b2d1      	uxtb	r1, r2
 800ea30:	4a0e      	ldr	r2, [pc, #56]	; (800ea6c <FATFS_LinkDriverEx+0x94>)
 800ea32:	7251      	strb	r1, [r2, #9]
 800ea34:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ea36:	7dbb      	ldrb	r3, [r7, #22]
 800ea38:	3330      	adds	r3, #48	; 0x30
 800ea3a:	b2da      	uxtb	r2, r3
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	3301      	adds	r3, #1
 800ea44:	223a      	movs	r2, #58	; 0x3a
 800ea46:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	3302      	adds	r3, #2
 800ea4c:	222f      	movs	r2, #47	; 0x2f
 800ea4e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	3303      	adds	r3, #3
 800ea54:	2200      	movs	r2, #0
 800ea56:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ea5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	371c      	adds	r7, #28
 800ea62:	46bd      	mov	sp, r7
 800ea64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea68:	4770      	bx	lr
 800ea6a:	bf00      	nop
 800ea6c:	20003130 	.word	0x20003130

0800ea70 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	6839      	ldr	r1, [r7, #0]
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f7ff ffaa 	bl	800e9d8 <FATFS_LinkDriverEx>
 800ea84:	4603      	mov	r3, r0
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3708      	adds	r7, #8
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
	...

0800ea90 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ea94:	2201      	movs	r2, #1
 800ea96:	490e      	ldr	r1, [pc, #56]	; (800ead0 <MX_USB_HOST_Init+0x40>)
 800ea98:	480e      	ldr	r0, [pc, #56]	; (800ead4 <MX_USB_HOST_Init+0x44>)
 800ea9a:	f7fb fe0d 	bl	800a6b8 <USBH_Init>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d001      	beq.n	800eaa8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800eaa4:	f7f2 fb02 	bl	80010ac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800eaa8:	490b      	ldr	r1, [pc, #44]	; (800ead8 <MX_USB_HOST_Init+0x48>)
 800eaaa:	480a      	ldr	r0, [pc, #40]	; (800ead4 <MX_USB_HOST_Init+0x44>)
 800eaac:	f7fb fea0 	bl	800a7f0 <USBH_RegisterClass>
 800eab0:	4603      	mov	r3, r0
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d001      	beq.n	800eaba <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800eab6:	f7f2 faf9 	bl	80010ac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800eaba:	4806      	ldr	r0, [pc, #24]	; (800ead4 <MX_USB_HOST_Init+0x44>)
 800eabc:	f7fb ff86 	bl	800a9cc <USBH_Start>
 800eac0:	4603      	mov	r3, r0
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d001      	beq.n	800eaca <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800eac6:	f7f2 faf1 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800eaca:	bf00      	nop
 800eacc:	bd80      	pop	{r7, pc}
 800eace:	bf00      	nop
 800ead0:	0800eaf1 	.word	0x0800eaf1
 800ead4:	20007490 	.word	0x20007490
 800ead8:	20000024 	.word	0x20000024

0800eadc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800eae0:	4802      	ldr	r0, [pc, #8]	; (800eaec <MX_USB_HOST_Process+0x10>)
 800eae2:	f7fb ff83 	bl	800a9ec <USBH_Process>
}
 800eae6:	bf00      	nop
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	bf00      	nop
 800eaec:	20007490 	.word	0x20007490

0800eaf0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b083      	sub	sp, #12
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	460b      	mov	r3, r1
 800eafa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800eafc:	78fb      	ldrb	r3, [r7, #3]
 800eafe:	3b01      	subs	r3, #1
 800eb00:	2b04      	cmp	r3, #4
 800eb02:	d819      	bhi.n	800eb38 <USBH_UserProcess+0x48>
 800eb04:	a201      	add	r2, pc, #4	; (adr r2, 800eb0c <USBH_UserProcess+0x1c>)
 800eb06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb0a:	bf00      	nop
 800eb0c:	0800eb39 	.word	0x0800eb39
 800eb10:	0800eb29 	.word	0x0800eb29
 800eb14:	0800eb39 	.word	0x0800eb39
 800eb18:	0800eb31 	.word	0x0800eb31
 800eb1c:	0800eb21 	.word	0x0800eb21
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800eb20:	4b09      	ldr	r3, [pc, #36]	; (800eb48 <USBH_UserProcess+0x58>)
 800eb22:	2203      	movs	r2, #3
 800eb24:	701a      	strb	r2, [r3, #0]
  break;
 800eb26:	e008      	b.n	800eb3a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800eb28:	4b07      	ldr	r3, [pc, #28]	; (800eb48 <USBH_UserProcess+0x58>)
 800eb2a:	2202      	movs	r2, #2
 800eb2c:	701a      	strb	r2, [r3, #0]
  break;
 800eb2e:	e004      	b.n	800eb3a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800eb30:	4b05      	ldr	r3, [pc, #20]	; (800eb48 <USBH_UserProcess+0x58>)
 800eb32:	2201      	movs	r2, #1
 800eb34:	701a      	strb	r2, [r3, #0]
  break;
 800eb36:	e000      	b.n	800eb3a <USBH_UserProcess+0x4a>

  default:
  break;
 800eb38:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800eb3a:	bf00      	nop
 800eb3c:	370c      	adds	r7, #12
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb44:	4770      	bx	lr
 800eb46:	bf00      	nop
 800eb48:	2000313c 	.word	0x2000313c

0800eb4c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b08a      	sub	sp, #40	; 0x28
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb54:	f107 0314 	add.w	r3, r7, #20
 800eb58:	2200      	movs	r2, #0
 800eb5a:	601a      	str	r2, [r3, #0]
 800eb5c:	605a      	str	r2, [r3, #4]
 800eb5e:	609a      	str	r2, [r3, #8]
 800eb60:	60da      	str	r2, [r3, #12]
 800eb62:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eb6c:	d147      	bne.n	800ebfe <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eb6e:	2300      	movs	r3, #0
 800eb70:	613b      	str	r3, [r7, #16]
 800eb72:	4b25      	ldr	r3, [pc, #148]	; (800ec08 <HAL_HCD_MspInit+0xbc>)
 800eb74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb76:	4a24      	ldr	r2, [pc, #144]	; (800ec08 <HAL_HCD_MspInit+0xbc>)
 800eb78:	f043 0301 	orr.w	r3, r3, #1
 800eb7c:	6313      	str	r3, [r2, #48]	; 0x30
 800eb7e:	4b22      	ldr	r3, [pc, #136]	; (800ec08 <HAL_HCD_MspInit+0xbc>)
 800eb80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb82:	f003 0301 	and.w	r3, r3, #1
 800eb86:	613b      	str	r3, [r7, #16]
 800eb88:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800eb8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800eb90:	2300      	movs	r3, #0
 800eb92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb94:	2300      	movs	r3, #0
 800eb96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eb98:	f107 0314 	add.w	r3, r7, #20
 800eb9c:	4619      	mov	r1, r3
 800eb9e:	481b      	ldr	r0, [pc, #108]	; (800ec0c <HAL_HCD_MspInit+0xc0>)
 800eba0:	f7f4 fcbe 	bl	8003520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800eba4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800eba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ebaa:	2302      	movs	r3, #2
 800ebac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ebb2:	2303      	movs	r3, #3
 800ebb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ebb6:	230a      	movs	r3, #10
 800ebb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ebba:	f107 0314 	add.w	r3, r7, #20
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	4812      	ldr	r0, [pc, #72]	; (800ec0c <HAL_HCD_MspInit+0xc0>)
 800ebc2:	f7f4 fcad 	bl	8003520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ebc6:	4b10      	ldr	r3, [pc, #64]	; (800ec08 <HAL_HCD_MspInit+0xbc>)
 800ebc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebca:	4a0f      	ldr	r2, [pc, #60]	; (800ec08 <HAL_HCD_MspInit+0xbc>)
 800ebcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebd0:	6353      	str	r3, [r2, #52]	; 0x34
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	60fb      	str	r3, [r7, #12]
 800ebd6:	4b0c      	ldr	r3, [pc, #48]	; (800ec08 <HAL_HCD_MspInit+0xbc>)
 800ebd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebda:	4a0b      	ldr	r2, [pc, #44]	; (800ec08 <HAL_HCD_MspInit+0xbc>)
 800ebdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ebe0:	6453      	str	r3, [r2, #68]	; 0x44
 800ebe2:	4b09      	ldr	r3, [pc, #36]	; (800ec08 <HAL_HCD_MspInit+0xbc>)
 800ebe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ebea:	60fb      	str	r3, [r7, #12]
 800ebec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ebee:	2200      	movs	r2, #0
 800ebf0:	2100      	movs	r1, #0
 800ebf2:	2043      	movs	r0, #67	; 0x43
 800ebf4:	f7f2 ff95 	bl	8001b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ebf8:	2043      	movs	r0, #67	; 0x43
 800ebfa:	f7f2 ffae 	bl	8001b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ebfe:	bf00      	nop
 800ec00:	3728      	adds	r7, #40	; 0x28
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}
 800ec06:	bf00      	nop
 800ec08:	40023800 	.word	0x40023800
 800ec0c:	40020000 	.word	0x40020000

0800ec10 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f7fc fc03 	bl	800b42a <USBH_LL_IncTimer>
}
 800ec24:	bf00      	nop
 800ec26:	3708      	adds	r7, #8
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7fc fc3b 	bl	800b4b6 <USBH_LL_Connect>
}
 800ec40:	bf00      	nop
 800ec42:	3708      	adds	r7, #8
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}

0800ec48 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b082      	sub	sp, #8
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7fc fc44 	bl	800b4e4 <USBH_LL_Disconnect>
}
 800ec5c:	bf00      	nop
 800ec5e:	3708      	adds	r7, #8
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}

0800ec64 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b083      	sub	sp, #12
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	70fb      	strb	r3, [r7, #3]
 800ec70:	4613      	mov	r3, r2
 800ec72:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ec74:	bf00      	nop
 800ec76:	370c      	adds	r7, #12
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7e:	4770      	bx	lr

0800ec80 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b082      	sub	sp, #8
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7fc fbf5 	bl	800b47e <USBH_LL_PortEnabled>
}
 800ec94:	bf00      	nop
 800ec96:	3708      	adds	r7, #8
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}

0800ec9c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b082      	sub	sp, #8
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7fc fbf5 	bl	800b49a <USBH_LL_PortDisabled>
}
 800ecb0:	bf00      	nop
 800ecb2:	3708      	adds	r7, #8
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}

0800ecb8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b082      	sub	sp, #8
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ecc6:	2b01      	cmp	r3, #1
 800ecc8:	d12a      	bne.n	800ed20 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ecca:	4a18      	ldr	r2, [pc, #96]	; (800ed2c <USBH_LL_Init+0x74>)
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	4a15      	ldr	r2, [pc, #84]	; (800ed2c <USBH_LL_Init+0x74>)
 800ecd6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ecda:	4b14      	ldr	r3, [pc, #80]	; (800ed2c <USBH_LL_Init+0x74>)
 800ecdc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ece0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ece2:	4b12      	ldr	r3, [pc, #72]	; (800ed2c <USBH_LL_Init+0x74>)
 800ece4:	2208      	movs	r2, #8
 800ece6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ece8:	4b10      	ldr	r3, [pc, #64]	; (800ed2c <USBH_LL_Init+0x74>)
 800ecea:	2201      	movs	r2, #1
 800ecec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ecee:	4b0f      	ldr	r3, [pc, #60]	; (800ed2c <USBH_LL_Init+0x74>)
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ecf4:	4b0d      	ldr	r3, [pc, #52]	; (800ed2c <USBH_LL_Init+0x74>)
 800ecf6:	2202      	movs	r2, #2
 800ecf8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ecfa:	4b0c      	ldr	r3, [pc, #48]	; (800ed2c <USBH_LL_Init+0x74>)
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ed00:	480a      	ldr	r0, [pc, #40]	; (800ed2c <USBH_LL_Init+0x74>)
 800ed02:	f7f4 fda9 	bl	8003858 <HAL_HCD_Init>
 800ed06:	4603      	mov	r3, r0
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d001      	beq.n	800ed10 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ed0c:	f7f2 f9ce 	bl	80010ac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ed10:	4806      	ldr	r0, [pc, #24]	; (800ed2c <USBH_LL_Init+0x74>)
 800ed12:	f7f5 f98c 	bl	800402e <HAL_HCD_GetCurrentFrame>
 800ed16:	4603      	mov	r3, r0
 800ed18:	4619      	mov	r1, r3
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f7fc fb76 	bl	800b40c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ed20:	2300      	movs	r3, #0
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3708      	adds	r7, #8
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}
 800ed2a:	bf00      	nop
 800ed2c:	20007868 	.word	0x20007868

0800ed30 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b084      	sub	sp, #16
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7f5 f8fb 	bl	8003f42 <HAL_HCD_Start>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ed50:	7bfb      	ldrb	r3, [r7, #15]
 800ed52:	4618      	mov	r0, r3
 800ed54:	f000 f982 	bl	800f05c <USBH_Get_USB_Status>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3710      	adds	r7, #16
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}

0800ed66 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ed66:	b580      	push	{r7, lr}
 800ed68:	b084      	sub	sp, #16
 800ed6a:	af00      	add	r7, sp, #0
 800ed6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ed72:	2300      	movs	r3, #0
 800ed74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7f5 f903 	bl	8003f88 <HAL_HCD_Stop>
 800ed82:	4603      	mov	r3, r0
 800ed84:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ed86:	7bfb      	ldrb	r3, [r7, #15]
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f000 f967 	bl	800f05c <USBH_Get_USB_Status>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed92:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3710      	adds	r7, #16
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b084      	sub	sp, #16
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800eda4:	2301      	movs	r3, #1
 800eda6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800edae:	4618      	mov	r0, r3
 800edb0:	f7f5 f94b 	bl	800404a <HAL_HCD_GetCurrentSpeed>
 800edb4:	4603      	mov	r3, r0
 800edb6:	2b02      	cmp	r3, #2
 800edb8:	d00c      	beq.n	800edd4 <USBH_LL_GetSpeed+0x38>
 800edba:	2b02      	cmp	r3, #2
 800edbc:	d80d      	bhi.n	800edda <USBH_LL_GetSpeed+0x3e>
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d002      	beq.n	800edc8 <USBH_LL_GetSpeed+0x2c>
 800edc2:	2b01      	cmp	r3, #1
 800edc4:	d003      	beq.n	800edce <USBH_LL_GetSpeed+0x32>
 800edc6:	e008      	b.n	800edda <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800edc8:	2300      	movs	r3, #0
 800edca:	73fb      	strb	r3, [r7, #15]
    break;
 800edcc:	e008      	b.n	800ede0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800edce:	2301      	movs	r3, #1
 800edd0:	73fb      	strb	r3, [r7, #15]
    break;
 800edd2:	e005      	b.n	800ede0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800edd4:	2302      	movs	r3, #2
 800edd6:	73fb      	strb	r3, [r7, #15]
    break;
 800edd8:	e002      	b.n	800ede0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800edda:	2301      	movs	r3, #1
 800eddc:	73fb      	strb	r3, [r7, #15]
    break;
 800edde:	bf00      	nop
  }
  return  speed;
 800ede0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3710      	adds	r7, #16
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}

0800edea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800edea:	b580      	push	{r7, lr}
 800edec:	b084      	sub	sp, #16
 800edee:	af00      	add	r7, sp, #0
 800edf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edf2:	2300      	movs	r3, #0
 800edf4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800edf6:	2300      	movs	r3, #0
 800edf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ee00:	4618      	mov	r0, r3
 800ee02:	f7f5 f8de 	bl	8003fc2 <HAL_HCD_ResetPort>
 800ee06:	4603      	mov	r3, r0
 800ee08:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ee0a:	7bfb      	ldrb	r3, [r7, #15]
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f000 f925 	bl	800f05c <USBH_Get_USB_Status>
 800ee12:	4603      	mov	r3, r0
 800ee14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee16:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3710      	adds	r7, #16
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}

0800ee20 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	460b      	mov	r3, r1
 800ee2a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ee32:	78fa      	ldrb	r2, [r7, #3]
 800ee34:	4611      	mov	r1, r2
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7f5 f8e5 	bl	8004006 <HAL_HCD_HC_GetXferCount>
 800ee3c:	4603      	mov	r3, r0
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3708      	adds	r7, #8
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}

0800ee46 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ee46:	b590      	push	{r4, r7, lr}
 800ee48:	b089      	sub	sp, #36	; 0x24
 800ee4a:	af04      	add	r7, sp, #16
 800ee4c:	6078      	str	r0, [r7, #4]
 800ee4e:	4608      	mov	r0, r1
 800ee50:	4611      	mov	r1, r2
 800ee52:	461a      	mov	r2, r3
 800ee54:	4603      	mov	r3, r0
 800ee56:	70fb      	strb	r3, [r7, #3]
 800ee58:	460b      	mov	r3, r1
 800ee5a:	70bb      	strb	r3, [r7, #2]
 800ee5c:	4613      	mov	r3, r2
 800ee5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee60:	2300      	movs	r3, #0
 800ee62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ee64:	2300      	movs	r3, #0
 800ee66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ee6e:	787c      	ldrb	r4, [r7, #1]
 800ee70:	78ba      	ldrb	r2, [r7, #2]
 800ee72:	78f9      	ldrb	r1, [r7, #3]
 800ee74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ee76:	9302      	str	r3, [sp, #8]
 800ee78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ee7c:	9301      	str	r3, [sp, #4]
 800ee7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ee82:	9300      	str	r3, [sp, #0]
 800ee84:	4623      	mov	r3, r4
 800ee86:	f7f4 fd49 	bl	800391c <HAL_HCD_HC_Init>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ee8e:	7bfb      	ldrb	r3, [r7, #15]
 800ee90:	4618      	mov	r0, r3
 800ee92:	f000 f8e3 	bl	800f05c <USBH_Get_USB_Status>
 800ee96:	4603      	mov	r3, r0
 800ee98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3714      	adds	r7, #20
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd90      	pop	{r4, r7, pc}

0800eea4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b084      	sub	sp, #16
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	460b      	mov	r3, r1
 800eeae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eebe:	78fa      	ldrb	r2, [r7, #3]
 800eec0:	4611      	mov	r1, r2
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7f4 fdb9 	bl	8003a3a <HAL_HCD_HC_Halt>
 800eec8:	4603      	mov	r3, r0
 800eeca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eecc:	7bfb      	ldrb	r3, [r7, #15]
 800eece:	4618      	mov	r0, r3
 800eed0:	f000 f8c4 	bl	800f05c <USBH_Get_USB_Status>
 800eed4:	4603      	mov	r3, r0
 800eed6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eed8:	7bbb      	ldrb	r3, [r7, #14]
}
 800eeda:	4618      	mov	r0, r3
 800eedc:	3710      	adds	r7, #16
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}

0800eee2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800eee2:	b590      	push	{r4, r7, lr}
 800eee4:	b089      	sub	sp, #36	; 0x24
 800eee6:	af04      	add	r7, sp, #16
 800eee8:	6078      	str	r0, [r7, #4]
 800eeea:	4608      	mov	r0, r1
 800eeec:	4611      	mov	r1, r2
 800eeee:	461a      	mov	r2, r3
 800eef0:	4603      	mov	r3, r0
 800eef2:	70fb      	strb	r3, [r7, #3]
 800eef4:	460b      	mov	r3, r1
 800eef6:	70bb      	strb	r3, [r7, #2]
 800eef8:	4613      	mov	r3, r2
 800eefa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eefc:	2300      	movs	r3, #0
 800eefe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ef00:	2300      	movs	r3, #0
 800ef02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ef0a:	787c      	ldrb	r4, [r7, #1]
 800ef0c:	78ba      	ldrb	r2, [r7, #2]
 800ef0e:	78f9      	ldrb	r1, [r7, #3]
 800ef10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ef14:	9303      	str	r3, [sp, #12]
 800ef16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ef18:	9302      	str	r3, [sp, #8]
 800ef1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef1c:	9301      	str	r3, [sp, #4]
 800ef1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef22:	9300      	str	r3, [sp, #0]
 800ef24:	4623      	mov	r3, r4
 800ef26:	f7f4 fdab 	bl	8003a80 <HAL_HCD_HC_SubmitRequest>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ef2e:	7bfb      	ldrb	r3, [r7, #15]
 800ef30:	4618      	mov	r0, r3
 800ef32:	f000 f893 	bl	800f05c <USBH_Get_USB_Status>
 800ef36:	4603      	mov	r3, r0
 800ef38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	3714      	adds	r7, #20
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd90      	pop	{r4, r7, pc}

0800ef44 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b082      	sub	sp, #8
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
 800ef4c:	460b      	mov	r3, r1
 800ef4e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ef56:	78fa      	ldrb	r2, [r7, #3]
 800ef58:	4611      	mov	r1, r2
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7f5 f83f 	bl	8003fde <HAL_HCD_HC_GetURBState>
 800ef60:	4603      	mov	r3, r0
}
 800ef62:	4618      	mov	r0, r3
 800ef64:	3708      	adds	r7, #8
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}

0800ef6a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ef6a:	b580      	push	{r7, lr}
 800ef6c:	b082      	sub	sp, #8
 800ef6e:	af00      	add	r7, sp, #0
 800ef70:	6078      	str	r0, [r7, #4]
 800ef72:	460b      	mov	r3, r1
 800ef74:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800ef76:	20c8      	movs	r0, #200	; 0xc8
 800ef78:	f7f2 fcd4 	bl	8001924 <HAL_Delay>
  return USBH_OK;
 800ef7c:	2300      	movs	r3, #0
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3708      	adds	r7, #8
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}

0800ef86 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ef86:	b480      	push	{r7}
 800ef88:	b085      	sub	sp, #20
 800ef8a:	af00      	add	r7, sp, #0
 800ef8c:	6078      	str	r0, [r7, #4]
 800ef8e:	460b      	mov	r3, r1
 800ef90:	70fb      	strb	r3, [r7, #3]
 800ef92:	4613      	mov	r3, r2
 800ef94:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ef9c:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ef9e:	78fb      	ldrb	r3, [r7, #3]
 800efa0:	68fa      	ldr	r2, [r7, #12]
 800efa2:	212c      	movs	r1, #44	; 0x2c
 800efa4:	fb01 f303 	mul.w	r3, r1, r3
 800efa8:	4413      	add	r3, r2
 800efaa:	333b      	adds	r3, #59	; 0x3b
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d009      	beq.n	800efc6 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800efb2:	78fb      	ldrb	r3, [r7, #3]
 800efb4:	68fa      	ldr	r2, [r7, #12]
 800efb6:	212c      	movs	r1, #44	; 0x2c
 800efb8:	fb01 f303 	mul.w	r3, r1, r3
 800efbc:	4413      	add	r3, r2
 800efbe:	3354      	adds	r3, #84	; 0x54
 800efc0:	78ba      	ldrb	r2, [r7, #2]
 800efc2:	701a      	strb	r2, [r3, #0]
 800efc4:	e008      	b.n	800efd8 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800efc6:	78fb      	ldrb	r3, [r7, #3]
 800efc8:	68fa      	ldr	r2, [r7, #12]
 800efca:	212c      	movs	r1, #44	; 0x2c
 800efcc:	fb01 f303 	mul.w	r3, r1, r3
 800efd0:	4413      	add	r3, r2
 800efd2:	3355      	adds	r3, #85	; 0x55
 800efd4:	78ba      	ldrb	r2, [r7, #2]
 800efd6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800efd8:	2300      	movs	r3, #0
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3714      	adds	r7, #20
 800efde:	46bd      	mov	sp, r7
 800efe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe4:	4770      	bx	lr

0800efe6 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800efe6:	b480      	push	{r7}
 800efe8:	b085      	sub	sp, #20
 800efea:	af00      	add	r7, sp, #0
 800efec:	6078      	str	r0, [r7, #4]
 800efee:	460b      	mov	r3, r1
 800eff0:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800eff2:	2300      	movs	r3, #0
 800eff4:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800effc:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800effe:	78fb      	ldrb	r3, [r7, #3]
 800f000:	68ba      	ldr	r2, [r7, #8]
 800f002:	212c      	movs	r1, #44	; 0x2c
 800f004:	fb01 f303 	mul.w	r3, r1, r3
 800f008:	4413      	add	r3, r2
 800f00a:	333b      	adds	r3, #59	; 0x3b
 800f00c:	781b      	ldrb	r3, [r3, #0]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d009      	beq.n	800f026 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800f012:	78fb      	ldrb	r3, [r7, #3]
 800f014:	68ba      	ldr	r2, [r7, #8]
 800f016:	212c      	movs	r1, #44	; 0x2c
 800f018:	fb01 f303 	mul.w	r3, r1, r3
 800f01c:	4413      	add	r3, r2
 800f01e:	3354      	adds	r3, #84	; 0x54
 800f020:	781b      	ldrb	r3, [r3, #0]
 800f022:	73fb      	strb	r3, [r7, #15]
 800f024:	e008      	b.n	800f038 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800f026:	78fb      	ldrb	r3, [r7, #3]
 800f028:	68ba      	ldr	r2, [r7, #8]
 800f02a:	212c      	movs	r1, #44	; 0x2c
 800f02c:	fb01 f303 	mul.w	r3, r1, r3
 800f030:	4413      	add	r3, r2
 800f032:	3355      	adds	r3, #85	; 0x55
 800f034:	781b      	ldrb	r3, [r3, #0]
 800f036:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800f038:	7bfb      	ldrb	r3, [r7, #15]
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3714      	adds	r7, #20
 800f03e:	46bd      	mov	sp, r7
 800f040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f044:	4770      	bx	lr

0800f046 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f046:	b580      	push	{r7, lr}
 800f048:	b082      	sub	sp, #8
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f7f2 fc68 	bl	8001924 <HAL_Delay>
}
 800f054:	bf00      	nop
 800f056:	3708      	adds	r7, #8
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b085      	sub	sp, #20
 800f060:	af00      	add	r7, sp, #0
 800f062:	4603      	mov	r3, r0
 800f064:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f066:	2300      	movs	r3, #0
 800f068:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f06a:	79fb      	ldrb	r3, [r7, #7]
 800f06c:	2b03      	cmp	r3, #3
 800f06e:	d817      	bhi.n	800f0a0 <USBH_Get_USB_Status+0x44>
 800f070:	a201      	add	r2, pc, #4	; (adr r2, 800f078 <USBH_Get_USB_Status+0x1c>)
 800f072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f076:	bf00      	nop
 800f078:	0800f089 	.word	0x0800f089
 800f07c:	0800f08f 	.word	0x0800f08f
 800f080:	0800f095 	.word	0x0800f095
 800f084:	0800f09b 	.word	0x0800f09b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f088:	2300      	movs	r3, #0
 800f08a:	73fb      	strb	r3, [r7, #15]
    break;
 800f08c:	e00b      	b.n	800f0a6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f08e:	2302      	movs	r3, #2
 800f090:	73fb      	strb	r3, [r7, #15]
    break;
 800f092:	e008      	b.n	800f0a6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f094:	2301      	movs	r3, #1
 800f096:	73fb      	strb	r3, [r7, #15]
    break;
 800f098:	e005      	b.n	800f0a6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f09a:	2302      	movs	r3, #2
 800f09c:	73fb      	strb	r3, [r7, #15]
    break;
 800f09e:	e002      	b.n	800f0a6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f0a0:	2302      	movs	r3, #2
 800f0a2:	73fb      	strb	r3, [r7, #15]
    break;
 800f0a4:	bf00      	nop
  }
  return usb_status;
 800f0a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3714      	adds	r7, #20
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b2:	4770      	bx	lr

0800f0b4 <__errno>:
 800f0b4:	4b01      	ldr	r3, [pc, #4]	; (800f0bc <__errno+0x8>)
 800f0b6:	6818      	ldr	r0, [r3, #0]
 800f0b8:	4770      	bx	lr
 800f0ba:	bf00      	nop
 800f0bc:	20000044 	.word	0x20000044

0800f0c0 <__libc_init_array>:
 800f0c0:	b570      	push	{r4, r5, r6, lr}
 800f0c2:	4d0d      	ldr	r5, [pc, #52]	; (800f0f8 <__libc_init_array+0x38>)
 800f0c4:	4c0d      	ldr	r4, [pc, #52]	; (800f0fc <__libc_init_array+0x3c>)
 800f0c6:	1b64      	subs	r4, r4, r5
 800f0c8:	10a4      	asrs	r4, r4, #2
 800f0ca:	2600      	movs	r6, #0
 800f0cc:	42a6      	cmp	r6, r4
 800f0ce:	d109      	bne.n	800f0e4 <__libc_init_array+0x24>
 800f0d0:	4d0b      	ldr	r5, [pc, #44]	; (800f100 <__libc_init_array+0x40>)
 800f0d2:	4c0c      	ldr	r4, [pc, #48]	; (800f104 <__libc_init_array+0x44>)
 800f0d4:	f000 fff2 	bl	80100bc <_init>
 800f0d8:	1b64      	subs	r4, r4, r5
 800f0da:	10a4      	asrs	r4, r4, #2
 800f0dc:	2600      	movs	r6, #0
 800f0de:	42a6      	cmp	r6, r4
 800f0e0:	d105      	bne.n	800f0ee <__libc_init_array+0x2e>
 800f0e2:	bd70      	pop	{r4, r5, r6, pc}
 800f0e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0e8:	4798      	blx	r3
 800f0ea:	3601      	adds	r6, #1
 800f0ec:	e7ee      	b.n	800f0cc <__libc_init_array+0xc>
 800f0ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0f2:	4798      	blx	r3
 800f0f4:	3601      	adds	r6, #1
 800f0f6:	e7f2      	b.n	800f0de <__libc_init_array+0x1e>
 800f0f8:	0808719c 	.word	0x0808719c
 800f0fc:	0808719c 	.word	0x0808719c
 800f100:	0808719c 	.word	0x0808719c
 800f104:	080871a0 	.word	0x080871a0

0800f108 <malloc>:
 800f108:	4b02      	ldr	r3, [pc, #8]	; (800f114 <malloc+0xc>)
 800f10a:	4601      	mov	r1, r0
 800f10c:	6818      	ldr	r0, [r3, #0]
 800f10e:	f000 b871 	b.w	800f1f4 <_malloc_r>
 800f112:	bf00      	nop
 800f114:	20000044 	.word	0x20000044

0800f118 <free>:
 800f118:	4b02      	ldr	r3, [pc, #8]	; (800f124 <free+0xc>)
 800f11a:	4601      	mov	r1, r0
 800f11c:	6818      	ldr	r0, [r3, #0]
 800f11e:	f000 b819 	b.w	800f154 <_free_r>
 800f122:	bf00      	nop
 800f124:	20000044 	.word	0x20000044

0800f128 <memcpy>:
 800f128:	440a      	add	r2, r1
 800f12a:	4291      	cmp	r1, r2
 800f12c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f130:	d100      	bne.n	800f134 <memcpy+0xc>
 800f132:	4770      	bx	lr
 800f134:	b510      	push	{r4, lr}
 800f136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f13a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f13e:	4291      	cmp	r1, r2
 800f140:	d1f9      	bne.n	800f136 <memcpy+0xe>
 800f142:	bd10      	pop	{r4, pc}

0800f144 <memset>:
 800f144:	4402      	add	r2, r0
 800f146:	4603      	mov	r3, r0
 800f148:	4293      	cmp	r3, r2
 800f14a:	d100      	bne.n	800f14e <memset+0xa>
 800f14c:	4770      	bx	lr
 800f14e:	f803 1b01 	strb.w	r1, [r3], #1
 800f152:	e7f9      	b.n	800f148 <memset+0x4>

0800f154 <_free_r>:
 800f154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f156:	2900      	cmp	r1, #0
 800f158:	d048      	beq.n	800f1ec <_free_r+0x98>
 800f15a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f15e:	9001      	str	r0, [sp, #4]
 800f160:	2b00      	cmp	r3, #0
 800f162:	f1a1 0404 	sub.w	r4, r1, #4
 800f166:	bfb8      	it	lt
 800f168:	18e4      	addlt	r4, r4, r3
 800f16a:	f000 f9d3 	bl	800f514 <__malloc_lock>
 800f16e:	4a20      	ldr	r2, [pc, #128]	; (800f1f0 <_free_r+0x9c>)
 800f170:	9801      	ldr	r0, [sp, #4]
 800f172:	6813      	ldr	r3, [r2, #0]
 800f174:	4615      	mov	r5, r2
 800f176:	b933      	cbnz	r3, 800f186 <_free_r+0x32>
 800f178:	6063      	str	r3, [r4, #4]
 800f17a:	6014      	str	r4, [r2, #0]
 800f17c:	b003      	add	sp, #12
 800f17e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f182:	f000 b9cd 	b.w	800f520 <__malloc_unlock>
 800f186:	42a3      	cmp	r3, r4
 800f188:	d90b      	bls.n	800f1a2 <_free_r+0x4e>
 800f18a:	6821      	ldr	r1, [r4, #0]
 800f18c:	1862      	adds	r2, r4, r1
 800f18e:	4293      	cmp	r3, r2
 800f190:	bf04      	itt	eq
 800f192:	681a      	ldreq	r2, [r3, #0]
 800f194:	685b      	ldreq	r3, [r3, #4]
 800f196:	6063      	str	r3, [r4, #4]
 800f198:	bf04      	itt	eq
 800f19a:	1852      	addeq	r2, r2, r1
 800f19c:	6022      	streq	r2, [r4, #0]
 800f19e:	602c      	str	r4, [r5, #0]
 800f1a0:	e7ec      	b.n	800f17c <_free_r+0x28>
 800f1a2:	461a      	mov	r2, r3
 800f1a4:	685b      	ldr	r3, [r3, #4]
 800f1a6:	b10b      	cbz	r3, 800f1ac <_free_r+0x58>
 800f1a8:	42a3      	cmp	r3, r4
 800f1aa:	d9fa      	bls.n	800f1a2 <_free_r+0x4e>
 800f1ac:	6811      	ldr	r1, [r2, #0]
 800f1ae:	1855      	adds	r5, r2, r1
 800f1b0:	42a5      	cmp	r5, r4
 800f1b2:	d10b      	bne.n	800f1cc <_free_r+0x78>
 800f1b4:	6824      	ldr	r4, [r4, #0]
 800f1b6:	4421      	add	r1, r4
 800f1b8:	1854      	adds	r4, r2, r1
 800f1ba:	42a3      	cmp	r3, r4
 800f1bc:	6011      	str	r1, [r2, #0]
 800f1be:	d1dd      	bne.n	800f17c <_free_r+0x28>
 800f1c0:	681c      	ldr	r4, [r3, #0]
 800f1c2:	685b      	ldr	r3, [r3, #4]
 800f1c4:	6053      	str	r3, [r2, #4]
 800f1c6:	4421      	add	r1, r4
 800f1c8:	6011      	str	r1, [r2, #0]
 800f1ca:	e7d7      	b.n	800f17c <_free_r+0x28>
 800f1cc:	d902      	bls.n	800f1d4 <_free_r+0x80>
 800f1ce:	230c      	movs	r3, #12
 800f1d0:	6003      	str	r3, [r0, #0]
 800f1d2:	e7d3      	b.n	800f17c <_free_r+0x28>
 800f1d4:	6825      	ldr	r5, [r4, #0]
 800f1d6:	1961      	adds	r1, r4, r5
 800f1d8:	428b      	cmp	r3, r1
 800f1da:	bf04      	itt	eq
 800f1dc:	6819      	ldreq	r1, [r3, #0]
 800f1de:	685b      	ldreq	r3, [r3, #4]
 800f1e0:	6063      	str	r3, [r4, #4]
 800f1e2:	bf04      	itt	eq
 800f1e4:	1949      	addeq	r1, r1, r5
 800f1e6:	6021      	streq	r1, [r4, #0]
 800f1e8:	6054      	str	r4, [r2, #4]
 800f1ea:	e7c7      	b.n	800f17c <_free_r+0x28>
 800f1ec:	b003      	add	sp, #12
 800f1ee:	bd30      	pop	{r4, r5, pc}
 800f1f0:	20003140 	.word	0x20003140

0800f1f4 <_malloc_r>:
 800f1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1f6:	1ccd      	adds	r5, r1, #3
 800f1f8:	f025 0503 	bic.w	r5, r5, #3
 800f1fc:	3508      	adds	r5, #8
 800f1fe:	2d0c      	cmp	r5, #12
 800f200:	bf38      	it	cc
 800f202:	250c      	movcc	r5, #12
 800f204:	2d00      	cmp	r5, #0
 800f206:	4606      	mov	r6, r0
 800f208:	db01      	blt.n	800f20e <_malloc_r+0x1a>
 800f20a:	42a9      	cmp	r1, r5
 800f20c:	d903      	bls.n	800f216 <_malloc_r+0x22>
 800f20e:	230c      	movs	r3, #12
 800f210:	6033      	str	r3, [r6, #0]
 800f212:	2000      	movs	r0, #0
 800f214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f216:	f000 f97d 	bl	800f514 <__malloc_lock>
 800f21a:	4921      	ldr	r1, [pc, #132]	; (800f2a0 <_malloc_r+0xac>)
 800f21c:	680a      	ldr	r2, [r1, #0]
 800f21e:	4614      	mov	r4, r2
 800f220:	b99c      	cbnz	r4, 800f24a <_malloc_r+0x56>
 800f222:	4f20      	ldr	r7, [pc, #128]	; (800f2a4 <_malloc_r+0xb0>)
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	b923      	cbnz	r3, 800f232 <_malloc_r+0x3e>
 800f228:	4621      	mov	r1, r4
 800f22a:	4630      	mov	r0, r6
 800f22c:	f000 f86a 	bl	800f304 <_sbrk_r>
 800f230:	6038      	str	r0, [r7, #0]
 800f232:	4629      	mov	r1, r5
 800f234:	4630      	mov	r0, r6
 800f236:	f000 f865 	bl	800f304 <_sbrk_r>
 800f23a:	1c43      	adds	r3, r0, #1
 800f23c:	d123      	bne.n	800f286 <_malloc_r+0x92>
 800f23e:	230c      	movs	r3, #12
 800f240:	6033      	str	r3, [r6, #0]
 800f242:	4630      	mov	r0, r6
 800f244:	f000 f96c 	bl	800f520 <__malloc_unlock>
 800f248:	e7e3      	b.n	800f212 <_malloc_r+0x1e>
 800f24a:	6823      	ldr	r3, [r4, #0]
 800f24c:	1b5b      	subs	r3, r3, r5
 800f24e:	d417      	bmi.n	800f280 <_malloc_r+0x8c>
 800f250:	2b0b      	cmp	r3, #11
 800f252:	d903      	bls.n	800f25c <_malloc_r+0x68>
 800f254:	6023      	str	r3, [r4, #0]
 800f256:	441c      	add	r4, r3
 800f258:	6025      	str	r5, [r4, #0]
 800f25a:	e004      	b.n	800f266 <_malloc_r+0x72>
 800f25c:	6863      	ldr	r3, [r4, #4]
 800f25e:	42a2      	cmp	r2, r4
 800f260:	bf0c      	ite	eq
 800f262:	600b      	streq	r3, [r1, #0]
 800f264:	6053      	strne	r3, [r2, #4]
 800f266:	4630      	mov	r0, r6
 800f268:	f000 f95a 	bl	800f520 <__malloc_unlock>
 800f26c:	f104 000b 	add.w	r0, r4, #11
 800f270:	1d23      	adds	r3, r4, #4
 800f272:	f020 0007 	bic.w	r0, r0, #7
 800f276:	1ac2      	subs	r2, r0, r3
 800f278:	d0cc      	beq.n	800f214 <_malloc_r+0x20>
 800f27a:	1a1b      	subs	r3, r3, r0
 800f27c:	50a3      	str	r3, [r4, r2]
 800f27e:	e7c9      	b.n	800f214 <_malloc_r+0x20>
 800f280:	4622      	mov	r2, r4
 800f282:	6864      	ldr	r4, [r4, #4]
 800f284:	e7cc      	b.n	800f220 <_malloc_r+0x2c>
 800f286:	1cc4      	adds	r4, r0, #3
 800f288:	f024 0403 	bic.w	r4, r4, #3
 800f28c:	42a0      	cmp	r0, r4
 800f28e:	d0e3      	beq.n	800f258 <_malloc_r+0x64>
 800f290:	1a21      	subs	r1, r4, r0
 800f292:	4630      	mov	r0, r6
 800f294:	f000 f836 	bl	800f304 <_sbrk_r>
 800f298:	3001      	adds	r0, #1
 800f29a:	d1dd      	bne.n	800f258 <_malloc_r+0x64>
 800f29c:	e7cf      	b.n	800f23e <_malloc_r+0x4a>
 800f29e:	bf00      	nop
 800f2a0:	20003140 	.word	0x20003140
 800f2a4:	20003144 	.word	0x20003144

0800f2a8 <iprintf>:
 800f2a8:	b40f      	push	{r0, r1, r2, r3}
 800f2aa:	4b0a      	ldr	r3, [pc, #40]	; (800f2d4 <iprintf+0x2c>)
 800f2ac:	b513      	push	{r0, r1, r4, lr}
 800f2ae:	681c      	ldr	r4, [r3, #0]
 800f2b0:	b124      	cbz	r4, 800f2bc <iprintf+0x14>
 800f2b2:	69a3      	ldr	r3, [r4, #24]
 800f2b4:	b913      	cbnz	r3, 800f2bc <iprintf+0x14>
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	f000 f88c 	bl	800f3d4 <__sinit>
 800f2bc:	ab05      	add	r3, sp, #20
 800f2be:	9a04      	ldr	r2, [sp, #16]
 800f2c0:	68a1      	ldr	r1, [r4, #8]
 800f2c2:	9301      	str	r3, [sp, #4]
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	f000 f95b 	bl	800f580 <_vfiprintf_r>
 800f2ca:	b002      	add	sp, #8
 800f2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2d0:	b004      	add	sp, #16
 800f2d2:	4770      	bx	lr
 800f2d4:	20000044 	.word	0x20000044

0800f2d8 <putchar>:
 800f2d8:	4b09      	ldr	r3, [pc, #36]	; (800f300 <putchar+0x28>)
 800f2da:	b513      	push	{r0, r1, r4, lr}
 800f2dc:	681c      	ldr	r4, [r3, #0]
 800f2de:	4601      	mov	r1, r0
 800f2e0:	b134      	cbz	r4, 800f2f0 <putchar+0x18>
 800f2e2:	69a3      	ldr	r3, [r4, #24]
 800f2e4:	b923      	cbnz	r3, 800f2f0 <putchar+0x18>
 800f2e6:	9001      	str	r0, [sp, #4]
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	f000 f873 	bl	800f3d4 <__sinit>
 800f2ee:	9901      	ldr	r1, [sp, #4]
 800f2f0:	68a2      	ldr	r2, [r4, #8]
 800f2f2:	4620      	mov	r0, r4
 800f2f4:	b002      	add	sp, #8
 800f2f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2fa:	f000 bc05 	b.w	800fb08 <_putc_r>
 800f2fe:	bf00      	nop
 800f300:	20000044 	.word	0x20000044

0800f304 <_sbrk_r>:
 800f304:	b538      	push	{r3, r4, r5, lr}
 800f306:	4d06      	ldr	r5, [pc, #24]	; (800f320 <_sbrk_r+0x1c>)
 800f308:	2300      	movs	r3, #0
 800f30a:	4604      	mov	r4, r0
 800f30c:	4608      	mov	r0, r1
 800f30e:	602b      	str	r3, [r5, #0]
 800f310:	f7f2 fa24 	bl	800175c <_sbrk>
 800f314:	1c43      	adds	r3, r0, #1
 800f316:	d102      	bne.n	800f31e <_sbrk_r+0x1a>
 800f318:	682b      	ldr	r3, [r5, #0]
 800f31a:	b103      	cbz	r3, 800f31e <_sbrk_r+0x1a>
 800f31c:	6023      	str	r3, [r4, #0]
 800f31e:	bd38      	pop	{r3, r4, r5, pc}
 800f320:	20007b78 	.word	0x20007b78

0800f324 <std>:
 800f324:	2300      	movs	r3, #0
 800f326:	b510      	push	{r4, lr}
 800f328:	4604      	mov	r4, r0
 800f32a:	e9c0 3300 	strd	r3, r3, [r0]
 800f32e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f332:	6083      	str	r3, [r0, #8]
 800f334:	8181      	strh	r1, [r0, #12]
 800f336:	6643      	str	r3, [r0, #100]	; 0x64
 800f338:	81c2      	strh	r2, [r0, #14]
 800f33a:	6183      	str	r3, [r0, #24]
 800f33c:	4619      	mov	r1, r3
 800f33e:	2208      	movs	r2, #8
 800f340:	305c      	adds	r0, #92	; 0x5c
 800f342:	f7ff feff 	bl	800f144 <memset>
 800f346:	4b05      	ldr	r3, [pc, #20]	; (800f35c <std+0x38>)
 800f348:	6263      	str	r3, [r4, #36]	; 0x24
 800f34a:	4b05      	ldr	r3, [pc, #20]	; (800f360 <std+0x3c>)
 800f34c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f34e:	4b05      	ldr	r3, [pc, #20]	; (800f364 <std+0x40>)
 800f350:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f352:	4b05      	ldr	r3, [pc, #20]	; (800f368 <std+0x44>)
 800f354:	6224      	str	r4, [r4, #32]
 800f356:	6323      	str	r3, [r4, #48]	; 0x30
 800f358:	bd10      	pop	{r4, pc}
 800f35a:	bf00      	nop
 800f35c:	0800fb99 	.word	0x0800fb99
 800f360:	0800fbbb 	.word	0x0800fbbb
 800f364:	0800fbf3 	.word	0x0800fbf3
 800f368:	0800fc17 	.word	0x0800fc17

0800f36c <_cleanup_r>:
 800f36c:	4901      	ldr	r1, [pc, #4]	; (800f374 <_cleanup_r+0x8>)
 800f36e:	f000 b8af 	b.w	800f4d0 <_fwalk_reent>
 800f372:	bf00      	nop
 800f374:	0800fef1 	.word	0x0800fef1

0800f378 <__sfmoreglue>:
 800f378:	b570      	push	{r4, r5, r6, lr}
 800f37a:	1e4a      	subs	r2, r1, #1
 800f37c:	2568      	movs	r5, #104	; 0x68
 800f37e:	4355      	muls	r5, r2
 800f380:	460e      	mov	r6, r1
 800f382:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f386:	f7ff ff35 	bl	800f1f4 <_malloc_r>
 800f38a:	4604      	mov	r4, r0
 800f38c:	b140      	cbz	r0, 800f3a0 <__sfmoreglue+0x28>
 800f38e:	2100      	movs	r1, #0
 800f390:	e9c0 1600 	strd	r1, r6, [r0]
 800f394:	300c      	adds	r0, #12
 800f396:	60a0      	str	r0, [r4, #8]
 800f398:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f39c:	f7ff fed2 	bl	800f144 <memset>
 800f3a0:	4620      	mov	r0, r4
 800f3a2:	bd70      	pop	{r4, r5, r6, pc}

0800f3a4 <__sfp_lock_acquire>:
 800f3a4:	4801      	ldr	r0, [pc, #4]	; (800f3ac <__sfp_lock_acquire+0x8>)
 800f3a6:	f000 b8b3 	b.w	800f510 <__retarget_lock_acquire_recursive>
 800f3aa:	bf00      	nop
 800f3ac:	20007b74 	.word	0x20007b74

0800f3b0 <__sfp_lock_release>:
 800f3b0:	4801      	ldr	r0, [pc, #4]	; (800f3b8 <__sfp_lock_release+0x8>)
 800f3b2:	f000 b8ae 	b.w	800f512 <__retarget_lock_release_recursive>
 800f3b6:	bf00      	nop
 800f3b8:	20007b74 	.word	0x20007b74

0800f3bc <__sinit_lock_acquire>:
 800f3bc:	4801      	ldr	r0, [pc, #4]	; (800f3c4 <__sinit_lock_acquire+0x8>)
 800f3be:	f000 b8a7 	b.w	800f510 <__retarget_lock_acquire_recursive>
 800f3c2:	bf00      	nop
 800f3c4:	20007b6f 	.word	0x20007b6f

0800f3c8 <__sinit_lock_release>:
 800f3c8:	4801      	ldr	r0, [pc, #4]	; (800f3d0 <__sinit_lock_release+0x8>)
 800f3ca:	f000 b8a2 	b.w	800f512 <__retarget_lock_release_recursive>
 800f3ce:	bf00      	nop
 800f3d0:	20007b6f 	.word	0x20007b6f

0800f3d4 <__sinit>:
 800f3d4:	b510      	push	{r4, lr}
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	f7ff fff0 	bl	800f3bc <__sinit_lock_acquire>
 800f3dc:	69a3      	ldr	r3, [r4, #24]
 800f3de:	b11b      	cbz	r3, 800f3e8 <__sinit+0x14>
 800f3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3e4:	f7ff bff0 	b.w	800f3c8 <__sinit_lock_release>
 800f3e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f3ec:	6523      	str	r3, [r4, #80]	; 0x50
 800f3ee:	4b13      	ldr	r3, [pc, #76]	; (800f43c <__sinit+0x68>)
 800f3f0:	4a13      	ldr	r2, [pc, #76]	; (800f440 <__sinit+0x6c>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800f3f6:	42a3      	cmp	r3, r4
 800f3f8:	bf04      	itt	eq
 800f3fa:	2301      	moveq	r3, #1
 800f3fc:	61a3      	streq	r3, [r4, #24]
 800f3fe:	4620      	mov	r0, r4
 800f400:	f000 f820 	bl	800f444 <__sfp>
 800f404:	6060      	str	r0, [r4, #4]
 800f406:	4620      	mov	r0, r4
 800f408:	f000 f81c 	bl	800f444 <__sfp>
 800f40c:	60a0      	str	r0, [r4, #8]
 800f40e:	4620      	mov	r0, r4
 800f410:	f000 f818 	bl	800f444 <__sfp>
 800f414:	2200      	movs	r2, #0
 800f416:	60e0      	str	r0, [r4, #12]
 800f418:	2104      	movs	r1, #4
 800f41a:	6860      	ldr	r0, [r4, #4]
 800f41c:	f7ff ff82 	bl	800f324 <std>
 800f420:	68a0      	ldr	r0, [r4, #8]
 800f422:	2201      	movs	r2, #1
 800f424:	2109      	movs	r1, #9
 800f426:	f7ff ff7d 	bl	800f324 <std>
 800f42a:	68e0      	ldr	r0, [r4, #12]
 800f42c:	2202      	movs	r2, #2
 800f42e:	2112      	movs	r1, #18
 800f430:	f7ff ff78 	bl	800f324 <std>
 800f434:	2301      	movs	r3, #1
 800f436:	61a3      	str	r3, [r4, #24]
 800f438:	e7d2      	b.n	800f3e0 <__sinit+0xc>
 800f43a:	bf00      	nop
 800f43c:	080870fc 	.word	0x080870fc
 800f440:	0800f36d 	.word	0x0800f36d

0800f444 <__sfp>:
 800f444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f446:	4607      	mov	r7, r0
 800f448:	f7ff ffac 	bl	800f3a4 <__sfp_lock_acquire>
 800f44c:	4b1e      	ldr	r3, [pc, #120]	; (800f4c8 <__sfp+0x84>)
 800f44e:	681e      	ldr	r6, [r3, #0]
 800f450:	69b3      	ldr	r3, [r6, #24]
 800f452:	b913      	cbnz	r3, 800f45a <__sfp+0x16>
 800f454:	4630      	mov	r0, r6
 800f456:	f7ff ffbd 	bl	800f3d4 <__sinit>
 800f45a:	3648      	adds	r6, #72	; 0x48
 800f45c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f460:	3b01      	subs	r3, #1
 800f462:	d503      	bpl.n	800f46c <__sfp+0x28>
 800f464:	6833      	ldr	r3, [r6, #0]
 800f466:	b30b      	cbz	r3, 800f4ac <__sfp+0x68>
 800f468:	6836      	ldr	r6, [r6, #0]
 800f46a:	e7f7      	b.n	800f45c <__sfp+0x18>
 800f46c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f470:	b9d5      	cbnz	r5, 800f4a8 <__sfp+0x64>
 800f472:	4b16      	ldr	r3, [pc, #88]	; (800f4cc <__sfp+0x88>)
 800f474:	60e3      	str	r3, [r4, #12]
 800f476:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f47a:	6665      	str	r5, [r4, #100]	; 0x64
 800f47c:	f000 f847 	bl	800f50e <__retarget_lock_init_recursive>
 800f480:	f7ff ff96 	bl	800f3b0 <__sfp_lock_release>
 800f484:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f488:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f48c:	6025      	str	r5, [r4, #0]
 800f48e:	61a5      	str	r5, [r4, #24]
 800f490:	2208      	movs	r2, #8
 800f492:	4629      	mov	r1, r5
 800f494:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f498:	f7ff fe54 	bl	800f144 <memset>
 800f49c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f4a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f4a4:	4620      	mov	r0, r4
 800f4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4a8:	3468      	adds	r4, #104	; 0x68
 800f4aa:	e7d9      	b.n	800f460 <__sfp+0x1c>
 800f4ac:	2104      	movs	r1, #4
 800f4ae:	4638      	mov	r0, r7
 800f4b0:	f7ff ff62 	bl	800f378 <__sfmoreglue>
 800f4b4:	4604      	mov	r4, r0
 800f4b6:	6030      	str	r0, [r6, #0]
 800f4b8:	2800      	cmp	r0, #0
 800f4ba:	d1d5      	bne.n	800f468 <__sfp+0x24>
 800f4bc:	f7ff ff78 	bl	800f3b0 <__sfp_lock_release>
 800f4c0:	230c      	movs	r3, #12
 800f4c2:	603b      	str	r3, [r7, #0]
 800f4c4:	e7ee      	b.n	800f4a4 <__sfp+0x60>
 800f4c6:	bf00      	nop
 800f4c8:	080870fc 	.word	0x080870fc
 800f4cc:	ffff0001 	.word	0xffff0001

0800f4d0 <_fwalk_reent>:
 800f4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4d4:	4606      	mov	r6, r0
 800f4d6:	4688      	mov	r8, r1
 800f4d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f4dc:	2700      	movs	r7, #0
 800f4de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f4e2:	f1b9 0901 	subs.w	r9, r9, #1
 800f4e6:	d505      	bpl.n	800f4f4 <_fwalk_reent+0x24>
 800f4e8:	6824      	ldr	r4, [r4, #0]
 800f4ea:	2c00      	cmp	r4, #0
 800f4ec:	d1f7      	bne.n	800f4de <_fwalk_reent+0xe>
 800f4ee:	4638      	mov	r0, r7
 800f4f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4f4:	89ab      	ldrh	r3, [r5, #12]
 800f4f6:	2b01      	cmp	r3, #1
 800f4f8:	d907      	bls.n	800f50a <_fwalk_reent+0x3a>
 800f4fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f4fe:	3301      	adds	r3, #1
 800f500:	d003      	beq.n	800f50a <_fwalk_reent+0x3a>
 800f502:	4629      	mov	r1, r5
 800f504:	4630      	mov	r0, r6
 800f506:	47c0      	blx	r8
 800f508:	4307      	orrs	r7, r0
 800f50a:	3568      	adds	r5, #104	; 0x68
 800f50c:	e7e9      	b.n	800f4e2 <_fwalk_reent+0x12>

0800f50e <__retarget_lock_init_recursive>:
 800f50e:	4770      	bx	lr

0800f510 <__retarget_lock_acquire_recursive>:
 800f510:	4770      	bx	lr

0800f512 <__retarget_lock_release_recursive>:
 800f512:	4770      	bx	lr

0800f514 <__malloc_lock>:
 800f514:	4801      	ldr	r0, [pc, #4]	; (800f51c <__malloc_lock+0x8>)
 800f516:	f7ff bffb 	b.w	800f510 <__retarget_lock_acquire_recursive>
 800f51a:	bf00      	nop
 800f51c:	20007b70 	.word	0x20007b70

0800f520 <__malloc_unlock>:
 800f520:	4801      	ldr	r0, [pc, #4]	; (800f528 <__malloc_unlock+0x8>)
 800f522:	f7ff bff6 	b.w	800f512 <__retarget_lock_release_recursive>
 800f526:	bf00      	nop
 800f528:	20007b70 	.word	0x20007b70

0800f52c <__sfputc_r>:
 800f52c:	6893      	ldr	r3, [r2, #8]
 800f52e:	3b01      	subs	r3, #1
 800f530:	2b00      	cmp	r3, #0
 800f532:	b410      	push	{r4}
 800f534:	6093      	str	r3, [r2, #8]
 800f536:	da08      	bge.n	800f54a <__sfputc_r+0x1e>
 800f538:	6994      	ldr	r4, [r2, #24]
 800f53a:	42a3      	cmp	r3, r4
 800f53c:	db01      	blt.n	800f542 <__sfputc_r+0x16>
 800f53e:	290a      	cmp	r1, #10
 800f540:	d103      	bne.n	800f54a <__sfputc_r+0x1e>
 800f542:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f546:	f000 bb6b 	b.w	800fc20 <__swbuf_r>
 800f54a:	6813      	ldr	r3, [r2, #0]
 800f54c:	1c58      	adds	r0, r3, #1
 800f54e:	6010      	str	r0, [r2, #0]
 800f550:	7019      	strb	r1, [r3, #0]
 800f552:	4608      	mov	r0, r1
 800f554:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f558:	4770      	bx	lr

0800f55a <__sfputs_r>:
 800f55a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f55c:	4606      	mov	r6, r0
 800f55e:	460f      	mov	r7, r1
 800f560:	4614      	mov	r4, r2
 800f562:	18d5      	adds	r5, r2, r3
 800f564:	42ac      	cmp	r4, r5
 800f566:	d101      	bne.n	800f56c <__sfputs_r+0x12>
 800f568:	2000      	movs	r0, #0
 800f56a:	e007      	b.n	800f57c <__sfputs_r+0x22>
 800f56c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f570:	463a      	mov	r2, r7
 800f572:	4630      	mov	r0, r6
 800f574:	f7ff ffda 	bl	800f52c <__sfputc_r>
 800f578:	1c43      	adds	r3, r0, #1
 800f57a:	d1f3      	bne.n	800f564 <__sfputs_r+0xa>
 800f57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f580 <_vfiprintf_r>:
 800f580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f584:	460d      	mov	r5, r1
 800f586:	b09d      	sub	sp, #116	; 0x74
 800f588:	4614      	mov	r4, r2
 800f58a:	4698      	mov	r8, r3
 800f58c:	4606      	mov	r6, r0
 800f58e:	b118      	cbz	r0, 800f598 <_vfiprintf_r+0x18>
 800f590:	6983      	ldr	r3, [r0, #24]
 800f592:	b90b      	cbnz	r3, 800f598 <_vfiprintf_r+0x18>
 800f594:	f7ff ff1e 	bl	800f3d4 <__sinit>
 800f598:	4b89      	ldr	r3, [pc, #548]	; (800f7c0 <_vfiprintf_r+0x240>)
 800f59a:	429d      	cmp	r5, r3
 800f59c:	d11b      	bne.n	800f5d6 <_vfiprintf_r+0x56>
 800f59e:	6875      	ldr	r5, [r6, #4]
 800f5a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f5a2:	07d9      	lsls	r1, r3, #31
 800f5a4:	d405      	bmi.n	800f5b2 <_vfiprintf_r+0x32>
 800f5a6:	89ab      	ldrh	r3, [r5, #12]
 800f5a8:	059a      	lsls	r2, r3, #22
 800f5aa:	d402      	bmi.n	800f5b2 <_vfiprintf_r+0x32>
 800f5ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f5ae:	f7ff ffaf 	bl	800f510 <__retarget_lock_acquire_recursive>
 800f5b2:	89ab      	ldrh	r3, [r5, #12]
 800f5b4:	071b      	lsls	r3, r3, #28
 800f5b6:	d501      	bpl.n	800f5bc <_vfiprintf_r+0x3c>
 800f5b8:	692b      	ldr	r3, [r5, #16]
 800f5ba:	b9eb      	cbnz	r3, 800f5f8 <_vfiprintf_r+0x78>
 800f5bc:	4629      	mov	r1, r5
 800f5be:	4630      	mov	r0, r6
 800f5c0:	f000 fb92 	bl	800fce8 <__swsetup_r>
 800f5c4:	b1c0      	cbz	r0, 800f5f8 <_vfiprintf_r+0x78>
 800f5c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f5c8:	07dc      	lsls	r4, r3, #31
 800f5ca:	d50e      	bpl.n	800f5ea <_vfiprintf_r+0x6a>
 800f5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f5d0:	b01d      	add	sp, #116	; 0x74
 800f5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5d6:	4b7b      	ldr	r3, [pc, #492]	; (800f7c4 <_vfiprintf_r+0x244>)
 800f5d8:	429d      	cmp	r5, r3
 800f5da:	d101      	bne.n	800f5e0 <_vfiprintf_r+0x60>
 800f5dc:	68b5      	ldr	r5, [r6, #8]
 800f5de:	e7df      	b.n	800f5a0 <_vfiprintf_r+0x20>
 800f5e0:	4b79      	ldr	r3, [pc, #484]	; (800f7c8 <_vfiprintf_r+0x248>)
 800f5e2:	429d      	cmp	r5, r3
 800f5e4:	bf08      	it	eq
 800f5e6:	68f5      	ldreq	r5, [r6, #12]
 800f5e8:	e7da      	b.n	800f5a0 <_vfiprintf_r+0x20>
 800f5ea:	89ab      	ldrh	r3, [r5, #12]
 800f5ec:	0598      	lsls	r0, r3, #22
 800f5ee:	d4ed      	bmi.n	800f5cc <_vfiprintf_r+0x4c>
 800f5f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f5f2:	f7ff ff8e 	bl	800f512 <__retarget_lock_release_recursive>
 800f5f6:	e7e9      	b.n	800f5cc <_vfiprintf_r+0x4c>
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	9309      	str	r3, [sp, #36]	; 0x24
 800f5fc:	2320      	movs	r3, #32
 800f5fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f602:	f8cd 800c 	str.w	r8, [sp, #12]
 800f606:	2330      	movs	r3, #48	; 0x30
 800f608:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f7cc <_vfiprintf_r+0x24c>
 800f60c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f610:	f04f 0901 	mov.w	r9, #1
 800f614:	4623      	mov	r3, r4
 800f616:	469a      	mov	sl, r3
 800f618:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f61c:	b10a      	cbz	r2, 800f622 <_vfiprintf_r+0xa2>
 800f61e:	2a25      	cmp	r2, #37	; 0x25
 800f620:	d1f9      	bne.n	800f616 <_vfiprintf_r+0x96>
 800f622:	ebba 0b04 	subs.w	fp, sl, r4
 800f626:	d00b      	beq.n	800f640 <_vfiprintf_r+0xc0>
 800f628:	465b      	mov	r3, fp
 800f62a:	4622      	mov	r2, r4
 800f62c:	4629      	mov	r1, r5
 800f62e:	4630      	mov	r0, r6
 800f630:	f7ff ff93 	bl	800f55a <__sfputs_r>
 800f634:	3001      	adds	r0, #1
 800f636:	f000 80aa 	beq.w	800f78e <_vfiprintf_r+0x20e>
 800f63a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f63c:	445a      	add	r2, fp
 800f63e:	9209      	str	r2, [sp, #36]	; 0x24
 800f640:	f89a 3000 	ldrb.w	r3, [sl]
 800f644:	2b00      	cmp	r3, #0
 800f646:	f000 80a2 	beq.w	800f78e <_vfiprintf_r+0x20e>
 800f64a:	2300      	movs	r3, #0
 800f64c:	f04f 32ff 	mov.w	r2, #4294967295
 800f650:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f654:	f10a 0a01 	add.w	sl, sl, #1
 800f658:	9304      	str	r3, [sp, #16]
 800f65a:	9307      	str	r3, [sp, #28]
 800f65c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f660:	931a      	str	r3, [sp, #104]	; 0x68
 800f662:	4654      	mov	r4, sl
 800f664:	2205      	movs	r2, #5
 800f666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f66a:	4858      	ldr	r0, [pc, #352]	; (800f7cc <_vfiprintf_r+0x24c>)
 800f66c:	f7f0 fdb0 	bl	80001d0 <memchr>
 800f670:	9a04      	ldr	r2, [sp, #16]
 800f672:	b9d8      	cbnz	r0, 800f6ac <_vfiprintf_r+0x12c>
 800f674:	06d1      	lsls	r1, r2, #27
 800f676:	bf44      	itt	mi
 800f678:	2320      	movmi	r3, #32
 800f67a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f67e:	0713      	lsls	r3, r2, #28
 800f680:	bf44      	itt	mi
 800f682:	232b      	movmi	r3, #43	; 0x2b
 800f684:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f688:	f89a 3000 	ldrb.w	r3, [sl]
 800f68c:	2b2a      	cmp	r3, #42	; 0x2a
 800f68e:	d015      	beq.n	800f6bc <_vfiprintf_r+0x13c>
 800f690:	9a07      	ldr	r2, [sp, #28]
 800f692:	4654      	mov	r4, sl
 800f694:	2000      	movs	r0, #0
 800f696:	f04f 0c0a 	mov.w	ip, #10
 800f69a:	4621      	mov	r1, r4
 800f69c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6a0:	3b30      	subs	r3, #48	; 0x30
 800f6a2:	2b09      	cmp	r3, #9
 800f6a4:	d94e      	bls.n	800f744 <_vfiprintf_r+0x1c4>
 800f6a6:	b1b0      	cbz	r0, 800f6d6 <_vfiprintf_r+0x156>
 800f6a8:	9207      	str	r2, [sp, #28]
 800f6aa:	e014      	b.n	800f6d6 <_vfiprintf_r+0x156>
 800f6ac:	eba0 0308 	sub.w	r3, r0, r8
 800f6b0:	fa09 f303 	lsl.w	r3, r9, r3
 800f6b4:	4313      	orrs	r3, r2
 800f6b6:	9304      	str	r3, [sp, #16]
 800f6b8:	46a2      	mov	sl, r4
 800f6ba:	e7d2      	b.n	800f662 <_vfiprintf_r+0xe2>
 800f6bc:	9b03      	ldr	r3, [sp, #12]
 800f6be:	1d19      	adds	r1, r3, #4
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	9103      	str	r1, [sp, #12]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	bfbb      	ittet	lt
 800f6c8:	425b      	neglt	r3, r3
 800f6ca:	f042 0202 	orrlt.w	r2, r2, #2
 800f6ce:	9307      	strge	r3, [sp, #28]
 800f6d0:	9307      	strlt	r3, [sp, #28]
 800f6d2:	bfb8      	it	lt
 800f6d4:	9204      	strlt	r2, [sp, #16]
 800f6d6:	7823      	ldrb	r3, [r4, #0]
 800f6d8:	2b2e      	cmp	r3, #46	; 0x2e
 800f6da:	d10c      	bne.n	800f6f6 <_vfiprintf_r+0x176>
 800f6dc:	7863      	ldrb	r3, [r4, #1]
 800f6de:	2b2a      	cmp	r3, #42	; 0x2a
 800f6e0:	d135      	bne.n	800f74e <_vfiprintf_r+0x1ce>
 800f6e2:	9b03      	ldr	r3, [sp, #12]
 800f6e4:	1d1a      	adds	r2, r3, #4
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	9203      	str	r2, [sp, #12]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	bfb8      	it	lt
 800f6ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800f6f2:	3402      	adds	r4, #2
 800f6f4:	9305      	str	r3, [sp, #20]
 800f6f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f7dc <_vfiprintf_r+0x25c>
 800f6fa:	7821      	ldrb	r1, [r4, #0]
 800f6fc:	2203      	movs	r2, #3
 800f6fe:	4650      	mov	r0, sl
 800f700:	f7f0 fd66 	bl	80001d0 <memchr>
 800f704:	b140      	cbz	r0, 800f718 <_vfiprintf_r+0x198>
 800f706:	2340      	movs	r3, #64	; 0x40
 800f708:	eba0 000a 	sub.w	r0, r0, sl
 800f70c:	fa03 f000 	lsl.w	r0, r3, r0
 800f710:	9b04      	ldr	r3, [sp, #16]
 800f712:	4303      	orrs	r3, r0
 800f714:	3401      	adds	r4, #1
 800f716:	9304      	str	r3, [sp, #16]
 800f718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f71c:	482c      	ldr	r0, [pc, #176]	; (800f7d0 <_vfiprintf_r+0x250>)
 800f71e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f722:	2206      	movs	r2, #6
 800f724:	f7f0 fd54 	bl	80001d0 <memchr>
 800f728:	2800      	cmp	r0, #0
 800f72a:	d03f      	beq.n	800f7ac <_vfiprintf_r+0x22c>
 800f72c:	4b29      	ldr	r3, [pc, #164]	; (800f7d4 <_vfiprintf_r+0x254>)
 800f72e:	bb1b      	cbnz	r3, 800f778 <_vfiprintf_r+0x1f8>
 800f730:	9b03      	ldr	r3, [sp, #12]
 800f732:	3307      	adds	r3, #7
 800f734:	f023 0307 	bic.w	r3, r3, #7
 800f738:	3308      	adds	r3, #8
 800f73a:	9303      	str	r3, [sp, #12]
 800f73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f73e:	443b      	add	r3, r7
 800f740:	9309      	str	r3, [sp, #36]	; 0x24
 800f742:	e767      	b.n	800f614 <_vfiprintf_r+0x94>
 800f744:	fb0c 3202 	mla	r2, ip, r2, r3
 800f748:	460c      	mov	r4, r1
 800f74a:	2001      	movs	r0, #1
 800f74c:	e7a5      	b.n	800f69a <_vfiprintf_r+0x11a>
 800f74e:	2300      	movs	r3, #0
 800f750:	3401      	adds	r4, #1
 800f752:	9305      	str	r3, [sp, #20]
 800f754:	4619      	mov	r1, r3
 800f756:	f04f 0c0a 	mov.w	ip, #10
 800f75a:	4620      	mov	r0, r4
 800f75c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f760:	3a30      	subs	r2, #48	; 0x30
 800f762:	2a09      	cmp	r2, #9
 800f764:	d903      	bls.n	800f76e <_vfiprintf_r+0x1ee>
 800f766:	2b00      	cmp	r3, #0
 800f768:	d0c5      	beq.n	800f6f6 <_vfiprintf_r+0x176>
 800f76a:	9105      	str	r1, [sp, #20]
 800f76c:	e7c3      	b.n	800f6f6 <_vfiprintf_r+0x176>
 800f76e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f772:	4604      	mov	r4, r0
 800f774:	2301      	movs	r3, #1
 800f776:	e7f0      	b.n	800f75a <_vfiprintf_r+0x1da>
 800f778:	ab03      	add	r3, sp, #12
 800f77a:	9300      	str	r3, [sp, #0]
 800f77c:	462a      	mov	r2, r5
 800f77e:	4b16      	ldr	r3, [pc, #88]	; (800f7d8 <_vfiprintf_r+0x258>)
 800f780:	a904      	add	r1, sp, #16
 800f782:	4630      	mov	r0, r6
 800f784:	f3af 8000 	nop.w
 800f788:	4607      	mov	r7, r0
 800f78a:	1c78      	adds	r0, r7, #1
 800f78c:	d1d6      	bne.n	800f73c <_vfiprintf_r+0x1bc>
 800f78e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f790:	07d9      	lsls	r1, r3, #31
 800f792:	d405      	bmi.n	800f7a0 <_vfiprintf_r+0x220>
 800f794:	89ab      	ldrh	r3, [r5, #12]
 800f796:	059a      	lsls	r2, r3, #22
 800f798:	d402      	bmi.n	800f7a0 <_vfiprintf_r+0x220>
 800f79a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f79c:	f7ff feb9 	bl	800f512 <__retarget_lock_release_recursive>
 800f7a0:	89ab      	ldrh	r3, [r5, #12]
 800f7a2:	065b      	lsls	r3, r3, #25
 800f7a4:	f53f af12 	bmi.w	800f5cc <_vfiprintf_r+0x4c>
 800f7a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f7aa:	e711      	b.n	800f5d0 <_vfiprintf_r+0x50>
 800f7ac:	ab03      	add	r3, sp, #12
 800f7ae:	9300      	str	r3, [sp, #0]
 800f7b0:	462a      	mov	r2, r5
 800f7b2:	4b09      	ldr	r3, [pc, #36]	; (800f7d8 <_vfiprintf_r+0x258>)
 800f7b4:	a904      	add	r1, sp, #16
 800f7b6:	4630      	mov	r0, r6
 800f7b8:	f000 f880 	bl	800f8bc <_printf_i>
 800f7bc:	e7e4      	b.n	800f788 <_vfiprintf_r+0x208>
 800f7be:	bf00      	nop
 800f7c0:	08087120 	.word	0x08087120
 800f7c4:	08087140 	.word	0x08087140
 800f7c8:	08087100 	.word	0x08087100
 800f7cc:	08087160 	.word	0x08087160
 800f7d0:	0808716a 	.word	0x0808716a
 800f7d4:	00000000 	.word	0x00000000
 800f7d8:	0800f55b 	.word	0x0800f55b
 800f7dc:	08087166 	.word	0x08087166

0800f7e0 <_printf_common>:
 800f7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7e4:	4616      	mov	r6, r2
 800f7e6:	4699      	mov	r9, r3
 800f7e8:	688a      	ldr	r2, [r1, #8]
 800f7ea:	690b      	ldr	r3, [r1, #16]
 800f7ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	bfb8      	it	lt
 800f7f4:	4613      	movlt	r3, r2
 800f7f6:	6033      	str	r3, [r6, #0]
 800f7f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f7fc:	4607      	mov	r7, r0
 800f7fe:	460c      	mov	r4, r1
 800f800:	b10a      	cbz	r2, 800f806 <_printf_common+0x26>
 800f802:	3301      	adds	r3, #1
 800f804:	6033      	str	r3, [r6, #0]
 800f806:	6823      	ldr	r3, [r4, #0]
 800f808:	0699      	lsls	r1, r3, #26
 800f80a:	bf42      	ittt	mi
 800f80c:	6833      	ldrmi	r3, [r6, #0]
 800f80e:	3302      	addmi	r3, #2
 800f810:	6033      	strmi	r3, [r6, #0]
 800f812:	6825      	ldr	r5, [r4, #0]
 800f814:	f015 0506 	ands.w	r5, r5, #6
 800f818:	d106      	bne.n	800f828 <_printf_common+0x48>
 800f81a:	f104 0a19 	add.w	sl, r4, #25
 800f81e:	68e3      	ldr	r3, [r4, #12]
 800f820:	6832      	ldr	r2, [r6, #0]
 800f822:	1a9b      	subs	r3, r3, r2
 800f824:	42ab      	cmp	r3, r5
 800f826:	dc26      	bgt.n	800f876 <_printf_common+0x96>
 800f828:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f82c:	1e13      	subs	r3, r2, #0
 800f82e:	6822      	ldr	r2, [r4, #0]
 800f830:	bf18      	it	ne
 800f832:	2301      	movne	r3, #1
 800f834:	0692      	lsls	r2, r2, #26
 800f836:	d42b      	bmi.n	800f890 <_printf_common+0xb0>
 800f838:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f83c:	4649      	mov	r1, r9
 800f83e:	4638      	mov	r0, r7
 800f840:	47c0      	blx	r8
 800f842:	3001      	adds	r0, #1
 800f844:	d01e      	beq.n	800f884 <_printf_common+0xa4>
 800f846:	6823      	ldr	r3, [r4, #0]
 800f848:	68e5      	ldr	r5, [r4, #12]
 800f84a:	6832      	ldr	r2, [r6, #0]
 800f84c:	f003 0306 	and.w	r3, r3, #6
 800f850:	2b04      	cmp	r3, #4
 800f852:	bf08      	it	eq
 800f854:	1aad      	subeq	r5, r5, r2
 800f856:	68a3      	ldr	r3, [r4, #8]
 800f858:	6922      	ldr	r2, [r4, #16]
 800f85a:	bf0c      	ite	eq
 800f85c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f860:	2500      	movne	r5, #0
 800f862:	4293      	cmp	r3, r2
 800f864:	bfc4      	itt	gt
 800f866:	1a9b      	subgt	r3, r3, r2
 800f868:	18ed      	addgt	r5, r5, r3
 800f86a:	2600      	movs	r6, #0
 800f86c:	341a      	adds	r4, #26
 800f86e:	42b5      	cmp	r5, r6
 800f870:	d11a      	bne.n	800f8a8 <_printf_common+0xc8>
 800f872:	2000      	movs	r0, #0
 800f874:	e008      	b.n	800f888 <_printf_common+0xa8>
 800f876:	2301      	movs	r3, #1
 800f878:	4652      	mov	r2, sl
 800f87a:	4649      	mov	r1, r9
 800f87c:	4638      	mov	r0, r7
 800f87e:	47c0      	blx	r8
 800f880:	3001      	adds	r0, #1
 800f882:	d103      	bne.n	800f88c <_printf_common+0xac>
 800f884:	f04f 30ff 	mov.w	r0, #4294967295
 800f888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f88c:	3501      	adds	r5, #1
 800f88e:	e7c6      	b.n	800f81e <_printf_common+0x3e>
 800f890:	18e1      	adds	r1, r4, r3
 800f892:	1c5a      	adds	r2, r3, #1
 800f894:	2030      	movs	r0, #48	; 0x30
 800f896:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f89a:	4422      	add	r2, r4
 800f89c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f8a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f8a4:	3302      	adds	r3, #2
 800f8a6:	e7c7      	b.n	800f838 <_printf_common+0x58>
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	4622      	mov	r2, r4
 800f8ac:	4649      	mov	r1, r9
 800f8ae:	4638      	mov	r0, r7
 800f8b0:	47c0      	blx	r8
 800f8b2:	3001      	adds	r0, #1
 800f8b4:	d0e6      	beq.n	800f884 <_printf_common+0xa4>
 800f8b6:	3601      	adds	r6, #1
 800f8b8:	e7d9      	b.n	800f86e <_printf_common+0x8e>
	...

0800f8bc <_printf_i>:
 800f8bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f8c0:	460c      	mov	r4, r1
 800f8c2:	4691      	mov	r9, r2
 800f8c4:	7e27      	ldrb	r7, [r4, #24]
 800f8c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f8c8:	2f78      	cmp	r7, #120	; 0x78
 800f8ca:	4680      	mov	r8, r0
 800f8cc:	469a      	mov	sl, r3
 800f8ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f8d2:	d807      	bhi.n	800f8e4 <_printf_i+0x28>
 800f8d4:	2f62      	cmp	r7, #98	; 0x62
 800f8d6:	d80a      	bhi.n	800f8ee <_printf_i+0x32>
 800f8d8:	2f00      	cmp	r7, #0
 800f8da:	f000 80d8 	beq.w	800fa8e <_printf_i+0x1d2>
 800f8de:	2f58      	cmp	r7, #88	; 0x58
 800f8e0:	f000 80a3 	beq.w	800fa2a <_printf_i+0x16e>
 800f8e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f8e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f8ec:	e03a      	b.n	800f964 <_printf_i+0xa8>
 800f8ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f8f2:	2b15      	cmp	r3, #21
 800f8f4:	d8f6      	bhi.n	800f8e4 <_printf_i+0x28>
 800f8f6:	a001      	add	r0, pc, #4	; (adr r0, 800f8fc <_printf_i+0x40>)
 800f8f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f8fc:	0800f955 	.word	0x0800f955
 800f900:	0800f969 	.word	0x0800f969
 800f904:	0800f8e5 	.word	0x0800f8e5
 800f908:	0800f8e5 	.word	0x0800f8e5
 800f90c:	0800f8e5 	.word	0x0800f8e5
 800f910:	0800f8e5 	.word	0x0800f8e5
 800f914:	0800f969 	.word	0x0800f969
 800f918:	0800f8e5 	.word	0x0800f8e5
 800f91c:	0800f8e5 	.word	0x0800f8e5
 800f920:	0800f8e5 	.word	0x0800f8e5
 800f924:	0800f8e5 	.word	0x0800f8e5
 800f928:	0800fa75 	.word	0x0800fa75
 800f92c:	0800f999 	.word	0x0800f999
 800f930:	0800fa57 	.word	0x0800fa57
 800f934:	0800f8e5 	.word	0x0800f8e5
 800f938:	0800f8e5 	.word	0x0800f8e5
 800f93c:	0800fa97 	.word	0x0800fa97
 800f940:	0800f8e5 	.word	0x0800f8e5
 800f944:	0800f999 	.word	0x0800f999
 800f948:	0800f8e5 	.word	0x0800f8e5
 800f94c:	0800f8e5 	.word	0x0800f8e5
 800f950:	0800fa5f 	.word	0x0800fa5f
 800f954:	680b      	ldr	r3, [r1, #0]
 800f956:	1d1a      	adds	r2, r3, #4
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	600a      	str	r2, [r1, #0]
 800f95c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f964:	2301      	movs	r3, #1
 800f966:	e0a3      	b.n	800fab0 <_printf_i+0x1f4>
 800f968:	6825      	ldr	r5, [r4, #0]
 800f96a:	6808      	ldr	r0, [r1, #0]
 800f96c:	062e      	lsls	r6, r5, #24
 800f96e:	f100 0304 	add.w	r3, r0, #4
 800f972:	d50a      	bpl.n	800f98a <_printf_i+0xce>
 800f974:	6805      	ldr	r5, [r0, #0]
 800f976:	600b      	str	r3, [r1, #0]
 800f978:	2d00      	cmp	r5, #0
 800f97a:	da03      	bge.n	800f984 <_printf_i+0xc8>
 800f97c:	232d      	movs	r3, #45	; 0x2d
 800f97e:	426d      	negs	r5, r5
 800f980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f984:	485e      	ldr	r0, [pc, #376]	; (800fb00 <_printf_i+0x244>)
 800f986:	230a      	movs	r3, #10
 800f988:	e019      	b.n	800f9be <_printf_i+0x102>
 800f98a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f98e:	6805      	ldr	r5, [r0, #0]
 800f990:	600b      	str	r3, [r1, #0]
 800f992:	bf18      	it	ne
 800f994:	b22d      	sxthne	r5, r5
 800f996:	e7ef      	b.n	800f978 <_printf_i+0xbc>
 800f998:	680b      	ldr	r3, [r1, #0]
 800f99a:	6825      	ldr	r5, [r4, #0]
 800f99c:	1d18      	adds	r0, r3, #4
 800f99e:	6008      	str	r0, [r1, #0]
 800f9a0:	0628      	lsls	r0, r5, #24
 800f9a2:	d501      	bpl.n	800f9a8 <_printf_i+0xec>
 800f9a4:	681d      	ldr	r5, [r3, #0]
 800f9a6:	e002      	b.n	800f9ae <_printf_i+0xf2>
 800f9a8:	0669      	lsls	r1, r5, #25
 800f9aa:	d5fb      	bpl.n	800f9a4 <_printf_i+0xe8>
 800f9ac:	881d      	ldrh	r5, [r3, #0]
 800f9ae:	4854      	ldr	r0, [pc, #336]	; (800fb00 <_printf_i+0x244>)
 800f9b0:	2f6f      	cmp	r7, #111	; 0x6f
 800f9b2:	bf0c      	ite	eq
 800f9b4:	2308      	moveq	r3, #8
 800f9b6:	230a      	movne	r3, #10
 800f9b8:	2100      	movs	r1, #0
 800f9ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f9be:	6866      	ldr	r6, [r4, #4]
 800f9c0:	60a6      	str	r6, [r4, #8]
 800f9c2:	2e00      	cmp	r6, #0
 800f9c4:	bfa2      	ittt	ge
 800f9c6:	6821      	ldrge	r1, [r4, #0]
 800f9c8:	f021 0104 	bicge.w	r1, r1, #4
 800f9cc:	6021      	strge	r1, [r4, #0]
 800f9ce:	b90d      	cbnz	r5, 800f9d4 <_printf_i+0x118>
 800f9d0:	2e00      	cmp	r6, #0
 800f9d2:	d04d      	beq.n	800fa70 <_printf_i+0x1b4>
 800f9d4:	4616      	mov	r6, r2
 800f9d6:	fbb5 f1f3 	udiv	r1, r5, r3
 800f9da:	fb03 5711 	mls	r7, r3, r1, r5
 800f9de:	5dc7      	ldrb	r7, [r0, r7]
 800f9e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f9e4:	462f      	mov	r7, r5
 800f9e6:	42bb      	cmp	r3, r7
 800f9e8:	460d      	mov	r5, r1
 800f9ea:	d9f4      	bls.n	800f9d6 <_printf_i+0x11a>
 800f9ec:	2b08      	cmp	r3, #8
 800f9ee:	d10b      	bne.n	800fa08 <_printf_i+0x14c>
 800f9f0:	6823      	ldr	r3, [r4, #0]
 800f9f2:	07df      	lsls	r7, r3, #31
 800f9f4:	d508      	bpl.n	800fa08 <_printf_i+0x14c>
 800f9f6:	6923      	ldr	r3, [r4, #16]
 800f9f8:	6861      	ldr	r1, [r4, #4]
 800f9fa:	4299      	cmp	r1, r3
 800f9fc:	bfde      	ittt	le
 800f9fe:	2330      	movle	r3, #48	; 0x30
 800fa00:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fa04:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fa08:	1b92      	subs	r2, r2, r6
 800fa0a:	6122      	str	r2, [r4, #16]
 800fa0c:	f8cd a000 	str.w	sl, [sp]
 800fa10:	464b      	mov	r3, r9
 800fa12:	aa03      	add	r2, sp, #12
 800fa14:	4621      	mov	r1, r4
 800fa16:	4640      	mov	r0, r8
 800fa18:	f7ff fee2 	bl	800f7e0 <_printf_common>
 800fa1c:	3001      	adds	r0, #1
 800fa1e:	d14c      	bne.n	800faba <_printf_i+0x1fe>
 800fa20:	f04f 30ff 	mov.w	r0, #4294967295
 800fa24:	b004      	add	sp, #16
 800fa26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa2a:	4835      	ldr	r0, [pc, #212]	; (800fb00 <_printf_i+0x244>)
 800fa2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fa30:	6823      	ldr	r3, [r4, #0]
 800fa32:	680e      	ldr	r6, [r1, #0]
 800fa34:	061f      	lsls	r7, r3, #24
 800fa36:	f856 5b04 	ldr.w	r5, [r6], #4
 800fa3a:	600e      	str	r6, [r1, #0]
 800fa3c:	d514      	bpl.n	800fa68 <_printf_i+0x1ac>
 800fa3e:	07d9      	lsls	r1, r3, #31
 800fa40:	bf44      	itt	mi
 800fa42:	f043 0320 	orrmi.w	r3, r3, #32
 800fa46:	6023      	strmi	r3, [r4, #0]
 800fa48:	b91d      	cbnz	r5, 800fa52 <_printf_i+0x196>
 800fa4a:	6823      	ldr	r3, [r4, #0]
 800fa4c:	f023 0320 	bic.w	r3, r3, #32
 800fa50:	6023      	str	r3, [r4, #0]
 800fa52:	2310      	movs	r3, #16
 800fa54:	e7b0      	b.n	800f9b8 <_printf_i+0xfc>
 800fa56:	6823      	ldr	r3, [r4, #0]
 800fa58:	f043 0320 	orr.w	r3, r3, #32
 800fa5c:	6023      	str	r3, [r4, #0]
 800fa5e:	2378      	movs	r3, #120	; 0x78
 800fa60:	4828      	ldr	r0, [pc, #160]	; (800fb04 <_printf_i+0x248>)
 800fa62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fa66:	e7e3      	b.n	800fa30 <_printf_i+0x174>
 800fa68:	065e      	lsls	r6, r3, #25
 800fa6a:	bf48      	it	mi
 800fa6c:	b2ad      	uxthmi	r5, r5
 800fa6e:	e7e6      	b.n	800fa3e <_printf_i+0x182>
 800fa70:	4616      	mov	r6, r2
 800fa72:	e7bb      	b.n	800f9ec <_printf_i+0x130>
 800fa74:	680b      	ldr	r3, [r1, #0]
 800fa76:	6826      	ldr	r6, [r4, #0]
 800fa78:	6960      	ldr	r0, [r4, #20]
 800fa7a:	1d1d      	adds	r5, r3, #4
 800fa7c:	600d      	str	r5, [r1, #0]
 800fa7e:	0635      	lsls	r5, r6, #24
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	d501      	bpl.n	800fa88 <_printf_i+0x1cc>
 800fa84:	6018      	str	r0, [r3, #0]
 800fa86:	e002      	b.n	800fa8e <_printf_i+0x1d2>
 800fa88:	0671      	lsls	r1, r6, #25
 800fa8a:	d5fb      	bpl.n	800fa84 <_printf_i+0x1c8>
 800fa8c:	8018      	strh	r0, [r3, #0]
 800fa8e:	2300      	movs	r3, #0
 800fa90:	6123      	str	r3, [r4, #16]
 800fa92:	4616      	mov	r6, r2
 800fa94:	e7ba      	b.n	800fa0c <_printf_i+0x150>
 800fa96:	680b      	ldr	r3, [r1, #0]
 800fa98:	1d1a      	adds	r2, r3, #4
 800fa9a:	600a      	str	r2, [r1, #0]
 800fa9c:	681e      	ldr	r6, [r3, #0]
 800fa9e:	6862      	ldr	r2, [r4, #4]
 800faa0:	2100      	movs	r1, #0
 800faa2:	4630      	mov	r0, r6
 800faa4:	f7f0 fb94 	bl	80001d0 <memchr>
 800faa8:	b108      	cbz	r0, 800faae <_printf_i+0x1f2>
 800faaa:	1b80      	subs	r0, r0, r6
 800faac:	6060      	str	r0, [r4, #4]
 800faae:	6863      	ldr	r3, [r4, #4]
 800fab0:	6123      	str	r3, [r4, #16]
 800fab2:	2300      	movs	r3, #0
 800fab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fab8:	e7a8      	b.n	800fa0c <_printf_i+0x150>
 800faba:	6923      	ldr	r3, [r4, #16]
 800fabc:	4632      	mov	r2, r6
 800fabe:	4649      	mov	r1, r9
 800fac0:	4640      	mov	r0, r8
 800fac2:	47d0      	blx	sl
 800fac4:	3001      	adds	r0, #1
 800fac6:	d0ab      	beq.n	800fa20 <_printf_i+0x164>
 800fac8:	6823      	ldr	r3, [r4, #0]
 800faca:	079b      	lsls	r3, r3, #30
 800facc:	d413      	bmi.n	800faf6 <_printf_i+0x23a>
 800face:	68e0      	ldr	r0, [r4, #12]
 800fad0:	9b03      	ldr	r3, [sp, #12]
 800fad2:	4298      	cmp	r0, r3
 800fad4:	bfb8      	it	lt
 800fad6:	4618      	movlt	r0, r3
 800fad8:	e7a4      	b.n	800fa24 <_printf_i+0x168>
 800fada:	2301      	movs	r3, #1
 800fadc:	4632      	mov	r2, r6
 800fade:	4649      	mov	r1, r9
 800fae0:	4640      	mov	r0, r8
 800fae2:	47d0      	blx	sl
 800fae4:	3001      	adds	r0, #1
 800fae6:	d09b      	beq.n	800fa20 <_printf_i+0x164>
 800fae8:	3501      	adds	r5, #1
 800faea:	68e3      	ldr	r3, [r4, #12]
 800faec:	9903      	ldr	r1, [sp, #12]
 800faee:	1a5b      	subs	r3, r3, r1
 800faf0:	42ab      	cmp	r3, r5
 800faf2:	dcf2      	bgt.n	800fada <_printf_i+0x21e>
 800faf4:	e7eb      	b.n	800face <_printf_i+0x212>
 800faf6:	2500      	movs	r5, #0
 800faf8:	f104 0619 	add.w	r6, r4, #25
 800fafc:	e7f5      	b.n	800faea <_printf_i+0x22e>
 800fafe:	bf00      	nop
 800fb00:	08087171 	.word	0x08087171
 800fb04:	08087182 	.word	0x08087182

0800fb08 <_putc_r>:
 800fb08:	b570      	push	{r4, r5, r6, lr}
 800fb0a:	460d      	mov	r5, r1
 800fb0c:	4614      	mov	r4, r2
 800fb0e:	4606      	mov	r6, r0
 800fb10:	b118      	cbz	r0, 800fb1a <_putc_r+0x12>
 800fb12:	6983      	ldr	r3, [r0, #24]
 800fb14:	b90b      	cbnz	r3, 800fb1a <_putc_r+0x12>
 800fb16:	f7ff fc5d 	bl	800f3d4 <__sinit>
 800fb1a:	4b1c      	ldr	r3, [pc, #112]	; (800fb8c <_putc_r+0x84>)
 800fb1c:	429c      	cmp	r4, r3
 800fb1e:	d124      	bne.n	800fb6a <_putc_r+0x62>
 800fb20:	6874      	ldr	r4, [r6, #4]
 800fb22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fb24:	07d8      	lsls	r0, r3, #31
 800fb26:	d405      	bmi.n	800fb34 <_putc_r+0x2c>
 800fb28:	89a3      	ldrh	r3, [r4, #12]
 800fb2a:	0599      	lsls	r1, r3, #22
 800fb2c:	d402      	bmi.n	800fb34 <_putc_r+0x2c>
 800fb2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb30:	f7ff fcee 	bl	800f510 <__retarget_lock_acquire_recursive>
 800fb34:	68a3      	ldr	r3, [r4, #8]
 800fb36:	3b01      	subs	r3, #1
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	60a3      	str	r3, [r4, #8]
 800fb3c:	da05      	bge.n	800fb4a <_putc_r+0x42>
 800fb3e:	69a2      	ldr	r2, [r4, #24]
 800fb40:	4293      	cmp	r3, r2
 800fb42:	db1c      	blt.n	800fb7e <_putc_r+0x76>
 800fb44:	b2eb      	uxtb	r3, r5
 800fb46:	2b0a      	cmp	r3, #10
 800fb48:	d019      	beq.n	800fb7e <_putc_r+0x76>
 800fb4a:	6823      	ldr	r3, [r4, #0]
 800fb4c:	1c5a      	adds	r2, r3, #1
 800fb4e:	6022      	str	r2, [r4, #0]
 800fb50:	701d      	strb	r5, [r3, #0]
 800fb52:	b2ed      	uxtb	r5, r5
 800fb54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fb56:	07da      	lsls	r2, r3, #31
 800fb58:	d405      	bmi.n	800fb66 <_putc_r+0x5e>
 800fb5a:	89a3      	ldrh	r3, [r4, #12]
 800fb5c:	059b      	lsls	r3, r3, #22
 800fb5e:	d402      	bmi.n	800fb66 <_putc_r+0x5e>
 800fb60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb62:	f7ff fcd6 	bl	800f512 <__retarget_lock_release_recursive>
 800fb66:	4628      	mov	r0, r5
 800fb68:	bd70      	pop	{r4, r5, r6, pc}
 800fb6a:	4b09      	ldr	r3, [pc, #36]	; (800fb90 <_putc_r+0x88>)
 800fb6c:	429c      	cmp	r4, r3
 800fb6e:	d101      	bne.n	800fb74 <_putc_r+0x6c>
 800fb70:	68b4      	ldr	r4, [r6, #8]
 800fb72:	e7d6      	b.n	800fb22 <_putc_r+0x1a>
 800fb74:	4b07      	ldr	r3, [pc, #28]	; (800fb94 <_putc_r+0x8c>)
 800fb76:	429c      	cmp	r4, r3
 800fb78:	bf08      	it	eq
 800fb7a:	68f4      	ldreq	r4, [r6, #12]
 800fb7c:	e7d1      	b.n	800fb22 <_putc_r+0x1a>
 800fb7e:	4629      	mov	r1, r5
 800fb80:	4622      	mov	r2, r4
 800fb82:	4630      	mov	r0, r6
 800fb84:	f000 f84c 	bl	800fc20 <__swbuf_r>
 800fb88:	4605      	mov	r5, r0
 800fb8a:	e7e3      	b.n	800fb54 <_putc_r+0x4c>
 800fb8c:	08087120 	.word	0x08087120
 800fb90:	08087140 	.word	0x08087140
 800fb94:	08087100 	.word	0x08087100

0800fb98 <__sread>:
 800fb98:	b510      	push	{r4, lr}
 800fb9a:	460c      	mov	r4, r1
 800fb9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fba0:	f000 fa58 	bl	8010054 <_read_r>
 800fba4:	2800      	cmp	r0, #0
 800fba6:	bfab      	itete	ge
 800fba8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fbaa:	89a3      	ldrhlt	r3, [r4, #12]
 800fbac:	181b      	addge	r3, r3, r0
 800fbae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fbb2:	bfac      	ite	ge
 800fbb4:	6563      	strge	r3, [r4, #84]	; 0x54
 800fbb6:	81a3      	strhlt	r3, [r4, #12]
 800fbb8:	bd10      	pop	{r4, pc}

0800fbba <__swrite>:
 800fbba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbbe:	461f      	mov	r7, r3
 800fbc0:	898b      	ldrh	r3, [r1, #12]
 800fbc2:	05db      	lsls	r3, r3, #23
 800fbc4:	4605      	mov	r5, r0
 800fbc6:	460c      	mov	r4, r1
 800fbc8:	4616      	mov	r6, r2
 800fbca:	d505      	bpl.n	800fbd8 <__swrite+0x1e>
 800fbcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbd0:	2302      	movs	r3, #2
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	f000 f9c8 	bl	800ff68 <_lseek_r>
 800fbd8:	89a3      	ldrh	r3, [r4, #12]
 800fbda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fbe2:	81a3      	strh	r3, [r4, #12]
 800fbe4:	4632      	mov	r2, r6
 800fbe6:	463b      	mov	r3, r7
 800fbe8:	4628      	mov	r0, r5
 800fbea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbee:	f000 b869 	b.w	800fcc4 <_write_r>

0800fbf2 <__sseek>:
 800fbf2:	b510      	push	{r4, lr}
 800fbf4:	460c      	mov	r4, r1
 800fbf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbfa:	f000 f9b5 	bl	800ff68 <_lseek_r>
 800fbfe:	1c43      	adds	r3, r0, #1
 800fc00:	89a3      	ldrh	r3, [r4, #12]
 800fc02:	bf15      	itete	ne
 800fc04:	6560      	strne	r0, [r4, #84]	; 0x54
 800fc06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fc0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fc0e:	81a3      	strheq	r3, [r4, #12]
 800fc10:	bf18      	it	ne
 800fc12:	81a3      	strhne	r3, [r4, #12]
 800fc14:	bd10      	pop	{r4, pc}

0800fc16 <__sclose>:
 800fc16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc1a:	f000 b8d3 	b.w	800fdc4 <_close_r>
	...

0800fc20 <__swbuf_r>:
 800fc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc22:	460e      	mov	r6, r1
 800fc24:	4614      	mov	r4, r2
 800fc26:	4605      	mov	r5, r0
 800fc28:	b118      	cbz	r0, 800fc32 <__swbuf_r+0x12>
 800fc2a:	6983      	ldr	r3, [r0, #24]
 800fc2c:	b90b      	cbnz	r3, 800fc32 <__swbuf_r+0x12>
 800fc2e:	f7ff fbd1 	bl	800f3d4 <__sinit>
 800fc32:	4b21      	ldr	r3, [pc, #132]	; (800fcb8 <__swbuf_r+0x98>)
 800fc34:	429c      	cmp	r4, r3
 800fc36:	d12b      	bne.n	800fc90 <__swbuf_r+0x70>
 800fc38:	686c      	ldr	r4, [r5, #4]
 800fc3a:	69a3      	ldr	r3, [r4, #24]
 800fc3c:	60a3      	str	r3, [r4, #8]
 800fc3e:	89a3      	ldrh	r3, [r4, #12]
 800fc40:	071a      	lsls	r2, r3, #28
 800fc42:	d52f      	bpl.n	800fca4 <__swbuf_r+0x84>
 800fc44:	6923      	ldr	r3, [r4, #16]
 800fc46:	b36b      	cbz	r3, 800fca4 <__swbuf_r+0x84>
 800fc48:	6923      	ldr	r3, [r4, #16]
 800fc4a:	6820      	ldr	r0, [r4, #0]
 800fc4c:	1ac0      	subs	r0, r0, r3
 800fc4e:	6963      	ldr	r3, [r4, #20]
 800fc50:	b2f6      	uxtb	r6, r6
 800fc52:	4283      	cmp	r3, r0
 800fc54:	4637      	mov	r7, r6
 800fc56:	dc04      	bgt.n	800fc62 <__swbuf_r+0x42>
 800fc58:	4621      	mov	r1, r4
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	f000 f948 	bl	800fef0 <_fflush_r>
 800fc60:	bb30      	cbnz	r0, 800fcb0 <__swbuf_r+0x90>
 800fc62:	68a3      	ldr	r3, [r4, #8]
 800fc64:	3b01      	subs	r3, #1
 800fc66:	60a3      	str	r3, [r4, #8]
 800fc68:	6823      	ldr	r3, [r4, #0]
 800fc6a:	1c5a      	adds	r2, r3, #1
 800fc6c:	6022      	str	r2, [r4, #0]
 800fc6e:	701e      	strb	r6, [r3, #0]
 800fc70:	6963      	ldr	r3, [r4, #20]
 800fc72:	3001      	adds	r0, #1
 800fc74:	4283      	cmp	r3, r0
 800fc76:	d004      	beq.n	800fc82 <__swbuf_r+0x62>
 800fc78:	89a3      	ldrh	r3, [r4, #12]
 800fc7a:	07db      	lsls	r3, r3, #31
 800fc7c:	d506      	bpl.n	800fc8c <__swbuf_r+0x6c>
 800fc7e:	2e0a      	cmp	r6, #10
 800fc80:	d104      	bne.n	800fc8c <__swbuf_r+0x6c>
 800fc82:	4621      	mov	r1, r4
 800fc84:	4628      	mov	r0, r5
 800fc86:	f000 f933 	bl	800fef0 <_fflush_r>
 800fc8a:	b988      	cbnz	r0, 800fcb0 <__swbuf_r+0x90>
 800fc8c:	4638      	mov	r0, r7
 800fc8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc90:	4b0a      	ldr	r3, [pc, #40]	; (800fcbc <__swbuf_r+0x9c>)
 800fc92:	429c      	cmp	r4, r3
 800fc94:	d101      	bne.n	800fc9a <__swbuf_r+0x7a>
 800fc96:	68ac      	ldr	r4, [r5, #8]
 800fc98:	e7cf      	b.n	800fc3a <__swbuf_r+0x1a>
 800fc9a:	4b09      	ldr	r3, [pc, #36]	; (800fcc0 <__swbuf_r+0xa0>)
 800fc9c:	429c      	cmp	r4, r3
 800fc9e:	bf08      	it	eq
 800fca0:	68ec      	ldreq	r4, [r5, #12]
 800fca2:	e7ca      	b.n	800fc3a <__swbuf_r+0x1a>
 800fca4:	4621      	mov	r1, r4
 800fca6:	4628      	mov	r0, r5
 800fca8:	f000 f81e 	bl	800fce8 <__swsetup_r>
 800fcac:	2800      	cmp	r0, #0
 800fcae:	d0cb      	beq.n	800fc48 <__swbuf_r+0x28>
 800fcb0:	f04f 37ff 	mov.w	r7, #4294967295
 800fcb4:	e7ea      	b.n	800fc8c <__swbuf_r+0x6c>
 800fcb6:	bf00      	nop
 800fcb8:	08087120 	.word	0x08087120
 800fcbc:	08087140 	.word	0x08087140
 800fcc0:	08087100 	.word	0x08087100

0800fcc4 <_write_r>:
 800fcc4:	b538      	push	{r3, r4, r5, lr}
 800fcc6:	4d07      	ldr	r5, [pc, #28]	; (800fce4 <_write_r+0x20>)
 800fcc8:	4604      	mov	r4, r0
 800fcca:	4608      	mov	r0, r1
 800fccc:	4611      	mov	r1, r2
 800fcce:	2200      	movs	r2, #0
 800fcd0:	602a      	str	r2, [r5, #0]
 800fcd2:	461a      	mov	r2, r3
 800fcd4:	f7f1 fcf1 	bl	80016ba <_write>
 800fcd8:	1c43      	adds	r3, r0, #1
 800fcda:	d102      	bne.n	800fce2 <_write_r+0x1e>
 800fcdc:	682b      	ldr	r3, [r5, #0]
 800fcde:	b103      	cbz	r3, 800fce2 <_write_r+0x1e>
 800fce0:	6023      	str	r3, [r4, #0]
 800fce2:	bd38      	pop	{r3, r4, r5, pc}
 800fce4:	20007b78 	.word	0x20007b78

0800fce8 <__swsetup_r>:
 800fce8:	4b32      	ldr	r3, [pc, #200]	; (800fdb4 <__swsetup_r+0xcc>)
 800fcea:	b570      	push	{r4, r5, r6, lr}
 800fcec:	681d      	ldr	r5, [r3, #0]
 800fcee:	4606      	mov	r6, r0
 800fcf0:	460c      	mov	r4, r1
 800fcf2:	b125      	cbz	r5, 800fcfe <__swsetup_r+0x16>
 800fcf4:	69ab      	ldr	r3, [r5, #24]
 800fcf6:	b913      	cbnz	r3, 800fcfe <__swsetup_r+0x16>
 800fcf8:	4628      	mov	r0, r5
 800fcfa:	f7ff fb6b 	bl	800f3d4 <__sinit>
 800fcfe:	4b2e      	ldr	r3, [pc, #184]	; (800fdb8 <__swsetup_r+0xd0>)
 800fd00:	429c      	cmp	r4, r3
 800fd02:	d10f      	bne.n	800fd24 <__swsetup_r+0x3c>
 800fd04:	686c      	ldr	r4, [r5, #4]
 800fd06:	89a3      	ldrh	r3, [r4, #12]
 800fd08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd0c:	0719      	lsls	r1, r3, #28
 800fd0e:	d42c      	bmi.n	800fd6a <__swsetup_r+0x82>
 800fd10:	06dd      	lsls	r5, r3, #27
 800fd12:	d411      	bmi.n	800fd38 <__swsetup_r+0x50>
 800fd14:	2309      	movs	r3, #9
 800fd16:	6033      	str	r3, [r6, #0]
 800fd18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fd1c:	81a3      	strh	r3, [r4, #12]
 800fd1e:	f04f 30ff 	mov.w	r0, #4294967295
 800fd22:	e03e      	b.n	800fda2 <__swsetup_r+0xba>
 800fd24:	4b25      	ldr	r3, [pc, #148]	; (800fdbc <__swsetup_r+0xd4>)
 800fd26:	429c      	cmp	r4, r3
 800fd28:	d101      	bne.n	800fd2e <__swsetup_r+0x46>
 800fd2a:	68ac      	ldr	r4, [r5, #8]
 800fd2c:	e7eb      	b.n	800fd06 <__swsetup_r+0x1e>
 800fd2e:	4b24      	ldr	r3, [pc, #144]	; (800fdc0 <__swsetup_r+0xd8>)
 800fd30:	429c      	cmp	r4, r3
 800fd32:	bf08      	it	eq
 800fd34:	68ec      	ldreq	r4, [r5, #12]
 800fd36:	e7e6      	b.n	800fd06 <__swsetup_r+0x1e>
 800fd38:	0758      	lsls	r0, r3, #29
 800fd3a:	d512      	bpl.n	800fd62 <__swsetup_r+0x7a>
 800fd3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd3e:	b141      	cbz	r1, 800fd52 <__swsetup_r+0x6a>
 800fd40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd44:	4299      	cmp	r1, r3
 800fd46:	d002      	beq.n	800fd4e <__swsetup_r+0x66>
 800fd48:	4630      	mov	r0, r6
 800fd4a:	f7ff fa03 	bl	800f154 <_free_r>
 800fd4e:	2300      	movs	r3, #0
 800fd50:	6363      	str	r3, [r4, #52]	; 0x34
 800fd52:	89a3      	ldrh	r3, [r4, #12]
 800fd54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fd58:	81a3      	strh	r3, [r4, #12]
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	6063      	str	r3, [r4, #4]
 800fd5e:	6923      	ldr	r3, [r4, #16]
 800fd60:	6023      	str	r3, [r4, #0]
 800fd62:	89a3      	ldrh	r3, [r4, #12]
 800fd64:	f043 0308 	orr.w	r3, r3, #8
 800fd68:	81a3      	strh	r3, [r4, #12]
 800fd6a:	6923      	ldr	r3, [r4, #16]
 800fd6c:	b94b      	cbnz	r3, 800fd82 <__swsetup_r+0x9a>
 800fd6e:	89a3      	ldrh	r3, [r4, #12]
 800fd70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fd74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd78:	d003      	beq.n	800fd82 <__swsetup_r+0x9a>
 800fd7a:	4621      	mov	r1, r4
 800fd7c:	4630      	mov	r0, r6
 800fd7e:	f000 f929 	bl	800ffd4 <__smakebuf_r>
 800fd82:	89a0      	ldrh	r0, [r4, #12]
 800fd84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd88:	f010 0301 	ands.w	r3, r0, #1
 800fd8c:	d00a      	beq.n	800fda4 <__swsetup_r+0xbc>
 800fd8e:	2300      	movs	r3, #0
 800fd90:	60a3      	str	r3, [r4, #8]
 800fd92:	6963      	ldr	r3, [r4, #20]
 800fd94:	425b      	negs	r3, r3
 800fd96:	61a3      	str	r3, [r4, #24]
 800fd98:	6923      	ldr	r3, [r4, #16]
 800fd9a:	b943      	cbnz	r3, 800fdae <__swsetup_r+0xc6>
 800fd9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fda0:	d1ba      	bne.n	800fd18 <__swsetup_r+0x30>
 800fda2:	bd70      	pop	{r4, r5, r6, pc}
 800fda4:	0781      	lsls	r1, r0, #30
 800fda6:	bf58      	it	pl
 800fda8:	6963      	ldrpl	r3, [r4, #20]
 800fdaa:	60a3      	str	r3, [r4, #8]
 800fdac:	e7f4      	b.n	800fd98 <__swsetup_r+0xb0>
 800fdae:	2000      	movs	r0, #0
 800fdb0:	e7f7      	b.n	800fda2 <__swsetup_r+0xba>
 800fdb2:	bf00      	nop
 800fdb4:	20000044 	.word	0x20000044
 800fdb8:	08087120 	.word	0x08087120
 800fdbc:	08087140 	.word	0x08087140
 800fdc0:	08087100 	.word	0x08087100

0800fdc4 <_close_r>:
 800fdc4:	b538      	push	{r3, r4, r5, lr}
 800fdc6:	4d06      	ldr	r5, [pc, #24]	; (800fde0 <_close_r+0x1c>)
 800fdc8:	2300      	movs	r3, #0
 800fdca:	4604      	mov	r4, r0
 800fdcc:	4608      	mov	r0, r1
 800fdce:	602b      	str	r3, [r5, #0]
 800fdd0:	f7f1 fc8f 	bl	80016f2 <_close>
 800fdd4:	1c43      	adds	r3, r0, #1
 800fdd6:	d102      	bne.n	800fdde <_close_r+0x1a>
 800fdd8:	682b      	ldr	r3, [r5, #0]
 800fdda:	b103      	cbz	r3, 800fdde <_close_r+0x1a>
 800fddc:	6023      	str	r3, [r4, #0]
 800fdde:	bd38      	pop	{r3, r4, r5, pc}
 800fde0:	20007b78 	.word	0x20007b78

0800fde4 <__sflush_r>:
 800fde4:	898a      	ldrh	r2, [r1, #12]
 800fde6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdea:	4605      	mov	r5, r0
 800fdec:	0710      	lsls	r0, r2, #28
 800fdee:	460c      	mov	r4, r1
 800fdf0:	d458      	bmi.n	800fea4 <__sflush_r+0xc0>
 800fdf2:	684b      	ldr	r3, [r1, #4]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	dc05      	bgt.n	800fe04 <__sflush_r+0x20>
 800fdf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	dc02      	bgt.n	800fe04 <__sflush_r+0x20>
 800fdfe:	2000      	movs	r0, #0
 800fe00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe06:	2e00      	cmp	r6, #0
 800fe08:	d0f9      	beq.n	800fdfe <__sflush_r+0x1a>
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fe10:	682f      	ldr	r7, [r5, #0]
 800fe12:	602b      	str	r3, [r5, #0]
 800fe14:	d032      	beq.n	800fe7c <__sflush_r+0x98>
 800fe16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fe18:	89a3      	ldrh	r3, [r4, #12]
 800fe1a:	075a      	lsls	r2, r3, #29
 800fe1c:	d505      	bpl.n	800fe2a <__sflush_r+0x46>
 800fe1e:	6863      	ldr	r3, [r4, #4]
 800fe20:	1ac0      	subs	r0, r0, r3
 800fe22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fe24:	b10b      	cbz	r3, 800fe2a <__sflush_r+0x46>
 800fe26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fe28:	1ac0      	subs	r0, r0, r3
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	4602      	mov	r2, r0
 800fe2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe30:	6a21      	ldr	r1, [r4, #32]
 800fe32:	4628      	mov	r0, r5
 800fe34:	47b0      	blx	r6
 800fe36:	1c43      	adds	r3, r0, #1
 800fe38:	89a3      	ldrh	r3, [r4, #12]
 800fe3a:	d106      	bne.n	800fe4a <__sflush_r+0x66>
 800fe3c:	6829      	ldr	r1, [r5, #0]
 800fe3e:	291d      	cmp	r1, #29
 800fe40:	d82c      	bhi.n	800fe9c <__sflush_r+0xb8>
 800fe42:	4a2a      	ldr	r2, [pc, #168]	; (800feec <__sflush_r+0x108>)
 800fe44:	40ca      	lsrs	r2, r1
 800fe46:	07d6      	lsls	r6, r2, #31
 800fe48:	d528      	bpl.n	800fe9c <__sflush_r+0xb8>
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	6062      	str	r2, [r4, #4]
 800fe4e:	04d9      	lsls	r1, r3, #19
 800fe50:	6922      	ldr	r2, [r4, #16]
 800fe52:	6022      	str	r2, [r4, #0]
 800fe54:	d504      	bpl.n	800fe60 <__sflush_r+0x7c>
 800fe56:	1c42      	adds	r2, r0, #1
 800fe58:	d101      	bne.n	800fe5e <__sflush_r+0x7a>
 800fe5a:	682b      	ldr	r3, [r5, #0]
 800fe5c:	b903      	cbnz	r3, 800fe60 <__sflush_r+0x7c>
 800fe5e:	6560      	str	r0, [r4, #84]	; 0x54
 800fe60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe62:	602f      	str	r7, [r5, #0]
 800fe64:	2900      	cmp	r1, #0
 800fe66:	d0ca      	beq.n	800fdfe <__sflush_r+0x1a>
 800fe68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe6c:	4299      	cmp	r1, r3
 800fe6e:	d002      	beq.n	800fe76 <__sflush_r+0x92>
 800fe70:	4628      	mov	r0, r5
 800fe72:	f7ff f96f 	bl	800f154 <_free_r>
 800fe76:	2000      	movs	r0, #0
 800fe78:	6360      	str	r0, [r4, #52]	; 0x34
 800fe7a:	e7c1      	b.n	800fe00 <__sflush_r+0x1c>
 800fe7c:	6a21      	ldr	r1, [r4, #32]
 800fe7e:	2301      	movs	r3, #1
 800fe80:	4628      	mov	r0, r5
 800fe82:	47b0      	blx	r6
 800fe84:	1c41      	adds	r1, r0, #1
 800fe86:	d1c7      	bne.n	800fe18 <__sflush_r+0x34>
 800fe88:	682b      	ldr	r3, [r5, #0]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d0c4      	beq.n	800fe18 <__sflush_r+0x34>
 800fe8e:	2b1d      	cmp	r3, #29
 800fe90:	d001      	beq.n	800fe96 <__sflush_r+0xb2>
 800fe92:	2b16      	cmp	r3, #22
 800fe94:	d101      	bne.n	800fe9a <__sflush_r+0xb6>
 800fe96:	602f      	str	r7, [r5, #0]
 800fe98:	e7b1      	b.n	800fdfe <__sflush_r+0x1a>
 800fe9a:	89a3      	ldrh	r3, [r4, #12]
 800fe9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fea0:	81a3      	strh	r3, [r4, #12]
 800fea2:	e7ad      	b.n	800fe00 <__sflush_r+0x1c>
 800fea4:	690f      	ldr	r7, [r1, #16]
 800fea6:	2f00      	cmp	r7, #0
 800fea8:	d0a9      	beq.n	800fdfe <__sflush_r+0x1a>
 800feaa:	0793      	lsls	r3, r2, #30
 800feac:	680e      	ldr	r6, [r1, #0]
 800feae:	bf08      	it	eq
 800feb0:	694b      	ldreq	r3, [r1, #20]
 800feb2:	600f      	str	r7, [r1, #0]
 800feb4:	bf18      	it	ne
 800feb6:	2300      	movne	r3, #0
 800feb8:	eba6 0807 	sub.w	r8, r6, r7
 800febc:	608b      	str	r3, [r1, #8]
 800febe:	f1b8 0f00 	cmp.w	r8, #0
 800fec2:	dd9c      	ble.n	800fdfe <__sflush_r+0x1a>
 800fec4:	6a21      	ldr	r1, [r4, #32]
 800fec6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fec8:	4643      	mov	r3, r8
 800feca:	463a      	mov	r2, r7
 800fecc:	4628      	mov	r0, r5
 800fece:	47b0      	blx	r6
 800fed0:	2800      	cmp	r0, #0
 800fed2:	dc06      	bgt.n	800fee2 <__sflush_r+0xfe>
 800fed4:	89a3      	ldrh	r3, [r4, #12]
 800fed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800feda:	81a3      	strh	r3, [r4, #12]
 800fedc:	f04f 30ff 	mov.w	r0, #4294967295
 800fee0:	e78e      	b.n	800fe00 <__sflush_r+0x1c>
 800fee2:	4407      	add	r7, r0
 800fee4:	eba8 0800 	sub.w	r8, r8, r0
 800fee8:	e7e9      	b.n	800febe <__sflush_r+0xda>
 800feea:	bf00      	nop
 800feec:	20400001 	.word	0x20400001

0800fef0 <_fflush_r>:
 800fef0:	b538      	push	{r3, r4, r5, lr}
 800fef2:	690b      	ldr	r3, [r1, #16]
 800fef4:	4605      	mov	r5, r0
 800fef6:	460c      	mov	r4, r1
 800fef8:	b913      	cbnz	r3, 800ff00 <_fflush_r+0x10>
 800fefa:	2500      	movs	r5, #0
 800fefc:	4628      	mov	r0, r5
 800fefe:	bd38      	pop	{r3, r4, r5, pc}
 800ff00:	b118      	cbz	r0, 800ff0a <_fflush_r+0x1a>
 800ff02:	6983      	ldr	r3, [r0, #24]
 800ff04:	b90b      	cbnz	r3, 800ff0a <_fflush_r+0x1a>
 800ff06:	f7ff fa65 	bl	800f3d4 <__sinit>
 800ff0a:	4b14      	ldr	r3, [pc, #80]	; (800ff5c <_fflush_r+0x6c>)
 800ff0c:	429c      	cmp	r4, r3
 800ff0e:	d11b      	bne.n	800ff48 <_fflush_r+0x58>
 800ff10:	686c      	ldr	r4, [r5, #4]
 800ff12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d0ef      	beq.n	800fefa <_fflush_r+0xa>
 800ff1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ff1c:	07d0      	lsls	r0, r2, #31
 800ff1e:	d404      	bmi.n	800ff2a <_fflush_r+0x3a>
 800ff20:	0599      	lsls	r1, r3, #22
 800ff22:	d402      	bmi.n	800ff2a <_fflush_r+0x3a>
 800ff24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff26:	f7ff faf3 	bl	800f510 <__retarget_lock_acquire_recursive>
 800ff2a:	4628      	mov	r0, r5
 800ff2c:	4621      	mov	r1, r4
 800ff2e:	f7ff ff59 	bl	800fde4 <__sflush_r>
 800ff32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff34:	07da      	lsls	r2, r3, #31
 800ff36:	4605      	mov	r5, r0
 800ff38:	d4e0      	bmi.n	800fefc <_fflush_r+0xc>
 800ff3a:	89a3      	ldrh	r3, [r4, #12]
 800ff3c:	059b      	lsls	r3, r3, #22
 800ff3e:	d4dd      	bmi.n	800fefc <_fflush_r+0xc>
 800ff40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff42:	f7ff fae6 	bl	800f512 <__retarget_lock_release_recursive>
 800ff46:	e7d9      	b.n	800fefc <_fflush_r+0xc>
 800ff48:	4b05      	ldr	r3, [pc, #20]	; (800ff60 <_fflush_r+0x70>)
 800ff4a:	429c      	cmp	r4, r3
 800ff4c:	d101      	bne.n	800ff52 <_fflush_r+0x62>
 800ff4e:	68ac      	ldr	r4, [r5, #8]
 800ff50:	e7df      	b.n	800ff12 <_fflush_r+0x22>
 800ff52:	4b04      	ldr	r3, [pc, #16]	; (800ff64 <_fflush_r+0x74>)
 800ff54:	429c      	cmp	r4, r3
 800ff56:	bf08      	it	eq
 800ff58:	68ec      	ldreq	r4, [r5, #12]
 800ff5a:	e7da      	b.n	800ff12 <_fflush_r+0x22>
 800ff5c:	08087120 	.word	0x08087120
 800ff60:	08087140 	.word	0x08087140
 800ff64:	08087100 	.word	0x08087100

0800ff68 <_lseek_r>:
 800ff68:	b538      	push	{r3, r4, r5, lr}
 800ff6a:	4d07      	ldr	r5, [pc, #28]	; (800ff88 <_lseek_r+0x20>)
 800ff6c:	4604      	mov	r4, r0
 800ff6e:	4608      	mov	r0, r1
 800ff70:	4611      	mov	r1, r2
 800ff72:	2200      	movs	r2, #0
 800ff74:	602a      	str	r2, [r5, #0]
 800ff76:	461a      	mov	r2, r3
 800ff78:	f7f1 fbe2 	bl	8001740 <_lseek>
 800ff7c:	1c43      	adds	r3, r0, #1
 800ff7e:	d102      	bne.n	800ff86 <_lseek_r+0x1e>
 800ff80:	682b      	ldr	r3, [r5, #0]
 800ff82:	b103      	cbz	r3, 800ff86 <_lseek_r+0x1e>
 800ff84:	6023      	str	r3, [r4, #0]
 800ff86:	bd38      	pop	{r3, r4, r5, pc}
 800ff88:	20007b78 	.word	0x20007b78

0800ff8c <__swhatbuf_r>:
 800ff8c:	b570      	push	{r4, r5, r6, lr}
 800ff8e:	460e      	mov	r6, r1
 800ff90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff94:	2900      	cmp	r1, #0
 800ff96:	b096      	sub	sp, #88	; 0x58
 800ff98:	4614      	mov	r4, r2
 800ff9a:	461d      	mov	r5, r3
 800ff9c:	da07      	bge.n	800ffae <__swhatbuf_r+0x22>
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	602b      	str	r3, [r5, #0]
 800ffa2:	89b3      	ldrh	r3, [r6, #12]
 800ffa4:	061a      	lsls	r2, r3, #24
 800ffa6:	d410      	bmi.n	800ffca <__swhatbuf_r+0x3e>
 800ffa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ffac:	e00e      	b.n	800ffcc <__swhatbuf_r+0x40>
 800ffae:	466a      	mov	r2, sp
 800ffb0:	f000 f862 	bl	8010078 <_fstat_r>
 800ffb4:	2800      	cmp	r0, #0
 800ffb6:	dbf2      	blt.n	800ff9e <__swhatbuf_r+0x12>
 800ffb8:	9a01      	ldr	r2, [sp, #4]
 800ffba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ffbe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ffc2:	425a      	negs	r2, r3
 800ffc4:	415a      	adcs	r2, r3
 800ffc6:	602a      	str	r2, [r5, #0]
 800ffc8:	e7ee      	b.n	800ffa8 <__swhatbuf_r+0x1c>
 800ffca:	2340      	movs	r3, #64	; 0x40
 800ffcc:	2000      	movs	r0, #0
 800ffce:	6023      	str	r3, [r4, #0]
 800ffd0:	b016      	add	sp, #88	; 0x58
 800ffd2:	bd70      	pop	{r4, r5, r6, pc}

0800ffd4 <__smakebuf_r>:
 800ffd4:	898b      	ldrh	r3, [r1, #12]
 800ffd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ffd8:	079d      	lsls	r5, r3, #30
 800ffda:	4606      	mov	r6, r0
 800ffdc:	460c      	mov	r4, r1
 800ffde:	d507      	bpl.n	800fff0 <__smakebuf_r+0x1c>
 800ffe0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ffe4:	6023      	str	r3, [r4, #0]
 800ffe6:	6123      	str	r3, [r4, #16]
 800ffe8:	2301      	movs	r3, #1
 800ffea:	6163      	str	r3, [r4, #20]
 800ffec:	b002      	add	sp, #8
 800ffee:	bd70      	pop	{r4, r5, r6, pc}
 800fff0:	ab01      	add	r3, sp, #4
 800fff2:	466a      	mov	r2, sp
 800fff4:	f7ff ffca 	bl	800ff8c <__swhatbuf_r>
 800fff8:	9900      	ldr	r1, [sp, #0]
 800fffa:	4605      	mov	r5, r0
 800fffc:	4630      	mov	r0, r6
 800fffe:	f7ff f8f9 	bl	800f1f4 <_malloc_r>
 8010002:	b948      	cbnz	r0, 8010018 <__smakebuf_r+0x44>
 8010004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010008:	059a      	lsls	r2, r3, #22
 801000a:	d4ef      	bmi.n	800ffec <__smakebuf_r+0x18>
 801000c:	f023 0303 	bic.w	r3, r3, #3
 8010010:	f043 0302 	orr.w	r3, r3, #2
 8010014:	81a3      	strh	r3, [r4, #12]
 8010016:	e7e3      	b.n	800ffe0 <__smakebuf_r+0xc>
 8010018:	4b0d      	ldr	r3, [pc, #52]	; (8010050 <__smakebuf_r+0x7c>)
 801001a:	62b3      	str	r3, [r6, #40]	; 0x28
 801001c:	89a3      	ldrh	r3, [r4, #12]
 801001e:	6020      	str	r0, [r4, #0]
 8010020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010024:	81a3      	strh	r3, [r4, #12]
 8010026:	9b00      	ldr	r3, [sp, #0]
 8010028:	6163      	str	r3, [r4, #20]
 801002a:	9b01      	ldr	r3, [sp, #4]
 801002c:	6120      	str	r0, [r4, #16]
 801002e:	b15b      	cbz	r3, 8010048 <__smakebuf_r+0x74>
 8010030:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010034:	4630      	mov	r0, r6
 8010036:	f000 f831 	bl	801009c <_isatty_r>
 801003a:	b128      	cbz	r0, 8010048 <__smakebuf_r+0x74>
 801003c:	89a3      	ldrh	r3, [r4, #12]
 801003e:	f023 0303 	bic.w	r3, r3, #3
 8010042:	f043 0301 	orr.w	r3, r3, #1
 8010046:	81a3      	strh	r3, [r4, #12]
 8010048:	89a0      	ldrh	r0, [r4, #12]
 801004a:	4305      	orrs	r5, r0
 801004c:	81a5      	strh	r5, [r4, #12]
 801004e:	e7cd      	b.n	800ffec <__smakebuf_r+0x18>
 8010050:	0800f36d 	.word	0x0800f36d

08010054 <_read_r>:
 8010054:	b538      	push	{r3, r4, r5, lr}
 8010056:	4d07      	ldr	r5, [pc, #28]	; (8010074 <_read_r+0x20>)
 8010058:	4604      	mov	r4, r0
 801005a:	4608      	mov	r0, r1
 801005c:	4611      	mov	r1, r2
 801005e:	2200      	movs	r2, #0
 8010060:	602a      	str	r2, [r5, #0]
 8010062:	461a      	mov	r2, r3
 8010064:	f7f1 fb0c 	bl	8001680 <_read>
 8010068:	1c43      	adds	r3, r0, #1
 801006a:	d102      	bne.n	8010072 <_read_r+0x1e>
 801006c:	682b      	ldr	r3, [r5, #0]
 801006e:	b103      	cbz	r3, 8010072 <_read_r+0x1e>
 8010070:	6023      	str	r3, [r4, #0]
 8010072:	bd38      	pop	{r3, r4, r5, pc}
 8010074:	20007b78 	.word	0x20007b78

08010078 <_fstat_r>:
 8010078:	b538      	push	{r3, r4, r5, lr}
 801007a:	4d07      	ldr	r5, [pc, #28]	; (8010098 <_fstat_r+0x20>)
 801007c:	2300      	movs	r3, #0
 801007e:	4604      	mov	r4, r0
 8010080:	4608      	mov	r0, r1
 8010082:	4611      	mov	r1, r2
 8010084:	602b      	str	r3, [r5, #0]
 8010086:	f7f1 fb40 	bl	800170a <_fstat>
 801008a:	1c43      	adds	r3, r0, #1
 801008c:	d102      	bne.n	8010094 <_fstat_r+0x1c>
 801008e:	682b      	ldr	r3, [r5, #0]
 8010090:	b103      	cbz	r3, 8010094 <_fstat_r+0x1c>
 8010092:	6023      	str	r3, [r4, #0]
 8010094:	bd38      	pop	{r3, r4, r5, pc}
 8010096:	bf00      	nop
 8010098:	20007b78 	.word	0x20007b78

0801009c <_isatty_r>:
 801009c:	b538      	push	{r3, r4, r5, lr}
 801009e:	4d06      	ldr	r5, [pc, #24]	; (80100b8 <_isatty_r+0x1c>)
 80100a0:	2300      	movs	r3, #0
 80100a2:	4604      	mov	r4, r0
 80100a4:	4608      	mov	r0, r1
 80100a6:	602b      	str	r3, [r5, #0]
 80100a8:	f7f1 fb3f 	bl	800172a <_isatty>
 80100ac:	1c43      	adds	r3, r0, #1
 80100ae:	d102      	bne.n	80100b6 <_isatty_r+0x1a>
 80100b0:	682b      	ldr	r3, [r5, #0]
 80100b2:	b103      	cbz	r3, 80100b6 <_isatty_r+0x1a>
 80100b4:	6023      	str	r3, [r4, #0]
 80100b6:	bd38      	pop	{r3, r4, r5, pc}
 80100b8:	20007b78 	.word	0x20007b78

080100bc <_init>:
 80100bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100be:	bf00      	nop
 80100c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100c2:	bc08      	pop	{r3}
 80100c4:	469e      	mov	lr, r3
 80100c6:	4770      	bx	lr

080100c8 <_fini>:
 80100c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ca:	bf00      	nop
 80100cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100ce:	bc08      	pop	{r3}
 80100d0:	469e      	mov	lr, r3
 80100d2:	4770      	bx	lr
