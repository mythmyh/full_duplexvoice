
i2s3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f1a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00077138  0800f330  0800f330  0001f330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08086468  08086468  000a009c  2**0
                  CONTENTS
  4 .ARM          00000008  08086468  08086468  00096468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08086470  08086470  000a009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08086470  08086470  00096470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08086474  08086474  00096474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08086478  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000a009c  2**0
                  CONTENTS
 10 .bss          00005a74  2000009c  2000009c  000a009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005b10  20005b10  000a009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000a009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d56a  00000000  00000000  000a00cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005990  00000000  00000000  000cd636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  000d2fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014e0  00000000  00000000  000d4678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a36  00000000  00000000  000d5b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002369b  00000000  00000000  000fd58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ceca4  00000000  00000000  00120c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001ef8cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006594  00000000  00000000  001ef920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f318 	.word	0x0800f318

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	0800f318 	.word	0x0800f318

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <WM8978_Register_Wirter>:
static void DMAEx_XferM1CpltCallback(struct __DMA_HandleTypeDef *hdma);
static void DMAEx_XferErrorCallback(struct __DMA_HandleTypeDef *hdma);
HAL_StatusTypeDef HAL_I2S_Transmit_DMAEx(I2S_HandleTypeDef *hi2s, uint16_t *FirstBuffer, uint16_t *SecondBuffer, uint16_t Size);

HAL_StatusTypeDef WM8978_Register_Wirter(uint8_t reg_addr, uint16_t data)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af02      	add	r7, sp, #8
 800056e:	4603      	mov	r3, r0
 8000570:	460a      	mov	r2, r1
 8000572:	71fb      	strb	r3, [r7, #7]
 8000574:	4613      	mov	r3, r2
 8000576:	80bb      	strh	r3, [r7, #4]
	uint8_t pData[10] =	{ 0 };
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	809a      	strh	r2, [r3, #4]

	pData[0] = (reg_addr << 1) | ((data >> 8) & 0x01);
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	b25a      	sxtb	r2, r3
 800058c:	88bb      	ldrh	r3, [r7, #4]
 800058e:	0a1b      	lsrs	r3, r3, #8
 8000590:	b29b      	uxth	r3, r3
 8000592:	b25b      	sxtb	r3, r3
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	b25b      	sxtb	r3, r3
 800059a:	4313      	orrs	r3, r2
 800059c:	b25b      	sxtb	r3, r3
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	733b      	strb	r3, [r7, #12]
	pData[1] = data & 0xFF;
 80005a2:	88bb      	ldrh	r3, [r7, #4]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(&USEI2C, WM8978_WIRTE_ADDRESS, pData, 2, 1000);
 80005a8:	f107 020c 	add.w	r2, r7, #12
 80005ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2302      	movs	r3, #2
 80005b4:	2134      	movs	r1, #52	; 0x34
 80005b6:	4804      	ldr	r0, [pc, #16]	; (80005c8 <WM8978_Register_Wirter+0x60>)
 80005b8:	f004 fe76 	bl	80052a8 <HAL_I2C_Master_Transmit>
 80005bc:	4603      	mov	r3, r0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3718      	adds	r7, #24
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200031c4 	.word	0x200031c4

080005cc <WAV_FileInit>:



void WAV_FileInit(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
	DataLength = sizeof(data) - 0x2c;
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <WAV_FileInit+0x1c>)
 80005d2:	4a06      	ldr	r2, [pc, #24]	; (80005ec <WAV_FileInit+0x20>)
 80005d4:	601a      	str	r2, [r3, #0]
	DataAddress = (uint8_t*) (data + 0x2c);
 80005d6:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <WAV_FileInit+0x24>)
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <WAV_FileInit+0x28>)
 80005da:	601a      	str	r2, [r3, #0]
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	200010b8 	.word	0x200010b8
 80005ec:	00076926 	.word	0x00076926
 80005f0:	0800fa74 	.word	0x0800fa74
 80005f4:	200010bc 	.word	0x200010bc

080005f8 <WAV_FileRead>:


uint32_t WAV_FileRead(uint8_t *buf, uint32_t size)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]

	uint32_t Playing_End = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]

	if (DataLength >= size)
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <WAV_FileRead+0x64>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	429a      	cmp	r2, r3
 800060e:	d815      	bhi.n	800063c <WAV_FileRead+0x44>
	{
		memcpy(buf, DataAddress, size);
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <WAV_FileRead+0x68>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	4619      	mov	r1, r3
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f00d feb3 	bl	800e384 <memcpy>
		DataLength -= size;
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <WAV_FileRead+0x64>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	4a0d      	ldr	r2, [pc, #52]	; (800065c <WAV_FileRead+0x64>)
 8000628:	6013      	str	r3, [r2, #0]
		DataAddress += size;
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <WAV_FileRead+0x68>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	4413      	add	r3, r2
 8000632:	4a0b      	ldr	r2, [pc, #44]	; (8000660 <WAV_FileRead+0x68>)
 8000634:	6013      	str	r3, [r2, #0]
		Playing_End = 1;
 8000636:	2301      	movs	r3, #1
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	e009      	b.n	8000650 <WAV_FileRead+0x58>
	}
	else
	{
		memcpy(buf, DataAddress, DataLength);
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <WAV_FileRead+0x68>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a06      	ldr	r2, [pc, #24]	; (800065c <WAV_FileRead+0x64>)
 8000642:	6812      	ldr	r2, [r2, #0]
 8000644:	4619      	mov	r1, r3
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f00d fe9c 	bl	800e384 <memcpy>
		Playing_End = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
	}

	return Playing_End;
 8000650:	68fb      	ldr	r3, [r7, #12]
}
 8000652:	4618      	mov	r0, r3
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	200010b8 	.word	0x200010b8
 8000660:	200010bc 	.word	0x200010bc

08000664 <HAL_I2S_Transmit_DMAEx>:

HAL_StatusTypeDef HAL_I2S_Transmit_DMAEx(I2S_HandleTypeDef *hi2s, uint16_t *FirstBuffer, uint16_t *SecondBuffer, uint16_t Size)
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b089      	sub	sp, #36	; 0x24
 8000668:	af02      	add	r7, sp, #8
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
 8000670:	807b      	strh	r3, [r7, #2]
	uint32_t tmpreg_cfgr;
	if ((FirstBuffer == NULL) || (SecondBuffer == NULL) || (Size == 0U))
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d005      	beq.n	8000684 <HAL_I2S_Transmit_DMAEx+0x20>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <HAL_I2S_Transmit_DMAEx+0x20>
 800067e:	887b      	ldrh	r3, [r7, #2]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d101      	bne.n	8000688 <HAL_I2S_Transmit_DMAEx+0x24>
	{
		return HAL_ERROR;
 8000684:	2301      	movs	r3, #1
 8000686:	e09c      	b.n	80007c2 <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Process Locked */
	__HAL_LOCK(hi2s);
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800068e:	b2db      	uxtb	r3, r3
 8000690:	2b01      	cmp	r3, #1
 8000692:	d101      	bne.n	8000698 <HAL_I2S_Transmit_DMAEx+0x34>
 8000694:	2302      	movs	r3, #2
 8000696:	e094      	b.n	80007c2 <HAL_I2S_Transmit_DMAEx+0x15e>
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	2201      	movs	r2, #1
 800069c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (hi2s->State != HAL_I2S_STATE_READY)
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d005      	beq.n	80006b8 <HAL_I2S_Transmit_DMAEx+0x54>
	{
		__HAL_UNLOCK(hi2s);
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	2200      	movs	r2, #0
 80006b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_BUSY;
 80006b4:	2302      	movs	r3, #2
 80006b6:	e084      	b.n	80007c2 <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Set state and reset error code */
	hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	2203      	movs	r2, #3
 80006bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	2200      	movs	r2, #0
 80006c4:	645a      	str	r2, [r3, #68]	; 0x44
	hi2s->pTxBuffPtr = FirstBuffer;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	68ba      	ldr	r2, [r7, #8]
 80006ca:	625a      	str	r2, [r3, #36]	; 0x24

	tmpreg_cfgr = hi2s->Instance->I2SCFGR
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	617b      	str	r3, [r7, #20]
			& (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);

	if ((tmpreg_cfgr == I2S_DATAFORMAT_24B)
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d002      	beq.n	80006e4 <HAL_I2S_Transmit_DMAEx+0x80>
			|| (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	2b05      	cmp	r3, #5
 80006e2:	d10a      	bne.n	80006fa <HAL_I2S_Transmit_DMAEx+0x96>
	{
		hi2s->TxXferSize = (Size << 1U);
 80006e4:	887b      	ldrh	r3, [r7, #2]
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = (Size << 1U);
 80006ee:	887b      	ldrh	r3, [r7, #2]
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80006f8:	e005      	b.n	8000706 <HAL_I2S_Transmit_DMAEx+0xa2>
	}
	else
	{
		hi2s->TxXferSize = Size;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	887a      	ldrh	r2, [r7, #2]
 80006fe:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = Size;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	887a      	ldrh	r2, [r7, #2]
 8000704:	855a      	strh	r2, [r3, #42]	; 0x2a
	}

	/* Set the I2S Tx DMA Half transfer complete callback */
	hi2s->hdmatx->XferHalfCpltCallback = NULL;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800070a:	2200      	movs	r2, #0
 800070c:	641a      	str	r2, [r3, #64]	; 0x40
	hi2s->hdmatx->XferM1HalfCpltCallback = NULL;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000712:	2200      	movs	r2, #0
 8000714:	649a      	str	r2, [r3, #72]	; 0x48

	/* Set the I2S Tx DMA transfer complete callback */
	hi2s->hdmatx->XferCpltCallback = DMAEx_XferCpltCallback;
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800071a:	4a2c      	ldr	r2, [pc, #176]	; (80007cc <HAL_I2S_Transmit_DMAEx+0x168>)
 800071c:	63da      	str	r2, [r3, #60]	; 0x3c
	hi2s->hdmatx->XferM1CpltCallback = DMAEx_XferM1CpltCallback;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000722:	4a2b      	ldr	r2, [pc, #172]	; (80007d0 <HAL_I2S_Transmit_DMAEx+0x16c>)
 8000724:	645a      	str	r2, [r3, #68]	; 0x44

	/* Set the DMA error callback */
	hi2s->hdmatx->XferErrorCallback = DMAEx_XferErrorCallback;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800072a:	4a2a      	ldr	r2, [pc, #168]	; (80007d4 <HAL_I2S_Transmit_DMAEx+0x170>)
 800072c:	64da      	str	r2, [r3, #76]	; 0x4c

	/* Set the DMA abort callback */
	hi2s->hdmatx->XferAbortCallback = NULL;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000732:	2200      	movs	r2, #0
 8000734:	651a      	str	r2, [r3, #80]	; 0x50

	/* Enable the Tx DMA Stream/Channel */
	if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx, (uint32_t) FirstBuffer, (uint32_t) &hi2s->Instance->DR, (uint32_t) SecondBuffer,	hi2s->TxXferSize))
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800073a:	68b9      	ldr	r1, [r7, #8]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	330c      	adds	r3, #12
 8000742:	461c      	mov	r4, r3
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800074a:	b29b      	uxth	r3, r3
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	4613      	mov	r3, r2
 8000750:	4622      	mov	r2, r4
 8000752:	f001 fbeb 	bl	8001f2c <HAL_DMAEx_MultiBufferStart_IT>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d00f      	beq.n	800077c <HAL_I2S_Transmit_DMAEx+0x118>
	{
		/* Update SPI error code */
		SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000760:	f043 0208 	orr.w	r2, r3, #8
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	645a      	str	r2, [r3, #68]	; 0x44
		hi2s->State = HAL_I2S_STATE_READY;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2201      	movs	r2, #1
 800076c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		__HAL_UNLOCK(hi2s);
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	2200      	movs	r2, #0
 8000774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_ERROR;
 8000778:	2301      	movs	r3, #1
 800077a:	e022      	b.n	80007c2 <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Check if the I2S is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000786:	2b00      	cmp	r3, #0
 8000788:	d107      	bne.n	800079a <HAL_I2S_Transmit_DMAEx+0x136>
	{
		/* Enable I2S peripheral */
		__HAL_I2S_ENABLE(hi2s);
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	69da      	ldr	r2, [r3, #28]
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000798:	61da      	str	r2, [r3, #28]
	}

	/* Check if the I2S Tx request is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	f003 0302 	and.w	r3, r3, #2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d107      	bne.n	80007b8 <HAL_I2S_Transmit_DMAEx+0x154>
	{
		/* Enable Tx DMA Request */
		SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	685a      	ldr	r2, [r3, #4]
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f042 0202 	orr.w	r2, r2, #2
 80007b6:	605a      	str	r2, [r3, #4]
	}

	__HAL_UNLOCK(hi2s);
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	return HAL_OK;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	371c      	adds	r7, #28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd90      	pop	{r4, r7, pc}
 80007ca:	bf00      	nop
 80007cc:	080007d9 	.word	0x080007d9
 80007d0:	08000801 	.word	0x08000801
 80007d4:	08000829 	.word	0x08000829

080007d8 <DMAEx_XferCpltCallback>:



static void DMAEx_XferCpltCallback(struct __DMA_HandleTypeDef *hdma)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	//if (DMA1_Stream3->CR & (1 << 19)) {

	//if(DMA1_Stream4->CR&(1<<19)){
		if (WAV_FileRead((uint8_t*)I2S_Buf0,sizeof(I2S_Buf0)) == 0)
 80007e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <DMAEx_XferCpltCallback+0x24>)
 80007e6:	f7ff ff07 	bl	80005f8 <WAV_FileRead>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d101      	bne.n	80007f4 <DMAEx_XferCpltCallback+0x1c>
			{
				Audio_Player_Stop();
 80007f0:	f000 f86a 	bl	80008c8 <Audio_Player_Stop>
			}

	//}

}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200000b8 	.word	0x200000b8

08000800 <DMAEx_XferM1CpltCallback>:

static void DMAEx_XferM1CpltCallback(struct __DMA_HandleTypeDef *hdma)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

		if (WAV_FileRead((uint8_t*) I2S_Buf1, sizeof(I2S_Buf1)) == 0)
 8000808:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <DMAEx_XferM1CpltCallback+0x24>)
 800080e:	f7ff fef3 	bl	80005f8 <WAV_FileRead>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d101      	bne.n	800081c <DMAEx_XferM1CpltCallback+0x1c>
			{
				Audio_Player_Stop();
 8000818:	f000 f856 	bl	80008c8 <Audio_Player_Stop>
			}


}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200008b8 	.word	0x200008b8

08000828 <DMAEx_XferErrorCallback>:




static void DMAEx_XferErrorCallback(struct __DMA_HandleTypeDef *hdma)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]

}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <Audio_Player_Init>:

void Audio_Player_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0


	WM8978_Register_Wirter(0, 0);
 8000840:	2100      	movs	r1, #0
 8000842:	2000      	movs	r0, #0
 8000844:	f7ff fe90 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(1, 0x0F);
 8000848:	210f      	movs	r1, #15
 800084a:	2001      	movs	r0, #1
 800084c:	f7ff fe8c 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(3, 0x7F);
 8000850:	217f      	movs	r1, #127	; 0x7f
 8000852:	2003      	movs	r0, #3
 8000854:	f7ff fe88 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(4, 0x10);
 8000858:	2110      	movs	r1, #16
 800085a:	2004      	movs	r0, #4
 800085c:	f7ff fe84 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(6, 0);
 8000860:	2100      	movs	r1, #0
 8000862:	2006      	movs	r0, #6
 8000864:	f7ff fe80 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(10, 0x08);
 8000868:	2108      	movs	r1, #8
 800086a:	200a      	movs	r0, #10
 800086c:	f7ff fe7c 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(43, 0x10);
 8000870:	2110      	movs	r1, #16
 8000872:	202b      	movs	r0, #43	; 0x2b
 8000874:	f7ff fe78 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(54, 50);
 8000878:	2132      	movs	r1, #50	; 0x32
 800087a:	2036      	movs	r0, #54	; 0x36
 800087c:	f7ff fe74 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(55, 50 | (1 << 8));
 8000880:	f44f 7199 	mov.w	r1, #306	; 0x132
 8000884:	2037      	movs	r0, #55	; 0x37
 8000886:	f7ff fe6f 	bl	8000568 <WM8978_Register_Wirter>

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <Audio_Player_Start>:
		WM8978_Register_Wirter(54, num);
		WM8978_Register_Wirter(55, num | (1 << 8));
}

void Audio_Player_Start()
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
		WAV_FileRead((uint8_t*) I2S_Buf0, sizeof(I2S_Buf0));
 8000894:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000898:	4808      	ldr	r0, [pc, #32]	; (80008bc <Audio_Player_Start+0x2c>)
 800089a:	f7ff fead 	bl	80005f8 <WAV_FileRead>
		WAV_FileRead((uint8_t*) I2S_Buf1, sizeof(I2S_Buf1));
 800089e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008a2:	4807      	ldr	r0, [pc, #28]	; (80008c0 <Audio_Player_Start+0x30>)
 80008a4:	f7ff fea8 	bl	80005f8 <WAV_FileRead>
		HAL_I2S_Transmit_DMAEx(&USEI2S, I2S_Buf0, I2S_Buf1, BUFFER_SIZE);
 80008a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ac:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <Audio_Player_Start+0x30>)
 80008ae:	4903      	ldr	r1, [pc, #12]	; (80008bc <Audio_Player_Start+0x2c>)
 80008b0:	4804      	ldr	r0, [pc, #16]	; (80008c4 <Audio_Player_Start+0x34>)
 80008b2:	f7ff fed7 	bl	8000664 <HAL_I2S_Transmit_DMAEx>
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200000b8 	.word	0x200000b8
 80008c0:	200008b8 	.word	0x200008b8
 80008c4:	2000336c 	.word	0x2000336c

080008c8 <Audio_Player_Stop>:
{
	HAL_I2S_DMAResume(&USEI2S);
}

void Audio_Player_Stop(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	WAV_FileInit();
 80008cc:	f7ff fe7e 	bl	80005cc <WAV_FileInit>
	HAL_I2S_DMAStop(&USEI2S);
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <Audio_Player_Stop+0x14>)
 80008d2:	f005 f931 	bl	8005b38 <HAL_I2S_DMAStop>
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000336c 	.word	0x2000336c

080008e0 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart5, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80008e8:	1d39      	adds	r1, r7, #4
 80008ea:	f04f 33ff 	mov.w	r3, #4294967295
 80008ee:	2201      	movs	r2, #1
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <__io_putchar+0x20>)
 80008f2:	f006 fca0 	bl	8007236 <HAL_UART_Transmit>
  return ch;
 80008f6:	687b      	ldr	r3, [r7, #4]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	2000327c 	.word	0x2000327c

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000908:	f000 fe0e 	bl	8001528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090c:	f000 f852 	bl	80009b4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000910:	f000 f8ba 	bl	8000a88 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000914:	f000 f9de 	bl	8000cd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000918:	f000 f9b4 	bl	8000c84 <MX_DMA_Init>
  MX_I2S3_Init();
 800091c:	f000 f95a 	bl	8000bd4 <MX_I2S3_Init>
  MX_I2C1_Init();
 8000920:	f000 f8ce 	bl	8000ac0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000924:	f000 f8fa 	bl	8000b1c <MX_I2C2_Init>
  MX_I2S2_Init();
 8000928:	f000 f926 	bl	8000b78 <MX_I2S2_Init>
  MX_FATFS_Init();
 800092c:	f007 ff04 	bl	8008738 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000930:	f00d f9dc 	bl	800dcec <MX_USB_HOST_Init>
  MX_UART5_Init();
 8000934:	f000 f97c 	bl	8000c30 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  Audio_Player_Init();
 8000938:	f7ff ff80 	bl	800083c <Audio_Player_Init>
  //ETX_MSC_ProcessUsbDevice();

  while( Appli_state !=APPLICATION_READY){
 800093c:	e001      	b.n	8000942 <main+0x3e>
	    MX_USB_HOST_Process();
 800093e:	f00d f9fb 	bl	800dd38 <MX_USB_HOST_Process>
  while( Appli_state !=APPLICATION_READY){
 8000942:	4b14      	ldr	r3, [pc, #80]	; (8000994 <main+0x90>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b02      	cmp	r3, #2
 8000948:	d1f9      	bne.n	800093e <main+0x3a>
  }
  res = f_mount( &UsbDiskFatFs, (TCHAR const*)UsbDiskPath, 0 );
 800094a:	2200      	movs	r2, #0
 800094c:	4912      	ldr	r1, [pc, #72]	; (8000998 <main+0x94>)
 800094e:	4813      	ldr	r0, [pc, #76]	; (800099c <main+0x98>)
 8000950:	f00c ff5e 	bl	800d810 <f_mount>
 8000954:	4603      	mov	r3, r0
 8000956:	461a      	mov	r2, r3
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <main+0x9c>)
 800095a:	701a      	strb	r2, [r3, #0]

  printf("mount %d\n",res);
 800095c:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <main+0x9c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	4810      	ldr	r0, [pc, #64]	; (80009a4 <main+0xa0>)
 8000964:	f00d fdce 	bl	800e504 <iprintf>
  res = f_open( &file, file_name, FA_READ );
 8000968:	2201      	movs	r2, #1
 800096a:	490f      	ldr	r1, [pc, #60]	; (80009a8 <main+0xa4>)
 800096c:	480f      	ldr	r0, [pc, #60]	; (80009ac <main+0xa8>)
 800096e:	f00c ff95 	bl	800d89c <f_open>
 8000972:	4603      	mov	r3, r0
 8000974:	461a      	mov	r2, r3
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <main+0x9c>)
 8000978:	701a      	strb	r2, [r3, #0]
  printf("open %d\n",res);
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <main+0x9c>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	4619      	mov	r1, r3
 8000980:	480b      	ldr	r0, [pc, #44]	; (80009b0 <main+0xac>)
 8000982:	f00d fdbf 	bl	800e504 <iprintf>
  {
    /* USER CODE END WHILE */
    //MX_USB_HOST_Process();

    /* USER CODE BEGIN 3 */
	  Audio_Player_Start();
 8000986:	f7ff ff83 	bl	8000890 <Audio_Player_Start>
	  HAL_Delay(15000);
 800098a:	f643 2098 	movw	r0, #15000	; 0x3a98
 800098e:	f000 fe3d 	bl	800160c <HAL_Delay>
	  Audio_Player_Start();
 8000992:	e7f8      	b.n	8000986 <main+0x82>
 8000994:	20003160 	.word	0x20003160
 8000998:	20003124 	.word	0x20003124
 800099c:	200010c0 	.word	0x200010c0
 80009a0:	200032c0 	.word	0x200032c0
 80009a4:	0800f3b4 	.word	0x0800f3b4
 80009a8:	20000000 	.word	0x20000000
 80009ac:	200020f4 	.word	0x200020f4
 80009b0:	0800f3c0 	.word	0x0800f3c0

080009b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b094      	sub	sp, #80	; 0x50
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 0320 	add.w	r3, r7, #32
 80009be:	2230      	movs	r2, #48	; 0x30
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f00d fcec 	bl	800e3a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <SystemClock_Config+0xcc>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	4a27      	ldr	r2, [pc, #156]	; (8000a80 <SystemClock_Config+0xcc>)
 80009e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e6:	6413      	str	r3, [r2, #64]	; 0x40
 80009e8:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <SystemClock_Config+0xcc>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f4:	2300      	movs	r3, #0
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <SystemClock_Config+0xd0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a21      	ldr	r2, [pc, #132]	; (8000a84 <SystemClock_Config+0xd0>)
 80009fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a02:	6013      	str	r3, [r2, #0]
 8000a04:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <SystemClock_Config+0xd0>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a10:	2301      	movs	r3, #1
 8000a12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a24:	2304      	movs	r3, #4
 8000a26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a28:	23a8      	movs	r3, #168	; 0xa8
 8000a2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a30:	2307      	movs	r3, #7
 8000a32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a34:	f107 0320 	add.w	r3, r7, #32
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f005 fdfb 	bl	8006634 <HAL_RCC_OscConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a44:	f000 f9a6 	bl	8000d94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a48:	230f      	movs	r3, #15
 8000a4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	2105      	movs	r1, #5
 8000a66:	4618      	mov	r0, r3
 8000a68:	f006 f85c 	bl	8006b24 <HAL_RCC_ClockConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a72:	f000 f98f 	bl	8000d94 <Error_Handler>
  }
}
 8000a76:	bf00      	nop
 8000a78:	3750      	adds	r7, #80	; 0x50
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40007000 	.word	0x40007000

08000a88 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a8e:	463b      	mov	r3, r7
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a9e:	23c0      	movs	r3, #192	; 0xc0
 8000aa0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f006 fa37 	bl	8006f1c <HAL_RCCEx_PeriphCLKConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000ab4:	f000 f96e 	bl	8000d94 <Error_Handler>
  }
}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000ac6:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <MX_I2C1_Init+0x54>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000acc:	4a12      	ldr	r2, [pc, #72]	; (8000b18 <MX_I2C1_Init+0x58>)
 8000ace:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000ade:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ae2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000afe:	f004 fa8f 	bl	8005020 <HAL_I2C_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b08:	f000 f944 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20003170 	.word	0x20003170
 8000b14:	40005400 	.word	0x40005400
 8000b18:	000186a0 	.word	0x000186a0

08000b1c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <MX_I2C2_Init+0x50>)
 8000b22:	4a13      	ldr	r2, [pc, #76]	; (8000b70 <MX_I2C2_Init+0x54>)
 8000b24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_I2C2_Init+0x50>)
 8000b28:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <MX_I2C2_Init+0x58>)
 8000b2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_I2C2_Init+0x50>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_I2C2_Init+0x50>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_I2C2_Init+0x50>)
 8000b3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b3e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <MX_I2C2_Init+0x50>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_I2C2_Init+0x50>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <MX_I2C2_Init+0x50>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_I2C2_Init+0x50>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_I2C2_Init+0x50>)
 8000b5a:	f004 fa61 	bl	8005020 <HAL_I2C_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b64:	f000 f916 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200031c4 	.word	0x200031c4
 8000b70:	40005800 	.word	0x40005800
 8000b74:	000186a0 	.word	0x000186a0

08000b78 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <MX_I2S2_Init+0x54>)
 8000b7e:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <MX_I2S2_Init+0x58>)
 8000b80:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <MX_I2S2_Init+0x54>)
 8000b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b88:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <MX_I2S2_Init+0x54>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_I2S2_Init+0x54>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <MX_I2S2_Init+0x54>)
 8000b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b9c:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <MX_I2S2_Init+0x54>)
 8000ba0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000ba4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_I2S2_Init+0x54>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <MX_I2S2_Init+0x54>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_I2S2_Init+0x54>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000bb8:	4804      	ldr	r0, [pc, #16]	; (8000bcc <MX_I2S2_Init+0x54>)
 8000bba:	f004 fe7d 	bl	80058b8 <HAL_I2S_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000bc4:	f000 f8e6 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20003324 	.word	0x20003324
 8000bd0:	40003800 	.word	0x40003800

08000bd4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <MX_I2S3_Init+0x54>)
 8000bda:	4a14      	ldr	r2, [pc, #80]	; (8000c2c <MX_I2S3_Init+0x58>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_I2S3_Init+0x54>)
 8000be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <MX_I2S3_Init+0x54>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_I2S3_Init+0x54>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <MX_I2S3_Init+0x54>)
 8000bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_I2S3_Init+0x54>)
 8000bfc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000c00:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_I2S3_Init+0x54>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <MX_I2S3_Init+0x54>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_I2S3_Init+0x54>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000c14:	4804      	ldr	r0, [pc, #16]	; (8000c28 <MX_I2S3_Init+0x54>)
 8000c16:	f004 fe4f 	bl	80058b8 <HAL_I2S_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000c20:	f000 f8b8 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000336c 	.word	0x2000336c
 8000c2c:	40003c00 	.word	0x40003c00

08000c30 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_UART5_Init+0x4c>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <MX_UART5_Init+0x50>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MX_UART5_Init+0x4c>)
 8000c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c40:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_UART5_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_UART5_Init+0x4c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_UART5_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_UART5_Init+0x4c>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_UART5_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_UART5_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_UART5_Init+0x4c>)
 8000c68:	f006 fa98 	bl	800719c <HAL_UART_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000c72:	f000 f88f 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000327c 	.word	0x2000327c
 8000c80:	40005000 	.word	0x40005000

08000c84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <MX_DMA_Init+0x4c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <MX_DMA_Init+0x4c>)
 8000c94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <MX_DMA_Init+0x4c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	200f      	movs	r0, #15
 8000cac:	f000 fdad 	bl	800180a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000cb0:	200f      	movs	r0, #15
 8000cb2:	f000 fdc6 	bl	8001842 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2010      	movs	r0, #16
 8000cbc:	f000 fda5 	bl	800180a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000cc0:	2010      	movs	r0, #16
 8000cc2:	f000 fdbe 	bl	8001842 <HAL_NVIC_EnableIRQ>

}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b087      	sub	sp, #28
 8000cd8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	4b2c      	ldr	r3, [pc, #176]	; (8000d90 <MX_GPIO_Init+0xbc>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a2b      	ldr	r2, [pc, #172]	; (8000d90 <MX_GPIO_Init+0xbc>)
 8000ce4:	f043 0320 	orr.w	r3, r3, #32
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <MX_GPIO_Init+0xbc>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0320 	and.w	r3, r3, #32
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b25      	ldr	r3, [pc, #148]	; (8000d90 <MX_GPIO_Init+0xbc>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a24      	ldr	r2, [pc, #144]	; (8000d90 <MX_GPIO_Init+0xbc>)
 8000d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <MX_GPIO_Init+0xbc>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <MX_GPIO_Init+0xbc>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a1d      	ldr	r2, [pc, #116]	; (8000d90 <MX_GPIO_Init+0xbc>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <MX_GPIO_Init+0xbc>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <MX_GPIO_Init+0xbc>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a16      	ldr	r2, [pc, #88]	; (8000d90 <MX_GPIO_Init+0xbc>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_GPIO_Init+0xbc>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <MX_GPIO_Init+0xbc>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a0f      	ldr	r2, [pc, #60]	; (8000d90 <MX_GPIO_Init+0xbc>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <MX_GPIO_Init+0xbc>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_GPIO_Init+0xbc>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <MX_GPIO_Init+0xbc>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_GPIO_Init+0xbc>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]

}
 8000d82:	bf00      	nop
 8000d84:	371c      	adds	r7, #28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <Error_Handler+0x8>
	...

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	4a0f      	ldr	r2, [pc, #60]	; (8000dec <HAL_MspInit+0x4c>)
 8000db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db4:	6453      	str	r3, [r2, #68]	; 0x44
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <HAL_MspInit+0x4c>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	4a08      	ldr	r2, [pc, #32]	; (8000dec <HAL_MspInit+0x4c>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_MspInit+0x4c>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800

08000df0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	; 0x30
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a32      	ldr	r2, [pc, #200]	; (8000ed8 <HAL_I2C_MspInit+0xe8>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d12c      	bne.n	8000e6c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
 8000e16:	4b31      	ldr	r3, [pc, #196]	; (8000edc <HAL_I2C_MspInit+0xec>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a30      	ldr	r2, [pc, #192]	; (8000edc <HAL_I2C_MspInit+0xec>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b2e      	ldr	r3, [pc, #184]	; (8000edc <HAL_I2C_MspInit+0xec>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	61bb      	str	r3, [r7, #24]
 8000e2c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e2e:	23c0      	movs	r3, #192	; 0xc0
 8000e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e32:	2312      	movs	r3, #18
 8000e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e3e:	2304      	movs	r3, #4
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	4619      	mov	r1, r3
 8000e48:	4825      	ldr	r0, [pc, #148]	; (8000ee0 <HAL_I2C_MspInit+0xf0>)
 8000e4a:	f002 f9dd 	bl	8003208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	4b22      	ldr	r3, [pc, #136]	; (8000edc <HAL_I2C_MspInit+0xec>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a21      	ldr	r2, [pc, #132]	; (8000edc <HAL_I2C_MspInit+0xec>)
 8000e58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <HAL_I2C_MspInit+0xec>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e6a:	e030      	b.n	8000ece <HAL_I2C_MspInit+0xde>
  else if(hi2c->Instance==I2C2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a1c      	ldr	r2, [pc, #112]	; (8000ee4 <HAL_I2C_MspInit+0xf4>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d12b      	bne.n	8000ece <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <HAL_I2C_MspInit+0xec>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a17      	ldr	r2, [pc, #92]	; (8000edc <HAL_I2C_MspInit+0xec>)
 8000e80:	f043 0320 	orr.w	r3, r3, #32
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_I2C_MspInit+0xec>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0320 	and.w	r3, r3, #32
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e92:	2303      	movs	r3, #3
 8000e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e96:	2312      	movs	r3, #18
 8000e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480e      	ldr	r0, [pc, #56]	; (8000ee8 <HAL_I2C_MspInit+0xf8>)
 8000eae:	f002 f9ab 	bl	8003208 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_I2C_MspInit+0xec>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	4a08      	ldr	r2, [pc, #32]	; (8000edc <HAL_I2C_MspInit+0xec>)
 8000ebc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_I2C_MspInit+0xec>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
}
 8000ece:	bf00      	nop
 8000ed0:	3730      	adds	r7, #48	; 0x30
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40005400 	.word	0x40005400
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020400 	.word	0x40020400
 8000ee4:	40005800 	.word	0x40005800
 8000ee8:	40021400 	.word	0x40021400

08000eec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08e      	sub	sp, #56	; 0x38
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a4b      	ldr	r2, [pc, #300]	; (8001038 <HAL_I2S_MspInit+0x14c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	f040 80a0 	bne.w	8001050 <HAL_I2S_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	623b      	str	r3, [r7, #32]
 8000f14:	4b49      	ldr	r3, [pc, #292]	; (800103c <HAL_I2S_MspInit+0x150>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	4a48      	ldr	r2, [pc, #288]	; (800103c <HAL_I2S_MspInit+0x150>)
 8000f1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f20:	4b46      	ldr	r3, [pc, #280]	; (800103c <HAL_I2S_MspInit+0x150>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f28:	623b      	str	r3, [r7, #32]
 8000f2a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
 8000f30:	4b42      	ldr	r3, [pc, #264]	; (800103c <HAL_I2S_MspInit+0x150>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f34:	4a41      	ldr	r2, [pc, #260]	; (800103c <HAL_I2S_MspInit+0x150>)
 8000f36:	f043 0304 	orr.w	r3, r3, #4
 8000f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3c:	4b3f      	ldr	r3, [pc, #252]	; (800103c <HAL_I2S_MspInit+0x150>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f40:	f003 0304 	and.w	r3, r3, #4
 8000f44:	61fb      	str	r3, [r7, #28]
 8000f46:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61bb      	str	r3, [r7, #24]
 8000f4c:	4b3b      	ldr	r3, [pc, #236]	; (800103c <HAL_I2S_MspInit+0x150>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f50:	4a3a      	ldr	r2, [pc, #232]	; (800103c <HAL_I2S_MspInit+0x150>)
 8000f52:	f043 0302 	orr.w	r3, r3, #2
 8000f56:	6313      	str	r3, [r2, #48]	; 0x30
 8000f58:	4b38      	ldr	r3, [pc, #224]	; (800103c <HAL_I2S_MspInit+0x150>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	61bb      	str	r3, [r7, #24]
 8000f62:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f64:	2304      	movs	r3, #4
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000f74:	2306      	movs	r3, #6
 8000f76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4830      	ldr	r0, [pc, #192]	; (8001040 <HAL_I2S_MspInit+0x154>)
 8000f80:	f002 f942 	bl	8003208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000f84:	2348      	movs	r3, #72	; 0x48
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f94:	2305      	movs	r3, #5
 8000f96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4828      	ldr	r0, [pc, #160]	; (8001040 <HAL_I2S_MspInit+0x154>)
 8000fa0:	f002 f932 	bl	8003208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000fa4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fb6:	2305      	movs	r3, #5
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4820      	ldr	r0, [pc, #128]	; (8001044 <HAL_I2S_MspInit+0x158>)
 8000fc2:	f002 f921 	bl	8003208 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000fc6:	4b20      	ldr	r3, [pc, #128]	; (8001048 <HAL_I2S_MspInit+0x15c>)
 8000fc8:	4a20      	ldr	r2, [pc, #128]	; (800104c <HAL_I2S_MspInit+0x160>)
 8000fca:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <HAL_I2S_MspInit+0x15c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <HAL_I2S_MspInit+0x15c>)
 8000fd4:	2240      	movs	r2, #64	; 0x40
 8000fd6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <HAL_I2S_MspInit+0x15c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <HAL_I2S_MspInit+0x15c>)
 8000fe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <HAL_I2S_MspInit+0x15c>)
 8000fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fec:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <HAL_I2S_MspInit+0x15c>)
 8000ff0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ff4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_I2S_MspInit+0x15c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_I2S_MspInit+0x15c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <HAL_I2S_MspInit+0x15c>)
 8001004:	2204      	movs	r2, #4
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <HAL_I2S_MspInit+0x15c>)
 800100a:	2203      	movs	r2, #3
 800100c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_I2S_MspInit+0x15c>)
 8001010:	2200      	movs	r2, #0
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <HAL_I2S_MspInit+0x15c>)
 8001016:	2200      	movs	r2, #0
 8001018:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800101a:	480b      	ldr	r0, [pc, #44]	; (8001048 <HAL_I2S_MspInit+0x15c>)
 800101c:	f000 fc2c 	bl	8001878 <HAL_DMA_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 8001026:	f7ff feb5 	bl	8000d94 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <HAL_I2S_MspInit+0x15c>)
 800102e:	639a      	str	r2, [r3, #56]	; 0x38
 8001030:	4a05      	ldr	r2, [pc, #20]	; (8001048 <HAL_I2S_MspInit+0x15c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001036:	e0ca      	b.n	80011ce <HAL_I2S_MspInit+0x2e2>
 8001038:	40003800 	.word	0x40003800
 800103c:	40023800 	.word	0x40023800
 8001040:	40020800 	.word	0x40020800
 8001044:	40020400 	.word	0x40020400
 8001048:	200032c4 	.word	0x200032c4
 800104c:	40026070 	.word	0x40026070
  else if(hi2s->Instance==SPI3)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a60      	ldr	r2, [pc, #384]	; (80011d8 <HAL_I2S_MspInit+0x2ec>)
 8001056:	4293      	cmp	r3, r2
 8001058:	f040 80b9 	bne.w	80011ce <HAL_I2S_MspInit+0x2e2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	4b5e      	ldr	r3, [pc, #376]	; (80011dc <HAL_I2S_MspInit+0x2f0>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	4a5d      	ldr	r2, [pc, #372]	; (80011dc <HAL_I2S_MspInit+0x2f0>)
 8001066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800106a:	6413      	str	r3, [r2, #64]	; 0x40
 800106c:	4b5b      	ldr	r3, [pc, #364]	; (80011dc <HAL_I2S_MspInit+0x2f0>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	4b57      	ldr	r3, [pc, #348]	; (80011dc <HAL_I2S_MspInit+0x2f0>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	4a56      	ldr	r2, [pc, #344]	; (80011dc <HAL_I2S_MspInit+0x2f0>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	6313      	str	r3, [r2, #48]	; 0x30
 8001088:	4b54      	ldr	r3, [pc, #336]	; (80011dc <HAL_I2S_MspInit+0x2f0>)
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	4b50      	ldr	r3, [pc, #320]	; (80011dc <HAL_I2S_MspInit+0x2f0>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	4a4f      	ldr	r2, [pc, #316]	; (80011dc <HAL_I2S_MspInit+0x2f0>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	6313      	str	r3, [r2, #48]	; 0x30
 80010a4:	4b4d      	ldr	r3, [pc, #308]	; (80011dc <HAL_I2S_MspInit+0x2f0>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	4b49      	ldr	r3, [pc, #292]	; (80011dc <HAL_I2S_MspInit+0x2f0>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	4a48      	ldr	r2, [pc, #288]	; (80011dc <HAL_I2S_MspInit+0x2f0>)
 80010ba:	f043 0302 	orr.w	r3, r3, #2
 80010be:	6313      	str	r3, [r2, #48]	; 0x30
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <HAL_I2S_MspInit+0x2f0>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010cc:	2310      	movs	r3, #16
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010dc:	2306      	movs	r3, #6
 80010de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e4:	4619      	mov	r1, r3
 80010e6:	483e      	ldr	r0, [pc, #248]	; (80011e0 <HAL_I2S_MspInit+0x2f4>)
 80010e8:	f002 f88e 	bl	8003208 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010fc:	2306      	movs	r3, #6
 80010fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001104:	4619      	mov	r1, r3
 8001106:	4837      	ldr	r0, [pc, #220]	; (80011e4 <HAL_I2S_MspInit+0x2f8>)
 8001108:	f002 f87e 	bl	8003208 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800110c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 800111e:	2305      	movs	r3, #5
 8001120:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001126:	4619      	mov	r1, r3
 8001128:	482e      	ldr	r0, [pc, #184]	; (80011e4 <HAL_I2S_MspInit+0x2f8>)
 800112a:	f002 f86d 	bl	8003208 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800112e:	2328      	movs	r3, #40	; 0x28
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800113e:	2306      	movs	r3, #6
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001146:	4619      	mov	r1, r3
 8001148:	4827      	ldr	r0, [pc, #156]	; (80011e8 <HAL_I2S_MspInit+0x2fc>)
 800114a:	f002 f85d 	bl	8003208 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800114e:	4b27      	ldr	r3, [pc, #156]	; (80011ec <HAL_I2S_MspInit+0x300>)
 8001150:	4a27      	ldr	r2, [pc, #156]	; (80011f0 <HAL_I2S_MspInit+0x304>)
 8001152:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001154:	4b25      	ldr	r3, [pc, #148]	; (80011ec <HAL_I2S_MspInit+0x300>)
 8001156:	2200      	movs	r2, #0
 8001158:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800115a:	4b24      	ldr	r3, [pc, #144]	; (80011ec <HAL_I2S_MspInit+0x300>)
 800115c:	2240      	movs	r2, #64	; 0x40
 800115e:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001160:	4b22      	ldr	r3, [pc, #136]	; (80011ec <HAL_I2S_MspInit+0x300>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001166:	4b21      	ldr	r3, [pc, #132]	; (80011ec <HAL_I2S_MspInit+0x300>)
 8001168:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800116c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <HAL_I2S_MspInit+0x300>)
 8001170:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001174:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <HAL_I2S_MspInit+0x300>)
 8001178:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800117c:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800117e:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <HAL_I2S_MspInit+0x300>)
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HAL_I2S_MspInit+0x300>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <HAL_I2S_MspInit+0x300>)
 800118c:	2204      	movs	r2, #4
 800118e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <HAL_I2S_MspInit+0x300>)
 8001192:	2203      	movs	r2, #3
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_I2S_MspInit+0x300>)
 8001198:	2200      	movs	r2, #0
 800119a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <HAL_I2S_MspInit+0x300>)
 800119e:	2200      	movs	r2, #0
 80011a0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80011a2:	4812      	ldr	r0, [pc, #72]	; (80011ec <HAL_I2S_MspInit+0x300>)
 80011a4:	f000 fb68 	bl	8001878 <HAL_DMA_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_I2S_MspInit+0x2c6>
      Error_Handler();
 80011ae:	f7ff fdf1 	bl	8000d94 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a0d      	ldr	r2, [pc, #52]	; (80011ec <HAL_I2S_MspInit+0x300>)
 80011b6:	639a      	str	r2, [r3, #56]	; 0x38
 80011b8:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <HAL_I2S_MspInit+0x300>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2033      	movs	r0, #51	; 0x33
 80011c4:	f000 fb21 	bl	800180a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80011c8:	2033      	movs	r0, #51	; 0x33
 80011ca:	f000 fb3a 	bl	8001842 <HAL_NVIC_EnableIRQ>
}
 80011ce:	bf00      	nop
 80011d0:	3738      	adds	r7, #56	; 0x38
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40003c00 	.word	0x40003c00
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40020400 	.word	0x40020400
 80011ec:	2000321c 	.word	0x2000321c
 80011f0:	40026088 	.word	0x40026088

080011f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a28      	ldr	r2, [pc, #160]	; (80012b4 <HAL_UART_MspInit+0xc0>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d14a      	bne.n	80012ac <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <HAL_UART_MspInit+0xc4>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a26      	ldr	r2, [pc, #152]	; (80012b8 <HAL_UART_MspInit+0xc4>)
 8001220:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <HAL_UART_MspInit+0xc4>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <HAL_UART_MspInit+0xc4>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a1f      	ldr	r2, [pc, #124]	; (80012b8 <HAL_UART_MspInit+0xc4>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <HAL_UART_MspInit+0xc4>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <HAL_UART_MspInit+0xc4>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a18      	ldr	r2, [pc, #96]	; (80012b8 <HAL_UART_MspInit+0xc4>)
 8001258:	f043 0308 	orr.w	r3, r3, #8
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <HAL_UART_MspInit+0xc4>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800126a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800127c:	2308      	movs	r3, #8
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	480d      	ldr	r0, [pc, #52]	; (80012bc <HAL_UART_MspInit+0xc8>)
 8001288:	f001 ffbe 	bl	8003208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800128c:	2304      	movs	r3, #4
 800128e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800129c:	2308      	movs	r3, #8
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	4806      	ldr	r0, [pc, #24]	; (80012c0 <HAL_UART_MspInit+0xcc>)
 80012a8:	f001 ffae 	bl	8003208 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80012ac:	bf00      	nop
 80012ae:	3728      	adds	r7, #40	; 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40005000 	.word	0x40005000
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020800 	.word	0x40020800
 80012c0:	40020c00 	.word	0x40020c00

080012c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <NMI_Handler+0x4>

080012ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <HardFault_Handler+0x4>

080012d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <MemManage_Handler+0x4>

080012d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001310:	f000 f95c 	bl	80015cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <DMA1_Stream4_IRQHandler+0x10>)
 800131e:	f000 fbc9 	bl	8001ab4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200032c4 	.word	0x200032c4

0800132c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001330:	4802      	ldr	r0, [pc, #8]	; (800133c <DMA1_Stream5_IRQHandler+0x10>)
 8001332:	f000 fbbf 	bl	8001ab4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000321c 	.word	0x2000321c

08001340 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <SPI3_IRQHandler+0x10>)
 8001346:	f004 fdd1 	bl	8005eec <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	2000336c 	.word	0x2000336c

08001354 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <OTG_FS_IRQHandler+0x10>)
 800135a:	f002 fb5b 	bl	8003a14 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200057fc 	.word	0x200057fc

08001368 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	e00a      	b.n	8001390 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800137a:	f3af 8000 	nop.w
 800137e:	4601      	mov	r1, r0
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	60ba      	str	r2, [r7, #8]
 8001386:	b2ca      	uxtb	r2, r1
 8001388:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3301      	adds	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	dbf0      	blt.n	800137a <_read+0x12>
	}

return len;
 8001398:	687b      	ldr	r3, [r7, #4]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	e009      	b.n	80013c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	1c5a      	adds	r2, r3, #1
 80013b8:	60ba      	str	r2, [r7, #8]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fa8f 	bl	80008e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	dbf1      	blt.n	80013b4 <_write+0x12>
	}
	return len;
 80013d0:	687b      	ldr	r3, [r7, #4]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <_close>:

int _close(int file)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
	return -1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001402:	605a      	str	r2, [r3, #4]
	return 0;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <_isatty>:

int _isatty(int file)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
	return 1;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
	return 0;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800144c:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <_sbrk+0x5c>)
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <_sbrk+0x60>)
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d102      	bne.n	8001466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <_sbrk+0x64>)
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <_sbrk+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	429a      	cmp	r2, r3
 8001472:	d207      	bcs.n	8001484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001474:	f00c ff4c 	bl	800e310 <__errno>
 8001478:	4603      	mov	r3, r0
 800147a:	220c      	movs	r2, #12
 800147c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	e009      	b.n	8001498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148a:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <_sbrk+0x64>)
 8001494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20020000 	.word	0x20020000
 80014a4:	00000400 	.word	0x00000400
 80014a8:	20003128 	.word	0x20003128
 80014ac:	20005b10 	.word	0x20005b10

080014b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <SystemInit+0x20>)
 80014b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ba:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <SystemInit+0x20>)
 80014bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800150c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d8:	480d      	ldr	r0, [pc, #52]	; (8001510 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014da:	490e      	ldr	r1, [pc, #56]	; (8001514 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014dc:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a0b      	ldr	r2, [pc, #44]	; (800151c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014f0:	4c0b      	ldr	r4, [pc, #44]	; (8001520 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014fe:	f7ff ffd7 	bl	80014b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001502:	f00c ff0b 	bl	800e31c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001506:	f7ff f9fd 	bl	8000904 <main>
  bx  lr    
 800150a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800150c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001514:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001518:	08086478 	.word	0x08086478
  ldr r2, =_sbss
 800151c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001520:	20005b10 	.word	0x20005b10

08001524 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC_IRQHandler>
	...

08001528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <HAL_Init+0x40>)
 8001532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <HAL_Init+0x40>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <HAL_Init+0x40>)
 800153e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <HAL_Init+0x40>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <HAL_Init+0x40>)
 800154a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 f94f 	bl	80017f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001556:	200f      	movs	r0, #15
 8001558:	f000 f808 	bl	800156c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800155c:	f7ff fc20 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023c00 	.word	0x40023c00

0800156c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_InitTick+0x54>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_InitTick+0x58>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001582:	fbb3 f3f1 	udiv	r3, r3, r1
 8001586:	fbb2 f3f3 	udiv	r3, r2, r3
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f967 	bl	800185e <HAL_SYSTICK_Config>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e00e      	b.n	80015b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b0f      	cmp	r3, #15
 800159e:	d80a      	bhi.n	80015b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a0:	2200      	movs	r2, #0
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f000 f92f 	bl	800180a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ac:	4a06      	ldr	r2, [pc, #24]	; (80015c8 <HAL_InitTick+0x5c>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e000      	b.n	80015b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	2000000c 	.word	0x2000000c
 80015c4:	20000014 	.word	0x20000014
 80015c8:	20000010 	.word	0x20000010

080015cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_IncTick+0x20>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_IncTick+0x24>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <HAL_IncTick+0x24>)
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000014 	.word	0x20000014
 80015f0:	200033b4 	.word	0x200033b4

080015f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return uwTick;
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <HAL_GetTick+0x14>)
 80015fa:	681b      	ldr	r3, [r3, #0]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	200033b4 	.word	0x200033b4

0800160c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001614:	f7ff ffee 	bl	80015f4 <HAL_GetTick>
 8001618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001624:	d005      	beq.n	8001632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_Delay+0x44>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4413      	add	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001632:	bf00      	nop
 8001634:	f7ff ffde 	bl	80015f4 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	429a      	cmp	r2, r3
 8001642:	d8f7      	bhi.n	8001634 <HAL_Delay+0x28>
  {
  }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000014 	.word	0x20000014

08001654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001670:	4013      	ands	r3, r2
 8001672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800167c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001686:	4a04      	ldr	r2, [pc, #16]	; (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	60d3      	str	r3, [r2, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <__NVIC_GetPriorityGrouping+0x18>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	f003 0307 	and.w	r3, r3, #7
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	db0b      	blt.n	80016e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	f003 021f 	and.w	r2, r3, #31
 80016d0:	4907      	ldr	r1, [pc, #28]	; (80016f0 <__NVIC_EnableIRQ+0x38>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	2001      	movs	r0, #1
 80016da:	fa00 f202 	lsl.w	r2, r0, r2
 80016de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000e100 	.word	0xe000e100

080016f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	6039      	str	r1, [r7, #0]
 80016fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	2b00      	cmp	r3, #0
 8001706:	db0a      	blt.n	800171e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	b2da      	uxtb	r2, r3
 800170c:	490c      	ldr	r1, [pc, #48]	; (8001740 <__NVIC_SetPriority+0x4c>)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	0112      	lsls	r2, r2, #4
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	440b      	add	r3, r1
 8001718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800171c:	e00a      	b.n	8001734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4908      	ldr	r1, [pc, #32]	; (8001744 <__NVIC_SetPriority+0x50>)
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	3b04      	subs	r3, #4
 800172c:	0112      	lsls	r2, r2, #4
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	440b      	add	r3, r1
 8001732:	761a      	strb	r2, [r3, #24]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000e100 	.word	0xe000e100
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001748:	b480      	push	{r7}
 800174a:	b089      	sub	sp, #36	; 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f1c3 0307 	rsb	r3, r3, #7
 8001762:	2b04      	cmp	r3, #4
 8001764:	bf28      	it	cs
 8001766:	2304      	movcs	r3, #4
 8001768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3304      	adds	r3, #4
 800176e:	2b06      	cmp	r3, #6
 8001770:	d902      	bls.n	8001778 <NVIC_EncodePriority+0x30>
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3b03      	subs	r3, #3
 8001776:	e000      	b.n	800177a <NVIC_EncodePriority+0x32>
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	f04f 32ff 	mov.w	r2, #4294967295
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43da      	mvns	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	401a      	ands	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	43d9      	mvns	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	4313      	orrs	r3, r2
         );
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3724      	adds	r7, #36	; 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017c0:	d301      	bcc.n	80017c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017c2:	2301      	movs	r3, #1
 80017c4:	e00f      	b.n	80017e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <SysTick_Config+0x40>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ce:	210f      	movs	r1, #15
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	f7ff ff8e 	bl	80016f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <SysTick_Config+0x40>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017de:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <SysTick_Config+0x40>)
 80017e0:	2207      	movs	r2, #7
 80017e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	e000e010 	.word	0xe000e010

080017f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff ff29 	bl	8001654 <__NVIC_SetPriorityGrouping>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800180a:	b580      	push	{r7, lr}
 800180c:	b086      	sub	sp, #24
 800180e:	af00      	add	r7, sp, #0
 8001810:	4603      	mov	r3, r0
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800181c:	f7ff ff3e 	bl	800169c <__NVIC_GetPriorityGrouping>
 8001820:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	68b9      	ldr	r1, [r7, #8]
 8001826:	6978      	ldr	r0, [r7, #20]
 8001828:	f7ff ff8e 	bl	8001748 <NVIC_EncodePriority>
 800182c:	4602      	mov	r2, r0
 800182e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001832:	4611      	mov	r1, r2
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff5d 	bl	80016f4 <__NVIC_SetPriority>
}
 800183a:	bf00      	nop
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff31 	bl	80016b8 <__NVIC_EnableIRQ>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff ffa2 	bl	80017b0 <SysTick_Config>
 800186c:	4603      	mov	r3, r0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001884:	f7ff feb6 	bl	80015f4 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e099      	b.n	80019c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2202      	movs	r2, #2
 8001898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0201 	bic.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018b4:	e00f      	b.n	80018d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018b6:	f7ff fe9d 	bl	80015f4 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b05      	cmp	r3, #5
 80018c2:	d908      	bls.n	80018d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2220      	movs	r2, #32
 80018c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2203      	movs	r2, #3
 80018ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e078      	b.n	80019c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1e8      	bne.n	80018b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	4b38      	ldr	r3, [pc, #224]	; (80019d0 <HAL_DMA_Init+0x158>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001902:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800190e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800191a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	4313      	orrs	r3, r2
 8001926:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	2b04      	cmp	r3, #4
 800192e:	d107      	bne.n	8001940 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001938:	4313      	orrs	r3, r2
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	4313      	orrs	r3, r2
 800193e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f023 0307 	bic.w	r3, r3, #7
 8001956:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	4313      	orrs	r3, r2
 8001960:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	2b04      	cmp	r3, #4
 8001968:	d117      	bne.n	800199a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	4313      	orrs	r3, r2
 8001972:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00e      	beq.n	800199a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 fa59 	bl	8001e34 <DMA_CheckFifoParam>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d008      	beq.n	800199a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2240      	movs	r2, #64	; 0x40
 800198c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001996:	2301      	movs	r3, #1
 8001998:	e016      	b.n	80019c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 fa10 	bl	8001dc8 <DMA_CalcBaseAndBitshift>
 80019a8:	4603      	mov	r3, r0
 80019aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b0:	223f      	movs	r2, #63	; 0x3f
 80019b2:	409a      	lsls	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	f010803f 	.word	0xf010803f

080019d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019e2:	f7ff fe07 	bl	80015f4 <HAL_GetTick>
 80019e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d008      	beq.n	8001a06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2280      	movs	r2, #128	; 0x80
 80019f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e052      	b.n	8001aac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0216 	bic.w	r2, r2, #22
 8001a14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695a      	ldr	r2, [r3, #20]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d103      	bne.n	8001a36 <HAL_DMA_Abort+0x62>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d007      	beq.n	8001a46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0208 	bic.w	r2, r2, #8
 8001a44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0201 	bic.w	r2, r2, #1
 8001a54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a56:	e013      	b.n	8001a80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a58:	f7ff fdcc 	bl	80015f4 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b05      	cmp	r3, #5
 8001a64:	d90c      	bls.n	8001a80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2203      	movs	r2, #3
 8001a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e015      	b.n	8001aac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1e4      	bne.n	8001a58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a92:	223f      	movs	r2, #63	; 0x3f
 8001a94:	409a      	lsls	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ac0:	4b92      	ldr	r3, [pc, #584]	; (8001d0c <HAL_DMA_IRQHandler+0x258>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a92      	ldr	r2, [pc, #584]	; (8001d10 <HAL_DMA_IRQHandler+0x25c>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	0a9b      	lsrs	r3, r3, #10
 8001acc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ade:	2208      	movs	r2, #8
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d01a      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d013      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0204 	bic.w	r2, r2, #4
 8001b06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b18:	f043 0201 	orr.w	r2, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b24:	2201      	movs	r2, #1
 8001b26:	409a      	lsls	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d012      	beq.n	8001b56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00b      	beq.n	8001b56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b42:	2201      	movs	r2, #1
 8001b44:	409a      	lsls	r2, r3
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4e:	f043 0202 	orr.w	r2, r3, #2
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5a:	2204      	movs	r2, #4
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d012      	beq.n	8001b8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00b      	beq.n	8001b8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b78:	2204      	movs	r2, #4
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b84:	f043 0204 	orr.w	r2, r3, #4
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b90:	2210      	movs	r2, #16
 8001b92:	409a      	lsls	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d043      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d03c      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bae:	2210      	movs	r2, #16
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d018      	beq.n	8001bf6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d108      	bne.n	8001be4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d024      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	4798      	blx	r3
 8001be2:	e01f      	b.n	8001c24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01b      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	4798      	blx	r3
 8001bf4:	e016      	b.n	8001c24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d107      	bne.n	8001c14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0208 	bic.w	r2, r2, #8
 8001c12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c28:	2220      	movs	r2, #32
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 808e 	beq.w	8001d52 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0310 	and.w	r3, r3, #16
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 8086 	beq.w	8001d52 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b05      	cmp	r3, #5
 8001c5c:	d136      	bne.n	8001ccc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0216 	bic.w	r2, r2, #22
 8001c6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695a      	ldr	r2, [r3, #20]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d103      	bne.n	8001c8e <HAL_DMA_IRQHandler+0x1da>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d007      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0208 	bic.w	r2, r2, #8
 8001c9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca2:	223f      	movs	r2, #63	; 0x3f
 8001ca4:	409a      	lsls	r2, r3
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d07d      	beq.n	8001dbe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	4798      	blx	r3
        }
        return;
 8001cca:	e078      	b.n	8001dbe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d01c      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d108      	bne.n	8001cfa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d030      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	4798      	blx	r3
 8001cf8:	e02b      	b.n	8001d52 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d027      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	4798      	blx	r3
 8001d0a:	e022      	b.n	8001d52 <HAL_DMA_IRQHandler+0x29e>
 8001d0c:	2000000c 	.word	0x2000000c
 8001d10:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10f      	bne.n	8001d42 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0210 	bic.w	r2, r2, #16
 8001d30:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d032      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d022      	beq.n	8001dac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2205      	movs	r2, #5
 8001d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0201 	bic.w	r2, r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	3301      	adds	r3, #1
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d307      	bcc.n	8001d9a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f2      	bne.n	8001d7e <HAL_DMA_IRQHandler+0x2ca>
 8001d98:	e000      	b.n	8001d9c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001d9a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	4798      	blx	r3
 8001dbc:	e000      	b.n	8001dc0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001dbe:	bf00      	nop
    }
  }
}
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop

08001dc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	3b10      	subs	r3, #16
 8001dd8:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <DMA_CalcBaseAndBitshift+0x64>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	091b      	lsrs	r3, r3, #4
 8001de0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001de2:	4a13      	ldr	r2, [pc, #76]	; (8001e30 <DMA_CalcBaseAndBitshift+0x68>)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d909      	bls.n	8001e0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dfe:	f023 0303 	bic.w	r3, r3, #3
 8001e02:	1d1a      	adds	r2, r3, #4
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	659a      	str	r2, [r3, #88]	; 0x58
 8001e08:	e007      	b.n	8001e1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e12:	f023 0303 	bic.w	r3, r3, #3
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	aaaaaaab 	.word	0xaaaaaaab
 8001e30:	080863b4 	.word	0x080863b4

08001e34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d11f      	bne.n	8001e8e <DMA_CheckFifoParam+0x5a>
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d856      	bhi.n	8001f02 <DMA_CheckFifoParam+0xce>
 8001e54:	a201      	add	r2, pc, #4	; (adr r2, 8001e5c <DMA_CheckFifoParam+0x28>)
 8001e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5a:	bf00      	nop
 8001e5c:	08001e6d 	.word	0x08001e6d
 8001e60:	08001e7f 	.word	0x08001e7f
 8001e64:	08001e6d 	.word	0x08001e6d
 8001e68:	08001f03 	.word	0x08001f03
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d046      	beq.n	8001f06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e7c:	e043      	b.n	8001f06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e86:	d140      	bne.n	8001f0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e8c:	e03d      	b.n	8001f0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e96:	d121      	bne.n	8001edc <DMA_CheckFifoParam+0xa8>
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d837      	bhi.n	8001f0e <DMA_CheckFifoParam+0xda>
 8001e9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ea4 <DMA_CheckFifoParam+0x70>)
 8001ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea4:	08001eb5 	.word	0x08001eb5
 8001ea8:	08001ebb 	.word	0x08001ebb
 8001eac:	08001eb5 	.word	0x08001eb5
 8001eb0:	08001ecd 	.word	0x08001ecd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8001eb8:	e030      	b.n	8001f1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d025      	beq.n	8001f12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eca:	e022      	b.n	8001f12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ed4:	d11f      	bne.n	8001f16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001eda:	e01c      	b.n	8001f16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d903      	bls.n	8001eea <DMA_CheckFifoParam+0xb6>
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d003      	beq.n	8001ef0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ee8:	e018      	b.n	8001f1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
      break;
 8001eee:	e015      	b.n	8001f1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00e      	beq.n	8001f1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	73fb      	strb	r3, [r7, #15]
      break;
 8001f00:	e00b      	b.n	8001f1a <DMA_CheckFifoParam+0xe6>
      break;
 8001f02:	bf00      	nop
 8001f04:	e00a      	b.n	8001f1c <DMA_CheckFifoParam+0xe8>
      break;
 8001f06:	bf00      	nop
 8001f08:	e008      	b.n	8001f1c <DMA_CheckFifoParam+0xe8>
      break;
 8001f0a:	bf00      	nop
 8001f0c:	e006      	b.n	8001f1c <DMA_CheckFifoParam+0xe8>
      break;
 8001f0e:	bf00      	nop
 8001f10:	e004      	b.n	8001f1c <DMA_CheckFifoParam+0xe8>
      break;
 8001f12:	bf00      	nop
 8001f14:	e002      	b.n	8001f1c <DMA_CheckFifoParam+0xe8>
      break;   
 8001f16:	bf00      	nop
 8001f18:	e000      	b.n	8001f1c <DMA_CheckFifoParam+0xe8>
      break;
 8001f1a:	bf00      	nop
    }
  } 
  
  return status; 
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop

08001f2c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b80      	cmp	r3, #128	; 0x80
 8001f44:	d106      	bne.n	8001f54 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	f001 b913 	b.w	800317a <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d105      	bne.n	8001f78 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2240      	movs	r2, #64	; 0x40
 8001f70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	f001 b901 	b.w	800317a <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d102      	bne.n	8001f88 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8001f82:	2302      	movs	r3, #2
 8001f84:	f001 b8f9 	b.w	800317a <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	f041 80e7 	bne.w	800316c <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001fba:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f001 f8f6 	bl	80031bc <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b99      	ldr	r3, [pc, #612]	; (800223c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d960      	bls.n	800209e <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a97      	ldr	r2, [pc, #604]	; (8002240 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d057      	beq.n	8002096 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a96      	ldr	r2, [pc, #600]	; (8002244 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d050      	beq.n	8002092 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a94      	ldr	r2, [pc, #592]	; (8002248 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d049      	beq.n	800208e <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a93      	ldr	r2, [pc, #588]	; (800224c <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d042      	beq.n	800208a <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a91      	ldr	r2, [pc, #580]	; (8002250 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d03a      	beq.n	8002084 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a90      	ldr	r2, [pc, #576]	; (8002254 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d032      	beq.n	800207e <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a8e      	ldr	r2, [pc, #568]	; (8002258 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d02a      	beq.n	8002078 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a8d      	ldr	r2, [pc, #564]	; (800225c <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d022      	beq.n	8002072 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a8b      	ldr	r2, [pc, #556]	; (8002260 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d01a      	beq.n	800206c <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a8a      	ldr	r2, [pc, #552]	; (8002264 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d012      	beq.n	8002066 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a88      	ldr	r2, [pc, #544]	; (8002268 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00a      	beq.n	8002060 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a87      	ldr	r2, [pc, #540]	; (800226c <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d102      	bne.n	800205a <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002054:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002058:	e01e      	b.n	8002098 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800205a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800205e:	e01b      	b.n	8002098 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002060:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002064:	e018      	b.n	8002098 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002066:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800206a:	e015      	b.n	8002098 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800206c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002070:	e012      	b.n	8002098 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002072:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002076:	e00f      	b.n	8002098 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002078:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800207c:	e00c      	b.n	8002098 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800207e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002082:	e009      	b.n	8002098 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002084:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002088:	e006      	b.n	8002098 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800208a:	2320      	movs	r3, #32
 800208c:	e004      	b.n	8002098 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800208e:	2320      	movs	r3, #32
 8002090:	e002      	b.n	8002098 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002092:	2320      	movs	r3, #32
 8002094:	e000      	b.n	8002098 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002096:	2320      	movs	r3, #32
 8002098:	4a75      	ldr	r2, [pc, #468]	; (8002270 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 800209a:	60d3      	str	r3, [r2, #12]
 800209c:	e150      	b.n	8002340 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	4b73      	ldr	r3, [pc, #460]	; (8002274 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d960      	bls.n	800216c <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a64      	ldr	r2, [pc, #400]	; (8002240 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d057      	beq.n	8002164 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a62      	ldr	r2, [pc, #392]	; (8002244 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d050      	beq.n	8002160 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a61      	ldr	r2, [pc, #388]	; (8002248 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d049      	beq.n	800215c <HAL_DMAEx_MultiBufferStart_IT+0x230>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a5f      	ldr	r2, [pc, #380]	; (800224c <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d042      	beq.n	8002158 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a5e      	ldr	r2, [pc, #376]	; (8002250 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d03a      	beq.n	8002152 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a5c      	ldr	r2, [pc, #368]	; (8002254 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d032      	beq.n	800214c <HAL_DMAEx_MultiBufferStart_IT+0x220>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a5b      	ldr	r2, [pc, #364]	; (8002258 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d02a      	beq.n	8002146 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a59      	ldr	r2, [pc, #356]	; (800225c <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d022      	beq.n	8002140 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a58      	ldr	r2, [pc, #352]	; (8002260 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d01a      	beq.n	800213a <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a56      	ldr	r2, [pc, #344]	; (8002264 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d012      	beq.n	8002134 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a55      	ldr	r2, [pc, #340]	; (8002268 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d00a      	beq.n	800212e <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a53      	ldr	r2, [pc, #332]	; (800226c <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d102      	bne.n	8002128 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002122:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002126:	e01e      	b.n	8002166 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800212c:	e01b      	b.n	8002166 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800212e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002132:	e018      	b.n	8002166 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002134:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002138:	e015      	b.n	8002166 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800213a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800213e:	e012      	b.n	8002166 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002140:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002144:	e00f      	b.n	8002166 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002146:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800214a:	e00c      	b.n	8002166 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800214c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002150:	e009      	b.n	8002166 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002152:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002156:	e006      	b.n	8002166 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002158:	2320      	movs	r3, #32
 800215a:	e004      	b.n	8002166 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800215c:	2320      	movs	r3, #32
 800215e:	e002      	b.n	8002166 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002160:	2320      	movs	r3, #32
 8002162:	e000      	b.n	8002166 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002164:	2320      	movs	r3, #32
 8002166:	4a42      	ldr	r2, [pc, #264]	; (8002270 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8002168:	6093      	str	r3, [r2, #8]
 800216a:	e0e9      	b.n	8002340 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	4b41      	ldr	r3, [pc, #260]	; (8002278 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8002174:	429a      	cmp	r2, r3
 8002176:	f240 8083 	bls.w	8002280 <HAL_DMAEx_MultiBufferStart_IT+0x354>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a30      	ldr	r2, [pc, #192]	; (8002240 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d057      	beq.n	8002234 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a2e      	ldr	r2, [pc, #184]	; (8002244 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d050      	beq.n	8002230 <HAL_DMAEx_MultiBufferStart_IT+0x304>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a2d      	ldr	r2, [pc, #180]	; (8002248 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d049      	beq.n	800222c <HAL_DMAEx_MultiBufferStart_IT+0x300>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2b      	ldr	r2, [pc, #172]	; (800224c <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d042      	beq.n	8002228 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a2a      	ldr	r2, [pc, #168]	; (8002250 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d03a      	beq.n	8002222 <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a28      	ldr	r2, [pc, #160]	; (8002254 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d032      	beq.n	800221c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a27      	ldr	r2, [pc, #156]	; (8002258 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d02a      	beq.n	8002216 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a25      	ldr	r2, [pc, #148]	; (800225c <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d022      	beq.n	8002210 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a24      	ldr	r2, [pc, #144]	; (8002260 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d01a      	beq.n	800220a <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a22      	ldr	r2, [pc, #136]	; (8002264 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d012      	beq.n	8002204 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a21      	ldr	r2, [pc, #132]	; (8002268 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00a      	beq.n	80021fe <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a1f      	ldr	r2, [pc, #124]	; (800226c <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d102      	bne.n	80021f8 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 80021f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021f6:	e01e      	b.n	8002236 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80021f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80021fc:	e01b      	b.n	8002236 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80021fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002202:	e018      	b.n	8002236 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002204:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002208:	e015      	b.n	8002236 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800220a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800220e:	e012      	b.n	8002236 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002210:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002214:	e00f      	b.n	8002236 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002216:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800221a:	e00c      	b.n	8002236 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800221c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002220:	e009      	b.n	8002236 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002222:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002226:	e006      	b.n	8002236 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002228:	2320      	movs	r3, #32
 800222a:	e004      	b.n	8002236 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800222c:	2320      	movs	r3, #32
 800222e:	e002      	b.n	8002236 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002230:	2320      	movs	r3, #32
 8002232:	e000      	b.n	8002236 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002234:	2320      	movs	r3, #32
 8002236:	4a11      	ldr	r2, [pc, #68]	; (800227c <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8002238:	60d3      	str	r3, [r2, #12]
 800223a:	e081      	b.n	8002340 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 800223c:	40026458 	.word	0x40026458
 8002240:	40026010 	.word	0x40026010
 8002244:	40026410 	.word	0x40026410
 8002248:	40026070 	.word	0x40026070
 800224c:	40026470 	.word	0x40026470
 8002250:	40026028 	.word	0x40026028
 8002254:	40026428 	.word	0x40026428
 8002258:	40026088 	.word	0x40026088
 800225c:	40026488 	.word	0x40026488
 8002260:	40026040 	.word	0x40026040
 8002264:	40026440 	.word	0x40026440
 8002268:	400260a0 	.word	0x400260a0
 800226c:	400264a0 	.word	0x400264a0
 8002270:	40026400 	.word	0x40026400
 8002274:	400260b8 	.word	0x400260b8
 8002278:	40026058 	.word	0x40026058
 800227c:	40026000 	.word	0x40026000
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a96      	ldr	r2, [pc, #600]	; (80024e0 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d057      	beq.n	800233a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a95      	ldr	r2, [pc, #596]	; (80024e4 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d050      	beq.n	8002336 <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a93      	ldr	r2, [pc, #588]	; (80024e8 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d049      	beq.n	8002332 <HAL_DMAEx_MultiBufferStart_IT+0x406>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a92      	ldr	r2, [pc, #584]	; (80024ec <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d042      	beq.n	800232e <HAL_DMAEx_MultiBufferStart_IT+0x402>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a90      	ldr	r2, [pc, #576]	; (80024f0 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d03a      	beq.n	8002328 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a8f      	ldr	r2, [pc, #572]	; (80024f4 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d032      	beq.n	8002322 <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a8d      	ldr	r2, [pc, #564]	; (80024f8 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d02a      	beq.n	800231c <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a8c      	ldr	r2, [pc, #560]	; (80024fc <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d022      	beq.n	8002316 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a8a      	ldr	r2, [pc, #552]	; (8002500 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d01a      	beq.n	8002310 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a89      	ldr	r2, [pc, #548]	; (8002504 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d012      	beq.n	800230a <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a87      	ldr	r2, [pc, #540]	; (8002508 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00a      	beq.n	8002304 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a86      	ldr	r2, [pc, #536]	; (800250c <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d102      	bne.n	80022fe <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 80022f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022fc:	e01e      	b.n	800233c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80022fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002302:	e01b      	b.n	800233c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002304:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002308:	e018      	b.n	800233c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800230a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800230e:	e015      	b.n	800233c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002310:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002314:	e012      	b.n	800233c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002316:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800231a:	e00f      	b.n	800233c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800231c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002320:	e00c      	b.n	800233c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002322:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002326:	e009      	b.n	800233c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002328:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800232c:	e006      	b.n	800233c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800232e:	2320      	movs	r3, #32
 8002330:	e004      	b.n	800233c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002332:	2320      	movs	r3, #32
 8002334:	e002      	b.n	800233c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002336:	2320      	movs	r3, #32
 8002338:	e000      	b.n	800233c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800233a:	2320      	movs	r3, #32
 800233c:	4a74      	ldr	r2, [pc, #464]	; (8002510 <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 800233e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	4b73      	ldr	r3, [pc, #460]	; (8002514 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 8002348:	429a      	cmp	r2, r3
 800234a:	d960      	bls.n	800240e <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a63      	ldr	r2, [pc, #396]	; (80024e0 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d057      	beq.n	8002406 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a62      	ldr	r2, [pc, #392]	; (80024e4 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d050      	beq.n	8002402 <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a60      	ldr	r2, [pc, #384]	; (80024e8 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d049      	beq.n	80023fe <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a5f      	ldr	r2, [pc, #380]	; (80024ec <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d042      	beq.n	80023fa <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a5d      	ldr	r2, [pc, #372]	; (80024f0 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d03a      	beq.n	80023f4 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a5c      	ldr	r2, [pc, #368]	; (80024f4 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d032      	beq.n	80023ee <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a5a      	ldr	r2, [pc, #360]	; (80024f8 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d02a      	beq.n	80023e8 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a59      	ldr	r2, [pc, #356]	; (80024fc <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d022      	beq.n	80023e2 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a57      	ldr	r2, [pc, #348]	; (8002500 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d01a      	beq.n	80023dc <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a56      	ldr	r2, [pc, #344]	; (8002504 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d012      	beq.n	80023d6 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a54      	ldr	r2, [pc, #336]	; (8002508 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00a      	beq.n	80023d0 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a53      	ldr	r2, [pc, #332]	; (800250c <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d102      	bne.n	80023ca <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 80023c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023c8:	e01e      	b.n	8002408 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80023ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80023ce:	e01b      	b.n	8002408 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80023d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023d4:	e018      	b.n	8002408 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80023d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023da:	e015      	b.n	8002408 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80023dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023e0:	e012      	b.n	8002408 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80023e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023e6:	e00f      	b.n	8002408 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80023e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ec:	e00c      	b.n	8002408 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80023ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023f2:	e009      	b.n	8002408 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80023f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023f8:	e006      	b.n	8002408 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80023fa:	2310      	movs	r3, #16
 80023fc:	e004      	b.n	8002408 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80023fe:	2310      	movs	r3, #16
 8002400:	e002      	b.n	8002408 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002402:	2310      	movs	r3, #16
 8002404:	e000      	b.n	8002408 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002406:	2310      	movs	r3, #16
 8002408:	4a43      	ldr	r2, [pc, #268]	; (8002518 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 800240a:	60d3      	str	r3, [r2, #12]
 800240c:	e14f      	b.n	80026ae <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	4b41      	ldr	r3, [pc, #260]	; (800251c <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 8002416:	429a      	cmp	r2, r3
 8002418:	f240 8082 	bls.w	8002520 <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a2f      	ldr	r2, [pc, #188]	; (80024e0 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d057      	beq.n	80024d6 <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a2e      	ldr	r2, [pc, #184]	; (80024e4 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d050      	beq.n	80024d2 <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a2c      	ldr	r2, [pc, #176]	; (80024e8 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d049      	beq.n	80024ce <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a2b      	ldr	r2, [pc, #172]	; (80024ec <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d042      	beq.n	80024ca <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a29      	ldr	r2, [pc, #164]	; (80024f0 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d03a      	beq.n	80024c4 <HAL_DMAEx_MultiBufferStart_IT+0x598>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a28      	ldr	r2, [pc, #160]	; (80024f4 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d032      	beq.n	80024be <HAL_DMAEx_MultiBufferStart_IT+0x592>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a26      	ldr	r2, [pc, #152]	; (80024f8 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d02a      	beq.n	80024b8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a25      	ldr	r2, [pc, #148]	; (80024fc <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d022      	beq.n	80024b2 <HAL_DMAEx_MultiBufferStart_IT+0x586>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a23      	ldr	r2, [pc, #140]	; (8002500 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d01a      	beq.n	80024ac <HAL_DMAEx_MultiBufferStart_IT+0x580>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a22      	ldr	r2, [pc, #136]	; (8002504 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d012      	beq.n	80024a6 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a20      	ldr	r2, [pc, #128]	; (8002508 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00a      	beq.n	80024a0 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a1f      	ldr	r2, [pc, #124]	; (800250c <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d102      	bne.n	800249a <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8002494:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002498:	e01e      	b.n	80024d8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800249a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800249e:	e01b      	b.n	80024d8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024a4:	e018      	b.n	80024d8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024aa:	e015      	b.n	80024d8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024b0:	e012      	b.n	80024d8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024b6:	e00f      	b.n	80024d8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024bc:	e00c      	b.n	80024d8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024c2:	e009      	b.n	80024d8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024c8:	e006      	b.n	80024d8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024ca:	2310      	movs	r3, #16
 80024cc:	e004      	b.n	80024d8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024ce:	2310      	movs	r3, #16
 80024d0:	e002      	b.n	80024d8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024d2:	2310      	movs	r3, #16
 80024d4:	e000      	b.n	80024d8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024d6:	2310      	movs	r3, #16
 80024d8:	4a0f      	ldr	r2, [pc, #60]	; (8002518 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 80024da:	6093      	str	r3, [r2, #8]
 80024dc:	e0e7      	b.n	80026ae <HAL_DMAEx_MultiBufferStart_IT+0x782>
 80024de:	bf00      	nop
 80024e0:	40026010 	.word	0x40026010
 80024e4:	40026410 	.word	0x40026410
 80024e8:	40026070 	.word	0x40026070
 80024ec:	40026470 	.word	0x40026470
 80024f0:	40026028 	.word	0x40026028
 80024f4:	40026428 	.word	0x40026428
 80024f8:	40026088 	.word	0x40026088
 80024fc:	40026488 	.word	0x40026488
 8002500:	40026040 	.word	0x40026040
 8002504:	40026440 	.word	0x40026440
 8002508:	400260a0 	.word	0x400260a0
 800250c:	400264a0 	.word	0x400264a0
 8002510:	40026000 	.word	0x40026000
 8002514:	40026458 	.word	0x40026458
 8002518:	40026400 	.word	0x40026400
 800251c:	400260b8 	.word	0x400260b8
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	461a      	mov	r2, r3
 8002526:	4b96      	ldr	r3, [pc, #600]	; (8002780 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002528:	429a      	cmp	r2, r3
 800252a:	d960      	bls.n	80025ee <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a94      	ldr	r2, [pc, #592]	; (8002784 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d057      	beq.n	80025e6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a93      	ldr	r2, [pc, #588]	; (8002788 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d050      	beq.n	80025e2 <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a91      	ldr	r2, [pc, #580]	; (800278c <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d049      	beq.n	80025de <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a90      	ldr	r2, [pc, #576]	; (8002790 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d042      	beq.n	80025da <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a8e      	ldr	r2, [pc, #568]	; (8002794 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d03a      	beq.n	80025d4 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a8d      	ldr	r2, [pc, #564]	; (8002798 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d032      	beq.n	80025ce <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a8b      	ldr	r2, [pc, #556]	; (800279c <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d02a      	beq.n	80025c8 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a8a      	ldr	r2, [pc, #552]	; (80027a0 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d022      	beq.n	80025c2 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a88      	ldr	r2, [pc, #544]	; (80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d01a      	beq.n	80025bc <HAL_DMAEx_MultiBufferStart_IT+0x690>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a87      	ldr	r2, [pc, #540]	; (80027a8 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d012      	beq.n	80025b6 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a85      	ldr	r2, [pc, #532]	; (80027ac <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00a      	beq.n	80025b0 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a84      	ldr	r2, [pc, #528]	; (80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d102      	bne.n	80025aa <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 80025a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025a8:	e01e      	b.n	80025e8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80025ae:	e01b      	b.n	80025e8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025b4:	e018      	b.n	80025e8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025ba:	e015      	b.n	80025e8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025c0:	e012      	b.n	80025e8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025c6:	e00f      	b.n	80025e8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025cc:	e00c      	b.n	80025e8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025d2:	e009      	b.n	80025e8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025d8:	e006      	b.n	80025e8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025da:	2310      	movs	r3, #16
 80025dc:	e004      	b.n	80025e8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025de:	2310      	movs	r3, #16
 80025e0:	e002      	b.n	80025e8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025e2:	2310      	movs	r3, #16
 80025e4:	e000      	b.n	80025e8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025e6:	2310      	movs	r3, #16
 80025e8:	4a72      	ldr	r2, [pc, #456]	; (80027b4 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 80025ea:	60d3      	str	r3, [r2, #12]
 80025ec:	e05f      	b.n	80026ae <HAL_DMAEx_MultiBufferStart_IT+0x782>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a64      	ldr	r2, [pc, #400]	; (8002784 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d057      	beq.n	80026a8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a62      	ldr	r2, [pc, #392]	; (8002788 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d050      	beq.n	80026a4 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a61      	ldr	r2, [pc, #388]	; (800278c <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d049      	beq.n	80026a0 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a5f      	ldr	r2, [pc, #380]	; (8002790 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d042      	beq.n	800269c <HAL_DMAEx_MultiBufferStart_IT+0x770>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a5e      	ldr	r2, [pc, #376]	; (8002794 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d03a      	beq.n	8002696 <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a5c      	ldr	r2, [pc, #368]	; (8002798 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d032      	beq.n	8002690 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a5b      	ldr	r2, [pc, #364]	; (800279c <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d02a      	beq.n	800268a <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a59      	ldr	r2, [pc, #356]	; (80027a0 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d022      	beq.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a58      	ldr	r2, [pc, #352]	; (80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d01a      	beq.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0x752>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a56      	ldr	r2, [pc, #344]	; (80027a8 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d012      	beq.n	8002678 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a55      	ldr	r2, [pc, #340]	; (80027ac <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d00a      	beq.n	8002672 <HAL_DMAEx_MultiBufferStart_IT+0x746>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a53      	ldr	r2, [pc, #332]	; (80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d102      	bne.n	800266c <HAL_DMAEx_MultiBufferStart_IT+0x740>
 8002666:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800266a:	e01e      	b.n	80026aa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800266c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002670:	e01b      	b.n	80026aa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002672:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002676:	e018      	b.n	80026aa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002678:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800267c:	e015      	b.n	80026aa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800267e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002682:	e012      	b.n	80026aa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002688:	e00f      	b.n	80026aa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800268a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800268e:	e00c      	b.n	80026aa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002694:	e009      	b.n	80026aa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800269a:	e006      	b.n	80026aa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800269c:	2310      	movs	r3, #16
 800269e:	e004      	b.n	80026aa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80026a0:	2310      	movs	r3, #16
 80026a2:	e002      	b.n	80026aa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80026a4:	2310      	movs	r3, #16
 80026a6:	e000      	b.n	80026aa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80026a8:	2310      	movs	r3, #16
 80026aa:	4a42      	ldr	r2, [pc, #264]	; (80027b4 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 80026ac:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	4b40      	ldr	r3, [pc, #256]	; (80027b8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 80026b6:	429a      	cmp	r2, r3
 80026b8:	f240 8082 	bls.w	80027c0 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a30      	ldr	r2, [pc, #192]	; (8002784 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d057      	beq.n	8002776 <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a2f      	ldr	r2, [pc, #188]	; (8002788 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d050      	beq.n	8002772 <HAL_DMAEx_MultiBufferStart_IT+0x846>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a2d      	ldr	r2, [pc, #180]	; (800278c <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d049      	beq.n	800276e <HAL_DMAEx_MultiBufferStart_IT+0x842>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a2c      	ldr	r2, [pc, #176]	; (8002790 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d042      	beq.n	800276a <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a2a      	ldr	r2, [pc, #168]	; (8002794 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d03a      	beq.n	8002764 <HAL_DMAEx_MultiBufferStart_IT+0x838>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a29      	ldr	r2, [pc, #164]	; (8002798 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d032      	beq.n	800275e <HAL_DMAEx_MultiBufferStart_IT+0x832>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a27      	ldr	r2, [pc, #156]	; (800279c <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d02a      	beq.n	8002758 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a26      	ldr	r2, [pc, #152]	; (80027a0 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d022      	beq.n	8002752 <HAL_DMAEx_MultiBufferStart_IT+0x826>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a24      	ldr	r2, [pc, #144]	; (80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d01a      	beq.n	800274c <HAL_DMAEx_MultiBufferStart_IT+0x820>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a23      	ldr	r2, [pc, #140]	; (80027a8 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d012      	beq.n	8002746 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a21      	ldr	r2, [pc, #132]	; (80027ac <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d00a      	beq.n	8002740 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a20      	ldr	r2, [pc, #128]	; (80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d102      	bne.n	800273a <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8002734:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002738:	e01e      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800273a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800273e:	e01b      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002740:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002744:	e018      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002746:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800274a:	e015      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800274c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002750:	e012      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002752:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002756:	e00f      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800275c:	e00c      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800275e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002762:	e009      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002768:	e006      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800276a:	2308      	movs	r3, #8
 800276c:	e004      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800276e:	2308      	movs	r3, #8
 8002770:	e002      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002772:	2308      	movs	r3, #8
 8002774:	e000      	b.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002776:	2308      	movs	r3, #8
 8002778:	4a10      	ldr	r2, [pc, #64]	; (80027bc <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 800277a:	60d3      	str	r3, [r2, #12]
 800277c:	e16f      	b.n	8002a5e <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 800277e:	bf00      	nop
 8002780:	40026058 	.word	0x40026058
 8002784:	40026010 	.word	0x40026010
 8002788:	40026410 	.word	0x40026410
 800278c:	40026070 	.word	0x40026070
 8002790:	40026470 	.word	0x40026470
 8002794:	40026028 	.word	0x40026028
 8002798:	40026428 	.word	0x40026428
 800279c:	40026088 	.word	0x40026088
 80027a0:	40026488 	.word	0x40026488
 80027a4:	40026040 	.word	0x40026040
 80027a8:	40026440 	.word	0x40026440
 80027ac:	400260a0 	.word	0x400260a0
 80027b0:	400264a0 	.word	0x400264a0
 80027b4:	40026000 	.word	0x40026000
 80027b8:	40026458 	.word	0x40026458
 80027bc:	40026400 	.word	0x40026400
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b94      	ldr	r3, [pc, #592]	; (8002a18 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d960      	bls.n	800288e <HAL_DMAEx_MultiBufferStart_IT+0x962>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a92      	ldr	r2, [pc, #584]	; (8002a1c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d057      	beq.n	8002886 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a91      	ldr	r2, [pc, #580]	; (8002a20 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d050      	beq.n	8002882 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a8f      	ldr	r2, [pc, #572]	; (8002a24 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d049      	beq.n	800287e <HAL_DMAEx_MultiBufferStart_IT+0x952>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a8e      	ldr	r2, [pc, #568]	; (8002a28 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d042      	beq.n	800287a <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a8c      	ldr	r2, [pc, #560]	; (8002a2c <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d03a      	beq.n	8002874 <HAL_DMAEx_MultiBufferStart_IT+0x948>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a8b      	ldr	r2, [pc, #556]	; (8002a30 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d032      	beq.n	800286e <HAL_DMAEx_MultiBufferStart_IT+0x942>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a89      	ldr	r2, [pc, #548]	; (8002a34 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d02a      	beq.n	8002868 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a88      	ldr	r2, [pc, #544]	; (8002a38 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d022      	beq.n	8002862 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a86      	ldr	r2, [pc, #536]	; (8002a3c <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d01a      	beq.n	800285c <HAL_DMAEx_MultiBufferStart_IT+0x930>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a85      	ldr	r2, [pc, #532]	; (8002a40 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d012      	beq.n	8002856 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a83      	ldr	r2, [pc, #524]	; (8002a44 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d00a      	beq.n	8002850 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a82      	ldr	r2, [pc, #520]	; (8002a48 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d102      	bne.n	800284a <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 8002844:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002848:	e01e      	b.n	8002888 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800284a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800284e:	e01b      	b.n	8002888 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002850:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002854:	e018      	b.n	8002888 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002856:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800285a:	e015      	b.n	8002888 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800285c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002860:	e012      	b.n	8002888 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002862:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002866:	e00f      	b.n	8002888 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800286c:	e00c      	b.n	8002888 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800286e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002872:	e009      	b.n	8002888 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002878:	e006      	b.n	8002888 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800287a:	2308      	movs	r3, #8
 800287c:	e004      	b.n	8002888 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800287e:	2308      	movs	r3, #8
 8002880:	e002      	b.n	8002888 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002882:	2308      	movs	r3, #8
 8002884:	e000      	b.n	8002888 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002886:	2308      	movs	r3, #8
 8002888:	4a70      	ldr	r2, [pc, #448]	; (8002a4c <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 800288a:	6093      	str	r3, [r2, #8]
 800288c:	e0e7      	b.n	8002a5e <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	4b6e      	ldr	r3, [pc, #440]	; (8002a50 <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 8002896:	429a      	cmp	r2, r3
 8002898:	d960      	bls.n	800295c <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a5f      	ldr	r2, [pc, #380]	; (8002a1c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d057      	beq.n	8002954 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a5d      	ldr	r2, [pc, #372]	; (8002a20 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d050      	beq.n	8002950 <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a5c      	ldr	r2, [pc, #368]	; (8002a24 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d049      	beq.n	800294c <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a5a      	ldr	r2, [pc, #360]	; (8002a28 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d042      	beq.n	8002948 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a59      	ldr	r2, [pc, #356]	; (8002a2c <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d03a      	beq.n	8002942 <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a57      	ldr	r2, [pc, #348]	; (8002a30 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d032      	beq.n	800293c <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a56      	ldr	r2, [pc, #344]	; (8002a34 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d02a      	beq.n	8002936 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a54      	ldr	r2, [pc, #336]	; (8002a38 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d022      	beq.n	8002930 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a53      	ldr	r2, [pc, #332]	; (8002a3c <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d01a      	beq.n	800292a <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a51      	ldr	r2, [pc, #324]	; (8002a40 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d012      	beq.n	8002924 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a50      	ldr	r2, [pc, #320]	; (8002a44 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00a      	beq.n	800291e <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a4e      	ldr	r2, [pc, #312]	; (8002a48 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d102      	bne.n	8002918 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 8002912:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002916:	e01e      	b.n	8002956 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002918:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800291c:	e01b      	b.n	8002956 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800291e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002922:	e018      	b.n	8002956 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002924:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002928:	e015      	b.n	8002956 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800292a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800292e:	e012      	b.n	8002956 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002934:	e00f      	b.n	8002956 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800293a:	e00c      	b.n	8002956 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800293c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002940:	e009      	b.n	8002956 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002942:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002946:	e006      	b.n	8002956 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002948:	2308      	movs	r3, #8
 800294a:	e004      	b.n	8002956 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800294c:	2308      	movs	r3, #8
 800294e:	e002      	b.n	8002956 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002950:	2308      	movs	r3, #8
 8002952:	e000      	b.n	8002956 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002954:	2308      	movs	r3, #8
 8002956:	4a3f      	ldr	r2, [pc, #252]	; (8002a54 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 8002958:	60d3      	str	r3, [r2, #12]
 800295a:	e080      	b.n	8002a5e <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a2e      	ldr	r2, [pc, #184]	; (8002a1c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d078      	beq.n	8002a58 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a2d      	ldr	r2, [pc, #180]	; (8002a20 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d050      	beq.n	8002a12 <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a2b      	ldr	r2, [pc, #172]	; (8002a24 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d049      	beq.n	8002a0e <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a2a      	ldr	r2, [pc, #168]	; (8002a28 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d042      	beq.n	8002a0a <HAL_DMAEx_MultiBufferStart_IT+0xade>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a28      	ldr	r2, [pc, #160]	; (8002a2c <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d03a      	beq.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a27      	ldr	r2, [pc, #156]	; (8002a30 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d032      	beq.n	80029fe <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a25      	ldr	r2, [pc, #148]	; (8002a34 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d02a      	beq.n	80029f8 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a24      	ldr	r2, [pc, #144]	; (8002a38 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d022      	beq.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a22      	ldr	r2, [pc, #136]	; (8002a3c <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d01a      	beq.n	80029ec <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a21      	ldr	r2, [pc, #132]	; (8002a40 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d012      	beq.n	80029e6 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a1f      	ldr	r2, [pc, #124]	; (8002a44 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00a      	beq.n	80029e0 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a1e      	ldr	r2, [pc, #120]	; (8002a48 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d102      	bne.n	80029da <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 80029d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029d8:	e03f      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80029da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029de:	e03c      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80029e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029e4:	e039      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80029e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029ea:	e036      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80029ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029f0:	e033      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80029f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029f6:	e030      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80029f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029fc:	e02d      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80029fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a02:	e02a      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a08:	e027      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a0a:	2308      	movs	r3, #8
 8002a0c:	e025      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a0e:	2308      	movs	r3, #8
 8002a10:	e023      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a12:	2308      	movs	r3, #8
 8002a14:	e021      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a16:	bf00      	nop
 8002a18:	400260b8 	.word	0x400260b8
 8002a1c:	40026010 	.word	0x40026010
 8002a20:	40026410 	.word	0x40026410
 8002a24:	40026070 	.word	0x40026070
 8002a28:	40026470 	.word	0x40026470
 8002a2c:	40026028 	.word	0x40026028
 8002a30:	40026428 	.word	0x40026428
 8002a34:	40026088 	.word	0x40026088
 8002a38:	40026488 	.word	0x40026488
 8002a3c:	40026040 	.word	0x40026040
 8002a40:	40026440 	.word	0x40026440
 8002a44:	400260a0 	.word	0x400260a0
 8002a48:	400264a0 	.word	0x400264a0
 8002a4c:	40026400 	.word	0x40026400
 8002a50:	40026058 	.word	0x40026058
 8002a54:	40026000 	.word	0x40026000
 8002a58:	2308      	movs	r3, #8
 8002a5a:	4a9a      	ldr	r2, [pc, #616]	; (8002cc4 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8002a5c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	4b98      	ldr	r3, [pc, #608]	; (8002cc8 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d960      	bls.n	8002b2c <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a97      	ldr	r2, [pc, #604]	; (8002ccc <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d057      	beq.n	8002b24 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a95      	ldr	r2, [pc, #596]	; (8002cd0 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d050      	beq.n	8002b20 <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a94      	ldr	r2, [pc, #592]	; (8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d049      	beq.n	8002b1c <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a92      	ldr	r2, [pc, #584]	; (8002cd8 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d042      	beq.n	8002b18 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a91      	ldr	r2, [pc, #580]	; (8002cdc <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d03a      	beq.n	8002b12 <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a8f      	ldr	r2, [pc, #572]	; (8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d032      	beq.n	8002b0c <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a8e      	ldr	r2, [pc, #568]	; (8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d02a      	beq.n	8002b06 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a8c      	ldr	r2, [pc, #560]	; (8002ce8 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d022      	beq.n	8002b00 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a8b      	ldr	r2, [pc, #556]	; (8002cec <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d01a      	beq.n	8002afa <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a89      	ldr	r2, [pc, #548]	; (8002cf0 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d012      	beq.n	8002af4 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a88      	ldr	r2, [pc, #544]	; (8002cf4 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d00a      	beq.n	8002aee <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a86      	ldr	r2, [pc, #536]	; (8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d102      	bne.n	8002ae8 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 8002ae2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ae6:	e01e      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002ae8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aec:	e01b      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002aee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002af2:	e018      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002af4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002af8:	e015      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002afa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002afe:	e012      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b04:	e00f      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b0a:	e00c      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b10:	e009      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b16:	e006      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b18:	2304      	movs	r3, #4
 8002b1a:	e004      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b1c:	2304      	movs	r3, #4
 8002b1e:	e002      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b20:	2304      	movs	r3, #4
 8002b22:	e000      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b24:	2304      	movs	r3, #4
 8002b26:	4a75      	ldr	r2, [pc, #468]	; (8002cfc <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8002b28:	60d3      	str	r3, [r2, #12]
 8002b2a:	e151      	b.n	8002dd0 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	4b73      	ldr	r3, [pc, #460]	; (8002d00 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d960      	bls.n	8002bfa <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a63      	ldr	r2, [pc, #396]	; (8002ccc <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d057      	beq.n	8002bf2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a62      	ldr	r2, [pc, #392]	; (8002cd0 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d050      	beq.n	8002bee <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a60      	ldr	r2, [pc, #384]	; (8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d049      	beq.n	8002bea <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a5f      	ldr	r2, [pc, #380]	; (8002cd8 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d042      	beq.n	8002be6 <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a5d      	ldr	r2, [pc, #372]	; (8002cdc <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d03a      	beq.n	8002be0 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a5c      	ldr	r2, [pc, #368]	; (8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d032      	beq.n	8002bda <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a5a      	ldr	r2, [pc, #360]	; (8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d02a      	beq.n	8002bd4 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a59      	ldr	r2, [pc, #356]	; (8002ce8 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d022      	beq.n	8002bce <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a57      	ldr	r2, [pc, #348]	; (8002cec <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d01a      	beq.n	8002bc8 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a56      	ldr	r2, [pc, #344]	; (8002cf0 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d012      	beq.n	8002bc2 <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a54      	ldr	r2, [pc, #336]	; (8002cf4 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00a      	beq.n	8002bbc <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a53      	ldr	r2, [pc, #332]	; (8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d102      	bne.n	8002bb6 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 8002bb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bb4:	e01e      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002bb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bba:	e01b      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002bbc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bc0:	e018      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002bc2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bc6:	e015      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002bc8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bcc:	e012      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002bce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bd2:	e00f      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bd8:	e00c      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bde:	e009      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002be0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002be4:	e006      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002be6:	2304      	movs	r3, #4
 8002be8:	e004      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002bea:	2304      	movs	r3, #4
 8002bec:	e002      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002bee:	2304      	movs	r3, #4
 8002bf0:	e000      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002bf2:	2304      	movs	r3, #4
 8002bf4:	4a41      	ldr	r2, [pc, #260]	; (8002cfc <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8002bf6:	6093      	str	r3, [r2, #8]
 8002bf8:	e0ea      	b.n	8002dd0 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	4b40      	ldr	r3, [pc, #256]	; (8002d04 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 8002c02:	429a      	cmp	r2, r3
 8002c04:	f240 8084 	bls.w	8002d10 <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a2f      	ldr	r2, [pc, #188]	; (8002ccc <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d07a      	beq.n	8002d08 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a2e      	ldr	r2, [pc, #184]	; (8002cd0 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d050      	beq.n	8002cbe <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a2c      	ldr	r2, [pc, #176]	; (8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d049      	beq.n	8002cba <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a2b      	ldr	r2, [pc, #172]	; (8002cd8 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d042      	beq.n	8002cb6 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a29      	ldr	r2, [pc, #164]	; (8002cdc <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d03a      	beq.n	8002cb0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a28      	ldr	r2, [pc, #160]	; (8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d032      	beq.n	8002caa <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a26      	ldr	r2, [pc, #152]	; (8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d02a      	beq.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a25      	ldr	r2, [pc, #148]	; (8002ce8 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d022      	beq.n	8002c9e <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a23      	ldr	r2, [pc, #140]	; (8002cec <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d01a      	beq.n	8002c98 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a22      	ldr	r2, [pc, #136]	; (8002cf0 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d012      	beq.n	8002c92 <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a20      	ldr	r2, [pc, #128]	; (8002cf4 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d00a      	beq.n	8002c8c <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a1f      	ldr	r2, [pc, #124]	; (8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d102      	bne.n	8002c86 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8002c80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c84:	e041      	b.n	8002d0a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002c86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c8a:	e03e      	b.n	8002d0a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002c8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c90:	e03b      	b.n	8002d0a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002c92:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c96:	e038      	b.n	8002d0a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002c98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c9c:	e035      	b.n	8002d0a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ca2:	e032      	b.n	8002d0a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ca8:	e02f      	b.n	8002d0a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cae:	e02c      	b.n	8002d0a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cb4:	e029      	b.n	8002d0a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002cb6:	2304      	movs	r3, #4
 8002cb8:	e027      	b.n	8002d0a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002cba:	2304      	movs	r3, #4
 8002cbc:	e025      	b.n	8002d0a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002cbe:	2304      	movs	r3, #4
 8002cc0:	e023      	b.n	8002d0a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002cc2:	bf00      	nop
 8002cc4:	40026000 	.word	0x40026000
 8002cc8:	40026458 	.word	0x40026458
 8002ccc:	40026010 	.word	0x40026010
 8002cd0:	40026410 	.word	0x40026410
 8002cd4:	40026070 	.word	0x40026070
 8002cd8:	40026470 	.word	0x40026470
 8002cdc:	40026028 	.word	0x40026028
 8002ce0:	40026428 	.word	0x40026428
 8002ce4:	40026088 	.word	0x40026088
 8002ce8:	40026488 	.word	0x40026488
 8002cec:	40026040 	.word	0x40026040
 8002cf0:	40026440 	.word	0x40026440
 8002cf4:	400260a0 	.word	0x400260a0
 8002cf8:	400264a0 	.word	0x400264a0
 8002cfc:	40026400 	.word	0x40026400
 8002d00:	400260b8 	.word	0x400260b8
 8002d04:	40026058 	.word	0x40026058
 8002d08:	2304      	movs	r3, #4
 8002d0a:	4a94      	ldr	r2, [pc, #592]	; (8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002d0c:	60d3      	str	r3, [r2, #12]
 8002d0e:	e05f      	b.n	8002dd0 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a92      	ldr	r2, [pc, #584]	; (8002f60 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d057      	beq.n	8002dca <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a91      	ldr	r2, [pc, #580]	; (8002f64 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d050      	beq.n	8002dc6 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a8f      	ldr	r2, [pc, #572]	; (8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d049      	beq.n	8002dc2 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a8e      	ldr	r2, [pc, #568]	; (8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d042      	beq.n	8002dbe <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a8c      	ldr	r2, [pc, #560]	; (8002f70 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d03a      	beq.n	8002db8 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a8b      	ldr	r2, [pc, #556]	; (8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d032      	beq.n	8002db2 <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a89      	ldr	r2, [pc, #548]	; (8002f78 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d02a      	beq.n	8002dac <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a88      	ldr	r2, [pc, #544]	; (8002f7c <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d022      	beq.n	8002da6 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a86      	ldr	r2, [pc, #536]	; (8002f80 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d01a      	beq.n	8002da0 <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a85      	ldr	r2, [pc, #532]	; (8002f84 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d012      	beq.n	8002d9a <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a83      	ldr	r2, [pc, #524]	; (8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00a      	beq.n	8002d94 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a82      	ldr	r2, [pc, #520]	; (8002f8c <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d102      	bne.n	8002d8e <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 8002d88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d8c:	e01e      	b.n	8002dcc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002d8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d92:	e01b      	b.n	8002dcc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002d94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d98:	e018      	b.n	8002dcc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002d9a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d9e:	e015      	b.n	8002dcc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002da0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002da4:	e012      	b.n	8002dcc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002da6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002daa:	e00f      	b.n	8002dcc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002db0:	e00c      	b.n	8002dcc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002db6:	e009      	b.n	8002dcc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002db8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dbc:	e006      	b.n	8002dcc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	e004      	b.n	8002dcc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002dc2:	2304      	movs	r3, #4
 8002dc4:	e002      	b.n	8002dcc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002dc6:	2304      	movs	r3, #4
 8002dc8:	e000      	b.n	8002dcc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002dca:	2304      	movs	r3, #4
 8002dcc:	4a63      	ldr	r2, [pc, #396]	; (8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002dce:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4b6e      	ldr	r3, [pc, #440]	; (8002f90 <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d95c      	bls.n	8002e96 <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a5f      	ldr	r2, [pc, #380]	; (8002f60 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d053      	beq.n	8002e8e <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a5e      	ldr	r2, [pc, #376]	; (8002f64 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d04c      	beq.n	8002e8a <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a5c      	ldr	r2, [pc, #368]	; (8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d045      	beq.n	8002e86 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a5b      	ldr	r2, [pc, #364]	; (8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d03e      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a59      	ldr	r2, [pc, #356]	; (8002f70 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d037      	beq.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a58      	ldr	r2, [pc, #352]	; (8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d030      	beq.n	8002e7a <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a56      	ldr	r2, [pc, #344]	; (8002f78 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d029      	beq.n	8002e76 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a55      	ldr	r2, [pc, #340]	; (8002f7c <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d022      	beq.n	8002e72 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a53      	ldr	r2, [pc, #332]	; (8002f80 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d01a      	beq.n	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a52      	ldr	r2, [pc, #328]	; (8002f84 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d012      	beq.n	8002e66 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a50      	ldr	r2, [pc, #320]	; (8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00a      	beq.n	8002e60 <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a4f      	ldr	r2, [pc, #316]	; (8002f8c <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d102      	bne.n	8002e5a <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8002e54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e58:	e01a      	b.n	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e5e:	e017      	b.n	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e64:	e014      	b.n	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e6a:	e011      	b.n	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e70:	e00e      	b.n	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e72:	2340      	movs	r3, #64	; 0x40
 8002e74:	e00c      	b.n	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e76:	2340      	movs	r3, #64	; 0x40
 8002e78:	e00a      	b.n	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e7a:	2340      	movs	r3, #64	; 0x40
 8002e7c:	e008      	b.n	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e7e:	2340      	movs	r3, #64	; 0x40
 8002e80:	e006      	b.n	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e004      	b.n	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e002      	b.n	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	4a40      	ldr	r2, [pc, #256]	; (8002f94 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8002e92:	60d3      	str	r3, [r2, #12]
 8002e94:	e141      	b.n	800311a <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4b3e      	ldr	r3, [pc, #248]	; (8002f98 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d97c      	bls.n	8002f9c <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a2e      	ldr	r2, [pc, #184]	; (8002f60 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d053      	beq.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a2c      	ldr	r2, [pc, #176]	; (8002f64 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d04c      	beq.n	8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a2b      	ldr	r2, [pc, #172]	; (8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d045      	beq.n	8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a29      	ldr	r2, [pc, #164]	; (8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d03e      	beq.n	8002f48 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a28      	ldr	r2, [pc, #160]	; (8002f70 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d037      	beq.n	8002f44 <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a26      	ldr	r2, [pc, #152]	; (8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d030      	beq.n	8002f40 <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a25      	ldr	r2, [pc, #148]	; (8002f78 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d029      	beq.n	8002f3c <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a23      	ldr	r2, [pc, #140]	; (8002f7c <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d022      	beq.n	8002f38 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a22      	ldr	r2, [pc, #136]	; (8002f80 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d01a      	beq.n	8002f32 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a20      	ldr	r2, [pc, #128]	; (8002f84 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d012      	beq.n	8002f2c <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a1f      	ldr	r2, [pc, #124]	; (8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d00a      	beq.n	8002f26 <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a1d      	ldr	r2, [pc, #116]	; (8002f8c <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d102      	bne.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8002f1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f1e:	e01a      	b.n	8002f56 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f24:	e017      	b.n	8002f56 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f2a:	e014      	b.n	8002f56 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f30:	e011      	b.n	8002f56 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f36:	e00e      	b.n	8002f56 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f38:	2340      	movs	r3, #64	; 0x40
 8002f3a:	e00c      	b.n	8002f56 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f3c:	2340      	movs	r3, #64	; 0x40
 8002f3e:	e00a      	b.n	8002f56 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f40:	2340      	movs	r3, #64	; 0x40
 8002f42:	e008      	b.n	8002f56 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f44:	2340      	movs	r3, #64	; 0x40
 8002f46:	e006      	b.n	8002f56 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e004      	b.n	8002f56 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e002      	b.n	8002f56 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f54:	2301      	movs	r3, #1
 8002f56:	4a0f      	ldr	r2, [pc, #60]	; (8002f94 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8002f58:	6093      	str	r3, [r2, #8]
 8002f5a:	e0de      	b.n	800311a <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8002f5c:	40026000 	.word	0x40026000
 8002f60:	40026010 	.word	0x40026010
 8002f64:	40026410 	.word	0x40026410
 8002f68:	40026070 	.word	0x40026070
 8002f6c:	40026470 	.word	0x40026470
 8002f70:	40026028 	.word	0x40026028
 8002f74:	40026428 	.word	0x40026428
 8002f78:	40026088 	.word	0x40026088
 8002f7c:	40026488 	.word	0x40026488
 8002f80:	40026040 	.word	0x40026040
 8002f84:	40026440 	.word	0x40026440
 8002f88:	400260a0 	.word	0x400260a0
 8002f8c:	400264a0 	.word	0x400264a0
 8002f90:	40026458 	.word	0x40026458
 8002f94:	40026400 	.word	0x40026400
 8002f98:	400260b8 	.word	0x400260b8
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b78      	ldr	r3, [pc, #480]	; (8003184 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d95c      	bls.n	8003062 <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a76      	ldr	r2, [pc, #472]	; (8003188 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d053      	beq.n	800305a <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a75      	ldr	r2, [pc, #468]	; (800318c <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d04c      	beq.n	8003056 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a73      	ldr	r2, [pc, #460]	; (8003190 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d045      	beq.n	8003052 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a72      	ldr	r2, [pc, #456]	; (8003194 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d03e      	beq.n	800304e <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a70      	ldr	r2, [pc, #448]	; (8003198 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d037      	beq.n	800304a <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a6f      	ldr	r2, [pc, #444]	; (800319c <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d030      	beq.n	8003046 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a6d      	ldr	r2, [pc, #436]	; (80031a0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d029      	beq.n	8003042 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a6c      	ldr	r2, [pc, #432]	; (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d022      	beq.n	800303e <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a6a      	ldr	r2, [pc, #424]	; (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d01a      	beq.n	8003038 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a69      	ldr	r2, [pc, #420]	; (80031ac <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d012      	beq.n	8003032 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a67      	ldr	r2, [pc, #412]	; (80031b0 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00a      	beq.n	800302c <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a66      	ldr	r2, [pc, #408]	; (80031b4 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d102      	bne.n	8003026 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8003020:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003024:	e01a      	b.n	800305c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003026:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800302a:	e017      	b.n	800305c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800302c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003030:	e014      	b.n	800305c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003032:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003036:	e011      	b.n	800305c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003038:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800303c:	e00e      	b.n	800305c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800303e:	2340      	movs	r3, #64	; 0x40
 8003040:	e00c      	b.n	800305c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003042:	2340      	movs	r3, #64	; 0x40
 8003044:	e00a      	b.n	800305c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003046:	2340      	movs	r3, #64	; 0x40
 8003048:	e008      	b.n	800305c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800304a:	2340      	movs	r3, #64	; 0x40
 800304c:	e006      	b.n	800305c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800304e:	2301      	movs	r3, #1
 8003050:	e004      	b.n	800305c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003052:	2301      	movs	r3, #1
 8003054:	e002      	b.n	800305c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800305a:	2301      	movs	r3, #1
 800305c:	4a56      	ldr	r2, [pc, #344]	; (80031b8 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800305e:	60d3      	str	r3, [r2, #12]
 8003060:	e05b      	b.n	800311a <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a48      	ldr	r2, [pc, #288]	; (8003188 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d053      	beq.n	8003114 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a46      	ldr	r2, [pc, #280]	; (800318c <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d04c      	beq.n	8003110 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a45      	ldr	r2, [pc, #276]	; (8003190 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d045      	beq.n	800310c <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a43      	ldr	r2, [pc, #268]	; (8003194 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d03e      	beq.n	8003108 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a42      	ldr	r2, [pc, #264]	; (8003198 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d037      	beq.n	8003104 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a40      	ldr	r2, [pc, #256]	; (800319c <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d030      	beq.n	8003100 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a3f      	ldr	r2, [pc, #252]	; (80031a0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d029      	beq.n	80030fc <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a3d      	ldr	r2, [pc, #244]	; (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d022      	beq.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a3c      	ldr	r2, [pc, #240]	; (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d01a      	beq.n	80030f2 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a3a      	ldr	r2, [pc, #232]	; (80031ac <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d012      	beq.n	80030ec <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a39      	ldr	r2, [pc, #228]	; (80031b0 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d00a      	beq.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a37      	ldr	r2, [pc, #220]	; (80031b4 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d102      	bne.n	80030e0 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 80030da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030de:	e01a      	b.n	8003116 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80030e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030e4:	e017      	b.n	8003116 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80030e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ea:	e014      	b.n	8003116 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80030ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030f0:	e011      	b.n	8003116 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80030f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030f6:	e00e      	b.n	8003116 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80030f8:	2340      	movs	r3, #64	; 0x40
 80030fa:	e00c      	b.n	8003116 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80030fc:	2340      	movs	r3, #64	; 0x40
 80030fe:	e00a      	b.n	8003116 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003100:	2340      	movs	r3, #64	; 0x40
 8003102:	e008      	b.n	8003116 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003104:	2340      	movs	r3, #64	; 0x40
 8003106:	e006      	b.n	8003116 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003108:	2301      	movs	r3, #1
 800310a:	e004      	b.n	8003116 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800310c:	2301      	movs	r3, #1
 800310e:	e002      	b.n	8003116 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003114:	2301      	movs	r3, #1
 8003116:	4a28      	ldr	r2, [pc, #160]	; (80031b8 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003118:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0216 	orr.w	r2, r2, #22
 8003128:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695a      	ldr	r2, [r3, #20]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003138:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	d103      	bne.n	800314a <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0208 	orr.w	r2, r2, #8
 8003158:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 0201 	orr.w	r2, r2, #1
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	e005      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003174:	2302      	movs	r3, #2
 8003176:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003178:	7dfb      	ldrb	r3, [r7, #23]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40026058 	.word	0x40026058
 8003188:	40026010 	.word	0x40026010
 800318c:	40026410 	.word	0x40026410
 8003190:	40026070 	.word	0x40026070
 8003194:	40026470 	.word	0x40026470
 8003198:	40026028 	.word	0x40026028
 800319c:	40026428 	.word	0x40026428
 80031a0:	40026088 	.word	0x40026088
 80031a4:	40026488 	.word	0x40026488
 80031a8:	40026040 	.word	0x40026040
 80031ac:	40026440 	.word	0x40026440
 80031b0:	400260a0 	.word	0x400260a0
 80031b4:	400264a0 	.word	0x400264a0
 80031b8:	40026000 	.word	0x40026000

080031bc <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b40      	cmp	r3, #64	; 0x40
 80031d8:	d108      	bne.n	80031ec <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031ea:	e007      	b.n	80031fc <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	60da      	str	r2, [r3, #12]
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003208:	b480      	push	{r7}
 800320a:	b089      	sub	sp, #36	; 0x24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003216:	2300      	movs	r3, #0
 8003218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800321a:	2300      	movs	r3, #0
 800321c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	e16b      	b.n	80034fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003224:	2201      	movs	r2, #1
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	429a      	cmp	r2, r3
 800323e:	f040 815a 	bne.w	80034f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d005      	beq.n	800325a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003256:	2b02      	cmp	r3, #2
 8003258:	d130      	bne.n	80032bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	2203      	movs	r2, #3
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003290:	2201      	movs	r2, #1
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	f003 0201 	and.w	r2, r3, #1
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d017      	beq.n	80032f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	2203      	movs	r2, #3
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d123      	bne.n	800334c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	08da      	lsrs	r2, r3, #3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3208      	adds	r2, #8
 800330c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003310:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	220f      	movs	r2, #15
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	43db      	mvns	r3, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4013      	ands	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	08da      	lsrs	r2, r3, #3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3208      	adds	r2, #8
 8003346:	69b9      	ldr	r1, [r7, #24]
 8003348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	2203      	movs	r2, #3
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0203 	and.w	r2, r3, #3
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4313      	orrs	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80b4 	beq.w	80034f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	4b60      	ldr	r3, [pc, #384]	; (8003514 <HAL_GPIO_Init+0x30c>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	4a5f      	ldr	r2, [pc, #380]	; (8003514 <HAL_GPIO_Init+0x30c>)
 8003398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800339c:	6453      	str	r3, [r2, #68]	; 0x44
 800339e:	4b5d      	ldr	r3, [pc, #372]	; (8003514 <HAL_GPIO_Init+0x30c>)
 80033a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033aa:	4a5b      	ldr	r2, [pc, #364]	; (8003518 <HAL_GPIO_Init+0x310>)
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	089b      	lsrs	r3, r3, #2
 80033b0:	3302      	adds	r3, #2
 80033b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	220f      	movs	r2, #15
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43db      	mvns	r3, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4013      	ands	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a52      	ldr	r2, [pc, #328]	; (800351c <HAL_GPIO_Init+0x314>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d02b      	beq.n	800342e <HAL_GPIO_Init+0x226>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a51      	ldr	r2, [pc, #324]	; (8003520 <HAL_GPIO_Init+0x318>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d025      	beq.n	800342a <HAL_GPIO_Init+0x222>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a50      	ldr	r2, [pc, #320]	; (8003524 <HAL_GPIO_Init+0x31c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d01f      	beq.n	8003426 <HAL_GPIO_Init+0x21e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4f      	ldr	r2, [pc, #316]	; (8003528 <HAL_GPIO_Init+0x320>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d019      	beq.n	8003422 <HAL_GPIO_Init+0x21a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a4e      	ldr	r2, [pc, #312]	; (800352c <HAL_GPIO_Init+0x324>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d013      	beq.n	800341e <HAL_GPIO_Init+0x216>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a4d      	ldr	r2, [pc, #308]	; (8003530 <HAL_GPIO_Init+0x328>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00d      	beq.n	800341a <HAL_GPIO_Init+0x212>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a4c      	ldr	r2, [pc, #304]	; (8003534 <HAL_GPIO_Init+0x32c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d007      	beq.n	8003416 <HAL_GPIO_Init+0x20e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a4b      	ldr	r2, [pc, #300]	; (8003538 <HAL_GPIO_Init+0x330>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d101      	bne.n	8003412 <HAL_GPIO_Init+0x20a>
 800340e:	2307      	movs	r3, #7
 8003410:	e00e      	b.n	8003430 <HAL_GPIO_Init+0x228>
 8003412:	2308      	movs	r3, #8
 8003414:	e00c      	b.n	8003430 <HAL_GPIO_Init+0x228>
 8003416:	2306      	movs	r3, #6
 8003418:	e00a      	b.n	8003430 <HAL_GPIO_Init+0x228>
 800341a:	2305      	movs	r3, #5
 800341c:	e008      	b.n	8003430 <HAL_GPIO_Init+0x228>
 800341e:	2304      	movs	r3, #4
 8003420:	e006      	b.n	8003430 <HAL_GPIO_Init+0x228>
 8003422:	2303      	movs	r3, #3
 8003424:	e004      	b.n	8003430 <HAL_GPIO_Init+0x228>
 8003426:	2302      	movs	r3, #2
 8003428:	e002      	b.n	8003430 <HAL_GPIO_Init+0x228>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <HAL_GPIO_Init+0x228>
 800342e:	2300      	movs	r3, #0
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	f002 0203 	and.w	r2, r2, #3
 8003436:	0092      	lsls	r2, r2, #2
 8003438:	4093      	lsls	r3, r2
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003440:	4935      	ldr	r1, [pc, #212]	; (8003518 <HAL_GPIO_Init+0x310>)
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	089b      	lsrs	r3, r3, #2
 8003446:	3302      	adds	r3, #2
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800344e:	4b3b      	ldr	r3, [pc, #236]	; (800353c <HAL_GPIO_Init+0x334>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	43db      	mvns	r3, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003472:	4a32      	ldr	r2, [pc, #200]	; (800353c <HAL_GPIO_Init+0x334>)
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003478:	4b30      	ldr	r3, [pc, #192]	; (800353c <HAL_GPIO_Init+0x334>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800349c:	4a27      	ldr	r2, [pc, #156]	; (800353c <HAL_GPIO_Init+0x334>)
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034a2:	4b26      	ldr	r3, [pc, #152]	; (800353c <HAL_GPIO_Init+0x334>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	43db      	mvns	r3, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4013      	ands	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034c6:	4a1d      	ldr	r2, [pc, #116]	; (800353c <HAL_GPIO_Init+0x334>)
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034cc:	4b1b      	ldr	r3, [pc, #108]	; (800353c <HAL_GPIO_Init+0x334>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034f0:	4a12      	ldr	r2, [pc, #72]	; (800353c <HAL_GPIO_Init+0x334>)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	3301      	adds	r3, #1
 80034fa:	61fb      	str	r3, [r7, #28]
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	2b0f      	cmp	r3, #15
 8003500:	f67f ae90 	bls.w	8003224 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop
 8003508:	3724      	adds	r7, #36	; 0x24
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40023800 	.word	0x40023800
 8003518:	40013800 	.word	0x40013800
 800351c:	40020000 	.word	0x40020000
 8003520:	40020400 	.word	0x40020400
 8003524:	40020800 	.word	0x40020800
 8003528:	40020c00 	.word	0x40020c00
 800352c:	40021000 	.word	0x40021000
 8003530:	40021400 	.word	0x40021400
 8003534:	40021800 	.word	0x40021800
 8003538:	40021c00 	.word	0x40021c00
 800353c:	40013c00 	.word	0x40013c00

08003540 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003542:	b08f      	sub	sp, #60	; 0x3c
 8003544:	af0a      	add	r7, sp, #40	; 0x28
 8003546:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e054      	b.n	80035fc <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d106      	bne.n	8003572 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f00a fc1b 	bl	800dda8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2203      	movs	r2, #3
 8003576:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003582:	2b00      	cmp	r3, #0
 8003584:	d102      	bne.n	800358c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f004 f98b 	bl	80078ac <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	687e      	ldr	r6, [r7, #4]
 800359e:	466d      	mov	r5, sp
 80035a0:	f106 0410 	add.w	r4, r6, #16
 80035a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80035b4:	1d33      	adds	r3, r6, #4
 80035b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035b8:	6838      	ldr	r0, [r7, #0]
 80035ba:	f004 f905 	bl	80077c8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2101      	movs	r1, #1
 80035c4:	4618      	mov	r0, r3
 80035c6:	f004 f982 	bl	80078ce <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	603b      	str	r3, [r7, #0]
 80035d0:	687e      	ldr	r6, [r7, #4]
 80035d2:	466d      	mov	r5, sp
 80035d4:	f106 0410 	add.w	r4, r6, #16
 80035d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80035e8:	1d33      	adds	r3, r6, #4
 80035ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035ec:	6838      	ldr	r0, [r7, #0]
 80035ee:	f004 fae9 	bl	8007bc4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003604 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003604:	b590      	push	{r4, r7, lr}
 8003606:	b089      	sub	sp, #36	; 0x24
 8003608:	af04      	add	r7, sp, #16
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	4608      	mov	r0, r1
 800360e:	4611      	mov	r1, r2
 8003610:	461a      	mov	r2, r3
 8003612:	4603      	mov	r3, r0
 8003614:	70fb      	strb	r3, [r7, #3]
 8003616:	460b      	mov	r3, r1
 8003618:	70bb      	strb	r3, [r7, #2]
 800361a:	4613      	mov	r3, r2
 800361c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_HCD_HC_Init+0x28>
 8003628:	2302      	movs	r3, #2
 800362a:	e076      	b.n	800371a <HAL_HCD_HC_Init+0x116>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	212c      	movs	r1, #44	; 0x2c
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	4413      	add	r3, r2
 8003640:	333d      	adds	r3, #61	; 0x3d
 8003642:	2200      	movs	r2, #0
 8003644:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003646:	78fb      	ldrb	r3, [r7, #3]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	212c      	movs	r1, #44	; 0x2c
 800364c:	fb01 f303 	mul.w	r3, r1, r3
 8003650:	4413      	add	r3, r2
 8003652:	3338      	adds	r3, #56	; 0x38
 8003654:	787a      	ldrb	r2, [r7, #1]
 8003656:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	212c      	movs	r1, #44	; 0x2c
 800365e:	fb01 f303 	mul.w	r3, r1, r3
 8003662:	4413      	add	r3, r2
 8003664:	3340      	adds	r3, #64	; 0x40
 8003666:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003668:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	212c      	movs	r1, #44	; 0x2c
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	4413      	add	r3, r2
 8003676:	3339      	adds	r3, #57	; 0x39
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	212c      	movs	r1, #44	; 0x2c
 8003682:	fb01 f303 	mul.w	r3, r1, r3
 8003686:	4413      	add	r3, r2
 8003688:	333f      	adds	r3, #63	; 0x3f
 800368a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800368e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	78ba      	ldrb	r2, [r7, #2]
 8003694:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003698:	b2d0      	uxtb	r0, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	212c      	movs	r1, #44	; 0x2c
 800369e:	fb01 f303 	mul.w	r3, r1, r3
 80036a2:	4413      	add	r3, r2
 80036a4:	333a      	adds	r3, #58	; 0x3a
 80036a6:	4602      	mov	r2, r0
 80036a8:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80036aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	da09      	bge.n	80036c6 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80036b2:	78fb      	ldrb	r3, [r7, #3]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	212c      	movs	r1, #44	; 0x2c
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	4413      	add	r3, r2
 80036be:	333b      	adds	r3, #59	; 0x3b
 80036c0:	2201      	movs	r2, #1
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	e008      	b.n	80036d8 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	212c      	movs	r1, #44	; 0x2c
 80036cc:	fb01 f303 	mul.w	r3, r1, r3
 80036d0:	4413      	add	r3, r2
 80036d2:	333b      	adds	r3, #59	; 0x3b
 80036d4:	2200      	movs	r2, #0
 80036d6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	212c      	movs	r1, #44	; 0x2c
 80036de:	fb01 f303 	mul.w	r3, r1, r3
 80036e2:	4413      	add	r3, r2
 80036e4:	333c      	adds	r3, #60	; 0x3c
 80036e6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80036ea:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6818      	ldr	r0, [r3, #0]
 80036f0:	787c      	ldrb	r4, [r7, #1]
 80036f2:	78ba      	ldrb	r2, [r7, #2]
 80036f4:	78f9      	ldrb	r1, [r7, #3]
 80036f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80036f8:	9302      	str	r3, [sp, #8]
 80036fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036fe:	9301      	str	r3, [sp, #4]
 8003700:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	4623      	mov	r3, r4
 8003708:	f004 fbd6 	bl	8007eb8 <USB_HC_Init>
 800370c:	4603      	mov	r3, r0
 800370e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003718:	7bfb      	ldrb	r3, [r7, #15]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	bd90      	pop	{r4, r7, pc}

08003722 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	460b      	mov	r3, r1
 800372c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_HCD_HC_Halt+0x1e>
 800373c:	2302      	movs	r3, #2
 800373e:	e00f      	b.n	8003760 <HAL_HCD_HC_Halt+0x3e>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f004 fe12 	bl	800837a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800375e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	4608      	mov	r0, r1
 8003772:	4611      	mov	r1, r2
 8003774:	461a      	mov	r2, r3
 8003776:	4603      	mov	r3, r0
 8003778:	70fb      	strb	r3, [r7, #3]
 800377a:	460b      	mov	r3, r1
 800377c:	70bb      	strb	r3, [r7, #2]
 800377e:	4613      	mov	r3, r2
 8003780:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003782:	78fb      	ldrb	r3, [r7, #3]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	212c      	movs	r1, #44	; 0x2c
 8003788:	fb01 f303 	mul.w	r3, r1, r3
 800378c:	4413      	add	r3, r2
 800378e:	333b      	adds	r3, #59	; 0x3b
 8003790:	78ba      	ldrb	r2, [r7, #2]
 8003792:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	212c      	movs	r1, #44	; 0x2c
 800379a:	fb01 f303 	mul.w	r3, r1, r3
 800379e:	4413      	add	r3, r2
 80037a0:	333f      	adds	r3, #63	; 0x3f
 80037a2:	787a      	ldrb	r2, [r7, #1]
 80037a4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80037a6:	7c3b      	ldrb	r3, [r7, #16]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d112      	bne.n	80037d2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	212c      	movs	r1, #44	; 0x2c
 80037b2:	fb01 f303 	mul.w	r3, r1, r3
 80037b6:	4413      	add	r3, r2
 80037b8:	3342      	adds	r3, #66	; 0x42
 80037ba:	2203      	movs	r2, #3
 80037bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80037be:	78fb      	ldrb	r3, [r7, #3]
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	212c      	movs	r1, #44	; 0x2c
 80037c4:	fb01 f303 	mul.w	r3, r1, r3
 80037c8:	4413      	add	r3, r2
 80037ca:	333d      	adds	r3, #61	; 0x3d
 80037cc:	7f3a      	ldrb	r2, [r7, #28]
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	e008      	b.n	80037e4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037d2:	78fb      	ldrb	r3, [r7, #3]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	212c      	movs	r1, #44	; 0x2c
 80037d8:	fb01 f303 	mul.w	r3, r1, r3
 80037dc:	4413      	add	r3, r2
 80037de:	3342      	adds	r3, #66	; 0x42
 80037e0:	2202      	movs	r2, #2
 80037e2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80037e4:	787b      	ldrb	r3, [r7, #1]
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	f200 80c6 	bhi.w	8003978 <HAL_HCD_HC_SubmitRequest+0x210>
 80037ec:	a201      	add	r2, pc, #4	; (adr r2, 80037f4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80037ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f2:	bf00      	nop
 80037f4:	08003805 	.word	0x08003805
 80037f8:	08003965 	.word	0x08003965
 80037fc:	08003869 	.word	0x08003869
 8003800:	080038e7 	.word	0x080038e7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003804:	7c3b      	ldrb	r3, [r7, #16]
 8003806:	2b01      	cmp	r3, #1
 8003808:	f040 80b8 	bne.w	800397c <HAL_HCD_HC_SubmitRequest+0x214>
 800380c:	78bb      	ldrb	r3, [r7, #2]
 800380e:	2b00      	cmp	r3, #0
 8003810:	f040 80b4 	bne.w	800397c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003814:	8b3b      	ldrh	r3, [r7, #24]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d108      	bne.n	800382c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	212c      	movs	r1, #44	; 0x2c
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	4413      	add	r3, r2
 8003826:	3355      	adds	r3, #85	; 0x55
 8003828:	2201      	movs	r2, #1
 800382a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	212c      	movs	r1, #44	; 0x2c
 8003832:	fb01 f303 	mul.w	r3, r1, r3
 8003836:	4413      	add	r3, r2
 8003838:	3355      	adds	r3, #85	; 0x55
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d109      	bne.n	8003854 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	212c      	movs	r1, #44	; 0x2c
 8003846:	fb01 f303 	mul.w	r3, r1, r3
 800384a:	4413      	add	r3, r2
 800384c:	3342      	adds	r3, #66	; 0x42
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003852:	e093      	b.n	800397c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	212c      	movs	r1, #44	; 0x2c
 800385a:	fb01 f303 	mul.w	r3, r1, r3
 800385e:	4413      	add	r3, r2
 8003860:	3342      	adds	r3, #66	; 0x42
 8003862:	2202      	movs	r2, #2
 8003864:	701a      	strb	r2, [r3, #0]
      break;
 8003866:	e089      	b.n	800397c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003868:	78bb      	ldrb	r3, [r7, #2]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d11d      	bne.n	80038aa <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	212c      	movs	r1, #44	; 0x2c
 8003874:	fb01 f303 	mul.w	r3, r1, r3
 8003878:	4413      	add	r3, r2
 800387a:	3355      	adds	r3, #85	; 0x55
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d109      	bne.n	8003896 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	212c      	movs	r1, #44	; 0x2c
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	4413      	add	r3, r2
 800388e:	3342      	adds	r3, #66	; 0x42
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003894:	e073      	b.n	800397e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	212c      	movs	r1, #44	; 0x2c
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	3342      	adds	r3, #66	; 0x42
 80038a4:	2202      	movs	r2, #2
 80038a6:	701a      	strb	r2, [r3, #0]
      break;
 80038a8:	e069      	b.n	800397e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	212c      	movs	r1, #44	; 0x2c
 80038b0:	fb01 f303 	mul.w	r3, r1, r3
 80038b4:	4413      	add	r3, r2
 80038b6:	3354      	adds	r3, #84	; 0x54
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038be:	78fb      	ldrb	r3, [r7, #3]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	212c      	movs	r1, #44	; 0x2c
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	4413      	add	r3, r2
 80038ca:	3342      	adds	r3, #66	; 0x42
 80038cc:	2200      	movs	r2, #0
 80038ce:	701a      	strb	r2, [r3, #0]
      break;
 80038d0:	e055      	b.n	800397e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038d2:	78fb      	ldrb	r3, [r7, #3]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	212c      	movs	r1, #44	; 0x2c
 80038d8:	fb01 f303 	mul.w	r3, r1, r3
 80038dc:	4413      	add	r3, r2
 80038de:	3342      	adds	r3, #66	; 0x42
 80038e0:	2202      	movs	r2, #2
 80038e2:	701a      	strb	r2, [r3, #0]
      break;
 80038e4:	e04b      	b.n	800397e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80038e6:	78bb      	ldrb	r3, [r7, #2]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d11d      	bne.n	8003928 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	212c      	movs	r1, #44	; 0x2c
 80038f2:	fb01 f303 	mul.w	r3, r1, r3
 80038f6:	4413      	add	r3, r2
 80038f8:	3355      	adds	r3, #85	; 0x55
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d109      	bne.n	8003914 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	212c      	movs	r1, #44	; 0x2c
 8003906:	fb01 f303 	mul.w	r3, r1, r3
 800390a:	4413      	add	r3, r2
 800390c:	3342      	adds	r3, #66	; 0x42
 800390e:	2200      	movs	r2, #0
 8003910:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003912:	e034      	b.n	800397e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	212c      	movs	r1, #44	; 0x2c
 800391a:	fb01 f303 	mul.w	r3, r1, r3
 800391e:	4413      	add	r3, r2
 8003920:	3342      	adds	r3, #66	; 0x42
 8003922:	2202      	movs	r2, #2
 8003924:	701a      	strb	r2, [r3, #0]
      break;
 8003926:	e02a      	b.n	800397e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	212c      	movs	r1, #44	; 0x2c
 800392e:	fb01 f303 	mul.w	r3, r1, r3
 8003932:	4413      	add	r3, r2
 8003934:	3354      	adds	r3, #84	; 0x54
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800393c:	78fb      	ldrb	r3, [r7, #3]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	212c      	movs	r1, #44	; 0x2c
 8003942:	fb01 f303 	mul.w	r3, r1, r3
 8003946:	4413      	add	r3, r2
 8003948:	3342      	adds	r3, #66	; 0x42
 800394a:	2200      	movs	r2, #0
 800394c:	701a      	strb	r2, [r3, #0]
      break;
 800394e:	e016      	b.n	800397e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	212c      	movs	r1, #44	; 0x2c
 8003956:	fb01 f303 	mul.w	r3, r1, r3
 800395a:	4413      	add	r3, r2
 800395c:	3342      	adds	r3, #66	; 0x42
 800395e:	2202      	movs	r2, #2
 8003960:	701a      	strb	r2, [r3, #0]
      break;
 8003962:	e00c      	b.n	800397e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	212c      	movs	r1, #44	; 0x2c
 800396a:	fb01 f303 	mul.w	r3, r1, r3
 800396e:	4413      	add	r3, r2
 8003970:	3342      	adds	r3, #66	; 0x42
 8003972:	2200      	movs	r2, #0
 8003974:	701a      	strb	r2, [r3, #0]
      break;
 8003976:	e002      	b.n	800397e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003978:	bf00      	nop
 800397a:	e000      	b.n	800397e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800397c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800397e:	78fb      	ldrb	r3, [r7, #3]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	212c      	movs	r1, #44	; 0x2c
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	4413      	add	r3, r2
 800398a:	3344      	adds	r3, #68	; 0x44
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	8b3a      	ldrh	r2, [r7, #24]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	202c      	movs	r0, #44	; 0x2c
 8003998:	fb00 f303 	mul.w	r3, r0, r3
 800399c:	440b      	add	r3, r1
 800399e:	334c      	adds	r3, #76	; 0x4c
 80039a0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80039a2:	78fb      	ldrb	r3, [r7, #3]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	212c      	movs	r1, #44	; 0x2c
 80039a8:	fb01 f303 	mul.w	r3, r1, r3
 80039ac:	4413      	add	r3, r2
 80039ae:	3360      	adds	r3, #96	; 0x60
 80039b0:	2200      	movs	r2, #0
 80039b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	212c      	movs	r1, #44	; 0x2c
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	4413      	add	r3, r2
 80039c0:	3350      	adds	r3, #80	; 0x50
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80039c6:	78fb      	ldrb	r3, [r7, #3]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	212c      	movs	r1, #44	; 0x2c
 80039cc:	fb01 f303 	mul.w	r3, r1, r3
 80039d0:	4413      	add	r3, r2
 80039d2:	3339      	adds	r3, #57	; 0x39
 80039d4:	78fa      	ldrb	r2, [r7, #3]
 80039d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80039d8:	78fb      	ldrb	r3, [r7, #3]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	212c      	movs	r1, #44	; 0x2c
 80039de:	fb01 f303 	mul.w	r3, r1, r3
 80039e2:	4413      	add	r3, r2
 80039e4:	3361      	adds	r3, #97	; 0x61
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	222c      	movs	r2, #44	; 0x2c
 80039f2:	fb02 f303 	mul.w	r3, r2, r3
 80039f6:	3338      	adds	r3, #56	; 0x38
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	18d1      	adds	r1, r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	461a      	mov	r2, r3
 8003a04:	f004 fb66 	bl	80080d4 <USB_HC_StartXfer>
 8003a08:	4603      	mov	r3, r0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop

08003a14 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f004 f889 	bl	8007b42 <USB_GetMode>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	f040 80f6 	bne.w	8003c24 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f004 f86d 	bl	8007b1c <USB_ReadInterrupts>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 80ec 	beq.w	8003c22 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f004 f864 	bl	8007b1c <USB_ReadInterrupts>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a5e:	d104      	bne.n	8003a6a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003a68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f004 f854 	bl	8007b1c <USB_ReadInterrupts>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a7e:	d104      	bne.n	8003a8a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f004 f844 	bl	8007b1c <USB_ReadInterrupts>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a9e:	d104      	bne.n	8003aaa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003aa8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f004 f834 	bl	8007b1c <USB_ReadInterrupts>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d103      	bne.n	8003ac6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f004 f826 	bl	8007b1c <USB_ReadInterrupts>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ad6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ada:	d11c      	bne.n	8003b16 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003ae4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10f      	bne.n	8003b16 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003af6:	2110      	movs	r1, #16
 8003af8:	6938      	ldr	r0, [r7, #16]
 8003afa:	f003 ff35 	bl	8007968 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003afe:	6938      	ldr	r0, [r7, #16]
 8003b00:	f003 ff56 	bl	80079b0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2101      	movs	r1, #1
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f004 f90e 	bl	8007d2c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f00a f9c7 	bl	800dea4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f003 fffe 	bl	8007b1c <USB_ReadInterrupts>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b2a:	d102      	bne.n	8003b32 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f001 fa03 	bl	8004f38 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f003 fff0 	bl	8007b1c <USB_ReadInterrupts>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d106      	bne.n	8003b54 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f00a f990 	bl	800de6c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2208      	movs	r2, #8
 8003b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f003 ffdf 	bl	8007b1c <USB_ReadInterrupts>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f003 0310 	and.w	r3, r3, #16
 8003b64:	2b10      	cmp	r3, #16
 8003b66:	d101      	bne.n	8003b6c <HAL_HCD_IRQHandler+0x158>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e000      	b.n	8003b6e <HAL_HCD_IRQHandler+0x15a>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d012      	beq.n	8003b98 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699a      	ldr	r2, [r3, #24]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0210 	bic.w	r2, r2, #16
 8003b80:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f001 f906 	bl	8004d94 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0210 	orr.w	r2, r2, #16
 8003b96:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f003 ffbd 	bl	8007b1c <USB_ReadInterrupts>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bac:	d13a      	bne.n	8003c24 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f004 fbd0 	bl	8008358 <USB_HC_ReadInterrupt>
 8003bb8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	e025      	b.n	8003c0c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d018      	beq.n	8003c06 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bea:	d106      	bne.n	8003bfa <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f8ab 	bl	8003d4e <HCD_HC_IN_IRQHandler>
 8003bf8:	e005      	b.n	8003c06 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	4619      	mov	r1, r3
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 fcc6 	bl	8004592 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d3d4      	bcc.n	8003bc0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c1e:	615a      	str	r2, [r3, #20]
 8003c20:	e000      	b.n	8003c24 <HAL_HCD_IRQHandler+0x210>
      return;
 8003c22:	bf00      	nop
    }
  }
}
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b082      	sub	sp, #8
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_HCD_Start+0x16>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e013      	b.n	8003c68 <HAL_HCD_Start+0x3e>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f004 f8d0 	bl	8007df4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f003 fe16 	bl	800788a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_HCD_Stop+0x16>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e00d      	b.n	8003ca2 <HAL_HCD_Stop+0x32>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f004 fcca 	bl	800862c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f004 f872 	bl	8007da0 <USB_ResetPort>
 8003cbc:	4603      	mov	r3, r0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003cd2:	78fb      	ldrb	r3, [r7, #3]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	212c      	movs	r1, #44	; 0x2c
 8003cd8:	fb01 f303 	mul.w	r3, r1, r3
 8003cdc:	4413      	add	r3, r2
 8003cde:	3360      	adds	r3, #96	; 0x60
 8003ce0:	781b      	ldrb	r3, [r3, #0]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	212c      	movs	r1, #44	; 0x2c
 8003d00:	fb01 f303 	mul.w	r3, r1, r3
 8003d04:	4413      	add	r3, r2
 8003d06:	3350      	adds	r3, #80	; 0x50
 8003d08:	681b      	ldr	r3, [r3, #0]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f004 f8b6 	bl	8007e94 <USB_GetCurrentFrame>
 8003d28:	4603      	mov	r3, r0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f004 f891 	bl	8007e66 <USB_GetHostSpeed>
 8003d44:	4603      	mov	r3, r0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b086      	sub	sp, #24
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	460b      	mov	r3, r1
 8003d58:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d119      	bne.n	8003db2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	2304      	movs	r3, #4
 8003d8e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	0151      	lsls	r1, r2, #5
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	440a      	add	r2, r1
 8003da6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003daa:	f043 0302 	orr.w	r3, r3, #2
 8003dae:	60d3      	str	r3, [r2, #12]
 8003db0:	e101      	b.n	8003fb6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dc8:	d12b      	bne.n	8003e22 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ddc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	212c      	movs	r1, #44	; 0x2c
 8003de4:	fb01 f303 	mul.w	r3, r1, r3
 8003de8:	4413      	add	r3, r2
 8003dea:	3361      	adds	r3, #97	; 0x61
 8003dec:	2207      	movs	r2, #7
 8003dee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	0151      	lsls	r1, r2, #5
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	440a      	add	r2, r1
 8003e06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e0a:	f043 0302 	orr.w	r3, r3, #2
 8003e0e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	4611      	mov	r1, r2
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f004 faad 	bl	800837a <USB_HC_Halt>
 8003e20:	e0c9      	b.n	8003fb6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d109      	bne.n	8003e4c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e44:	461a      	mov	r2, r3
 8003e46:	2320      	movs	r3, #32
 8003e48:	6093      	str	r3, [r2, #8]
 8003e4a:	e0b4      	b.n	8003fb6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	d133      	bne.n	8003eca <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	0151      	lsls	r1, r2, #5
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	440a      	add	r2, r1
 8003e78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e7c:	f043 0302 	orr.w	r3, r3, #2
 8003e80:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	212c      	movs	r1, #44	; 0x2c
 8003e88:	fb01 f303 	mul.w	r3, r1, r3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	3361      	adds	r3, #97	; 0x61
 8003e90:	2205      	movs	r2, #5
 8003e92:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2310      	movs	r3, #16
 8003ea4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	2308      	movs	r3, #8
 8003eb6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	4611      	mov	r1, r2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f004 fa59 	bl	800837a <USB_HC_Halt>
 8003ec8:	e075      	b.n	8003fb6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee0:	d134      	bne.n	8003f4c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	0151      	lsls	r1, r2, #5
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	440a      	add	r2, r1
 8003ef8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003efc:	f043 0302 	orr.w	r3, r3, #2
 8003f00:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	212c      	movs	r1, #44	; 0x2c
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	3361      	adds	r3, #97	; 0x61
 8003f10:	2208      	movs	r2, #8
 8003f12:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f20:	461a      	mov	r2, r3
 8003f22:	2310      	movs	r3, #16
 8003f24:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f32:	461a      	mov	r2, r3
 8003f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f38:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	4611      	mov	r1, r2
 8003f44:	4618      	mov	r0, r3
 8003f46:	f004 fa18 	bl	800837a <USB_HC_Halt>
 8003f4a:	e034      	b.n	8003fb6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5e:	2b80      	cmp	r3, #128	; 0x80
 8003f60:	d129      	bne.n	8003fb6 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	0151      	lsls	r1, r2, #5
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	440a      	add	r2, r1
 8003f78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f7c:	f043 0302 	orr.w	r3, r3, #2
 8003f80:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	212c      	movs	r1, #44	; 0x2c
 8003f88:	fb01 f303 	mul.w	r3, r1, r3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	3361      	adds	r3, #97	; 0x61
 8003f90:	2206      	movs	r2, #6
 8003f92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	4611      	mov	r1, r2
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f004 f9eb 	bl	800837a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2380      	movs	r3, #128	; 0x80
 8003fb4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fcc:	d122      	bne.n	8004014 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	0151      	lsls	r1, r2, #5
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	440a      	add	r2, r1
 8003fe4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fe8:	f043 0302 	orr.w	r3, r3, #2
 8003fec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f004 f9be 	bl	800837a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4413      	add	r3, r2
 8004006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400a:	461a      	mov	r2, r3
 800400c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004010:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004012:	e2ba      	b.n	800458a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	4413      	add	r3, r2
 800401c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b01      	cmp	r3, #1
 8004028:	f040 811b 	bne.w	8004262 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d019      	beq.n	8004068 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	212c      	movs	r1, #44	; 0x2c
 800403a:	fb01 f303 	mul.w	r3, r1, r3
 800403e:	4413      	add	r3, r2
 8004040:	3348      	adds	r3, #72	; 0x48
 8004042:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	0159      	lsls	r1, r3, #5
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	440b      	add	r3, r1
 800404c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004056:	1ad2      	subs	r2, r2, r3
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	202c      	movs	r0, #44	; 0x2c
 800405e:	fb00 f303 	mul.w	r3, r0, r3
 8004062:	440b      	add	r3, r1
 8004064:	3350      	adds	r3, #80	; 0x50
 8004066:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	212c      	movs	r1, #44	; 0x2c
 800406e:	fb01 f303 	mul.w	r3, r1, r3
 8004072:	4413      	add	r3, r2
 8004074:	3361      	adds	r3, #97	; 0x61
 8004076:	2201      	movs	r2, #1
 8004078:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	212c      	movs	r1, #44	; 0x2c
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	4413      	add	r3, r2
 8004086:	335c      	adds	r3, #92	; 0x5c
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	4413      	add	r3, r2
 8004094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004098:	461a      	mov	r2, r3
 800409a:	2301      	movs	r3, #1
 800409c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	212c      	movs	r1, #44	; 0x2c
 80040a4:	fb01 f303 	mul.w	r3, r1, r3
 80040a8:	4413      	add	r3, r2
 80040aa:	333f      	adds	r3, #63	; 0x3f
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d009      	beq.n	80040c6 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	212c      	movs	r1, #44	; 0x2c
 80040b8:	fb01 f303 	mul.w	r3, r1, r3
 80040bc:	4413      	add	r3, r2
 80040be:	333f      	adds	r3, #63	; 0x3f
 80040c0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d121      	bne.n	800410a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	0151      	lsls	r1, r2, #5
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	440a      	add	r2, r1
 80040dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040e0:	f043 0302 	orr.w	r3, r3, #2
 80040e4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	4611      	mov	r1, r2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f004 f942 	bl	800837a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004102:	461a      	mov	r2, r3
 8004104:	2310      	movs	r3, #16
 8004106:	6093      	str	r3, [r2, #8]
 8004108:	e066      	b.n	80041d8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	212c      	movs	r1, #44	; 0x2c
 8004110:	fb01 f303 	mul.w	r3, r1, r3
 8004114:	4413      	add	r3, r2
 8004116:	333f      	adds	r3, #63	; 0x3f
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b03      	cmp	r3, #3
 800411c:	d127      	bne.n	800416e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4413      	add	r3, r2
 8004126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	0151      	lsls	r1, r2, #5
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	440a      	add	r2, r1
 8004134:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004138:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800413c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	212c      	movs	r1, #44	; 0x2c
 8004144:	fb01 f303 	mul.w	r3, r1, r3
 8004148:	4413      	add	r3, r2
 800414a:	3360      	adds	r3, #96	; 0x60
 800414c:	2201      	movs	r2, #1
 800414e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	b2d9      	uxtb	r1, r3
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	202c      	movs	r0, #44	; 0x2c
 800415a:	fb00 f303 	mul.w	r3, r0, r3
 800415e:	4413      	add	r3, r2
 8004160:	3360      	adds	r3, #96	; 0x60
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	461a      	mov	r2, r3
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f009 feaa 	bl	800dec0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800416c:	e034      	b.n	80041d8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	212c      	movs	r1, #44	; 0x2c
 8004174:	fb01 f303 	mul.w	r3, r1, r3
 8004178:	4413      	add	r3, r2
 800417a:	333f      	adds	r3, #63	; 0x3f
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d12a      	bne.n	80041d8 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	212c      	movs	r1, #44	; 0x2c
 8004188:	fb01 f303 	mul.w	r3, r1, r3
 800418c:	4413      	add	r3, r2
 800418e:	3360      	adds	r3, #96	; 0x60
 8004190:	2201      	movs	r2, #1
 8004192:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	212c      	movs	r1, #44	; 0x2c
 800419a:	fb01 f303 	mul.w	r3, r1, r3
 800419e:	4413      	add	r3, r2
 80041a0:	3354      	adds	r3, #84	; 0x54
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	f083 0301 	eor.w	r3, r3, #1
 80041a8:	b2d8      	uxtb	r0, r3
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	212c      	movs	r1, #44	; 0x2c
 80041b0:	fb01 f303 	mul.w	r3, r1, r3
 80041b4:	4413      	add	r3, r2
 80041b6:	3354      	adds	r3, #84	; 0x54
 80041b8:	4602      	mov	r2, r0
 80041ba:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	b2d9      	uxtb	r1, r3
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	202c      	movs	r0, #44	; 0x2c
 80041c6:	fb00 f303 	mul.w	r3, r0, r3
 80041ca:	4413      	add	r3, r2
 80041cc:	3360      	adds	r3, #96	; 0x60
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	461a      	mov	r2, r3
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f009 fe74 	bl	800dec0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d12b      	bne.n	8004238 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	212c      	movs	r1, #44	; 0x2c
 80041e6:	fb01 f303 	mul.w	r3, r1, r3
 80041ea:	4413      	add	r3, r2
 80041ec:	3348      	adds	r3, #72	; 0x48
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	202c      	movs	r0, #44	; 0x2c
 80041f6:	fb00 f202 	mul.w	r2, r0, r2
 80041fa:	440a      	add	r2, r1
 80041fc:	3240      	adds	r2, #64	; 0x40
 80041fe:	8812      	ldrh	r2, [r2, #0]
 8004200:	fbb3 f3f2 	udiv	r3, r3, r2
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 81be 	beq.w	800458a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	212c      	movs	r1, #44	; 0x2c
 8004214:	fb01 f303 	mul.w	r3, r1, r3
 8004218:	4413      	add	r3, r2
 800421a:	3354      	adds	r3, #84	; 0x54
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	f083 0301 	eor.w	r3, r3, #1
 8004222:	b2d8      	uxtb	r0, r3
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	212c      	movs	r1, #44	; 0x2c
 800422a:	fb01 f303 	mul.w	r3, r1, r3
 800422e:	4413      	add	r3, r2
 8004230:	3354      	adds	r3, #84	; 0x54
 8004232:	4602      	mov	r2, r0
 8004234:	701a      	strb	r2, [r3, #0]
}
 8004236:	e1a8      	b.n	800458a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	212c      	movs	r1, #44	; 0x2c
 800423e:	fb01 f303 	mul.w	r3, r1, r3
 8004242:	4413      	add	r3, r2
 8004244:	3354      	adds	r3, #84	; 0x54
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	f083 0301 	eor.w	r3, r3, #1
 800424c:	b2d8      	uxtb	r0, r3
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	212c      	movs	r1, #44	; 0x2c
 8004254:	fb01 f303 	mul.w	r3, r1, r3
 8004258:	4413      	add	r3, r2
 800425a:	3354      	adds	r3, #84	; 0x54
 800425c:	4602      	mov	r2, r0
 800425e:	701a      	strb	r2, [r3, #0]
}
 8004260:	e193      	b.n	800458a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4413      	add	r3, r2
 800426a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b02      	cmp	r3, #2
 8004276:	f040 8106 	bne.w	8004486 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	4413      	add	r3, r2
 8004282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	0151      	lsls	r1, r2, #5
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	440a      	add	r2, r1
 8004290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004294:	f023 0302 	bic.w	r3, r3, #2
 8004298:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	212c      	movs	r1, #44	; 0x2c
 80042a0:	fb01 f303 	mul.w	r3, r1, r3
 80042a4:	4413      	add	r3, r2
 80042a6:	3361      	adds	r3, #97	; 0x61
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d109      	bne.n	80042c2 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	212c      	movs	r1, #44	; 0x2c
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	4413      	add	r3, r2
 80042ba:	3360      	adds	r3, #96	; 0x60
 80042bc:	2201      	movs	r2, #1
 80042be:	701a      	strb	r2, [r3, #0]
 80042c0:	e0c9      	b.n	8004456 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	212c      	movs	r1, #44	; 0x2c
 80042c8:	fb01 f303 	mul.w	r3, r1, r3
 80042cc:	4413      	add	r3, r2
 80042ce:	3361      	adds	r3, #97	; 0x61
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b05      	cmp	r3, #5
 80042d4:	d109      	bne.n	80042ea <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	212c      	movs	r1, #44	; 0x2c
 80042dc:	fb01 f303 	mul.w	r3, r1, r3
 80042e0:	4413      	add	r3, r2
 80042e2:	3360      	adds	r3, #96	; 0x60
 80042e4:	2205      	movs	r2, #5
 80042e6:	701a      	strb	r2, [r3, #0]
 80042e8:	e0b5      	b.n	8004456 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	212c      	movs	r1, #44	; 0x2c
 80042f0:	fb01 f303 	mul.w	r3, r1, r3
 80042f4:	4413      	add	r3, r2
 80042f6:	3361      	adds	r3, #97	; 0x61
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b06      	cmp	r3, #6
 80042fc:	d009      	beq.n	8004312 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	212c      	movs	r1, #44	; 0x2c
 8004304:	fb01 f303 	mul.w	r3, r1, r3
 8004308:	4413      	add	r3, r2
 800430a:	3361      	adds	r3, #97	; 0x61
 800430c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800430e:	2b08      	cmp	r3, #8
 8004310:	d150      	bne.n	80043b4 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	212c      	movs	r1, #44	; 0x2c
 8004318:	fb01 f303 	mul.w	r3, r1, r3
 800431c:	4413      	add	r3, r2
 800431e:	335c      	adds	r3, #92	; 0x5c
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	202c      	movs	r0, #44	; 0x2c
 800432a:	fb00 f303 	mul.w	r3, r0, r3
 800432e:	440b      	add	r3, r1
 8004330:	335c      	adds	r3, #92	; 0x5c
 8004332:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	212c      	movs	r1, #44	; 0x2c
 800433a:	fb01 f303 	mul.w	r3, r1, r3
 800433e:	4413      	add	r3, r2
 8004340:	335c      	adds	r3, #92	; 0x5c
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b02      	cmp	r3, #2
 8004346:	d912      	bls.n	800436e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	212c      	movs	r1, #44	; 0x2c
 800434e:	fb01 f303 	mul.w	r3, r1, r3
 8004352:	4413      	add	r3, r2
 8004354:	335c      	adds	r3, #92	; 0x5c
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	212c      	movs	r1, #44	; 0x2c
 8004360:	fb01 f303 	mul.w	r3, r1, r3
 8004364:	4413      	add	r3, r2
 8004366:	3360      	adds	r3, #96	; 0x60
 8004368:	2204      	movs	r2, #4
 800436a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800436c:	e073      	b.n	8004456 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	212c      	movs	r1, #44	; 0x2c
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	4413      	add	r3, r2
 800437a:	3360      	adds	r3, #96	; 0x60
 800437c:	2202      	movs	r2, #2
 800437e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	4413      	add	r3, r2
 8004388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004396:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800439e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ac:	461a      	mov	r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80043b2:	e050      	b.n	8004456 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	212c      	movs	r1, #44	; 0x2c
 80043ba:	fb01 f303 	mul.w	r3, r1, r3
 80043be:	4413      	add	r3, r2
 80043c0:	3361      	adds	r3, #97	; 0x61
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d122      	bne.n	800440e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	212c      	movs	r1, #44	; 0x2c
 80043ce:	fb01 f303 	mul.w	r3, r1, r3
 80043d2:	4413      	add	r3, r2
 80043d4:	3360      	adds	r3, #96	; 0x60
 80043d6:	2202      	movs	r2, #2
 80043d8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043f0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043f8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4413      	add	r3, r2
 8004402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004406:	461a      	mov	r2, r3
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	e023      	b.n	8004456 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	212c      	movs	r1, #44	; 0x2c
 8004414:	fb01 f303 	mul.w	r3, r1, r3
 8004418:	4413      	add	r3, r2
 800441a:	3361      	adds	r3, #97	; 0x61
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b07      	cmp	r3, #7
 8004420:	d119      	bne.n	8004456 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	212c      	movs	r1, #44	; 0x2c
 8004428:	fb01 f303 	mul.w	r3, r1, r3
 800442c:	4413      	add	r3, r2
 800442e:	335c      	adds	r3, #92	; 0x5c
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	202c      	movs	r0, #44	; 0x2c
 800443a:	fb00 f303 	mul.w	r3, r0, r3
 800443e:	440b      	add	r3, r1
 8004440:	335c      	adds	r3, #92	; 0x5c
 8004442:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	212c      	movs	r1, #44	; 0x2c
 800444a:	fb01 f303 	mul.w	r3, r1, r3
 800444e:	4413      	add	r3, r2
 8004450:	3360      	adds	r3, #96	; 0x60
 8004452:	2204      	movs	r2, #4
 8004454:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	4413      	add	r3, r2
 800445e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004462:	461a      	mov	r2, r3
 8004464:	2302      	movs	r3, #2
 8004466:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	b2d9      	uxtb	r1, r3
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	202c      	movs	r0, #44	; 0x2c
 8004472:	fb00 f303 	mul.w	r3, r0, r3
 8004476:	4413      	add	r3, r2
 8004478:	3360      	adds	r3, #96	; 0x60
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f009 fd1e 	bl	800dec0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004484:	e081      	b.n	800458a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	4413      	add	r3, r2
 800448e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 0310 	and.w	r3, r3, #16
 8004498:	2b10      	cmp	r3, #16
 800449a:	d176      	bne.n	800458a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	212c      	movs	r1, #44	; 0x2c
 80044a2:	fb01 f303 	mul.w	r3, r1, r3
 80044a6:	4413      	add	r3, r2
 80044a8:	333f      	adds	r3, #63	; 0x3f
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b03      	cmp	r3, #3
 80044ae:	d121      	bne.n	80044f4 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	212c      	movs	r1, #44	; 0x2c
 80044b6:	fb01 f303 	mul.w	r3, r1, r3
 80044ba:	4413      	add	r3, r2
 80044bc:	335c      	adds	r3, #92	; 0x5c
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	0151      	lsls	r1, r2, #5
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	440a      	add	r2, r1
 80044d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044dc:	f043 0302 	orr.w	r3, r3, #2
 80044e0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	b2d2      	uxtb	r2, r2
 80044ea:	4611      	mov	r1, r2
 80044ec:	4618      	mov	r0, r3
 80044ee:	f003 ff44 	bl	800837a <USB_HC_Halt>
 80044f2:	e041      	b.n	8004578 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	212c      	movs	r1, #44	; 0x2c
 80044fa:	fb01 f303 	mul.w	r3, r1, r3
 80044fe:	4413      	add	r3, r2
 8004500:	333f      	adds	r3, #63	; 0x3f
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d009      	beq.n	800451c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	212c      	movs	r1, #44	; 0x2c
 800450e:	fb01 f303 	mul.w	r3, r1, r3
 8004512:	4413      	add	r3, r2
 8004514:	333f      	adds	r3, #63	; 0x3f
 8004516:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004518:	2b02      	cmp	r3, #2
 800451a:	d12d      	bne.n	8004578 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	212c      	movs	r1, #44	; 0x2c
 8004522:	fb01 f303 	mul.w	r3, r1, r3
 8004526:	4413      	add	r3, r2
 8004528:	335c      	adds	r3, #92	; 0x5c
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d120      	bne.n	8004578 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	212c      	movs	r1, #44	; 0x2c
 800453c:	fb01 f303 	mul.w	r3, r1, r3
 8004540:	4413      	add	r3, r2
 8004542:	3361      	adds	r3, #97	; 0x61
 8004544:	2203      	movs	r2, #3
 8004546:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4413      	add	r3, r2
 8004550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	0151      	lsls	r1, r2, #5
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	440a      	add	r2, r1
 800455e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004562:	f043 0302 	orr.w	r3, r3, #2
 8004566:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	4611      	mov	r1, r2
 8004572:	4618      	mov	r0, r3
 8004574:	f003 ff01 	bl	800837a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	4413      	add	r3, r2
 8004580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004584:	461a      	mov	r2, r3
 8004586:	2310      	movs	r3, #16
 8004588:	6093      	str	r3, [r2, #8]
}
 800458a:	bf00      	nop
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b088      	sub	sp, #32
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	460b      	mov	r3, r1
 800459c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80045a8:	78fb      	ldrb	r3, [r7, #3]
 80045aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d119      	bne.n	80045f6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ce:	461a      	mov	r2, r3
 80045d0:	2304      	movs	r3, #4
 80045d2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	0151      	lsls	r1, r2, #5
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	440a      	add	r2, r1
 80045ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045ee:	f043 0302 	orr.w	r3, r3, #2
 80045f2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80045f4:	e3ca      	b.n	8004d8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b20      	cmp	r3, #32
 800460a:	d13e      	bne.n	800468a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	4413      	add	r3, r2
 8004614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004618:	461a      	mov	r2, r3
 800461a:	2320      	movs	r3, #32
 800461c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	212c      	movs	r1, #44	; 0x2c
 8004624:	fb01 f303 	mul.w	r3, r1, r3
 8004628:	4413      	add	r3, r2
 800462a:	333d      	adds	r3, #61	; 0x3d
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b01      	cmp	r3, #1
 8004630:	f040 83ac 	bne.w	8004d8c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	212c      	movs	r1, #44	; 0x2c
 800463a:	fb01 f303 	mul.w	r3, r1, r3
 800463e:	4413      	add	r3, r2
 8004640:	333d      	adds	r3, #61	; 0x3d
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	212c      	movs	r1, #44	; 0x2c
 800464c:	fb01 f303 	mul.w	r3, r1, r3
 8004650:	4413      	add	r3, r2
 8004652:	3360      	adds	r3, #96	; 0x60
 8004654:	2202      	movs	r2, #2
 8004656:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	4413      	add	r3, r2
 8004660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	0151      	lsls	r1, r2, #5
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	440a      	add	r2, r1
 800466e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004672:	f043 0302 	orr.w	r3, r3, #2
 8004676:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	4611      	mov	r1, r2
 8004682:	4618      	mov	r0, r3
 8004684:	f003 fe79 	bl	800837a <USB_HC_Halt>
}
 8004688:	e380      	b.n	8004d8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	4413      	add	r3, r2
 8004692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800469c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a0:	d122      	bne.n	80046e8 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	0151      	lsls	r1, r2, #5
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	440a      	add	r2, r1
 80046b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046bc:	f043 0302 	orr.w	r3, r3, #2
 80046c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	4611      	mov	r1, r2
 80046cc:	4618      	mov	r0, r3
 80046ce:	f003 fe54 	bl	800837a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046de:	461a      	mov	r2, r3
 80046e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046e4:	6093      	str	r3, [r2, #8]
}
 80046e6:	e351      	b.n	8004d8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d150      	bne.n	80047a0 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	212c      	movs	r1, #44	; 0x2c
 8004704:	fb01 f303 	mul.w	r3, r1, r3
 8004708:	4413      	add	r3, r2
 800470a:	335c      	adds	r3, #92	; 0x5c
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	4413      	add	r3, r2
 8004718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b40      	cmp	r3, #64	; 0x40
 8004724:	d111      	bne.n	800474a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	212c      	movs	r1, #44	; 0x2c
 800472c:	fb01 f303 	mul.w	r3, r1, r3
 8004730:	4413      	add	r3, r2
 8004732:	333d      	adds	r3, #61	; 0x3d
 8004734:	2201      	movs	r2, #1
 8004736:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	4413      	add	r3, r2
 8004740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004744:	461a      	mov	r2, r3
 8004746:	2340      	movs	r3, #64	; 0x40
 8004748:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	4413      	add	r3, r2
 8004752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	0151      	lsls	r1, r2, #5
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	440a      	add	r2, r1
 8004760:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004764:	f043 0302 	orr.w	r3, r3, #2
 8004768:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	4611      	mov	r1, r2
 8004774:	4618      	mov	r0, r3
 8004776:	f003 fe00 	bl	800837a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	4413      	add	r3, r2
 8004782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004786:	461a      	mov	r2, r3
 8004788:	2301      	movs	r3, #1
 800478a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	212c      	movs	r1, #44	; 0x2c
 8004792:	fb01 f303 	mul.w	r3, r1, r3
 8004796:	4413      	add	r3, r2
 8004798:	3361      	adds	r3, #97	; 0x61
 800479a:	2201      	movs	r2, #1
 800479c:	701a      	strb	r2, [r3, #0]
}
 800479e:	e2f5      	b.n	8004d8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b2:	2b40      	cmp	r3, #64	; 0x40
 80047b4:	d13c      	bne.n	8004830 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	212c      	movs	r1, #44	; 0x2c
 80047bc:	fb01 f303 	mul.w	r3, r1, r3
 80047c0:	4413      	add	r3, r2
 80047c2:	3361      	adds	r3, #97	; 0x61
 80047c4:	2204      	movs	r2, #4
 80047c6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	212c      	movs	r1, #44	; 0x2c
 80047ce:	fb01 f303 	mul.w	r3, r1, r3
 80047d2:	4413      	add	r3, r2
 80047d4:	333d      	adds	r3, #61	; 0x3d
 80047d6:	2201      	movs	r2, #1
 80047d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	212c      	movs	r1, #44	; 0x2c
 80047e0:	fb01 f303 	mul.w	r3, r1, r3
 80047e4:	4413      	add	r3, r2
 80047e6:	335c      	adds	r3, #92	; 0x5c
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	0151      	lsls	r1, r2, #5
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	440a      	add	r2, r1
 8004802:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004806:	f043 0302 	orr.w	r3, r3, #2
 800480a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	4611      	mov	r1, r2
 8004816:	4618      	mov	r0, r3
 8004818:	f003 fdaf 	bl	800837a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	4413      	add	r3, r2
 8004824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004828:	461a      	mov	r2, r3
 800482a:	2340      	movs	r3, #64	; 0x40
 800482c:	6093      	str	r3, [r2, #8]
}
 800482e:	e2ad      	b.n	8004d8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	4413      	add	r3, r2
 8004838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b08      	cmp	r3, #8
 8004844:	d12a      	bne.n	800489c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	4413      	add	r3, r2
 800484e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004852:	461a      	mov	r2, r3
 8004854:	2308      	movs	r3, #8
 8004856:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	4413      	add	r3, r2
 8004860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	0151      	lsls	r1, r2, #5
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	440a      	add	r2, r1
 800486e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004872:	f043 0302 	orr.w	r3, r3, #2
 8004876:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	4611      	mov	r1, r2
 8004882:	4618      	mov	r0, r3
 8004884:	f003 fd79 	bl	800837a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	212c      	movs	r1, #44	; 0x2c
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	4413      	add	r3, r2
 8004894:	3361      	adds	r3, #97	; 0x61
 8004896:	2205      	movs	r2, #5
 8004898:	701a      	strb	r2, [r3, #0]
}
 800489a:	e277      	b.n	8004d8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 0310 	and.w	r3, r3, #16
 80048ae:	2b10      	cmp	r3, #16
 80048b0:	d150      	bne.n	8004954 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	212c      	movs	r1, #44	; 0x2c
 80048b8:	fb01 f303 	mul.w	r3, r1, r3
 80048bc:	4413      	add	r3, r2
 80048be:	335c      	adds	r3, #92	; 0x5c
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	212c      	movs	r1, #44	; 0x2c
 80048ca:	fb01 f303 	mul.w	r3, r1, r3
 80048ce:	4413      	add	r3, r2
 80048d0:	3361      	adds	r3, #97	; 0x61
 80048d2:	2203      	movs	r2, #3
 80048d4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	212c      	movs	r1, #44	; 0x2c
 80048dc:	fb01 f303 	mul.w	r3, r1, r3
 80048e0:	4413      	add	r3, r2
 80048e2:	333d      	adds	r3, #61	; 0x3d
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d112      	bne.n	8004910 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	212c      	movs	r1, #44	; 0x2c
 80048f0:	fb01 f303 	mul.w	r3, r1, r3
 80048f4:	4413      	add	r3, r2
 80048f6:	333c      	adds	r3, #60	; 0x3c
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d108      	bne.n	8004910 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	212c      	movs	r1, #44	; 0x2c
 8004904:	fb01 f303 	mul.w	r3, r1, r3
 8004908:	4413      	add	r3, r2
 800490a:	333d      	adds	r3, #61	; 0x3d
 800490c:	2201      	movs	r2, #1
 800490e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	4413      	add	r3, r2
 8004918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	0151      	lsls	r1, r2, #5
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	440a      	add	r2, r1
 8004926:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800492a:	f043 0302 	orr.w	r3, r3, #2
 800492e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	4611      	mov	r1, r2
 800493a:	4618      	mov	r0, r3
 800493c:	f003 fd1d 	bl	800837a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	4413      	add	r3, r2
 8004948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800494c:	461a      	mov	r2, r3
 800494e:	2310      	movs	r3, #16
 8004950:	6093      	str	r3, [r2, #8]
}
 8004952:	e21b      	b.n	8004d8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	4413      	add	r3, r2
 800495c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004966:	2b80      	cmp	r3, #128	; 0x80
 8004968:	d174      	bne.n	8004a54 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d121      	bne.n	80049b6 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	212c      	movs	r1, #44	; 0x2c
 8004978:	fb01 f303 	mul.w	r3, r1, r3
 800497c:	4413      	add	r3, r2
 800497e:	3361      	adds	r3, #97	; 0x61
 8004980:	2206      	movs	r2, #6
 8004982:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	4413      	add	r3, r2
 800498c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	0151      	lsls	r1, r2, #5
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	440a      	add	r2, r1
 800499a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800499e:	f043 0302 	orr.w	r3, r3, #2
 80049a2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	4611      	mov	r1, r2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f003 fce3 	bl	800837a <USB_HC_Halt>
 80049b4:	e044      	b.n	8004a40 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	212c      	movs	r1, #44	; 0x2c
 80049bc:	fb01 f303 	mul.w	r3, r1, r3
 80049c0:	4413      	add	r3, r2
 80049c2:	335c      	adds	r3, #92	; 0x5c
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	202c      	movs	r0, #44	; 0x2c
 80049ce:	fb00 f303 	mul.w	r3, r0, r3
 80049d2:	440b      	add	r3, r1
 80049d4:	335c      	adds	r3, #92	; 0x5c
 80049d6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	212c      	movs	r1, #44	; 0x2c
 80049de:	fb01 f303 	mul.w	r3, r1, r3
 80049e2:	4413      	add	r3, r2
 80049e4:	335c      	adds	r3, #92	; 0x5c
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d920      	bls.n	8004a2e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	212c      	movs	r1, #44	; 0x2c
 80049f2:	fb01 f303 	mul.w	r3, r1, r3
 80049f6:	4413      	add	r3, r2
 80049f8:	335c      	adds	r3, #92	; 0x5c
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	212c      	movs	r1, #44	; 0x2c
 8004a04:	fb01 f303 	mul.w	r3, r1, r3
 8004a08:	4413      	add	r3, r2
 8004a0a:	3360      	adds	r3, #96	; 0x60
 8004a0c:	2204      	movs	r2, #4
 8004a0e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	b2d9      	uxtb	r1, r3
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	202c      	movs	r0, #44	; 0x2c
 8004a1a:	fb00 f303 	mul.w	r3, r0, r3
 8004a1e:	4413      	add	r3, r2
 8004a20:	3360      	adds	r3, #96	; 0x60
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f009 fa4a 	bl	800dec0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004a2c:	e008      	b.n	8004a40 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	212c      	movs	r1, #44	; 0x2c
 8004a34:	fb01 f303 	mul.w	r3, r1, r3
 8004a38:	4413      	add	r3, r2
 8004a3a:	3360      	adds	r3, #96	; 0x60
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	2380      	movs	r3, #128	; 0x80
 8004a50:	6093      	str	r3, [r2, #8]
}
 8004a52:	e19b      	b.n	8004d8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a6a:	d134      	bne.n	8004ad6 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	0151      	lsls	r1, r2, #5
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	440a      	add	r2, r1
 8004a82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a86:	f043 0302 	orr.w	r3, r3, #2
 8004a8a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	4611      	mov	r1, r2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f003 fc6f 	bl	800837a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	2310      	movs	r3, #16
 8004aac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aba:	461a      	mov	r2, r3
 8004abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ac0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	212c      	movs	r1, #44	; 0x2c
 8004ac8:	fb01 f303 	mul.w	r3, r1, r3
 8004acc:	4413      	add	r3, r2
 8004ace:	3361      	adds	r3, #97	; 0x61
 8004ad0:	2208      	movs	r2, #8
 8004ad2:	701a      	strb	r2, [r3, #0]
}
 8004ad4:	e15a      	b.n	8004d8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	f040 814f 	bne.w	8004d8c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	0151      	lsls	r1, r2, #5
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	440a      	add	r2, r1
 8004b04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b08:	f023 0302 	bic.w	r3, r3, #2
 8004b0c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	212c      	movs	r1, #44	; 0x2c
 8004b14:	fb01 f303 	mul.w	r3, r1, r3
 8004b18:	4413      	add	r3, r2
 8004b1a:	3361      	adds	r3, #97	; 0x61
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d17d      	bne.n	8004c1e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	212c      	movs	r1, #44	; 0x2c
 8004b28:	fb01 f303 	mul.w	r3, r1, r3
 8004b2c:	4413      	add	r3, r2
 8004b2e:	3360      	adds	r3, #96	; 0x60
 8004b30:	2201      	movs	r2, #1
 8004b32:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	212c      	movs	r1, #44	; 0x2c
 8004b3a:	fb01 f303 	mul.w	r3, r1, r3
 8004b3e:	4413      	add	r3, r2
 8004b40:	333f      	adds	r3, #63	; 0x3f
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d00a      	beq.n	8004b5e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	212c      	movs	r1, #44	; 0x2c
 8004b4e:	fb01 f303 	mul.w	r3, r1, r3
 8004b52:	4413      	add	r3, r2
 8004b54:	333f      	adds	r3, #63	; 0x3f
 8004b56:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	f040 8100 	bne.w	8004d5e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d113      	bne.n	8004b8e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	212c      	movs	r1, #44	; 0x2c
 8004b6c:	fb01 f303 	mul.w	r3, r1, r3
 8004b70:	4413      	add	r3, r2
 8004b72:	3355      	adds	r3, #85	; 0x55
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	f083 0301 	eor.w	r3, r3, #1
 8004b7a:	b2d8      	uxtb	r0, r3
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	212c      	movs	r1, #44	; 0x2c
 8004b82:	fb01 f303 	mul.w	r3, r1, r3
 8004b86:	4413      	add	r3, r2
 8004b88:	3355      	adds	r3, #85	; 0x55
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	f040 80e3 	bne.w	8004d5e <HCD_HC_OUT_IRQHandler+0x7cc>
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	212c      	movs	r1, #44	; 0x2c
 8004b9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ba2:	4413      	add	r3, r2
 8004ba4:	334c      	adds	r3, #76	; 0x4c
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 80d8 	beq.w	8004d5e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	212c      	movs	r1, #44	; 0x2c
 8004bb4:	fb01 f303 	mul.w	r3, r1, r3
 8004bb8:	4413      	add	r3, r2
 8004bba:	334c      	adds	r3, #76	; 0x4c
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	202c      	movs	r0, #44	; 0x2c
 8004bc4:	fb00 f202 	mul.w	r2, r0, r2
 8004bc8:	440a      	add	r2, r1
 8004bca:	3240      	adds	r2, #64	; 0x40
 8004bcc:	8812      	ldrh	r2, [r2, #0]
 8004bce:	4413      	add	r3, r2
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	202c      	movs	r0, #44	; 0x2c
 8004bd8:	fb00 f202 	mul.w	r2, r0, r2
 8004bdc:	440a      	add	r2, r1
 8004bde:	3240      	adds	r2, #64	; 0x40
 8004be0:	8812      	ldrh	r2, [r2, #0]
 8004be2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 80b5 	beq.w	8004d5e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	212c      	movs	r1, #44	; 0x2c
 8004bfa:	fb01 f303 	mul.w	r3, r1, r3
 8004bfe:	4413      	add	r3, r2
 8004c00:	3355      	adds	r3, #85	; 0x55
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	f083 0301 	eor.w	r3, r3, #1
 8004c08:	b2d8      	uxtb	r0, r3
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	212c      	movs	r1, #44	; 0x2c
 8004c10:	fb01 f303 	mul.w	r3, r1, r3
 8004c14:	4413      	add	r3, r2
 8004c16:	3355      	adds	r3, #85	; 0x55
 8004c18:	4602      	mov	r2, r0
 8004c1a:	701a      	strb	r2, [r3, #0]
 8004c1c:	e09f      	b.n	8004d5e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	212c      	movs	r1, #44	; 0x2c
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	4413      	add	r3, r2
 8004c2a:	3361      	adds	r3, #97	; 0x61
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	d109      	bne.n	8004c46 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	212c      	movs	r1, #44	; 0x2c
 8004c38:	fb01 f303 	mul.w	r3, r1, r3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	3360      	adds	r3, #96	; 0x60
 8004c40:	2202      	movs	r2, #2
 8004c42:	701a      	strb	r2, [r3, #0]
 8004c44:	e08b      	b.n	8004d5e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	212c      	movs	r1, #44	; 0x2c
 8004c4c:	fb01 f303 	mul.w	r3, r1, r3
 8004c50:	4413      	add	r3, r2
 8004c52:	3361      	adds	r3, #97	; 0x61
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d109      	bne.n	8004c6e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	212c      	movs	r1, #44	; 0x2c
 8004c60:	fb01 f303 	mul.w	r3, r1, r3
 8004c64:	4413      	add	r3, r2
 8004c66:	3360      	adds	r3, #96	; 0x60
 8004c68:	2202      	movs	r2, #2
 8004c6a:	701a      	strb	r2, [r3, #0]
 8004c6c:	e077      	b.n	8004d5e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	212c      	movs	r1, #44	; 0x2c
 8004c74:	fb01 f303 	mul.w	r3, r1, r3
 8004c78:	4413      	add	r3, r2
 8004c7a:	3361      	adds	r3, #97	; 0x61
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b05      	cmp	r3, #5
 8004c80:	d109      	bne.n	8004c96 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	212c      	movs	r1, #44	; 0x2c
 8004c88:	fb01 f303 	mul.w	r3, r1, r3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	3360      	adds	r3, #96	; 0x60
 8004c90:	2205      	movs	r2, #5
 8004c92:	701a      	strb	r2, [r3, #0]
 8004c94:	e063      	b.n	8004d5e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	212c      	movs	r1, #44	; 0x2c
 8004c9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ca0:	4413      	add	r3, r2
 8004ca2:	3361      	adds	r3, #97	; 0x61
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b06      	cmp	r3, #6
 8004ca8:	d009      	beq.n	8004cbe <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	212c      	movs	r1, #44	; 0x2c
 8004cb0:	fb01 f303 	mul.w	r3, r1, r3
 8004cb4:	4413      	add	r3, r2
 8004cb6:	3361      	adds	r3, #97	; 0x61
 8004cb8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d14f      	bne.n	8004d5e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	212c      	movs	r1, #44	; 0x2c
 8004cc4:	fb01 f303 	mul.w	r3, r1, r3
 8004cc8:	4413      	add	r3, r2
 8004cca:	335c      	adds	r3, #92	; 0x5c
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	202c      	movs	r0, #44	; 0x2c
 8004cd6:	fb00 f303 	mul.w	r3, r0, r3
 8004cda:	440b      	add	r3, r1
 8004cdc:	335c      	adds	r3, #92	; 0x5c
 8004cde:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	212c      	movs	r1, #44	; 0x2c
 8004ce6:	fb01 f303 	mul.w	r3, r1, r3
 8004cea:	4413      	add	r3, r2
 8004cec:	335c      	adds	r3, #92	; 0x5c
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d912      	bls.n	8004d1a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	212c      	movs	r1, #44	; 0x2c
 8004cfa:	fb01 f303 	mul.w	r3, r1, r3
 8004cfe:	4413      	add	r3, r2
 8004d00:	335c      	adds	r3, #92	; 0x5c
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	212c      	movs	r1, #44	; 0x2c
 8004d0c:	fb01 f303 	mul.w	r3, r1, r3
 8004d10:	4413      	add	r3, r2
 8004d12:	3360      	adds	r3, #96	; 0x60
 8004d14:	2204      	movs	r2, #4
 8004d16:	701a      	strb	r2, [r3, #0]
 8004d18:	e021      	b.n	8004d5e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	212c      	movs	r1, #44	; 0x2c
 8004d20:	fb01 f303 	mul.w	r3, r1, r3
 8004d24:	4413      	add	r3, r2
 8004d26:	3360      	adds	r3, #96	; 0x60
 8004d28:	2202      	movs	r2, #2
 8004d2a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d42:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d4a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d58:	461a      	mov	r2, r3
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	b2d9      	uxtb	r1, r3
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	202c      	movs	r0, #44	; 0x2c
 8004d7a:	fb00 f303 	mul.w	r3, r0, r3
 8004d7e:	4413      	add	r3, r2
 8004d80:	3360      	adds	r3, #96	; 0x60
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f009 f89a 	bl	800dec0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004d8c:	bf00      	nop
 8004d8e:	3720      	adds	r7, #32
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08a      	sub	sp, #40	; 0x28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	f003 030f 	and.w	r3, r3, #15
 8004db4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	0c5b      	lsrs	r3, r3, #17
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	091b      	lsrs	r3, r3, #4
 8004dc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dc8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d004      	beq.n	8004dda <HCD_RXQLVL_IRQHandler+0x46>
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	2b05      	cmp	r3, #5
 8004dd4:	f000 80a9 	beq.w	8004f2a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004dd8:	e0aa      	b.n	8004f30 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 80a6 	beq.w	8004f2e <HCD_RXQLVL_IRQHandler+0x19a>
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	212c      	movs	r1, #44	; 0x2c
 8004de8:	fb01 f303 	mul.w	r3, r1, r3
 8004dec:	4413      	add	r3, r2
 8004dee:	3344      	adds	r3, #68	; 0x44
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 809b 	beq.w	8004f2e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	212c      	movs	r1, #44	; 0x2c
 8004dfe:	fb01 f303 	mul.w	r3, r1, r3
 8004e02:	4413      	add	r3, r2
 8004e04:	3350      	adds	r3, #80	; 0x50
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	441a      	add	r2, r3
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	202c      	movs	r0, #44	; 0x2c
 8004e12:	fb00 f303 	mul.w	r3, r0, r3
 8004e16:	440b      	add	r3, r1
 8004e18:	334c      	adds	r3, #76	; 0x4c
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d87a      	bhi.n	8004f16 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6818      	ldr	r0, [r3, #0]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	212c      	movs	r1, #44	; 0x2c
 8004e2a:	fb01 f303 	mul.w	r3, r1, r3
 8004e2e:	4413      	add	r3, r2
 8004e30:	3344      	adds	r3, #68	; 0x44
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	b292      	uxth	r2, r2
 8004e38:	4619      	mov	r1, r3
 8004e3a:	f002 fe17 	bl	8007a6c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	212c      	movs	r1, #44	; 0x2c
 8004e44:	fb01 f303 	mul.w	r3, r1, r3
 8004e48:	4413      	add	r3, r2
 8004e4a:	3344      	adds	r3, #68	; 0x44
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	441a      	add	r2, r3
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	202c      	movs	r0, #44	; 0x2c
 8004e58:	fb00 f303 	mul.w	r3, r0, r3
 8004e5c:	440b      	add	r3, r1
 8004e5e:	3344      	adds	r3, #68	; 0x44
 8004e60:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	212c      	movs	r1, #44	; 0x2c
 8004e68:	fb01 f303 	mul.w	r3, r1, r3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	3350      	adds	r3, #80	; 0x50
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	441a      	add	r2, r3
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	202c      	movs	r0, #44	; 0x2c
 8004e7c:	fb00 f303 	mul.w	r3, r0, r3
 8004e80:	440b      	add	r3, r1
 8004e82:	3350      	adds	r3, #80	; 0x50
 8004e84:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	0cdb      	lsrs	r3, r3, #19
 8004e96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e9a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	212c      	movs	r1, #44	; 0x2c
 8004ea2:	fb01 f303 	mul.w	r3, r1, r3
 8004ea6:	4413      	add	r3, r2
 8004ea8:	3340      	adds	r3, #64	; 0x40
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	461a      	mov	r2, r3
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d13c      	bne.n	8004f2e <HCD_RXQLVL_IRQHandler+0x19a>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d039      	beq.n	8004f2e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ed0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ed8:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	212c      	movs	r1, #44	; 0x2c
 8004ef2:	fb01 f303 	mul.w	r3, r1, r3
 8004ef6:	4413      	add	r3, r2
 8004ef8:	3354      	adds	r3, #84	; 0x54
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	f083 0301 	eor.w	r3, r3, #1
 8004f00:	b2d8      	uxtb	r0, r3
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	212c      	movs	r1, #44	; 0x2c
 8004f08:	fb01 f303 	mul.w	r3, r1, r3
 8004f0c:	4413      	add	r3, r2
 8004f0e:	3354      	adds	r3, #84	; 0x54
 8004f10:	4602      	mov	r2, r0
 8004f12:	701a      	strb	r2, [r3, #0]
      break;
 8004f14:	e00b      	b.n	8004f2e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	212c      	movs	r1, #44	; 0x2c
 8004f1c:	fb01 f303 	mul.w	r3, r1, r3
 8004f20:	4413      	add	r3, r2
 8004f22:	3360      	adds	r3, #96	; 0x60
 8004f24:	2204      	movs	r2, #4
 8004f26:	701a      	strb	r2, [r3, #0]
      break;
 8004f28:	e001      	b.n	8004f2e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004f2a:	bf00      	nop
 8004f2c:	e000      	b.n	8004f30 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004f2e:	bf00      	nop
  }
}
 8004f30:	bf00      	nop
 8004f32:	3728      	adds	r7, #40	; 0x28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004f64:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d10b      	bne.n	8004f88 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d102      	bne.n	8004f80 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f008 ff84 	bl	800de88 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f043 0302 	orr.w	r3, r3, #2
 8004f86:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d132      	bne.n	8004ff8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f043 0308 	orr.w	r3, r3, #8
 8004f98:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d126      	bne.n	8004ff2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d113      	bne.n	8004fd4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004fb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fb6:	d106      	bne.n	8004fc6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2102      	movs	r1, #2
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f002 feb4 	bl	8007d2c <USB_InitFSLSPClkSel>
 8004fc4:	e011      	b.n	8004fea <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2101      	movs	r1, #1
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f002 fead 	bl	8007d2c <USB_InitFSLSPClkSel>
 8004fd2:	e00a      	b.n	8004fea <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d106      	bne.n	8004fea <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004fe8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f008 ff76 	bl	800dedc <HAL_HCD_PortEnabled_Callback>
 8004ff0:	e002      	b.n	8004ff8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f008 ff80 	bl	800def8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f003 0320 	and.w	r3, r3, #32
 8004ffe:	2b20      	cmp	r3, #32
 8005000:	d103      	bne.n	800500a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	f043 0320 	orr.w	r3, r3, #32
 8005008:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005010:	461a      	mov	r2, r3
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	6013      	str	r3, [r2, #0]
}
 8005016:	bf00      	nop
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
	...

08005020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e12b      	b.n	800528a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d106      	bne.n	800504c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7fb fed2 	bl	8000df0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2224      	movs	r2, #36	; 0x24
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0201 	bic.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005072:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005082:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005084:	f001 ff22 	bl	8006ecc <HAL_RCC_GetPCLK1Freq>
 8005088:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	4a81      	ldr	r2, [pc, #516]	; (8005294 <HAL_I2C_Init+0x274>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d807      	bhi.n	80050a4 <HAL_I2C_Init+0x84>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4a80      	ldr	r2, [pc, #512]	; (8005298 <HAL_I2C_Init+0x278>)
 8005098:	4293      	cmp	r3, r2
 800509a:	bf94      	ite	ls
 800509c:	2301      	movls	r3, #1
 800509e:	2300      	movhi	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	e006      	b.n	80050b2 <HAL_I2C_Init+0x92>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4a7d      	ldr	r2, [pc, #500]	; (800529c <HAL_I2C_Init+0x27c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	bf94      	ite	ls
 80050ac:	2301      	movls	r3, #1
 80050ae:	2300      	movhi	r3, #0
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e0e7      	b.n	800528a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4a78      	ldr	r2, [pc, #480]	; (80052a0 <HAL_I2C_Init+0x280>)
 80050be:	fba2 2303 	umull	r2, r3, r2, r3
 80050c2:	0c9b      	lsrs	r3, r3, #18
 80050c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	4a6a      	ldr	r2, [pc, #424]	; (8005294 <HAL_I2C_Init+0x274>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d802      	bhi.n	80050f4 <HAL_I2C_Init+0xd4>
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	3301      	adds	r3, #1
 80050f2:	e009      	b.n	8005108 <HAL_I2C_Init+0xe8>
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050fa:	fb02 f303 	mul.w	r3, r2, r3
 80050fe:	4a69      	ldr	r2, [pc, #420]	; (80052a4 <HAL_I2C_Init+0x284>)
 8005100:	fba2 2303 	umull	r2, r3, r2, r3
 8005104:	099b      	lsrs	r3, r3, #6
 8005106:	3301      	adds	r3, #1
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6812      	ldr	r2, [r2, #0]
 800510c:	430b      	orrs	r3, r1
 800510e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800511a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	495c      	ldr	r1, [pc, #368]	; (8005294 <HAL_I2C_Init+0x274>)
 8005124:	428b      	cmp	r3, r1
 8005126:	d819      	bhi.n	800515c <HAL_I2C_Init+0x13c>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	1e59      	subs	r1, r3, #1
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	fbb1 f3f3 	udiv	r3, r1, r3
 8005136:	1c59      	adds	r1, r3, #1
 8005138:	f640 73fc 	movw	r3, #4092	; 0xffc
 800513c:	400b      	ands	r3, r1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <HAL_I2C_Init+0x138>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	1e59      	subs	r1, r3, #1
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005150:	3301      	adds	r3, #1
 8005152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005156:	e051      	b.n	80051fc <HAL_I2C_Init+0x1dc>
 8005158:	2304      	movs	r3, #4
 800515a:	e04f      	b.n	80051fc <HAL_I2C_Init+0x1dc>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d111      	bne.n	8005188 <HAL_I2C_Init+0x168>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	1e58      	subs	r0, r3, #1
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6859      	ldr	r1, [r3, #4]
 800516c:	460b      	mov	r3, r1
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	440b      	add	r3, r1
 8005172:	fbb0 f3f3 	udiv	r3, r0, r3
 8005176:	3301      	adds	r3, #1
 8005178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800517c:	2b00      	cmp	r3, #0
 800517e:	bf0c      	ite	eq
 8005180:	2301      	moveq	r3, #1
 8005182:	2300      	movne	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	e012      	b.n	80051ae <HAL_I2C_Init+0x18e>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	1e58      	subs	r0, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6859      	ldr	r1, [r3, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	440b      	add	r3, r1
 8005196:	0099      	lsls	r1, r3, #2
 8005198:	440b      	add	r3, r1
 800519a:	fbb0 f3f3 	udiv	r3, r0, r3
 800519e:	3301      	adds	r3, #1
 80051a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	bf0c      	ite	eq
 80051a8:	2301      	moveq	r3, #1
 80051aa:	2300      	movne	r3, #0
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <HAL_I2C_Init+0x196>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e022      	b.n	80051fc <HAL_I2C_Init+0x1dc>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10e      	bne.n	80051dc <HAL_I2C_Init+0x1bc>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	1e58      	subs	r0, r3, #1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6859      	ldr	r1, [r3, #4]
 80051c6:	460b      	mov	r3, r1
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	440b      	add	r3, r1
 80051cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80051d0:	3301      	adds	r3, #1
 80051d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051da:	e00f      	b.n	80051fc <HAL_I2C_Init+0x1dc>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	1e58      	subs	r0, r3, #1
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6859      	ldr	r1, [r3, #4]
 80051e4:	460b      	mov	r3, r1
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	0099      	lsls	r1, r3, #2
 80051ec:	440b      	add	r3, r1
 80051ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80051f2:	3301      	adds	r3, #1
 80051f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	6809      	ldr	r1, [r1, #0]
 8005200:	4313      	orrs	r3, r2
 8005202:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69da      	ldr	r2, [r3, #28]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800522a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6911      	ldr	r1, [r2, #16]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	68d2      	ldr	r2, [r2, #12]
 8005236:	4311      	orrs	r1, r2
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6812      	ldr	r2, [r2, #0]
 800523c:	430b      	orrs	r3, r1
 800523e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695a      	ldr	r2, [r3, #20]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0201 	orr.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2220      	movs	r2, #32
 8005276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	000186a0 	.word	0x000186a0
 8005298:	001e847f 	.word	0x001e847f
 800529c:	003d08ff 	.word	0x003d08ff
 80052a0:	431bde83 	.word	0x431bde83
 80052a4:	10624dd3 	.word	0x10624dd3

080052a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af02      	add	r7, sp, #8
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	607a      	str	r2, [r7, #4]
 80052b2:	461a      	mov	r2, r3
 80052b4:	460b      	mov	r3, r1
 80052b6:	817b      	strh	r3, [r7, #10]
 80052b8:	4613      	mov	r3, r2
 80052ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052bc:	f7fc f99a 	bl	80015f4 <HAL_GetTick>
 80052c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b20      	cmp	r3, #32
 80052cc:	f040 80e0 	bne.w	8005490 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	2319      	movs	r3, #25
 80052d6:	2201      	movs	r2, #1
 80052d8:	4970      	ldr	r1, [pc, #448]	; (800549c <HAL_I2C_Master_Transmit+0x1f4>)
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 f964 	bl	80055a8 <I2C_WaitOnFlagUntilTimeout>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80052e6:	2302      	movs	r3, #2
 80052e8:	e0d3      	b.n	8005492 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d101      	bne.n	80052f8 <HAL_I2C_Master_Transmit+0x50>
 80052f4:	2302      	movs	r3, #2
 80052f6:	e0cc      	b.n	8005492 <HAL_I2C_Master_Transmit+0x1ea>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b01      	cmp	r3, #1
 800530c:	d007      	beq.n	800531e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f042 0201 	orr.w	r2, r2, #1
 800531c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800532c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2221      	movs	r2, #33	; 0x21
 8005332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2210      	movs	r2, #16
 800533a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	893a      	ldrh	r2, [r7, #8]
 800534e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005354:	b29a      	uxth	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	4a50      	ldr	r2, [pc, #320]	; (80054a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800535e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005360:	8979      	ldrh	r1, [r7, #10]
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	6a3a      	ldr	r2, [r7, #32]
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 f89c 	bl	80054a4 <I2C_MasterRequestWrite>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e08d      	b.n	8005492 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005376:	2300      	movs	r3, #0
 8005378:	613b      	str	r3, [r7, #16]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	613b      	str	r3, [r7, #16]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800538c:	e066      	b.n	800545c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	6a39      	ldr	r1, [r7, #32]
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 f9de 	bl	8005754 <I2C_WaitOnTXEFlagUntilTimeout>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00d      	beq.n	80053ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d107      	bne.n	80053b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e06b      	b.n	8005492 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	781a      	ldrb	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d11b      	bne.n	8005430 <HAL_I2C_Master_Transmit+0x188>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d017      	beq.n	8005430 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	781a      	ldrb	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541a:	b29b      	uxth	r3, r3
 800541c:	3b01      	subs	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005428:	3b01      	subs	r3, #1
 800542a:	b29a      	uxth	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	6a39      	ldr	r1, [r7, #32]
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 f9ce 	bl	80057d6 <I2C_WaitOnBTFFlagUntilTimeout>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00d      	beq.n	800545c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	2b04      	cmp	r3, #4
 8005446:	d107      	bne.n	8005458 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005456:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e01a      	b.n	8005492 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005460:	2b00      	cmp	r3, #0
 8005462:	d194      	bne.n	800538e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2220      	movs	r2, #32
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800548c:	2300      	movs	r3, #0
 800548e:	e000      	b.n	8005492 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005490:	2302      	movs	r3, #2
  }
}
 8005492:	4618      	mov	r0, r3
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	00100002 	.word	0x00100002
 80054a0:	ffff0000 	.word	0xffff0000

080054a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af02      	add	r7, sp, #8
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	607a      	str	r2, [r7, #4]
 80054ae:	603b      	str	r3, [r7, #0]
 80054b0:	460b      	mov	r3, r1
 80054b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d006      	beq.n	80054ce <I2C_MasterRequestWrite+0x2a>
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d003      	beq.n	80054ce <I2C_MasterRequestWrite+0x2a>
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054cc:	d108      	bne.n	80054e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	e00b      	b.n	80054f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e4:	2b12      	cmp	r3, #18
 80054e6:	d107      	bne.n	80054f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 f84f 	bl	80055a8 <I2C_WaitOnFlagUntilTimeout>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00d      	beq.n	800552c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800551e:	d103      	bne.n	8005528 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005526:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e035      	b.n	8005598 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005534:	d108      	bne.n	8005548 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005536:	897b      	ldrh	r3, [r7, #10]
 8005538:	b2db      	uxtb	r3, r3
 800553a:	461a      	mov	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005544:	611a      	str	r2, [r3, #16]
 8005546:	e01b      	b.n	8005580 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005548:	897b      	ldrh	r3, [r7, #10]
 800554a:	11db      	asrs	r3, r3, #7
 800554c:	b2db      	uxtb	r3, r3
 800554e:	f003 0306 	and.w	r3, r3, #6
 8005552:	b2db      	uxtb	r3, r3
 8005554:	f063 030f 	orn	r3, r3, #15
 8005558:	b2da      	uxtb	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	490e      	ldr	r1, [pc, #56]	; (80055a0 <I2C_MasterRequestWrite+0xfc>)
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 f875 	bl	8005656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e010      	b.n	8005598 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005576:	897b      	ldrh	r3, [r7, #10]
 8005578:	b2da      	uxtb	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	4907      	ldr	r1, [pc, #28]	; (80055a4 <I2C_MasterRequestWrite+0x100>)
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 f865 	bl	8005656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e000      	b.n	8005598 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	00010008 	.word	0x00010008
 80055a4:	00010002 	.word	0x00010002

080055a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	4613      	mov	r3, r2
 80055b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055b8:	e025      	b.n	8005606 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c0:	d021      	beq.n	8005606 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c2:	f7fc f817 	bl	80015f4 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d302      	bcc.n	80055d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d116      	bne.n	8005606 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	f043 0220 	orr.w	r2, r3, #32
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e023      	b.n	800564e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	0c1b      	lsrs	r3, r3, #16
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b01      	cmp	r3, #1
 800560e:	d10d      	bne.n	800562c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	43da      	mvns	r2, r3
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4013      	ands	r3, r2
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	bf0c      	ite	eq
 8005622:	2301      	moveq	r3, #1
 8005624:	2300      	movne	r3, #0
 8005626:	b2db      	uxtb	r3, r3
 8005628:	461a      	mov	r2, r3
 800562a:	e00c      	b.n	8005646 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	43da      	mvns	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4013      	ands	r3, r2
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	bf0c      	ite	eq
 800563e:	2301      	moveq	r3, #1
 8005640:	2300      	movne	r3, #0
 8005642:	b2db      	uxtb	r3, r3
 8005644:	461a      	mov	r2, r3
 8005646:	79fb      	ldrb	r3, [r7, #7]
 8005648:	429a      	cmp	r2, r3
 800564a:	d0b6      	beq.n	80055ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b084      	sub	sp, #16
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	607a      	str	r2, [r7, #4]
 8005662:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005664:	e051      	b.n	800570a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005674:	d123      	bne.n	80056be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005684:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800568e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2220      	movs	r2, #32
 800569a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	f043 0204 	orr.w	r2, r3, #4
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e046      	b.n	800574c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c4:	d021      	beq.n	800570a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c6:	f7fb ff95 	bl	80015f4 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d302      	bcc.n	80056dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d116      	bne.n	800570a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	f043 0220 	orr.w	r2, r3, #32
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e020      	b.n	800574c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	0c1b      	lsrs	r3, r3, #16
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b01      	cmp	r3, #1
 8005712:	d10c      	bne.n	800572e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	43da      	mvns	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4013      	ands	r3, r2
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	bf14      	ite	ne
 8005726:	2301      	movne	r3, #1
 8005728:	2300      	moveq	r3, #0
 800572a:	b2db      	uxtb	r3, r3
 800572c:	e00b      	b.n	8005746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	43da      	mvns	r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	4013      	ands	r3, r2
 800573a:	b29b      	uxth	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	bf14      	ite	ne
 8005740:	2301      	movne	r3, #1
 8005742:	2300      	moveq	r3, #0
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d18d      	bne.n	8005666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005760:	e02d      	b.n	80057be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 f878 	bl	8005858 <I2C_IsAcknowledgeFailed>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e02d      	b.n	80057ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005778:	d021      	beq.n	80057be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800577a:	f7fb ff3b 	bl	80015f4 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	429a      	cmp	r2, r3
 8005788:	d302      	bcc.n	8005790 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d116      	bne.n	80057be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2220      	movs	r2, #32
 800579a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	f043 0220 	orr.w	r2, r3, #32
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e007      	b.n	80057ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c8:	2b80      	cmp	r3, #128	; 0x80
 80057ca:	d1ca      	bne.n	8005762 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b084      	sub	sp, #16
 80057da:	af00      	add	r7, sp, #0
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057e2:	e02d      	b.n	8005840 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 f837 	bl	8005858 <I2C_IsAcknowledgeFailed>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e02d      	b.n	8005850 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fa:	d021      	beq.n	8005840 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057fc:	f7fb fefa 	bl	80015f4 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	429a      	cmp	r2, r3
 800580a:	d302      	bcc.n	8005812 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d116      	bne.n	8005840 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582c:	f043 0220 	orr.w	r2, r3, #32
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e007      	b.n	8005850 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b04      	cmp	r3, #4
 800584c:	d1ca      	bne.n	80057e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800586a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800586e:	d11b      	bne.n	80058a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005878:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2220      	movs	r2, #32
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005894:	f043 0204 	orr.w	r2, r3, #4
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e000      	b.n	80058aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
	...

080058b8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e128      	b.n	8005b1c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d109      	bne.n	80058ea <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a90      	ldr	r2, [pc, #576]	; (8005b24 <HAL_I2S_Init+0x26c>)
 80058e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7fb fb01 	bl	8000eec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2202      	movs	r2, #2
 80058ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69db      	ldr	r3, [r3, #28]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	6812      	ldr	r2, [r2, #0]
 80058fc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005900:	f023 030f 	bic.w	r3, r3, #15
 8005904:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2202      	movs	r2, #2
 800590c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	2b02      	cmp	r3, #2
 8005914:	d060      	beq.n	80059d8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d102      	bne.n	8005924 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800591e:	2310      	movs	r3, #16
 8005920:	617b      	str	r3, [r7, #20]
 8005922:	e001      	b.n	8005928 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005924:	2320      	movs	r3, #32
 8005926:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	2b20      	cmp	r3, #32
 800592e:	d802      	bhi.n	8005936 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005936:	2001      	movs	r0, #1
 8005938:	f001 fbd2 	bl	80070e0 <HAL_RCCEx_GetPeriphCLKFreq>
 800593c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005946:	d125      	bne.n	8005994 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d010      	beq.n	8005972 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	fbb2 f2f3 	udiv	r2, r2, r3
 800595a:	4613      	mov	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	461a      	mov	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	fbb2 f3f3 	udiv	r3, r2, r3
 800596c:	3305      	adds	r3, #5
 800596e:	613b      	str	r3, [r7, #16]
 8005970:	e01f      	b.n	80059b2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	fbb2 f2f3 	udiv	r2, r2, r3
 800597c:	4613      	mov	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	461a      	mov	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	fbb2 f3f3 	udiv	r3, r2, r3
 800598e:	3305      	adds	r3, #5
 8005990:	613b      	str	r3, [r7, #16]
 8005992:	e00e      	b.n	80059b2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	fbb2 f2f3 	udiv	r2, r2, r3
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	461a      	mov	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ae:	3305      	adds	r3, #5
 80059b0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	4a5c      	ldr	r2, [pc, #368]	; (8005b28 <HAL_I2S_Init+0x270>)
 80059b6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ba:	08db      	lsrs	r3, r3, #3
 80059bc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	085b      	lsrs	r3, r3, #1
 80059ce:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	021b      	lsls	r3, r3, #8
 80059d4:	61bb      	str	r3, [r7, #24]
 80059d6:	e003      	b.n	80059e0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80059d8:	2302      	movs	r3, #2
 80059da:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d902      	bls.n	80059ec <HAL_I2S_Init+0x134>
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	2bff      	cmp	r3, #255	; 0xff
 80059ea:	d907      	bls.n	80059fc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f0:	f043 0210 	orr.w	r2, r3, #16
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e08f      	b.n	8005b1c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691a      	ldr	r2, [r3, #16]
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	ea42 0103 	orr.w	r1, r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	69fa      	ldr	r2, [r7, #28]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005a1a:	f023 030f 	bic.w	r3, r3, #15
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6851      	ldr	r1, [r2, #4]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	6892      	ldr	r2, [r2, #8]
 8005a26:	4311      	orrs	r1, r2
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	68d2      	ldr	r2, [r2, #12]
 8005a2c:	4311      	orrs	r1, r2
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6992      	ldr	r2, [r2, #24]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	431a      	orrs	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a3e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d161      	bne.n	8005b0c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a38      	ldr	r2, [pc, #224]	; (8005b2c <HAL_I2S_Init+0x274>)
 8005a4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a37      	ldr	r2, [pc, #220]	; (8005b30 <HAL_I2S_Init+0x278>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d101      	bne.n	8005a5c <HAL_I2S_Init+0x1a4>
 8005a58:	4b36      	ldr	r3, [pc, #216]	; (8005b34 <HAL_I2S_Init+0x27c>)
 8005a5a:	e001      	b.n	8005a60 <HAL_I2S_Init+0x1a8>
 8005a5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	6812      	ldr	r2, [r2, #0]
 8005a66:	4932      	ldr	r1, [pc, #200]	; (8005b30 <HAL_I2S_Init+0x278>)
 8005a68:	428a      	cmp	r2, r1
 8005a6a:	d101      	bne.n	8005a70 <HAL_I2S_Init+0x1b8>
 8005a6c:	4a31      	ldr	r2, [pc, #196]	; (8005b34 <HAL_I2S_Init+0x27c>)
 8005a6e:	e001      	b.n	8005a74 <HAL_I2S_Init+0x1bc>
 8005a70:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005a74:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005a78:	f023 030f 	bic.w	r3, r3, #15
 8005a7c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a2b      	ldr	r2, [pc, #172]	; (8005b30 <HAL_I2S_Init+0x278>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d101      	bne.n	8005a8c <HAL_I2S_Init+0x1d4>
 8005a88:	4b2a      	ldr	r3, [pc, #168]	; (8005b34 <HAL_I2S_Init+0x27c>)
 8005a8a:	e001      	b.n	8005a90 <HAL_I2S_Init+0x1d8>
 8005a8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a90:	2202      	movs	r2, #2
 8005a92:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a25      	ldr	r2, [pc, #148]	; (8005b30 <HAL_I2S_Init+0x278>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d101      	bne.n	8005aa2 <HAL_I2S_Init+0x1ea>
 8005a9e:	4b25      	ldr	r3, [pc, #148]	; (8005b34 <HAL_I2S_Init+0x27c>)
 8005aa0:	e001      	b.n	8005aa6 <HAL_I2S_Init+0x1ee>
 8005aa2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ab2:	d003      	beq.n	8005abc <HAL_I2S_Init+0x204>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d103      	bne.n	8005ac4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005abc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ac0:	613b      	str	r3, [r7, #16]
 8005ac2:	e001      	b.n	8005ac8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005adc:	4313      	orrs	r3, r2
 8005ade:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	897b      	ldrh	r3, [r7, #10]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005af4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a0d      	ldr	r2, [pc, #52]	; (8005b30 <HAL_I2S_Init+0x278>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d101      	bne.n	8005b04 <HAL_I2S_Init+0x24c>
 8005b00:	4b0c      	ldr	r3, [pc, #48]	; (8005b34 <HAL_I2S_Init+0x27c>)
 8005b02:	e001      	b.n	8005b08 <HAL_I2S_Init+0x250>
 8005b04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b08:	897a      	ldrh	r2, [r7, #10]
 8005b0a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3720      	adds	r7, #32
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	08005ffb 	.word	0x08005ffb
 8005b28:	cccccccd 	.word	0xcccccccd
 8005b2c:	08006181 	.word	0x08006181
 8005b30:	40003800 	.word	0x40003800
 8005b34:	40003400 	.word	0x40003400

08005b38 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b4c:	d004      	beq.n	8005b58 <HAL_I2S_DMAStop+0x20>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f040 80d1 	bne.w	8005cfa <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00f      	beq.n	8005b80 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fb ff35 	bl	80019d4 <HAL_DMA_Abort>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d007      	beq.n	8005b80 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b74:	f043 0208 	orr.w	r2, r3, #8
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005b80:	2364      	movs	r3, #100	; 0x64
 8005b82:	2201      	movs	r2, #1
 8005b84:	2102      	movs	r1, #2
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fac1 	bl	800610e <I2S_WaitFlagStateUntilTimeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00b      	beq.n	8005baa <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b96:	f043 0201 	orr.w	r2, r3, #1
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005baa:	2364      	movs	r3, #100	; 0x64
 8005bac:	2200      	movs	r2, #0
 8005bae:	2180      	movs	r1, #128	; 0x80
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 faac 	bl	800610e <I2S_WaitFlagStateUntilTimeout>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00b      	beq.n	8005bd4 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc0:	f043 0201 	orr.w	r2, r3, #1
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	69da      	ldr	r2, [r3, #28]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be2:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005be4:	2300      	movs	r3, #0
 8005be6:	617b      	str	r3, [r7, #20]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	617b      	str	r3, [r7, #20]
 8005bf0:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 0202 	bic.w	r2, r2, #2
 8005c00:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b05      	cmp	r3, #5
 8005c0c:	f040 8165 	bne.w	8005eda <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00f      	beq.n	8005c38 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fb fed9 	bl	80019d4 <HAL_DMA_Abort>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d007      	beq.n	8005c38 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2c:	f043 0208 	orr.w	r2, r3, #8
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a8a      	ldr	r2, [pc, #552]	; (8005e68 <HAL_I2S_DMAStop+0x330>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d101      	bne.n	8005c46 <HAL_I2S_DMAStop+0x10e>
 8005c42:	4b8a      	ldr	r3, [pc, #552]	; (8005e6c <HAL_I2S_DMAStop+0x334>)
 8005c44:	e001      	b.n	8005c4a <HAL_I2S_DMAStop+0x112>
 8005c46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c4a:	69da      	ldr	r2, [r3, #28]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4985      	ldr	r1, [pc, #532]	; (8005e68 <HAL_I2S_DMAStop+0x330>)
 8005c52:	428b      	cmp	r3, r1
 8005c54:	d101      	bne.n	8005c5a <HAL_I2S_DMAStop+0x122>
 8005c56:	4b85      	ldr	r3, [pc, #532]	; (8005e6c <HAL_I2S_DMAStop+0x334>)
 8005c58:	e001      	b.n	8005c5e <HAL_I2S_DMAStop+0x126>
 8005c5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c62:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8005c64:	2300      	movs	r3, #0
 8005c66:	613b      	str	r3, [r7, #16]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a7e      	ldr	r2, [pc, #504]	; (8005e68 <HAL_I2S_DMAStop+0x330>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d101      	bne.n	8005c76 <HAL_I2S_DMAStop+0x13e>
 8005c72:	4b7e      	ldr	r3, [pc, #504]	; (8005e6c <HAL_I2S_DMAStop+0x334>)
 8005c74:	e001      	b.n	8005c7a <HAL_I2S_DMAStop+0x142>
 8005c76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	613b      	str	r3, [r7, #16]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a79      	ldr	r2, [pc, #484]	; (8005e68 <HAL_I2S_DMAStop+0x330>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d101      	bne.n	8005c8c <HAL_I2S_DMAStop+0x154>
 8005c88:	4b78      	ldr	r3, [pc, #480]	; (8005e6c <HAL_I2S_DMAStop+0x334>)
 8005c8a:	e001      	b.n	8005c90 <HAL_I2S_DMAStop+0x158>
 8005c8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a73      	ldr	r2, [pc, #460]	; (8005e68 <HAL_I2S_DMAStop+0x330>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d101      	bne.n	8005ca4 <HAL_I2S_DMAStop+0x16c>
 8005ca0:	4b72      	ldr	r3, [pc, #456]	; (8005e6c <HAL_I2S_DMAStop+0x334>)
 8005ca2:	e001      	b.n	8005ca8 <HAL_I2S_DMAStop+0x170>
 8005ca4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	496e      	ldr	r1, [pc, #440]	; (8005e68 <HAL_I2S_DMAStop+0x330>)
 8005cb0:	428b      	cmp	r3, r1
 8005cb2:	d101      	bne.n	8005cb8 <HAL_I2S_DMAStop+0x180>
 8005cb4:	4b6d      	ldr	r3, [pc, #436]	; (8005e6c <HAL_I2S_DMAStop+0x334>)
 8005cb6:	e001      	b.n	8005cbc <HAL_I2S_DMAStop+0x184>
 8005cb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cbc:	f022 0201 	bic.w	r2, r2, #1
 8005cc0:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10c      	bne.n	8005ce4 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005ce2:	e0fa      	b.n	8005eda <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a5f      	ldr	r2, [pc, #380]	; (8005e68 <HAL_I2S_DMAStop+0x330>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d101      	bne.n	8005cf2 <HAL_I2S_DMAStop+0x1ba>
 8005cee:	4b5f      	ldr	r3, [pc, #380]	; (8005e6c <HAL_I2S_DMAStop+0x334>)
 8005cf0:	e001      	b.n	8005cf6 <HAL_I2S_DMAStop+0x1be>
 8005cf2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cf6:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005cf8:	e0ef      	b.n	8005eda <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d02:	d005      	beq.n	8005d10 <HAL_I2S_DMAStop+0x1d8>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d0c:	f040 80e5 	bne.w	8005eda <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00f      	beq.n	8005d38 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fb fe59 	bl	80019d4 <HAL_DMA_Abort>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d007      	beq.n	8005d38 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2c:	f043 0208 	orr.w	r2, r3, #8
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b05      	cmp	r3, #5
 8005d42:	f040 809a 	bne.w	8005e7a <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00f      	beq.n	8005d6e <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fb fe3e 	bl	80019d4 <HAL_DMA_Abort>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d007      	beq.n	8005d6e <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d62:	f043 0208 	orr.w	r2, r3, #8
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8005d6e:	f7fb fc41 	bl	80015f4 <HAL_GetTick>
 8005d72:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005d74:	e012      	b.n	8005d9c <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005d76:	f7fb fc3d 	bl	80015f4 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b64      	cmp	r3, #100	; 0x64
 8005d82:	d90b      	bls.n	8005d9c <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d88:	f043 0201 	orr.w	r2, r3, #1
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a31      	ldr	r2, [pc, #196]	; (8005e68 <HAL_I2S_DMAStop+0x330>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d101      	bne.n	8005daa <HAL_I2S_DMAStop+0x272>
 8005da6:	4b31      	ldr	r3, [pc, #196]	; (8005e6c <HAL_I2S_DMAStop+0x334>)
 8005da8:	e001      	b.n	8005dae <HAL_I2S_DMAStop+0x276>
 8005daa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d1de      	bne.n	8005d76 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005db8:	e012      	b.n	8005de0 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005dba:	f7fb fc1b 	bl	80015f4 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	2b64      	cmp	r3, #100	; 0x64
 8005dc6:	d90b      	bls.n	8005de0 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dcc:	f043 0201 	orr.w	r2, r3, #1
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a20      	ldr	r2, [pc, #128]	; (8005e68 <HAL_I2S_DMAStop+0x330>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d101      	bne.n	8005dee <HAL_I2S_DMAStop+0x2b6>
 8005dea:	4b20      	ldr	r3, [pc, #128]	; (8005e6c <HAL_I2S_DMAStop+0x334>)
 8005dec:	e001      	b.n	8005df2 <HAL_I2S_DMAStop+0x2ba>
 8005dee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df8:	2b80      	cmp	r3, #128	; 0x80
 8005dfa:	d0de      	beq.n	8005dba <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a19      	ldr	r2, [pc, #100]	; (8005e68 <HAL_I2S_DMAStop+0x330>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d101      	bne.n	8005e0a <HAL_I2S_DMAStop+0x2d2>
 8005e06:	4b19      	ldr	r3, [pc, #100]	; (8005e6c <HAL_I2S_DMAStop+0x334>)
 8005e08:	e001      	b.n	8005e0e <HAL_I2S_DMAStop+0x2d6>
 8005e0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e0e:	69da      	ldr	r2, [r3, #28]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4914      	ldr	r1, [pc, #80]	; (8005e68 <HAL_I2S_DMAStop+0x330>)
 8005e16:	428b      	cmp	r3, r1
 8005e18:	d101      	bne.n	8005e1e <HAL_I2S_DMAStop+0x2e6>
 8005e1a:	4b14      	ldr	r3, [pc, #80]	; (8005e6c <HAL_I2S_DMAStop+0x334>)
 8005e1c:	e001      	b.n	8005e22 <HAL_I2S_DMAStop+0x2ea>
 8005e1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e26:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8005e28:	2300      	movs	r3, #0
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a0d      	ldr	r2, [pc, #52]	; (8005e68 <HAL_I2S_DMAStop+0x330>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d101      	bne.n	8005e3a <HAL_I2S_DMAStop+0x302>
 8005e36:	4b0d      	ldr	r3, [pc, #52]	; (8005e6c <HAL_I2S_DMAStop+0x334>)
 8005e38:	e001      	b.n	8005e3e <HAL_I2S_DMAStop+0x306>
 8005e3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	60fb      	str	r3, [r7, #12]
 8005e42:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a07      	ldr	r2, [pc, #28]	; (8005e68 <HAL_I2S_DMAStop+0x330>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d101      	bne.n	8005e52 <HAL_I2S_DMAStop+0x31a>
 8005e4e:	4b07      	ldr	r3, [pc, #28]	; (8005e6c <HAL_I2S_DMAStop+0x334>)
 8005e50:	e001      	b.n	8005e56 <HAL_I2S_DMAStop+0x31e>
 8005e52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4902      	ldr	r1, [pc, #8]	; (8005e68 <HAL_I2S_DMAStop+0x330>)
 8005e5e:	428b      	cmp	r3, r1
 8005e60:	d106      	bne.n	8005e70 <HAL_I2S_DMAStop+0x338>
 8005e62:	4b02      	ldr	r3, [pc, #8]	; (8005e6c <HAL_I2S_DMAStop+0x334>)
 8005e64:	e006      	b.n	8005e74 <HAL_I2S_DMAStop+0x33c>
 8005e66:	bf00      	nop
 8005e68:	40003800 	.word	0x40003800
 8005e6c:	40003400 	.word	0x40003400
 8005e70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e74:	f022 0202 	bic.w	r2, r2, #2
 8005e78:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69da      	ldr	r2, [r3, #28]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e88:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60bb      	str	r3, [r7, #8]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	60bb      	str	r3, [r7, #8]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	60bb      	str	r3, [r7, #8]
 8005e9e:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0201 	bic.w	r2, r2, #1
 8005eae:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eb8:	d10c      	bne.n	8005ed4 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ebe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	77fb      	strb	r3, [r7, #31]
 8005ed2:	e002      	b.n	8005eda <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8005ee2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3720      	adds	r7, #32
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	4798      	blx	r3
}
 8005efc:	bf00      	nop
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	881a      	ldrh	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	1c9a      	adds	r2, r3, #2
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10e      	bne.n	8005f94 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f84:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7ff ffb8 	bl	8005f04 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005f94:	bf00      	nop
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fae:	b292      	uxth	r2, r2
 8005fb0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb6:	1c9a      	adds	r2, r3, #2
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10e      	bne.n	8005ff2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005fe2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff ff93 	bl	8005f18 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005ff2:	bf00      	nop
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b086      	sub	sp, #24
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b04      	cmp	r3, #4
 8006014:	d13a      	bne.n	800608c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b01      	cmp	r3, #1
 800601e:	d109      	bne.n	8006034 <I2S_IRQHandler+0x3a>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602a:	2b40      	cmp	r3, #64	; 0x40
 800602c:	d102      	bne.n	8006034 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7ff ffb4 	bl	8005f9c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603a:	2b40      	cmp	r3, #64	; 0x40
 800603c:	d126      	bne.n	800608c <I2S_IRQHandler+0x92>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f003 0320 	and.w	r3, r3, #32
 8006048:	2b20      	cmp	r3, #32
 800604a:	d11f      	bne.n	800608c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800605a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800605c:	2300      	movs	r3, #0
 800605e:	613b      	str	r3, [r7, #16]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	613b      	str	r3, [r7, #16]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	613b      	str	r3, [r7, #16]
 8006070:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607e:	f043 0202 	orr.w	r2, r3, #2
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff ff50 	bl	8005f2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b03      	cmp	r3, #3
 8006096:	d136      	bne.n	8006106 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d109      	bne.n	80060b6 <I2S_IRQHandler+0xbc>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ac:	2b80      	cmp	r3, #128	; 0x80
 80060ae:	d102      	bne.n	80060b6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7ff ff45 	bl	8005f40 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f003 0308 	and.w	r3, r3, #8
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d122      	bne.n	8006106 <I2S_IRQHandler+0x10c>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f003 0320 	and.w	r3, r3, #32
 80060ca:	2b20      	cmp	r3, #32
 80060cc:	d11b      	bne.n	8006106 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060dc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80060de:	2300      	movs	r3, #0
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f8:	f043 0204 	orr.w	r2, r3, #4
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7ff ff13 	bl	8005f2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006106:	bf00      	nop
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b086      	sub	sp, #24
 8006112:	af00      	add	r7, sp, #0
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	60b9      	str	r1, [r7, #8]
 8006118:	603b      	str	r3, [r7, #0]
 800611a:	4613      	mov	r3, r2
 800611c:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800611e:	f7fb fa69 	bl	80015f4 <HAL_GetTick>
 8006122:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006124:	e018      	b.n	8006158 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612c:	d014      	beq.n	8006158 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800612e:	f7fb fa61 	bl	80015f4 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	429a      	cmp	r2, r3
 800613c:	d902      	bls.n	8006144 <I2S_WaitFlagStateUntilTimeout+0x36>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d109      	bne.n	8006158 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e00f      	b.n	8006178 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689a      	ldr	r2, [r3, #8]
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	4013      	ands	r3, r2
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	429a      	cmp	r2, r3
 8006166:	bf0c      	ite	eq
 8006168:	2301      	moveq	r3, #1
 800616a:	2300      	movne	r3, #0
 800616c:	b2db      	uxtb	r3, r3
 800616e:	461a      	mov	r2, r3
 8006170:	79fb      	ldrb	r3, [r7, #7]
 8006172:	429a      	cmp	r2, r3
 8006174:	d1d7      	bne.n	8006126 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3718      	adds	r7, #24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4aa2      	ldr	r2, [pc, #648]	; (8006420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d101      	bne.n	800619e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800619a:	4ba2      	ldr	r3, [pc, #648]	; (8006424 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800619c:	e001      	b.n	80061a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800619e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a9b      	ldr	r2, [pc, #620]	; (8006420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d101      	bne.n	80061bc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80061b8:	4b9a      	ldr	r3, [pc, #616]	; (8006424 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80061ba:	e001      	b.n	80061c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80061bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061cc:	d004      	beq.n	80061d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f040 8099 	bne.w	800630a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d107      	bne.n	80061f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d002      	beq.n	80061f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f925 	bl	800643c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d107      	bne.n	800620c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006202:	2b00      	cmp	r3, #0
 8006204:	d002      	beq.n	800620c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f9c8 	bl	800659c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006212:	2b40      	cmp	r3, #64	; 0x40
 8006214:	d13a      	bne.n	800628c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f003 0320 	and.w	r3, r3, #32
 800621c:	2b00      	cmp	r3, #0
 800621e:	d035      	beq.n	800628c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a7e      	ldr	r2, [pc, #504]	; (8006420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d101      	bne.n	800622e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800622a:	4b7e      	ldr	r3, [pc, #504]	; (8006424 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800622c:	e001      	b.n	8006232 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800622e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4979      	ldr	r1, [pc, #484]	; (8006420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800623a:	428b      	cmp	r3, r1
 800623c:	d101      	bne.n	8006242 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800623e:	4b79      	ldr	r3, [pc, #484]	; (8006424 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006240:	e001      	b.n	8006246 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006242:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006246:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800624a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800625a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800625c:	2300      	movs	r3, #0
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627e:	f043 0202 	orr.w	r2, r3, #2
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7ff fe50 	bl	8005f2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	f003 0308 	and.w	r3, r3, #8
 8006292:	2b08      	cmp	r3, #8
 8006294:	f040 80be 	bne.w	8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 80b8 	beq.w	8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062b2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a59      	ldr	r2, [pc, #356]	; (8006420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d101      	bne.n	80062c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80062be:	4b59      	ldr	r3, [pc, #356]	; (8006424 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80062c0:	e001      	b.n	80062c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80062c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4954      	ldr	r1, [pc, #336]	; (8006420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80062ce:	428b      	cmp	r3, r1
 80062d0:	d101      	bne.n	80062d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80062d2:	4b54      	ldr	r3, [pc, #336]	; (8006424 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80062d4:	e001      	b.n	80062da <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80062d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80062de:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80062e0:	2300      	movs	r3, #0
 80062e2:	60bb      	str	r3, [r7, #8]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	60bb      	str	r3, [r7, #8]
 80062ec:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fa:	f043 0204 	orr.w	r2, r3, #4
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7ff fe12 	bl	8005f2c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006308:	e084      	b.n	8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b02      	cmp	r3, #2
 8006312:	d107      	bne.n	8006324 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631a:	2b00      	cmp	r3, #0
 800631c:	d002      	beq.n	8006324 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f8be 	bl	80064a0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b01      	cmp	r3, #1
 800632c:	d107      	bne.n	800633e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f8fd 	bl	8006538 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006344:	2b40      	cmp	r3, #64	; 0x40
 8006346:	d12f      	bne.n	80063a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f003 0320 	and.w	r3, r3, #32
 800634e:	2b00      	cmp	r3, #0
 8006350:	d02a      	beq.n	80063a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006360:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a2e      	ldr	r2, [pc, #184]	; (8006420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d101      	bne.n	8006370 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800636c:	4b2d      	ldr	r3, [pc, #180]	; (8006424 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800636e:	e001      	b.n	8006374 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006370:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4929      	ldr	r1, [pc, #164]	; (8006420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800637c:	428b      	cmp	r3, r1
 800637e:	d101      	bne.n	8006384 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006380:	4b28      	ldr	r3, [pc, #160]	; (8006424 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006382:	e001      	b.n	8006388 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006384:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006388:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800638c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639a:	f043 0202 	orr.w	r2, r3, #2
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7ff fdc2 	bl	8005f2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	f003 0308 	and.w	r3, r3, #8
 80063ae:	2b08      	cmp	r3, #8
 80063b0:	d131      	bne.n	8006416 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	f003 0320 	and.w	r3, r3, #32
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d02c      	beq.n	8006416 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a17      	ldr	r2, [pc, #92]	; (8006420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d101      	bne.n	80063ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80063c6:	4b17      	ldr	r3, [pc, #92]	; (8006424 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80063c8:	e001      	b.n	80063ce <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80063ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4912      	ldr	r1, [pc, #72]	; (8006420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80063d6:	428b      	cmp	r3, r1
 80063d8:	d101      	bne.n	80063de <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80063da:	4b12      	ldr	r3, [pc, #72]	; (8006424 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80063dc:	e001      	b.n	80063e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80063de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80063e6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063f6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006404:	f043 0204 	orr.w	r2, r3, #4
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff fd8d 	bl	8005f2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006412:	e000      	b.n	8006416 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006414:	bf00      	nop
}
 8006416:	bf00      	nop
 8006418:	3720      	adds	r7, #32
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	40003800 	.word	0x40003800
 8006424:	40003400 	.word	0x40003400

08006428 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	1c99      	adds	r1, r3, #2
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	6251      	str	r1, [r2, #36]	; 0x24
 800644e:	881a      	ldrh	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800645a:	b29b      	uxth	r3, r3
 800645c:	3b01      	subs	r3, #1
 800645e:	b29a      	uxth	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006468:	b29b      	uxth	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d113      	bne.n	8006496 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800647c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006482:	b29b      	uxth	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	d106      	bne.n	8006496 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7ff ffc9 	bl	8006428 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006496:	bf00      	nop
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	1c99      	adds	r1, r3, #2
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6251      	str	r1, [r2, #36]	; 0x24
 80064b2:	8819      	ldrh	r1, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a1d      	ldr	r2, [pc, #116]	; (8006530 <I2SEx_TxISR_I2SExt+0x90>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d101      	bne.n	80064c2 <I2SEx_TxISR_I2SExt+0x22>
 80064be:	4b1d      	ldr	r3, [pc, #116]	; (8006534 <I2SEx_TxISR_I2SExt+0x94>)
 80064c0:	e001      	b.n	80064c6 <I2SEx_TxISR_I2SExt+0x26>
 80064c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064c6:	460a      	mov	r2, r1
 80064c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064dc:	b29b      	uxth	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d121      	bne.n	8006526 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a12      	ldr	r2, [pc, #72]	; (8006530 <I2SEx_TxISR_I2SExt+0x90>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d101      	bne.n	80064f0 <I2SEx_TxISR_I2SExt+0x50>
 80064ec:	4b11      	ldr	r3, [pc, #68]	; (8006534 <I2SEx_TxISR_I2SExt+0x94>)
 80064ee:	e001      	b.n	80064f4 <I2SEx_TxISR_I2SExt+0x54>
 80064f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	490d      	ldr	r1, [pc, #52]	; (8006530 <I2SEx_TxISR_I2SExt+0x90>)
 80064fc:	428b      	cmp	r3, r1
 80064fe:	d101      	bne.n	8006504 <I2SEx_TxISR_I2SExt+0x64>
 8006500:	4b0c      	ldr	r3, [pc, #48]	; (8006534 <I2SEx_TxISR_I2SExt+0x94>)
 8006502:	e001      	b.n	8006508 <I2SEx_TxISR_I2SExt+0x68>
 8006504:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006508:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800650c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006512:	b29b      	uxth	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d106      	bne.n	8006526 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f7ff ff81 	bl	8006428 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006526:	bf00      	nop
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	40003800 	.word	0x40003800
 8006534:	40003400 	.word	0x40003400

08006538 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68d8      	ldr	r0, [r3, #12]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654a:	1c99      	adds	r1, r3, #2
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006550:	b282      	uxth	r2, r0
 8006552:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006558:	b29b      	uxth	r3, r3
 800655a:	3b01      	subs	r3, #1
 800655c:	b29a      	uxth	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006566:	b29b      	uxth	r3, r3
 8006568:	2b00      	cmp	r3, #0
 800656a:	d113      	bne.n	8006594 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800657a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006580:	b29b      	uxth	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d106      	bne.n	8006594 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7ff ff4a 	bl	8006428 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006594:	bf00      	nop
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a20      	ldr	r2, [pc, #128]	; (800662c <I2SEx_RxISR_I2SExt+0x90>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d101      	bne.n	80065b2 <I2SEx_RxISR_I2SExt+0x16>
 80065ae:	4b20      	ldr	r3, [pc, #128]	; (8006630 <I2SEx_RxISR_I2SExt+0x94>)
 80065b0:	e001      	b.n	80065b6 <I2SEx_RxISR_I2SExt+0x1a>
 80065b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065b6:	68d8      	ldr	r0, [r3, #12]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065bc:	1c99      	adds	r1, r3, #2
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80065c2:	b282      	uxth	r2, r0
 80065c4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	3b01      	subs	r3, #1
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065d8:	b29b      	uxth	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d121      	bne.n	8006622 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a12      	ldr	r2, [pc, #72]	; (800662c <I2SEx_RxISR_I2SExt+0x90>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d101      	bne.n	80065ec <I2SEx_RxISR_I2SExt+0x50>
 80065e8:	4b11      	ldr	r3, [pc, #68]	; (8006630 <I2SEx_RxISR_I2SExt+0x94>)
 80065ea:	e001      	b.n	80065f0 <I2SEx_RxISR_I2SExt+0x54>
 80065ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	490d      	ldr	r1, [pc, #52]	; (800662c <I2SEx_RxISR_I2SExt+0x90>)
 80065f8:	428b      	cmp	r3, r1
 80065fa:	d101      	bne.n	8006600 <I2SEx_RxISR_I2SExt+0x64>
 80065fc:	4b0c      	ldr	r3, [pc, #48]	; (8006630 <I2SEx_RxISR_I2SExt+0x94>)
 80065fe:	e001      	b.n	8006604 <I2SEx_RxISR_I2SExt+0x68>
 8006600:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006604:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006608:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660e:	b29b      	uxth	r3, r3
 8006610:	2b00      	cmp	r3, #0
 8006612:	d106      	bne.n	8006622 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff ff03 	bl	8006428 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006622:	bf00      	nop
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	40003800 	.word	0x40003800
 8006630:	40003400 	.word	0x40003400

08006634 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e264      	b.n	8006b10 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	d075      	beq.n	800673e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006652:	4ba3      	ldr	r3, [pc, #652]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f003 030c 	and.w	r3, r3, #12
 800665a:	2b04      	cmp	r3, #4
 800665c:	d00c      	beq.n	8006678 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800665e:	4ba0      	ldr	r3, [pc, #640]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006666:	2b08      	cmp	r3, #8
 8006668:	d112      	bne.n	8006690 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800666a:	4b9d      	ldr	r3, [pc, #628]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006672:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006676:	d10b      	bne.n	8006690 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006678:	4b99      	ldr	r3, [pc, #612]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d05b      	beq.n	800673c <HAL_RCC_OscConfig+0x108>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d157      	bne.n	800673c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e23f      	b.n	8006b10 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006698:	d106      	bne.n	80066a8 <HAL_RCC_OscConfig+0x74>
 800669a:	4b91      	ldr	r3, [pc, #580]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a90      	ldr	r2, [pc, #576]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 80066a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	e01d      	b.n	80066e4 <HAL_RCC_OscConfig+0xb0>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066b0:	d10c      	bne.n	80066cc <HAL_RCC_OscConfig+0x98>
 80066b2:	4b8b      	ldr	r3, [pc, #556]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a8a      	ldr	r2, [pc, #552]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 80066b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	4b88      	ldr	r3, [pc, #544]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a87      	ldr	r2, [pc, #540]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 80066c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	e00b      	b.n	80066e4 <HAL_RCC_OscConfig+0xb0>
 80066cc:	4b84      	ldr	r3, [pc, #528]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a83      	ldr	r2, [pc, #524]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 80066d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066d6:	6013      	str	r3, [r2, #0]
 80066d8:	4b81      	ldr	r3, [pc, #516]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a80      	ldr	r2, [pc, #512]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 80066de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d013      	beq.n	8006714 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066ec:	f7fa ff82 	bl	80015f4 <HAL_GetTick>
 80066f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066f2:	e008      	b.n	8006706 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066f4:	f7fa ff7e 	bl	80015f4 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	2b64      	cmp	r3, #100	; 0x64
 8006700:	d901      	bls.n	8006706 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e204      	b.n	8006b10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006706:	4b76      	ldr	r3, [pc, #472]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0f0      	beq.n	80066f4 <HAL_RCC_OscConfig+0xc0>
 8006712:	e014      	b.n	800673e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006714:	f7fa ff6e 	bl	80015f4 <HAL_GetTick>
 8006718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800671a:	e008      	b.n	800672e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800671c:	f7fa ff6a 	bl	80015f4 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b64      	cmp	r3, #100	; 0x64
 8006728:	d901      	bls.n	800672e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e1f0      	b.n	8006b10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800672e:	4b6c      	ldr	r3, [pc, #432]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1f0      	bne.n	800671c <HAL_RCC_OscConfig+0xe8>
 800673a:	e000      	b.n	800673e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800673c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d063      	beq.n	8006812 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800674a:	4b65      	ldr	r3, [pc, #404]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f003 030c 	and.w	r3, r3, #12
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00b      	beq.n	800676e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006756:	4b62      	ldr	r3, [pc, #392]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800675e:	2b08      	cmp	r3, #8
 8006760:	d11c      	bne.n	800679c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006762:	4b5f      	ldr	r3, [pc, #380]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d116      	bne.n	800679c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800676e:	4b5c      	ldr	r3, [pc, #368]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b00      	cmp	r3, #0
 8006778:	d005      	beq.n	8006786 <HAL_RCC_OscConfig+0x152>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d001      	beq.n	8006786 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e1c4      	b.n	8006b10 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006786:	4b56      	ldr	r3, [pc, #344]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	00db      	lsls	r3, r3, #3
 8006794:	4952      	ldr	r1, [pc, #328]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 8006796:	4313      	orrs	r3, r2
 8006798:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800679a:	e03a      	b.n	8006812 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d020      	beq.n	80067e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067a4:	4b4f      	ldr	r3, [pc, #316]	; (80068e4 <HAL_RCC_OscConfig+0x2b0>)
 80067a6:	2201      	movs	r2, #1
 80067a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067aa:	f7fa ff23 	bl	80015f4 <HAL_GetTick>
 80067ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067b0:	e008      	b.n	80067c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067b2:	f7fa ff1f 	bl	80015f4 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d901      	bls.n	80067c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e1a5      	b.n	8006b10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067c4:	4b46      	ldr	r3, [pc, #280]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0f0      	beq.n	80067b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067d0:	4b43      	ldr	r3, [pc, #268]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	00db      	lsls	r3, r3, #3
 80067de:	4940      	ldr	r1, [pc, #256]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	600b      	str	r3, [r1, #0]
 80067e4:	e015      	b.n	8006812 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067e6:	4b3f      	ldr	r3, [pc, #252]	; (80068e4 <HAL_RCC_OscConfig+0x2b0>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ec:	f7fa ff02 	bl	80015f4 <HAL_GetTick>
 80067f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067f4:	f7fa fefe 	bl	80015f4 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e184      	b.n	8006b10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006806:	4b36      	ldr	r3, [pc, #216]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1f0      	bne.n	80067f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0308 	and.w	r3, r3, #8
 800681a:	2b00      	cmp	r3, #0
 800681c:	d030      	beq.n	8006880 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d016      	beq.n	8006854 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006826:	4b30      	ldr	r3, [pc, #192]	; (80068e8 <HAL_RCC_OscConfig+0x2b4>)
 8006828:	2201      	movs	r2, #1
 800682a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800682c:	f7fa fee2 	bl	80015f4 <HAL_GetTick>
 8006830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006832:	e008      	b.n	8006846 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006834:	f7fa fede 	bl	80015f4 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	2b02      	cmp	r3, #2
 8006840:	d901      	bls.n	8006846 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e164      	b.n	8006b10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006846:	4b26      	ldr	r3, [pc, #152]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 8006848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d0f0      	beq.n	8006834 <HAL_RCC_OscConfig+0x200>
 8006852:	e015      	b.n	8006880 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006854:	4b24      	ldr	r3, [pc, #144]	; (80068e8 <HAL_RCC_OscConfig+0x2b4>)
 8006856:	2200      	movs	r2, #0
 8006858:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800685a:	f7fa fecb 	bl	80015f4 <HAL_GetTick>
 800685e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006860:	e008      	b.n	8006874 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006862:	f7fa fec7 	bl	80015f4 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	2b02      	cmp	r3, #2
 800686e:	d901      	bls.n	8006874 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e14d      	b.n	8006b10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006874:	4b1a      	ldr	r3, [pc, #104]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 8006876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006878:	f003 0302 	and.w	r3, r3, #2
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1f0      	bne.n	8006862 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 80a0 	beq.w	80069ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800688e:	2300      	movs	r3, #0
 8006890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006892:	4b13      	ldr	r3, [pc, #76]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10f      	bne.n	80068be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800689e:	2300      	movs	r3, #0
 80068a0:	60bb      	str	r3, [r7, #8]
 80068a2:	4b0f      	ldr	r3, [pc, #60]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 80068a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a6:	4a0e      	ldr	r2, [pc, #56]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 80068a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ac:	6413      	str	r3, [r2, #64]	; 0x40
 80068ae:	4b0c      	ldr	r3, [pc, #48]	; (80068e0 <HAL_RCC_OscConfig+0x2ac>)
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068b6:	60bb      	str	r3, [r7, #8]
 80068b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068ba:	2301      	movs	r3, #1
 80068bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068be:	4b0b      	ldr	r3, [pc, #44]	; (80068ec <HAL_RCC_OscConfig+0x2b8>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d121      	bne.n	800690e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068ca:	4b08      	ldr	r3, [pc, #32]	; (80068ec <HAL_RCC_OscConfig+0x2b8>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a07      	ldr	r2, [pc, #28]	; (80068ec <HAL_RCC_OscConfig+0x2b8>)
 80068d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068d6:	f7fa fe8d 	bl	80015f4 <HAL_GetTick>
 80068da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068dc:	e011      	b.n	8006902 <HAL_RCC_OscConfig+0x2ce>
 80068de:	bf00      	nop
 80068e0:	40023800 	.word	0x40023800
 80068e4:	42470000 	.word	0x42470000
 80068e8:	42470e80 	.word	0x42470e80
 80068ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068f0:	f7fa fe80 	bl	80015f4 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d901      	bls.n	8006902 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e106      	b.n	8006b10 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006902:	4b85      	ldr	r3, [pc, #532]	; (8006b18 <HAL_RCC_OscConfig+0x4e4>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800690a:	2b00      	cmp	r3, #0
 800690c:	d0f0      	beq.n	80068f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d106      	bne.n	8006924 <HAL_RCC_OscConfig+0x2f0>
 8006916:	4b81      	ldr	r3, [pc, #516]	; (8006b1c <HAL_RCC_OscConfig+0x4e8>)
 8006918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691a:	4a80      	ldr	r2, [pc, #512]	; (8006b1c <HAL_RCC_OscConfig+0x4e8>)
 800691c:	f043 0301 	orr.w	r3, r3, #1
 8006920:	6713      	str	r3, [r2, #112]	; 0x70
 8006922:	e01c      	b.n	800695e <HAL_RCC_OscConfig+0x32a>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	2b05      	cmp	r3, #5
 800692a:	d10c      	bne.n	8006946 <HAL_RCC_OscConfig+0x312>
 800692c:	4b7b      	ldr	r3, [pc, #492]	; (8006b1c <HAL_RCC_OscConfig+0x4e8>)
 800692e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006930:	4a7a      	ldr	r2, [pc, #488]	; (8006b1c <HAL_RCC_OscConfig+0x4e8>)
 8006932:	f043 0304 	orr.w	r3, r3, #4
 8006936:	6713      	str	r3, [r2, #112]	; 0x70
 8006938:	4b78      	ldr	r3, [pc, #480]	; (8006b1c <HAL_RCC_OscConfig+0x4e8>)
 800693a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693c:	4a77      	ldr	r2, [pc, #476]	; (8006b1c <HAL_RCC_OscConfig+0x4e8>)
 800693e:	f043 0301 	orr.w	r3, r3, #1
 8006942:	6713      	str	r3, [r2, #112]	; 0x70
 8006944:	e00b      	b.n	800695e <HAL_RCC_OscConfig+0x32a>
 8006946:	4b75      	ldr	r3, [pc, #468]	; (8006b1c <HAL_RCC_OscConfig+0x4e8>)
 8006948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694a:	4a74      	ldr	r2, [pc, #464]	; (8006b1c <HAL_RCC_OscConfig+0x4e8>)
 800694c:	f023 0301 	bic.w	r3, r3, #1
 8006950:	6713      	str	r3, [r2, #112]	; 0x70
 8006952:	4b72      	ldr	r3, [pc, #456]	; (8006b1c <HAL_RCC_OscConfig+0x4e8>)
 8006954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006956:	4a71      	ldr	r2, [pc, #452]	; (8006b1c <HAL_RCC_OscConfig+0x4e8>)
 8006958:	f023 0304 	bic.w	r3, r3, #4
 800695c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d015      	beq.n	8006992 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006966:	f7fa fe45 	bl	80015f4 <HAL_GetTick>
 800696a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800696c:	e00a      	b.n	8006984 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800696e:	f7fa fe41 	bl	80015f4 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	f241 3288 	movw	r2, #5000	; 0x1388
 800697c:	4293      	cmp	r3, r2
 800697e:	d901      	bls.n	8006984 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e0c5      	b.n	8006b10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006984:	4b65      	ldr	r3, [pc, #404]	; (8006b1c <HAL_RCC_OscConfig+0x4e8>)
 8006986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d0ee      	beq.n	800696e <HAL_RCC_OscConfig+0x33a>
 8006990:	e014      	b.n	80069bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006992:	f7fa fe2f 	bl	80015f4 <HAL_GetTick>
 8006996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006998:	e00a      	b.n	80069b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800699a:	f7fa fe2b 	bl	80015f4 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d901      	bls.n	80069b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e0af      	b.n	8006b10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069b0:	4b5a      	ldr	r3, [pc, #360]	; (8006b1c <HAL_RCC_OscConfig+0x4e8>)
 80069b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b4:	f003 0302 	and.w	r3, r3, #2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1ee      	bne.n	800699a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069bc:	7dfb      	ldrb	r3, [r7, #23]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d105      	bne.n	80069ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069c2:	4b56      	ldr	r3, [pc, #344]	; (8006b1c <HAL_RCC_OscConfig+0x4e8>)
 80069c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c6:	4a55      	ldr	r2, [pc, #340]	; (8006b1c <HAL_RCC_OscConfig+0x4e8>)
 80069c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 809b 	beq.w	8006b0e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069d8:	4b50      	ldr	r3, [pc, #320]	; (8006b1c <HAL_RCC_OscConfig+0x4e8>)
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f003 030c 	and.w	r3, r3, #12
 80069e0:	2b08      	cmp	r3, #8
 80069e2:	d05c      	beq.n	8006a9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d141      	bne.n	8006a70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ec:	4b4c      	ldr	r3, [pc, #304]	; (8006b20 <HAL_RCC_OscConfig+0x4ec>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069f2:	f7fa fdff 	bl	80015f4 <HAL_GetTick>
 80069f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069f8:	e008      	b.n	8006a0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069fa:	f7fa fdfb 	bl	80015f4 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d901      	bls.n	8006a0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e081      	b.n	8006b10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a0c:	4b43      	ldr	r3, [pc, #268]	; (8006b1c <HAL_RCC_OscConfig+0x4e8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1f0      	bne.n	80069fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	69da      	ldr	r2, [r3, #28]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a1b      	ldr	r3, [r3, #32]
 8006a20:	431a      	orrs	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	019b      	lsls	r3, r3, #6
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2e:	085b      	lsrs	r3, r3, #1
 8006a30:	3b01      	subs	r3, #1
 8006a32:	041b      	lsls	r3, r3, #16
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3a:	061b      	lsls	r3, r3, #24
 8006a3c:	4937      	ldr	r1, [pc, #220]	; (8006b1c <HAL_RCC_OscConfig+0x4e8>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a42:	4b37      	ldr	r3, [pc, #220]	; (8006b20 <HAL_RCC_OscConfig+0x4ec>)
 8006a44:	2201      	movs	r2, #1
 8006a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a48:	f7fa fdd4 	bl	80015f4 <HAL_GetTick>
 8006a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a4e:	e008      	b.n	8006a62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a50:	f7fa fdd0 	bl	80015f4 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d901      	bls.n	8006a62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e056      	b.n	8006b10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a62:	4b2e      	ldr	r3, [pc, #184]	; (8006b1c <HAL_RCC_OscConfig+0x4e8>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d0f0      	beq.n	8006a50 <HAL_RCC_OscConfig+0x41c>
 8006a6e:	e04e      	b.n	8006b0e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a70:	4b2b      	ldr	r3, [pc, #172]	; (8006b20 <HAL_RCC_OscConfig+0x4ec>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a76:	f7fa fdbd 	bl	80015f4 <HAL_GetTick>
 8006a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a7c:	e008      	b.n	8006a90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a7e:	f7fa fdb9 	bl	80015f4 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d901      	bls.n	8006a90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e03f      	b.n	8006b10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a90:	4b22      	ldr	r3, [pc, #136]	; (8006b1c <HAL_RCC_OscConfig+0x4e8>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1f0      	bne.n	8006a7e <HAL_RCC_OscConfig+0x44a>
 8006a9c:	e037      	b.n	8006b0e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e032      	b.n	8006b10 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006aaa:	4b1c      	ldr	r3, [pc, #112]	; (8006b1c <HAL_RCC_OscConfig+0x4e8>)
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d028      	beq.n	8006b0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d121      	bne.n	8006b0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d11a      	bne.n	8006b0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006ada:	4013      	ands	r3, r2
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ae0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d111      	bne.n	8006b0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af0:	085b      	lsrs	r3, r3, #1
 8006af2:	3b01      	subs	r3, #1
 8006af4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d107      	bne.n	8006b0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b04:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d001      	beq.n	8006b0e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e000      	b.n	8006b10 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3718      	adds	r7, #24
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	40007000 	.word	0x40007000
 8006b1c:	40023800 	.word	0x40023800
 8006b20:	42470060 	.word	0x42470060

08006b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d101      	bne.n	8006b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e0cc      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b38:	4b68      	ldr	r3, [pc, #416]	; (8006cdc <HAL_RCC_ClockConfig+0x1b8>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0307 	and.w	r3, r3, #7
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d90c      	bls.n	8006b60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b46:	4b65      	ldr	r3, [pc, #404]	; (8006cdc <HAL_RCC_ClockConfig+0x1b8>)
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	b2d2      	uxtb	r2, r2
 8006b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b4e:	4b63      	ldr	r3, [pc, #396]	; (8006cdc <HAL_RCC_ClockConfig+0x1b8>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0307 	and.w	r3, r3, #7
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d001      	beq.n	8006b60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e0b8      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0302 	and.w	r3, r3, #2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d020      	beq.n	8006bae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0304 	and.w	r3, r3, #4
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d005      	beq.n	8006b84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b78:	4b59      	ldr	r3, [pc, #356]	; (8006ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	4a58      	ldr	r2, [pc, #352]	; (8006ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0308 	and.w	r3, r3, #8
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d005      	beq.n	8006b9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b90:	4b53      	ldr	r3, [pc, #332]	; (8006ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	4a52      	ldr	r2, [pc, #328]	; (8006ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b9c:	4b50      	ldr	r3, [pc, #320]	; (8006ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	494d      	ldr	r1, [pc, #308]	; (8006ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d044      	beq.n	8006c44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d107      	bne.n	8006bd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bc2:	4b47      	ldr	r3, [pc, #284]	; (8006ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d119      	bne.n	8006c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e07f      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d003      	beq.n	8006be2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d107      	bne.n	8006bf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006be2:	4b3f      	ldr	r3, [pc, #252]	; (8006ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d109      	bne.n	8006c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e06f      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bf2:	4b3b      	ldr	r3, [pc, #236]	; (8006ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d101      	bne.n	8006c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e067      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c02:	4b37      	ldr	r3, [pc, #220]	; (8006ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f023 0203 	bic.w	r2, r3, #3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	4934      	ldr	r1, [pc, #208]	; (8006ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c14:	f7fa fcee 	bl	80015f4 <HAL_GetTick>
 8006c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c1a:	e00a      	b.n	8006c32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c1c:	f7fa fcea 	bl	80015f4 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e04f      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c32:	4b2b      	ldr	r3, [pc, #172]	; (8006ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f003 020c 	and.w	r2, r3, #12
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d1eb      	bne.n	8006c1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c44:	4b25      	ldr	r3, [pc, #148]	; (8006cdc <HAL_RCC_ClockConfig+0x1b8>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d20c      	bcs.n	8006c6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c52:	4b22      	ldr	r3, [pc, #136]	; (8006cdc <HAL_RCC_ClockConfig+0x1b8>)
 8006c54:	683a      	ldr	r2, [r7, #0]
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c5a:	4b20      	ldr	r3, [pc, #128]	; (8006cdc <HAL_RCC_ClockConfig+0x1b8>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0307 	and.w	r3, r3, #7
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d001      	beq.n	8006c6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e032      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d008      	beq.n	8006c8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c78:	4b19      	ldr	r3, [pc, #100]	; (8006ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	4916      	ldr	r1, [pc, #88]	; (8006ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0308 	and.w	r3, r3, #8
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d009      	beq.n	8006caa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c96:	4b12      	ldr	r3, [pc, #72]	; (8006ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	490e      	ldr	r1, [pc, #56]	; (8006ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006caa:	f000 f821 	bl	8006cf0 <HAL_RCC_GetSysClockFreq>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	4b0b      	ldr	r3, [pc, #44]	; (8006ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	091b      	lsrs	r3, r3, #4
 8006cb6:	f003 030f 	and.w	r3, r3, #15
 8006cba:	490a      	ldr	r1, [pc, #40]	; (8006ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8006cbc:	5ccb      	ldrb	r3, [r1, r3]
 8006cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc2:	4a09      	ldr	r2, [pc, #36]	; (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006cc6:	4b09      	ldr	r3, [pc, #36]	; (8006cec <HAL_RCC_ClockConfig+0x1c8>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7fa fc4e 	bl	800156c <HAL_InitTick>

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	40023c00 	.word	0x40023c00
 8006ce0:	40023800 	.word	0x40023800
 8006ce4:	0808639c 	.word	0x0808639c
 8006ce8:	2000000c 	.word	0x2000000c
 8006cec:	20000010 	.word	0x20000010

08006cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cf0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006cf4:	b084      	sub	sp, #16
 8006cf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	607b      	str	r3, [r7, #4]
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	2300      	movs	r3, #0
 8006d02:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d08:	4b67      	ldr	r3, [pc, #412]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f003 030c 	and.w	r3, r3, #12
 8006d10:	2b08      	cmp	r3, #8
 8006d12:	d00d      	beq.n	8006d30 <HAL_RCC_GetSysClockFreq+0x40>
 8006d14:	2b08      	cmp	r3, #8
 8006d16:	f200 80bd 	bhi.w	8006e94 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d002      	beq.n	8006d24 <HAL_RCC_GetSysClockFreq+0x34>
 8006d1e:	2b04      	cmp	r3, #4
 8006d20:	d003      	beq.n	8006d2a <HAL_RCC_GetSysClockFreq+0x3a>
 8006d22:	e0b7      	b.n	8006e94 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d24:	4b61      	ldr	r3, [pc, #388]	; (8006eac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006d26:	60bb      	str	r3, [r7, #8]
       break;
 8006d28:	e0b7      	b.n	8006e9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d2a:	4b61      	ldr	r3, [pc, #388]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006d2c:	60bb      	str	r3, [r7, #8]
      break;
 8006d2e:	e0b4      	b.n	8006e9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d30:	4b5d      	ldr	r3, [pc, #372]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d38:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d3a:	4b5b      	ldr	r3, [pc, #364]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d04d      	beq.n	8006de2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d46:	4b58      	ldr	r3, [pc, #352]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	099b      	lsrs	r3, r3, #6
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f04f 0300 	mov.w	r3, #0
 8006d52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006d56:	f04f 0100 	mov.w	r1, #0
 8006d5a:	ea02 0800 	and.w	r8, r2, r0
 8006d5e:	ea03 0901 	and.w	r9, r3, r1
 8006d62:	4640      	mov	r0, r8
 8006d64:	4649      	mov	r1, r9
 8006d66:	f04f 0200 	mov.w	r2, #0
 8006d6a:	f04f 0300 	mov.w	r3, #0
 8006d6e:	014b      	lsls	r3, r1, #5
 8006d70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006d74:	0142      	lsls	r2, r0, #5
 8006d76:	4610      	mov	r0, r2
 8006d78:	4619      	mov	r1, r3
 8006d7a:	ebb0 0008 	subs.w	r0, r0, r8
 8006d7e:	eb61 0109 	sbc.w	r1, r1, r9
 8006d82:	f04f 0200 	mov.w	r2, #0
 8006d86:	f04f 0300 	mov.w	r3, #0
 8006d8a:	018b      	lsls	r3, r1, #6
 8006d8c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006d90:	0182      	lsls	r2, r0, #6
 8006d92:	1a12      	subs	r2, r2, r0
 8006d94:	eb63 0301 	sbc.w	r3, r3, r1
 8006d98:	f04f 0000 	mov.w	r0, #0
 8006d9c:	f04f 0100 	mov.w	r1, #0
 8006da0:	00d9      	lsls	r1, r3, #3
 8006da2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006da6:	00d0      	lsls	r0, r2, #3
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	eb12 0208 	adds.w	r2, r2, r8
 8006db0:	eb43 0309 	adc.w	r3, r3, r9
 8006db4:	f04f 0000 	mov.w	r0, #0
 8006db8:	f04f 0100 	mov.w	r1, #0
 8006dbc:	0259      	lsls	r1, r3, #9
 8006dbe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006dc2:	0250      	lsls	r0, r2, #9
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	4610      	mov	r0, r2
 8006dca:	4619      	mov	r1, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f04f 0300 	mov.w	r3, #0
 8006dd4:	f7f9 fa4c 	bl	8000270 <__aeabi_uldivmod>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	460b      	mov	r3, r1
 8006ddc:	4613      	mov	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	e04a      	b.n	8006e78 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006de2:	4b31      	ldr	r3, [pc, #196]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	099b      	lsrs	r3, r3, #6
 8006de8:	461a      	mov	r2, r3
 8006dea:	f04f 0300 	mov.w	r3, #0
 8006dee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006df2:	f04f 0100 	mov.w	r1, #0
 8006df6:	ea02 0400 	and.w	r4, r2, r0
 8006dfa:	ea03 0501 	and.w	r5, r3, r1
 8006dfe:	4620      	mov	r0, r4
 8006e00:	4629      	mov	r1, r5
 8006e02:	f04f 0200 	mov.w	r2, #0
 8006e06:	f04f 0300 	mov.w	r3, #0
 8006e0a:	014b      	lsls	r3, r1, #5
 8006e0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006e10:	0142      	lsls	r2, r0, #5
 8006e12:	4610      	mov	r0, r2
 8006e14:	4619      	mov	r1, r3
 8006e16:	1b00      	subs	r0, r0, r4
 8006e18:	eb61 0105 	sbc.w	r1, r1, r5
 8006e1c:	f04f 0200 	mov.w	r2, #0
 8006e20:	f04f 0300 	mov.w	r3, #0
 8006e24:	018b      	lsls	r3, r1, #6
 8006e26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006e2a:	0182      	lsls	r2, r0, #6
 8006e2c:	1a12      	subs	r2, r2, r0
 8006e2e:	eb63 0301 	sbc.w	r3, r3, r1
 8006e32:	f04f 0000 	mov.w	r0, #0
 8006e36:	f04f 0100 	mov.w	r1, #0
 8006e3a:	00d9      	lsls	r1, r3, #3
 8006e3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e40:	00d0      	lsls	r0, r2, #3
 8006e42:	4602      	mov	r2, r0
 8006e44:	460b      	mov	r3, r1
 8006e46:	1912      	adds	r2, r2, r4
 8006e48:	eb45 0303 	adc.w	r3, r5, r3
 8006e4c:	f04f 0000 	mov.w	r0, #0
 8006e50:	f04f 0100 	mov.w	r1, #0
 8006e54:	0299      	lsls	r1, r3, #10
 8006e56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006e5a:	0290      	lsls	r0, r2, #10
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4610      	mov	r0, r2
 8006e62:	4619      	mov	r1, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	461a      	mov	r2, r3
 8006e68:	f04f 0300 	mov.w	r3, #0
 8006e6c:	f7f9 fa00 	bl	8000270 <__aeabi_uldivmod>
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4613      	mov	r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e78:	4b0b      	ldr	r3, [pc, #44]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	0c1b      	lsrs	r3, r3, #16
 8006e7e:	f003 0303 	and.w	r3, r3, #3
 8006e82:	3301      	adds	r3, #1
 8006e84:	005b      	lsls	r3, r3, #1
 8006e86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e90:	60bb      	str	r3, [r7, #8]
      break;
 8006e92:	e002      	b.n	8006e9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e94:	4b05      	ldr	r3, [pc, #20]	; (8006eac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006e96:	60bb      	str	r3, [r7, #8]
      break;
 8006e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e9a:	68bb      	ldr	r3, [r7, #8]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006ea6:	bf00      	nop
 8006ea8:	40023800 	.word	0x40023800
 8006eac:	00f42400 	.word	0x00f42400
 8006eb0:	007a1200 	.word	0x007a1200

08006eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006eb8:	4b03      	ldr	r3, [pc, #12]	; (8006ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006eba:	681b      	ldr	r3, [r3, #0]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	2000000c 	.word	0x2000000c

08006ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ed0:	f7ff fff0 	bl	8006eb4 <HAL_RCC_GetHCLKFreq>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	4b05      	ldr	r3, [pc, #20]	; (8006eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	0a9b      	lsrs	r3, r3, #10
 8006edc:	f003 0307 	and.w	r3, r3, #7
 8006ee0:	4903      	ldr	r1, [pc, #12]	; (8006ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ee2:	5ccb      	ldrb	r3, [r1, r3]
 8006ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	40023800 	.word	0x40023800
 8006ef0:	080863ac 	.word	0x080863ac

08006ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ef8:	f7ff ffdc 	bl	8006eb4 <HAL_RCC_GetHCLKFreq>
 8006efc:	4602      	mov	r2, r0
 8006efe:	4b05      	ldr	r3, [pc, #20]	; (8006f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	0b5b      	lsrs	r3, r3, #13
 8006f04:	f003 0307 	and.w	r3, r3, #7
 8006f08:	4903      	ldr	r1, [pc, #12]	; (8006f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f0a:	5ccb      	ldrb	r3, [r1, r3]
 8006f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	40023800 	.word	0x40023800
 8006f18:	080863ac 	.word	0x080863ac

08006f1c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f24:	2300      	movs	r3, #0
 8006f26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d105      	bne.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d035      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f44:	4b62      	ldr	r3, [pc, #392]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f4a:	f7fa fb53 	bl	80015f4 <HAL_GetTick>
 8006f4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f50:	e008      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f52:	f7fa fb4f 	bl	80015f4 <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d901      	bls.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e0b0      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f64:	4b5b      	ldr	r3, [pc, #364]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1f0      	bne.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	019a      	lsls	r2, r3, #6
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	071b      	lsls	r3, r3, #28
 8006f7c:	4955      	ldr	r1, [pc, #340]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006f84:	4b52      	ldr	r3, [pc, #328]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006f86:	2201      	movs	r2, #1
 8006f88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f8a:	f7fa fb33 	bl	80015f4 <HAL_GetTick>
 8006f8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f90:	e008      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f92:	f7fa fb2f 	bl	80015f4 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d901      	bls.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e090      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fa4:	4b4b      	ldr	r3, [pc, #300]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d0f0      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0302 	and.w	r3, r3, #2
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f000 8083 	beq.w	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60fb      	str	r3, [r7, #12]
 8006fc2:	4b44      	ldr	r3, [pc, #272]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc6:	4a43      	ldr	r2, [pc, #268]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8006fce:	4b41      	ldr	r3, [pc, #260]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fd6:	60fb      	str	r3, [r7, #12]
 8006fd8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006fda:	4b3f      	ldr	r3, [pc, #252]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a3e      	ldr	r2, [pc, #248]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fe4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006fe6:	f7fa fb05 	bl	80015f4 <HAL_GetTick>
 8006fea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006fec:	e008      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006fee:	f7fa fb01 	bl	80015f4 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d901      	bls.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e062      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007000:	4b35      	ldr	r3, [pc, #212]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007008:	2b00      	cmp	r3, #0
 800700a:	d0f0      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800700c:	4b31      	ldr	r3, [pc, #196]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800700e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007014:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d02f      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	429a      	cmp	r2, r3
 8007028:	d028      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800702a:	4b2a      	ldr	r3, [pc, #168]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800702c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800702e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007032:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007034:	4b29      	ldr	r3, [pc, #164]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007036:	2201      	movs	r2, #1
 8007038:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800703a:	4b28      	ldr	r3, [pc, #160]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800703c:	2200      	movs	r2, #0
 800703e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007040:	4a24      	ldr	r2, [pc, #144]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007046:	4b23      	ldr	r3, [pc, #140]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b01      	cmp	r3, #1
 8007050:	d114      	bne.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007052:	f7fa facf 	bl	80015f4 <HAL_GetTick>
 8007056:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007058:	e00a      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800705a:	f7fa facb 	bl	80015f4 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	f241 3288 	movw	r2, #5000	; 0x1388
 8007068:	4293      	cmp	r3, r2
 800706a:	d901      	bls.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e02a      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007070:	4b18      	ldr	r3, [pc, #96]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007074:	f003 0302 	and.w	r3, r3, #2
 8007078:	2b00      	cmp	r3, #0
 800707a:	d0ee      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007084:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007088:	d10d      	bne.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800708a:	4b12      	ldr	r3, [pc, #72]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800709a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800709e:	490d      	ldr	r1, [pc, #52]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	608b      	str	r3, [r1, #8]
 80070a4:	e005      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80070a6:	4b0b      	ldr	r3, [pc, #44]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	4a0a      	ldr	r2, [pc, #40]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80070b0:	6093      	str	r3, [r2, #8]
 80070b2:	4b08      	ldr	r3, [pc, #32]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070be:	4905      	ldr	r1, [pc, #20]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3718      	adds	r7, #24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	42470068 	.word	0x42470068
 80070d4:	40023800 	.word	0x40023800
 80070d8:	40007000 	.word	0x40007000
 80070dc:	42470e40 	.word	0x42470e40

080070e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80070e8:	2300      	movs	r3, #0
 80070ea:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80070ec:	2300      	movs	r3, #0
 80070ee:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d13e      	bne.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80070fe:	4b23      	ldr	r3, [pc, #140]	; (800718c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007106:	60fb      	str	r3, [r7, #12]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d005      	beq.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d12f      	bne.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007114:	4b1e      	ldr	r3, [pc, #120]	; (8007190 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007116:	617b      	str	r3, [r7, #20]
          break;
 8007118:	e02f      	b.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800711a:	4b1c      	ldr	r3, [pc, #112]	; (800718c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007122:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007126:	d108      	bne.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007128:	4b18      	ldr	r3, [pc, #96]	; (800718c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007130:	4a18      	ldr	r2, [pc, #96]	; (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007132:	fbb2 f3f3 	udiv	r3, r2, r3
 8007136:	613b      	str	r3, [r7, #16]
 8007138:	e007      	b.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800713a:	4b14      	ldr	r3, [pc, #80]	; (800718c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007142:	4a15      	ldr	r2, [pc, #84]	; (8007198 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007144:	fbb2 f3f3 	udiv	r3, r2, r3
 8007148:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800714a:	4b10      	ldr	r3, [pc, #64]	; (800718c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800714c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007150:	099b      	lsrs	r3, r3, #6
 8007152:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	fb02 f303 	mul.w	r3, r2, r3
 800715c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800715e:	4b0b      	ldr	r3, [pc, #44]	; (800718c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007164:	0f1b      	lsrs	r3, r3, #28
 8007166:	f003 0307 	and.w	r3, r3, #7
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007170:	617b      	str	r3, [r7, #20]
          break;
 8007172:	e002      	b.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	617b      	str	r3, [r7, #20]
          break;
 8007178:	bf00      	nop
        }
      }
      break;
 800717a:	bf00      	nop
    }
  }
  return frequency;
 800717c:	697b      	ldr	r3, [r7, #20]
}
 800717e:	4618      	mov	r0, r3
 8007180:	371c      	adds	r7, #28
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	40023800 	.word	0x40023800
 8007190:	00bb8000 	.word	0x00bb8000
 8007194:	007a1200 	.word	0x007a1200
 8007198:	00f42400 	.word	0x00f42400

0800719c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e03f      	b.n	800722e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d106      	bne.n	80071c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7fa f816 	bl	80011f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2224      	movs	r2, #36	; 0x24
 80071cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68da      	ldr	r2, [r3, #12]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f929 	bl	8007438 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	691a      	ldr	r2, [r3, #16]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	695a      	ldr	r2, [r3, #20]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007204:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68da      	ldr	r2, [r3, #12]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007214:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2220      	movs	r2, #32
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2220      	movs	r2, #32
 8007228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b08a      	sub	sp, #40	; 0x28
 800723a:	af02      	add	r7, sp, #8
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	603b      	str	r3, [r7, #0]
 8007242:	4613      	mov	r3, r2
 8007244:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007246:	2300      	movs	r3, #0
 8007248:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b20      	cmp	r3, #32
 8007254:	d17c      	bne.n	8007350 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <HAL_UART_Transmit+0x2c>
 800725c:	88fb      	ldrh	r3, [r7, #6]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e075      	b.n	8007352 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800726c:	2b01      	cmp	r3, #1
 800726e:	d101      	bne.n	8007274 <HAL_UART_Transmit+0x3e>
 8007270:	2302      	movs	r3, #2
 8007272:	e06e      	b.n	8007352 <HAL_UART_Transmit+0x11c>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2221      	movs	r2, #33	; 0x21
 8007286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800728a:	f7fa f9b3 	bl	80015f4 <HAL_GetTick>
 800728e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	88fa      	ldrh	r2, [r7, #6]
 8007294:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	88fa      	ldrh	r2, [r7, #6]
 800729a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072a4:	d108      	bne.n	80072b8 <HAL_UART_Transmit+0x82>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d104      	bne.n	80072b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80072ae:	2300      	movs	r3, #0
 80072b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	61bb      	str	r3, [r7, #24]
 80072b6:	e003      	b.n	80072c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072bc:	2300      	movs	r3, #0
 80072be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80072c8:	e02a      	b.n	8007320 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2200      	movs	r2, #0
 80072d2:	2180      	movs	r1, #128	; 0x80
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f000 f840 	bl	800735a <UART_WaitOnFlagUntilTimeout>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d001      	beq.n	80072e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e036      	b.n	8007352 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10b      	bne.n	8007302 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	881b      	ldrh	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	3302      	adds	r3, #2
 80072fe:	61bb      	str	r3, [r7, #24]
 8007300:	e007      	b.n	8007312 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	781a      	ldrb	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	3301      	adds	r3, #1
 8007310:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007316:	b29b      	uxth	r3, r3
 8007318:	3b01      	subs	r3, #1
 800731a:	b29a      	uxth	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007324:	b29b      	uxth	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1cf      	bne.n	80072ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	2200      	movs	r2, #0
 8007332:	2140      	movs	r1, #64	; 0x40
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 f810 	bl	800735a <UART_WaitOnFlagUntilTimeout>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d001      	beq.n	8007344 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e006      	b.n	8007352 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2220      	movs	r2, #32
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	e000      	b.n	8007352 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007350:	2302      	movs	r3, #2
  }
}
 8007352:	4618      	mov	r0, r3
 8007354:	3720      	adds	r7, #32
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b090      	sub	sp, #64	; 0x40
 800735e:	af00      	add	r7, sp, #0
 8007360:	60f8      	str	r0, [r7, #12]
 8007362:	60b9      	str	r1, [r7, #8]
 8007364:	603b      	str	r3, [r7, #0]
 8007366:	4613      	mov	r3, r2
 8007368:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800736a:	e050      	b.n	800740e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800736c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800736e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007372:	d04c      	beq.n	800740e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007376:	2b00      	cmp	r3, #0
 8007378:	d007      	beq.n	800738a <UART_WaitOnFlagUntilTimeout+0x30>
 800737a:	f7fa f93b 	bl	80015f4 <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007386:	429a      	cmp	r2, r3
 8007388:	d241      	bcs.n	800740e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	330c      	adds	r3, #12
 8007390:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007394:	e853 3f00 	ldrex	r3, [r3]
 8007398:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	330c      	adds	r3, #12
 80073a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073aa:	637a      	str	r2, [r7, #52]	; 0x34
 80073ac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e5      	bne.n	800738a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	3314      	adds	r3, #20
 80073c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	e853 3f00 	ldrex	r3, [r3]
 80073cc:	613b      	str	r3, [r7, #16]
   return(result);
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	f023 0301 	bic.w	r3, r3, #1
 80073d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3314      	adds	r3, #20
 80073dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073de:	623a      	str	r2, [r7, #32]
 80073e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e2:	69f9      	ldr	r1, [r7, #28]
 80073e4:	6a3a      	ldr	r2, [r7, #32]
 80073e6:	e841 2300 	strex	r3, r2, [r1]
 80073ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1e5      	bne.n	80073be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2220      	movs	r2, #32
 80073f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2220      	movs	r2, #32
 80073fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e00f      	b.n	800742e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	4013      	ands	r3, r2
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	429a      	cmp	r2, r3
 800741c:	bf0c      	ite	eq
 800741e:	2301      	moveq	r3, #1
 8007420:	2300      	movne	r3, #0
 8007422:	b2db      	uxtb	r3, r3
 8007424:	461a      	mov	r2, r3
 8007426:	79fb      	ldrb	r3, [r7, #7]
 8007428:	429a      	cmp	r2, r3
 800742a:	d09f      	beq.n	800736c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3740      	adds	r7, #64	; 0x40
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
	...

08007438 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800743c:	b09f      	sub	sp, #124	; 0x7c
 800743e:	af00      	add	r7, sp, #0
 8007440:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800744c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800744e:	68d9      	ldr	r1, [r3, #12]
 8007450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	ea40 0301 	orr.w	r3, r0, r1
 8007458:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800745a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800745c:	689a      	ldr	r2, [r3, #8]
 800745e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	431a      	orrs	r2, r3
 8007464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	431a      	orrs	r2, r3
 800746a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	4313      	orrs	r3, r2
 8007470:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800747c:	f021 010c 	bic.w	r1, r1, #12
 8007480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007486:	430b      	orrs	r3, r1
 8007488:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800748a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007496:	6999      	ldr	r1, [r3, #24]
 8007498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	ea40 0301 	orr.w	r3, r0, r1
 80074a0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	4bc5      	ldr	r3, [pc, #788]	; (80077bc <UART_SetConfig+0x384>)
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d004      	beq.n	80074b6 <UART_SetConfig+0x7e>
 80074ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	4bc3      	ldr	r3, [pc, #780]	; (80077c0 <UART_SetConfig+0x388>)
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d103      	bne.n	80074be <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80074b6:	f7ff fd1d 	bl	8006ef4 <HAL_RCC_GetPCLK2Freq>
 80074ba:	6778      	str	r0, [r7, #116]	; 0x74
 80074bc:	e002      	b.n	80074c4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074be:	f7ff fd05 	bl	8006ecc <HAL_RCC_GetPCLK1Freq>
 80074c2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c6:	69db      	ldr	r3, [r3, #28]
 80074c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074cc:	f040 80b6 	bne.w	800763c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80074d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074d2:	461c      	mov	r4, r3
 80074d4:	f04f 0500 	mov.w	r5, #0
 80074d8:	4622      	mov	r2, r4
 80074da:	462b      	mov	r3, r5
 80074dc:	1891      	adds	r1, r2, r2
 80074de:	6439      	str	r1, [r7, #64]	; 0x40
 80074e0:	415b      	adcs	r3, r3
 80074e2:	647b      	str	r3, [r7, #68]	; 0x44
 80074e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80074e8:	1912      	adds	r2, r2, r4
 80074ea:	eb45 0303 	adc.w	r3, r5, r3
 80074ee:	f04f 0000 	mov.w	r0, #0
 80074f2:	f04f 0100 	mov.w	r1, #0
 80074f6:	00d9      	lsls	r1, r3, #3
 80074f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074fc:	00d0      	lsls	r0, r2, #3
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	1911      	adds	r1, r2, r4
 8007504:	6639      	str	r1, [r7, #96]	; 0x60
 8007506:	416b      	adcs	r3, r5
 8007508:	667b      	str	r3, [r7, #100]	; 0x64
 800750a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	461a      	mov	r2, r3
 8007510:	f04f 0300 	mov.w	r3, #0
 8007514:	1891      	adds	r1, r2, r2
 8007516:	63b9      	str	r1, [r7, #56]	; 0x38
 8007518:	415b      	adcs	r3, r3
 800751a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800751c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007520:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007524:	f7f8 fea4 	bl	8000270 <__aeabi_uldivmod>
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	4ba5      	ldr	r3, [pc, #660]	; (80077c4 <UART_SetConfig+0x38c>)
 800752e:	fba3 2302 	umull	r2, r3, r3, r2
 8007532:	095b      	lsrs	r3, r3, #5
 8007534:	011e      	lsls	r6, r3, #4
 8007536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007538:	461c      	mov	r4, r3
 800753a:	f04f 0500 	mov.w	r5, #0
 800753e:	4622      	mov	r2, r4
 8007540:	462b      	mov	r3, r5
 8007542:	1891      	adds	r1, r2, r2
 8007544:	6339      	str	r1, [r7, #48]	; 0x30
 8007546:	415b      	adcs	r3, r3
 8007548:	637b      	str	r3, [r7, #52]	; 0x34
 800754a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800754e:	1912      	adds	r2, r2, r4
 8007550:	eb45 0303 	adc.w	r3, r5, r3
 8007554:	f04f 0000 	mov.w	r0, #0
 8007558:	f04f 0100 	mov.w	r1, #0
 800755c:	00d9      	lsls	r1, r3, #3
 800755e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007562:	00d0      	lsls	r0, r2, #3
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	1911      	adds	r1, r2, r4
 800756a:	65b9      	str	r1, [r7, #88]	; 0x58
 800756c:	416b      	adcs	r3, r5
 800756e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	461a      	mov	r2, r3
 8007576:	f04f 0300 	mov.w	r3, #0
 800757a:	1891      	adds	r1, r2, r2
 800757c:	62b9      	str	r1, [r7, #40]	; 0x28
 800757e:	415b      	adcs	r3, r3
 8007580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007582:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007586:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800758a:	f7f8 fe71 	bl	8000270 <__aeabi_uldivmod>
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	4b8c      	ldr	r3, [pc, #560]	; (80077c4 <UART_SetConfig+0x38c>)
 8007594:	fba3 1302 	umull	r1, r3, r3, r2
 8007598:	095b      	lsrs	r3, r3, #5
 800759a:	2164      	movs	r1, #100	; 0x64
 800759c:	fb01 f303 	mul.w	r3, r1, r3
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	00db      	lsls	r3, r3, #3
 80075a4:	3332      	adds	r3, #50	; 0x32
 80075a6:	4a87      	ldr	r2, [pc, #540]	; (80077c4 <UART_SetConfig+0x38c>)
 80075a8:	fba2 2303 	umull	r2, r3, r2, r3
 80075ac:	095b      	lsrs	r3, r3, #5
 80075ae:	005b      	lsls	r3, r3, #1
 80075b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80075b4:	441e      	add	r6, r3
 80075b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075b8:	4618      	mov	r0, r3
 80075ba:	f04f 0100 	mov.w	r1, #0
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	1894      	adds	r4, r2, r2
 80075c4:	623c      	str	r4, [r7, #32]
 80075c6:	415b      	adcs	r3, r3
 80075c8:	627b      	str	r3, [r7, #36]	; 0x24
 80075ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075ce:	1812      	adds	r2, r2, r0
 80075d0:	eb41 0303 	adc.w	r3, r1, r3
 80075d4:	f04f 0400 	mov.w	r4, #0
 80075d8:	f04f 0500 	mov.w	r5, #0
 80075dc:	00dd      	lsls	r5, r3, #3
 80075de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80075e2:	00d4      	lsls	r4, r2, #3
 80075e4:	4622      	mov	r2, r4
 80075e6:	462b      	mov	r3, r5
 80075e8:	1814      	adds	r4, r2, r0
 80075ea:	653c      	str	r4, [r7, #80]	; 0x50
 80075ec:	414b      	adcs	r3, r1
 80075ee:	657b      	str	r3, [r7, #84]	; 0x54
 80075f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	461a      	mov	r2, r3
 80075f6:	f04f 0300 	mov.w	r3, #0
 80075fa:	1891      	adds	r1, r2, r2
 80075fc:	61b9      	str	r1, [r7, #24]
 80075fe:	415b      	adcs	r3, r3
 8007600:	61fb      	str	r3, [r7, #28]
 8007602:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007606:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800760a:	f7f8 fe31 	bl	8000270 <__aeabi_uldivmod>
 800760e:	4602      	mov	r2, r0
 8007610:	460b      	mov	r3, r1
 8007612:	4b6c      	ldr	r3, [pc, #432]	; (80077c4 <UART_SetConfig+0x38c>)
 8007614:	fba3 1302 	umull	r1, r3, r3, r2
 8007618:	095b      	lsrs	r3, r3, #5
 800761a:	2164      	movs	r1, #100	; 0x64
 800761c:	fb01 f303 	mul.w	r3, r1, r3
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	3332      	adds	r3, #50	; 0x32
 8007626:	4a67      	ldr	r2, [pc, #412]	; (80077c4 <UART_SetConfig+0x38c>)
 8007628:	fba2 2303 	umull	r2, r3, r2, r3
 800762c:	095b      	lsrs	r3, r3, #5
 800762e:	f003 0207 	and.w	r2, r3, #7
 8007632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4432      	add	r2, r6
 8007638:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800763a:	e0b9      	b.n	80077b0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800763c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800763e:	461c      	mov	r4, r3
 8007640:	f04f 0500 	mov.w	r5, #0
 8007644:	4622      	mov	r2, r4
 8007646:	462b      	mov	r3, r5
 8007648:	1891      	adds	r1, r2, r2
 800764a:	6139      	str	r1, [r7, #16]
 800764c:	415b      	adcs	r3, r3
 800764e:	617b      	str	r3, [r7, #20]
 8007650:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007654:	1912      	adds	r2, r2, r4
 8007656:	eb45 0303 	adc.w	r3, r5, r3
 800765a:	f04f 0000 	mov.w	r0, #0
 800765e:	f04f 0100 	mov.w	r1, #0
 8007662:	00d9      	lsls	r1, r3, #3
 8007664:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007668:	00d0      	lsls	r0, r2, #3
 800766a:	4602      	mov	r2, r0
 800766c:	460b      	mov	r3, r1
 800766e:	eb12 0804 	adds.w	r8, r2, r4
 8007672:	eb43 0905 	adc.w	r9, r3, r5
 8007676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	4618      	mov	r0, r3
 800767c:	f04f 0100 	mov.w	r1, #0
 8007680:	f04f 0200 	mov.w	r2, #0
 8007684:	f04f 0300 	mov.w	r3, #0
 8007688:	008b      	lsls	r3, r1, #2
 800768a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800768e:	0082      	lsls	r2, r0, #2
 8007690:	4640      	mov	r0, r8
 8007692:	4649      	mov	r1, r9
 8007694:	f7f8 fdec 	bl	8000270 <__aeabi_uldivmod>
 8007698:	4602      	mov	r2, r0
 800769a:	460b      	mov	r3, r1
 800769c:	4b49      	ldr	r3, [pc, #292]	; (80077c4 <UART_SetConfig+0x38c>)
 800769e:	fba3 2302 	umull	r2, r3, r3, r2
 80076a2:	095b      	lsrs	r3, r3, #5
 80076a4:	011e      	lsls	r6, r3, #4
 80076a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076a8:	4618      	mov	r0, r3
 80076aa:	f04f 0100 	mov.w	r1, #0
 80076ae:	4602      	mov	r2, r0
 80076b0:	460b      	mov	r3, r1
 80076b2:	1894      	adds	r4, r2, r2
 80076b4:	60bc      	str	r4, [r7, #8]
 80076b6:	415b      	adcs	r3, r3
 80076b8:	60fb      	str	r3, [r7, #12]
 80076ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076be:	1812      	adds	r2, r2, r0
 80076c0:	eb41 0303 	adc.w	r3, r1, r3
 80076c4:	f04f 0400 	mov.w	r4, #0
 80076c8:	f04f 0500 	mov.w	r5, #0
 80076cc:	00dd      	lsls	r5, r3, #3
 80076ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80076d2:	00d4      	lsls	r4, r2, #3
 80076d4:	4622      	mov	r2, r4
 80076d6:	462b      	mov	r3, r5
 80076d8:	1814      	adds	r4, r2, r0
 80076da:	64bc      	str	r4, [r7, #72]	; 0x48
 80076dc:	414b      	adcs	r3, r1
 80076de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	4618      	mov	r0, r3
 80076e6:	f04f 0100 	mov.w	r1, #0
 80076ea:	f04f 0200 	mov.w	r2, #0
 80076ee:	f04f 0300 	mov.w	r3, #0
 80076f2:	008b      	lsls	r3, r1, #2
 80076f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80076f8:	0082      	lsls	r2, r0, #2
 80076fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80076fe:	f7f8 fdb7 	bl	8000270 <__aeabi_uldivmod>
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	4b2f      	ldr	r3, [pc, #188]	; (80077c4 <UART_SetConfig+0x38c>)
 8007708:	fba3 1302 	umull	r1, r3, r3, r2
 800770c:	095b      	lsrs	r3, r3, #5
 800770e:	2164      	movs	r1, #100	; 0x64
 8007710:	fb01 f303 	mul.w	r3, r1, r3
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	011b      	lsls	r3, r3, #4
 8007718:	3332      	adds	r3, #50	; 0x32
 800771a:	4a2a      	ldr	r2, [pc, #168]	; (80077c4 <UART_SetConfig+0x38c>)
 800771c:	fba2 2303 	umull	r2, r3, r2, r3
 8007720:	095b      	lsrs	r3, r3, #5
 8007722:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007726:	441e      	add	r6, r3
 8007728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800772a:	4618      	mov	r0, r3
 800772c:	f04f 0100 	mov.w	r1, #0
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
 8007734:	1894      	adds	r4, r2, r2
 8007736:	603c      	str	r4, [r7, #0]
 8007738:	415b      	adcs	r3, r3
 800773a:	607b      	str	r3, [r7, #4]
 800773c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007740:	1812      	adds	r2, r2, r0
 8007742:	eb41 0303 	adc.w	r3, r1, r3
 8007746:	f04f 0400 	mov.w	r4, #0
 800774a:	f04f 0500 	mov.w	r5, #0
 800774e:	00dd      	lsls	r5, r3, #3
 8007750:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007754:	00d4      	lsls	r4, r2, #3
 8007756:	4622      	mov	r2, r4
 8007758:	462b      	mov	r3, r5
 800775a:	eb12 0a00 	adds.w	sl, r2, r0
 800775e:	eb43 0b01 	adc.w	fp, r3, r1
 8007762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	4618      	mov	r0, r3
 8007768:	f04f 0100 	mov.w	r1, #0
 800776c:	f04f 0200 	mov.w	r2, #0
 8007770:	f04f 0300 	mov.w	r3, #0
 8007774:	008b      	lsls	r3, r1, #2
 8007776:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800777a:	0082      	lsls	r2, r0, #2
 800777c:	4650      	mov	r0, sl
 800777e:	4659      	mov	r1, fp
 8007780:	f7f8 fd76 	bl	8000270 <__aeabi_uldivmod>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	4b0e      	ldr	r3, [pc, #56]	; (80077c4 <UART_SetConfig+0x38c>)
 800778a:	fba3 1302 	umull	r1, r3, r3, r2
 800778e:	095b      	lsrs	r3, r3, #5
 8007790:	2164      	movs	r1, #100	; 0x64
 8007792:	fb01 f303 	mul.w	r3, r1, r3
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	011b      	lsls	r3, r3, #4
 800779a:	3332      	adds	r3, #50	; 0x32
 800779c:	4a09      	ldr	r2, [pc, #36]	; (80077c4 <UART_SetConfig+0x38c>)
 800779e:	fba2 2303 	umull	r2, r3, r2, r3
 80077a2:	095b      	lsrs	r3, r3, #5
 80077a4:	f003 020f 	and.w	r2, r3, #15
 80077a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4432      	add	r2, r6
 80077ae:	609a      	str	r2, [r3, #8]
}
 80077b0:	bf00      	nop
 80077b2:	377c      	adds	r7, #124	; 0x7c
 80077b4:	46bd      	mov	sp, r7
 80077b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ba:	bf00      	nop
 80077bc:	40011000 	.word	0x40011000
 80077c0:	40011400 	.word	0x40011400
 80077c4:	51eb851f 	.word	0x51eb851f

080077c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077c8:	b084      	sub	sp, #16
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b084      	sub	sp, #16
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	f107 001c 	add.w	r0, r7, #28
 80077d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d122      	bne.n	8007826 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80077f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800780a:	2b01      	cmp	r3, #1
 800780c:	d105      	bne.n	800781a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f9a0 	bl	8007b60 <USB_CoreReset>
 8007820:	4603      	mov	r3, r0
 8007822:	73fb      	strb	r3, [r7, #15]
 8007824:	e01a      	b.n	800785c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f994 	bl	8007b60 <USB_CoreReset>
 8007838:	4603      	mov	r3, r0
 800783a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800783c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800783e:	2b00      	cmp	r3, #0
 8007840:	d106      	bne.n	8007850 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007846:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	639a      	str	r2, [r3, #56]	; 0x38
 800784e:	e005      	b.n	800785c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007854:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	2b01      	cmp	r3, #1
 8007860:	d10b      	bne.n	800787a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f043 0206 	orr.w	r2, r3, #6
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f043 0220 	orr.w	r2, r3, #32
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800787a:	7bfb      	ldrb	r3, [r7, #15]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007886:	b004      	add	sp, #16
 8007888:	4770      	bx	lr

0800788a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800788a:	b480      	push	{r7}
 800788c:	b083      	sub	sp, #12
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f043 0201 	orr.w	r2, r3, #1
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f023 0201 	bic.w	r2, r3, #1
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	460b      	mov	r3, r1
 80078d8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80078da:	2300      	movs	r3, #0
 80078dc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80078ea:	78fb      	ldrb	r3, [r7, #3]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d115      	bne.n	800791c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078fc:	2001      	movs	r0, #1
 80078fe:	f7f9 fe85 	bl	800160c <HAL_Delay>
      ms++;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3301      	adds	r3, #1
 8007906:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f91a 	bl	8007b42 <USB_GetMode>
 800790e:	4603      	mov	r3, r0
 8007910:	2b01      	cmp	r3, #1
 8007912:	d01e      	beq.n	8007952 <USB_SetCurrentMode+0x84>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2b31      	cmp	r3, #49	; 0x31
 8007918:	d9f0      	bls.n	80078fc <USB_SetCurrentMode+0x2e>
 800791a:	e01a      	b.n	8007952 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800791c:	78fb      	ldrb	r3, [r7, #3]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d115      	bne.n	800794e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800792e:	2001      	movs	r0, #1
 8007930:	f7f9 fe6c 	bl	800160c <HAL_Delay>
      ms++;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	3301      	adds	r3, #1
 8007938:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f901 	bl	8007b42 <USB_GetMode>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d005      	beq.n	8007952 <USB_SetCurrentMode+0x84>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2b31      	cmp	r3, #49	; 0x31
 800794a:	d9f0      	bls.n	800792e <USB_SetCurrentMode+0x60>
 800794c:	e001      	b.n	8007952 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e005      	b.n	800795e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2b32      	cmp	r3, #50	; 0x32
 8007956:	d101      	bne.n	800795c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e000      	b.n	800795e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
	...

08007968 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	019b      	lsls	r3, r3, #6
 800797a:	f043 0220 	orr.w	r2, r3, #32
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	3301      	adds	r3, #1
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	4a08      	ldr	r2, [pc, #32]	; (80079ac <USB_FlushTxFifo+0x44>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d901      	bls.n	8007992 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e006      	b.n	80079a0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	f003 0320 	and.w	r3, r3, #32
 800799a:	2b20      	cmp	r3, #32
 800799c:	d0f1      	beq.n	8007982 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	00030d40 	.word	0x00030d40

080079b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2210      	movs	r2, #16
 80079c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	3301      	adds	r3, #1
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	4a08      	ldr	r2, [pc, #32]	; (80079ec <USB_FlushRxFifo+0x3c>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d901      	bls.n	80079d2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e006      	b.n	80079e0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	f003 0310 	and.w	r3, r3, #16
 80079da:	2b10      	cmp	r3, #16
 80079dc:	d0f1      	beq.n	80079c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr
 80079ec:	00030d40 	.word	0x00030d40

080079f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b089      	sub	sp, #36	; 0x24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	4611      	mov	r1, r2
 80079fc:	461a      	mov	r2, r3
 80079fe:	460b      	mov	r3, r1
 8007a00:	71fb      	strb	r3, [r7, #7]
 8007a02:	4613      	mov	r3, r2
 8007a04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007a0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d123      	bne.n	8007a5e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a16:	88bb      	ldrh	r3, [r7, #4]
 8007a18:	3303      	adds	r3, #3
 8007a1a:	089b      	lsrs	r3, r3, #2
 8007a1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a1e:	2300      	movs	r3, #0
 8007a20:	61bb      	str	r3, [r7, #24]
 8007a22:	e018      	b.n	8007a56 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a24:	79fb      	ldrb	r3, [r7, #7]
 8007a26:	031a      	lsls	r2, r3, #12
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a30:	461a      	mov	r2, r3
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	3301      	adds	r3, #1
 8007a42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	3301      	adds	r3, #1
 8007a48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	3301      	adds	r3, #1
 8007a54:	61bb      	str	r3, [r7, #24]
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d3e2      	bcc.n	8007a24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3724      	adds	r7, #36	; 0x24
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b08b      	sub	sp, #44	; 0x2c
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	4613      	mov	r3, r2
 8007a78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007a82:	88fb      	ldrh	r3, [r7, #6]
 8007a84:	089b      	lsrs	r3, r3, #2
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007a8a:	88fb      	ldrh	r3, [r7, #6]
 8007a8c:	f003 0303 	and.w	r3, r3, #3
 8007a90:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007a92:	2300      	movs	r3, #0
 8007a94:	623b      	str	r3, [r7, #32]
 8007a96:	e014      	b.n	8007ac2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	601a      	str	r2, [r3, #0]
    pDest++;
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aac:	3301      	adds	r3, #1
 8007aae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab8:	3301      	adds	r3, #1
 8007aba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	623b      	str	r3, [r7, #32]
 8007ac2:	6a3a      	ldr	r2, [r7, #32]
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d3e6      	bcc.n	8007a98 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007aca:	8bfb      	ldrh	r3, [r7, #30]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d01e      	beq.n	8007b0e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ada:	461a      	mov	r2, r3
 8007adc:	f107 0310 	add.w	r3, r7, #16
 8007ae0:	6812      	ldr	r2, [r2, #0]
 8007ae2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	00db      	lsls	r3, r3, #3
 8007aec:	fa22 f303 	lsr.w	r3, r2, r3
 8007af0:	b2da      	uxtb	r2, r3
 8007af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af4:	701a      	strb	r2, [r3, #0]
      i++;
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	3301      	adds	r3, #1
 8007afa:	623b      	str	r3, [r7, #32]
      pDest++;
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	3301      	adds	r3, #1
 8007b00:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007b02:	8bfb      	ldrh	r3, [r7, #30]
 8007b04:	3b01      	subs	r3, #1
 8007b06:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007b08:	8bfb      	ldrh	r3, [r7, #30]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1ea      	bne.n	8007ae4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	372c      	adds	r7, #44	; 0x2c
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	4013      	ands	r3, r2
 8007b32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b34:	68fb      	ldr	r3, [r7, #12]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b083      	sub	sp, #12
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	f003 0301 	and.w	r3, r3, #1
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
	...

08007b60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	60fb      	str	r3, [r7, #12]
 8007b72:	4a13      	ldr	r2, [pc, #76]	; (8007bc0 <USB_CoreReset+0x60>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d901      	bls.n	8007b7c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e01a      	b.n	8007bb2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	daf3      	bge.n	8007b6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	f043 0201 	orr.w	r2, r3, #1
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3301      	adds	r3, #1
 8007b98:	60fb      	str	r3, [r7, #12]
 8007b9a:	4a09      	ldr	r2, [pc, #36]	; (8007bc0 <USB_CoreReset+0x60>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d901      	bls.n	8007ba4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e006      	b.n	8007bb2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d0f1      	beq.n	8007b94 <USB_CoreReset+0x34>

  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	00030d40 	.word	0x00030d40

08007bc4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	f107 001c 	add.w	r0, r7, #28
 8007bd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007be0:	461a      	mov	r2, r3
 8007be2:	2300      	movs	r3, #0
 8007be4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c02:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d018      	beq.n	8007c48 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d10a      	bne.n	8007c32 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c2a:	f043 0304 	orr.w	r3, r3, #4
 8007c2e:	6013      	str	r3, [r2, #0]
 8007c30:	e014      	b.n	8007c5c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c40:	f023 0304 	bic.w	r3, r3, #4
 8007c44:	6013      	str	r3, [r2, #0]
 8007c46:	e009      	b.n	8007c5c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c56:	f023 0304 	bic.w	r3, r3, #4
 8007c5a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007c5c:	2110      	movs	r1, #16
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7ff fe82 	bl	8007968 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7ff fea3 	bl	80079b0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	60fb      	str	r3, [r7, #12]
 8007c6e:	e015      	b.n	8007c9c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	015a      	lsls	r2, r3, #5
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	4413      	add	r3, r2
 8007c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c82:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	015a      	lsls	r2, r3, #5
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c90:	461a      	mov	r2, r3
 8007c92:	2300      	movs	r3, #0
 8007c94:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	60fb      	str	r3, [r7, #12]
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d3e5      	bcc.n	8007c70 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f04f 32ff 	mov.w	r2, #4294967295
 8007cb0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00b      	beq.n	8007cd6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cc4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a13      	ldr	r2, [pc, #76]	; (8007d18 <USB_HostInit+0x154>)
 8007cca:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a13      	ldr	r2, [pc, #76]	; (8007d1c <USB_HostInit+0x158>)
 8007cd0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007cd4:	e009      	b.n	8007cea <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2280      	movs	r2, #128	; 0x80
 8007cda:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a10      	ldr	r2, [pc, #64]	; (8007d20 <USB_HostInit+0x15c>)
 8007ce0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a0f      	ldr	r2, [pc, #60]	; (8007d24 <USB_HostInit+0x160>)
 8007ce6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d105      	bne.n	8007cfc <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	f043 0210 	orr.w	r2, r3, #16
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	699a      	ldr	r2, [r3, #24]
 8007d00:	4b09      	ldr	r3, [pc, #36]	; (8007d28 <USB_HostInit+0x164>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d14:	b004      	add	sp, #16
 8007d16:	4770      	bx	lr
 8007d18:	01000200 	.word	0x01000200
 8007d1c:	00e00300 	.word	0x00e00300
 8007d20:	00600080 	.word	0x00600080
 8007d24:	004000e0 	.word	0x004000e0
 8007d28:	a3200008 	.word	0xa3200008

08007d2c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	460b      	mov	r3, r1
 8007d36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d4a:	f023 0303 	bic.w	r3, r3, #3
 8007d4e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	78fb      	ldrb	r3, [r7, #3]
 8007d5a:	f003 0303 	and.w	r3, r3, #3
 8007d5e:	68f9      	ldr	r1, [r7, #12]
 8007d60:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007d64:	4313      	orrs	r3, r2
 8007d66:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007d68:	78fb      	ldrb	r3, [r7, #3]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d107      	bne.n	8007d7e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d74:	461a      	mov	r2, r3
 8007d76:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007d7a:	6053      	str	r3, [r2, #4]
 8007d7c:	e009      	b.n	8007d92 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007d7e:	78fb      	ldrb	r3, [r7, #3]
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d106      	bne.n	8007d92 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f241 7370 	movw	r3, #6000	; 0x1770
 8007d90:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007dc0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dce:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007dd0:	2064      	movs	r0, #100	; 0x64
 8007dd2:	f7f9 fc1b 	bl	800160c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007dde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007de2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007de4:	200a      	movs	r0, #10
 8007de6:	f7f9 fc11 	bl	800160c <HAL_Delay>

  return HAL_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007e04:	2300      	movs	r3, #0
 8007e06:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007e18:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d109      	bne.n	8007e38 <USB_DriveVbus+0x44>
 8007e24:	78fb      	ldrb	r3, [r7, #3]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d106      	bne.n	8007e38 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e36:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e42:	d109      	bne.n	8007e58 <USB_DriveVbus+0x64>
 8007e44:	78fb      	ldrb	r3, [r7, #3]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d106      	bne.n	8007e58 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e56:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b085      	sub	sp, #20
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007e72:	2300      	movs	r3, #0
 8007e74:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	0c5b      	lsrs	r3, r3, #17
 8007e84:	f003 0303 	and.w	r3, r3, #3
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	b29b      	uxth	r3, r3
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3714      	adds	r7, #20
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
	...

08007eb8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b088      	sub	sp, #32
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	4608      	mov	r0, r1
 8007ec2:	4611      	mov	r1, r2
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	70fb      	strb	r3, [r7, #3]
 8007eca:	460b      	mov	r3, r1
 8007ecc:	70bb      	strb	r3, [r7, #2]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007eda:	78fb      	ldrb	r3, [r7, #3]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8007eec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007eee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007ef2:	2b03      	cmp	r3, #3
 8007ef4:	d87e      	bhi.n	8007ff4 <USB_HC_Init+0x13c>
 8007ef6:	a201      	add	r2, pc, #4	; (adr r2, 8007efc <USB_HC_Init+0x44>)
 8007ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efc:	08007f0d 	.word	0x08007f0d
 8007f00:	08007fb7 	.word	0x08007fb7
 8007f04:	08007f0d 	.word	0x08007f0d
 8007f08:	08007f79 	.word	0x08007f79
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007f0c:	78fb      	ldrb	r3, [r7, #3]
 8007f0e:	015a      	lsls	r2, r3, #5
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	4413      	add	r3, r2
 8007f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f18:	461a      	mov	r2, r3
 8007f1a:	f240 439d 	movw	r3, #1181	; 0x49d
 8007f1e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007f20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	da10      	bge.n	8007f4a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007f28:	78fb      	ldrb	r3, [r7, #3]
 8007f2a:	015a      	lsls	r2, r3, #5
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	4413      	add	r3, r2
 8007f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	78fa      	ldrb	r2, [r7, #3]
 8007f38:	0151      	lsls	r1, r2, #5
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	440a      	add	r2, r1
 8007f3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f46:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007f48:	e057      	b.n	8007ffa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d051      	beq.n	8007ffa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007f56:	78fb      	ldrb	r3, [r7, #3]
 8007f58:	015a      	lsls	r2, r3, #5
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	78fa      	ldrb	r2, [r7, #3]
 8007f66:	0151      	lsls	r1, r2, #5
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	440a      	add	r2, r1
 8007f6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f70:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007f74:	60d3      	str	r3, [r2, #12]
      break;
 8007f76:	e040      	b.n	8007ffa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007f78:	78fb      	ldrb	r3, [r7, #3]
 8007f7a:	015a      	lsls	r2, r3, #5
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f84:	461a      	mov	r2, r3
 8007f86:	f240 639d 	movw	r3, #1693	; 0x69d
 8007f8a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007f8c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	da34      	bge.n	8007ffe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007f94:	78fb      	ldrb	r3, [r7, #3]
 8007f96:	015a      	lsls	r2, r3, #5
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	78fa      	ldrb	r2, [r7, #3]
 8007fa4:	0151      	lsls	r1, r2, #5
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	440a      	add	r2, r1
 8007faa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fb2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007fb4:	e023      	b.n	8007ffe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007fb6:	78fb      	ldrb	r3, [r7, #3]
 8007fb8:	015a      	lsls	r2, r3, #5
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	f240 2325 	movw	r3, #549	; 0x225
 8007fc8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007fca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	da17      	bge.n	8008002 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007fd2:	78fb      	ldrb	r3, [r7, #3]
 8007fd4:	015a      	lsls	r2, r3, #5
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	4413      	add	r3, r2
 8007fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	78fa      	ldrb	r2, [r7, #3]
 8007fe2:	0151      	lsls	r1, r2, #5
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	440a      	add	r2, r1
 8007fe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fec:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007ff0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007ff2:	e006      	b.n	8008002 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	77fb      	strb	r3, [r7, #31]
      break;
 8007ff8:	e004      	b.n	8008004 <USB_HC_Init+0x14c>
      break;
 8007ffa:	bf00      	nop
 8007ffc:	e002      	b.n	8008004 <USB_HC_Init+0x14c>
      break;
 8007ffe:	bf00      	nop
 8008000:	e000      	b.n	8008004 <USB_HC_Init+0x14c>
      break;
 8008002:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800800a:	699a      	ldr	r2, [r3, #24]
 800800c:	78fb      	ldrb	r3, [r7, #3]
 800800e:	f003 030f 	and.w	r3, r3, #15
 8008012:	2101      	movs	r1, #1
 8008014:	fa01 f303 	lsl.w	r3, r1, r3
 8008018:	6939      	ldr	r1, [r7, #16]
 800801a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800801e:	4313      	orrs	r3, r2
 8008020:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800802e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008032:	2b00      	cmp	r3, #0
 8008034:	da03      	bge.n	800803e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800803a:	61bb      	str	r3, [r7, #24]
 800803c:	e001      	b.n	8008042 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800803e:	2300      	movs	r3, #0
 8008040:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7ff ff0f 	bl	8007e66 <USB_GetHostSpeed>
 8008048:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800804a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800804e:	2b02      	cmp	r3, #2
 8008050:	d106      	bne.n	8008060 <USB_HC_Init+0x1a8>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b02      	cmp	r3, #2
 8008056:	d003      	beq.n	8008060 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008058:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800805c:	617b      	str	r3, [r7, #20]
 800805e:	e001      	b.n	8008064 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008064:	787b      	ldrb	r3, [r7, #1]
 8008066:	059b      	lsls	r3, r3, #22
 8008068:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800806c:	78bb      	ldrb	r3, [r7, #2]
 800806e:	02db      	lsls	r3, r3, #11
 8008070:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008074:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008076:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800807a:	049b      	lsls	r3, r3, #18
 800807c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008080:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008082:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008084:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008088:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800808e:	78fb      	ldrb	r3, [r7, #3]
 8008090:	0159      	lsls	r1, r3, #5
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	440b      	add	r3, r1
 8008096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800809a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80080a0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80080a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80080a6:	2b03      	cmp	r3, #3
 80080a8:	d10f      	bne.n	80080ca <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80080aa:	78fb      	ldrb	r3, [r7, #3]
 80080ac:	015a      	lsls	r2, r3, #5
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	4413      	add	r3, r2
 80080b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	78fa      	ldrb	r2, [r7, #3]
 80080ba:	0151      	lsls	r1, r2, #5
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	440a      	add	r2, r1
 80080c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080c8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80080ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3720      	adds	r7, #32
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b08c      	sub	sp, #48	; 0x30
 80080d8:	af02      	add	r7, sp, #8
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	4613      	mov	r3, r2
 80080e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	785b      	ldrb	r3, [r3, #1]
 80080ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80080ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080f0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d02d      	beq.n	800815a <USB_HC_StartXfer+0x86>
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	791b      	ldrb	r3, [r3, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d129      	bne.n	800815a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008106:	79fb      	ldrb	r3, [r7, #7]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d117      	bne.n	800813c <USB_HC_StartXfer+0x68>
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	79db      	ldrb	r3, [r3, #7]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <USB_HC_StartXfer+0x48>
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	79db      	ldrb	r3, [r3, #7]
 8008118:	2b02      	cmp	r3, #2
 800811a:	d10f      	bne.n	800813c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	6a3b      	ldr	r3, [r7, #32]
 8008122:	4413      	add	r3, r2
 8008124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	69fa      	ldr	r2, [r7, #28]
 800812c:	0151      	lsls	r1, r2, #5
 800812e:	6a3a      	ldr	r2, [r7, #32]
 8008130:	440a      	add	r2, r1
 8008132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800813a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800813c:	79fb      	ldrb	r3, [r7, #7]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10b      	bne.n	800815a <USB_HC_StartXfer+0x86>
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	795b      	ldrb	r3, [r3, #5]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d107      	bne.n	800815a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	785b      	ldrb	r3, [r3, #1]
 800814e:	4619      	mov	r1, r3
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f000 fa2f 	bl	80085b4 <USB_DoPing>
      return HAL_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	e0f8      	b.n	800834c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d018      	beq.n	8008194 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	8912      	ldrh	r2, [r2, #8]
 800816a:	4413      	add	r3, r2
 800816c:	3b01      	subs	r3, #1
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	8912      	ldrh	r2, [r2, #8]
 8008172:	fbb3 f3f2 	udiv	r3, r3, r2
 8008176:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008178:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800817a:	8b7b      	ldrh	r3, [r7, #26]
 800817c:	429a      	cmp	r2, r3
 800817e:	d90b      	bls.n	8008198 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008180:	8b7b      	ldrh	r3, [r7, #26]
 8008182:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008184:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008186:	68ba      	ldr	r2, [r7, #8]
 8008188:	8912      	ldrh	r2, [r2, #8]
 800818a:	fb02 f203 	mul.w	r2, r2, r3
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	611a      	str	r2, [r3, #16]
 8008192:	e001      	b.n	8008198 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008194:	2301      	movs	r3, #1
 8008196:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	78db      	ldrb	r3, [r3, #3]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d007      	beq.n	80081b0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80081a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	8912      	ldrh	r2, [r2, #8]
 80081a6:	fb02 f203 	mul.w	r2, r2, r3
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	611a      	str	r2, [r3, #16]
 80081ae:	e003      	b.n	80081b8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	695a      	ldr	r2, [r3, #20]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80081c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081c2:	04d9      	lsls	r1, r3, #19
 80081c4:	4b63      	ldr	r3, [pc, #396]	; (8008354 <USB_HC_StartXfer+0x280>)
 80081c6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80081c8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	7a9b      	ldrb	r3, [r3, #10]
 80081ce:	075b      	lsls	r3, r3, #29
 80081d0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80081d4:	69f9      	ldr	r1, [r7, #28]
 80081d6:	0148      	lsls	r0, r1, #5
 80081d8:	6a39      	ldr	r1, [r7, #32]
 80081da:	4401      	add	r1, r0
 80081dc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80081e0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80081e2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80081e4:	79fb      	ldrb	r3, [r7, #7]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d009      	beq.n	80081fe <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	68d9      	ldr	r1, [r3, #12]
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	015a      	lsls	r2, r3, #5
 80081f2:	6a3b      	ldr	r3, [r7, #32]
 80081f4:	4413      	add	r3, r2
 80081f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081fa:	460a      	mov	r2, r1
 80081fc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80081fe:	6a3b      	ldr	r3, [r7, #32]
 8008200:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	f003 0301 	and.w	r3, r3, #1
 800820a:	2b00      	cmp	r3, #0
 800820c:	bf0c      	ite	eq
 800820e:	2301      	moveq	r3, #1
 8008210:	2300      	movne	r3, #0
 8008212:	b2db      	uxtb	r3, r3
 8008214:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	4413      	add	r3, r2
 800821e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	69fa      	ldr	r2, [r7, #28]
 8008226:	0151      	lsls	r1, r2, #5
 8008228:	6a3a      	ldr	r2, [r7, #32]
 800822a:	440a      	add	r2, r1
 800822c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008230:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008234:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	015a      	lsls	r2, r3, #5
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	4413      	add	r3, r2
 800823e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	7e7b      	ldrb	r3, [r7, #25]
 8008246:	075b      	lsls	r3, r3, #29
 8008248:	69f9      	ldr	r1, [r7, #28]
 800824a:	0148      	lsls	r0, r1, #5
 800824c:	6a39      	ldr	r1, [r7, #32]
 800824e:	4401      	add	r1, r0
 8008250:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008254:	4313      	orrs	r3, r2
 8008256:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	6a3b      	ldr	r3, [r7, #32]
 800825e:	4413      	add	r3, r2
 8008260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800826e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	78db      	ldrb	r3, [r3, #3]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d004      	beq.n	8008282 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800827e:	613b      	str	r3, [r7, #16]
 8008280:	e003      	b.n	800828a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008288:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008290:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	015a      	lsls	r2, r3, #5
 8008296:	6a3b      	ldr	r3, [r7, #32]
 8008298:	4413      	add	r3, r2
 800829a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800829e:	461a      	mov	r2, r3
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80082a4:	79fb      	ldrb	r3, [r7, #7]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	e04e      	b.n	800834c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	78db      	ldrb	r3, [r3, #3]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d149      	bne.n	800834a <USB_HC_StartXfer+0x276>
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d045      	beq.n	800834a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	79db      	ldrb	r3, [r3, #7]
 80082c2:	2b03      	cmp	r3, #3
 80082c4:	d830      	bhi.n	8008328 <USB_HC_StartXfer+0x254>
 80082c6:	a201      	add	r2, pc, #4	; (adr r2, 80082cc <USB_HC_StartXfer+0x1f8>)
 80082c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082cc:	080082dd 	.word	0x080082dd
 80082d0:	08008301 	.word	0x08008301
 80082d4:	080082dd 	.word	0x080082dd
 80082d8:	08008301 	.word	0x08008301
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	3303      	adds	r3, #3
 80082e2:	089b      	lsrs	r3, r3, #2
 80082e4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80082e6:	8afa      	ldrh	r2, [r7, #22]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d91c      	bls.n	800832c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	f043 0220 	orr.w	r2, r3, #32
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	619a      	str	r2, [r3, #24]
        }
        break;
 80082fe:	e015      	b.n	800832c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	695b      	ldr	r3, [r3, #20]
 8008304:	3303      	adds	r3, #3
 8008306:	089b      	lsrs	r3, r3, #2
 8008308:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800830a:	8afa      	ldrh	r2, [r7, #22]
 800830c:	6a3b      	ldr	r3, [r7, #32]
 800830e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	b29b      	uxth	r3, r3
 8008316:	429a      	cmp	r2, r3
 8008318:	d90a      	bls.n	8008330 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	619a      	str	r2, [r3, #24]
        }
        break;
 8008326:	e003      	b.n	8008330 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008328:	bf00      	nop
 800832a:	e002      	b.n	8008332 <USB_HC_StartXfer+0x25e>
        break;
 800832c:	bf00      	nop
 800832e:	e000      	b.n	8008332 <USB_HC_StartXfer+0x25e>
        break;
 8008330:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	68d9      	ldr	r1, [r3, #12]
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	785a      	ldrb	r2, [r3, #1]
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	b29b      	uxth	r3, r3
 8008340:	2000      	movs	r0, #0
 8008342:	9000      	str	r0, [sp, #0]
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f7ff fb53 	bl	80079f0 <USB_WritePacket>
  }

  return HAL_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3728      	adds	r7, #40	; 0x28
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	1ff80000 	.word	0x1ff80000

08008358 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	b29b      	uxth	r3, r3
}
 800836e:	4618      	mov	r0, r3
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800837a:	b480      	push	{r7}
 800837c:	b089      	sub	sp, #36	; 0x24
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	460b      	mov	r3, r1
 8008384:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800838a:	78fb      	ldrb	r3, [r7, #3]
 800838c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800838e:	2300      	movs	r3, #0
 8008390:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	015a      	lsls	r2, r3, #5
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	4413      	add	r3, r2
 800839a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	0c9b      	lsrs	r3, r3, #18
 80083a2:	f003 0303 	and.w	r3, r3, #3
 80083a6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	015a      	lsls	r2, r3, #5
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	4413      	add	r3, r2
 80083b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	0fdb      	lsrs	r3, r3, #31
 80083b8:	f003 0301 	and.w	r3, r3, #1
 80083bc:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f003 0320 	and.w	r3, r3, #32
 80083c6:	2b20      	cmp	r3, #32
 80083c8:	d104      	bne.n	80083d4 <USB_HC_Halt+0x5a>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d101      	bne.n	80083d4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	e0e8      	b.n	80085a6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <USB_HC_Halt+0x66>
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d173      	bne.n	80084c8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	015a      	lsls	r2, r3, #5
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	4413      	add	r3, r2
 80083e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	0151      	lsls	r1, r2, #5
 80083f2:	69ba      	ldr	r2, [r7, #24]
 80083f4:	440a      	add	r2, r1
 80083f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083fe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f003 0320 	and.w	r3, r3, #32
 8008408:	2b00      	cmp	r3, #0
 800840a:	f040 80cb 	bne.w	80085a4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008412:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d143      	bne.n	80084a2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	015a      	lsls	r2, r3, #5
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	4413      	add	r3, r2
 8008422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	697a      	ldr	r2, [r7, #20]
 800842a:	0151      	lsls	r1, r2, #5
 800842c:	69ba      	ldr	r2, [r7, #24]
 800842e:	440a      	add	r2, r1
 8008430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008434:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008438:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	4413      	add	r3, r2
 8008442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	0151      	lsls	r1, r2, #5
 800844c:	69ba      	ldr	r2, [r7, #24]
 800844e:	440a      	add	r2, r1
 8008450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008454:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008458:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	4413      	add	r3, r2
 8008462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	0151      	lsls	r1, r2, #5
 800846c:	69ba      	ldr	r2, [r7, #24]
 800846e:	440a      	add	r2, r1
 8008470:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008474:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008478:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	3301      	adds	r3, #1
 800847e:	61fb      	str	r3, [r7, #28]
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008486:	d81d      	bhi.n	80084c4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	015a      	lsls	r2, r3, #5
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	4413      	add	r3, r2
 8008490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800849a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800849e:	d0ec      	beq.n	800847a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80084a0:	e080      	b.n	80085a4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	015a      	lsls	r2, r3, #5
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	4413      	add	r3, r2
 80084aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	697a      	ldr	r2, [r7, #20]
 80084b2:	0151      	lsls	r1, r2, #5
 80084b4:	69ba      	ldr	r2, [r7, #24]
 80084b6:	440a      	add	r2, r1
 80084b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084c0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80084c2:	e06f      	b.n	80085a4 <USB_HC_Halt+0x22a>
            break;
 80084c4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80084c6:	e06d      	b.n	80085a4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	0151      	lsls	r1, r2, #5
 80084da:	69ba      	ldr	r2, [r7, #24]
 80084dc:	440a      	add	r2, r1
 80084de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084e6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d143      	bne.n	8008580 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	0151      	lsls	r1, r2, #5
 800850a:	69ba      	ldr	r2, [r7, #24]
 800850c:	440a      	add	r2, r1
 800850e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008512:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008516:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	015a      	lsls	r2, r3, #5
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	4413      	add	r3, r2
 8008520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	697a      	ldr	r2, [r7, #20]
 8008528:	0151      	lsls	r1, r2, #5
 800852a:	69ba      	ldr	r2, [r7, #24]
 800852c:	440a      	add	r2, r1
 800852e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008532:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008536:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	015a      	lsls	r2, r3, #5
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	4413      	add	r3, r2
 8008540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	0151      	lsls	r1, r2, #5
 800854a:	69ba      	ldr	r2, [r7, #24]
 800854c:	440a      	add	r2, r1
 800854e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008552:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008556:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	3301      	adds	r3, #1
 800855c:	61fb      	str	r3, [r7, #28]
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008564:	d81d      	bhi.n	80085a2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	015a      	lsls	r2, r3, #5
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	4413      	add	r3, r2
 800856e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008578:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800857c:	d0ec      	beq.n	8008558 <USB_HC_Halt+0x1de>
 800857e:	e011      	b.n	80085a4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	4413      	add	r3, r2
 8008588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	0151      	lsls	r1, r2, #5
 8008592:	69ba      	ldr	r2, [r7, #24]
 8008594:	440a      	add	r2, r1
 8008596:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800859a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800859e:	6013      	str	r3, [r2, #0]
 80085a0:	e000      	b.n	80085a4 <USB_HC_Halt+0x22a>
          break;
 80085a2:	bf00      	nop
    }
  }

  return HAL_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3724      	adds	r7, #36	; 0x24
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
	...

080085b4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	460b      	mov	r3, r1
 80085be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80085c4:	78fb      	ldrb	r3, [r7, #3]
 80085c6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80085c8:	2301      	movs	r3, #1
 80085ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	04da      	lsls	r2, r3, #19
 80085d0:	4b15      	ldr	r3, [pc, #84]	; (8008628 <USB_DoPing+0x74>)
 80085d2:	4013      	ands	r3, r2
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	0151      	lsls	r1, r2, #5
 80085d8:	697a      	ldr	r2, [r7, #20]
 80085da:	440a      	add	r2, r1
 80085dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085e4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	015a      	lsls	r2, r3, #5
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	4413      	add	r3, r2
 80085ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80085fc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008604:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	015a      	lsls	r2, r3, #5
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	4413      	add	r3, r2
 800860e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008612:	461a      	mov	r2, r3
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	371c      	adds	r7, #28
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	1ff80000 	.word	0x1ff80000

0800862c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008638:	2300      	movs	r3, #0
 800863a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f7ff f935 	bl	80078ac <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008642:	2110      	movs	r1, #16
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7ff f98f 	bl	8007968 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f7ff f9b0 	bl	80079b0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008650:	2300      	movs	r3, #0
 8008652:	613b      	str	r3, [r7, #16]
 8008654:	e01f      	b.n	8008696 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	015a      	lsls	r2, r3, #5
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	4413      	add	r3, r2
 800865e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800866c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008674:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800867c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	015a      	lsls	r2, r3, #5
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	4413      	add	r3, r2
 8008686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800868a:	461a      	mov	r2, r3
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	3301      	adds	r3, #1
 8008694:	613b      	str	r3, [r7, #16]
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	2b0f      	cmp	r3, #15
 800869a:	d9dc      	bls.n	8008656 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800869c:	2300      	movs	r3, #0
 800869e:	613b      	str	r3, [r7, #16]
 80086a0:	e034      	b.n	800870c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	015a      	lsls	r2, r3, #5
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	4413      	add	r3, r2
 80086aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086b8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086c0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086c8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	015a      	lsls	r2, r3, #5
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	4413      	add	r3, r2
 80086d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086d6:	461a      	mov	r2, r3
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	3301      	adds	r3, #1
 80086e0:	617b      	str	r3, [r7, #20]
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086e8:	d80c      	bhi.n	8008704 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	015a      	lsls	r2, r3, #5
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	4413      	add	r3, r2
 80086f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008700:	d0ec      	beq.n	80086dc <USB_StopHost+0xb0>
 8008702:	e000      	b.n	8008706 <USB_StopHost+0xda>
        break;
 8008704:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	3301      	adds	r3, #1
 800870a:	613b      	str	r3, [r7, #16]
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	2b0f      	cmp	r3, #15
 8008710:	d9c7      	bls.n	80086a2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008718:	461a      	mov	r2, r3
 800871a:	f04f 33ff 	mov.w	r3, #4294967295
 800871e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f04f 32ff 	mov.w	r2, #4294967295
 8008726:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f7ff f8ae 	bl	800788a <USB_EnableGlobalInt>

  return HAL_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3718      	adds	r7, #24
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800873c:	4904      	ldr	r1, [pc, #16]	; (8008750 <MX_FATFS_Init+0x18>)
 800873e:	4805      	ldr	r0, [pc, #20]	; (8008754 <MX_FATFS_Init+0x1c>)
 8008740:	f005 fac4 	bl	800dccc <FATFS_LinkDriver>
 8008744:	4603      	mov	r3, r0
 8008746:	461a      	mov	r2, r3
 8008748:	4b03      	ldr	r3, [pc, #12]	; (8008758 <MX_FATFS_Init+0x20>)
 800874a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800874c:	bf00      	nop
 800874e:	bd80      	pop	{r7, pc}
 8008750:	200033b8 	.word	0x200033b8
 8008754:	080863bc 	.word	0x080863bc
 8008758:	20005420 	.word	0x20005420

0800875c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800875c:	b480      	push	{r7}
 800875e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008760:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008762:	4618      	mov	r0, r3
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	4603      	mov	r3, r0
 8008774:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	4603      	mov	r3, r0
 800878c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8008792:	79fb      	ldrb	r3, [r7, #7]
 8008794:	4619      	mov	r1, r3
 8008796:	4808      	ldr	r0, [pc, #32]	; (80087b8 <USBH_status+0x34>)
 8008798:	f000 ff98 	bl	80096cc <USBH_MSC_UnitIsReady>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d002      	beq.n	80087a8 <USBH_status+0x24>
  {
    res = RES_OK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	73fb      	strb	r3, [r7, #15]
 80087a6:	e001      	b.n	80087ac <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	20005424 	.word	0x20005424

080087bc <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b094      	sub	sp, #80	; 0x50
 80087c0:	af02      	add	r7, sp, #8
 80087c2:	60b9      	str	r1, [r7, #8]
 80087c4:	607a      	str	r2, [r7, #4]
 80087c6:	603b      	str	r3, [r7, #0]
 80087c8:	4603      	mov	r3, r0
 80087ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80087d2:	7bf9      	ldrb	r1, [r7, #15]
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	4818      	ldr	r0, [pc, #96]	; (8008840 <USBH_read+0x84>)
 80087de:	f000 ffbf 	bl	8009760 <USBH_MSC_Read>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d103      	bne.n	80087f0 <USBH_read+0x34>
  {
    res = RES_OK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80087ee:	e020      	b.n	8008832 <USBH_read+0x76>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80087f0:	f107 0210 	add.w	r2, r7, #16
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
 80087f6:	4619      	mov	r1, r3
 80087f8:	4811      	ldr	r0, [pc, #68]	; (8008840 <USBH_read+0x84>)
 80087fa:	f000 ff8d 	bl	8009718 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80087fe:	7f7b      	ldrb	r3, [r7, #29]
 8008800:	2b3a      	cmp	r3, #58	; 0x3a
 8008802:	d005      	beq.n	8008810 <USBH_read+0x54>
 8008804:	2b3a      	cmp	r3, #58	; 0x3a
 8008806:	dc10      	bgt.n	800882a <USBH_read+0x6e>
 8008808:	2b04      	cmp	r3, #4
 800880a:	d001      	beq.n	8008810 <USBH_read+0x54>
 800880c:	2b28      	cmp	r3, #40	; 0x28
 800880e:	d10c      	bne.n	800882a <USBH_read+0x6e>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
 8008810:	480c      	ldr	r0, [pc, #48]	; (8008844 <USBH_read+0x88>)
 8008812:	f005 fe77 	bl	800e504 <iprintf>
 8008816:	480c      	ldr	r0, [pc, #48]	; (8008848 <USBH_read+0x8c>)
 8008818:	f005 fe74 	bl	800e504 <iprintf>
 800881c:	200a      	movs	r0, #10
 800881e:	f005 fe89 	bl	800e534 <putchar>
      res = RES_NOTRDY;
 8008822:	2303      	movs	r3, #3
 8008824:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008828:	e003      	b.n	8008832 <USBH_read+0x76>

    default:
      res = RES_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008830:	bf00      	nop
    }
  }

  return res;
 8008832:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008836:	4618      	mov	r0, r3
 8008838:	3748      	adds	r7, #72	; 0x48
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	20005424 	.word	0x20005424
 8008844:	0800f3cc 	.word	0x0800f3cc
 8008848:	0800f3d4 	.word	0x0800f3d4

0800884c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b094      	sub	sp, #80	; 0x50
 8008850:	af02      	add	r7, sp, #8
 8008852:	60b9      	str	r1, [r7, #8]
 8008854:	607a      	str	r2, [r7, #4]
 8008856:	603b      	str	r3, [r7, #0]
 8008858:	4603      	mov	r3, r0
 800885a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8008862:	7bf9      	ldrb	r1, [r7, #15]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	4820      	ldr	r0, [pc, #128]	; (80088f0 <USBH_write+0xa4>)
 800886e:	f000 ffe0 	bl	8009832 <USBH_MSC_Write>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d103      	bne.n	8008880 <USBH_write+0x34>
  {
    res = RES_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800887e:	e031      	b.n	80088e4 <USBH_write+0x98>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008880:	f107 0210 	add.w	r2, r7, #16
 8008884:	7bfb      	ldrb	r3, [r7, #15]
 8008886:	4619      	mov	r1, r3
 8008888:	4819      	ldr	r0, [pc, #100]	; (80088f0 <USBH_write+0xa4>)
 800888a:	f000 ff45 	bl	8009718 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800888e:	7f7b      	ldrb	r3, [r7, #29]
 8008890:	2b3a      	cmp	r3, #58	; 0x3a
 8008892:	d016      	beq.n	80088c2 <USBH_write+0x76>
 8008894:	2b3a      	cmp	r3, #58	; 0x3a
 8008896:	dc21      	bgt.n	80088dc <USBH_write+0x90>
 8008898:	2b28      	cmp	r3, #40	; 0x28
 800889a:	d012      	beq.n	80088c2 <USBH_write+0x76>
 800889c:	2b28      	cmp	r3, #40	; 0x28
 800889e:	dc1d      	bgt.n	80088dc <USBH_write+0x90>
 80088a0:	2b04      	cmp	r3, #4
 80088a2:	d00e      	beq.n	80088c2 <USBH_write+0x76>
 80088a4:	2b27      	cmp	r3, #39	; 0x27
 80088a6:	d119      	bne.n	80088dc <USBH_write+0x90>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
 80088a8:	4812      	ldr	r0, [pc, #72]	; (80088f4 <USBH_write+0xa8>)
 80088aa:	f005 fe2b 	bl	800e504 <iprintf>
 80088ae:	4812      	ldr	r0, [pc, #72]	; (80088f8 <USBH_write+0xac>)
 80088b0:	f005 fe28 	bl	800e504 <iprintf>
 80088b4:	200a      	movs	r0, #10
 80088b6:	f005 fe3d 	bl	800e534 <putchar>
      res = RES_WRPRT;
 80088ba:	2302      	movs	r3, #2
 80088bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80088c0:	e010      	b.n	80088e4 <USBH_write+0x98>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
 80088c2:	480c      	ldr	r0, [pc, #48]	; (80088f4 <USBH_write+0xa8>)
 80088c4:	f005 fe1e 	bl	800e504 <iprintf>
 80088c8:	480c      	ldr	r0, [pc, #48]	; (80088fc <USBH_write+0xb0>)
 80088ca:	f005 fe1b 	bl	800e504 <iprintf>
 80088ce:	200a      	movs	r0, #10
 80088d0:	f005 fe30 	bl	800e534 <putchar>
      res = RES_NOTRDY;
 80088d4:	2303      	movs	r3, #3
 80088d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80088da:	e003      	b.n	80088e4 <USBH_write+0x98>

    default:
      res = RES_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80088e2:	bf00      	nop
    }
  }

  return res;
 80088e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3748      	adds	r7, #72	; 0x48
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	20005424 	.word	0x20005424
 80088f4:	0800f3cc 	.word	0x0800f3cc
 80088f8:	0800f3ec 	.word	0x0800f3ec
 80088fc:	0800f3d4 	.word	0x0800f3d4

08008900 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b090      	sub	sp, #64	; 0x40
 8008904:	af00      	add	r7, sp, #0
 8008906:	4603      	mov	r3, r0
 8008908:	603a      	str	r2, [r7, #0]
 800890a:	71fb      	strb	r3, [r7, #7]
 800890c:	460b      	mov	r3, r1
 800890e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008916:	79bb      	ldrb	r3, [r7, #6]
 8008918:	2b03      	cmp	r3, #3
 800891a:	d852      	bhi.n	80089c2 <USBH_ioctl+0xc2>
 800891c:	a201      	add	r2, pc, #4	; (adr r2, 8008924 <USBH_ioctl+0x24>)
 800891e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008922:	bf00      	nop
 8008924:	08008935 	.word	0x08008935
 8008928:	0800893d 	.word	0x0800893d
 800892c:	08008967 	.word	0x08008967
 8008930:	08008993 	.word	0x08008993
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008934:	2300      	movs	r3, #0
 8008936:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800893a:	e045      	b.n	80089c8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800893c:	f107 0208 	add.w	r2, r7, #8
 8008940:	79fb      	ldrb	r3, [r7, #7]
 8008942:	4619      	mov	r1, r3
 8008944:	4823      	ldr	r0, [pc, #140]	; (80089d4 <USBH_ioctl+0xd4>)
 8008946:	f000 fee7 	bl	8009718 <USBH_MSC_GetLUNInfo>
 800894a:	4603      	mov	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d106      	bne.n	800895e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800895c:	e034      	b.n	80089c8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008964:	e030      	b.n	80089c8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008966:	f107 0208 	add.w	r2, r7, #8
 800896a:	79fb      	ldrb	r3, [r7, #7]
 800896c:	4619      	mov	r1, r3
 800896e:	4819      	ldr	r0, [pc, #100]	; (80089d4 <USBH_ioctl+0xd4>)
 8008970:	f000 fed2 	bl	8009718 <USBH_MSC_GetLUNInfo>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d107      	bne.n	800898a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800897a:	8a3b      	ldrh	r3, [r7, #16]
 800897c:	461a      	mov	r2, r3
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008982:	2300      	movs	r3, #0
 8008984:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008988:	e01e      	b.n	80089c8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008990:	e01a      	b.n	80089c8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008992:	f107 0208 	add.w	r2, r7, #8
 8008996:	79fb      	ldrb	r3, [r7, #7]
 8008998:	4619      	mov	r1, r3
 800899a:	480e      	ldr	r0, [pc, #56]	; (80089d4 <USBH_ioctl+0xd4>)
 800899c:	f000 febc 	bl	8009718 <USBH_MSC_GetLUNInfo>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d109      	bne.n	80089ba <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80089a6:	8a3b      	ldrh	r3, [r7, #16]
 80089a8:	0a5b      	lsrs	r3, r3, #9
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	461a      	mov	r2, r3
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80089b8:	e006      	b.n	80089c8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80089c0:	e002      	b.n	80089c8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80089c2:	2304      	movs	r3, #4
 80089c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80089c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3740      	adds	r7, #64	; 0x40
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	20005424 	.word	0x20005424

080089d8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80089d8:	b590      	push	{r4, r7, lr}
 80089da:	b089      	sub	sp, #36	; 0x24
 80089dc:	af04      	add	r7, sp, #16
 80089de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089e6:	7919      	ldrb	r1, [r3, #4]
 80089e8:	2350      	movs	r3, #80	; 0x50
 80089ea:	2206      	movs	r2, #6
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f001 fe1b 	bl	800a628 <USBH_FindInterface>
 80089f2:	4603      	mov	r3, r0
 80089f4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80089f6:	7bfb      	ldrb	r3, [r7, #15]
 80089f8:	2bff      	cmp	r3, #255	; 0xff
 80089fa:	d002      	beq.n	8008a02 <USBH_MSC_InterfaceInit+0x2a>
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d90f      	bls.n	8008a22 <USBH_MSC_InterfaceInit+0x4a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 8008a02:	4886      	ldr	r0, [pc, #536]	; (8008c1c <USBH_MSC_InterfaceInit+0x244>)
 8008a04:	f005 fd7e 	bl	800e504 <iprintf>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4619      	mov	r1, r3
 8008a12:	4883      	ldr	r0, [pc, #524]	; (8008c20 <USBH_MSC_InterfaceInit+0x248>)
 8008a14:	f005 fd76 	bl	800e504 <iprintf>
 8008a18:	200a      	movs	r0, #10
 8008a1a:	f005 fd8b 	bl	800e534 <putchar>
    return USBH_FAIL;
 8008a1e:	2302      	movs	r3, #2
 8008a20:	e0f8      	b.n	8008c14 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8008a22:	7bfb      	ldrb	r3, [r7, #15]
 8008a24:	4619      	mov	r1, r3
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f001 fd96 	bl	800a558 <USBH_SelectInterface>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008a30:	7bbb      	ldrb	r3, [r7, #14]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <USBH_MSC_InterfaceInit+0x62>
  {
    return USBH_FAIL;
 8008a36:	2302      	movs	r3, #2
 8008a38:	e0ec      	b.n	8008c14 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008a40:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008a44:	f005 fc8e 	bl	800e364 <malloc>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a52:	69db      	ldr	r3, [r3, #28]
 8008a54:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10a      	bne.n	8008a72 <USBH_MSC_InterfaceInit+0x9a>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
 8008a5c:	486f      	ldr	r0, [pc, #444]	; (8008c1c <USBH_MSC_InterfaceInit+0x244>)
 8008a5e:	f005 fd51 	bl	800e504 <iprintf>
 8008a62:	4870      	ldr	r0, [pc, #448]	; (8008c24 <USBH_MSC_InterfaceInit+0x24c>)
 8008a64:	f005 fd4e 	bl	800e504 <iprintf>
 8008a68:	200a      	movs	r0, #10
 8008a6a:	f005 fd63 	bl	800e534 <putchar>
    return USBH_FAIL;
 8008a6e:	2302      	movs	r3, #2
 8008a70:	e0d0      	b.n	8008c14 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008a72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a76:	2100      	movs	r1, #0
 8008a78:	68b8      	ldr	r0, [r7, #8]
 8008a7a:	f005 fc91 	bl	800e3a0 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008a7e:	7bfb      	ldrb	r3, [r7, #15]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	211a      	movs	r1, #26
 8008a84:	fb01 f303 	mul.w	r3, r1, r3
 8008a88:	4413      	add	r3, r2
 8008a8a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	b25b      	sxtb	r3, r3
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	da16      	bge.n	8008ac4 <USBH_MSC_InterfaceInit+0xec>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	211a      	movs	r1, #26
 8008a9c:	fb01 f303 	mul.w	r3, r1, r3
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008aa6:	781a      	ldrb	r2, [r3, #0]
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008aac:	7bfb      	ldrb	r3, [r7, #15]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	211a      	movs	r1, #26
 8008ab2:	fb01 f303 	mul.w	r3, r1, r3
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008abc:	881a      	ldrh	r2, [r3, #0]
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	815a      	strh	r2, [r3, #10]
 8008ac2:	e015      	b.n	8008af0 <USBH_MSC_InterfaceInit+0x118>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	211a      	movs	r1, #26
 8008aca:	fb01 f303 	mul.w	r3, r1, r3
 8008ace:	4413      	add	r3, r2
 8008ad0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ad4:	781a      	ldrb	r2, [r3, #0]
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ada:	7bfb      	ldrb	r3, [r7, #15]
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	211a      	movs	r1, #26
 8008ae0:	fb01 f303 	mul.w	r3, r1, r3
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008aea:	881a      	ldrh	r2, [r3, #0]
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	211a      	movs	r1, #26
 8008af6:	fb01 f303 	mul.w	r3, r1, r3
 8008afa:	4413      	add	r3, r2
 8008afc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	b25b      	sxtb	r3, r3
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	da16      	bge.n	8008b36 <USBH_MSC_InterfaceInit+0x15e>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008b08:	7bfb      	ldrb	r3, [r7, #15]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	211a      	movs	r1, #26
 8008b0e:	fb01 f303 	mul.w	r3, r1, r3
 8008b12:	4413      	add	r3, r2
 8008b14:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b18:	781a      	ldrb	r2, [r3, #0]
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008b1e:	7bfb      	ldrb	r3, [r7, #15]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	211a      	movs	r1, #26
 8008b24:	fb01 f303 	mul.w	r3, r1, r3
 8008b28:	4413      	add	r3, r2
 8008b2a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008b2e:	881a      	ldrh	r2, [r3, #0]
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	815a      	strh	r2, [r3, #10]
 8008b34:	e015      	b.n	8008b62 <USBH_MSC_InterfaceInit+0x18a>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	211a      	movs	r1, #26
 8008b3c:	fb01 f303 	mul.w	r3, r1, r3
 8008b40:	4413      	add	r3, r2
 8008b42:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b46:	781a      	ldrb	r2, [r3, #0]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	211a      	movs	r1, #26
 8008b52:	fb01 f303 	mul.w	r3, r1, r3
 8008b56:	4413      	add	r3, r2
 8008b58:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008b5c:	881a      	ldrh	r2, [r3, #0]
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	2200      	movs	r2, #0
 8008b66:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	2200      	movs	r2, #0
 8008b72:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	799b      	ldrb	r3, [r3, #6]
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f003 f8cf 	bl	800bd1e <USBH_AllocPipe>
 8008b80:	4603      	mov	r3, r0
 8008b82:	461a      	mov	r2, r3
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	79db      	ldrb	r3, [r3, #7]
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f003 f8c5 	bl	800bd1e <USBH_AllocPipe>
 8008b94:	4603      	mov	r3, r0
 8008b96:	461a      	mov	r2, r3
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 feed 	bl	800997c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	7959      	ldrb	r1, [r3, #5]
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	7998      	ldrb	r0, [r3, #6]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	8912      	ldrh	r2, [r2, #8]
 8008bba:	9202      	str	r2, [sp, #8]
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	9201      	str	r2, [sp, #4]
 8008bc0:	9300      	str	r3, [sp, #0]
 8008bc2:	4623      	mov	r3, r4
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f003 f87a 	bl	800bcc0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	7919      	ldrb	r1, [r3, #4]
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	79d8      	ldrb	r0, [r3, #7]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	8952      	ldrh	r2, [r2, #10]
 8008be4:	9202      	str	r2, [sp, #8]
 8008be6:	2202      	movs	r2, #2
 8008be8:	9201      	str	r2, [sp, #4]
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	4623      	mov	r3, r4
 8008bee:	4602      	mov	r2, r0
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f003 f865 	bl	800bcc0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	791b      	ldrb	r3, [r3, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f005 faef 	bl	800e1e2 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	795b      	ldrb	r3, [r3, #5]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f005 fae8 	bl	800e1e2 <USBH_LL_SetToggle>

  return USBH_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3714      	adds	r7, #20
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd90      	pop	{r4, r7, pc}
 8008c1c:	0800f410 	.word	0x0800f410
 8008c20:	0800f41c 	.word	0x0800f41c
 8008c24:	0800f444 	.word	0x0800f444

08008c28 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c36:	69db      	ldr	r3, [r3, #28]
 8008c38:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	795b      	ldrb	r3, [r3, #5]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00e      	beq.n	8008c60 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	795b      	ldrb	r3, [r3, #5]
 8008c46:	4619      	mov	r1, r3
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f003 f858 	bl	800bcfe <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	795b      	ldrb	r3, [r3, #5]
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f003 f883 	bl	800bd60 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	791b      	ldrb	r3, [r3, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00e      	beq.n	8008c86 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	791b      	ldrb	r3, [r3, #4]
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f003 f845 	bl	800bcfe <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	791b      	ldrb	r3, [r3, #4]
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f003 f870 	bl	800bd60 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c8c:	69db      	ldr	r3, [r3, #28]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00b      	beq.n	8008caa <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c98:	69db      	ldr	r3, [r3, #28]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f005 fb6a 	bl	800e374 <free>
    phost->pActiveClass->pData = 0U;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cc2:	69db      	ldr	r3, [r3, #28]
 8008cc4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	7b9b      	ldrb	r3, [r3, #14]
 8008cce:	2b03      	cmp	r3, #3
 8008cd0:	d04a      	beq.n	8008d68 <USBH_MSC_ClassRequest+0xb4>
 8008cd2:	2b03      	cmp	r3, #3
 8008cd4:	dc54      	bgt.n	8008d80 <USBH_MSC_ClassRequest+0xcc>
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <USBH_MSC_ClassRequest+0x2a>
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d150      	bne.n	8008d80 <USBH_MSC_ClassRequest+0xcc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fe2b 	bl	800993e <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
 8008cee:	2b03      	cmp	r3, #3
 8008cf0:	d104      	bne.n	8008cfc <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d140      	bne.n	8008d84 <USBH_MSC_ClassRequest+0xd0>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d804      	bhi.n	8008d14 <USBH_MSC_ClassRequest+0x60>
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	b2da      	uxtb	r2, r3
 8008d12:	e000      	b.n	8008d16 <USBH_MSC_ClassRequest+0x62>
 8008d14:	2202      	movs	r2, #2
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	4619      	mov	r1, r3
 8008d20:	481c      	ldr	r0, [pc, #112]	; (8008d94 <USBH_MSC_ClassRequest+0xe0>)
 8008d22:	f005 fbef 	bl	800e504 <iprintf>
 8008d26:	200a      	movs	r0, #10
 8008d28:	f005 fc04 	bl	800e534 <putchar>

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	73bb      	strb	r3, [r7, #14]
 8008d30:	e014      	b.n	8008d5c <USBH_MSC_ClassRequest+0xa8>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	2134      	movs	r1, #52	; 0x34
 8008d38:	fb01 f303 	mul.w	r3, r1, r3
 8008d3c:	4413      	add	r3, r2
 8008d3e:	3392      	adds	r3, #146	; 0x92
 8008d40:	2202      	movs	r2, #2
 8008d42:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008d44:	7bbb      	ldrb	r3, [r7, #14]
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	2134      	movs	r1, #52	; 0x34
 8008d4a:	fb01 f303 	mul.w	r3, r1, r3
 8008d4e:	4413      	add	r3, r2
 8008d50:	33c1      	adds	r3, #193	; 0xc1
 8008d52:	2200      	movs	r2, #0
 8008d54:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008d56:	7bbb      	ldrb	r3, [r7, #14]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	73bb      	strb	r3, [r7, #14]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	7bba      	ldrb	r2, [r7, #14]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d3e5      	bcc.n	8008d32 <USBH_MSC_ClassRequest+0x7e>
        }
      }
      break;
 8008d66:	e00d      	b.n	8008d84 <USBH_MSC_ClassRequest+0xd0>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008d68:	2100      	movs	r1, #0
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f002 fb69 	bl	800b442 <USBH_ClrFeature>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d108      	bne.n	8008d88 <USBH_MSC_ClassRequest+0xd4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	7bda      	ldrb	r2, [r3, #15]
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	739a      	strb	r2, [r3, #14]
      }
      break;
 8008d7e:	e003      	b.n	8008d88 <USBH_MSC_ClassRequest+0xd4>

    default:
      break;
 8008d80:	bf00      	nop
 8008d82:	e002      	b.n	8008d8a <USBH_MSC_ClassRequest+0xd6>
      break;
 8008d84:	bf00      	nop
 8008d86:	e000      	b.n	8008d8a <USBH_MSC_ClassRequest+0xd6>
      break;
 8008d88:	bf00      	nop
  }

  return status;
 8008d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	0800f46c 	.word	0x0800f46c

08008d98 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008da6:	69db      	ldr	r3, [r3, #28]
 8008da8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008daa:	2301      	movs	r3, #1
 8008dac:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008dae:	2301      	movs	r3, #1
 8008db0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008db2:	2301      	movs	r3, #1
 8008db4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	7b1b      	ldrb	r3, [r3, #12]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d003      	beq.n	8008dc6 <USBH_MSC_Process+0x2e>
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	f000 8355 	beq.w	800946e <USBH_MSC_Process+0x6d6>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008dc4:	e356      	b.n	8009474 <USBH_MSC_Process+0x6dc>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	f080 8333 	bcs.w	800943e <USBH_MSC_Process+0x6a6>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008dde:	4619      	mov	r1, r3
 8008de0:	693a      	ldr	r2, [r7, #16]
 8008de2:	2334      	movs	r3, #52	; 0x34
 8008de4:	fb03 f301 	mul.w	r3, r3, r1
 8008de8:	4413      	add	r3, r2
 8008dea:	3391      	adds	r3, #145	; 0x91
 8008dec:	2201      	movs	r2, #1
 8008dee:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008df6:	4619      	mov	r1, r3
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	2334      	movs	r3, #52	; 0x34
 8008dfc:	fb03 f301 	mul.w	r3, r3, r1
 8008e00:	4413      	add	r3, r2
 8008e02:	3390      	adds	r3, #144	; 0x90
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	2b08      	cmp	r3, #8
 8008e08:	f200 8327 	bhi.w	800945a <USBH_MSC_Process+0x6c2>
 8008e0c:	a201      	add	r2, pc, #4	; (adr r2, 8008e14 <USBH_MSC_Process+0x7c>)
 8008e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e12:	bf00      	nop
 8008e14:	08008e39 	.word	0x08008e39
 8008e18:	0800945b 	.word	0x0800945b
 8008e1c:	08008f81 	.word	0x08008f81
 8008e20:	08009135 	.word	0x08009135
 8008e24:	08008e73 	.word	0x08008e73
 8008e28:	080092a1 	.word	0x080092a1
 8008e2c:	0800945b 	.word	0x0800945b
 8008e30:	0800945b 	.word	0x0800945b
 8008e34:	0800942d 	.word	0x0800942d
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e3e:	4619      	mov	r1, r3
 8008e40:	48b6      	ldr	r0, [pc, #728]	; (800911c <USBH_MSC_Process+0x384>)
 8008e42:	f005 fb5f 	bl	800e504 <iprintf>
 8008e46:	200a      	movs	r0, #10
 8008e48:	f005 fb74 	bl	800e534 <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e52:	4619      	mov	r1, r3
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	2334      	movs	r3, #52	; 0x34
 8008e58:	fb03 f301 	mul.w	r3, r3, r1
 8008e5c:	4413      	add	r3, r2
 8008e5e:	3390      	adds	r3, #144	; 0x90
 8008e60:	2204      	movs	r2, #4
 8008e62:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008e70:	e2fc      	b.n	800946c <USBH_MSC_Process+0x6d4>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e78:	b2d9      	uxtb	r1, r3
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e80:	461a      	mov	r2, r3
 8008e82:	2334      	movs	r3, #52	; 0x34
 8008e84:	fb03 f302 	mul.w	r3, r3, r2
 8008e88:	3398      	adds	r3, #152	; 0x98
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	3307      	adds	r3, #7
 8008e90:	461a      	mov	r2, r3
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f001 f890 	bl	8009fb8 <USBH_MSC_SCSI_Inquiry>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d141      	bne.n	8008f26 <USBH_MSC_Process+0x18e>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	2334      	movs	r3, #52	; 0x34
 8008eac:	fb03 f302 	mul.w	r3, r3, r2
 8008eb0:	3398      	adds	r3, #152	; 0x98
 8008eb2:	693a      	ldr	r2, [r7, #16]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	330a      	adds	r3, #10
 8008eb8:	4619      	mov	r1, r3
 8008eba:	4899      	ldr	r0, [pc, #612]	; (8009120 <USBH_MSC_Process+0x388>)
 8008ebc:	f005 fb22 	bl	800e504 <iprintf>
 8008ec0:	200a      	movs	r0, #10
 8008ec2:	f005 fb37 	bl	800e534 <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ecc:	461a      	mov	r2, r3
 8008ece:	2334      	movs	r3, #52	; 0x34
 8008ed0:	fb03 f302 	mul.w	r3, r3, r2
 8008ed4:	33a0      	adds	r3, #160	; 0xa0
 8008ed6:	693a      	ldr	r2, [r7, #16]
 8008ed8:	4413      	add	r3, r2
 8008eda:	330b      	adds	r3, #11
 8008edc:	4619      	mov	r1, r3
 8008ede:	4891      	ldr	r0, [pc, #580]	; (8009124 <USBH_MSC_Process+0x38c>)
 8008ee0:	f005 fb10 	bl	800e504 <iprintf>
 8008ee4:	200a      	movs	r0, #10
 8008ee6:	f005 fb25 	bl	800e534 <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	2334      	movs	r3, #52	; 0x34
 8008ef4:	fb03 f302 	mul.w	r3, r3, r2
 8008ef8:	33b0      	adds	r3, #176	; 0xb0
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	4413      	add	r3, r2
 8008efe:	330c      	adds	r3, #12
 8008f00:	4619      	mov	r1, r3
 8008f02:	4889      	ldr	r0, [pc, #548]	; (8009128 <USBH_MSC_Process+0x390>)
 8008f04:	f005 fafe 	bl	800e504 <iprintf>
 8008f08:	200a      	movs	r0, #10
 8008f0a:	f005 fb13 	bl	800e534 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f14:	4619      	mov	r1, r3
 8008f16:	693a      	ldr	r2, [r7, #16]
 8008f18:	2334      	movs	r3, #52	; 0x34
 8008f1a:	fb03 f301 	mul.w	r3, r3, r1
 8008f1e:	4413      	add	r3, r2
 8008f20:	3390      	adds	r3, #144	; 0x90
 8008f22:	2202      	movs	r2, #2
 8008f24:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008f26:	7bfb      	ldrb	r3, [r7, #15]
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d10c      	bne.n	8008f46 <USBH_MSC_Process+0x1ae>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f32:	4619      	mov	r1, r3
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	2334      	movs	r3, #52	; 0x34
 8008f38:	fb03 f301 	mul.w	r3, r3, r1
 8008f3c:	4413      	add	r3, r2
 8008f3e:	3390      	adds	r3, #144	; 0x90
 8008f40:	2205      	movs	r2, #5
 8008f42:	701a      	strb	r2, [r3, #0]
            break;
 8008f44:	e28b      	b.n	800945e <USBH_MSC_Process+0x6c6>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
 8008f48:	2b04      	cmp	r3, #4
 8008f4a:	f040 8288 	bne.w	800945e <USBH_MSC_Process+0x6c6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f54:	4619      	mov	r1, r3
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	2334      	movs	r3, #52	; 0x34
 8008f5a:	fb03 f301 	mul.w	r3, r3, r1
 8008f5e:	4413      	add	r3, r2
 8008f60:	3390      	adds	r3, #144	; 0x90
 8008f62:	2201      	movs	r2, #1
 8008f64:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	2334      	movs	r3, #52	; 0x34
 8008f72:	fb03 f301 	mul.w	r3, r3, r1
 8008f76:	4413      	add	r3, r2
 8008f78:	3391      	adds	r3, #145	; 0x91
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	701a      	strb	r2, [r3, #0]
            break;
 8008f7e:	e26e      	b.n	800945e <USBH_MSC_Process+0x6c6>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	4619      	mov	r1, r3
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 ff56 	bl	8009e3c <USBH_MSC_SCSI_TestUnitReady>
 8008f90:	4603      	mov	r3, r0
 8008f92:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d14f      	bne.n	800903a <USBH_MSC_Process+0x2a2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	693a      	ldr	r2, [r7, #16]
 8008fa4:	2334      	movs	r3, #52	; 0x34
 8008fa6:	fb03 f301 	mul.w	r3, r3, r1
 8008faa:	4413      	add	r3, r2
 8008fac:	3392      	adds	r3, #146	; 0x92
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d012      	beq.n	8008fda <USBH_MSC_Process+0x242>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fba:	4619      	mov	r1, r3
 8008fbc:	693a      	ldr	r2, [r7, #16]
 8008fbe:	2334      	movs	r3, #52	; 0x34
 8008fc0:	fb03 f301 	mul.w	r3, r3, r1
 8008fc4:	4413      	add	r3, r2
 8008fc6:	33c1      	adds	r3, #193	; 0xc1
 8008fc8:	2201      	movs	r2, #1
 8008fca:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device ready");
 8008fcc:	4857      	ldr	r0, [pc, #348]	; (800912c <USBH_MSC_Process+0x394>)
 8008fce:	f005 fa99 	bl	800e504 <iprintf>
 8008fd2:	200a      	movs	r0, #10
 8008fd4:	f005 faae 	bl	800e534 <putchar>
 8008fd8:	e00b      	b.n	8008ff2 <USBH_MSC_Process+0x25a>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	2334      	movs	r3, #52	; 0x34
 8008fe6:	fb03 f301 	mul.w	r3, r3, r1
 8008fea:	4413      	add	r3, r2
 8008fec:	33c1      	adds	r3, #193	; 0xc1
 8008fee:	2200      	movs	r2, #0
 8008ff0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	693a      	ldr	r2, [r7, #16]
 8008ffc:	2334      	movs	r3, #52	; 0x34
 8008ffe:	fb03 f301 	mul.w	r3, r3, r1
 8009002:	4413      	add	r3, r2
 8009004:	3390      	adds	r3, #144	; 0x90
 8009006:	2203      	movs	r2, #3
 8009008:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009010:	4619      	mov	r1, r3
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	2334      	movs	r3, #52	; 0x34
 8009016:	fb03 f301 	mul.w	r3, r3, r1
 800901a:	4413      	add	r3, r2
 800901c:	3391      	adds	r3, #145	; 0x91
 800901e:	2200      	movs	r2, #0
 8009020:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009028:	4619      	mov	r1, r3
 800902a:	693a      	ldr	r2, [r7, #16]
 800902c:	2334      	movs	r3, #52	; 0x34
 800902e:	fb03 f301 	mul.w	r3, r3, r1
 8009032:	4413      	add	r3, r2
 8009034:	3392      	adds	r3, #146	; 0x92
 8009036:	2200      	movs	r2, #0
 8009038:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800903a:	7bbb      	ldrb	r3, [r7, #14]
 800903c:	2b02      	cmp	r3, #2
 800903e:	d150      	bne.n	80090e2 <USBH_MSC_Process+0x34a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009046:	4619      	mov	r1, r3
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	2334      	movs	r3, #52	; 0x34
 800904c:	fb03 f301 	mul.w	r3, r3, r1
 8009050:	4413      	add	r3, r2
 8009052:	3392      	adds	r3, #146	; 0x92
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	2b02      	cmp	r3, #2
 8009058:	d012      	beq.n	8009080 <USBH_MSC_Process+0x2e8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009060:	4619      	mov	r1, r3
 8009062:	693a      	ldr	r2, [r7, #16]
 8009064:	2334      	movs	r3, #52	; 0x34
 8009066:	fb03 f301 	mul.w	r3, r3, r1
 800906a:	4413      	add	r3, r2
 800906c:	33c1      	adds	r3, #193	; 0xc1
 800906e:	2201      	movs	r2, #1
 8009070:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device NOT ready");
 8009072:	482f      	ldr	r0, [pc, #188]	; (8009130 <USBH_MSC_Process+0x398>)
 8009074:	f005 fa46 	bl	800e504 <iprintf>
 8009078:	200a      	movs	r0, #10
 800907a:	f005 fa5b 	bl	800e534 <putchar>
 800907e:	e00b      	b.n	8009098 <USBH_MSC_Process+0x300>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009086:	4619      	mov	r1, r3
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	2334      	movs	r3, #52	; 0x34
 800908c:	fb03 f301 	mul.w	r3, r3, r1
 8009090:	4413      	add	r3, r2
 8009092:	33c1      	adds	r3, #193	; 0xc1
 8009094:	2200      	movs	r2, #0
 8009096:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800909e:	4619      	mov	r1, r3
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	2334      	movs	r3, #52	; 0x34
 80090a4:	fb03 f301 	mul.w	r3, r3, r1
 80090a8:	4413      	add	r3, r2
 80090aa:	3390      	adds	r3, #144	; 0x90
 80090ac:	2205      	movs	r2, #5
 80090ae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090b6:	4619      	mov	r1, r3
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	2334      	movs	r3, #52	; 0x34
 80090bc:	fb03 f301 	mul.w	r3, r3, r1
 80090c0:	4413      	add	r3, r2
 80090c2:	3391      	adds	r3, #145	; 0x91
 80090c4:	2201      	movs	r2, #1
 80090c6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090ce:	4619      	mov	r1, r3
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	2334      	movs	r3, #52	; 0x34
 80090d4:	fb03 f301 	mul.w	r3, r3, r1
 80090d8:	4413      	add	r3, r2
 80090da:	3392      	adds	r3, #146	; 0x92
 80090dc:	2202      	movs	r2, #2
 80090de:	701a      	strb	r2, [r3, #0]
            break;
 80090e0:	e1bf      	b.n	8009462 <USBH_MSC_Process+0x6ca>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80090e2:	7bbb      	ldrb	r3, [r7, #14]
 80090e4:	2b04      	cmp	r3, #4
 80090e6:	f040 81bc 	bne.w	8009462 <USBH_MSC_Process+0x6ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090f0:	4619      	mov	r1, r3
 80090f2:	693a      	ldr	r2, [r7, #16]
 80090f4:	2334      	movs	r3, #52	; 0x34
 80090f6:	fb03 f301 	mul.w	r3, r3, r1
 80090fa:	4413      	add	r3, r2
 80090fc:	3390      	adds	r3, #144	; 0x90
 80090fe:	2201      	movs	r2, #1
 8009100:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009108:	4619      	mov	r1, r3
 800910a:	693a      	ldr	r2, [r7, #16]
 800910c:	2334      	movs	r3, #52	; 0x34
 800910e:	fb03 f301 	mul.w	r3, r3, r1
 8009112:	4413      	add	r3, r2
 8009114:	3391      	adds	r3, #145	; 0x91
 8009116:	2202      	movs	r2, #2
 8009118:	701a      	strb	r2, [r3, #0]
            break;
 800911a:	e1a2      	b.n	8009462 <USBH_MSC_Process+0x6ca>
 800911c:	0800f488 	.word	0x0800f488
 8009120:	0800f494 	.word	0x0800f494
 8009124:	0800f4ac 	.word	0x0800f4ac
 8009128:	0800f4c4 	.word	0x0800f4c4
 800912c:	0800f4dc 	.word	0x0800f4dc
 8009130:	0800f4f0 	.word	0x0800f4f0
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800913a:	b2d9      	uxtb	r1, r3
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009142:	461a      	mov	r2, r3
 8009144:	2334      	movs	r3, #52	; 0x34
 8009146:	fb03 f302 	mul.w	r3, r3, r2
 800914a:	3390      	adds	r3, #144	; 0x90
 800914c:	693a      	ldr	r2, [r7, #16]
 800914e:	4413      	add	r3, r2
 8009150:	3304      	adds	r3, #4
 8009152:	461a      	mov	r2, r3
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 feb4 	bl	8009ec2 <USBH_MSC_SCSI_ReadCapacity>
 800915a:	4603      	mov	r3, r0
 800915c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800915e:	7bfb      	ldrb	r3, [r7, #15]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d170      	bne.n	8009246 <USBH_MSC_Process+0x4ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800916a:	4619      	mov	r1, r3
 800916c:	693a      	ldr	r2, [r7, #16]
 800916e:	2334      	movs	r3, #52	; 0x34
 8009170:	fb03 f301 	mul.w	r3, r3, r1
 8009174:	4413      	add	r3, r2
 8009176:	33c1      	adds	r3, #193	; 0xc1
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	2b01      	cmp	r3, #1
 800917c:	d142      	bne.n	8009204 <USBH_MSC_Process+0x46c>
                USBH_UsrLog("MSC Device capacity : %lu Bytes", \
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009184:	4619      	mov	r1, r3
 8009186:	693a      	ldr	r2, [r7, #16]
 8009188:	2334      	movs	r3, #52	; 0x34
 800918a:	fb03 f301 	mul.w	r3, r3, r1
 800918e:	4413      	add	r3, r2
 8009190:	3394      	adds	r3, #148	; 0x94
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	693a      	ldr	r2, [r7, #16]
 8009196:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 800919a:	4610      	mov	r0, r2
 800919c:	6939      	ldr	r1, [r7, #16]
 800919e:	2234      	movs	r2, #52	; 0x34
 80091a0:	fb02 f200 	mul.w	r2, r2, r0
 80091a4:	440a      	add	r2, r1
 80091a6:	3298      	adds	r2, #152	; 0x98
 80091a8:	8812      	ldrh	r2, [r2, #0]
 80091aa:	fb02 f303 	mul.w	r3, r2, r3
 80091ae:	4619      	mov	r1, r3
 80091b0:	48b3      	ldr	r0, [pc, #716]	; (8009480 <USBH_MSC_Process+0x6e8>)
 80091b2:	f005 f9a7 	bl	800e504 <iprintf>
 80091b6:	200a      	movs	r0, #10
 80091b8:	f005 f9bc 	bl	800e534 <putchar>
                USBH_UsrLog("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091c2:	4619      	mov	r1, r3
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	2334      	movs	r3, #52	; 0x34
 80091c8:	fb03 f301 	mul.w	r3, r3, r1
 80091cc:	4413      	add	r3, r2
 80091ce:	3394      	adds	r3, #148	; 0x94
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4619      	mov	r1, r3
 80091d4:	48ab      	ldr	r0, [pc, #684]	; (8009484 <USBH_MSC_Process+0x6ec>)
 80091d6:	f005 f995 	bl	800e504 <iprintf>
 80091da:	200a      	movs	r0, #10
 80091dc:	f005 f9aa 	bl	800e534 <putchar>
                USBH_UsrLog("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091e6:	4619      	mov	r1, r3
 80091e8:	693a      	ldr	r2, [r7, #16]
 80091ea:	2334      	movs	r3, #52	; 0x34
 80091ec:	fb03 f301 	mul.w	r3, r3, r1
 80091f0:	4413      	add	r3, r2
 80091f2:	3398      	adds	r3, #152	; 0x98
 80091f4:	881b      	ldrh	r3, [r3, #0]
 80091f6:	4619      	mov	r1, r3
 80091f8:	48a3      	ldr	r0, [pc, #652]	; (8009488 <USBH_MSC_Process+0x6f0>)
 80091fa:	f005 f983 	bl	800e504 <iprintf>
 80091fe:	200a      	movs	r0, #10
 8009200:	f005 f998 	bl	800e534 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800920a:	4619      	mov	r1, r3
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	2334      	movs	r3, #52	; 0x34
 8009210:	fb03 f301 	mul.w	r3, r3, r1
 8009214:	4413      	add	r3, r2
 8009216:	3390      	adds	r3, #144	; 0x90
 8009218:	2201      	movs	r2, #1
 800921a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009222:	4619      	mov	r1, r3
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	2334      	movs	r3, #52	; 0x34
 8009228:	fb03 f301 	mul.w	r3, r3, r1
 800922c:	4413      	add	r3, r2
 800922e:	3391      	adds	r3, #145	; 0x91
 8009230:	2200      	movs	r2, #0
 8009232:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800923a:	3301      	adds	r3, #1
 800923c:	b29a      	uxth	r2, r3
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009244:	e10f      	b.n	8009466 <USBH_MSC_Process+0x6ce>
            else if (scsi_status == USBH_FAIL)
 8009246:	7bfb      	ldrb	r3, [r7, #15]
 8009248:	2b02      	cmp	r3, #2
 800924a:	d10c      	bne.n	8009266 <USBH_MSC_Process+0x4ce>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009252:	4619      	mov	r1, r3
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	2334      	movs	r3, #52	; 0x34
 8009258:	fb03 f301 	mul.w	r3, r3, r1
 800925c:	4413      	add	r3, r2
 800925e:	3390      	adds	r3, #144	; 0x90
 8009260:	2205      	movs	r2, #5
 8009262:	701a      	strb	r2, [r3, #0]
            break;
 8009264:	e0ff      	b.n	8009466 <USBH_MSC_Process+0x6ce>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009266:	7bfb      	ldrb	r3, [r7, #15]
 8009268:	2b04      	cmp	r3, #4
 800926a:	f040 80fc 	bne.w	8009466 <USBH_MSC_Process+0x6ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009274:	4619      	mov	r1, r3
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	2334      	movs	r3, #52	; 0x34
 800927a:	fb03 f301 	mul.w	r3, r3, r1
 800927e:	4413      	add	r3, r2
 8009280:	3390      	adds	r3, #144	; 0x90
 8009282:	2201      	movs	r2, #1
 8009284:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800928c:	4619      	mov	r1, r3
 800928e:	693a      	ldr	r2, [r7, #16]
 8009290:	2334      	movs	r3, #52	; 0x34
 8009292:	fb03 f301 	mul.w	r3, r3, r1
 8009296:	4413      	add	r3, r2
 8009298:	3391      	adds	r3, #145	; 0x91
 800929a:	2202      	movs	r2, #2
 800929c:	701a      	strb	r2, [r3, #0]
            break;
 800929e:	e0e2      	b.n	8009466 <USBH_MSC_Process+0x6ce>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092a6:	b2d9      	uxtb	r1, r3
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092ae:	461a      	mov	r2, r3
 80092b0:	2334      	movs	r3, #52	; 0x34
 80092b2:	fb03 f302 	mul.w	r3, r3, r2
 80092b6:	3398      	adds	r3, #152	; 0x98
 80092b8:	693a      	ldr	r2, [r7, #16]
 80092ba:	4413      	add	r3, r2
 80092bc:	3304      	adds	r3, #4
 80092be:	461a      	mov	r2, r3
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 ff1e 	bl	800a102 <USBH_MSC_SCSI_RequestSense>
 80092c6:	4603      	mov	r3, r0
 80092c8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d17b      	bne.n	80093c8 <USBH_MSC_Process+0x630>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092d6:	4619      	mov	r1, r3
 80092d8:	693a      	ldr	r2, [r7, #16]
 80092da:	2334      	movs	r3, #52	; 0x34
 80092dc:	fb03 f301 	mul.w	r3, r3, r1
 80092e0:	4413      	add	r3, r2
 80092e2:	339c      	adds	r3, #156	; 0x9c
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	2b06      	cmp	r3, #6
 80092e8:	d00c      	beq.n	8009304 <USBH_MSC_Process+0x56c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092f0:	4619      	mov	r1, r3
 80092f2:	693a      	ldr	r2, [r7, #16]
 80092f4:	2334      	movs	r3, #52	; 0x34
 80092f6:	fb03 f301 	mul.w	r3, r3, r1
 80092fa:	4413      	add	r3, r2
 80092fc:	339c      	adds	r3, #156	; 0x9c
 80092fe:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009300:	2b02      	cmp	r3, #2
 8009302:	d117      	bne.n	8009334 <USBH_MSC_Process+0x59c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	f242 720f 	movw	r2, #9999	; 0x270f
 8009316:	4293      	cmp	r3, r2
 8009318:	d80c      	bhi.n	8009334 <USBH_MSC_Process+0x59c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009320:	4619      	mov	r1, r3
 8009322:	693a      	ldr	r2, [r7, #16]
 8009324:	2334      	movs	r3, #52	; 0x34
 8009326:	fb03 f301 	mul.w	r3, r3, r1
 800932a:	4413      	add	r3, r2
 800932c:	3390      	adds	r3, #144	; 0x90
 800932e:	2202      	movs	r2, #2
 8009330:	701a      	strb	r2, [r3, #0]
                  break;
 8009332:	e09b      	b.n	800946c <USBH_MSC_Process+0x6d4>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800933a:	4619      	mov	r1, r3
 800933c:	693a      	ldr	r2, [r7, #16]
 800933e:	2334      	movs	r3, #52	; 0x34
 8009340:	fb03 f301 	mul.w	r3, r3, r1
 8009344:	4413      	add	r3, r2
 8009346:	339c      	adds	r3, #156	; 0x9c
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	4619      	mov	r1, r3
 800934c:	484f      	ldr	r0, [pc, #316]	; (800948c <USBH_MSC_Process+0x6f4>)
 800934e:	f005 f8d9 	bl	800e504 <iprintf>
 8009352:	200a      	movs	r0, #10
 8009354:	f005 f8ee 	bl	800e534 <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800935e:	4619      	mov	r1, r3
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	2334      	movs	r3, #52	; 0x34
 8009364:	fb03 f301 	mul.w	r3, r3, r1
 8009368:	4413      	add	r3, r2
 800936a:	339d      	adds	r3, #157	; 0x9d
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	4619      	mov	r1, r3
 8009370:	4847      	ldr	r0, [pc, #284]	; (8009490 <USBH_MSC_Process+0x6f8>)
 8009372:	f005 f8c7 	bl	800e504 <iprintf>
 8009376:	200a      	movs	r0, #10
 8009378:	f005 f8dc 	bl	800e534 <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009382:	4619      	mov	r1, r3
 8009384:	693a      	ldr	r2, [r7, #16]
 8009386:	2334      	movs	r3, #52	; 0x34
 8009388:	fb03 f301 	mul.w	r3, r3, r1
 800938c:	4413      	add	r3, r2
 800938e:	339e      	adds	r3, #158	; 0x9e
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	4619      	mov	r1, r3
 8009394:	483f      	ldr	r0, [pc, #252]	; (8009494 <USBH_MSC_Process+0x6fc>)
 8009396:	f005 f8b5 	bl	800e504 <iprintf>
 800939a:	200a      	movs	r0, #10
 800939c:	f005 f8ca 	bl	800e534 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093a6:	4619      	mov	r1, r3
 80093a8:	693a      	ldr	r2, [r7, #16]
 80093aa:	2334      	movs	r3, #52	; 0x34
 80093ac:	fb03 f301 	mul.w	r3, r3, r1
 80093b0:	4413      	add	r3, r2
 80093b2:	3390      	adds	r3, #144	; 0x90
 80093b4:	2201      	movs	r2, #1
 80093b6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093be:	3301      	adds	r3, #1
 80093c0:	b29a      	uxth	r2, r3
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80093c8:	7bfb      	ldrb	r3, [r7, #15]
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d112      	bne.n	80093f4 <USBH_MSC_Process+0x65c>
              USBH_UsrLog("MSC Device NOT ready");
 80093ce:	4832      	ldr	r0, [pc, #200]	; (8009498 <USBH_MSC_Process+0x700>)
 80093d0:	f005 f898 	bl	800e504 <iprintf>
 80093d4:	200a      	movs	r0, #10
 80093d6:	f005 f8ad 	bl	800e534 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093e0:	4619      	mov	r1, r3
 80093e2:	693a      	ldr	r2, [r7, #16]
 80093e4:	2334      	movs	r3, #52	; 0x34
 80093e6:	fb03 f301 	mul.w	r3, r3, r1
 80093ea:	4413      	add	r3, r2
 80093ec:	3390      	adds	r3, #144	; 0x90
 80093ee:	2208      	movs	r2, #8
 80093f0:	701a      	strb	r2, [r3, #0]
            break;
 80093f2:	e03a      	b.n	800946a <USBH_MSC_Process+0x6d2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80093f4:	7bfb      	ldrb	r3, [r7, #15]
 80093f6:	2b04      	cmp	r3, #4
 80093f8:	d137      	bne.n	800946a <USBH_MSC_Process+0x6d2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009400:	4619      	mov	r1, r3
 8009402:	693a      	ldr	r2, [r7, #16]
 8009404:	2334      	movs	r3, #52	; 0x34
 8009406:	fb03 f301 	mul.w	r3, r3, r1
 800940a:	4413      	add	r3, r2
 800940c:	3390      	adds	r3, #144	; 0x90
 800940e:	2201      	movs	r2, #1
 8009410:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009418:	4619      	mov	r1, r3
 800941a:	693a      	ldr	r2, [r7, #16]
 800941c:	2334      	movs	r3, #52	; 0x34
 800941e:	fb03 f301 	mul.w	r3, r3, r1
 8009422:	4413      	add	r3, r2
 8009424:	3391      	adds	r3, #145	; 0x91
 8009426:	2202      	movs	r2, #2
 8009428:	701a      	strb	r2, [r3, #0]
            break;
 800942a:	e01e      	b.n	800946a <USBH_MSC_Process+0x6d2>
            MSC_Handle->current_lun++;
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009432:	3301      	adds	r3, #1
 8009434:	b29a      	uxth	r2, r3
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800943c:	e016      	b.n	800946c <USBH_MSC_Process+0x6d4>
        MSC_Handle->current_lun = 0U;
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	2200      	movs	r2, #0
 8009442:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	2201      	movs	r2, #1
 800944a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009452:	2102      	movs	r1, #2
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	4798      	blx	r3
      break;
 8009458:	e00c      	b.n	8009474 <USBH_MSC_Process+0x6dc>
            break;
 800945a:	bf00      	nop
 800945c:	e00a      	b.n	8009474 <USBH_MSC_Process+0x6dc>
            break;
 800945e:	bf00      	nop
 8009460:	e008      	b.n	8009474 <USBH_MSC_Process+0x6dc>
            break;
 8009462:	bf00      	nop
 8009464:	e006      	b.n	8009474 <USBH_MSC_Process+0x6dc>
            break;
 8009466:	bf00      	nop
 8009468:	e004      	b.n	8009474 <USBH_MSC_Process+0x6dc>
            break;
 800946a:	bf00      	nop
      break;
 800946c:	e002      	b.n	8009474 <USBH_MSC_Process+0x6dc>
      error = USBH_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	75fb      	strb	r3, [r7, #23]
      break;
 8009472:	bf00      	nop
  }
  return error;
 8009474:	7dfb      	ldrb	r3, [r7, #23]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3718      	adds	r7, #24
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	0800f508 	.word	0x0800f508
 8009484:	0800f528 	.word	0x0800f528
 8009488:	0800f53c 	.word	0x0800f53c
 800948c:	0800f550 	.word	0x0800f550
 8009490:	0800f560 	.word	0x0800f560
 8009494:	0800f57c 	.word	0x0800f57c
 8009498:	0800f4f0 	.word	0x0800f4f0

0800949c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
	...

080094b4 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b088      	sub	sp, #32
 80094b8:	af02      	add	r7, sp, #8
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	460b      	mov	r3, r1
 80094be:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094c6:	69db      	ldr	r3, [r3, #28]
 80094c8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80094ca:	2301      	movs	r3, #1
 80094cc:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80094ce:	2301      	movs	r3, #1
 80094d0:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80094d2:	78fb      	ldrb	r3, [r7, #3]
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	2134      	movs	r1, #52	; 0x34
 80094d8:	fb01 f303 	mul.w	r3, r1, r3
 80094dc:	4413      	add	r3, r2
 80094de:	3390      	adds	r3, #144	; 0x90
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	2b07      	cmp	r3, #7
 80094e4:	d03d      	beq.n	8009562 <USBH_MSC_RdWrProcess+0xae>
 80094e6:	2b07      	cmp	r3, #7
 80094e8:	f300 80dc 	bgt.w	80096a4 <USBH_MSC_RdWrProcess+0x1f0>
 80094ec:	2b05      	cmp	r3, #5
 80094ee:	d06d      	beq.n	80095cc <USBH_MSC_RdWrProcess+0x118>
 80094f0:	2b06      	cmp	r3, #6
 80094f2:	f040 80d7 	bne.w	80096a4 <USBH_MSC_RdWrProcess+0x1f0>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80094f6:	78f9      	ldrb	r1, [r7, #3]
 80094f8:	2300      	movs	r3, #0
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	2300      	movs	r3, #0
 80094fe:	2200      	movs	r2, #0
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 fee2 	bl	800a2ca <USBH_MSC_SCSI_Read>
 8009506:	4603      	mov	r3, r0
 8009508:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800950a:	7bfb      	ldrb	r3, [r7, #15]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10b      	bne.n	8009528 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009510:	78fb      	ldrb	r3, [r7, #3]
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	2134      	movs	r1, #52	; 0x34
 8009516:	fb01 f303 	mul.w	r3, r1, r3
 800951a:	4413      	add	r3, r2
 800951c:	3390      	adds	r3, #144	; 0x90
 800951e:	2201      	movs	r2, #1
 8009520:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009522:	2300      	movs	r3, #0
 8009524:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009526:	e0bf      	b.n	80096a8 <USBH_MSC_RdWrProcess+0x1f4>
      else if (scsi_status == USBH_FAIL)
 8009528:	7bfb      	ldrb	r3, [r7, #15]
 800952a:	2b02      	cmp	r3, #2
 800952c:	d109      	bne.n	8009542 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800952e:	78fb      	ldrb	r3, [r7, #3]
 8009530:	693a      	ldr	r2, [r7, #16]
 8009532:	2134      	movs	r1, #52	; 0x34
 8009534:	fb01 f303 	mul.w	r3, r1, r3
 8009538:	4413      	add	r3, r2
 800953a:	3390      	adds	r3, #144	; 0x90
 800953c:	2205      	movs	r2, #5
 800953e:	701a      	strb	r2, [r3, #0]
      break;
 8009540:	e0b2      	b.n	80096a8 <USBH_MSC_RdWrProcess+0x1f4>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009542:	7bfb      	ldrb	r3, [r7, #15]
 8009544:	2b04      	cmp	r3, #4
 8009546:	f040 80af 	bne.w	80096a8 <USBH_MSC_RdWrProcess+0x1f4>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800954a:	78fb      	ldrb	r3, [r7, #3]
 800954c:	693a      	ldr	r2, [r7, #16]
 800954e:	2134      	movs	r1, #52	; 0x34
 8009550:	fb01 f303 	mul.w	r3, r1, r3
 8009554:	4413      	add	r3, r2
 8009556:	3390      	adds	r3, #144	; 0x90
 8009558:	2208      	movs	r2, #8
 800955a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800955c:	2302      	movs	r3, #2
 800955e:	75fb      	strb	r3, [r7, #23]
      break;
 8009560:	e0a2      	b.n	80096a8 <USBH_MSC_RdWrProcess+0x1f4>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009562:	78f9      	ldrb	r1, [r7, #3]
 8009564:	2300      	movs	r3, #0
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	2300      	movs	r3, #0
 800956a:	2200      	movs	r2, #0
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 fe41 	bl	800a1f4 <USBH_MSC_SCSI_Write>
 8009572:	4603      	mov	r3, r0
 8009574:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009576:	7bfb      	ldrb	r3, [r7, #15]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10b      	bne.n	8009594 <USBH_MSC_RdWrProcess+0xe0>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800957c:	78fb      	ldrb	r3, [r7, #3]
 800957e:	693a      	ldr	r2, [r7, #16]
 8009580:	2134      	movs	r1, #52	; 0x34
 8009582:	fb01 f303 	mul.w	r3, r1, r3
 8009586:	4413      	add	r3, r2
 8009588:	3390      	adds	r3, #144	; 0x90
 800958a:	2201      	movs	r2, #1
 800958c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800958e:	2300      	movs	r3, #0
 8009590:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009592:	e08b      	b.n	80096ac <USBH_MSC_RdWrProcess+0x1f8>
      else if (scsi_status == USBH_FAIL)
 8009594:	7bfb      	ldrb	r3, [r7, #15]
 8009596:	2b02      	cmp	r3, #2
 8009598:	d109      	bne.n	80095ae <USBH_MSC_RdWrProcess+0xfa>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800959a:	78fb      	ldrb	r3, [r7, #3]
 800959c:	693a      	ldr	r2, [r7, #16]
 800959e:	2134      	movs	r1, #52	; 0x34
 80095a0:	fb01 f303 	mul.w	r3, r1, r3
 80095a4:	4413      	add	r3, r2
 80095a6:	3390      	adds	r3, #144	; 0x90
 80095a8:	2205      	movs	r2, #5
 80095aa:	701a      	strb	r2, [r3, #0]
      break;
 80095ac:	e07e      	b.n	80096ac <USBH_MSC_RdWrProcess+0x1f8>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80095ae:	7bfb      	ldrb	r3, [r7, #15]
 80095b0:	2b04      	cmp	r3, #4
 80095b2:	d17b      	bne.n	80096ac <USBH_MSC_RdWrProcess+0x1f8>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80095b4:	78fb      	ldrb	r3, [r7, #3]
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	2134      	movs	r1, #52	; 0x34
 80095ba:	fb01 f303 	mul.w	r3, r1, r3
 80095be:	4413      	add	r3, r2
 80095c0:	3390      	adds	r3, #144	; 0x90
 80095c2:	2208      	movs	r2, #8
 80095c4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80095c6:	2302      	movs	r3, #2
 80095c8:	75fb      	strb	r3, [r7, #23]
      break;
 80095ca:	e06f      	b.n	80096ac <USBH_MSC_RdWrProcess+0x1f8>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80095cc:	78fb      	ldrb	r3, [r7, #3]
 80095ce:	2234      	movs	r2, #52	; 0x34
 80095d0:	fb02 f303 	mul.w	r3, r2, r3
 80095d4:	3398      	adds	r3, #152	; 0x98
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	4413      	add	r3, r2
 80095da:	1d1a      	adds	r2, r3, #4
 80095dc:	78fb      	ldrb	r3, [r7, #3]
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 fd8e 	bl	800a102 <USBH_MSC_SCSI_RequestSense>
 80095e6:	4603      	mov	r3, r0
 80095e8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80095ea:	7bfb      	ldrb	r3, [r7, #15]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d140      	bne.n	8009672 <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 80095f0:	78fb      	ldrb	r3, [r7, #3]
 80095f2:	693a      	ldr	r2, [r7, #16]
 80095f4:	2134      	movs	r1, #52	; 0x34
 80095f6:	fb01 f303 	mul.w	r3, r1, r3
 80095fa:	4413      	add	r3, r2
 80095fc:	339c      	adds	r3, #156	; 0x9c
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	4619      	mov	r1, r3
 8009602:	482e      	ldr	r0, [pc, #184]	; (80096bc <USBH_MSC_RdWrProcess+0x208>)
 8009604:	f004 ff7e 	bl	800e504 <iprintf>
 8009608:	200a      	movs	r0, #10
 800960a:	f004 ff93 	bl	800e534 <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
 800960e:	78fb      	ldrb	r3, [r7, #3]
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	2134      	movs	r1, #52	; 0x34
 8009614:	fb01 f303 	mul.w	r3, r1, r3
 8009618:	4413      	add	r3, r2
 800961a:	339d      	adds	r3, #157	; 0x9d
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	4619      	mov	r1, r3
 8009620:	4827      	ldr	r0, [pc, #156]	; (80096c0 <USBH_MSC_RdWrProcess+0x20c>)
 8009622:	f004 ff6f 	bl	800e504 <iprintf>
 8009626:	200a      	movs	r0, #10
 8009628:	f004 ff84 	bl	800e534 <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
 800962c:	78fb      	ldrb	r3, [r7, #3]
 800962e:	693a      	ldr	r2, [r7, #16]
 8009630:	2134      	movs	r1, #52	; 0x34
 8009632:	fb01 f303 	mul.w	r3, r1, r3
 8009636:	4413      	add	r3, r2
 8009638:	339e      	adds	r3, #158	; 0x9e
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	4619      	mov	r1, r3
 800963e:	4821      	ldr	r0, [pc, #132]	; (80096c4 <USBH_MSC_RdWrProcess+0x210>)
 8009640:	f004 ff60 	bl	800e504 <iprintf>
 8009644:	200a      	movs	r0, #10
 8009646:	f004 ff75 	bl	800e534 <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800964a:	78fb      	ldrb	r3, [r7, #3]
 800964c:	693a      	ldr	r2, [r7, #16]
 800964e:	2134      	movs	r1, #52	; 0x34
 8009650:	fb01 f303 	mul.w	r3, r1, r3
 8009654:	4413      	add	r3, r2
 8009656:	3390      	adds	r3, #144	; 0x90
 8009658:	2201      	movs	r2, #1
 800965a:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800965c:	78fb      	ldrb	r3, [r7, #3]
 800965e:	693a      	ldr	r2, [r7, #16]
 8009660:	2134      	movs	r1, #52	; 0x34
 8009662:	fb01 f303 	mul.w	r3, r1, r3
 8009666:	4413      	add	r3, r2
 8009668:	3391      	adds	r3, #145	; 0x91
 800966a:	2202      	movs	r2, #2
 800966c:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800966e:	2302      	movs	r3, #2
 8009670:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8009672:	7bfb      	ldrb	r3, [r7, #15]
 8009674:	2b02      	cmp	r3, #2
 8009676:	d106      	bne.n	8009686 <USBH_MSC_RdWrProcess+0x1d2>
      {
        USBH_UsrLog("MSC Device NOT ready");
 8009678:	4813      	ldr	r0, [pc, #76]	; (80096c8 <USBH_MSC_RdWrProcess+0x214>)
 800967a:	f004 ff43 	bl	800e504 <iprintf>
 800967e:	200a      	movs	r0, #10
 8009680:	f004 ff58 	bl	800e534 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009684:	e014      	b.n	80096b0 <USBH_MSC_RdWrProcess+0x1fc>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009686:	7bfb      	ldrb	r3, [r7, #15]
 8009688:	2b04      	cmp	r3, #4
 800968a:	d111      	bne.n	80096b0 <USBH_MSC_RdWrProcess+0x1fc>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800968c:	78fb      	ldrb	r3, [r7, #3]
 800968e:	693a      	ldr	r2, [r7, #16]
 8009690:	2134      	movs	r1, #52	; 0x34
 8009692:	fb01 f303 	mul.w	r3, r1, r3
 8009696:	4413      	add	r3, r2
 8009698:	3390      	adds	r3, #144	; 0x90
 800969a:	2208      	movs	r2, #8
 800969c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800969e:	2302      	movs	r3, #2
 80096a0:	75fb      	strb	r3, [r7, #23]
      break;
 80096a2:	e005      	b.n	80096b0 <USBH_MSC_RdWrProcess+0x1fc>

    default:
      break;
 80096a4:	bf00      	nop
 80096a6:	e004      	b.n	80096b2 <USBH_MSC_RdWrProcess+0x1fe>
      break;
 80096a8:	bf00      	nop
 80096aa:	e002      	b.n	80096b2 <USBH_MSC_RdWrProcess+0x1fe>
      break;
 80096ac:	bf00      	nop
 80096ae:	e000      	b.n	80096b2 <USBH_MSC_RdWrProcess+0x1fe>
      break;
 80096b0:	bf00      	nop

  }
  return error;
 80096b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3718      	adds	r7, #24
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	0800f550 	.word	0x0800f550
 80096c0:	0800f560 	.word	0x0800f560
 80096c4:	0800f57c 	.word	0x0800f57c
 80096c8:	0800f4f0 	.word	0x0800f4f0

080096cc <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	460b      	mov	r3, r1
 80096d6:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096de:	69db      	ldr	r3, [r3, #28]
 80096e0:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	2b0b      	cmp	r3, #11
 80096ea:	d10c      	bne.n	8009706 <USBH_MSC_UnitIsReady+0x3a>
 80096ec:	78fb      	ldrb	r3, [r7, #3]
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	2134      	movs	r1, #52	; 0x34
 80096f2:	fb01 f303 	mul.w	r3, r1, r3
 80096f6:	4413      	add	r3, r2
 80096f8:	3391      	adds	r3, #145	; 0x91
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d102      	bne.n	8009706 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8009700:	2301      	movs	r3, #1
 8009702:	73fb      	strb	r3, [r7, #15]
 8009704:	e001      	b.n	800970a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8009706:	2300      	movs	r3, #0
 8009708:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800970a:	7bfb      	ldrb	r3, [r7, #15]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3714      	adds	r7, #20
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	460b      	mov	r3, r1
 8009722:	607a      	str	r2, [r7, #4]
 8009724:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800972c:	69db      	ldr	r3, [r3, #28]
 800972e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	b2db      	uxtb	r3, r3
 8009736:	2b0b      	cmp	r3, #11
 8009738:	d10d      	bne.n	8009756 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800973a:	7afb      	ldrb	r3, [r7, #11]
 800973c:	2234      	movs	r2, #52	; 0x34
 800973e:	fb02 f303 	mul.w	r3, r2, r3
 8009742:	3390      	adds	r3, #144	; 0x90
 8009744:	697a      	ldr	r2, [r7, #20]
 8009746:	4413      	add	r3, r2
 8009748:	2234      	movs	r2, #52	; 0x34
 800974a:	4619      	mov	r1, r3
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f004 fe19 	bl	800e384 <memcpy>
    return USBH_OK;
 8009752:	2300      	movs	r3, #0
 8009754:	e000      	b.n	8009758 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8009756:	2302      	movs	r3, #2
  }
}
 8009758:	4618      	mov	r0, r3
 800975a:	3718      	adds	r7, #24
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b088      	sub	sp, #32
 8009764:	af02      	add	r7, sp, #8
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	607a      	str	r2, [r7, #4]
 800976a:	603b      	str	r3, [r7, #0]
 800976c:	460b      	mov	r3, r1
 800976e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009776:	69db      	ldr	r3, [r3, #28]
 8009778:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009780:	b2db      	uxtb	r3, r3
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00e      	beq.n	80097a4 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800978c:	2b0b      	cmp	r3, #11
 800978e:	d109      	bne.n	80097a4 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009790:	7afb      	ldrb	r3, [r7, #11]
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	2134      	movs	r1, #52	; 0x34
 8009796:	fb01 f303 	mul.w	r3, r1, r3
 800979a:	4413      	add	r3, r2
 800979c:	3390      	adds	r3, #144	; 0x90
 800979e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d001      	beq.n	80097a8 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80097a4:	2302      	movs	r3, #2
 80097a6:	e040      	b.n	800982a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	2206      	movs	r2, #6
 80097ac:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80097ae:	7afb      	ldrb	r3, [r7, #11]
 80097b0:	697a      	ldr	r2, [r7, #20]
 80097b2:	2134      	movs	r1, #52	; 0x34
 80097b4:	fb01 f303 	mul.w	r3, r1, r3
 80097b8:	4413      	add	r3, r2
 80097ba:	3390      	adds	r3, #144	; 0x90
 80097bc:	2206      	movs	r2, #6
 80097be:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80097c0:	7afb      	ldrb	r3, [r7, #11]
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80097ca:	7af9      	ldrb	r1, [r7, #11]
 80097cc:	6a3b      	ldr	r3, [r7, #32]
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f000 fd78 	bl	800a2ca <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80097e0:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80097e2:	e016      	b.n	8009812 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	1ad2      	subs	r2, r2, r3
 80097ee:	6a3b      	ldr	r3, [r7, #32]
 80097f0:	f242 7110 	movw	r1, #10000	; 0x2710
 80097f4:	fb01 f303 	mul.w	r3, r1, r3
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d805      	bhi.n	8009808 <USBH_MSC_Read+0xa8>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009802:	b2db      	uxtb	r3, r3
 8009804:	2b00      	cmp	r3, #0
 8009806:	d104      	bne.n	8009812 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	2201      	movs	r2, #1
 800980c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800980e:	2302      	movs	r3, #2
 8009810:	e00b      	b.n	800982a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009812:	7afb      	ldrb	r3, [r7, #11]
 8009814:	4619      	mov	r1, r3
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f7ff fe4c 	bl	80094b4 <USBH_MSC_RdWrProcess>
 800981c:	4603      	mov	r3, r0
 800981e:	2b01      	cmp	r3, #1
 8009820:	d0e0      	beq.n	80097e4 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	2201      	movs	r2, #1
 8009826:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3718      	adds	r7, #24
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b088      	sub	sp, #32
 8009836:	af02      	add	r7, sp, #8
 8009838:	60f8      	str	r0, [r7, #12]
 800983a:	607a      	str	r2, [r7, #4]
 800983c:	603b      	str	r3, [r7, #0]
 800983e:	460b      	mov	r3, r1
 8009840:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009848:	69db      	ldr	r3, [r3, #28]
 800984a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009852:	b2db      	uxtb	r3, r3
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00e      	beq.n	8009876 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800985e:	2b0b      	cmp	r3, #11
 8009860:	d109      	bne.n	8009876 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009862:	7afb      	ldrb	r3, [r7, #11]
 8009864:	697a      	ldr	r2, [r7, #20]
 8009866:	2134      	movs	r1, #52	; 0x34
 8009868:	fb01 f303 	mul.w	r3, r1, r3
 800986c:	4413      	add	r3, r2
 800986e:	3390      	adds	r3, #144	; 0x90
 8009870:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009872:	2b01      	cmp	r3, #1
 8009874:	d001      	beq.n	800987a <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009876:	2302      	movs	r3, #2
 8009878:	e040      	b.n	80098fc <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	2207      	movs	r2, #7
 800987e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009880:	7afb      	ldrb	r3, [r7, #11]
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	2134      	movs	r1, #52	; 0x34
 8009886:	fb01 f303 	mul.w	r3, r1, r3
 800988a:	4413      	add	r3, r2
 800988c:	3390      	adds	r3, #144	; 0x90
 800988e:	2207      	movs	r2, #7
 8009890:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009892:	7afb      	ldrb	r3, [r7, #11]
 8009894:	b29a      	uxth	r2, r3
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800989c:	7af9      	ldrb	r1, [r7, #11]
 800989e:	6a3b      	ldr	r3, [r7, #32]
 80098a0:	9300      	str	r3, [sp, #0]
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f000 fca4 	bl	800a1f4 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80098b2:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80098b4:	e016      	b.n	80098e4 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	1ad2      	subs	r2, r2, r3
 80098c0:	6a3b      	ldr	r3, [r7, #32]
 80098c2:	f242 7110 	movw	r1, #10000	; 0x2710
 80098c6:	fb01 f303 	mul.w	r3, r1, r3
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d805      	bhi.n	80098da <USBH_MSC_Write+0xa8>
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d104      	bne.n	80098e4 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	2201      	movs	r2, #1
 80098de:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80098e0:	2302      	movs	r3, #2
 80098e2:	e00b      	b.n	80098fc <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80098e4:	7afb      	ldrb	r3, [r7, #11]
 80098e6:	4619      	mov	r1, r3
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f7ff fde3 	bl	80094b4 <USBH_MSC_RdWrProcess>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d0e0      	beq.n	80098b6 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	2201      	movs	r2, #1
 80098f8:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80098fa:	2300      	movs	r3, #0
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3718      	adds	r7, #24
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2221      	movs	r2, #33	; 0x21
 8009910:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	22ff      	movs	r2, #255	; 0xff
 8009916:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800992a:	2200      	movs	r2, #0
 800992c:	2100      	movs	r1, #0
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f001 ff67 	bl	800b802 <USBH_CtlReq>
 8009934:	4603      	mov	r3, r0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b082      	sub	sp, #8
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	22a1      	movs	r2, #161	; 0xa1
 800994c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	22fe      	movs	r2, #254	; 0xfe
 8009952:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009966:	2201      	movs	r2, #1
 8009968:	6839      	ldr	r1, [r7, #0]
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f001 ff49 	bl	800b802 <USBH_CtlReq>
 8009970:	4603      	mov	r3, r0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
	...

0800997c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800998a:	69db      	ldr	r3, [r3, #28]
 800998c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	4a09      	ldr	r2, [pc, #36]	; (80099b8 <USBH_MSC_BOT_Init+0x3c>)
 8009992:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	4a09      	ldr	r2, [pc, #36]	; (80099bc <USBH_MSC_BOT_Init+0x40>)
 8009998:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2201      	movs	r2, #1
 800999e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3714      	adds	r7, #20
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	43425355 	.word	0x43425355
 80099bc:	20304050 	.word	0x20304050

080099c0 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b088      	sub	sp, #32
 80099c4:	af02      	add	r7, sp, #8
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	460b      	mov	r3, r1
 80099ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80099cc:	2301      	movs	r3, #1
 80099ce:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80099d0:	2301      	movs	r3, #1
 80099d2:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80099d4:	2301      	movs	r3, #1
 80099d6:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80099d8:	2300      	movs	r3, #0
 80099da:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099e2:	69db      	ldr	r3, [r3, #28]
 80099e4:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80099e6:	2300      	movs	r3, #0
 80099e8:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80099f0:	3b01      	subs	r3, #1
 80099f2:	2b0a      	cmp	r3, #10
 80099f4:	f200 819e 	bhi.w	8009d34 <USBH_MSC_BOT_Process+0x374>
 80099f8:	a201      	add	r2, pc, #4	; (adr r2, 8009a00 <USBH_MSC_BOT_Process+0x40>)
 80099fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fe:	bf00      	nop
 8009a00:	08009a2d 	.word	0x08009a2d
 8009a04:	08009a55 	.word	0x08009a55
 8009a08:	08009abf 	.word	0x08009abf
 8009a0c:	08009add 	.word	0x08009add
 8009a10:	08009b61 	.word	0x08009b61
 8009a14:	08009b83 	.word	0x08009b83
 8009a18:	08009c1b 	.word	0x08009c1b
 8009a1c:	08009c37 	.word	0x08009c37
 8009a20:	08009c89 	.word	0x08009c89
 8009a24:	08009cb9 	.word	0x08009cb9
 8009a28:	08009d1b 	.word	0x08009d1b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	78fa      	ldrb	r2, [r7, #3]
 8009a30:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	2202      	movs	r2, #2
 8009a38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	795b      	ldrb	r3, [r3, #5]
 8009a46:	2201      	movs	r2, #1
 8009a48:	9200      	str	r2, [sp, #0]
 8009a4a:	221f      	movs	r2, #31
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f002 f8f4 	bl	800bc3a <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009a52:	e17e      	b.n	8009d52 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	795b      	ldrb	r3, [r3, #5]
 8009a58:	4619      	mov	r1, r3
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f004 fba0 	bl	800e1a0 <USBH_LL_GetURBState>
 8009a60:	4603      	mov	r3, r0
 8009a62:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009a64:	7d3b      	ldrb	r3, [r7, #20]
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d118      	bne.n	8009a9c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00f      	beq.n	8009a92 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009a78:	b25b      	sxtb	r3, r3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	da04      	bge.n	8009a88 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	2203      	movs	r2, #3
 8009a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009a86:	e157      	b.n	8009d38 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	2205      	movs	r2, #5
 8009a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a90:	e152      	b.n	8009d38 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	2207      	movs	r2, #7
 8009a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a9a:	e14d      	b.n	8009d38 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009a9c:	7d3b      	ldrb	r3, [r7, #20]
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d104      	bne.n	8009aac <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009aaa:	e145      	b.n	8009d38 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009aac:	7d3b      	ldrb	r3, [r7, #20]
 8009aae:	2b05      	cmp	r3, #5
 8009ab0:	f040 8142 	bne.w	8009d38 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	220a      	movs	r2, #10
 8009ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009abc:	e13c      	b.n	8009d38 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	895a      	ldrh	r2, [r3, #10]
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	791b      	ldrb	r3, [r3, #4]
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f002 f8d9 	bl	800bc84 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	2204      	movs	r2, #4
 8009ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009ada:	e13a      	b.n	8009d52 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	791b      	ldrb	r3, [r3, #4]
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f004 fb5c 	bl	800e1a0 <USBH_LL_GetURBState>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009aec:	7d3b      	ldrb	r3, [r7, #20]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d12d      	bne.n	8009b4e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009af6:	693a      	ldr	r2, [r7, #16]
 8009af8:	8952      	ldrh	r2, [r2, #10]
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d910      	bls.n	8009b20 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	8952      	ldrh	r2, [r2, #10]
 8009b08:	441a      	add	r2, r3
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b14:	693a      	ldr	r2, [r7, #16]
 8009b16:	8952      	ldrh	r2, [r2, #10]
 8009b18:	1a9a      	subs	r2, r3, r2
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8009b1e:	e002      	b.n	8009b26 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	2200      	movs	r2, #0
 8009b24:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00a      	beq.n	8009b44 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	895a      	ldrh	r2, [r3, #10]
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	791b      	ldrb	r3, [r3, #4]
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f002 f8a1 	bl	800bc84 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009b42:	e0fb      	b.n	8009d3c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	2207      	movs	r2, #7
 8009b48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b4c:	e0f6      	b.n	8009d3c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8009b4e:	7d3b      	ldrb	r3, [r7, #20]
 8009b50:	2b05      	cmp	r3, #5
 8009b52:	f040 80f3 	bne.w	8009d3c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	2209      	movs	r2, #9
 8009b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b5e:	e0ed      	b.n	8009d3c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	891a      	ldrh	r2, [r3, #8]
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	795b      	ldrb	r3, [r3, #5]
 8009b6e:	2001      	movs	r0, #1
 8009b70:	9000      	str	r0, [sp, #0]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f002 f861 	bl	800bc3a <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	2206      	movs	r2, #6
 8009b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b80:	e0e7      	b.n	8009d52 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	795b      	ldrb	r3, [r3, #5]
 8009b86:	4619      	mov	r1, r3
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f004 fb09 	bl	800e1a0 <USBH_LL_GetURBState>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009b92:	7d3b      	ldrb	r3, [r7, #20]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d12f      	bne.n	8009bf8 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b9c:	693a      	ldr	r2, [r7, #16]
 8009b9e:	8912      	ldrh	r2, [r2, #8]
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d910      	bls.n	8009bc6 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	8912      	ldrh	r2, [r2, #8]
 8009bae:	441a      	add	r2, r3
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bba:	693a      	ldr	r2, [r7, #16]
 8009bbc:	8912      	ldrh	r2, [r2, #8]
 8009bbe:	1a9a      	subs	r2, r3, r2
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8009bc4:	e002      	b.n	8009bcc <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00c      	beq.n	8009bee <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	891a      	ldrh	r2, [r3, #8]
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	795b      	ldrb	r3, [r3, #5]
 8009be2:	2001      	movs	r0, #1
 8009be4:	9000      	str	r0, [sp, #0]
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f002 f827 	bl	800bc3a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009bec:	e0a8      	b.n	8009d40 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	2207      	movs	r2, #7
 8009bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009bf6:	e0a3      	b.n	8009d40 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009bf8:	7d3b      	ldrb	r3, [r7, #20]
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d104      	bne.n	8009c08 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	2205      	movs	r2, #5
 8009c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c06:	e09b      	b.n	8009d40 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009c08:	7d3b      	ldrb	r3, [r7, #20]
 8009c0a:	2b05      	cmp	r3, #5
 8009c0c:	f040 8098 	bne.w	8009d40 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	220a      	movs	r2, #10
 8009c14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c18:	e092      	b.n	8009d40 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	791b      	ldrb	r3, [r3, #4]
 8009c24:	220d      	movs	r2, #13
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f002 f82c 	bl	800bc84 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	2208      	movs	r2, #8
 8009c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c34:	e08d      	b.n	8009d52 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	791b      	ldrb	r3, [r3, #4]
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f004 faaf 	bl	800e1a0 <USBH_LL_GetURBState>
 8009c42:	4603      	mov	r3, r0
 8009c44:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009c46:	7d3b      	ldrb	r3, [r7, #20]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d115      	bne.n	8009c78 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	2201      	movs	r2, #1
 8009c58:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f8a9 	bl	8009db4 <USBH_MSC_DecodeCSW>
 8009c62:	4603      	mov	r3, r0
 8009c64:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009c66:	7d7b      	ldrb	r3, [r7, #21]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d102      	bne.n	8009c72 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009c70:	e068      	b.n	8009d44 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8009c72:	2302      	movs	r3, #2
 8009c74:	75fb      	strb	r3, [r7, #23]
      break;
 8009c76:	e065      	b.n	8009d44 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009c78:	7d3b      	ldrb	r3, [r7, #20]
 8009c7a:	2b05      	cmp	r3, #5
 8009c7c:	d162      	bne.n	8009d44 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	2209      	movs	r2, #9
 8009c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c86:	e05d      	b.n	8009d44 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009c88:	78fb      	ldrb	r3, [r7, #3]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 f864 	bl	8009d5c <USBH_MSC_BOT_Abort>
 8009c94:	4603      	mov	r3, r0
 8009c96:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009c98:	7dbb      	ldrb	r3, [r7, #22]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d104      	bne.n	8009ca8 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	2207      	movs	r2, #7
 8009ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009ca6:	e04f      	b.n	8009d48 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009ca8:	7dbb      	ldrb	r3, [r7, #22]
 8009caa:	2b04      	cmp	r3, #4
 8009cac:	d14c      	bne.n	8009d48 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	220b      	movs	r2, #11
 8009cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009cb6:	e047      	b.n	8009d48 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009cb8:	78fb      	ldrb	r3, [r7, #3]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 f84c 	bl	8009d5c <USBH_MSC_BOT_Abort>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009cc8:	7dbb      	ldrb	r3, [r7, #22]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d11d      	bne.n	8009d0a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	795b      	ldrb	r3, [r3, #5]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f004 fab4 	bl	800e242 <USBH_LL_GetToggle>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	7959      	ldrb	r1, [r3, #5]
 8009ce2:	7bfb      	ldrb	r3, [r7, #15]
 8009ce4:	f1c3 0301 	rsb	r3, r3, #1
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	461a      	mov	r2, r3
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f004 fa78 	bl	800e1e2 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	791b      	ldrb	r3, [r3, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f004 fa71 	bl	800e1e2 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	2209      	movs	r2, #9
 8009d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009d08:	e020      	b.n	8009d4c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8009d0a:	7dbb      	ldrb	r3, [r7, #22]
 8009d0c:	2b04      	cmp	r3, #4
 8009d0e:	d11d      	bne.n	8009d4c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	220b      	movs	r2, #11
 8009d14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009d18:	e018      	b.n	8009d4c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f7ff fdf2 	bl	8009904 <USBH_MSC_BOT_REQ_Reset>
 8009d20:	4603      	mov	r3, r0
 8009d22:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009d24:	7dfb      	ldrb	r3, [r7, #23]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d112      	bne.n	8009d50 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009d32:	e00d      	b.n	8009d50 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009d34:	bf00      	nop
 8009d36:	e00c      	b.n	8009d52 <USBH_MSC_BOT_Process+0x392>
      break;
 8009d38:	bf00      	nop
 8009d3a:	e00a      	b.n	8009d52 <USBH_MSC_BOT_Process+0x392>
      break;
 8009d3c:	bf00      	nop
 8009d3e:	e008      	b.n	8009d52 <USBH_MSC_BOT_Process+0x392>
      break;
 8009d40:	bf00      	nop
 8009d42:	e006      	b.n	8009d52 <USBH_MSC_BOT_Process+0x392>
      break;
 8009d44:	bf00      	nop
 8009d46:	e004      	b.n	8009d52 <USBH_MSC_BOT_Process+0x392>
      break;
 8009d48:	bf00      	nop
 8009d4a:	e002      	b.n	8009d52 <USBH_MSC_BOT_Process+0x392>
      break;
 8009d4c:	bf00      	nop
 8009d4e:	e000      	b.n	8009d52 <USBH_MSC_BOT_Process+0x392>
      break;
 8009d50:	bf00      	nop
  }
  return status;
 8009d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3718      	adds	r7, #24
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	460b      	mov	r3, r1
 8009d66:	70fb      	strb	r3, [r7, #3]
 8009d68:	4613      	mov	r3, r2
 8009d6a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d76:	69db      	ldr	r3, [r3, #28]
 8009d78:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009d7a:	78bb      	ldrb	r3, [r7, #2]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d002      	beq.n	8009d86 <USBH_MSC_BOT_Abort+0x2a>
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d009      	beq.n	8009d98 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009d84:	e011      	b.n	8009daa <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	79db      	ldrb	r3, [r3, #7]
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f001 fb58 	bl	800b442 <USBH_ClrFeature>
 8009d92:	4603      	mov	r3, r0
 8009d94:	73fb      	strb	r3, [r7, #15]
      break;
 8009d96:	e008      	b.n	8009daa <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	799b      	ldrb	r3, [r3, #6]
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f001 fb4f 	bl	800b442 <USBH_ClrFeature>
 8009da4:	4603      	mov	r3, r0
 8009da6:	73fb      	strb	r3, [r7, #15]
      break;
 8009da8:	bf00      	nop
  }
  return status;
 8009daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dc2:	69db      	ldr	r3, [r3, #28]
 8009dc4:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	791b      	ldrb	r3, [r3, #4]
 8009dce:	4619      	mov	r1, r3
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f004 f953 	bl	800e07c <USBH_LL_GetLastXferSize>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b0d      	cmp	r3, #13
 8009dda:	d002      	beq.n	8009de2 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009ddc:	2302      	movs	r3, #2
 8009dde:	73fb      	strb	r3, [r7, #15]
 8009de0:	e024      	b.n	8009e2c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009de6:	4a14      	ldr	r2, [pc, #80]	; (8009e38 <USBH_MSC_DecodeCSW+0x84>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d11d      	bne.n	8009e28 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d119      	bne.n	8009e2c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d102      	bne.n	8009e08 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009e02:	2300      	movs	r3, #0
 8009e04:	73fb      	strb	r3, [r7, #15]
 8009e06:	e011      	b.n	8009e2c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d102      	bne.n	8009e18 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009e12:	2301      	movs	r3, #1
 8009e14:	73fb      	strb	r3, [r7, #15]
 8009e16:	e009      	b.n	8009e2c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d104      	bne.n	8009e2c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009e22:	2302      	movs	r3, #2
 8009e24:	73fb      	strb	r3, [r7, #15]
 8009e26:	e001      	b.n	8009e2c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009e28:	2302      	movs	r3, #2
 8009e2a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	53425355 	.word	0x53425355

08009e3c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	460b      	mov	r3, r1
 8009e46:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009e48:	2302      	movs	r3, #2
 8009e4a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e52:	69db      	ldr	r3, [r3, #28]
 8009e54:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d002      	beq.n	8009e66 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009e60:	2b02      	cmp	r3, #2
 8009e62:	d021      	beq.n	8009ea8 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009e64:	e028      	b.n	8009eb8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	220a      	movs	r2, #10
 8009e78:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	3363      	adds	r3, #99	; 0x63
 8009e80:	2210      	movs	r2, #16
 8009e82:	2100      	movs	r1, #0
 8009e84:	4618      	mov	r0, r3
 8009e86:	f004 fa8b 	bl	800e3a0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	2201      	movs	r2, #1
 8009e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2202      	movs	r2, #2
 8009e9e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ea6:	e007      	b.n	8009eb8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009ea8:	78fb      	ldrb	r3, [r7, #3]
 8009eaa:	4619      	mov	r1, r3
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f7ff fd87 	bl	80099c0 <USBH_MSC_BOT_Process>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	73fb      	strb	r3, [r7, #15]
      break;
 8009eb6:	bf00      	nop
  }

  return error;
 8009eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b086      	sub	sp, #24
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	60f8      	str	r0, [r7, #12]
 8009eca:	460b      	mov	r3, r1
 8009ecc:	607a      	str	r2, [r7, #4]
 8009ece:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009eda:	69db      	ldr	r3, [r3, #28]
 8009edc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d002      	beq.n	8009eee <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009ee8:	2b02      	cmp	r3, #2
 8009eea:	d027      	beq.n	8009f3c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009eec:	e05f      	b.n	8009fae <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	2208      	movs	r2, #8
 8009ef2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	2280      	movs	r2, #128	; 0x80
 8009ef8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	220a      	movs	r2, #10
 8009f00:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	3363      	adds	r3, #99	; 0x63
 8009f08:	2210      	movs	r2, #16
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f004 fa47 	bl	800e3a0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	2225      	movs	r2, #37	; 0x25
 8009f16:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	2202      	movs	r2, #2
 8009f26:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	f103 0210 	add.w	r2, r3, #16
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009f36:	2301      	movs	r3, #1
 8009f38:	75fb      	strb	r3, [r7, #23]
      break;
 8009f3a:	e038      	b.n	8009fae <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009f3c:	7afb      	ldrb	r3, [r7, #11]
 8009f3e:	4619      	mov	r1, r3
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f7ff fd3d 	bl	80099c0 <USBH_MSC_BOT_Process>
 8009f46:	4603      	mov	r3, r0
 8009f48:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009f4a:	7dfb      	ldrb	r3, [r7, #23]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d12d      	bne.n	8009fac <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f56:	3303      	adds	r3, #3
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f62:	3302      	adds	r3, #2
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	021b      	lsls	r3, r3, #8
 8009f68:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f70:	3301      	adds	r3, #1
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009f76:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	061b      	lsls	r3, r3, #24
 8009f82:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f8e:	3307      	adds	r3, #7
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f9a:	3306      	adds	r3, #6
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	021b      	lsls	r3, r3, #8
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	b29a      	uxth	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	809a      	strh	r2, [r3, #4]
      break;
 8009fac:	bf00      	nop
  }

  return error;
 8009fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3718      	adds	r7, #24
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	607a      	str	r2, [r7, #4]
 8009fc4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009fc6:	2302      	movs	r3, #2
 8009fc8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fd0:	69db      	ldr	r3, [r3, #28]
 8009fd2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d002      	beq.n	8009fe4 <USBH_MSC_SCSI_Inquiry+0x2c>
 8009fde:	2b02      	cmp	r3, #2
 8009fe0:	d03d      	beq.n	800a05e <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009fe2:	e089      	b.n	800a0f8 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	2224      	movs	r2, #36	; 0x24
 8009fe8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	2280      	movs	r2, #128	; 0x80
 8009fee:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	220a      	movs	r2, #10
 8009ff6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	3363      	adds	r3, #99	; 0x63
 8009ffe:	220a      	movs	r2, #10
 800a000:	2100      	movs	r1, #0
 800a002:	4618      	mov	r0, r3
 800a004:	f004 f9cc 	bl	800e3a0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	2212      	movs	r2, #18
 800a00c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a010:	7afb      	ldrb	r3, [r7, #11]
 800a012:	015b      	lsls	r3, r3, #5
 800a014:	b2da      	uxtb	r2, r3
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	2200      	movs	r2, #0
 800a020:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	2200      	movs	r2, #0
 800a028:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	2224      	movs	r2, #36	; 0x24
 800a030:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	2200      	movs	r2, #0
 800a038:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	2201      	movs	r2, #1
 800a040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	2202      	movs	r2, #2
 800a048:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	f103 0210 	add.w	r2, r3, #16
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a058:	2301      	movs	r3, #1
 800a05a:	75fb      	strb	r3, [r7, #23]
      break;
 800a05c:	e04c      	b.n	800a0f8 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a05e:	7afb      	ldrb	r3, [r7, #11]
 800a060:	4619      	mov	r1, r3
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f7ff fcac 	bl	80099c0 <USBH_MSC_BOT_Process>
 800a068:	4603      	mov	r3, r0
 800a06a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a06c:	7dfb      	ldrb	r3, [r7, #23]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d141      	bne.n	800a0f6 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a072:	2222      	movs	r2, #34	; 0x22
 800a074:	2100      	movs	r1, #0
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f004 f992 	bl	800e3a0 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	f003 031f 	and.w	r3, r3, #31
 800a088:	b2da      	uxtb	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	095b      	lsrs	r3, r3, #5
 800a098:	b2da      	uxtb	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	b25b      	sxtb	r3, r3
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	da03      	bge.n	800a0b6 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	709a      	strb	r2, [r3, #2]
 800a0b4:	e002      	b.n	800a0bc <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	1cd8      	adds	r0, r3, #3
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0c6:	3308      	adds	r3, #8
 800a0c8:	2208      	movs	r2, #8
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	f004 f95a 	bl	800e384 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f103 000c 	add.w	r0, r3, #12
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0dc:	3310      	adds	r3, #16
 800a0de:	2210      	movs	r2, #16
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	f004 f94f 	bl	800e384 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	331d      	adds	r3, #29
 800a0ea:	693a      	ldr	r2, [r7, #16]
 800a0ec:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a0f0:	3220      	adds	r2, #32
 800a0f2:	6812      	ldr	r2, [r2, #0]
 800a0f4:	601a      	str	r2, [r3, #0]
      break;
 800a0f6:	bf00      	nop
  }

  return error;
 800a0f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3718      	adds	r7, #24
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b086      	sub	sp, #24
 800a106:	af00      	add	r7, sp, #0
 800a108:	60f8      	str	r0, [r7, #12]
 800a10a:	460b      	mov	r3, r1
 800a10c:	607a      	str	r2, [r7, #4]
 800a10e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a110:	2302      	movs	r3, #2
 800a112:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a11a:	69db      	ldr	r3, [r3, #28]
 800a11c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a124:	2b01      	cmp	r3, #1
 800a126:	d002      	beq.n	800a12e <USBH_MSC_SCSI_RequestSense+0x2c>
 800a128:	2b02      	cmp	r3, #2
 800a12a:	d03d      	beq.n	800a1a8 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a12c:	e05d      	b.n	800a1ea <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	220e      	movs	r2, #14
 800a132:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	2280      	movs	r2, #128	; 0x80
 800a138:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	220a      	movs	r2, #10
 800a140:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	3363      	adds	r3, #99	; 0x63
 800a148:	2210      	movs	r2, #16
 800a14a:	2100      	movs	r1, #0
 800a14c:	4618      	mov	r0, r3
 800a14e:	f004 f927 	bl	800e3a0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	2203      	movs	r2, #3
 800a156:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a15a:	7afb      	ldrb	r3, [r7, #11]
 800a15c:	015b      	lsls	r3, r3, #5
 800a15e:	b2da      	uxtb	r2, r3
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	2200      	movs	r2, #0
 800a172:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	220e      	movs	r2, #14
 800a17a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	2200      	movs	r2, #0
 800a182:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	2201      	movs	r2, #1
 800a18a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	2202      	movs	r2, #2
 800a192:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	f103 0210 	add.w	r2, r3, #16
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	75fb      	strb	r3, [r7, #23]
      break;
 800a1a6:	e020      	b.n	800a1ea <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a1a8:	7afb      	ldrb	r3, [r7, #11]
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f7ff fc07 	bl	80099c0 <USBH_MSC_BOT_Process>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a1b6:	7dfb      	ldrb	r3, [r7, #23]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d115      	bne.n	800a1e8 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1c2:	3302      	adds	r3, #2
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	f003 030f 	and.w	r3, r3, #15
 800a1ca:	b2da      	uxtb	r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1d6:	7b1a      	ldrb	r2, [r3, #12]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1e2:	7b5a      	ldrb	r2, [r3, #13]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	709a      	strb	r2, [r3, #2]
      break;
 800a1e8:	bf00      	nop
  }

  return error;
 800a1ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3718      	adds	r7, #24
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	607a      	str	r2, [r7, #4]
 800a1fe:	603b      	str	r3, [r7, #0]
 800a200:	460b      	mov	r3, r1
 800a202:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a204:	2302      	movs	r3, #2
 800a206:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a20e:	69db      	ldr	r3, [r3, #28]
 800a210:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d002      	beq.n	800a222 <USBH_MSC_SCSI_Write+0x2e>
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d047      	beq.n	800a2b0 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a220:	e04e      	b.n	800a2c0 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a228:	461a      	mov	r2, r3
 800a22a:	6a3b      	ldr	r3, [r7, #32]
 800a22c:	fb03 f202 	mul.w	r2, r3, r2
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	2200      	movs	r2, #0
 800a238:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	220a      	movs	r2, #10
 800a240:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	3363      	adds	r3, #99	; 0x63
 800a248:	2210      	movs	r2, #16
 800a24a:	2100      	movs	r1, #0
 800a24c:	4618      	mov	r0, r3
 800a24e:	f004 f8a7 	bl	800e3a0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	222a      	movs	r2, #42	; 0x2a
 800a256:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a25a:	79fa      	ldrb	r2, [r7, #7]
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a262:	79ba      	ldrb	r2, [r7, #6]
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a26a:	797a      	ldrb	r2, [r7, #5]
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a272:	1d3b      	adds	r3, r7, #4
 800a274:	781a      	ldrb	r2, [r3, #0]
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a27c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a286:	f107 0320 	add.w	r3, r7, #32
 800a28a:	781a      	ldrb	r2, [r3, #0]
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	2201      	movs	r2, #1
 800a296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	2202      	movs	r2, #2
 800a29e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	683a      	ldr	r2, [r7, #0]
 800a2a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	75fb      	strb	r3, [r7, #23]
      break;
 800a2ae:	e007      	b.n	800a2c0 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a2b0:	7afb      	ldrb	r3, [r7, #11]
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f7ff fb83 	bl	80099c0 <USBH_MSC_BOT_Process>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	75fb      	strb	r3, [r7, #23]
      break;
 800a2be:	bf00      	nop
  }

  return error;
 800a2c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3718      	adds	r7, #24
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b086      	sub	sp, #24
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	60f8      	str	r0, [r7, #12]
 800a2d2:	607a      	str	r2, [r7, #4]
 800a2d4:	603b      	str	r3, [r7, #0]
 800a2d6:	460b      	mov	r3, r1
 800a2d8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a2da:	2302      	movs	r3, #2
 800a2dc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2e4:	69db      	ldr	r3, [r3, #28]
 800a2e6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d002      	beq.n	800a2f8 <USBH_MSC_SCSI_Read+0x2e>
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d047      	beq.n	800a386 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a2f6:	e04e      	b.n	800a396 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a2fe:	461a      	mov	r2, r3
 800a300:	6a3b      	ldr	r3, [r7, #32]
 800a302:	fb03 f202 	mul.w	r2, r3, r2
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	2280      	movs	r2, #128	; 0x80
 800a30e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	220a      	movs	r2, #10
 800a316:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	3363      	adds	r3, #99	; 0x63
 800a31e:	2210      	movs	r2, #16
 800a320:	2100      	movs	r1, #0
 800a322:	4618      	mov	r0, r3
 800a324:	f004 f83c 	bl	800e3a0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	2228      	movs	r2, #40	; 0x28
 800a32c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a330:	79fa      	ldrb	r2, [r7, #7]
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a338:	79ba      	ldrb	r2, [r7, #6]
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a340:	797a      	ldrb	r2, [r7, #5]
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a348:	1d3b      	adds	r3, r7, #4
 800a34a:	781a      	ldrb	r2, [r3, #0]
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a352:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a35c:	f107 0320 	add.w	r3, r7, #32
 800a360:	781a      	ldrb	r2, [r3, #0]
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	2201      	movs	r2, #1
 800a36c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	2202      	movs	r2, #2
 800a374:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a380:	2301      	movs	r3, #1
 800a382:	75fb      	strb	r3, [r7, #23]
      break;
 800a384:	e007      	b.n	800a396 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a386:	7afb      	ldrb	r3, [r7, #11]
 800a388:	4619      	mov	r1, r3
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f7ff fb18 	bl	80099c0 <USBH_MSC_BOT_Process>
 800a390:	4603      	mov	r3, r0
 800a392:	75fb      	strb	r3, [r7, #23]
      break;
 800a394:	bf00      	nop
  }

  return error;
 800a396:	7dfb      	ldrb	r3, [r7, #23]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3718      	adds	r7, #24
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d10a      	bne.n	800a3ca <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800a3b4:	481c      	ldr	r0, [pc, #112]	; (800a428 <USBH_Init+0x88>)
 800a3b6:	f004 f8a5 	bl	800e504 <iprintf>
 800a3ba:	481c      	ldr	r0, [pc, #112]	; (800a42c <USBH_Init+0x8c>)
 800a3bc:	f004 f8a2 	bl	800e504 <iprintf>
 800a3c0:	200a      	movs	r0, #10
 800a3c2:	f004 f8b7 	bl	800e534 <putchar>
    return USBH_FAIL;
 800a3c6:	2302      	movs	r3, #2
 800a3c8:	e029      	b.n	800a41e <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	79fa      	ldrb	r2, [r7, #7]
 800a3ce:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f000 f824 	bl	800a430 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d003      	beq.n	800a416 <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f003 fd7c 	bl	800df14 <USBH_LL_Init>

  return USBH_OK;
 800a41c:	2300      	movs	r3, #0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	0800f5a0 	.word	0x0800f5a0
 800a42c:	0800f5a8 	.word	0x0800f5a8

0800a430 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a430:	b480      	push	{r7}
 800a432:	b085      	sub	sp, #20
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a438:	2300      	movs	r3, #0
 800a43a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a43c:	2300      	movs	r3, #0
 800a43e:	60fb      	str	r3, [r7, #12]
 800a440:	e009      	b.n	800a456 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	33e0      	adds	r3, #224	; 0xe0
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	4413      	add	r3, r2
 800a44c:	2200      	movs	r2, #0
 800a44e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	3301      	adds	r3, #1
 800a454:	60fb      	str	r3, [r7, #12]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2b0e      	cmp	r3, #14
 800a45a:	d9f2      	bls.n	800a442 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a45c:	2300      	movs	r3, #0
 800a45e:	60fb      	str	r3, [r7, #12]
 800a460:	e009      	b.n	800a476 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	4413      	add	r3, r2
 800a468:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a46c:	2200      	movs	r2, #0
 800a46e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	3301      	adds	r3, #1
 800a474:	60fb      	str	r3, [r7, #12]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a47c:	d3f1      	bcc.n	800a462 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2201      	movs	r2, #1
 800a48e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2240      	movs	r2, #64	; 0x40
 800a4a2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3714      	adds	r7, #20
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d01f      	beq.n	800a52c <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d10e      	bne.n	800a514 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a4fc:	1c59      	adds	r1, r3, #1
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	33de      	adds	r3, #222	; 0xde
 800a508:	6839      	ldr	r1, [r7, #0]
 800a50a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a50e:	2300      	movs	r3, #0
 800a510:	73fb      	strb	r3, [r7, #15]
 800a512:	e016      	b.n	800a542 <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800a514:	480d      	ldr	r0, [pc, #52]	; (800a54c <USBH_RegisterClass+0x74>)
 800a516:	f003 fff5 	bl	800e504 <iprintf>
 800a51a:	480d      	ldr	r0, [pc, #52]	; (800a550 <USBH_RegisterClass+0x78>)
 800a51c:	f003 fff2 	bl	800e504 <iprintf>
 800a520:	200a      	movs	r0, #10
 800a522:	f004 f807 	bl	800e534 <putchar>
      status = USBH_FAIL;
 800a526:	2302      	movs	r3, #2
 800a528:	73fb      	strb	r3, [r7, #15]
 800a52a:	e00a      	b.n	800a542 <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800a52c:	4807      	ldr	r0, [pc, #28]	; (800a54c <USBH_RegisterClass+0x74>)
 800a52e:	f003 ffe9 	bl	800e504 <iprintf>
 800a532:	4808      	ldr	r0, [pc, #32]	; (800a554 <USBH_RegisterClass+0x7c>)
 800a534:	f003 ffe6 	bl	800e504 <iprintf>
 800a538:	200a      	movs	r0, #10
 800a53a:	f003 fffb 	bl	800e534 <putchar>
    status = USBH_FAIL;
 800a53e:	2302      	movs	r3, #2
 800a540:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a542:	7bfb      	ldrb	r3, [r7, #15]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	0800f5a0 	.word	0x0800f5a0
 800a550:	0800f5bc 	.word	0x0800f5bc
 800a554:	0800f5d8 	.word	0x0800f5d8

0800a558 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	460b      	mov	r3, r1
 800a562:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a564:	2300      	movs	r3, #0
 800a566:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a56e:	78fa      	ldrb	r2, [r7, #3]
 800a570:	429a      	cmp	r2, r3
 800a572:	d23c      	bcs.n	800a5ee <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	78fa      	ldrb	r2, [r7, #3]
 800a578:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800a57c:	78fb      	ldrb	r3, [r7, #3]
 800a57e:	4619      	mov	r1, r3
 800a580:	4823      	ldr	r0, [pc, #140]	; (800a610 <USBH_SelectInterface+0xb8>)
 800a582:	f003 ffbf 	bl	800e504 <iprintf>
 800a586:	200a      	movs	r0, #10
 800a588:	f003 ffd4 	bl	800e534 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800a58c:	78fb      	ldrb	r3, [r7, #3]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	211a      	movs	r1, #26
 800a592:	fb01 f303 	mul.w	r3, r1, r3
 800a596:	4413      	add	r3, r2
 800a598:	f203 3347 	addw	r3, r3, #839	; 0x347
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	4619      	mov	r1, r3
 800a5a0:	481c      	ldr	r0, [pc, #112]	; (800a614 <USBH_SelectInterface+0xbc>)
 800a5a2:	f003 ffaf 	bl	800e504 <iprintf>
 800a5a6:	200a      	movs	r0, #10
 800a5a8:	f003 ffc4 	bl	800e534 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800a5ac:	78fb      	ldrb	r3, [r7, #3]
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	211a      	movs	r1, #26
 800a5b2:	fb01 f303 	mul.w	r3, r1, r3
 800a5b6:	4413      	add	r3, r2
 800a5b8:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	4619      	mov	r1, r3
 800a5c0:	4815      	ldr	r0, [pc, #84]	; (800a618 <USBH_SelectInterface+0xc0>)
 800a5c2:	f003 ff9f 	bl	800e504 <iprintf>
 800a5c6:	200a      	movs	r0, #10
 800a5c8:	f003 ffb4 	bl	800e534 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800a5cc:	78fb      	ldrb	r3, [r7, #3]
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	211a      	movs	r1, #26
 800a5d2:	fb01 f303 	mul.w	r3, r1, r3
 800a5d6:	4413      	add	r3, r2
 800a5d8:	f203 3349 	addw	r3, r3, #841	; 0x349
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	4619      	mov	r1, r3
 800a5e0:	480e      	ldr	r0, [pc, #56]	; (800a61c <USBH_SelectInterface+0xc4>)
 800a5e2:	f003 ff8f 	bl	800e504 <iprintf>
 800a5e6:	200a      	movs	r0, #10
 800a5e8:	f003 ffa4 	bl	800e534 <putchar>
 800a5ec:	e00a      	b.n	800a604 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800a5ee:	480c      	ldr	r0, [pc, #48]	; (800a620 <USBH_SelectInterface+0xc8>)
 800a5f0:	f003 ff88 	bl	800e504 <iprintf>
 800a5f4:	480b      	ldr	r0, [pc, #44]	; (800a624 <USBH_SelectInterface+0xcc>)
 800a5f6:	f003 ff85 	bl	800e504 <iprintf>
 800a5fa:	200a      	movs	r0, #10
 800a5fc:	f003 ff9a 	bl	800e534 <putchar>
    status = USBH_FAIL;
 800a600:	2302      	movs	r3, #2
 800a602:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a604:	7bfb      	ldrb	r3, [r7, #15]
}
 800a606:	4618      	mov	r0, r3
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	0800f5f0 	.word	0x0800f5f0
 800a614:	0800f610 	.word	0x0800f610
 800a618:	0800f620 	.word	0x0800f620
 800a61c:	0800f630 	.word	0x0800f630
 800a620:	0800f5a0 	.word	0x0800f5a0
 800a624:	0800f640 	.word	0x0800f640

0800a628 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a628:	b480      	push	{r7}
 800a62a:	b087      	sub	sp, #28
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	4608      	mov	r0, r1
 800a632:	4611      	mov	r1, r2
 800a634:	461a      	mov	r2, r3
 800a636:	4603      	mov	r3, r0
 800a638:	70fb      	strb	r3, [r7, #3]
 800a63a:	460b      	mov	r3, r1
 800a63c:	70bb      	strb	r3, [r7, #2]
 800a63e:	4613      	mov	r3, r2
 800a640:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a642:	2300      	movs	r3, #0
 800a644:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a646:	2300      	movs	r3, #0
 800a648:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a650:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a652:	e025      	b.n	800a6a0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a654:	7dfb      	ldrb	r3, [r7, #23]
 800a656:	221a      	movs	r2, #26
 800a658:	fb02 f303 	mul.w	r3, r2, r3
 800a65c:	3308      	adds	r3, #8
 800a65e:	68fa      	ldr	r2, [r7, #12]
 800a660:	4413      	add	r3, r2
 800a662:	3302      	adds	r3, #2
 800a664:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	795b      	ldrb	r3, [r3, #5]
 800a66a:	78fa      	ldrb	r2, [r7, #3]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d002      	beq.n	800a676 <USBH_FindInterface+0x4e>
 800a670:	78fb      	ldrb	r3, [r7, #3]
 800a672:	2bff      	cmp	r3, #255	; 0xff
 800a674:	d111      	bne.n	800a69a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a67a:	78ba      	ldrb	r2, [r7, #2]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d002      	beq.n	800a686 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a680:	78bb      	ldrb	r3, [r7, #2]
 800a682:	2bff      	cmp	r3, #255	; 0xff
 800a684:	d109      	bne.n	800a69a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a68a:	787a      	ldrb	r2, [r7, #1]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d002      	beq.n	800a696 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a690:	787b      	ldrb	r3, [r7, #1]
 800a692:	2bff      	cmp	r3, #255	; 0xff
 800a694:	d101      	bne.n	800a69a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a696:	7dfb      	ldrb	r3, [r7, #23]
 800a698:	e006      	b.n	800a6a8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a69a:	7dfb      	ldrb	r3, [r7, #23]
 800a69c:	3301      	adds	r3, #1
 800a69e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a6a0:	7dfb      	ldrb	r3, [r7, #23]
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d9d6      	bls.n	800a654 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a6a6:	23ff      	movs	r3, #255	; 0xff
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	371c      	adds	r7, #28
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f003 fc65 	bl	800df8c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a6c2:	2101      	movs	r1, #1
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f003 fd7e 	bl	800e1c6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a6ca:	2300      	movs	r3, #0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b088      	sub	sp, #32
 800a6d8:	af04      	add	r7, sp, #16
 800a6da:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a6dc:	2302      	movs	r3, #2
 800a6de:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d102      	bne.n	800a6f6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2203      	movs	r2, #3
 800a6f4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	2b0b      	cmp	r3, #11
 800a6fe:	f200 822b 	bhi.w	800ab58 <USBH_Process+0x484>
 800a702:	a201      	add	r2, pc, #4	; (adr r2, 800a708 <USBH_Process+0x34>)
 800a704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a708:	0800a739 	.word	0x0800a739
 800a70c:	0800a777 	.word	0x0800a777
 800a710:	0800a7f7 	.word	0x0800a7f7
 800a714:	0800aae7 	.word	0x0800aae7
 800a718:	0800ab59 	.word	0x0800ab59
 800a71c:	0800a89b 	.word	0x0800a89b
 800a720:	0800aa69 	.word	0x0800aa69
 800a724:	0800a8e9 	.word	0x0800a8e9
 800a728:	0800a909 	.word	0x0800a909
 800a72c:	0800a935 	.word	0x0800a935
 800a730:	0800a96f 	.word	0x0800a96f
 800a734:	0800aacf 	.word	0x0800aacf
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	2b00      	cmp	r3, #0
 800a742:	f000 820b 	beq.w	800ab5c <USBH_Process+0x488>
      {
        USBH_UsrLog("USB Device Connected");
 800a746:	48b9      	ldr	r0, [pc, #740]	; (800aa2c <USBH_Process+0x358>)
 800a748:	f003 fedc 	bl	800e504 <iprintf>
 800a74c:	200a      	movs	r0, #10
 800a74e:	f003 fef1 	bl	800e534 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2201      	movs	r2, #1
 800a756:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a758:	20c8      	movs	r0, #200	; 0xc8
 800a75a:	f003 fda2 	bl	800e2a2 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f003 fc71 	bl	800e046 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2200      	movs	r2, #0
 800a768:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a774:	e1f2      	b.n	800ab5c <USBH_Process+0x488>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d10d      	bne.n	800a79c <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800a780:	48ab      	ldr	r0, [pc, #684]	; (800aa30 <USBH_Process+0x35c>)
 800a782:	f003 febf 	bl	800e504 <iprintf>
 800a786:	200a      	movs	r0, #10
 800a788:	f003 fed4 	bl	800e534 <putchar>
        phost->device.RstCnt = 0U;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2202      	movs	r2, #2
 800a798:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a79a:	e1ec      	b.n	800ab76 <USBH_Process+0x4a2>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a7a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7a6:	d91a      	bls.n	800a7de <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	b2da      	uxtb	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a7be:	2b03      	cmp	r3, #3
 800a7c0:	d909      	bls.n	800a7d6 <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800a7c2:	489c      	ldr	r0, [pc, #624]	; (800aa34 <USBH_Process+0x360>)
 800a7c4:	f003 fe9e 	bl	800e504 <iprintf>
 800a7c8:	200a      	movs	r0, #10
 800a7ca:	f003 feb3 	bl	800e534 <putchar>
            phost->gState = HOST_ABORT_STATE;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	220d      	movs	r2, #13
 800a7d2:	701a      	strb	r2, [r3, #0]
      break;
 800a7d4:	e1cf      	b.n	800ab76 <USBH_Process+0x4a2>
            phost->gState = HOST_IDLE;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	701a      	strb	r2, [r3, #0]
      break;
 800a7dc:	e1cb      	b.n	800ab76 <USBH_Process+0x4a2>
          phost->Timeout += 10U;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a7e4:	f103 020a 	add.w	r2, r3, #10
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a7ee:	200a      	movs	r0, #10
 800a7f0:	f003 fd57 	bl	800e2a2 <USBH_Delay>
      break;
 800a7f4:	e1bf      	b.n	800ab76 <USBH_Process+0x4a2>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d005      	beq.n	800a80c <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a806:	2104      	movs	r1, #4
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a80c:	2064      	movs	r0, #100	; 0x64
 800a80e:	f003 fd48 	bl	800e2a2 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f003 fbf0 	bl	800dff8 <USBH_LL_GetSpeed>
 800a818:	4603      	mov	r3, r0
 800a81a:	461a      	mov	r2, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2205      	movs	r2, #5
 800a826:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a828:	2100      	movs	r1, #0
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f001 fa77 	bl	800bd1e <USBH_AllocPipe>
 800a830:	4603      	mov	r3, r0
 800a832:	461a      	mov	r2, r3
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a838:	2180      	movs	r1, #128	; 0x80
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f001 fa6f 	bl	800bd1e <USBH_AllocPipe>
 800a840:	4603      	mov	r3, r0
 800a842:	461a      	mov	r2, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	7919      	ldrb	r1, [r3, #4]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a85c:	b292      	uxth	r2, r2
 800a85e:	9202      	str	r2, [sp, #8]
 800a860:	2200      	movs	r2, #0
 800a862:	9201      	str	r2, [sp, #4]
 800a864:	9300      	str	r3, [sp, #0]
 800a866:	4603      	mov	r3, r0
 800a868:	2280      	movs	r2, #128	; 0x80
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f001 fa28 	bl	800bcc0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	7959      	ldrb	r1, [r3, #5]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a884:	b292      	uxth	r2, r2
 800a886:	9202      	str	r2, [sp, #8]
 800a888:	2200      	movs	r2, #0
 800a88a:	9201      	str	r2, [sp, #4]
 800a88c:	9300      	str	r3, [sp, #0]
 800a88e:	4603      	mov	r3, r0
 800a890:	2200      	movs	r2, #0
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f001 fa14 	bl	800bcc0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a898:	e16d      	b.n	800ab76 <USBH_Process+0x4a2>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f97a 	bl	800ab94 <USBH_HandleEnum>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a8a4:	7bbb      	ldrb	r3, [r7, #14]
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f040 8159 	bne.w	800ab60 <USBH_Process+0x48c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800a8ae:	4862      	ldr	r0, [pc, #392]	; (800aa38 <USBH_Process+0x364>)
 800a8b0:	f003 fe28 	bl	800e504 <iprintf>
 800a8b4:	200a      	movs	r0, #10
 800a8b6:	f003 fe3d 	bl	800e534 <putchar>

        phost->device.current_interface = 0U;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d109      	bne.n	800a8e0 <USBH_Process+0x20c>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800a8cc:	485b      	ldr	r0, [pc, #364]	; (800aa3c <USBH_Process+0x368>)
 800a8ce:	f003 fe19 	bl	800e504 <iprintf>
 800a8d2:	200a      	movs	r0, #10
 800a8d4:	f003 fe2e 	bl	800e534 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2208      	movs	r2, #8
 800a8dc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a8de:	e13f      	b.n	800ab60 <USBH_Process+0x48c>
          phost->gState = HOST_INPUT;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2207      	movs	r2, #7
 800a8e4:	701a      	strb	r2, [r3, #0]
      break;
 800a8e6:	e13b      	b.n	800ab60 <USBH_Process+0x48c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f000 8138 	beq.w	800ab64 <USBH_Process+0x490>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8fa:	2101      	movs	r1, #1
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2208      	movs	r2, #8
 800a904:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a906:	e12d      	b.n	800ab64 <USBH_Process+0x490>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a90e:	b29b      	uxth	r3, r3
 800a910:	4619      	mov	r1, r3
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 fd4e 	bl	800b3b4 <USBH_SetCfg>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	f040 8124 	bne.w	800ab68 <USBH_Process+0x494>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2209      	movs	r2, #9
 800a924:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800a926:	4846      	ldr	r0, [pc, #280]	; (800aa40 <USBH_Process+0x36c>)
 800a928:	f003 fdec 	bl	800e504 <iprintf>
 800a92c:	200a      	movs	r0, #10
 800a92e:	f003 fe01 	bl	800e534 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a932:	e119      	b.n	800ab68 <USBH_Process+0x494>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a93a:	f003 0320 	and.w	r3, r3, #32
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d011      	beq.n	800a966 <USBH_Process+0x292>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a942:	2101      	movs	r1, #1
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 fd58 	bl	800b3fa <USBH_SetFeature>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	f040 810d 	bne.w	800ab6c <USBH_Process+0x498>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800a952:	483c      	ldr	r0, [pc, #240]	; (800aa44 <USBH_Process+0x370>)
 800a954:	f003 fdd6 	bl	800e504 <iprintf>
 800a958:	200a      	movs	r0, #10
 800a95a:	f003 fdeb 	bl	800e534 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	220a      	movs	r2, #10
 800a962:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a964:	e102      	b.n	800ab6c <USBH_Process+0x498>
        phost->gState = HOST_CHECK_CLASS;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	220a      	movs	r2, #10
 800a96a:	701a      	strb	r2, [r3, #0]
      break;
 800a96c:	e0fe      	b.n	800ab6c <USBH_Process+0x498>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a974:	2b00      	cmp	r3, #0
 800a976:	d106      	bne.n	800a986 <USBH_Process+0x2b2>
      {
        USBH_UsrLog("No Class has been registered.");
 800a978:	4833      	ldr	r0, [pc, #204]	; (800aa48 <USBH_Process+0x374>)
 800a97a:	f003 fdc3 	bl	800e504 <iprintf>
 800a97e:	200a      	movs	r0, #10
 800a980:	f003 fdd8 	bl	800e534 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a984:	e0f7      	b.n	800ab76 <USBH_Process+0x4a2>
        phost->pActiveClass = NULL;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a98e:	2300      	movs	r3, #0
 800a990:	73fb      	strb	r3, [r7, #15]
 800a992:	e016      	b.n	800a9c2 <USBH_Process+0x2ee>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a994:	7bfa      	ldrb	r2, [r7, #15]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	32de      	adds	r2, #222	; 0xde
 800a99a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a99e:	791a      	ldrb	r2, [r3, #4]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d108      	bne.n	800a9bc <USBH_Process+0x2e8>
            phost->pActiveClass = phost->pClass[idx];
 800a9aa:	7bfa      	ldrb	r2, [r7, #15]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	32de      	adds	r2, #222	; 0xde
 800a9b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a9ba:	e005      	b.n	800a9c8 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a9bc:	7bfb      	ldrb	r3, [r7, #15]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	73fb      	strb	r3, [r7, #15]
 800a9c2:	7bfb      	ldrb	r3, [r7, #15]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d0e5      	beq.n	800a994 <USBH_Process+0x2c0>
        if (phost->pActiveClass != NULL)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d040      	beq.n	800aa54 <USBH_Process+0x380>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	4798      	blx	r3
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d114      	bne.n	800aa0e <USBH_Process+0x33a>
            phost->gState = HOST_CLASS_REQUEST;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2206      	movs	r2, #6
 800a9e8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	4815      	ldr	r0, [pc, #84]	; (800aa4c <USBH_Process+0x378>)
 800a9f6:	f003 fd85 	bl	800e504 <iprintf>
 800a9fa:	200a      	movs	r0, #10
 800a9fc:	f003 fd9a 	bl	800e534 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa06:	2103      	movs	r1, #3
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	4798      	blx	r3
      break;
 800aa0c:	e0b3      	b.n	800ab76 <USBH_Process+0x4a2>
            phost->gState = HOST_ABORT_STATE;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	220d      	movs	r2, #13
 800aa12:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	480c      	ldr	r0, [pc, #48]	; (800aa50 <USBH_Process+0x37c>)
 800aa20:	f003 fd70 	bl	800e504 <iprintf>
 800aa24:	200a      	movs	r0, #10
 800aa26:	f003 fd85 	bl	800e534 <putchar>
      break;
 800aa2a:	e0a4      	b.n	800ab76 <USBH_Process+0x4a2>
 800aa2c:	0800f660 	.word	0x0800f660
 800aa30:	0800f678 	.word	0x0800f678
 800aa34:	0800f694 	.word	0x0800f694
 800aa38:	0800f6c0 	.word	0x0800f6c0
 800aa3c:	0800f6d4 	.word	0x0800f6d4
 800aa40:	0800f6fc 	.word	0x0800f6fc
 800aa44:	0800f718 	.word	0x0800f718
 800aa48:	0800f738 	.word	0x0800f738
 800aa4c:	0800f758 	.word	0x0800f758
 800aa50:	0800f76c 	.word	0x0800f76c
          phost->gState = HOST_ABORT_STATE;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	220d      	movs	r2, #13
 800aa58:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800aa5a:	4849      	ldr	r0, [pc, #292]	; (800ab80 <USBH_Process+0x4ac>)
 800aa5c:	f003 fd52 	bl	800e504 <iprintf>
 800aa60:	200a      	movs	r0, #10
 800aa62:	f003 fd67 	bl	800e534 <putchar>
      break;
 800aa66:	e086      	b.n	800ab76 <USBH_Process+0x4a2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d020      	beq.n	800aab4 <USBH_Process+0x3e0>
      {
        status = phost->pActiveClass->Requests(phost);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	4798      	blx	r3
 800aa7e:	4603      	mov	r3, r0
 800aa80:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800aa82:	7bbb      	ldrb	r3, [r7, #14]
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d103      	bne.n	800aa92 <USBH_Process+0x3be>
        {
          phost->gState = HOST_CLASS;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	220b      	movs	r2, #11
 800aa8e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aa90:	e06e      	b.n	800ab70 <USBH_Process+0x49c>
        else if (status == USBH_FAIL)
 800aa92:	7bbb      	ldrb	r3, [r7, #14]
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d16a      	bne.n	800ab70 <USBH_Process+0x49c>
          phost->gState = HOST_ABORT_STATE;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	220d      	movs	r2, #13
 800aa9e:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800aaa0:	4838      	ldr	r0, [pc, #224]	; (800ab84 <USBH_Process+0x4b0>)
 800aaa2:	f003 fd2f 	bl	800e504 <iprintf>
 800aaa6:	4838      	ldr	r0, [pc, #224]	; (800ab88 <USBH_Process+0x4b4>)
 800aaa8:	f003 fd2c 	bl	800e504 <iprintf>
 800aaac:	200a      	movs	r0, #10
 800aaae:	f003 fd41 	bl	800e534 <putchar>
      break;
 800aab2:	e05d      	b.n	800ab70 <USBH_Process+0x49c>
        phost->gState = HOST_ABORT_STATE;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	220d      	movs	r2, #13
 800aab8:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800aaba:	4832      	ldr	r0, [pc, #200]	; (800ab84 <USBH_Process+0x4b0>)
 800aabc:	f003 fd22 	bl	800e504 <iprintf>
 800aac0:	4832      	ldr	r0, [pc, #200]	; (800ab8c <USBH_Process+0x4b8>)
 800aac2:	f003 fd1f 	bl	800e504 <iprintf>
 800aac6:	200a      	movs	r0, #10
 800aac8:	f003 fd34 	bl	800e534 <putchar>
      break;
 800aacc:	e050      	b.n	800ab70 <USBH_Process+0x49c>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d04d      	beq.n	800ab74 <USBH_Process+0x4a0>
      {
        phost->pActiveClass->BgndProcess(phost);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aade:	695b      	ldr	r3, [r3, #20]
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	4798      	blx	r3
      }
      break;
 800aae4:	e046      	b.n	800ab74 <USBH_Process+0x4a0>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f7ff fc9e 	bl	800a430 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d009      	beq.n	800ab12 <USBH_Process+0x43e>
      {
        phost->pActiveClass->DeInit(phost);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d005      	beq.n	800ab28 <USBH_Process+0x454>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab22:	2105      	movs	r1, #5
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800ab28:	4819      	ldr	r0, [pc, #100]	; (800ab90 <USBH_Process+0x4bc>)
 800ab2a:	f003 fceb 	bl	800e504 <iprintf>
 800ab2e:	200a      	movs	r0, #10
 800ab30:	f003 fd00 	bl	800e534 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d107      	bne.n	800ab50 <USBH_Process+0x47c>
      {
        phost->device.is_ReEnumerated = 0U;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f7ff fdb3 	bl	800a6b4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ab4e:	e012      	b.n	800ab76 <USBH_Process+0x4a2>
        USBH_LL_Start(phost);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f003 fa1b 	bl	800df8c <USBH_LL_Start>
      break;
 800ab56:	e00e      	b.n	800ab76 <USBH_Process+0x4a2>

    case HOST_ABORT_STATE:
    default :
      break;
 800ab58:	bf00      	nop
 800ab5a:	e00c      	b.n	800ab76 <USBH_Process+0x4a2>
      break;
 800ab5c:	bf00      	nop
 800ab5e:	e00a      	b.n	800ab76 <USBH_Process+0x4a2>
      break;
 800ab60:	bf00      	nop
 800ab62:	e008      	b.n	800ab76 <USBH_Process+0x4a2>
    break;
 800ab64:	bf00      	nop
 800ab66:	e006      	b.n	800ab76 <USBH_Process+0x4a2>
      break;
 800ab68:	bf00      	nop
 800ab6a:	e004      	b.n	800ab76 <USBH_Process+0x4a2>
      break;
 800ab6c:	bf00      	nop
 800ab6e:	e002      	b.n	800ab76 <USBH_Process+0x4a2>
      break;
 800ab70:	bf00      	nop
 800ab72:	e000      	b.n	800ab76 <USBH_Process+0x4a2>
      break;
 800ab74:	bf00      	nop
  }
  return USBH_OK;
 800ab76:	2300      	movs	r3, #0
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	0800f78c 	.word	0x0800f78c
 800ab84:	0800f5a0 	.word	0x0800f5a0
 800ab88:	0800f7b4 	.word	0x0800f7b4
 800ab8c:	0800f7dc 	.word	0x0800f7dc
 800ab90:	0800f7f4 	.word	0x0800f7f4

0800ab94 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b088      	sub	sp, #32
 800ab98:	af04      	add	r7, sp, #16
 800ab9a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800aba0:	2301      	movs	r3, #1
 800aba2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	785b      	ldrb	r3, [r3, #1]
 800aba8:	2b07      	cmp	r3, #7
 800abaa:	f200 8280 	bhi.w	800b0ae <USBH_HandleEnum+0x51a>
 800abae:	a201      	add	r2, pc, #4	; (adr r2, 800abb4 <USBH_HandleEnum+0x20>)
 800abb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb4:	0800abd5 	.word	0x0800abd5
 800abb8:	0800acb1 	.word	0x0800acb1
 800abbc:	0800ad61 	.word	0x0800ad61
 800abc0:	0800ae21 	.word	0x0800ae21
 800abc4:	0800aea9 	.word	0x0800aea9
 800abc8:	0800af5d 	.word	0x0800af5d
 800abcc:	0800afd1 	.word	0x0800afd1
 800abd0:	0800b043 	.word	0x0800b043
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800abd4:	2108      	movs	r1, #8
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 fb1c 	bl	800b214 <USBH_Get_DevDesc>
 800abdc:	4603      	mov	r3, r0
 800abde:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800abe0:	7bbb      	ldrb	r3, [r7, #14]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d130      	bne.n	800ac48 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	7919      	ldrb	r1, [r3, #4]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ac0a:	b292      	uxth	r2, r2
 800ac0c:	9202      	str	r2, [sp, #8]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	9201      	str	r2, [sp, #4]
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	4603      	mov	r3, r0
 800ac16:	2280      	movs	r2, #128	; 0x80
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f001 f851 	bl	800bcc0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	7959      	ldrb	r1, [r3, #5]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac32:	b292      	uxth	r2, r2
 800ac34:	9202      	str	r2, [sp, #8]
 800ac36:	2200      	movs	r2, #0
 800ac38:	9201      	str	r2, [sp, #4]
 800ac3a:	9300      	str	r3, [sp, #0]
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2200      	movs	r2, #0
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f001 f83d 	bl	800bcc0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ac46:	e234      	b.n	800b0b2 <USBH_HandleEnum+0x51e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac48:	7bbb      	ldrb	r3, [r7, #14]
 800ac4a:	2b03      	cmp	r3, #3
 800ac4c:	f040 8231 	bne.w	800b0b2 <USBH_HandleEnum+0x51e>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800ac50:	48b9      	ldr	r0, [pc, #740]	; (800af38 <USBH_HandleEnum+0x3a4>)
 800ac52:	f003 fc57 	bl	800e504 <iprintf>
 800ac56:	48b9      	ldr	r0, [pc, #740]	; (800af3c <USBH_HandleEnum+0x3a8>)
 800ac58:	f003 fc54 	bl	800e504 <iprintf>
 800ac5c:	200a      	movs	r0, #10
 800ac5e:	f003 fc69 	bl	800e534 <putchar>
        phost->device.EnumCnt++;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac68:	3301      	adds	r3, #1
 800ac6a:	b2da      	uxtb	r2, r3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac78:	2b03      	cmp	r3, #3
 800ac7a:	d909      	bls.n	800ac90 <USBH_HandleEnum+0xfc>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800ac7c:	48b0      	ldr	r0, [pc, #704]	; (800af40 <USBH_HandleEnum+0x3ac>)
 800ac7e:	f003 fc41 	bl	800e504 <iprintf>
 800ac82:	200a      	movs	r0, #10
 800ac84:	f003 fc56 	bl	800e534 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	220d      	movs	r2, #13
 800ac8c:	701a      	strb	r2, [r3, #0]
      break;
 800ac8e:	e210      	b.n	800b0b2 <USBH_HandleEnum+0x51e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	795b      	ldrb	r3, [r3, #5]
 800ac94:	4619      	mov	r1, r3
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f001 f862 	bl	800bd60 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	791b      	ldrb	r3, [r3, #4]
 800aca0:	4619      	mov	r1, r3
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f001 f85c 	bl	800bd60 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	701a      	strb	r2, [r3, #0]
      break;
 800acae:	e200      	b.n	800b0b2 <USBH_HandleEnum+0x51e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800acb0:	2112      	movs	r1, #18
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 faae 	bl	800b214 <USBH_Get_DevDesc>
 800acb8:	4603      	mov	r3, r0
 800acba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800acbc:	7bbb      	ldrb	r3, [r7, #14]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d117      	bne.n	800acf2 <USBH_HandleEnum+0x15e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 800acc8:	4619      	mov	r1, r3
 800acca:	489e      	ldr	r0, [pc, #632]	; (800af44 <USBH_HandleEnum+0x3b0>)
 800accc:	f003 fc1a 	bl	800e504 <iprintf>
 800acd0:	200a      	movs	r0, #10
 800acd2:	f003 fc2f 	bl	800e534 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
 800acdc:	4619      	mov	r1, r3
 800acde:	489a      	ldr	r0, [pc, #616]	; (800af48 <USBH_HandleEnum+0x3b4>)
 800ace0:	f003 fc10 	bl	800e504 <iprintf>
 800ace4:	200a      	movs	r0, #10
 800ace6:	f003 fc25 	bl	800e534 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2202      	movs	r2, #2
 800acee:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800acf0:	e1e1      	b.n	800b0b6 <USBH_HandleEnum+0x522>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800acf2:	7bbb      	ldrb	r3, [r7, #14]
 800acf4:	2b03      	cmp	r3, #3
 800acf6:	f040 81de 	bne.w	800b0b6 <USBH_HandleEnum+0x522>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800acfa:	488f      	ldr	r0, [pc, #572]	; (800af38 <USBH_HandleEnum+0x3a4>)
 800acfc:	f003 fc02 	bl	800e504 <iprintf>
 800ad00:	4892      	ldr	r0, [pc, #584]	; (800af4c <USBH_HandleEnum+0x3b8>)
 800ad02:	f003 fbff 	bl	800e504 <iprintf>
 800ad06:	200a      	movs	r0, #10
 800ad08:	f003 fc14 	bl	800e534 <putchar>
        phost->device.EnumCnt++;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad12:	3301      	adds	r3, #1
 800ad14:	b2da      	uxtb	r2, r3
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad22:	2b03      	cmp	r3, #3
 800ad24:	d909      	bls.n	800ad3a <USBH_HandleEnum+0x1a6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800ad26:	4886      	ldr	r0, [pc, #536]	; (800af40 <USBH_HandleEnum+0x3ac>)
 800ad28:	f003 fbec 	bl	800e504 <iprintf>
 800ad2c:	200a      	movs	r0, #10
 800ad2e:	f003 fc01 	bl	800e534 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	220d      	movs	r2, #13
 800ad36:	701a      	strb	r2, [r3, #0]
      break;
 800ad38:	e1bd      	b.n	800b0b6 <USBH_HandleEnum+0x522>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	795b      	ldrb	r3, [r3, #5]
 800ad3e:	4619      	mov	r1, r3
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f001 f80d 	bl	800bd60 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	791b      	ldrb	r3, [r3, #4]
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f001 f807 	bl	800bd60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	701a      	strb	r2, [r3, #0]
      break;
 800ad5e:	e1aa      	b.n	800b0b6 <USBH_HandleEnum+0x522>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ad60:	2101      	movs	r1, #1
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 fb02 	bl	800b36c <USBH_SetAddress>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad6c:	7bbb      	ldrb	r3, [r7, #14]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d13c      	bne.n	800adec <USBH_HandleEnum+0x258>
      {
        USBH_Delay(2U);
 800ad72:	2002      	movs	r0, #2
 800ad74:	f003 fa95 	bl	800e2a2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 800ad86:	4619      	mov	r1, r3
 800ad88:	4871      	ldr	r0, [pc, #452]	; (800af50 <USBH_HandleEnum+0x3bc>)
 800ad8a:	f003 fbbb 	bl	800e504 <iprintf>
 800ad8e:	200a      	movs	r0, #10
 800ad90:	f003 fbd0 	bl	800e534 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2203      	movs	r2, #3
 800ad98:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	7919      	ldrb	r1, [r3, #4]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800adae:	b292      	uxth	r2, r2
 800adb0:	9202      	str	r2, [sp, #8]
 800adb2:	2200      	movs	r2, #0
 800adb4:	9201      	str	r2, [sp, #4]
 800adb6:	9300      	str	r3, [sp, #0]
 800adb8:	4603      	mov	r3, r0
 800adba:	2280      	movs	r2, #128	; 0x80
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 ff7f 	bl	800bcc0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	7959      	ldrb	r1, [r3, #5]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800add6:	b292      	uxth	r2, r2
 800add8:	9202      	str	r2, [sp, #8]
 800adda:	2200      	movs	r2, #0
 800addc:	9201      	str	r2, [sp, #4]
 800adde:	9300      	str	r3, [sp, #0]
 800ade0:	4603      	mov	r3, r0
 800ade2:	2200      	movs	r2, #0
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 ff6b 	bl	800bcc0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800adea:	e166      	b.n	800b0ba <USBH_HandleEnum+0x526>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800adec:	7bbb      	ldrb	r3, [r7, #14]
 800adee:	2b03      	cmp	r3, #3
 800adf0:	f040 8163 	bne.w	800b0ba <USBH_HandleEnum+0x526>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800adf4:	4850      	ldr	r0, [pc, #320]	; (800af38 <USBH_HandleEnum+0x3a4>)
 800adf6:	f003 fb85 	bl	800e504 <iprintf>
 800adfa:	4856      	ldr	r0, [pc, #344]	; (800af54 <USBH_HandleEnum+0x3c0>)
 800adfc:	f003 fb82 	bl	800e504 <iprintf>
 800ae00:	200a      	movs	r0, #10
 800ae02:	f003 fb97 	bl	800e534 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800ae06:	484e      	ldr	r0, [pc, #312]	; (800af40 <USBH_HandleEnum+0x3ac>)
 800ae08:	f003 fb7c 	bl	800e504 <iprintf>
 800ae0c:	200a      	movs	r0, #10
 800ae0e:	f003 fb91 	bl	800e534 <putchar>
        phost->gState = HOST_ABORT_STATE;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	220d      	movs	r2, #13
 800ae16:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	705a      	strb	r2, [r3, #1]
      break;
 800ae1e:	e14c      	b.n	800b0ba <USBH_HandleEnum+0x526>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ae20:	2109      	movs	r1, #9
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 fa1e 	bl	800b264 <USBH_Get_CfgDesc>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae2c:	7bbb      	ldrb	r3, [r7, #14]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d103      	bne.n	800ae3a <USBH_HandleEnum+0x2a6>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2204      	movs	r2, #4
 800ae36:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ae38:	e141      	b.n	800b0be <USBH_HandleEnum+0x52a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae3a:	7bbb      	ldrb	r3, [r7, #14]
 800ae3c:	2b03      	cmp	r3, #3
 800ae3e:	f040 813e 	bne.w	800b0be <USBH_HandleEnum+0x52a>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800ae42:	483d      	ldr	r0, [pc, #244]	; (800af38 <USBH_HandleEnum+0x3a4>)
 800ae44:	f003 fb5e 	bl	800e504 <iprintf>
 800ae48:	4843      	ldr	r0, [pc, #268]	; (800af58 <USBH_HandleEnum+0x3c4>)
 800ae4a:	f003 fb5b 	bl	800e504 <iprintf>
 800ae4e:	200a      	movs	r0, #10
 800ae50:	f003 fb70 	bl	800e534 <putchar>
        phost->device.EnumCnt++;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	b2da      	uxtb	r2, r3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae6a:	2b03      	cmp	r3, #3
 800ae6c:	d909      	bls.n	800ae82 <USBH_HandleEnum+0x2ee>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800ae6e:	4834      	ldr	r0, [pc, #208]	; (800af40 <USBH_HandleEnum+0x3ac>)
 800ae70:	f003 fb48 	bl	800e504 <iprintf>
 800ae74:	200a      	movs	r0, #10
 800ae76:	f003 fb5d 	bl	800e534 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	220d      	movs	r2, #13
 800ae7e:	701a      	strb	r2, [r3, #0]
      break;
 800ae80:	e11d      	b.n	800b0be <USBH_HandleEnum+0x52a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	795b      	ldrb	r3, [r3, #5]
 800ae86:	4619      	mov	r1, r3
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 ff69 	bl	800bd60 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	791b      	ldrb	r3, [r3, #4]
 800ae92:	4619      	mov	r1, r3
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 ff63 	bl	800bd60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	701a      	strb	r2, [r3, #0]
      break;
 800aea6:	e10a      	b.n	800b0be <USBH_HandleEnum+0x52a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800aeae:	4619      	mov	r1, r3
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 f9d7 	bl	800b264 <USBH_Get_CfgDesc>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aeba:	7bbb      	ldrb	r3, [r7, #14]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d103      	bne.n	800aec8 <USBH_HandleEnum+0x334>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2205      	movs	r2, #5
 800aec4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aec6:	e0fc      	b.n	800b0c2 <USBH_HandleEnum+0x52e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aec8:	7bbb      	ldrb	r3, [r7, #14]
 800aeca:	2b03      	cmp	r3, #3
 800aecc:	f040 80f9 	bne.w	800b0c2 <USBH_HandleEnum+0x52e>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800aed0:	4819      	ldr	r0, [pc, #100]	; (800af38 <USBH_HandleEnum+0x3a4>)
 800aed2:	f003 fb17 	bl	800e504 <iprintf>
 800aed6:	4820      	ldr	r0, [pc, #128]	; (800af58 <USBH_HandleEnum+0x3c4>)
 800aed8:	f003 fb14 	bl	800e504 <iprintf>
 800aedc:	200a      	movs	r0, #10
 800aede:	f003 fb29 	bl	800e534 <putchar>
        phost->device.EnumCnt++;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aee8:	3301      	adds	r3, #1
 800aeea:	b2da      	uxtb	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aef8:	2b03      	cmp	r3, #3
 800aefa:	d909      	bls.n	800af10 <USBH_HandleEnum+0x37c>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800aefc:	4810      	ldr	r0, [pc, #64]	; (800af40 <USBH_HandleEnum+0x3ac>)
 800aefe:	f003 fb01 	bl	800e504 <iprintf>
 800af02:	200a      	movs	r0, #10
 800af04:	f003 fb16 	bl	800e534 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	220d      	movs	r2, #13
 800af0c:	701a      	strb	r2, [r3, #0]
      break;
 800af0e:	e0d8      	b.n	800b0c2 <USBH_HandleEnum+0x52e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	795b      	ldrb	r3, [r3, #5]
 800af14:	4619      	mov	r1, r3
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 ff22 	bl	800bd60 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	791b      	ldrb	r3, [r3, #4]
 800af20:	4619      	mov	r1, r3
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 ff1c 	bl	800bd60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	701a      	strb	r2, [r3, #0]
      break;
 800af34:	e0c5      	b.n	800b0c2 <USBH_HandleEnum+0x52e>
 800af36:	bf00      	nop
 800af38:	0800f5a0 	.word	0x0800f5a0
 800af3c:	0800f80c 	.word	0x0800f80c
 800af40:	0800f840 	.word	0x0800f840
 800af44:	0800f880 	.word	0x0800f880
 800af48:	0800f88c 	.word	0x0800f88c
 800af4c:	0800f898 	.word	0x0800f898
 800af50:	0800f8d4 	.word	0x0800f8d4
 800af54:	0800f8ec 	.word	0x0800f8ec
 800af58:	0800f920 	.word	0x0800f920

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800af62:	2b00      	cmp	r3, #0
 800af64:	d02a      	beq.n	800afbc <USBH_HandleEnum+0x428>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800af72:	23ff      	movs	r3, #255	; 0xff
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 f999 	bl	800b2ac <USBH_Get_StringDesc>
 800af7a:	4603      	mov	r3, r0
 800af7c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800af7e:	7bbb      	ldrb	r3, [r7, #14]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d10d      	bne.n	800afa0 <USBH_HandleEnum+0x40c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800af8a:	4619      	mov	r1, r3
 800af8c:	4853      	ldr	r0, [pc, #332]	; (800b0dc <USBH_HandleEnum+0x548>)
 800af8e:	f003 fab9 	bl	800e504 <iprintf>
 800af92:	200a      	movs	r0, #10
 800af94:	f003 face 	bl	800e534 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2206      	movs	r2, #6
 800af9c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800af9e:	e092      	b.n	800b0c6 <USBH_HandleEnum+0x532>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800afa0:	7bbb      	ldrb	r3, [r7, #14]
 800afa2:	2b03      	cmp	r3, #3
 800afa4:	f040 808f 	bne.w	800b0c6 <USBH_HandleEnum+0x532>
          USBH_UsrLog("Manufacturer : N/A");
 800afa8:	484d      	ldr	r0, [pc, #308]	; (800b0e0 <USBH_HandleEnum+0x54c>)
 800afaa:	f003 faab 	bl	800e504 <iprintf>
 800afae:	200a      	movs	r0, #10
 800afb0:	f003 fac0 	bl	800e534 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2206      	movs	r2, #6
 800afb8:	705a      	strb	r2, [r3, #1]
      break;
 800afba:	e084      	b.n	800b0c6 <USBH_HandleEnum+0x532>
        USBH_UsrLog("Manufacturer : N/A");
 800afbc:	4848      	ldr	r0, [pc, #288]	; (800b0e0 <USBH_HandleEnum+0x54c>)
 800afbe:	f003 faa1 	bl	800e504 <iprintf>
 800afc2:	200a      	movs	r0, #10
 800afc4:	f003 fab6 	bl	800e534 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2206      	movs	r2, #6
 800afcc:	705a      	strb	r2, [r3, #1]
      break;
 800afce:	e07a      	b.n	800b0c6 <USBH_HandleEnum+0x532>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d029      	beq.n	800b02e <USBH_HandleEnum+0x49a>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800afe6:	23ff      	movs	r3, #255	; 0xff
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 f95f 	bl	800b2ac <USBH_Get_StringDesc>
 800afee:	4603      	mov	r3, r0
 800aff0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aff2:	7bbb      	ldrb	r3, [r7, #14]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d10d      	bne.n	800b014 <USBH_HandleEnum+0x480>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800affe:	4619      	mov	r1, r3
 800b000:	4838      	ldr	r0, [pc, #224]	; (800b0e4 <USBH_HandleEnum+0x550>)
 800b002:	f003 fa7f 	bl	800e504 <iprintf>
 800b006:	200a      	movs	r0, #10
 800b008:	f003 fa94 	bl	800e534 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2207      	movs	r2, #7
 800b010:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b012:	e05a      	b.n	800b0ca <USBH_HandleEnum+0x536>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b014:	7bbb      	ldrb	r3, [r7, #14]
 800b016:	2b03      	cmp	r3, #3
 800b018:	d157      	bne.n	800b0ca <USBH_HandleEnum+0x536>
          USBH_UsrLog("Product : N/A");
 800b01a:	4833      	ldr	r0, [pc, #204]	; (800b0e8 <USBH_HandleEnum+0x554>)
 800b01c:	f003 fa72 	bl	800e504 <iprintf>
 800b020:	200a      	movs	r0, #10
 800b022:	f003 fa87 	bl	800e534 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2207      	movs	r2, #7
 800b02a:	705a      	strb	r2, [r3, #1]
      break;
 800b02c:	e04d      	b.n	800b0ca <USBH_HandleEnum+0x536>
        USBH_UsrLog("Product : N/A");
 800b02e:	482e      	ldr	r0, [pc, #184]	; (800b0e8 <USBH_HandleEnum+0x554>)
 800b030:	f003 fa68 	bl	800e504 <iprintf>
 800b034:	200a      	movs	r0, #10
 800b036:	f003 fa7d 	bl	800e534 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2207      	movs	r2, #7
 800b03e:	705a      	strb	r2, [r3, #1]
      break;
 800b040:	e043      	b.n	800b0ca <USBH_HandleEnum+0x536>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d027      	beq.n	800b09c <USBH_HandleEnum+0x508>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b058:	23ff      	movs	r3, #255	; 0xff
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 f926 	bl	800b2ac <USBH_Get_StringDesc>
 800b060:	4603      	mov	r3, r0
 800b062:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b064:	7bbb      	ldrb	r3, [r7, #14]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d10c      	bne.n	800b084 <USBH_HandleEnum+0x4f0>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b070:	4619      	mov	r1, r3
 800b072:	481e      	ldr	r0, [pc, #120]	; (800b0ec <USBH_HandleEnum+0x558>)
 800b074:	f003 fa46 	bl	800e504 <iprintf>
 800b078:	200a      	movs	r0, #10
 800b07a:	f003 fa5b 	bl	800e534 <putchar>
          Status = USBH_OK;
 800b07e:	2300      	movs	r3, #0
 800b080:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b082:	e024      	b.n	800b0ce <USBH_HandleEnum+0x53a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b084:	7bbb      	ldrb	r3, [r7, #14]
 800b086:	2b03      	cmp	r3, #3
 800b088:	d121      	bne.n	800b0ce <USBH_HandleEnum+0x53a>
          USBH_UsrLog("Serial Number : N/A");
 800b08a:	4819      	ldr	r0, [pc, #100]	; (800b0f0 <USBH_HandleEnum+0x55c>)
 800b08c:	f003 fa3a 	bl	800e504 <iprintf>
 800b090:	200a      	movs	r0, #10
 800b092:	f003 fa4f 	bl	800e534 <putchar>
          Status = USBH_OK;
 800b096:	2300      	movs	r3, #0
 800b098:	73fb      	strb	r3, [r7, #15]
      break;
 800b09a:	e018      	b.n	800b0ce <USBH_HandleEnum+0x53a>
        USBH_UsrLog("Serial Number : N/A");
 800b09c:	4814      	ldr	r0, [pc, #80]	; (800b0f0 <USBH_HandleEnum+0x55c>)
 800b09e:	f003 fa31 	bl	800e504 <iprintf>
 800b0a2:	200a      	movs	r0, #10
 800b0a4:	f003 fa46 	bl	800e534 <putchar>
        Status = USBH_OK;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b0ac:	e00f      	b.n	800b0ce <USBH_HandleEnum+0x53a>

    default:
      break;
 800b0ae:	bf00      	nop
 800b0b0:	e00e      	b.n	800b0d0 <USBH_HandleEnum+0x53c>
      break;
 800b0b2:	bf00      	nop
 800b0b4:	e00c      	b.n	800b0d0 <USBH_HandleEnum+0x53c>
      break;
 800b0b6:	bf00      	nop
 800b0b8:	e00a      	b.n	800b0d0 <USBH_HandleEnum+0x53c>
      break;
 800b0ba:	bf00      	nop
 800b0bc:	e008      	b.n	800b0d0 <USBH_HandleEnum+0x53c>
      break;
 800b0be:	bf00      	nop
 800b0c0:	e006      	b.n	800b0d0 <USBH_HandleEnum+0x53c>
      break;
 800b0c2:	bf00      	nop
 800b0c4:	e004      	b.n	800b0d0 <USBH_HandleEnum+0x53c>
      break;
 800b0c6:	bf00      	nop
 800b0c8:	e002      	b.n	800b0d0 <USBH_HandleEnum+0x53c>
      break;
 800b0ca:	bf00      	nop
 800b0cc:	e000      	b.n	800b0d0 <USBH_HandleEnum+0x53c>
      break;
 800b0ce:	bf00      	nop
  }
  return Status;
 800b0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	0800f964 	.word	0x0800f964
 800b0e0:	0800f978 	.word	0x0800f978
 800b0e4:	0800f98c 	.word	0x0800f98c
 800b0e8:	0800f99c 	.word	0x0800f99c
 800b0ec:	0800f9ac 	.word	0x0800f9ac
 800b0f0:	0800f9c0 	.word	0x0800f9c0

0800b0f4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	683a      	ldr	r2, [r7, #0]
 800b102:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b106:	bf00      	nop
 800b108:	370c      	adds	r7, #12
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr

0800b112 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b082      	sub	sp, #8
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b120:	1c5a      	adds	r2, r3, #1
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 f804 	bl	800b136 <USBH_HandleSof>
}
 800b12e:	bf00      	nop
 800b130:	3708      	adds	r7, #8
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b082      	sub	sp, #8
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	b2db      	uxtb	r3, r3
 800b144:	2b0b      	cmp	r3, #11
 800b146:	d10a      	bne.n	800b15e <USBH_HandleSof+0x28>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d005      	beq.n	800b15e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b158:	699b      	ldr	r3, [r3, #24]
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	4798      	blx	r3
  }
}
 800b15e:	bf00      	nop
 800b160:	3708      	adds	r7, #8
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b166:	b480      	push	{r7}
 800b168:	b083      	sub	sp, #12
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2201      	movs	r2, #1
 800b172:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b176:	bf00      	nop
}
 800b178:	370c      	adds	r7, #12
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr

0800b182 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b182:	b480      	push	{r7}
 800b184:	b083      	sub	sp, #12
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b192:	bf00      	nop
}
 800b194:	370c      	adds	r7, #12
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr

0800b19e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b19e:	b480      	push	{r7}
 800b1a0:	b083      	sub	sp, #12
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b1be:	2300      	movs	r3, #0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f002 fee8 	bl	800dfc2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	791b      	ldrb	r3, [r3, #4]
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 fdb1 	bl	800bd60 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	795b      	ldrb	r3, [r3, #5]
 800b202:	4619      	mov	r1, r3
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 fdab 	bl	800bd60 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b20a:	2300      	movs	r3, #0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3708      	adds	r7, #8
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b086      	sub	sp, #24
 800b218:	af02      	add	r7, sp, #8
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	460b      	mov	r3, r1
 800b21e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b226:	78fb      	ldrb	r3, [r7, #3]
 800b228:	b29b      	uxth	r3, r3
 800b22a:	9300      	str	r3, [sp, #0]
 800b22c:	4613      	mov	r3, r2
 800b22e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b232:	2100      	movs	r1, #0
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 f864 	bl	800b302 <USBH_GetDescriptor>
 800b23a:	4603      	mov	r3, r0
 800b23c:	73fb      	strb	r3, [r7, #15]
 800b23e:	7bfb      	ldrb	r3, [r7, #15]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d10a      	bne.n	800b25a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b250:	78fa      	ldrb	r2, [r7, #3]
 800b252:	b292      	uxth	r2, r2
 800b254:	4619      	mov	r1, r3
 800b256:	f000 f918 	bl	800b48a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3710      	adds	r7, #16
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b264:	b580      	push	{r7, lr}
 800b266:	b086      	sub	sp, #24
 800b268:	af02      	add	r7, sp, #8
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	460b      	mov	r3, r1
 800b26e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	331c      	adds	r3, #28
 800b274:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b276:	887b      	ldrh	r3, [r7, #2]
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b280:	2100      	movs	r1, #0
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 f83d 	bl	800b302 <USBH_GetDescriptor>
 800b288:	4603      	mov	r3, r0
 800b28a:	72fb      	strb	r3, [r7, #11]
 800b28c:	7afb      	ldrb	r3, [r7, #11]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d107      	bne.n	800b2a2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b298:	887a      	ldrh	r2, [r7, #2]
 800b29a:	68f9      	ldr	r1, [r7, #12]
 800b29c:	4618      	mov	r0, r3
 800b29e:	f000 f964 	bl	800b56a <USBH_ParseCfgDesc>
  }

  return status;
 800b2a2:	7afb      	ldrb	r3, [r7, #11]
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3710      	adds	r7, #16
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b088      	sub	sp, #32
 800b2b0:	af02      	add	r7, sp, #8
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	607a      	str	r2, [r7, #4]
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	72fb      	strb	r3, [r7, #11]
 800b2bc:	4613      	mov	r3, r2
 800b2be:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b2c0:	7afb      	ldrb	r3, [r7, #11]
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b2c8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b2d0:	893b      	ldrh	r3, [r7, #8]
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f000 f812 	bl	800b302 <USBH_GetDescriptor>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	75fb      	strb	r3, [r7, #23]
 800b2e2:	7dfb      	ldrb	r3, [r7, #23]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d107      	bne.n	800b2f8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b2ee:	893a      	ldrh	r2, [r7, #8]
 800b2f0:	6879      	ldr	r1, [r7, #4]
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f000 fa37 	bl	800b766 <USBH_ParseStringDesc>
  }

  return status;
 800b2f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3718      	adds	r7, #24
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}

0800b302 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b302:	b580      	push	{r7, lr}
 800b304:	b084      	sub	sp, #16
 800b306:	af00      	add	r7, sp, #0
 800b308:	60f8      	str	r0, [r7, #12]
 800b30a:	607b      	str	r3, [r7, #4]
 800b30c:	460b      	mov	r3, r1
 800b30e:	72fb      	strb	r3, [r7, #11]
 800b310:	4613      	mov	r3, r2
 800b312:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	789b      	ldrb	r3, [r3, #2]
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d11c      	bne.n	800b356 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b31c:	7afb      	ldrb	r3, [r7, #11]
 800b31e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b322:	b2da      	uxtb	r2, r3
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2206      	movs	r2, #6
 800b32c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	893a      	ldrh	r2, [r7, #8]
 800b332:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b334:	893b      	ldrh	r3, [r7, #8]
 800b336:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b33a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b33e:	d104      	bne.n	800b34a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f240 4209 	movw	r2, #1033	; 0x409
 800b346:	829a      	strh	r2, [r3, #20]
 800b348:	e002      	b.n	800b350 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2200      	movs	r2, #0
 800b34e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	8b3a      	ldrh	r2, [r7, #24]
 800b354:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b356:	8b3b      	ldrh	r3, [r7, #24]
 800b358:	461a      	mov	r2, r3
 800b35a:	6879      	ldr	r1, [r7, #4]
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	f000 fa50 	bl	800b802 <USBH_CtlReq>
 800b362:	4603      	mov	r3, r0
}
 800b364:	4618      	mov	r0, r3
 800b366:	3710      	adds	r7, #16
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	460b      	mov	r3, r1
 800b376:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	789b      	ldrb	r3, [r3, #2]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d10f      	bne.n	800b3a0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2205      	movs	r2, #5
 800b38a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b38c:	78fb      	ldrb	r3, [r7, #3]
 800b38e:	b29a      	uxth	r2, r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2200      	movs	r2, #0
 800b398:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2200      	movs	r2, #0
 800b39e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	2100      	movs	r1, #0
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 fa2c 	bl	800b802 <USBH_CtlReq>
 800b3aa:	4603      	mov	r3, r0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3708      	adds	r7, #8
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	460b      	mov	r3, r1
 800b3be:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	789b      	ldrb	r3, [r3, #2]
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d10e      	bne.n	800b3e6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2209      	movs	r2, #9
 800b3d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	887a      	ldrh	r2, [r7, #2]
 800b3d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	2100      	movs	r1, #0
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fa09 	bl	800b802 <USBH_CtlReq>
 800b3f0:	4603      	mov	r3, r0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3708      	adds	r7, #8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b082      	sub	sp, #8
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	460b      	mov	r3, r1
 800b404:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	789b      	ldrb	r3, [r3, #2]
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d10f      	bne.n	800b42e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2203      	movs	r2, #3
 800b418:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b41a:	78fb      	ldrb	r3, [r7, #3]
 800b41c:	b29a      	uxth	r2, r3
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b42e:	2200      	movs	r2, #0
 800b430:	2100      	movs	r1, #0
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 f9e5 	bl	800b802 <USBH_CtlReq>
 800b438:	4603      	mov	r3, r0
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3708      	adds	r7, #8
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}

0800b442 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b442:	b580      	push	{r7, lr}
 800b444:	b082      	sub	sp, #8
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
 800b44a:	460b      	mov	r3, r1
 800b44c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	789b      	ldrb	r3, [r3, #2]
 800b452:	2b01      	cmp	r3, #1
 800b454:	d10f      	bne.n	800b476 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2202      	movs	r2, #2
 800b45a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2201      	movs	r2, #1
 800b460:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b468:	78fb      	ldrb	r3, [r7, #3]
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b476:	2200      	movs	r2, #0
 800b478:	2100      	movs	r1, #0
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 f9c1 	bl	800b802 <USBH_CtlReq>
 800b480:	4603      	mov	r3, r0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b48a:	b480      	push	{r7}
 800b48c:	b085      	sub	sp, #20
 800b48e:	af00      	add	r7, sp, #0
 800b490:	60f8      	str	r0, [r7, #12]
 800b492:	60b9      	str	r1, [r7, #8]
 800b494:	4613      	mov	r3, r2
 800b496:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	781a      	ldrb	r2, [r3, #0]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	785a      	ldrb	r2, [r3, #1]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	3302      	adds	r3, #2
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	b29a      	uxth	r2, r3
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	3303      	adds	r3, #3
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	021b      	lsls	r3, r3, #8
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	791a      	ldrb	r2, [r3, #4]
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	795a      	ldrb	r2, [r3, #5]
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	799a      	ldrb	r2, [r3, #6]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	79da      	ldrb	r2, [r3, #7]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b4e4:	88fb      	ldrh	r3, [r7, #6]
 800b4e6:	2b08      	cmp	r3, #8
 800b4e8:	d939      	bls.n	800b55e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	3308      	adds	r3, #8
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	b29a      	uxth	r2, r3
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	3309      	adds	r3, #9
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	021b      	lsls	r3, r3, #8
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	4313      	orrs	r3, r2
 800b500:	b29a      	uxth	r2, r3
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	330a      	adds	r3, #10
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	b29a      	uxth	r2, r3
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	330b      	adds	r3, #11
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	b29b      	uxth	r3, r3
 800b516:	021b      	lsls	r3, r3, #8
 800b518:	b29b      	uxth	r3, r3
 800b51a:	4313      	orrs	r3, r2
 800b51c:	b29a      	uxth	r2, r3
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	330c      	adds	r3, #12
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	b29a      	uxth	r2, r3
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	330d      	adds	r3, #13
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	b29b      	uxth	r3, r3
 800b532:	021b      	lsls	r3, r3, #8
 800b534:	b29b      	uxth	r3, r3
 800b536:	4313      	orrs	r3, r2
 800b538:	b29a      	uxth	r2, r3
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	7b9a      	ldrb	r2, [r3, #14]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	7bda      	ldrb	r2, [r3, #15]
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	7c1a      	ldrb	r2, [r3, #16]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	7c5a      	ldrb	r2, [r3, #17]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	745a      	strb	r2, [r3, #17]
  }
}
 800b55e:	bf00      	nop
 800b560:	3714      	adds	r7, #20
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr

0800b56a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b56a:	b580      	push	{r7, lr}
 800b56c:	b08a      	sub	sp, #40	; 0x28
 800b56e:	af00      	add	r7, sp, #0
 800b570:	60f8      	str	r0, [r7, #12]
 800b572:	60b9      	str	r1, [r7, #8]
 800b574:	4613      	mov	r3, r2
 800b576:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b57c:	2300      	movs	r3, #0
 800b57e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b582:	2300      	movs	r3, #0
 800b584:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	781a      	ldrb	r2, [r3, #0]
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	785a      	ldrb	r2, [r3, #1]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	3302      	adds	r3, #2
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	b29a      	uxth	r2, r3
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	3303      	adds	r3, #3
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	021b      	lsls	r3, r3, #8
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	b29a      	uxth	r2, r3
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	791a      	ldrb	r2, [r3, #4]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	795a      	ldrb	r2, [r3, #5]
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	799a      	ldrb	r2, [r3, #6]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	79da      	ldrb	r2, [r3, #7]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	7a1a      	ldrb	r2, [r3, #8]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b5e0:	88fb      	ldrh	r3, [r7, #6]
 800b5e2:	2b09      	cmp	r3, #9
 800b5e4:	d95f      	bls.n	800b6a6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b5e6:	2309      	movs	r3, #9
 800b5e8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b5ee:	e051      	b.n	800b694 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b5f0:	f107 0316 	add.w	r3, r7, #22
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5f8:	f000 f8e8 	bl	800b7cc <USBH_GetNextDesc>
 800b5fc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b600:	785b      	ldrb	r3, [r3, #1]
 800b602:	2b04      	cmp	r3, #4
 800b604:	d146      	bne.n	800b694 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b606:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b60a:	221a      	movs	r2, #26
 800b60c:	fb02 f303 	mul.w	r3, r2, r3
 800b610:	3308      	adds	r3, #8
 800b612:	68fa      	ldr	r2, [r7, #12]
 800b614:	4413      	add	r3, r2
 800b616:	3302      	adds	r3, #2
 800b618:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b61a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b61c:	69f8      	ldr	r0, [r7, #28]
 800b61e:	f000 f846 	bl	800b6ae <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b622:	2300      	movs	r3, #0
 800b624:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b628:	2300      	movs	r3, #0
 800b62a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b62c:	e022      	b.n	800b674 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b62e:	f107 0316 	add.w	r3, r7, #22
 800b632:	4619      	mov	r1, r3
 800b634:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b636:	f000 f8c9 	bl	800b7cc <USBH_GetNextDesc>
 800b63a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63e:	785b      	ldrb	r3, [r3, #1]
 800b640:	2b05      	cmp	r3, #5
 800b642:	d117      	bne.n	800b674 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b644:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b648:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b64c:	3201      	adds	r2, #1
 800b64e:	00d2      	lsls	r2, r2, #3
 800b650:	211a      	movs	r1, #26
 800b652:	fb01 f303 	mul.w	r3, r1, r3
 800b656:	4413      	add	r3, r2
 800b658:	3308      	adds	r3, #8
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	4413      	add	r3, r2
 800b65e:	3304      	adds	r3, #4
 800b660:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b662:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b664:	69b8      	ldr	r0, [r7, #24]
 800b666:	f000 f851 	bl	800b70c <USBH_ParseEPDesc>
            ep_ix++;
 800b66a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b66e:	3301      	adds	r3, #1
 800b670:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	791b      	ldrb	r3, [r3, #4]
 800b678:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d204      	bcs.n	800b68a <USBH_ParseCfgDesc+0x120>
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	885a      	ldrh	r2, [r3, #2]
 800b684:	8afb      	ldrh	r3, [r7, #22]
 800b686:	429a      	cmp	r2, r3
 800b688:	d8d1      	bhi.n	800b62e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b68a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b68e:	3301      	adds	r3, #1
 800b690:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b694:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d804      	bhi.n	800b6a6 <USBH_ParseCfgDesc+0x13c>
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	885a      	ldrh	r2, [r3, #2]
 800b6a0:	8afb      	ldrh	r3, [r7, #22]
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d8a4      	bhi.n	800b5f0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b6a6:	bf00      	nop
 800b6a8:	3728      	adds	r7, #40	; 0x28
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b6ae:	b480      	push	{r7}
 800b6b0:	b083      	sub	sp, #12
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
 800b6b6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	781a      	ldrb	r2, [r3, #0]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	785a      	ldrb	r2, [r3, #1]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	789a      	ldrb	r2, [r3, #2]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	78da      	ldrb	r2, [r3, #3]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	791a      	ldrb	r2, [r3, #4]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	795a      	ldrb	r2, [r3, #5]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	799a      	ldrb	r2, [r3, #6]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	79da      	ldrb	r2, [r3, #7]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	7a1a      	ldrb	r2, [r3, #8]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	721a      	strb	r2, [r3, #8]
}
 800b700:	bf00      	nop
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	781a      	ldrb	r2, [r3, #0]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	785a      	ldrb	r2, [r3, #1]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	789a      	ldrb	r2, [r3, #2]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	78da      	ldrb	r2, [r3, #3]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	3304      	adds	r3, #4
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	b29a      	uxth	r2, r3
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	3305      	adds	r3, #5
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	b29b      	uxth	r3, r3
 800b746:	021b      	lsls	r3, r3, #8
 800b748:	b29b      	uxth	r3, r3
 800b74a:	4313      	orrs	r3, r2
 800b74c:	b29a      	uxth	r2, r3
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	799a      	ldrb	r2, [r3, #6]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	719a      	strb	r2, [r3, #6]
}
 800b75a:	bf00      	nop
 800b75c:	370c      	adds	r7, #12
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr

0800b766 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b766:	b480      	push	{r7}
 800b768:	b087      	sub	sp, #28
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	60f8      	str	r0, [r7, #12]
 800b76e:	60b9      	str	r1, [r7, #8]
 800b770:	4613      	mov	r3, r2
 800b772:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	3301      	adds	r3, #1
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	2b03      	cmp	r3, #3
 800b77c:	d120      	bne.n	800b7c0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	1e9a      	subs	r2, r3, #2
 800b784:	88fb      	ldrh	r3, [r7, #6]
 800b786:	4293      	cmp	r3, r2
 800b788:	bf28      	it	cs
 800b78a:	4613      	movcs	r3, r2
 800b78c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	3302      	adds	r3, #2
 800b792:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b794:	2300      	movs	r3, #0
 800b796:	82fb      	strh	r3, [r7, #22]
 800b798:	e00b      	b.n	800b7b2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b79a:	8afb      	ldrh	r3, [r7, #22]
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	4413      	add	r3, r2
 800b7a0:	781a      	ldrb	r2, [r3, #0]
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b7ac:	8afb      	ldrh	r3, [r7, #22]
 800b7ae:	3302      	adds	r3, #2
 800b7b0:	82fb      	strh	r3, [r7, #22]
 800b7b2:	8afa      	ldrh	r2, [r7, #22]
 800b7b4:	8abb      	ldrh	r3, [r7, #20]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d3ef      	bcc.n	800b79a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	701a      	strb	r2, [r3, #0]
  }
}
 800b7c0:	bf00      	nop
 800b7c2:	371c      	adds	r7, #28
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	881a      	ldrh	r2, [r3, #0]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	4413      	add	r3, r2
 800b7e2:	b29a      	uxth	r2, r3
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3714      	adds	r7, #20
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr

0800b802 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b802:	b580      	push	{r7, lr}
 800b804:	b086      	sub	sp, #24
 800b806:	af00      	add	r7, sp, #0
 800b808:	60f8      	str	r0, [r7, #12]
 800b80a:	60b9      	str	r1, [r7, #8]
 800b80c:	4613      	mov	r3, r2
 800b80e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b810:	2301      	movs	r3, #1
 800b812:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	789b      	ldrb	r3, [r3, #2]
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d002      	beq.n	800b822 <USBH_CtlReq+0x20>
 800b81c:	2b02      	cmp	r3, #2
 800b81e:	d00f      	beq.n	800b840 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b820:	e027      	b.n	800b872 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	68ba      	ldr	r2, [r7, #8]
 800b826:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	88fa      	ldrh	r2, [r7, #6]
 800b82c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2201      	movs	r2, #1
 800b832:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2202      	movs	r2, #2
 800b838:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b83a:	2301      	movs	r3, #1
 800b83c:	75fb      	strb	r3, [r7, #23]
      break;
 800b83e:	e018      	b.n	800b872 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f000 f81b 	bl	800b87c <USBH_HandleControl>
 800b846:	4603      	mov	r3, r0
 800b848:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b84a:	7dfb      	ldrb	r3, [r7, #23]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d002      	beq.n	800b856 <USBH_CtlReq+0x54>
 800b850:	7dfb      	ldrb	r3, [r7, #23]
 800b852:	2b03      	cmp	r3, #3
 800b854:	d106      	bne.n	800b864 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2201      	movs	r2, #1
 800b85a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2200      	movs	r2, #0
 800b860:	761a      	strb	r2, [r3, #24]
      break;
 800b862:	e005      	b.n	800b870 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b864:	7dfb      	ldrb	r3, [r7, #23]
 800b866:	2b02      	cmp	r3, #2
 800b868:	d102      	bne.n	800b870 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2201      	movs	r2, #1
 800b86e:	709a      	strb	r2, [r3, #2]
      break;
 800b870:	bf00      	nop
  }
  return status;
 800b872:	7dfb      	ldrb	r3, [r7, #23]
}
 800b874:	4618      	mov	r0, r3
 800b876:	3718      	adds	r7, #24
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b086      	sub	sp, #24
 800b880:	af02      	add	r7, sp, #8
 800b882:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b884:	2301      	movs	r3, #1
 800b886:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b888:	2300      	movs	r3, #0
 800b88a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	7e1b      	ldrb	r3, [r3, #24]
 800b890:	3b01      	subs	r3, #1
 800b892:	2b0a      	cmp	r3, #10
 800b894:	f200 815f 	bhi.w	800bb56 <USBH_HandleControl+0x2da>
 800b898:	a201      	add	r2, pc, #4	; (adr r2, 800b8a0 <USBH_HandleControl+0x24>)
 800b89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b89e:	bf00      	nop
 800b8a0:	0800b8cd 	.word	0x0800b8cd
 800b8a4:	0800b8e7 	.word	0x0800b8e7
 800b8a8:	0800b951 	.word	0x0800b951
 800b8ac:	0800b977 	.word	0x0800b977
 800b8b0:	0800b9af 	.word	0x0800b9af
 800b8b4:	0800b9d9 	.word	0x0800b9d9
 800b8b8:	0800ba2b 	.word	0x0800ba2b
 800b8bc:	0800ba4d 	.word	0x0800ba4d
 800b8c0:	0800ba89 	.word	0x0800ba89
 800b8c4:	0800baaf 	.word	0x0800baaf
 800b8c8:	0800baed 	.word	0x0800baed
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f103 0110 	add.w	r1, r3, #16
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	795b      	ldrb	r3, [r3, #5]
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 f951 	bl	800bb80 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2202      	movs	r2, #2
 800b8e2:	761a      	strb	r2, [r3, #24]
      break;
 800b8e4:	e142      	b.n	800bb6c <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	795b      	ldrb	r3, [r3, #5]
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f002 fc57 	bl	800e1a0 <USBH_LL_GetURBState>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b8f6:	7bbb      	ldrb	r3, [r7, #14]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d11e      	bne.n	800b93a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	7c1b      	ldrb	r3, [r3, #16]
 800b900:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b904:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	8adb      	ldrh	r3, [r3, #22]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d00a      	beq.n	800b924 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b90e:	7b7b      	ldrb	r3, [r7, #13]
 800b910:	2b80      	cmp	r3, #128	; 0x80
 800b912:	d103      	bne.n	800b91c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2203      	movs	r2, #3
 800b918:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b91a:	e11e      	b.n	800bb5a <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2205      	movs	r2, #5
 800b920:	761a      	strb	r2, [r3, #24]
      break;
 800b922:	e11a      	b.n	800bb5a <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 800b924:	7b7b      	ldrb	r3, [r7, #13]
 800b926:	2b80      	cmp	r3, #128	; 0x80
 800b928:	d103      	bne.n	800b932 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2209      	movs	r2, #9
 800b92e:	761a      	strb	r2, [r3, #24]
      break;
 800b930:	e113      	b.n	800bb5a <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2207      	movs	r2, #7
 800b936:	761a      	strb	r2, [r3, #24]
      break;
 800b938:	e10f      	b.n	800bb5a <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b93a:	7bbb      	ldrb	r3, [r7, #14]
 800b93c:	2b04      	cmp	r3, #4
 800b93e:	d003      	beq.n	800b948 <USBH_HandleControl+0xcc>
 800b940:	7bbb      	ldrb	r3, [r7, #14]
 800b942:	2b02      	cmp	r3, #2
 800b944:	f040 8109 	bne.w	800bb5a <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	220b      	movs	r2, #11
 800b94c:	761a      	strb	r2, [r3, #24]
      break;
 800b94e:	e104      	b.n	800bb5a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b956:	b29a      	uxth	r2, r3
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6899      	ldr	r1, [r3, #8]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	899a      	ldrh	r2, [r3, #12]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	791b      	ldrb	r3, [r3, #4]
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 f948 	bl	800bbfe <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2204      	movs	r2, #4
 800b972:	761a      	strb	r2, [r3, #24]
      break;
 800b974:	e0fa      	b.n	800bb6c <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	791b      	ldrb	r3, [r3, #4]
 800b97a:	4619      	mov	r1, r3
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f002 fc0f 	bl	800e1a0 <USBH_LL_GetURBState>
 800b982:	4603      	mov	r3, r0
 800b984:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b986:	7bbb      	ldrb	r3, [r7, #14]
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d102      	bne.n	800b992 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2209      	movs	r2, #9
 800b990:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b992:	7bbb      	ldrb	r3, [r7, #14]
 800b994:	2b05      	cmp	r3, #5
 800b996:	d102      	bne.n	800b99e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b998:	2303      	movs	r3, #3
 800b99a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b99c:	e0df      	b.n	800bb5e <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800b99e:	7bbb      	ldrb	r3, [r7, #14]
 800b9a0:	2b04      	cmp	r3, #4
 800b9a2:	f040 80dc 	bne.w	800bb5e <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	220b      	movs	r2, #11
 800b9aa:	761a      	strb	r2, [r3, #24]
      break;
 800b9ac:	e0d7      	b.n	800bb5e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6899      	ldr	r1, [r3, #8]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	899a      	ldrh	r2, [r3, #12]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	795b      	ldrb	r3, [r3, #5]
 800b9ba:	2001      	movs	r0, #1
 800b9bc:	9000      	str	r0, [sp, #0]
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 f8f8 	bl	800bbb4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b9ca:	b29a      	uxth	r2, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2206      	movs	r2, #6
 800b9d4:	761a      	strb	r2, [r3, #24]
      break;
 800b9d6:	e0c9      	b.n	800bb6c <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	795b      	ldrb	r3, [r3, #5]
 800b9dc:	4619      	mov	r1, r3
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f002 fbde 	bl	800e1a0 <USBH_LL_GetURBState>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b9e8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d103      	bne.n	800b9f6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2207      	movs	r2, #7
 800b9f2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b9f4:	e0b5      	b.n	800bb62 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 800b9f6:	7bbb      	ldrb	r3, [r7, #14]
 800b9f8:	2b05      	cmp	r3, #5
 800b9fa:	d105      	bne.n	800ba08 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	220c      	movs	r2, #12
 800ba00:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ba02:	2303      	movs	r3, #3
 800ba04:	73fb      	strb	r3, [r7, #15]
      break;
 800ba06:	e0ac      	b.n	800bb62 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ba08:	7bbb      	ldrb	r3, [r7, #14]
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d103      	bne.n	800ba16 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2205      	movs	r2, #5
 800ba12:	761a      	strb	r2, [r3, #24]
      break;
 800ba14:	e0a5      	b.n	800bb62 <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 800ba16:	7bbb      	ldrb	r3, [r7, #14]
 800ba18:	2b04      	cmp	r3, #4
 800ba1a:	f040 80a2 	bne.w	800bb62 <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	220b      	movs	r2, #11
 800ba22:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ba24:	2302      	movs	r3, #2
 800ba26:	73fb      	strb	r3, [r7, #15]
      break;
 800ba28:	e09b      	b.n	800bb62 <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	791b      	ldrb	r3, [r3, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	2100      	movs	r1, #0
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 f8e3 	bl	800bbfe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ba3e:	b29a      	uxth	r2, r3
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2208      	movs	r2, #8
 800ba48:	761a      	strb	r2, [r3, #24]

      break;
 800ba4a:	e08f      	b.n	800bb6c <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	791b      	ldrb	r3, [r3, #4]
 800ba50:	4619      	mov	r1, r3
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f002 fba4 	bl	800e1a0 <USBH_LL_GetURBState>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ba5c:	7bbb      	ldrb	r3, [r7, #14]
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d105      	bne.n	800ba6e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	220d      	movs	r2, #13
 800ba66:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ba6c:	e07b      	b.n	800bb66 <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 800ba6e:	7bbb      	ldrb	r3, [r7, #14]
 800ba70:	2b04      	cmp	r3, #4
 800ba72:	d103      	bne.n	800ba7c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	220b      	movs	r2, #11
 800ba78:	761a      	strb	r2, [r3, #24]
      break;
 800ba7a:	e074      	b.n	800bb66 <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 800ba7c:	7bbb      	ldrb	r3, [r7, #14]
 800ba7e:	2b05      	cmp	r3, #5
 800ba80:	d171      	bne.n	800bb66 <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 800ba82:	2303      	movs	r3, #3
 800ba84:	73fb      	strb	r3, [r7, #15]
      break;
 800ba86:	e06e      	b.n	800bb66 <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	795b      	ldrb	r3, [r3, #5]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	9200      	str	r2, [sp, #0]
 800ba90:	2200      	movs	r2, #0
 800ba92:	2100      	movs	r1, #0
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 f88d 	bl	800bbb4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800baa0:	b29a      	uxth	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	220a      	movs	r2, #10
 800baaa:	761a      	strb	r2, [r3, #24]
      break;
 800baac:	e05e      	b.n	800bb6c <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	795b      	ldrb	r3, [r3, #5]
 800bab2:	4619      	mov	r1, r3
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f002 fb73 	bl	800e1a0 <USBH_LL_GetURBState>
 800baba:	4603      	mov	r3, r0
 800babc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800babe:	7bbb      	ldrb	r3, [r7, #14]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d105      	bne.n	800bad0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bac4:	2300      	movs	r3, #0
 800bac6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	220d      	movs	r2, #13
 800bacc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bace:	e04c      	b.n	800bb6a <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bad0:	7bbb      	ldrb	r3, [r7, #14]
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	d103      	bne.n	800bade <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2209      	movs	r2, #9
 800bada:	761a      	strb	r2, [r3, #24]
      break;
 800badc:	e045      	b.n	800bb6a <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800bade:	7bbb      	ldrb	r3, [r7, #14]
 800bae0:	2b04      	cmp	r3, #4
 800bae2:	d142      	bne.n	800bb6a <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	220b      	movs	r2, #11
 800bae8:	761a      	strb	r2, [r3, #24]
      break;
 800baea:	e03e      	b.n	800bb6a <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	7e5b      	ldrb	r3, [r3, #25]
 800baf0:	3301      	adds	r3, #1
 800baf2:	b2da      	uxtb	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	765a      	strb	r2, [r3, #25]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	7e5b      	ldrb	r3, [r3, #25]
 800bafc:	2b02      	cmp	r3, #2
 800bafe:	d806      	bhi.n	800bb0e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2201      	movs	r2, #1
 800bb0a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bb0c:	e02e      	b.n	800bb6c <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bb14:	2106      	movs	r1, #6
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800bb20:	4815      	ldr	r0, [pc, #84]	; (800bb78 <USBH_HandleControl+0x2fc>)
 800bb22:	f002 fcef 	bl	800e504 <iprintf>
 800bb26:	4815      	ldr	r0, [pc, #84]	; (800bb7c <USBH_HandleControl+0x300>)
 800bb28:	f002 fcec 	bl	800e504 <iprintf>
 800bb2c:	200a      	movs	r0, #10
 800bb2e:	f002 fd01 	bl	800e534 <putchar>
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	795b      	ldrb	r3, [r3, #5]
 800bb36:	4619      	mov	r1, r3
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 f911 	bl	800bd60 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	791b      	ldrb	r3, [r3, #4]
 800bb42:	4619      	mov	r1, r3
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 f90b 	bl	800bd60 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bb50:	2302      	movs	r3, #2
 800bb52:	73fb      	strb	r3, [r7, #15]
      break;
 800bb54:	e00a      	b.n	800bb6c <USBH_HandleControl+0x2f0>

    default:
      break;
 800bb56:	bf00      	nop
 800bb58:	e008      	b.n	800bb6c <USBH_HandleControl+0x2f0>
      break;
 800bb5a:	bf00      	nop
 800bb5c:	e006      	b.n	800bb6c <USBH_HandleControl+0x2f0>
      break;
 800bb5e:	bf00      	nop
 800bb60:	e004      	b.n	800bb6c <USBH_HandleControl+0x2f0>
      break;
 800bb62:	bf00      	nop
 800bb64:	e002      	b.n	800bb6c <USBH_HandleControl+0x2f0>
      break;
 800bb66:	bf00      	nop
 800bb68:	e000      	b.n	800bb6c <USBH_HandleControl+0x2f0>
      break;
 800bb6a:	bf00      	nop
  }

  return status;
 800bb6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3710      	adds	r7, #16
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	0800f9d4 	.word	0x0800f9d4
 800bb7c:	0800f9dc 	.word	0x0800f9dc

0800bb80 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b088      	sub	sp, #32
 800bb84:	af04      	add	r7, sp, #16
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bb8e:	79f9      	ldrb	r1, [r7, #7]
 800bb90:	2300      	movs	r3, #0
 800bb92:	9303      	str	r3, [sp, #12]
 800bb94:	2308      	movs	r3, #8
 800bb96:	9302      	str	r3, [sp, #8]
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	9301      	str	r3, [sp, #4]
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	2300      	movs	r3, #0
 800bba2:	2200      	movs	r2, #0
 800bba4:	68f8      	ldr	r0, [r7, #12]
 800bba6:	f002 faca 	bl	800e13e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800bbaa:	2300      	movs	r3, #0
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3710      	adds	r7, #16
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b088      	sub	sp, #32
 800bbb8:	af04      	add	r7, sp, #16
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	60b9      	str	r1, [r7, #8]
 800bbbe:	4611      	mov	r1, r2
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	80fb      	strh	r3, [r7, #6]
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d001      	beq.n	800bbd8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bbd8:	7979      	ldrb	r1, [r7, #5]
 800bbda:	7e3b      	ldrb	r3, [r7, #24]
 800bbdc:	9303      	str	r3, [sp, #12]
 800bbde:	88fb      	ldrh	r3, [r7, #6]
 800bbe0:	9302      	str	r3, [sp, #8]
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	9301      	str	r3, [sp, #4]
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	9300      	str	r3, [sp, #0]
 800bbea:	2300      	movs	r3, #0
 800bbec:	2200      	movs	r2, #0
 800bbee:	68f8      	ldr	r0, [r7, #12]
 800bbf0:	f002 faa5 	bl	800e13e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bbf4:	2300      	movs	r3, #0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b088      	sub	sp, #32
 800bc02:	af04      	add	r7, sp, #16
 800bc04:	60f8      	str	r0, [r7, #12]
 800bc06:	60b9      	str	r1, [r7, #8]
 800bc08:	4611      	mov	r1, r2
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	80fb      	strh	r3, [r7, #6]
 800bc10:	4613      	mov	r3, r2
 800bc12:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc14:	7979      	ldrb	r1, [r7, #5]
 800bc16:	2300      	movs	r3, #0
 800bc18:	9303      	str	r3, [sp, #12]
 800bc1a:	88fb      	ldrh	r3, [r7, #6]
 800bc1c:	9302      	str	r3, [sp, #8]
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	9301      	str	r3, [sp, #4]
 800bc22:	2301      	movs	r3, #1
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	2300      	movs	r3, #0
 800bc28:	2201      	movs	r2, #1
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	f002 fa87 	bl	800e13e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bc30:	2300      	movs	r3, #0

}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b088      	sub	sp, #32
 800bc3e:	af04      	add	r7, sp, #16
 800bc40:	60f8      	str	r0, [r7, #12]
 800bc42:	60b9      	str	r1, [r7, #8]
 800bc44:	4611      	mov	r1, r2
 800bc46:	461a      	mov	r2, r3
 800bc48:	460b      	mov	r3, r1
 800bc4a:	80fb      	strh	r3, [r7, #6]
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d001      	beq.n	800bc5e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc5e:	7979      	ldrb	r1, [r7, #5]
 800bc60:	7e3b      	ldrb	r3, [r7, #24]
 800bc62:	9303      	str	r3, [sp, #12]
 800bc64:	88fb      	ldrh	r3, [r7, #6]
 800bc66:	9302      	str	r3, [sp, #8]
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	9301      	str	r3, [sp, #4]
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	2302      	movs	r3, #2
 800bc72:	2200      	movs	r2, #0
 800bc74:	68f8      	ldr	r0, [r7, #12]
 800bc76:	f002 fa62 	bl	800e13e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3710      	adds	r7, #16
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b088      	sub	sp, #32
 800bc88:	af04      	add	r7, sp, #16
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	4611      	mov	r1, r2
 800bc90:	461a      	mov	r2, r3
 800bc92:	460b      	mov	r3, r1
 800bc94:	80fb      	strh	r3, [r7, #6]
 800bc96:	4613      	mov	r3, r2
 800bc98:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc9a:	7979      	ldrb	r1, [r7, #5]
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	9303      	str	r3, [sp, #12]
 800bca0:	88fb      	ldrh	r3, [r7, #6]
 800bca2:	9302      	str	r3, [sp, #8]
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	9301      	str	r3, [sp, #4]
 800bca8:	2301      	movs	r3, #1
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	2302      	movs	r3, #2
 800bcae:	2201      	movs	r2, #1
 800bcb0:	68f8      	ldr	r0, [r7, #12]
 800bcb2:	f002 fa44 	bl	800e13e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bcb6:	2300      	movs	r3, #0
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3710      	adds	r7, #16
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b086      	sub	sp, #24
 800bcc4:	af04      	add	r7, sp, #16
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	4608      	mov	r0, r1
 800bcca:	4611      	mov	r1, r2
 800bccc:	461a      	mov	r2, r3
 800bcce:	4603      	mov	r3, r0
 800bcd0:	70fb      	strb	r3, [r7, #3]
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	70bb      	strb	r3, [r7, #2]
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bcda:	7878      	ldrb	r0, [r7, #1]
 800bcdc:	78ba      	ldrb	r2, [r7, #2]
 800bcde:	78f9      	ldrb	r1, [r7, #3]
 800bce0:	8b3b      	ldrh	r3, [r7, #24]
 800bce2:	9302      	str	r3, [sp, #8]
 800bce4:	7d3b      	ldrb	r3, [r7, #20]
 800bce6:	9301      	str	r3, [sp, #4]
 800bce8:	7c3b      	ldrb	r3, [r7, #16]
 800bcea:	9300      	str	r3, [sp, #0]
 800bcec:	4603      	mov	r3, r0
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f002 f9d7 	bl	800e0a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bcf4:	2300      	movs	r3, #0
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3708      	adds	r7, #8
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bcfe:	b580      	push	{r7, lr}
 800bd00:	b082      	sub	sp, #8
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
 800bd06:	460b      	mov	r3, r1
 800bd08:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bd0a:	78fb      	ldrb	r3, [r7, #3]
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f002 f9f6 	bl	800e100 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3708      	adds	r7, #8
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}

0800bd1e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bd1e:	b580      	push	{r7, lr}
 800bd20:	b084      	sub	sp, #16
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
 800bd26:	460b      	mov	r3, r1
 800bd28:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 f836 	bl	800bd9c <USBH_GetFreePipe>
 800bd30:	4603      	mov	r3, r0
 800bd32:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bd34:	89fb      	ldrh	r3, [r7, #14]
 800bd36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d00a      	beq.n	800bd54 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800bd3e:	78fa      	ldrb	r2, [r7, #3]
 800bd40:	89fb      	ldrh	r3, [r7, #14]
 800bd42:	f003 030f 	and.w	r3, r3, #15
 800bd46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bd4a:	6879      	ldr	r1, [r7, #4]
 800bd4c:	33e0      	adds	r3, #224	; 0xe0
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	440b      	add	r3, r1
 800bd52:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bd54:	89fb      	ldrh	r3, [r7, #14]
 800bd56:	b2db      	uxtb	r3, r3
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3710      	adds	r7, #16
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	460b      	mov	r3, r1
 800bd6a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800bd6c:	78fb      	ldrb	r3, [r7, #3]
 800bd6e:	2b0a      	cmp	r3, #10
 800bd70:	d80d      	bhi.n	800bd8e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bd72:	78fb      	ldrb	r3, [r7, #3]
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	33e0      	adds	r3, #224	; 0xe0
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	4413      	add	r3, r2
 800bd7c:	685a      	ldr	r2, [r3, #4]
 800bd7e:	78fb      	ldrb	r3, [r7, #3]
 800bd80:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bd84:	6879      	ldr	r1, [r7, #4]
 800bd86:	33e0      	adds	r3, #224	; 0xe0
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	440b      	add	r3, r1
 800bd8c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bd8e:	2300      	movs	r3, #0
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b085      	sub	sp, #20
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bda4:	2300      	movs	r3, #0
 800bda6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800bda8:	2300      	movs	r3, #0
 800bdaa:	73fb      	strb	r3, [r7, #15]
 800bdac:	e00f      	b.n	800bdce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bdae:	7bfb      	ldrb	r3, [r7, #15]
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	33e0      	adds	r3, #224	; 0xe0
 800bdb4:	009b      	lsls	r3, r3, #2
 800bdb6:	4413      	add	r3, r2
 800bdb8:	685b      	ldr	r3, [r3, #4]
 800bdba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d102      	bne.n	800bdc8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bdc2:	7bfb      	ldrb	r3, [r7, #15]
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	e007      	b.n	800bdd8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800bdc8:	7bfb      	ldrb	r3, [r7, #15]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	73fb      	strb	r3, [r7, #15]
 800bdce:	7bfb      	ldrb	r3, [r7, #15]
 800bdd0:	2b0a      	cmp	r3, #10
 800bdd2:	d9ec      	bls.n	800bdae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bdd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3714      	adds	r7, #20
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b084      	sub	sp, #16
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	4603      	mov	r3, r0
 800bdec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bdee:	79fb      	ldrb	r3, [r7, #7]
 800bdf0:	4a08      	ldr	r2, [pc, #32]	; (800be14 <disk_status+0x30>)
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	4413      	add	r3, r2
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	79fa      	ldrb	r2, [r7, #7]
 800bdfc:	4905      	ldr	r1, [pc, #20]	; (800be14 <disk_status+0x30>)
 800bdfe:	440a      	add	r2, r1
 800be00:	7a12      	ldrb	r2, [r2, #8]
 800be02:	4610      	mov	r0, r2
 800be04:	4798      	blx	r3
 800be06:	4603      	mov	r3, r0
 800be08:	73fb      	strb	r3, [r7, #15]
  return stat;
 800be0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3710      	adds	r7, #16
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	20003154 	.word	0x20003154

0800be18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	4603      	mov	r3, r0
 800be20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800be22:	2300      	movs	r3, #0
 800be24:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800be26:	79fb      	ldrb	r3, [r7, #7]
 800be28:	4a0d      	ldr	r2, [pc, #52]	; (800be60 <disk_initialize+0x48>)
 800be2a:	5cd3      	ldrb	r3, [r2, r3]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d111      	bne.n	800be54 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800be30:	79fb      	ldrb	r3, [r7, #7]
 800be32:	4a0b      	ldr	r2, [pc, #44]	; (800be60 <disk_initialize+0x48>)
 800be34:	2101      	movs	r1, #1
 800be36:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800be38:	79fb      	ldrb	r3, [r7, #7]
 800be3a:	4a09      	ldr	r2, [pc, #36]	; (800be60 <disk_initialize+0x48>)
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	4413      	add	r3, r2
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	79fa      	ldrb	r2, [r7, #7]
 800be46:	4906      	ldr	r1, [pc, #24]	; (800be60 <disk_initialize+0x48>)
 800be48:	440a      	add	r2, r1
 800be4a:	7a12      	ldrb	r2, [r2, #8]
 800be4c:	4610      	mov	r0, r2
 800be4e:	4798      	blx	r3
 800be50:	4603      	mov	r3, r0
 800be52:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800be54:	7bfb      	ldrb	r3, [r7, #15]
}
 800be56:	4618      	mov	r0, r3
 800be58:	3710      	adds	r7, #16
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop
 800be60:	20003154 	.word	0x20003154

0800be64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800be64:	b590      	push	{r4, r7, lr}
 800be66:	b087      	sub	sp, #28
 800be68:	af00      	add	r7, sp, #0
 800be6a:	60b9      	str	r1, [r7, #8]
 800be6c:	607a      	str	r2, [r7, #4]
 800be6e:	603b      	str	r3, [r7, #0]
 800be70:	4603      	mov	r3, r0
 800be72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800be74:	7bfb      	ldrb	r3, [r7, #15]
 800be76:	4a0a      	ldr	r2, [pc, #40]	; (800bea0 <disk_read+0x3c>)
 800be78:	009b      	lsls	r3, r3, #2
 800be7a:	4413      	add	r3, r2
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	689c      	ldr	r4, [r3, #8]
 800be80:	7bfb      	ldrb	r3, [r7, #15]
 800be82:	4a07      	ldr	r2, [pc, #28]	; (800bea0 <disk_read+0x3c>)
 800be84:	4413      	add	r3, r2
 800be86:	7a18      	ldrb	r0, [r3, #8]
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	687a      	ldr	r2, [r7, #4]
 800be8c:	68b9      	ldr	r1, [r7, #8]
 800be8e:	47a0      	blx	r4
 800be90:	4603      	mov	r3, r0
 800be92:	75fb      	strb	r3, [r7, #23]
  return res;
 800be94:	7dfb      	ldrb	r3, [r7, #23]
}
 800be96:	4618      	mov	r0, r3
 800be98:	371c      	adds	r7, #28
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd90      	pop	{r4, r7, pc}
 800be9e:	bf00      	nop
 800bea0:	20003154 	.word	0x20003154

0800bea4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bea4:	b590      	push	{r4, r7, lr}
 800bea6:	b087      	sub	sp, #28
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60b9      	str	r1, [r7, #8]
 800beac:	607a      	str	r2, [r7, #4]
 800beae:	603b      	str	r3, [r7, #0]
 800beb0:	4603      	mov	r3, r0
 800beb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800beb4:	7bfb      	ldrb	r3, [r7, #15]
 800beb6:	4a0a      	ldr	r2, [pc, #40]	; (800bee0 <disk_write+0x3c>)
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	4413      	add	r3, r2
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	68dc      	ldr	r4, [r3, #12]
 800bec0:	7bfb      	ldrb	r3, [r7, #15]
 800bec2:	4a07      	ldr	r2, [pc, #28]	; (800bee0 <disk_write+0x3c>)
 800bec4:	4413      	add	r3, r2
 800bec6:	7a18      	ldrb	r0, [r3, #8]
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	68b9      	ldr	r1, [r7, #8]
 800bece:	47a0      	blx	r4
 800bed0:	4603      	mov	r3, r0
 800bed2:	75fb      	strb	r3, [r7, #23]
  return res;
 800bed4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	371c      	adds	r7, #28
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd90      	pop	{r4, r7, pc}
 800bede:	bf00      	nop
 800bee0:	20003154 	.word	0x20003154

0800bee4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	4603      	mov	r3, r0
 800beec:	603a      	str	r2, [r7, #0]
 800beee:	71fb      	strb	r3, [r7, #7]
 800bef0:	460b      	mov	r3, r1
 800bef2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bef4:	79fb      	ldrb	r3, [r7, #7]
 800bef6:	4a09      	ldr	r2, [pc, #36]	; (800bf1c <disk_ioctl+0x38>)
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	4413      	add	r3, r2
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	691b      	ldr	r3, [r3, #16]
 800bf00:	79fa      	ldrb	r2, [r7, #7]
 800bf02:	4906      	ldr	r1, [pc, #24]	; (800bf1c <disk_ioctl+0x38>)
 800bf04:	440a      	add	r2, r1
 800bf06:	7a10      	ldrb	r0, [r2, #8]
 800bf08:	79b9      	ldrb	r1, [r7, #6]
 800bf0a:	683a      	ldr	r2, [r7, #0]
 800bf0c:	4798      	blx	r3
 800bf0e:	4603      	mov	r3, r0
 800bf10:	73fb      	strb	r3, [r7, #15]
  return res;
 800bf12:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3710      	adds	r7, #16
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	20003154 	.word	0x20003154

0800bf20 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bf20:	b480      	push	{r7}
 800bf22:	b085      	sub	sp, #20
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bf30:	89fb      	ldrh	r3, [r7, #14]
 800bf32:	021b      	lsls	r3, r3, #8
 800bf34:	b21a      	sxth	r2, r3
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	b21b      	sxth	r3, r3
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	b21b      	sxth	r3, r3
 800bf40:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bf42:	89fb      	ldrh	r3, [r7, #14]
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3714      	adds	r7, #20
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr

0800bf50 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bf50:	b480      	push	{r7}
 800bf52:	b085      	sub	sp, #20
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	3303      	adds	r3, #3
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	021b      	lsls	r3, r3, #8
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	3202      	adds	r2, #2
 800bf68:	7812      	ldrb	r2, [r2, #0]
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	021b      	lsls	r3, r3, #8
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	3201      	adds	r2, #1
 800bf76:	7812      	ldrb	r2, [r2, #0]
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	021b      	lsls	r3, r3, #8
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	7812      	ldrb	r2, [r2, #0]
 800bf84:	4313      	orrs	r3, r2
 800bf86:	60fb      	str	r3, [r7, #12]
	return rv;
 800bf88:	68fb      	ldr	r3, [r7, #12]
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3714      	adds	r7, #20
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf94:	4770      	bx	lr

0800bf96 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bf96:	b480      	push	{r7}
 800bf98:	b083      	sub	sp, #12
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	1c5a      	adds	r2, r3, #1
 800bfa6:	607a      	str	r2, [r7, #4]
 800bfa8:	887a      	ldrh	r2, [r7, #2]
 800bfaa:	b2d2      	uxtb	r2, r2
 800bfac:	701a      	strb	r2, [r3, #0]
 800bfae:	887b      	ldrh	r3, [r7, #2]
 800bfb0:	0a1b      	lsrs	r3, r3, #8
 800bfb2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	1c5a      	adds	r2, r3, #1
 800bfb8:	607a      	str	r2, [r7, #4]
 800bfba:	887a      	ldrh	r2, [r7, #2]
 800bfbc:	b2d2      	uxtb	r2, r2
 800bfbe:	701a      	strb	r2, [r3, #0]
}
 800bfc0:	bf00      	nop
 800bfc2:	370c      	adds	r7, #12
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b083      	sub	sp, #12
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	1c5a      	adds	r2, r3, #1
 800bfda:	607a      	str	r2, [r7, #4]
 800bfdc:	683a      	ldr	r2, [r7, #0]
 800bfde:	b2d2      	uxtb	r2, r2
 800bfe0:	701a      	strb	r2, [r3, #0]
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	0a1b      	lsrs	r3, r3, #8
 800bfe6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	1c5a      	adds	r2, r3, #1
 800bfec:	607a      	str	r2, [r7, #4]
 800bfee:	683a      	ldr	r2, [r7, #0]
 800bff0:	b2d2      	uxtb	r2, r2
 800bff2:	701a      	strb	r2, [r3, #0]
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	0a1b      	lsrs	r3, r3, #8
 800bff8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	1c5a      	adds	r2, r3, #1
 800bffe:	607a      	str	r2, [r7, #4]
 800c000:	683a      	ldr	r2, [r7, #0]
 800c002:	b2d2      	uxtb	r2, r2
 800c004:	701a      	strb	r2, [r3, #0]
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	0a1b      	lsrs	r3, r3, #8
 800c00a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	1c5a      	adds	r2, r3, #1
 800c010:	607a      	str	r2, [r7, #4]
 800c012:	683a      	ldr	r2, [r7, #0]
 800c014:	b2d2      	uxtb	r2, r2
 800c016:	701a      	strb	r2, [r3, #0]
}
 800c018:	bf00      	nop
 800c01a:	370c      	adds	r7, #12
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c024:	b480      	push	{r7}
 800c026:	b087      	sub	sp, #28
 800c028:	af00      	add	r7, sp, #0
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	60b9      	str	r1, [r7, #8]
 800c02e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d00d      	beq.n	800c05a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c03e:	693a      	ldr	r2, [r7, #16]
 800c040:	1c53      	adds	r3, r2, #1
 800c042:	613b      	str	r3, [r7, #16]
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	1c59      	adds	r1, r3, #1
 800c048:	6179      	str	r1, [r7, #20]
 800c04a:	7812      	ldrb	r2, [r2, #0]
 800c04c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	3b01      	subs	r3, #1
 800c052:	607b      	str	r3, [r7, #4]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d1f1      	bne.n	800c03e <mem_cpy+0x1a>
	}
}
 800c05a:	bf00      	nop
 800c05c:	371c      	adds	r7, #28
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr

0800c066 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c066:	b480      	push	{r7}
 800c068:	b087      	sub	sp, #28
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	60f8      	str	r0, [r7, #12]
 800c06e:	60b9      	str	r1, [r7, #8]
 800c070:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	1c5a      	adds	r2, r3, #1
 800c07a:	617a      	str	r2, [r7, #20]
 800c07c:	68ba      	ldr	r2, [r7, #8]
 800c07e:	b2d2      	uxtb	r2, r2
 800c080:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	3b01      	subs	r3, #1
 800c086:	607b      	str	r3, [r7, #4]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d1f3      	bne.n	800c076 <mem_set+0x10>
}
 800c08e:	bf00      	nop
 800c090:	bf00      	nop
 800c092:	371c      	adds	r7, #28
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr

0800c09c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c09c:	b480      	push	{r7}
 800c09e:	b089      	sub	sp, #36	; 0x24
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	61fb      	str	r3, [r7, #28]
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	1c5a      	adds	r2, r3, #1
 800c0b8:	61fa      	str	r2, [r7, #28]
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	4619      	mov	r1, r3
 800c0be:	69bb      	ldr	r3, [r7, #24]
 800c0c0:	1c5a      	adds	r2, r3, #1
 800c0c2:	61ba      	str	r2, [r7, #24]
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	1acb      	subs	r3, r1, r3
 800c0c8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	3b01      	subs	r3, #1
 800c0ce:	607b      	str	r3, [r7, #4]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d002      	beq.n	800c0dc <mem_cmp+0x40>
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d0eb      	beq.n	800c0b4 <mem_cmp+0x18>

	return r;
 800c0dc:	697b      	ldr	r3, [r7, #20]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3724      	adds	r7, #36	; 0x24
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr

0800c0ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c0ea:	b480      	push	{r7}
 800c0ec:	b083      	sub	sp, #12
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
 800c0f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c0f4:	e002      	b.n	800c0fc <chk_chr+0x12>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	607b      	str	r3, [r7, #4]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d005      	beq.n	800c110 <chk_chr+0x26>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	461a      	mov	r2, r3
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d1f2      	bne.n	800c0f6 <chk_chr+0xc>
	return *str;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	781b      	ldrb	r3, [r3, #0]
}
 800c114:	4618      	mov	r0, r3
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr

0800c120 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c120:	b480      	push	{r7}
 800c122:	b085      	sub	sp, #20
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c12a:	2300      	movs	r3, #0
 800c12c:	60bb      	str	r3, [r7, #8]
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	60fb      	str	r3, [r7, #12]
 800c132:	e029      	b.n	800c188 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c134:	4a27      	ldr	r2, [pc, #156]	; (800c1d4 <chk_lock+0xb4>)
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	011b      	lsls	r3, r3, #4
 800c13a:	4413      	add	r3, r2
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d01d      	beq.n	800c17e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c142:	4a24      	ldr	r2, [pc, #144]	; (800c1d4 <chk_lock+0xb4>)
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	011b      	lsls	r3, r3, #4
 800c148:	4413      	add	r3, r2
 800c14a:	681a      	ldr	r2, [r3, #0]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	429a      	cmp	r2, r3
 800c152:	d116      	bne.n	800c182 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c154:	4a1f      	ldr	r2, [pc, #124]	; (800c1d4 <chk_lock+0xb4>)
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	011b      	lsls	r3, r3, #4
 800c15a:	4413      	add	r3, r2
 800c15c:	3304      	adds	r3, #4
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c164:	429a      	cmp	r2, r3
 800c166:	d10c      	bne.n	800c182 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c168:	4a1a      	ldr	r2, [pc, #104]	; (800c1d4 <chk_lock+0xb4>)
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	011b      	lsls	r3, r3, #4
 800c16e:	4413      	add	r3, r2
 800c170:	3308      	adds	r3, #8
 800c172:	681a      	ldr	r2, [r3, #0]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c178:	429a      	cmp	r2, r3
 800c17a:	d102      	bne.n	800c182 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c17c:	e007      	b.n	800c18e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c17e:	2301      	movs	r3, #1
 800c180:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	3301      	adds	r3, #1
 800c186:	60fb      	str	r3, [r7, #12]
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2b01      	cmp	r3, #1
 800c18c:	d9d2      	bls.n	800c134 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2b02      	cmp	r3, #2
 800c192:	d109      	bne.n	800c1a8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d102      	bne.n	800c1a0 <chk_lock+0x80>
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	2b02      	cmp	r3, #2
 800c19e:	d101      	bne.n	800c1a4 <chk_lock+0x84>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	e010      	b.n	800c1c6 <chk_lock+0xa6>
 800c1a4:	2312      	movs	r3, #18
 800c1a6:	e00e      	b.n	800c1c6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d108      	bne.n	800c1c0 <chk_lock+0xa0>
 800c1ae:	4a09      	ldr	r2, [pc, #36]	; (800c1d4 <chk_lock+0xb4>)
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	011b      	lsls	r3, r3, #4
 800c1b4:	4413      	add	r3, r2
 800c1b6:	330c      	adds	r3, #12
 800c1b8:	881b      	ldrh	r3, [r3, #0]
 800c1ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1be:	d101      	bne.n	800c1c4 <chk_lock+0xa4>
 800c1c0:	2310      	movs	r3, #16
 800c1c2:	e000      	b.n	800c1c6 <chk_lock+0xa6>
 800c1c4:	2300      	movs	r3, #0
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3714      	adds	r7, #20
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop
 800c1d4:	20003134 	.word	0x20003134

0800c1d8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	607b      	str	r3, [r7, #4]
 800c1e2:	e002      	b.n	800c1ea <enq_lock+0x12>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	607b      	str	r3, [r7, #4]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	d806      	bhi.n	800c1fe <enq_lock+0x26>
 800c1f0:	4a09      	ldr	r2, [pc, #36]	; (800c218 <enq_lock+0x40>)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	011b      	lsls	r3, r3, #4
 800c1f6:	4413      	add	r3, r2
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d1f2      	bne.n	800c1e4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b02      	cmp	r3, #2
 800c202:	bf14      	ite	ne
 800c204:	2301      	movne	r3, #1
 800c206:	2300      	moveq	r3, #0
 800c208:	b2db      	uxtb	r3, r3
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	370c      	adds	r7, #12
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop
 800c218:	20003134 	.word	0x20003134

0800c21c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b085      	sub	sp, #20
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c226:	2300      	movs	r3, #0
 800c228:	60fb      	str	r3, [r7, #12]
 800c22a:	e01f      	b.n	800c26c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c22c:	4a41      	ldr	r2, [pc, #260]	; (800c334 <inc_lock+0x118>)
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	011b      	lsls	r3, r3, #4
 800c232:	4413      	add	r3, r2
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d113      	bne.n	800c266 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c23e:	4a3d      	ldr	r2, [pc, #244]	; (800c334 <inc_lock+0x118>)
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	011b      	lsls	r3, r3, #4
 800c244:	4413      	add	r3, r2
 800c246:	3304      	adds	r3, #4
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c24e:	429a      	cmp	r2, r3
 800c250:	d109      	bne.n	800c266 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c252:	4a38      	ldr	r2, [pc, #224]	; (800c334 <inc_lock+0x118>)
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	011b      	lsls	r3, r3, #4
 800c258:	4413      	add	r3, r2
 800c25a:	3308      	adds	r3, #8
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c262:	429a      	cmp	r2, r3
 800c264:	d006      	beq.n	800c274 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	3301      	adds	r3, #1
 800c26a:	60fb      	str	r3, [r7, #12]
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d9dc      	bls.n	800c22c <inc_lock+0x10>
 800c272:	e000      	b.n	800c276 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c274:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	2b02      	cmp	r3, #2
 800c27a:	d132      	bne.n	800c2e2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c27c:	2300      	movs	r3, #0
 800c27e:	60fb      	str	r3, [r7, #12]
 800c280:	e002      	b.n	800c288 <inc_lock+0x6c>
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	3301      	adds	r3, #1
 800c286:	60fb      	str	r3, [r7, #12]
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d806      	bhi.n	800c29c <inc_lock+0x80>
 800c28e:	4a29      	ldr	r2, [pc, #164]	; (800c334 <inc_lock+0x118>)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	011b      	lsls	r3, r3, #4
 800c294:	4413      	add	r3, r2
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1f2      	bne.n	800c282 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	d101      	bne.n	800c2a6 <inc_lock+0x8a>
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	e040      	b.n	800c328 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	4922      	ldr	r1, [pc, #136]	; (800c334 <inc_lock+0x118>)
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	011b      	lsls	r3, r3, #4
 800c2b0:	440b      	add	r3, r1
 800c2b2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	689a      	ldr	r2, [r3, #8]
 800c2b8:	491e      	ldr	r1, [pc, #120]	; (800c334 <inc_lock+0x118>)
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	011b      	lsls	r3, r3, #4
 800c2be:	440b      	add	r3, r1
 800c2c0:	3304      	adds	r3, #4
 800c2c2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	695a      	ldr	r2, [r3, #20]
 800c2c8:	491a      	ldr	r1, [pc, #104]	; (800c334 <inc_lock+0x118>)
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	011b      	lsls	r3, r3, #4
 800c2ce:	440b      	add	r3, r1
 800c2d0:	3308      	adds	r3, #8
 800c2d2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c2d4:	4a17      	ldr	r2, [pc, #92]	; (800c334 <inc_lock+0x118>)
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	011b      	lsls	r3, r3, #4
 800c2da:	4413      	add	r3, r2
 800c2dc:	330c      	adds	r3, #12
 800c2de:	2200      	movs	r2, #0
 800c2e0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d009      	beq.n	800c2fc <inc_lock+0xe0>
 800c2e8:	4a12      	ldr	r2, [pc, #72]	; (800c334 <inc_lock+0x118>)
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	011b      	lsls	r3, r3, #4
 800c2ee:	4413      	add	r3, r2
 800c2f0:	330c      	adds	r3, #12
 800c2f2:	881b      	ldrh	r3, [r3, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d001      	beq.n	800c2fc <inc_lock+0xe0>
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	e015      	b.n	800c328 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d108      	bne.n	800c314 <inc_lock+0xf8>
 800c302:	4a0c      	ldr	r2, [pc, #48]	; (800c334 <inc_lock+0x118>)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	011b      	lsls	r3, r3, #4
 800c308:	4413      	add	r3, r2
 800c30a:	330c      	adds	r3, #12
 800c30c:	881b      	ldrh	r3, [r3, #0]
 800c30e:	3301      	adds	r3, #1
 800c310:	b29a      	uxth	r2, r3
 800c312:	e001      	b.n	800c318 <inc_lock+0xfc>
 800c314:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c318:	4906      	ldr	r1, [pc, #24]	; (800c334 <inc_lock+0x118>)
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	011b      	lsls	r3, r3, #4
 800c31e:	440b      	add	r3, r1
 800c320:	330c      	adds	r3, #12
 800c322:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	3301      	adds	r3, #1
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3714      	adds	r7, #20
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr
 800c334:	20003134 	.word	0x20003134

0800c338 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c338:	b480      	push	{r7}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c340:	2300      	movs	r3, #0
 800c342:	60fb      	str	r3, [r7, #12]
 800c344:	e010      	b.n	800c368 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c346:	4a0d      	ldr	r2, [pc, #52]	; (800c37c <clear_lock+0x44>)
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	011b      	lsls	r3, r3, #4
 800c34c:	4413      	add	r3, r2
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	429a      	cmp	r2, r3
 800c354:	d105      	bne.n	800c362 <clear_lock+0x2a>
 800c356:	4a09      	ldr	r2, [pc, #36]	; (800c37c <clear_lock+0x44>)
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	011b      	lsls	r3, r3, #4
 800c35c:	4413      	add	r3, r2
 800c35e:	2200      	movs	r2, #0
 800c360:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	3301      	adds	r3, #1
 800c366:	60fb      	str	r3, [r7, #12]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d9eb      	bls.n	800c346 <clear_lock+0xe>
	}
}
 800c36e:	bf00      	nop
 800c370:	bf00      	nop
 800c372:	3714      	adds	r7, #20
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr
 800c37c:	20003134 	.word	0x20003134

0800c380 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b086      	sub	sp, #24
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c388:	2300      	movs	r3, #0
 800c38a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	78db      	ldrb	r3, [r3, #3]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d034      	beq.n	800c3fe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c398:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	7858      	ldrb	r0, [r3, #1]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	697a      	ldr	r2, [r7, #20]
 800c3a8:	f7ff fd7c 	bl	800bea4 <disk_write>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d002      	beq.n	800c3b8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	73fb      	strb	r3, [r7, #15]
 800c3b6:	e022      	b.n	800c3fe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c2:	697a      	ldr	r2, [r7, #20]
 800c3c4:	1ad2      	subs	r2, r2, r3
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	69db      	ldr	r3, [r3, #28]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d217      	bcs.n	800c3fe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	789b      	ldrb	r3, [r3, #2]
 800c3d2:	613b      	str	r3, [r7, #16]
 800c3d4:	e010      	b.n	800c3f8 <sync_window+0x78>
					wsect += fs->fsize;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	69db      	ldr	r3, [r3, #28]
 800c3da:	697a      	ldr	r2, [r7, #20]
 800c3dc:	4413      	add	r3, r2
 800c3de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	7858      	ldrb	r0, [r3, #1]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	697a      	ldr	r2, [r7, #20]
 800c3ee:	f7ff fd59 	bl	800bea4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	613b      	str	r3, [r7, #16]
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d8eb      	bhi.n	800c3d6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c3fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c400:	4618      	mov	r0, r3
 800c402:	3718      	adds	r7, #24
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c412:	2300      	movs	r3, #0
 800c414:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c41a:	683a      	ldr	r2, [r7, #0]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d01b      	beq.n	800c458 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f7ff ffad 	bl	800c380 <sync_window>
 800c426:	4603      	mov	r3, r0
 800c428:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c42a:	7bfb      	ldrb	r3, [r7, #15]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d113      	bne.n	800c458 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	7858      	ldrb	r0, [r3, #1]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c43a:	2301      	movs	r3, #1
 800c43c:	683a      	ldr	r2, [r7, #0]
 800c43e:	f7ff fd11 	bl	800be64 <disk_read>
 800c442:	4603      	mov	r3, r0
 800c444:	2b00      	cmp	r3, #0
 800c446:	d004      	beq.n	800c452 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c448:	f04f 33ff 	mov.w	r3, #4294967295
 800c44c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c44e:	2301      	movs	r3, #1
 800c450:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	683a      	ldr	r2, [r7, #0]
 800c456:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c458:	7bfb      	ldrb	r3, [r7, #15]
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3710      	adds	r7, #16
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}

0800c462 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c462:	b480      	push	{r7}
 800c464:	b083      	sub	sp, #12
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
 800c46a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	3b02      	subs	r3, #2
 800c470:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	699b      	ldr	r3, [r3, #24]
 800c476:	3b02      	subs	r3, #2
 800c478:	683a      	ldr	r2, [r7, #0]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d301      	bcc.n	800c482 <clust2sect+0x20>
 800c47e:	2300      	movs	r3, #0
 800c480:	e008      	b.n	800c494 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	895b      	ldrh	r3, [r3, #10]
 800c486:	461a      	mov	r2, r3
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	fb03 f202 	mul.w	r2, r3, r2
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c492:	4413      	add	r3, r2
}
 800c494:	4618      	mov	r0, r3
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b086      	sub	sp, #24
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	2b01      	cmp	r3, #1
 800c4b4:	d904      	bls.n	800c4c0 <get_fat+0x20>
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	699b      	ldr	r3, [r3, #24]
 800c4ba:	683a      	ldr	r2, [r7, #0]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d302      	bcc.n	800c4c6 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	617b      	str	r3, [r7, #20]
 800c4c4:	e0bb      	b.n	800c63e <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c4c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ca:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	2b03      	cmp	r3, #3
 800c4d2:	f000 8083 	beq.w	800c5dc <get_fat+0x13c>
 800c4d6:	2b03      	cmp	r3, #3
 800c4d8:	f300 80a7 	bgt.w	800c62a <get_fat+0x18a>
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d002      	beq.n	800c4e6 <get_fat+0x46>
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	d056      	beq.n	800c592 <get_fat+0xf2>
 800c4e4:	e0a1      	b.n	800c62a <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	60fb      	str	r3, [r7, #12]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	085b      	lsrs	r3, r3, #1
 800c4ee:	68fa      	ldr	r2, [r7, #12]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	899b      	ldrh	r3, [r3, #12]
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	fbb3 f3f1 	udiv	r3, r3, r1
 800c504:	4413      	add	r3, r2
 800c506:	4619      	mov	r1, r3
 800c508:	6938      	ldr	r0, [r7, #16]
 800c50a:	f7ff ff7d 	bl	800c408 <move_window>
 800c50e:	4603      	mov	r3, r0
 800c510:	2b00      	cmp	r3, #0
 800c512:	f040 808d 	bne.w	800c630 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	1c5a      	adds	r2, r3, #1
 800c51a:	60fa      	str	r2, [r7, #12]
 800c51c:	693a      	ldr	r2, [r7, #16]
 800c51e:	8992      	ldrh	r2, [r2, #12]
 800c520:	fbb3 f1f2 	udiv	r1, r3, r2
 800c524:	fb02 f201 	mul.w	r2, r2, r1
 800c528:	1a9b      	subs	r3, r3, r2
 800c52a:	693a      	ldr	r2, [r7, #16]
 800c52c:	4413      	add	r3, r2
 800c52e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c532:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	899b      	ldrh	r3, [r3, #12]
 800c53c:	4619      	mov	r1, r3
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	fbb3 f3f1 	udiv	r3, r3, r1
 800c544:	4413      	add	r3, r2
 800c546:	4619      	mov	r1, r3
 800c548:	6938      	ldr	r0, [r7, #16]
 800c54a:	f7ff ff5d 	bl	800c408 <move_window>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d16f      	bne.n	800c634 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	899b      	ldrh	r3, [r3, #12]
 800c558:	461a      	mov	r2, r3
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c560:	fb02 f201 	mul.w	r2, r2, r1
 800c564:	1a9b      	subs	r3, r3, r2
 800c566:	693a      	ldr	r2, [r7, #16]
 800c568:	4413      	add	r3, r2
 800c56a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c56e:	021b      	lsls	r3, r3, #8
 800c570:	461a      	mov	r2, r3
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	4313      	orrs	r3, r2
 800c576:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	f003 0301 	and.w	r3, r3, #1
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d002      	beq.n	800c588 <get_fat+0xe8>
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	091b      	lsrs	r3, r3, #4
 800c586:	e002      	b.n	800c58e <get_fat+0xee>
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c58e:	617b      	str	r3, [r7, #20]
			break;
 800c590:	e055      	b.n	800c63e <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	899b      	ldrh	r3, [r3, #12]
 800c59a:	085b      	lsrs	r3, r3, #1
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	4619      	mov	r1, r3
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800c5a6:	4413      	add	r3, r2
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	6938      	ldr	r0, [r7, #16]
 800c5ac:	f7ff ff2c 	bl	800c408 <move_window>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d140      	bne.n	800c638 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	005b      	lsls	r3, r3, #1
 800c5c0:	693a      	ldr	r2, [r7, #16]
 800c5c2:	8992      	ldrh	r2, [r2, #12]
 800c5c4:	fbb3 f0f2 	udiv	r0, r3, r2
 800c5c8:	fb02 f200 	mul.w	r2, r2, r0
 800c5cc:	1a9b      	subs	r3, r3, r2
 800c5ce:	440b      	add	r3, r1
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f7ff fca5 	bl	800bf20 <ld_word>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	617b      	str	r3, [r7, #20]
			break;
 800c5da:	e030      	b.n	800c63e <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	899b      	ldrh	r3, [r3, #12]
 800c5e4:	089b      	lsrs	r3, r3, #2
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	fbb3 f3f1 	udiv	r3, r3, r1
 800c5f0:	4413      	add	r3, r2
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	6938      	ldr	r0, [r7, #16]
 800c5f6:	f7ff ff07 	bl	800c408 <move_window>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d11d      	bne.n	800c63c <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	693a      	ldr	r2, [r7, #16]
 800c60c:	8992      	ldrh	r2, [r2, #12]
 800c60e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c612:	fb02 f200 	mul.w	r2, r2, r0
 800c616:	1a9b      	subs	r3, r3, r2
 800c618:	440b      	add	r3, r1
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7ff fc98 	bl	800bf50 <ld_dword>
 800c620:	4603      	mov	r3, r0
 800c622:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c626:	617b      	str	r3, [r7, #20]
			break;
 800c628:	e009      	b.n	800c63e <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c62a:	2301      	movs	r3, #1
 800c62c:	617b      	str	r3, [r7, #20]
 800c62e:	e006      	b.n	800c63e <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c630:	bf00      	nop
 800c632:	e004      	b.n	800c63e <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c634:	bf00      	nop
 800c636:	e002      	b.n	800c63e <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c638:	bf00      	nop
 800c63a:	e000      	b.n	800c63e <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c63c:	bf00      	nop
		}
	}

	return val;
 800c63e:	697b      	ldr	r3, [r7, #20]
}
 800c640:	4618      	mov	r0, r3
 800c642:	3718      	adds	r7, #24
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c648:	b590      	push	{r4, r7, lr}
 800c64a:	b089      	sub	sp, #36	; 0x24
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	60b9      	str	r1, [r7, #8]
 800c652:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c654:	2302      	movs	r3, #2
 800c656:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	f240 8102 	bls.w	800c864 <put_fat+0x21c>
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	699b      	ldr	r3, [r3, #24]
 800c664:	68ba      	ldr	r2, [r7, #8]
 800c666:	429a      	cmp	r2, r3
 800c668:	f080 80fc 	bcs.w	800c864 <put_fat+0x21c>
		switch (fs->fs_type) {
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	2b03      	cmp	r3, #3
 800c672:	f000 80b6 	beq.w	800c7e2 <put_fat+0x19a>
 800c676:	2b03      	cmp	r3, #3
 800c678:	f300 80fd 	bgt.w	800c876 <put_fat+0x22e>
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d003      	beq.n	800c688 <put_fat+0x40>
 800c680:	2b02      	cmp	r3, #2
 800c682:	f000 8083 	beq.w	800c78c <put_fat+0x144>
 800c686:	e0f6      	b.n	800c876 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	61bb      	str	r3, [r7, #24]
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	085b      	lsrs	r3, r3, #1
 800c690:	69ba      	ldr	r2, [r7, #24]
 800c692:	4413      	add	r3, r2
 800c694:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	899b      	ldrh	r3, [r3, #12]
 800c69e:	4619      	mov	r1, r3
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800c6a6:	4413      	add	r3, r2
 800c6a8:	4619      	mov	r1, r3
 800c6aa:	68f8      	ldr	r0, [r7, #12]
 800c6ac:	f7ff feac 	bl	800c408 <move_window>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c6b4:	7ffb      	ldrb	r3, [r7, #31]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	f040 80d6 	bne.w	800c868 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c6c2:	69bb      	ldr	r3, [r7, #24]
 800c6c4:	1c5a      	adds	r2, r3, #1
 800c6c6:	61ba      	str	r2, [r7, #24]
 800c6c8:	68fa      	ldr	r2, [r7, #12]
 800c6ca:	8992      	ldrh	r2, [r2, #12]
 800c6cc:	fbb3 f0f2 	udiv	r0, r3, r2
 800c6d0:	fb02 f200 	mul.w	r2, r2, r0
 800c6d4:	1a9b      	subs	r3, r3, r2
 800c6d6:	440b      	add	r3, r1
 800c6d8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	f003 0301 	and.w	r3, r3, #1
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d00d      	beq.n	800c700 <put_fat+0xb8>
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	b25b      	sxtb	r3, r3
 800c6ea:	f003 030f 	and.w	r3, r3, #15
 800c6ee:	b25a      	sxtb	r2, r3
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	b2db      	uxtb	r3, r3
 800c6f4:	011b      	lsls	r3, r3, #4
 800c6f6:	b25b      	sxtb	r3, r3
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	b25b      	sxtb	r3, r3
 800c6fc:	b2db      	uxtb	r3, r3
 800c6fe:	e001      	b.n	800c704 <put_fat+0xbc>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	b2db      	uxtb	r3, r3
 800c704:	697a      	ldr	r2, [r7, #20]
 800c706:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2201      	movs	r2, #1
 800c70c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	899b      	ldrh	r3, [r3, #12]
 800c716:	4619      	mov	r1, r3
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c71e:	4413      	add	r3, r2
 800c720:	4619      	mov	r1, r3
 800c722:	68f8      	ldr	r0, [r7, #12]
 800c724:	f7ff fe70 	bl	800c408 <move_window>
 800c728:	4603      	mov	r3, r0
 800c72a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c72c:	7ffb      	ldrb	r3, [r7, #31]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	f040 809c 	bne.w	800c86c <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	899b      	ldrh	r3, [r3, #12]
 800c73e:	461a      	mov	r2, r3
 800c740:	69bb      	ldr	r3, [r7, #24]
 800c742:	fbb3 f0f2 	udiv	r0, r3, r2
 800c746:	fb02 f200 	mul.w	r2, r2, r0
 800c74a:	1a9b      	subs	r3, r3, r2
 800c74c:	440b      	add	r3, r1
 800c74e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	f003 0301 	and.w	r3, r3, #1
 800c756:	2b00      	cmp	r3, #0
 800c758:	d003      	beq.n	800c762 <put_fat+0x11a>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	091b      	lsrs	r3, r3, #4
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	e00e      	b.n	800c780 <put_fat+0x138>
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	b25b      	sxtb	r3, r3
 800c768:	f023 030f 	bic.w	r3, r3, #15
 800c76c:	b25a      	sxtb	r2, r3
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	0a1b      	lsrs	r3, r3, #8
 800c772:	b25b      	sxtb	r3, r3
 800c774:	f003 030f 	and.w	r3, r3, #15
 800c778:	b25b      	sxtb	r3, r3
 800c77a:	4313      	orrs	r3, r2
 800c77c:	b25b      	sxtb	r3, r3
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	697a      	ldr	r2, [r7, #20]
 800c782:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2201      	movs	r2, #1
 800c788:	70da      	strb	r2, [r3, #3]
			break;
 800c78a:	e074      	b.n	800c876 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	899b      	ldrh	r3, [r3, #12]
 800c794:	085b      	lsrs	r3, r3, #1
 800c796:	b29b      	uxth	r3, r3
 800c798:	4619      	mov	r1, r3
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	fbb3 f3f1 	udiv	r3, r3, r1
 800c7a0:	4413      	add	r3, r2
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	f7ff fe2f 	bl	800c408 <move_window>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c7ae:	7ffb      	ldrb	r3, [r7, #31]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d15d      	bne.n	800c870 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	005b      	lsls	r3, r3, #1
 800c7be:	68fa      	ldr	r2, [r7, #12]
 800c7c0:	8992      	ldrh	r2, [r2, #12]
 800c7c2:	fbb3 f0f2 	udiv	r0, r3, r2
 800c7c6:	fb02 f200 	mul.w	r2, r2, r0
 800c7ca:	1a9b      	subs	r3, r3, r2
 800c7cc:	440b      	add	r3, r1
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	b292      	uxth	r2, r2
 800c7d2:	4611      	mov	r1, r2
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7ff fbde 	bl	800bf96 <st_word>
			fs->wflag = 1;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2201      	movs	r2, #1
 800c7de:	70da      	strb	r2, [r3, #3]
			break;
 800c7e0:	e049      	b.n	800c876 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	899b      	ldrh	r3, [r3, #12]
 800c7ea:	089b      	lsrs	r3, r3, #2
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800c7f6:	4413      	add	r3, r2
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	68f8      	ldr	r0, [r7, #12]
 800c7fc:	f7ff fe04 	bl	800c408 <move_window>
 800c800:	4603      	mov	r3, r0
 800c802:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c804:	7ffb      	ldrb	r3, [r7, #31]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d134      	bne.n	800c874 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	009b      	lsls	r3, r3, #2
 800c81a:	68fa      	ldr	r2, [r7, #12]
 800c81c:	8992      	ldrh	r2, [r2, #12]
 800c81e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c822:	fb02 f200 	mul.w	r2, r2, r0
 800c826:	1a9b      	subs	r3, r3, r2
 800c828:	440b      	add	r3, r1
 800c82a:	4618      	mov	r0, r3
 800c82c:	f7ff fb90 	bl	800bf50 <ld_dword>
 800c830:	4603      	mov	r3, r0
 800c832:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c836:	4323      	orrs	r3, r4
 800c838:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	009b      	lsls	r3, r3, #2
 800c844:	68fa      	ldr	r2, [r7, #12]
 800c846:	8992      	ldrh	r2, [r2, #12]
 800c848:	fbb3 f0f2 	udiv	r0, r3, r2
 800c84c:	fb02 f200 	mul.w	r2, r2, r0
 800c850:	1a9b      	subs	r3, r3, r2
 800c852:	440b      	add	r3, r1
 800c854:	6879      	ldr	r1, [r7, #4]
 800c856:	4618      	mov	r0, r3
 800c858:	f7ff fbb8 	bl	800bfcc <st_dword>
			fs->wflag = 1;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2201      	movs	r2, #1
 800c860:	70da      	strb	r2, [r3, #3]
			break;
 800c862:	e008      	b.n	800c876 <put_fat+0x22e>
		}
	}
 800c864:	bf00      	nop
 800c866:	e006      	b.n	800c876 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c868:	bf00      	nop
 800c86a:	e004      	b.n	800c876 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c86c:	bf00      	nop
 800c86e:	e002      	b.n	800c876 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c870:	bf00      	nop
 800c872:	e000      	b.n	800c876 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c874:	bf00      	nop
	return res;
 800c876:	7ffb      	ldrb	r3, [r7, #31]
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3724      	adds	r7, #36	; 0x24
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd90      	pop	{r4, r7, pc}

0800c880 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b088      	sub	sp, #32
 800c884:	af00      	add	r7, sp, #0
 800c886:	60f8      	str	r0, [r7, #12]
 800c888:	60b9      	str	r1, [r7, #8]
 800c88a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c88c:	2300      	movs	r3, #0
 800c88e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d904      	bls.n	800c8a6 <remove_chain+0x26>
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	699b      	ldr	r3, [r3, #24]
 800c8a0:	68ba      	ldr	r2, [r7, #8]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d301      	bcc.n	800c8aa <remove_chain+0x2a>
 800c8a6:	2302      	movs	r3, #2
 800c8a8:	e04b      	b.n	800c942 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d00c      	beq.n	800c8ca <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c8b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c8b4:	6879      	ldr	r1, [r7, #4]
 800c8b6:	69b8      	ldr	r0, [r7, #24]
 800c8b8:	f7ff fec6 	bl	800c648 <put_fat>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c8c0:	7ffb      	ldrb	r3, [r7, #31]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d001      	beq.n	800c8ca <remove_chain+0x4a>
 800c8c6:	7ffb      	ldrb	r3, [r7, #31]
 800c8c8:	e03b      	b.n	800c942 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c8ca:	68b9      	ldr	r1, [r7, #8]
 800c8cc:	68f8      	ldr	r0, [r7, #12]
 800c8ce:	f7ff fde7 	bl	800c4a0 <get_fat>
 800c8d2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d031      	beq.n	800c93e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d101      	bne.n	800c8e4 <remove_chain+0x64>
 800c8e0:	2302      	movs	r3, #2
 800c8e2:	e02e      	b.n	800c942 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ea:	d101      	bne.n	800c8f0 <remove_chain+0x70>
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	e028      	b.n	800c942 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	68b9      	ldr	r1, [r7, #8]
 800c8f4:	69b8      	ldr	r0, [r7, #24]
 800c8f6:	f7ff fea7 	bl	800c648 <put_fat>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c8fe:	7ffb      	ldrb	r3, [r7, #31]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d001      	beq.n	800c908 <remove_chain+0x88>
 800c904:	7ffb      	ldrb	r3, [r7, #31]
 800c906:	e01c      	b.n	800c942 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c908:	69bb      	ldr	r3, [r7, #24]
 800c90a:	695a      	ldr	r2, [r3, #20]
 800c90c:	69bb      	ldr	r3, [r7, #24]
 800c90e:	699b      	ldr	r3, [r3, #24]
 800c910:	3b02      	subs	r3, #2
 800c912:	429a      	cmp	r2, r3
 800c914:	d20b      	bcs.n	800c92e <remove_chain+0xae>
			fs->free_clst++;
 800c916:	69bb      	ldr	r3, [r7, #24]
 800c918:	695b      	ldr	r3, [r3, #20]
 800c91a:	1c5a      	adds	r2, r3, #1
 800c91c:	69bb      	ldr	r3, [r7, #24]
 800c91e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	791b      	ldrb	r3, [r3, #4]
 800c924:	f043 0301 	orr.w	r3, r3, #1
 800c928:	b2da      	uxtb	r2, r3
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	699b      	ldr	r3, [r3, #24]
 800c936:	68ba      	ldr	r2, [r7, #8]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d3c6      	bcc.n	800c8ca <remove_chain+0x4a>
 800c93c:	e000      	b.n	800c940 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c93e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c940:	2300      	movs	r3, #0
}
 800c942:	4618      	mov	r0, r3
 800c944:	3720      	adds	r7, #32
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b088      	sub	sp, #32
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
 800c952:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d10d      	bne.n	800c97c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	691b      	ldr	r3, [r3, #16]
 800c964:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d004      	beq.n	800c976 <create_chain+0x2c>
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	699b      	ldr	r3, [r3, #24]
 800c970:	69ba      	ldr	r2, [r7, #24]
 800c972:	429a      	cmp	r2, r3
 800c974:	d31b      	bcc.n	800c9ae <create_chain+0x64>
 800c976:	2301      	movs	r3, #1
 800c978:	61bb      	str	r3, [r7, #24]
 800c97a:	e018      	b.n	800c9ae <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c97c:	6839      	ldr	r1, [r7, #0]
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f7ff fd8e 	bl	800c4a0 <get_fat>
 800c984:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	2b01      	cmp	r3, #1
 800c98a:	d801      	bhi.n	800c990 <create_chain+0x46>
 800c98c:	2301      	movs	r3, #1
 800c98e:	e070      	b.n	800ca72 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c996:	d101      	bne.n	800c99c <create_chain+0x52>
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	e06a      	b.n	800ca72 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	699b      	ldr	r3, [r3, #24]
 800c9a0:	68fa      	ldr	r2, [r7, #12]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d201      	bcs.n	800c9aa <create_chain+0x60>
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	e063      	b.n	800ca72 <create_chain+0x128>
		scl = clst;
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	699b      	ldr	r3, [r3, #24]
 800c9bc:	69fa      	ldr	r2, [r7, #28]
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d307      	bcc.n	800c9d2 <create_chain+0x88>
				ncl = 2;
 800c9c2:	2302      	movs	r3, #2
 800c9c4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c9c6:	69fa      	ldr	r2, [r7, #28]
 800c9c8:	69bb      	ldr	r3, [r7, #24]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d901      	bls.n	800c9d2 <create_chain+0x88>
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	e04f      	b.n	800ca72 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c9d2:	69f9      	ldr	r1, [r7, #28]
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f7ff fd63 	bl	800c4a0 <get_fat>
 800c9da:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d00e      	beq.n	800ca00 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d003      	beq.n	800c9f0 <create_chain+0xa6>
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ee:	d101      	bne.n	800c9f4 <create_chain+0xaa>
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	e03e      	b.n	800ca72 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c9f4:	69fa      	ldr	r2, [r7, #28]
 800c9f6:	69bb      	ldr	r3, [r7, #24]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d1da      	bne.n	800c9b2 <create_chain+0x68>
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	e038      	b.n	800ca72 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ca00:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ca02:	f04f 32ff 	mov.w	r2, #4294967295
 800ca06:	69f9      	ldr	r1, [r7, #28]
 800ca08:	6938      	ldr	r0, [r7, #16]
 800ca0a:	f7ff fe1d 	bl	800c648 <put_fat>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ca12:	7dfb      	ldrb	r3, [r7, #23]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d109      	bne.n	800ca2c <create_chain+0xe2>
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d006      	beq.n	800ca2c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ca1e:	69fa      	ldr	r2, [r7, #28]
 800ca20:	6839      	ldr	r1, [r7, #0]
 800ca22:	6938      	ldr	r0, [r7, #16]
 800ca24:	f7ff fe10 	bl	800c648 <put_fat>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ca2c:	7dfb      	ldrb	r3, [r7, #23]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d116      	bne.n	800ca60 <create_chain+0x116>
		fs->last_clst = ncl;
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	69fa      	ldr	r2, [r7, #28]
 800ca36:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	695a      	ldr	r2, [r3, #20]
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	699b      	ldr	r3, [r3, #24]
 800ca40:	3b02      	subs	r3, #2
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d804      	bhi.n	800ca50 <create_chain+0x106>
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	695b      	ldr	r3, [r3, #20]
 800ca4a:	1e5a      	subs	r2, r3, #1
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	791b      	ldrb	r3, [r3, #4]
 800ca54:	f043 0301 	orr.w	r3, r3, #1
 800ca58:	b2da      	uxtb	r2, r3
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	711a      	strb	r2, [r3, #4]
 800ca5e:	e007      	b.n	800ca70 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ca60:	7dfb      	ldrb	r3, [r7, #23]
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d102      	bne.n	800ca6c <create_chain+0x122>
 800ca66:	f04f 33ff 	mov.w	r3, #4294967295
 800ca6a:	e000      	b.n	800ca6e <create_chain+0x124>
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ca70:	69fb      	ldr	r3, [r7, #28]
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3720      	adds	r7, #32
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b086      	sub	sp, #24
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
 800ca82:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca90:	d204      	bcs.n	800ca9c <dir_sdi+0x22>
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	f003 031f 	and.w	r3, r3, #31
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d001      	beq.n	800caa0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ca9c:	2302      	movs	r3, #2
 800ca9e:	e071      	b.n	800cb84 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	683a      	ldr	r2, [r7, #0]
 800caa4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	689b      	ldr	r3, [r3, #8]
 800caaa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d106      	bne.n	800cac0 <dir_sdi+0x46>
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	2b02      	cmp	r3, #2
 800cab8:	d902      	bls.n	800cac0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cabe:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d10c      	bne.n	800cae0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	095b      	lsrs	r3, r3, #5
 800caca:	693a      	ldr	r2, [r7, #16]
 800cacc:	8912      	ldrh	r2, [r2, #8]
 800cace:	4293      	cmp	r3, r2
 800cad0:	d301      	bcc.n	800cad6 <dir_sdi+0x5c>
 800cad2:	2302      	movs	r3, #2
 800cad4:	e056      	b.n	800cb84 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	61da      	str	r2, [r3, #28]
 800cade:	e02d      	b.n	800cb3c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	895b      	ldrh	r3, [r3, #10]
 800cae4:	461a      	mov	r2, r3
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	899b      	ldrh	r3, [r3, #12]
 800caea:	fb03 f302 	mul.w	r3, r3, r2
 800caee:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800caf0:	e019      	b.n	800cb26 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6979      	ldr	r1, [r7, #20]
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7ff fcd2 	bl	800c4a0 <get_fat>
 800cafc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb04:	d101      	bne.n	800cb0a <dir_sdi+0x90>
 800cb06:	2301      	movs	r3, #1
 800cb08:	e03c      	b.n	800cb84 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d904      	bls.n	800cb1a <dir_sdi+0xa0>
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	699b      	ldr	r3, [r3, #24]
 800cb14:	697a      	ldr	r2, [r7, #20]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d301      	bcc.n	800cb1e <dir_sdi+0xa4>
 800cb1a:	2302      	movs	r3, #2
 800cb1c:	e032      	b.n	800cb84 <dir_sdi+0x10a>
			ofs -= csz;
 800cb1e:	683a      	ldr	r2, [r7, #0]
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	1ad3      	subs	r3, r2, r3
 800cb24:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cb26:	683a      	ldr	r2, [r7, #0]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d2e1      	bcs.n	800caf2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800cb2e:	6979      	ldr	r1, [r7, #20]
 800cb30:	6938      	ldr	r0, [r7, #16]
 800cb32:	f7ff fc96 	bl	800c462 <clust2sect>
 800cb36:	4602      	mov	r2, r0
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	697a      	ldr	r2, [r7, #20]
 800cb40:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	69db      	ldr	r3, [r3, #28]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d101      	bne.n	800cb4e <dir_sdi+0xd4>
 800cb4a:	2302      	movs	r3, #2
 800cb4c:	e01a      	b.n	800cb84 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	69da      	ldr	r2, [r3, #28]
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	899b      	ldrh	r3, [r3, #12]
 800cb56:	4619      	mov	r1, r3
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	fbb3 f3f1 	udiv	r3, r3, r1
 800cb5e:	441a      	add	r2, r3
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	899b      	ldrh	r3, [r3, #12]
 800cb6e:	461a      	mov	r2, r3
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	fbb3 f0f2 	udiv	r0, r3, r2
 800cb76:	fb02 f200 	mul.w	r2, r2, r0
 800cb7a:	1a9b      	subs	r3, r3, r2
 800cb7c:	18ca      	adds	r2, r1, r3
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cb82:	2300      	movs	r3, #0
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3718      	adds	r7, #24
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b086      	sub	sp, #24
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	695b      	ldr	r3, [r3, #20]
 800cba0:	3320      	adds	r3, #32
 800cba2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	69db      	ldr	r3, [r3, #28]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d003      	beq.n	800cbb4 <dir_next+0x28>
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cbb2:	d301      	bcc.n	800cbb8 <dir_next+0x2c>
 800cbb4:	2304      	movs	r3, #4
 800cbb6:	e0bb      	b.n	800cd30 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	899b      	ldrh	r3, [r3, #12]
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	fbb3 f1f2 	udiv	r1, r3, r2
 800cbc4:	fb02 f201 	mul.w	r2, r2, r1
 800cbc8:	1a9b      	subs	r3, r3, r2
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	f040 809d 	bne.w	800cd0a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	69db      	ldr	r3, [r3, #28]
 800cbd4:	1c5a      	adds	r2, r3, #1
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	699b      	ldr	r3, [r3, #24]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d10b      	bne.n	800cbfa <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	095b      	lsrs	r3, r3, #5
 800cbe6:	68fa      	ldr	r2, [r7, #12]
 800cbe8:	8912      	ldrh	r2, [r2, #8]
 800cbea:	4293      	cmp	r3, r2
 800cbec:	f0c0 808d 	bcc.w	800cd0a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	61da      	str	r2, [r3, #28]
 800cbf6:	2304      	movs	r3, #4
 800cbf8:	e09a      	b.n	800cd30 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	899b      	ldrh	r3, [r3, #12]
 800cbfe:	461a      	mov	r2, r3
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	8952      	ldrh	r2, [r2, #10]
 800cc0a:	3a01      	subs	r2, #1
 800cc0c:	4013      	ands	r3, r2
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d17b      	bne.n	800cd0a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	699b      	ldr	r3, [r3, #24]
 800cc18:	4619      	mov	r1, r3
 800cc1a:	4610      	mov	r0, r2
 800cc1c:	f7ff fc40 	bl	800c4a0 <get_fat>
 800cc20:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d801      	bhi.n	800cc2c <dir_next+0xa0>
 800cc28:	2302      	movs	r3, #2
 800cc2a:	e081      	b.n	800cd30 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc32:	d101      	bne.n	800cc38 <dir_next+0xac>
 800cc34:	2301      	movs	r3, #1
 800cc36:	e07b      	b.n	800cd30 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	699b      	ldr	r3, [r3, #24]
 800cc3c:	697a      	ldr	r2, [r7, #20]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d359      	bcc.n	800ccf6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d104      	bne.n	800cc52 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	61da      	str	r2, [r3, #28]
 800cc4e:	2304      	movs	r3, #4
 800cc50:	e06e      	b.n	800cd30 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	699b      	ldr	r3, [r3, #24]
 800cc58:	4619      	mov	r1, r3
 800cc5a:	4610      	mov	r0, r2
 800cc5c:	f7ff fe75 	bl	800c94a <create_chain>
 800cc60:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d101      	bne.n	800cc6c <dir_next+0xe0>
 800cc68:	2307      	movs	r3, #7
 800cc6a:	e061      	b.n	800cd30 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	d101      	bne.n	800cc76 <dir_next+0xea>
 800cc72:	2302      	movs	r3, #2
 800cc74:	e05c      	b.n	800cd30 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc7c:	d101      	bne.n	800cc82 <dir_next+0xf6>
 800cc7e:	2301      	movs	r3, #1
 800cc80:	e056      	b.n	800cd30 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cc82:	68f8      	ldr	r0, [r7, #12]
 800cc84:	f7ff fb7c 	bl	800c380 <sync_window>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d001      	beq.n	800cc92 <dir_next+0x106>
 800cc8e:	2301      	movs	r3, #1
 800cc90:	e04e      	b.n	800cd30 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	899b      	ldrh	r3, [r3, #12]
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	2100      	movs	r1, #0
 800cca0:	f7ff f9e1 	bl	800c066 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cca4:	2300      	movs	r3, #0
 800cca6:	613b      	str	r3, [r7, #16]
 800cca8:	6979      	ldr	r1, [r7, #20]
 800ccaa:	68f8      	ldr	r0, [r7, #12]
 800ccac:	f7ff fbd9 	bl	800c462 <clust2sect>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	631a      	str	r2, [r3, #48]	; 0x30
 800ccb6:	e012      	b.n	800ccde <dir_next+0x152>
						fs->wflag = 1;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2201      	movs	r2, #1
 800ccbc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ccbe:	68f8      	ldr	r0, [r7, #12]
 800ccc0:	f7ff fb5e 	bl	800c380 <sync_window>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d001      	beq.n	800ccce <dir_next+0x142>
 800ccca:	2301      	movs	r3, #1
 800cccc:	e030      	b.n	800cd30 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	613b      	str	r3, [r7, #16]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccd8:	1c5a      	adds	r2, r3, #1
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	631a      	str	r2, [r3, #48]	; 0x30
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	895b      	ldrh	r3, [r3, #10]
 800cce2:	461a      	mov	r2, r3
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d3e6      	bcc.n	800ccb8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	1ad2      	subs	r2, r2, r3
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	697a      	ldr	r2, [r7, #20]
 800ccfa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ccfc:	6979      	ldr	r1, [r7, #20]
 800ccfe:	68f8      	ldr	r0, [r7, #12]
 800cd00:	f7ff fbaf 	bl	800c462 <clust2sect>
 800cd04:	4602      	mov	r2, r0
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	68ba      	ldr	r2, [r7, #8]
 800cd0e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	899b      	ldrh	r3, [r3, #12]
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	fbb3 f0f2 	udiv	r0, r3, r2
 800cd22:	fb02 f200 	mul.w	r2, r2, r0
 800cd26:	1a9b      	subs	r3, r3, r2
 800cd28:	18ca      	adds	r2, r1, r3
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cd2e:	2300      	movs	r3, #0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3718      	adds	r7, #24
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b086      	sub	sp, #24
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cd48:	2100      	movs	r1, #0
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f7ff fe95 	bl	800ca7a <dir_sdi>
 800cd50:	4603      	mov	r3, r0
 800cd52:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cd54:	7dfb      	ldrb	r3, [r7, #23]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d12b      	bne.n	800cdb2 <dir_alloc+0x7a>
		n = 0;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	69db      	ldr	r3, [r3, #28]
 800cd62:	4619      	mov	r1, r3
 800cd64:	68f8      	ldr	r0, [r7, #12]
 800cd66:	f7ff fb4f 	bl	800c408 <move_window>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cd6e:	7dfb      	ldrb	r3, [r7, #23]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d11d      	bne.n	800cdb0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6a1b      	ldr	r3, [r3, #32]
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	2be5      	cmp	r3, #229	; 0xe5
 800cd7c:	d004      	beq.n	800cd88 <dir_alloc+0x50>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a1b      	ldr	r3, [r3, #32]
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d107      	bne.n	800cd98 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	613b      	str	r3, [r7, #16]
 800cd8e:	693a      	ldr	r2, [r7, #16]
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d102      	bne.n	800cd9c <dir_alloc+0x64>
 800cd96:	e00c      	b.n	800cdb2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cd98:	2300      	movs	r3, #0
 800cd9a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cd9c:	2101      	movs	r1, #1
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f7ff fef4 	bl	800cb8c <dir_next>
 800cda4:	4603      	mov	r3, r0
 800cda6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cda8:	7dfb      	ldrb	r3, [r7, #23]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d0d7      	beq.n	800cd5e <dir_alloc+0x26>
 800cdae:	e000      	b.n	800cdb2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cdb0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cdb2:	7dfb      	ldrb	r3, [r7, #23]
 800cdb4:	2b04      	cmp	r3, #4
 800cdb6:	d101      	bne.n	800cdbc <dir_alloc+0x84>
 800cdb8:	2307      	movs	r3, #7
 800cdba:	75fb      	strb	r3, [r7, #23]
	return res;
 800cdbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3718      	adds	r7, #24
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}

0800cdc6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cdc6:	b580      	push	{r7, lr}
 800cdc8:	b084      	sub	sp, #16
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
 800cdce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	331a      	adds	r3, #26
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7ff f8a3 	bl	800bf20 <ld_word>
 800cdda:	4603      	mov	r3, r0
 800cddc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	2b03      	cmp	r3, #3
 800cde4:	d109      	bne.n	800cdfa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	3314      	adds	r3, #20
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7ff f898 	bl	800bf20 <ld_word>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	041b      	lsls	r3, r3, #16
 800cdf4:	68fa      	ldr	r2, [r7, #12]
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3710      	adds	r7, #16
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}

0800ce04 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	331a      	adds	r3, #26
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	b292      	uxth	r2, r2
 800ce18:	4611      	mov	r1, r2
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7ff f8bb 	bl	800bf96 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	2b03      	cmp	r3, #3
 800ce26:	d109      	bne.n	800ce3c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	f103 0214 	add.w	r2, r3, #20
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	0c1b      	lsrs	r3, r3, #16
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	4619      	mov	r1, r3
 800ce36:	4610      	mov	r0, r2
 800ce38:	f7ff f8ad 	bl	800bf96 <st_word>
	}
}
 800ce3c:	bf00      	nop
 800ce3e:	3710      	adds	r7, #16
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}

0800ce44 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b086      	sub	sp, #24
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ce52:	2100      	movs	r1, #0
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f7ff fe10 	bl	800ca7a <dir_sdi>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ce5e:	7dfb      	ldrb	r3, [r7, #23]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d001      	beq.n	800ce68 <dir_find+0x24>
 800ce64:	7dfb      	ldrb	r3, [r7, #23]
 800ce66:	e03e      	b.n	800cee6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	69db      	ldr	r3, [r3, #28]
 800ce6c:	4619      	mov	r1, r3
 800ce6e:	6938      	ldr	r0, [r7, #16]
 800ce70:	f7ff faca 	bl	800c408 <move_window>
 800ce74:	4603      	mov	r3, r0
 800ce76:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ce78:	7dfb      	ldrb	r3, [r7, #23]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d12f      	bne.n	800cede <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6a1b      	ldr	r3, [r3, #32]
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ce86:	7bfb      	ldrb	r3, [r7, #15]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d102      	bne.n	800ce92 <dir_find+0x4e>
 800ce8c:	2304      	movs	r3, #4
 800ce8e:	75fb      	strb	r3, [r7, #23]
 800ce90:	e028      	b.n	800cee4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6a1b      	ldr	r3, [r3, #32]
 800ce96:	330b      	adds	r3, #11
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce9e:	b2da      	uxtb	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6a1b      	ldr	r3, [r3, #32]
 800cea8:	330b      	adds	r3, #11
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	f003 0308 	and.w	r3, r3, #8
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d10a      	bne.n	800ceca <dir_find+0x86>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6a18      	ldr	r0, [r3, #32]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	3324      	adds	r3, #36	; 0x24
 800cebc:	220b      	movs	r2, #11
 800cebe:	4619      	mov	r1, r3
 800cec0:	f7ff f8ec 	bl	800c09c <mem_cmp>
 800cec4:	4603      	mov	r3, r0
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d00b      	beq.n	800cee2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ceca:	2100      	movs	r1, #0
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f7ff fe5d 	bl	800cb8c <dir_next>
 800ced2:	4603      	mov	r3, r0
 800ced4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ced6:	7dfb      	ldrb	r3, [r7, #23]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d0c5      	beq.n	800ce68 <dir_find+0x24>
 800cedc:	e002      	b.n	800cee4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800cede:	bf00      	nop
 800cee0:	e000      	b.n	800cee4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cee2:	bf00      	nop

	return res;
 800cee4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3718      	adds	r7, #24
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b084      	sub	sp, #16
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800cefc:	2101      	movs	r1, #1
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f7ff ff1a 	bl	800cd38 <dir_alloc>
 800cf04:	4603      	mov	r3, r0
 800cf06:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cf08:	7bfb      	ldrb	r3, [r7, #15]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d11c      	bne.n	800cf48 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	69db      	ldr	r3, [r3, #28]
 800cf12:	4619      	mov	r1, r3
 800cf14:	68b8      	ldr	r0, [r7, #8]
 800cf16:	f7ff fa77 	bl	800c408 <move_window>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cf1e:	7bfb      	ldrb	r3, [r7, #15]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d111      	bne.n	800cf48 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6a1b      	ldr	r3, [r3, #32]
 800cf28:	2220      	movs	r2, #32
 800cf2a:	2100      	movs	r1, #0
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7ff f89a 	bl	800c066 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6a18      	ldr	r0, [r3, #32]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	3324      	adds	r3, #36	; 0x24
 800cf3a:	220b      	movs	r2, #11
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	f7ff f871 	bl	800c024 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	2201      	movs	r2, #1
 800cf46:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cf48:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3710      	adds	r7, #16
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}
	...

0800cf54 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b08a      	sub	sp, #40	; 0x28
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	617b      	str	r3, [r7, #20]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	3324      	adds	r3, #36	; 0x24
 800cf68:	613b      	str	r3, [r7, #16]
	mem_set(sfn, ' ', 11);
 800cf6a:	220b      	movs	r2, #11
 800cf6c:	2120      	movs	r1, #32
 800cf6e:	6938      	ldr	r0, [r7, #16]
 800cf70:	f7ff f879 	bl	800c066 <mem_set>
	si = i = 0; ni = 8;
 800cf74:	2300      	movs	r3, #0
 800cf76:	61bb      	str	r3, [r7, #24]
 800cf78:	69bb      	ldr	r3, [r7, #24]
 800cf7a:	61fb      	str	r3, [r7, #28]
 800cf7c:	2308      	movs	r3, #8
 800cf7e:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	1c5a      	adds	r2, r3, #1
 800cf84:	61fa      	str	r2, [r7, #28]
 800cf86:	697a      	ldr	r2, [r7, #20]
 800cf88:	4413      	add	r3, r2
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cf90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf94:	2b20      	cmp	r3, #32
 800cf96:	f240 8083 	bls.w	800d0a0 <create_name+0x14c>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800cf9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf9e:	2b2f      	cmp	r3, #47	; 0x2f
 800cfa0:	d007      	beq.n	800cfb2 <create_name+0x5e>
 800cfa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfa6:	2b5c      	cmp	r3, #92	; 0x5c
 800cfa8:	d110      	bne.n	800cfcc <create_name+0x78>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cfaa:	e002      	b.n	800cfb2 <create_name+0x5e>
 800cfac:	69fb      	ldr	r3, [r7, #28]
 800cfae:	3301      	adds	r3, #1
 800cfb0:	61fb      	str	r3, [r7, #28]
 800cfb2:	697a      	ldr	r2, [r7, #20]
 800cfb4:	69fb      	ldr	r3, [r7, #28]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	2b2f      	cmp	r3, #47	; 0x2f
 800cfbc:	d0f6      	beq.n	800cfac <create_name+0x58>
 800cfbe:	697a      	ldr	r2, [r7, #20]
 800cfc0:	69fb      	ldr	r3, [r7, #28]
 800cfc2:	4413      	add	r3, r2
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	2b5c      	cmp	r3, #92	; 0x5c
 800cfc8:	d0f0      	beq.n	800cfac <create_name+0x58>
			break;
 800cfca:	e06a      	b.n	800d0a2 <create_name+0x14e>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800cfcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfd0:	2b2e      	cmp	r3, #46	; 0x2e
 800cfd2:	d003      	beq.n	800cfdc <create_name+0x88>
 800cfd4:	69ba      	ldr	r2, [r7, #24]
 800cfd6:	6a3b      	ldr	r3, [r7, #32]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d30d      	bcc.n	800cff8 <create_name+0xa4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800cfdc:	6a3b      	ldr	r3, [r7, #32]
 800cfde:	2b0b      	cmp	r3, #11
 800cfe0:	d003      	beq.n	800cfea <create_name+0x96>
 800cfe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfe6:	2b2e      	cmp	r3, #46	; 0x2e
 800cfe8:	d001      	beq.n	800cfee <create_name+0x9a>
 800cfea:	2306      	movs	r3, #6
 800cfec:	e075      	b.n	800d0da <create_name+0x186>
			i = 8; ni = 11;				/* Goto extension */
 800cfee:	2308      	movs	r3, #8
 800cff0:	61bb      	str	r3, [r7, #24]
 800cff2:	230b      	movs	r3, #11
 800cff4:	623b      	str	r3, [r7, #32]
			continue;
 800cff6:	e052      	b.n	800d09e <create_name+0x14a>
#if !_DF1S
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false at SBCS cfg.) */
 800cff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cffc:	2b80      	cmp	r3, #128	; 0x80
 800cffe:	d92e      	bls.n	800d05e <create_name+0x10a>
 800d000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d004:	2bff      	cmp	r3, #255	; 0xff
 800d006:	d02a      	beq.n	800d05e <create_name+0x10a>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 800d008:	69fb      	ldr	r3, [r7, #28]
 800d00a:	1c5a      	adds	r2, r3, #1
 800d00c:	61fa      	str	r2, [r7, #28]
 800d00e:	697a      	ldr	r2, [r7, #20]
 800d010:	4413      	add	r3, r2
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	73fb      	strb	r3, [r7, #15]
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 800d016:	7bfb      	ldrb	r3, [r7, #15]
 800d018:	2b3f      	cmp	r3, #63	; 0x3f
 800d01a:	d902      	bls.n	800d022 <create_name+0xce>
 800d01c:	7bfb      	ldrb	r3, [r7, #15]
 800d01e:	2b7e      	cmp	r3, #126	; 0x7e
 800d020:	d906      	bls.n	800d030 <create_name+0xdc>
 800d022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d026:	2b00      	cmp	r3, #0
 800d028:	da07      	bge.n	800d03a <create_name+0xe6>
 800d02a:	7bfb      	ldrb	r3, [r7, #15]
 800d02c:	2bff      	cmp	r3, #255	; 0xff
 800d02e:	d004      	beq.n	800d03a <create_name+0xe6>
 800d030:	6a3b      	ldr	r3, [r7, #32]
 800d032:	3b01      	subs	r3, #1
 800d034:	69ba      	ldr	r2, [r7, #24]
 800d036:	429a      	cmp	r2, r3
 800d038:	d301      	bcc.n	800d03e <create_name+0xea>
 800d03a:	2306      	movs	r3, #6
 800d03c:	e04d      	b.n	800d0da <create_name+0x186>
			sfn[i++] = c;
 800d03e:	69bb      	ldr	r3, [r7, #24]
 800d040:	1c5a      	adds	r2, r3, #1
 800d042:	61ba      	str	r2, [r7, #24]
 800d044:	693a      	ldr	r2, [r7, #16]
 800d046:	4413      	add	r3, r2
 800d048:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d04c:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	1c5a      	adds	r2, r3, #1
 800d052:	61ba      	str	r2, [r7, #24]
 800d054:	693a      	ldr	r2, [r7, #16]
 800d056:	4413      	add	r3, r2
 800d058:	7bfa      	ldrb	r2, [r7, #15]
 800d05a:	701a      	strb	r2, [r3, #0]
 800d05c:	e01f      	b.n	800d09e <create_name+0x14a>
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d05e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d062:	4619      	mov	r1, r3
 800d064:	481f      	ldr	r0, [pc, #124]	; (800d0e4 <create_name+0x190>)
 800d066:	f7ff f840 	bl	800c0ea <chk_chr>
 800d06a:	4603      	mov	r3, r0
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d001      	beq.n	800d074 <create_name+0x120>
 800d070:	2306      	movs	r3, #6
 800d072:	e032      	b.n	800d0da <create_name+0x186>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d078:	2b60      	cmp	r3, #96	; 0x60
 800d07a:	d908      	bls.n	800d08e <create_name+0x13a>
 800d07c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d080:	2b7a      	cmp	r3, #122	; 0x7a
 800d082:	d804      	bhi.n	800d08e <create_name+0x13a>
 800d084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d088:	3b20      	subs	r3, #32
 800d08a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 800d08e:	69bb      	ldr	r3, [r7, #24]
 800d090:	1c5a      	adds	r2, r3, #1
 800d092:	61ba      	str	r2, [r7, #24]
 800d094:	693a      	ldr	r2, [r7, #16]
 800d096:	4413      	add	r3, r2
 800d098:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d09c:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d09e:	e76f      	b.n	800cf80 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d0a0:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d0a2:	697a      	ldr	r2, [r7, #20]
 800d0a4:	69fb      	ldr	r3, [r7, #28]
 800d0a6:	441a      	add	r2, r3
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d0ac:	69bb      	ldr	r3, [r7, #24]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d101      	bne.n	800d0b6 <create_name+0x162>
 800d0b2:	2306      	movs	r3, #6
 800d0b4:	e011      	b.n	800d0da <create_name+0x186>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	2be5      	cmp	r3, #229	; 0xe5
 800d0bc:	d102      	bne.n	800d0c4 <create_name+0x170>
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	2205      	movs	r2, #5
 800d0c2:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d0c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0c8:	2b20      	cmp	r3, #32
 800d0ca:	d801      	bhi.n	800d0d0 <create_name+0x17c>
 800d0cc:	2204      	movs	r2, #4
 800d0ce:	e000      	b.n	800d0d2 <create_name+0x17e>
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	330b      	adds	r3, #11
 800d0d6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d0d8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3728      	adds	r7, #40	; 0x28
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}
 800d0e2:	bf00      	nop
 800d0e4:	0800fa04 	.word	0x0800fa04

0800d0e8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b086      	sub	sp, #24
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d0fc:	e002      	b.n	800d104 <follow_path+0x1c>
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	3301      	adds	r3, #1
 800d102:	603b      	str	r3, [r7, #0]
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	2b2f      	cmp	r3, #47	; 0x2f
 800d10a:	d0f8      	beq.n	800d0fe <follow_path+0x16>
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	2b5c      	cmp	r3, #92	; 0x5c
 800d112:	d0f4      	beq.n	800d0fe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	2200      	movs	r2, #0
 800d118:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	2b1f      	cmp	r3, #31
 800d120:	d80a      	bhi.n	800d138 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2280      	movs	r2, #128	; 0x80
 800d126:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d12a:	2100      	movs	r1, #0
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f7ff fca4 	bl	800ca7a <dir_sdi>
 800d132:	4603      	mov	r3, r0
 800d134:	75fb      	strb	r3, [r7, #23]
 800d136:	e048      	b.n	800d1ca <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d138:	463b      	mov	r3, r7
 800d13a:	4619      	mov	r1, r3
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f7ff ff09 	bl	800cf54 <create_name>
 800d142:	4603      	mov	r3, r0
 800d144:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d146:	7dfb      	ldrb	r3, [r7, #23]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d139      	bne.n	800d1c0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f7ff fe79 	bl	800ce44 <dir_find>
 800d152:	4603      	mov	r3, r0
 800d154:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d15c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d15e:	7dfb      	ldrb	r3, [r7, #23]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d00a      	beq.n	800d17a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d164:	7dfb      	ldrb	r3, [r7, #23]
 800d166:	2b04      	cmp	r3, #4
 800d168:	d12c      	bne.n	800d1c4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d16a:	7afb      	ldrb	r3, [r7, #11]
 800d16c:	f003 0304 	and.w	r3, r3, #4
 800d170:	2b00      	cmp	r3, #0
 800d172:	d127      	bne.n	800d1c4 <follow_path+0xdc>
 800d174:	2305      	movs	r3, #5
 800d176:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d178:	e024      	b.n	800d1c4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d17a:	7afb      	ldrb	r3, [r7, #11]
 800d17c:	f003 0304 	and.w	r3, r3, #4
 800d180:	2b00      	cmp	r3, #0
 800d182:	d121      	bne.n	800d1c8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	799b      	ldrb	r3, [r3, #6]
 800d188:	f003 0310 	and.w	r3, r3, #16
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d102      	bne.n	800d196 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d190:	2305      	movs	r3, #5
 800d192:	75fb      	strb	r3, [r7, #23]
 800d194:	e019      	b.n	800d1ca <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	695b      	ldr	r3, [r3, #20]
 800d1a0:	68fa      	ldr	r2, [r7, #12]
 800d1a2:	8992      	ldrh	r2, [r2, #12]
 800d1a4:	fbb3 f0f2 	udiv	r0, r3, r2
 800d1a8:	fb02 f200 	mul.w	r2, r2, r0
 800d1ac:	1a9b      	subs	r3, r3, r2
 800d1ae:	440b      	add	r3, r1
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	68f8      	ldr	r0, [r7, #12]
 800d1b4:	f7ff fe07 	bl	800cdc6 <ld_clust>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d1be:	e7bb      	b.n	800d138 <follow_path+0x50>
			if (res != FR_OK) break;
 800d1c0:	bf00      	nop
 800d1c2:	e002      	b.n	800d1ca <follow_path+0xe2>
				break;
 800d1c4:	bf00      	nop
 800d1c6:	e000      	b.n	800d1ca <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d1c8:	bf00      	nop
			}
		}
	}

	return res;
 800d1ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3718      	adds	r7, #24
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b087      	sub	sp, #28
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d1dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d1e0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d031      	beq.n	800d24e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	617b      	str	r3, [r7, #20]
 800d1f0:	e002      	b.n	800d1f8 <get_ldnumber+0x24>
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	617b      	str	r3, [r7, #20]
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	2b20      	cmp	r3, #32
 800d1fe:	d903      	bls.n	800d208 <get_ldnumber+0x34>
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	2b3a      	cmp	r3, #58	; 0x3a
 800d206:	d1f4      	bne.n	800d1f2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	2b3a      	cmp	r3, #58	; 0x3a
 800d20e:	d11c      	bne.n	800d24a <get_ldnumber+0x76>
			tp = *path;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	1c5a      	adds	r2, r3, #1
 800d21a:	60fa      	str	r2, [r7, #12]
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	3b30      	subs	r3, #48	; 0x30
 800d220:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	2b09      	cmp	r3, #9
 800d226:	d80e      	bhi.n	800d246 <get_ldnumber+0x72>
 800d228:	68fa      	ldr	r2, [r7, #12]
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d10a      	bne.n	800d246 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d107      	bne.n	800d246 <get_ldnumber+0x72>
					vol = (int)i;
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	3301      	adds	r3, #1
 800d23e:	617b      	str	r3, [r7, #20]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	697a      	ldr	r2, [r7, #20]
 800d244:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	e002      	b.n	800d250 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d24a:	2300      	movs	r3, #0
 800d24c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d24e:	693b      	ldr	r3, [r7, #16]
}
 800d250:	4618      	mov	r0, r3
 800d252:	371c      	adds	r7, #28
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr

0800d25c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2200      	movs	r2, #0
 800d26a:	70da      	strb	r2, [r3, #3]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f04f 32ff 	mov.w	r2, #4294967295
 800d272:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d274:	6839      	ldr	r1, [r7, #0]
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f7ff f8c6 	bl	800c408 <move_window>
 800d27c:	4603      	mov	r3, r0
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d001      	beq.n	800d286 <check_fs+0x2a>
 800d282:	2304      	movs	r3, #4
 800d284:	e038      	b.n	800d2f8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	3334      	adds	r3, #52	; 0x34
 800d28a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d28e:	4618      	mov	r0, r3
 800d290:	f7fe fe46 	bl	800bf20 <ld_word>
 800d294:	4603      	mov	r3, r0
 800d296:	461a      	mov	r2, r3
 800d298:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d001      	beq.n	800d2a4 <check_fs+0x48>
 800d2a0:	2303      	movs	r3, #3
 800d2a2:	e029      	b.n	800d2f8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d2aa:	2be9      	cmp	r3, #233	; 0xe9
 800d2ac:	d009      	beq.n	800d2c2 <check_fs+0x66>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d2b4:	2beb      	cmp	r3, #235	; 0xeb
 800d2b6:	d11e      	bne.n	800d2f6 <check_fs+0x9a>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d2be:	2b90      	cmp	r3, #144	; 0x90
 800d2c0:	d119      	bne.n	800d2f6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	3334      	adds	r3, #52	; 0x34
 800d2c6:	3336      	adds	r3, #54	; 0x36
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f7fe fe41 	bl	800bf50 <ld_dword>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d2d4:	4a0a      	ldr	r2, [pc, #40]	; (800d300 <check_fs+0xa4>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d101      	bne.n	800d2de <check_fs+0x82>
 800d2da:	2300      	movs	r3, #0
 800d2dc:	e00c      	b.n	800d2f8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	3334      	adds	r3, #52	; 0x34
 800d2e2:	3352      	adds	r3, #82	; 0x52
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7fe fe33 	bl	800bf50 <ld_dword>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	4a05      	ldr	r2, [pc, #20]	; (800d304 <check_fs+0xa8>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d101      	bne.n	800d2f6 <check_fs+0x9a>
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	e000      	b.n	800d2f8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d2f6:	2302      	movs	r3, #2
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3708      	adds	r7, #8
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	00544146 	.word	0x00544146
 800d304:	33544146 	.word	0x33544146

0800d308 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b096      	sub	sp, #88	; 0x58
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	60b9      	str	r1, [r7, #8]
 800d312:	4613      	mov	r3, r2
 800d314:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	2200      	movs	r2, #0
 800d31a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d31c:	68f8      	ldr	r0, [r7, #12]
 800d31e:	f7ff ff59 	bl	800d1d4 <get_ldnumber>
 800d322:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d326:	2b00      	cmp	r3, #0
 800d328:	da01      	bge.n	800d32e <find_volume+0x26>
 800d32a:	230b      	movs	r3, #11
 800d32c:	e265      	b.n	800d7fa <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d32e:	4ab0      	ldr	r2, [pc, #704]	; (800d5f0 <find_volume+0x2e8>)
 800d330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d336:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d101      	bne.n	800d342 <find_volume+0x3a>
 800d33e:	230c      	movs	r3, #12
 800d340:	e25b      	b.n	800d7fa <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d346:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d348:	79fb      	ldrb	r3, [r7, #7]
 800d34a:	f023 0301 	bic.w	r3, r3, #1
 800d34e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d01a      	beq.n	800d38e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35a:	785b      	ldrb	r3, [r3, #1]
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7fe fd41 	bl	800bde4 <disk_status>
 800d362:	4603      	mov	r3, r0
 800d364:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d368:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d36c:	f003 0301 	and.w	r3, r3, #1
 800d370:	2b00      	cmp	r3, #0
 800d372:	d10c      	bne.n	800d38e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d374:	79fb      	ldrb	r3, [r7, #7]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d007      	beq.n	800d38a <find_volume+0x82>
 800d37a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d37e:	f003 0304 	and.w	r3, r3, #4
 800d382:	2b00      	cmp	r3, #0
 800d384:	d001      	beq.n	800d38a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d386:	230a      	movs	r3, #10
 800d388:	e237      	b.n	800d7fa <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800d38a:	2300      	movs	r3, #0
 800d38c:	e235      	b.n	800d7fa <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d390:	2200      	movs	r2, #0
 800d392:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d396:	b2da      	uxtb	r2, r3
 800d398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d39a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d39e:	785b      	ldrb	r3, [r3, #1]
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7fe fd39 	bl	800be18 <disk_initialize>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d3ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d3b0:	f003 0301 	and.w	r3, r3, #1
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d001      	beq.n	800d3bc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d3b8:	2303      	movs	r3, #3
 800d3ba:	e21e      	b.n	800d7fa <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d3bc:	79fb      	ldrb	r3, [r7, #7]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d007      	beq.n	800d3d2 <find_volume+0xca>
 800d3c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d3c6:	f003 0304 	and.w	r3, r3, #4
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d001      	beq.n	800d3d2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d3ce:	230a      	movs	r3, #10
 800d3d0:	e213      	b.n	800d7fa <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d4:	7858      	ldrb	r0, [r3, #1]
 800d3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d8:	330c      	adds	r3, #12
 800d3da:	461a      	mov	r2, r3
 800d3dc:	2102      	movs	r1, #2
 800d3de:	f7fe fd81 	bl	800bee4 <disk_ioctl>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d001      	beq.n	800d3ec <find_volume+0xe4>
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	e206      	b.n	800d7fa <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ee:	899b      	ldrh	r3, [r3, #12]
 800d3f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3f4:	d80d      	bhi.n	800d412 <find_volume+0x10a>
 800d3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f8:	899b      	ldrh	r3, [r3, #12]
 800d3fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3fe:	d308      	bcc.n	800d412 <find_volume+0x10a>
 800d400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d402:	899b      	ldrh	r3, [r3, #12]
 800d404:	461a      	mov	r2, r3
 800d406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d408:	899b      	ldrh	r3, [r3, #12]
 800d40a:	3b01      	subs	r3, #1
 800d40c:	4013      	ands	r3, r2
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d001      	beq.n	800d416 <find_volume+0x10e>
 800d412:	2301      	movs	r3, #1
 800d414:	e1f1      	b.n	800d7fa <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d416:	2300      	movs	r3, #0
 800d418:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d41a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d41c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d41e:	f7ff ff1d 	bl	800d25c <check_fs>
 800d422:	4603      	mov	r3, r0
 800d424:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d428:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d42c:	2b02      	cmp	r3, #2
 800d42e:	d14b      	bne.n	800d4c8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d430:	2300      	movs	r3, #0
 800d432:	643b      	str	r3, [r7, #64]	; 0x40
 800d434:	e01f      	b.n	800d476 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d438:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d43c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d43e:	011b      	lsls	r3, r3, #4
 800d440:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d444:	4413      	add	r3, r2
 800d446:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44a:	3304      	adds	r3, #4
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d006      	beq.n	800d460 <find_volume+0x158>
 800d452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d454:	3308      	adds	r3, #8
 800d456:	4618      	mov	r0, r3
 800d458:	f7fe fd7a 	bl	800bf50 <ld_dword>
 800d45c:	4602      	mov	r2, r0
 800d45e:	e000      	b.n	800d462 <find_volume+0x15a>
 800d460:	2200      	movs	r2, #0
 800d462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d464:	009b      	lsls	r3, r3, #2
 800d466:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d46a:	440b      	add	r3, r1
 800d46c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d472:	3301      	adds	r3, #1
 800d474:	643b      	str	r3, [r7, #64]	; 0x40
 800d476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d478:	2b03      	cmp	r3, #3
 800d47a:	d9dc      	bls.n	800d436 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d47c:	2300      	movs	r3, #0
 800d47e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d482:	2b00      	cmp	r3, #0
 800d484:	d002      	beq.n	800d48c <find_volume+0x184>
 800d486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d488:	3b01      	subs	r3, #1
 800d48a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d48c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d48e:	009b      	lsls	r3, r3, #2
 800d490:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d494:	4413      	add	r3, r2
 800d496:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d49a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d49c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d005      	beq.n	800d4ae <find_volume+0x1a6>
 800d4a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d4a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d4a6:	f7ff fed9 	bl	800d25c <check_fs>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	e000      	b.n	800d4b0 <find_volume+0x1a8>
 800d4ae:	2303      	movs	r3, #3
 800d4b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d4b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d4b8:	2b01      	cmp	r3, #1
 800d4ba:	d905      	bls.n	800d4c8 <find_volume+0x1c0>
 800d4bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4be:	3301      	adds	r3, #1
 800d4c0:	643b      	str	r3, [r7, #64]	; 0x40
 800d4c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4c4:	2b03      	cmp	r3, #3
 800d4c6:	d9e1      	bls.n	800d48c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d4c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d4cc:	2b04      	cmp	r3, #4
 800d4ce:	d101      	bne.n	800d4d4 <find_volume+0x1cc>
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	e192      	b.n	800d7fa <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d4d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d901      	bls.n	800d4e0 <find_volume+0x1d8>
 800d4dc:	230d      	movs	r3, #13
 800d4de:	e18c      	b.n	800d7fa <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e2:	3334      	adds	r3, #52	; 0x34
 800d4e4:	330b      	adds	r3, #11
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7fe fd1a 	bl	800bf20 <ld_word>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	461a      	mov	r2, r3
 800d4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f2:	899b      	ldrh	r3, [r3, #12]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d001      	beq.n	800d4fc <find_volume+0x1f4>
 800d4f8:	230d      	movs	r3, #13
 800d4fa:	e17e      	b.n	800d7fa <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4fe:	3334      	adds	r3, #52	; 0x34
 800d500:	3316      	adds	r3, #22
 800d502:	4618      	mov	r0, r3
 800d504:	f7fe fd0c 	bl	800bf20 <ld_word>
 800d508:	4603      	mov	r3, r0
 800d50a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d50c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d106      	bne.n	800d520 <find_volume+0x218>
 800d512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d514:	3334      	adds	r3, #52	; 0x34
 800d516:	3324      	adds	r3, #36	; 0x24
 800d518:	4618      	mov	r0, r3
 800d51a:	f7fe fd19 	bl	800bf50 <ld_dword>
 800d51e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d522:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d524:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d528:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d52e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d532:	789b      	ldrb	r3, [r3, #2]
 800d534:	2b01      	cmp	r3, #1
 800d536:	d005      	beq.n	800d544 <find_volume+0x23c>
 800d538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53a:	789b      	ldrb	r3, [r3, #2]
 800d53c:	2b02      	cmp	r3, #2
 800d53e:	d001      	beq.n	800d544 <find_volume+0x23c>
 800d540:	230d      	movs	r3, #13
 800d542:	e15a      	b.n	800d7fa <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d546:	789b      	ldrb	r3, [r3, #2]
 800d548:	461a      	mov	r2, r3
 800d54a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d54c:	fb02 f303 	mul.w	r3, r2, r3
 800d550:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d558:	b29a      	uxth	r2, r3
 800d55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d55c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d560:	895b      	ldrh	r3, [r3, #10]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d008      	beq.n	800d578 <find_volume+0x270>
 800d566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d568:	895b      	ldrh	r3, [r3, #10]
 800d56a:	461a      	mov	r2, r3
 800d56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d56e:	895b      	ldrh	r3, [r3, #10]
 800d570:	3b01      	subs	r3, #1
 800d572:	4013      	ands	r3, r2
 800d574:	2b00      	cmp	r3, #0
 800d576:	d001      	beq.n	800d57c <find_volume+0x274>
 800d578:	230d      	movs	r3, #13
 800d57a:	e13e      	b.n	800d7fa <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d57e:	3334      	adds	r3, #52	; 0x34
 800d580:	3311      	adds	r3, #17
 800d582:	4618      	mov	r0, r3
 800d584:	f7fe fccc 	bl	800bf20 <ld_word>
 800d588:	4603      	mov	r3, r0
 800d58a:	461a      	mov	r2, r3
 800d58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d58e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d592:	891b      	ldrh	r3, [r3, #8]
 800d594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d596:	8992      	ldrh	r2, [r2, #12]
 800d598:	0952      	lsrs	r2, r2, #5
 800d59a:	b292      	uxth	r2, r2
 800d59c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d5a0:	fb02 f201 	mul.w	r2, r2, r1
 800d5a4:	1a9b      	subs	r3, r3, r2
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d001      	beq.n	800d5b0 <find_volume+0x2a8>
 800d5ac:	230d      	movs	r3, #13
 800d5ae:	e124      	b.n	800d7fa <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b2:	3334      	adds	r3, #52	; 0x34
 800d5b4:	3313      	adds	r3, #19
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7fe fcb2 	bl	800bf20 <ld_word>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d5c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d106      	bne.n	800d5d4 <find_volume+0x2cc>
 800d5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c8:	3334      	adds	r3, #52	; 0x34
 800d5ca:	3320      	adds	r3, #32
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f7fe fcbf 	bl	800bf50 <ld_dword>
 800d5d2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d6:	3334      	adds	r3, #52	; 0x34
 800d5d8:	330e      	adds	r3, #14
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f7fe fca0 	bl	800bf20 <ld_word>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d5e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d104      	bne.n	800d5f4 <find_volume+0x2ec>
 800d5ea:	230d      	movs	r3, #13
 800d5ec:	e105      	b.n	800d7fa <find_volume+0x4f2>
 800d5ee:	bf00      	nop
 800d5f0:	2000312c 	.word	0x2000312c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d5f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d5f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5f8:	4413      	add	r3, r2
 800d5fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5fc:	8911      	ldrh	r1, [r2, #8]
 800d5fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d600:	8992      	ldrh	r2, [r2, #12]
 800d602:	0952      	lsrs	r2, r2, #5
 800d604:	b292      	uxth	r2, r2
 800d606:	fbb1 f2f2 	udiv	r2, r1, r2
 800d60a:	b292      	uxth	r2, r2
 800d60c:	4413      	add	r3, r2
 800d60e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d614:	429a      	cmp	r2, r3
 800d616:	d201      	bcs.n	800d61c <find_volume+0x314>
 800d618:	230d      	movs	r3, #13
 800d61a:	e0ee      	b.n	800d7fa <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d61c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d620:	1ad3      	subs	r3, r2, r3
 800d622:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d624:	8952      	ldrh	r2, [r2, #10]
 800d626:	fbb3 f3f2 	udiv	r3, r3, r2
 800d62a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d101      	bne.n	800d636 <find_volume+0x32e>
 800d632:	230d      	movs	r3, #13
 800d634:	e0e1      	b.n	800d7fa <find_volume+0x4f2>
		fmt = FS_FAT32;
 800d636:	2303      	movs	r3, #3
 800d638:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d642:	4293      	cmp	r3, r2
 800d644:	d802      	bhi.n	800d64c <find_volume+0x344>
 800d646:	2302      	movs	r3, #2
 800d648:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d64e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d652:	4293      	cmp	r3, r2
 800d654:	d802      	bhi.n	800d65c <find_volume+0x354>
 800d656:	2301      	movs	r3, #1
 800d658:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65e:	1c9a      	adds	r2, r3, #2
 800d660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d662:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d666:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d668:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d66a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d66c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d66e:	441a      	add	r2, r3
 800d670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d672:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d674:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d678:	441a      	add	r2, r3
 800d67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800d67e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d682:	2b03      	cmp	r3, #3
 800d684:	d11e      	bne.n	800d6c4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d688:	3334      	adds	r3, #52	; 0x34
 800d68a:	332a      	adds	r3, #42	; 0x2a
 800d68c:	4618      	mov	r0, r3
 800d68e:	f7fe fc47 	bl	800bf20 <ld_word>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d001      	beq.n	800d69c <find_volume+0x394>
 800d698:	230d      	movs	r3, #13
 800d69a:	e0ae      	b.n	800d7fa <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d69e:	891b      	ldrh	r3, [r3, #8]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d001      	beq.n	800d6a8 <find_volume+0x3a0>
 800d6a4:	230d      	movs	r3, #13
 800d6a6:	e0a8      	b.n	800d7fa <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6aa:	3334      	adds	r3, #52	; 0x34
 800d6ac:	332c      	adds	r3, #44	; 0x2c
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fe fc4e 	bl	800bf50 <ld_dword>
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6bc:	699b      	ldr	r3, [r3, #24]
 800d6be:	009b      	lsls	r3, r3, #2
 800d6c0:	647b      	str	r3, [r7, #68]	; 0x44
 800d6c2:	e01f      	b.n	800d704 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c6:	891b      	ldrh	r3, [r3, #8]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d101      	bne.n	800d6d0 <find_volume+0x3c8>
 800d6cc:	230d      	movs	r3, #13
 800d6ce:	e094      	b.n	800d7fa <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d6d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6d6:	441a      	add	r2, r3
 800d6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6da:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d6dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d6e0:	2b02      	cmp	r3, #2
 800d6e2:	d103      	bne.n	800d6ec <find_volume+0x3e4>
 800d6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e6:	699b      	ldr	r3, [r3, #24]
 800d6e8:	005b      	lsls	r3, r3, #1
 800d6ea:	e00a      	b.n	800d702 <find_volume+0x3fa>
 800d6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ee:	699a      	ldr	r2, [r3, #24]
 800d6f0:	4613      	mov	r3, r2
 800d6f2:	005b      	lsls	r3, r3, #1
 800d6f4:	4413      	add	r3, r2
 800d6f6:	085a      	lsrs	r2, r3, #1
 800d6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6fa:	699b      	ldr	r3, [r3, #24]
 800d6fc:	f003 0301 	and.w	r3, r3, #1
 800d700:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d702:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d706:	69da      	ldr	r2, [r3, #28]
 800d708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d70a:	899b      	ldrh	r3, [r3, #12]
 800d70c:	4619      	mov	r1, r3
 800d70e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d710:	440b      	add	r3, r1
 800d712:	3b01      	subs	r3, #1
 800d714:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d716:	8989      	ldrh	r1, [r1, #12]
 800d718:	fbb3 f3f1 	udiv	r3, r3, r1
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d201      	bcs.n	800d724 <find_volume+0x41c>
 800d720:	230d      	movs	r3, #13
 800d722:	e06a      	b.n	800d7fa <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d726:	f04f 32ff 	mov.w	r2, #4294967295
 800d72a:	615a      	str	r2, [r3, #20]
 800d72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d72e:	695a      	ldr	r2, [r3, #20]
 800d730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d732:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d736:	2280      	movs	r2, #128	; 0x80
 800d738:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d73a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d73e:	2b03      	cmp	r3, #3
 800d740:	d149      	bne.n	800d7d6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d744:	3334      	adds	r3, #52	; 0x34
 800d746:	3330      	adds	r3, #48	; 0x30
 800d748:	4618      	mov	r0, r3
 800d74a:	f7fe fbe9 	bl	800bf20 <ld_word>
 800d74e:	4603      	mov	r3, r0
 800d750:	2b01      	cmp	r3, #1
 800d752:	d140      	bne.n	800d7d6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d756:	3301      	adds	r3, #1
 800d758:	4619      	mov	r1, r3
 800d75a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d75c:	f7fe fe54 	bl	800c408 <move_window>
 800d760:	4603      	mov	r3, r0
 800d762:	2b00      	cmp	r3, #0
 800d764:	d137      	bne.n	800d7d6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800d766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d768:	2200      	movs	r2, #0
 800d76a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d76e:	3334      	adds	r3, #52	; 0x34
 800d770:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d774:	4618      	mov	r0, r3
 800d776:	f7fe fbd3 	bl	800bf20 <ld_word>
 800d77a:	4603      	mov	r3, r0
 800d77c:	461a      	mov	r2, r3
 800d77e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d782:	429a      	cmp	r2, r3
 800d784:	d127      	bne.n	800d7d6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d788:	3334      	adds	r3, #52	; 0x34
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7fe fbe0 	bl	800bf50 <ld_dword>
 800d790:	4603      	mov	r3, r0
 800d792:	4a1c      	ldr	r2, [pc, #112]	; (800d804 <find_volume+0x4fc>)
 800d794:	4293      	cmp	r3, r2
 800d796:	d11e      	bne.n	800d7d6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d79a:	3334      	adds	r3, #52	; 0x34
 800d79c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7fe fbd5 	bl	800bf50 <ld_dword>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	4a17      	ldr	r2, [pc, #92]	; (800d808 <find_volume+0x500>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d113      	bne.n	800d7d6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b0:	3334      	adds	r3, #52	; 0x34
 800d7b2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7fe fbca 	bl	800bf50 <ld_dword>
 800d7bc:	4602      	mov	r2, r0
 800d7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c4:	3334      	adds	r3, #52	; 0x34
 800d7c6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7fe fbc0 	bl	800bf50 <ld_dword>
 800d7d0:	4602      	mov	r2, r0
 800d7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d7dc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d7de:	4b0b      	ldr	r3, [pc, #44]	; (800d80c <find_volume+0x504>)
 800d7e0:	881b      	ldrh	r3, [r3, #0]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	b29a      	uxth	r2, r3
 800d7e6:	4b09      	ldr	r3, [pc, #36]	; (800d80c <find_volume+0x504>)
 800d7e8:	801a      	strh	r2, [r3, #0]
 800d7ea:	4b08      	ldr	r3, [pc, #32]	; (800d80c <find_volume+0x504>)
 800d7ec:	881a      	ldrh	r2, [r3, #0]
 800d7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d7f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d7f4:	f7fe fda0 	bl	800c338 <clear_lock>
#endif
	return FR_OK;
 800d7f8:	2300      	movs	r3, #0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3758      	adds	r7, #88	; 0x58
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	41615252 	.word	0x41615252
 800d808:	61417272 	.word	0x61417272
 800d80c:	20003130 	.word	0x20003130

0800d810 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b088      	sub	sp, #32
 800d814:	af00      	add	r7, sp, #0
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	4613      	mov	r3, r2
 800d81c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d822:	f107 0310 	add.w	r3, r7, #16
 800d826:	4618      	mov	r0, r3
 800d828:	f7ff fcd4 	bl	800d1d4 <get_ldnumber>
 800d82c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d82e:	69fb      	ldr	r3, [r7, #28]
 800d830:	2b00      	cmp	r3, #0
 800d832:	da01      	bge.n	800d838 <f_mount+0x28>
 800d834:	230b      	movs	r3, #11
 800d836:	e02b      	b.n	800d890 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d838:	4a17      	ldr	r2, [pc, #92]	; (800d898 <f_mount+0x88>)
 800d83a:	69fb      	ldr	r3, [r7, #28]
 800d83c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d840:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d842:	69bb      	ldr	r3, [r7, #24]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d005      	beq.n	800d854 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d848:	69b8      	ldr	r0, [r7, #24]
 800d84a:	f7fe fd75 	bl	800c338 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d84e:	69bb      	ldr	r3, [r7, #24]
 800d850:	2200      	movs	r2, #0
 800d852:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d002      	beq.n	800d860 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	2200      	movs	r2, #0
 800d85e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d860:	68fa      	ldr	r2, [r7, #12]
 800d862:	490d      	ldr	r1, [pc, #52]	; (800d898 <f_mount+0x88>)
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d002      	beq.n	800d876 <f_mount+0x66>
 800d870:	79fb      	ldrb	r3, [r7, #7]
 800d872:	2b01      	cmp	r3, #1
 800d874:	d001      	beq.n	800d87a <f_mount+0x6a>
 800d876:	2300      	movs	r3, #0
 800d878:	e00a      	b.n	800d890 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d87a:	f107 010c 	add.w	r1, r7, #12
 800d87e:	f107 0308 	add.w	r3, r7, #8
 800d882:	2200      	movs	r2, #0
 800d884:	4618      	mov	r0, r3
 800d886:	f7ff fd3f 	bl	800d308 <find_volume>
 800d88a:	4603      	mov	r3, r0
 800d88c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d88e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d890:	4618      	mov	r0, r3
 800d892:	3720      	adds	r7, #32
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	2000312c 	.word	0x2000312c

0800d89c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b098      	sub	sp, #96	; 0x60
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	60f8      	str	r0, [r7, #12]
 800d8a4:	60b9      	str	r1, [r7, #8]
 800d8a6:	4613      	mov	r3, r2
 800d8a8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d101      	bne.n	800d8b4 <f_open+0x18>
 800d8b0:	2309      	movs	r3, #9
 800d8b2:	e1bb      	b.n	800dc2c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d8b4:	79fb      	ldrb	r3, [r7, #7]
 800d8b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d8ba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d8bc:	79fa      	ldrb	r2, [r7, #7]
 800d8be:	f107 0110 	add.w	r1, r7, #16
 800d8c2:	f107 0308 	add.w	r3, r7, #8
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7ff fd1e 	bl	800d308 <find_volume>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d8d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	f040 819f 	bne.w	800dc1a <f_open+0x37e>
		dj.obj.fs = fs;
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d8e0:	68ba      	ldr	r2, [r7, #8]
 800d8e2:	f107 0314 	add.w	r3, r7, #20
 800d8e6:	4611      	mov	r1, r2
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f7ff fbfd 	bl	800d0e8 <follow_path>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d8f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d11a      	bne.n	800d932 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d8fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d900:	b25b      	sxtb	r3, r3
 800d902:	2b00      	cmp	r3, #0
 800d904:	da03      	bge.n	800d90e <f_open+0x72>
				res = FR_INVALID_NAME;
 800d906:	2306      	movs	r3, #6
 800d908:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d90c:	e011      	b.n	800d932 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d90e:	79fb      	ldrb	r3, [r7, #7]
 800d910:	f023 0301 	bic.w	r3, r3, #1
 800d914:	2b00      	cmp	r3, #0
 800d916:	bf14      	ite	ne
 800d918:	2301      	movne	r3, #1
 800d91a:	2300      	moveq	r3, #0
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	461a      	mov	r2, r3
 800d920:	f107 0314 	add.w	r3, r7, #20
 800d924:	4611      	mov	r1, r2
 800d926:	4618      	mov	r0, r3
 800d928:	f7fe fbfa 	bl	800c120 <chk_lock>
 800d92c:	4603      	mov	r3, r0
 800d92e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d932:	79fb      	ldrb	r3, [r7, #7]
 800d934:	f003 031c 	and.w	r3, r3, #28
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d07f      	beq.n	800da3c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d93c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d940:	2b00      	cmp	r3, #0
 800d942:	d017      	beq.n	800d974 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d944:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d948:	2b04      	cmp	r3, #4
 800d94a:	d10e      	bne.n	800d96a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d94c:	f7fe fc44 	bl	800c1d8 <enq_lock>
 800d950:	4603      	mov	r3, r0
 800d952:	2b00      	cmp	r3, #0
 800d954:	d006      	beq.n	800d964 <f_open+0xc8>
 800d956:	f107 0314 	add.w	r3, r7, #20
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7ff fac7 	bl	800ceee <dir_register>
 800d960:	4603      	mov	r3, r0
 800d962:	e000      	b.n	800d966 <f_open+0xca>
 800d964:	2312      	movs	r3, #18
 800d966:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d96a:	79fb      	ldrb	r3, [r7, #7]
 800d96c:	f043 0308 	orr.w	r3, r3, #8
 800d970:	71fb      	strb	r3, [r7, #7]
 800d972:	e010      	b.n	800d996 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d974:	7ebb      	ldrb	r3, [r7, #26]
 800d976:	f003 0311 	and.w	r3, r3, #17
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d003      	beq.n	800d986 <f_open+0xea>
					res = FR_DENIED;
 800d97e:	2307      	movs	r3, #7
 800d980:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d984:	e007      	b.n	800d996 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d986:	79fb      	ldrb	r3, [r7, #7]
 800d988:	f003 0304 	and.w	r3, r3, #4
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d002      	beq.n	800d996 <f_open+0xfa>
 800d990:	2308      	movs	r3, #8
 800d992:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d996:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d168      	bne.n	800da70 <f_open+0x1d4>
 800d99e:	79fb      	ldrb	r3, [r7, #7]
 800d9a0:	f003 0308 	and.w	r3, r3, #8
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d063      	beq.n	800da70 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d9a8:	f7fa fed8 	bl	800875c <get_fattime>
 800d9ac:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9b0:	330e      	adds	r3, #14
 800d9b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f7fe fb09 	bl	800bfcc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9bc:	3316      	adds	r3, #22
 800d9be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f7fe fb03 	bl	800bfcc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9c8:	330b      	adds	r3, #11
 800d9ca:	2220      	movs	r2, #32
 800d9cc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9d2:	4611      	mov	r1, r2
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f7ff f9f6 	bl	800cdc6 <ld_clust>
 800d9da:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7ff fa0e 	bl	800ce04 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9ea:	331c      	adds	r3, #28
 800d9ec:	2100      	movs	r1, #0
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7fe faec 	bl	800bfcc <st_dword>
					fs->wflag = 1;
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d9fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d037      	beq.n	800da70 <f_open+0x1d4>
						dw = fs->winsect;
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da04:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800da06:	f107 0314 	add.w	r3, r7, #20
 800da0a:	2200      	movs	r2, #0
 800da0c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800da0e:	4618      	mov	r0, r3
 800da10:	f7fe ff36 	bl	800c880 <remove_chain>
 800da14:	4603      	mov	r3, r0
 800da16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800da1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d126      	bne.n	800da70 <f_open+0x1d4>
							res = move_window(fs, dw);
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800da26:	4618      	mov	r0, r3
 800da28:	f7fe fcee 	bl	800c408 <move_window>
 800da2c:	4603      	mov	r3, r0
 800da2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800da36:	3a01      	subs	r2, #1
 800da38:	611a      	str	r2, [r3, #16]
 800da3a:	e019      	b.n	800da70 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800da3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da40:	2b00      	cmp	r3, #0
 800da42:	d115      	bne.n	800da70 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800da44:	7ebb      	ldrb	r3, [r7, #26]
 800da46:	f003 0310 	and.w	r3, r3, #16
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d003      	beq.n	800da56 <f_open+0x1ba>
					res = FR_NO_FILE;
 800da4e:	2304      	movs	r3, #4
 800da50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800da54:	e00c      	b.n	800da70 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800da56:	79fb      	ldrb	r3, [r7, #7]
 800da58:	f003 0302 	and.w	r3, r3, #2
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d007      	beq.n	800da70 <f_open+0x1d4>
 800da60:	7ebb      	ldrb	r3, [r7, #26]
 800da62:	f003 0301 	and.w	r3, r3, #1
 800da66:	2b00      	cmp	r3, #0
 800da68:	d002      	beq.n	800da70 <f_open+0x1d4>
						res = FR_DENIED;
 800da6a:	2307      	movs	r3, #7
 800da6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800da70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da74:	2b00      	cmp	r3, #0
 800da76:	d128      	bne.n	800daca <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800da78:	79fb      	ldrb	r3, [r7, #7]
 800da7a:	f003 0308 	and.w	r3, r3, #8
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d003      	beq.n	800da8a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800da82:	79fb      	ldrb	r3, [r7, #7]
 800da84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da88:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800da92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800da98:	79fb      	ldrb	r3, [r7, #7]
 800da9a:	f023 0301 	bic.w	r3, r3, #1
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	bf14      	ite	ne
 800daa2:	2301      	movne	r3, #1
 800daa4:	2300      	moveq	r3, #0
 800daa6:	b2db      	uxtb	r3, r3
 800daa8:	461a      	mov	r2, r3
 800daaa:	f107 0314 	add.w	r3, r7, #20
 800daae:	4611      	mov	r1, r2
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7fe fbb3 	bl	800c21c <inc_lock>
 800dab6:	4602      	mov	r2, r0
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	691b      	ldr	r3, [r3, #16]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d102      	bne.n	800daca <f_open+0x22e>
 800dac4:	2302      	movs	r3, #2
 800dac6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800daca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dace:	2b00      	cmp	r3, #0
 800dad0:	f040 80a3 	bne.w	800dc1a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dad8:	4611      	mov	r1, r2
 800dada:	4618      	mov	r0, r3
 800dadc:	f7ff f973 	bl	800cdc6 <ld_clust>
 800dae0:	4602      	mov	r2, r0
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dae8:	331c      	adds	r3, #28
 800daea:	4618      	mov	r0, r3
 800daec:	f7fe fa30 	bl	800bf50 <ld_dword>
 800daf0:	4602      	mov	r2, r0
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2200      	movs	r2, #0
 800dafa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dafc:	693a      	ldr	r2, [r7, #16]
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	88da      	ldrh	r2, [r3, #6]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	79fa      	ldrb	r2, [r7, #7]
 800db0e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	2200      	movs	r2, #0
 800db14:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2200      	movs	r2, #0
 800db1a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2200      	movs	r2, #0
 800db20:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	3330      	adds	r3, #48	; 0x30
 800db26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800db2a:	2100      	movs	r1, #0
 800db2c:	4618      	mov	r0, r3
 800db2e:	f7fe fa9a 	bl	800c066 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800db32:	79fb      	ldrb	r3, [r7, #7]
 800db34:	f003 0320 	and.w	r3, r3, #32
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d06e      	beq.n	800dc1a <f_open+0x37e>
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	68db      	ldr	r3, [r3, #12]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d06a      	beq.n	800dc1a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	68da      	ldr	r2, [r3, #12]
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	895b      	ldrh	r3, [r3, #10]
 800db50:	461a      	mov	r2, r3
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	899b      	ldrh	r3, [r3, #12]
 800db56:	fb03 f302 	mul.w	r3, r3, r2
 800db5a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	689b      	ldr	r3, [r3, #8]
 800db60:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	68db      	ldr	r3, [r3, #12]
 800db66:	657b      	str	r3, [r7, #84]	; 0x54
 800db68:	e016      	b.n	800db98 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800db6e:	4618      	mov	r0, r3
 800db70:	f7fe fc96 	bl	800c4a0 <get_fat>
 800db74:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800db76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db78:	2b01      	cmp	r3, #1
 800db7a:	d802      	bhi.n	800db82 <f_open+0x2e6>
 800db7c:	2302      	movs	r3, #2
 800db7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800db82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db88:	d102      	bne.n	800db90 <f_open+0x2f4>
 800db8a:	2301      	movs	r3, #1
 800db8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800db90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800db92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db94:	1ad3      	subs	r3, r2, r3
 800db96:	657b      	str	r3, [r7, #84]	; 0x54
 800db98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d103      	bne.n	800dba8 <f_open+0x30c>
 800dba0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d8e0      	bhi.n	800db6a <f_open+0x2ce>
				}
				fp->clust = clst;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dbac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dbae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d131      	bne.n	800dc1a <f_open+0x37e>
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	899b      	ldrh	r3, [r3, #12]
 800dbba:	461a      	mov	r2, r3
 800dbbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbbe:	fbb3 f1f2 	udiv	r1, r3, r2
 800dbc2:	fb02 f201 	mul.w	r2, r2, r1
 800dbc6:	1a9b      	subs	r3, r3, r2
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d026      	beq.n	800dc1a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7fe fc46 	bl	800c462 <clust2sect>
 800dbd6:	6478      	str	r0, [r7, #68]	; 0x44
 800dbd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d103      	bne.n	800dbe6 <f_open+0x34a>
						res = FR_INT_ERR;
 800dbde:	2302      	movs	r3, #2
 800dbe0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dbe4:	e019      	b.n	800dc1a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	899b      	ldrh	r3, [r3, #12]
 800dbea:	461a      	mov	r2, r3
 800dbec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbee:	fbb3 f2f2 	udiv	r2, r3, r2
 800dbf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbf4:	441a      	add	r2, r3
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	7858      	ldrb	r0, [r3, #1]
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	6a1a      	ldr	r2, [r3, #32]
 800dc08:	2301      	movs	r3, #1
 800dc0a:	f7fe f92b 	bl	800be64 <disk_read>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d002      	beq.n	800dc1a <f_open+0x37e>
 800dc14:	2301      	movs	r3, #1
 800dc16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dc1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d002      	beq.n	800dc28 <f_open+0x38c>
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2200      	movs	r2, #0
 800dc26:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800dc28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3760      	adds	r7, #96	; 0x60
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dc34:	b480      	push	{r7}
 800dc36:	b087      	sub	sp, #28
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	4613      	mov	r3, r2
 800dc40:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dc42:	2301      	movs	r3, #1
 800dc44:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dc46:	2300      	movs	r3, #0
 800dc48:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dc4a:	4b1f      	ldr	r3, [pc, #124]	; (800dcc8 <FATFS_LinkDriverEx+0x94>)
 800dc4c:	7a5b      	ldrb	r3, [r3, #9]
 800dc4e:	b2db      	uxtb	r3, r3
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d131      	bne.n	800dcb8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dc54:	4b1c      	ldr	r3, [pc, #112]	; (800dcc8 <FATFS_LinkDriverEx+0x94>)
 800dc56:	7a5b      	ldrb	r3, [r3, #9]
 800dc58:	b2db      	uxtb	r3, r3
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	4b1a      	ldr	r3, [pc, #104]	; (800dcc8 <FATFS_LinkDriverEx+0x94>)
 800dc5e:	2100      	movs	r1, #0
 800dc60:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dc62:	4b19      	ldr	r3, [pc, #100]	; (800dcc8 <FATFS_LinkDriverEx+0x94>)
 800dc64:	7a5b      	ldrb	r3, [r3, #9]
 800dc66:	b2db      	uxtb	r3, r3
 800dc68:	4a17      	ldr	r2, [pc, #92]	; (800dcc8 <FATFS_LinkDriverEx+0x94>)
 800dc6a:	009b      	lsls	r3, r3, #2
 800dc6c:	4413      	add	r3, r2
 800dc6e:	68fa      	ldr	r2, [r7, #12]
 800dc70:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dc72:	4b15      	ldr	r3, [pc, #84]	; (800dcc8 <FATFS_LinkDriverEx+0x94>)
 800dc74:	7a5b      	ldrb	r3, [r3, #9]
 800dc76:	b2db      	uxtb	r3, r3
 800dc78:	461a      	mov	r2, r3
 800dc7a:	4b13      	ldr	r3, [pc, #76]	; (800dcc8 <FATFS_LinkDriverEx+0x94>)
 800dc7c:	4413      	add	r3, r2
 800dc7e:	79fa      	ldrb	r2, [r7, #7]
 800dc80:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dc82:	4b11      	ldr	r3, [pc, #68]	; (800dcc8 <FATFS_LinkDriverEx+0x94>)
 800dc84:	7a5b      	ldrb	r3, [r3, #9]
 800dc86:	b2db      	uxtb	r3, r3
 800dc88:	1c5a      	adds	r2, r3, #1
 800dc8a:	b2d1      	uxtb	r1, r2
 800dc8c:	4a0e      	ldr	r2, [pc, #56]	; (800dcc8 <FATFS_LinkDriverEx+0x94>)
 800dc8e:	7251      	strb	r1, [r2, #9]
 800dc90:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dc92:	7dbb      	ldrb	r3, [r7, #22]
 800dc94:	3330      	adds	r3, #48	; 0x30
 800dc96:	b2da      	uxtb	r2, r3
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	3301      	adds	r3, #1
 800dca0:	223a      	movs	r2, #58	; 0x3a
 800dca2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	3302      	adds	r3, #2
 800dca8:	222f      	movs	r2, #47	; 0x2f
 800dcaa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	3303      	adds	r3, #3
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dcb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	371c      	adds	r7, #28
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc4:	4770      	bx	lr
 800dcc6:	bf00      	nop
 800dcc8:	20003154 	.word	0x20003154

0800dccc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b082      	sub	sp, #8
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	6839      	ldr	r1, [r7, #0]
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f7ff ffaa 	bl	800dc34 <FATFS_LinkDriverEx>
 800dce0:	4603      	mov	r3, r0
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3708      	adds	r7, #8
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
	...

0800dcec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	490e      	ldr	r1, [pc, #56]	; (800dd2c <MX_USB_HOST_Init+0x40>)
 800dcf4:	480e      	ldr	r0, [pc, #56]	; (800dd30 <MX_USB_HOST_Init+0x44>)
 800dcf6:	f7fc fb53 	bl	800a3a0 <USBH_Init>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d001      	beq.n	800dd04 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800dd00:	f7f3 f848 	bl	8000d94 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800dd04:	490b      	ldr	r1, [pc, #44]	; (800dd34 <MX_USB_HOST_Init+0x48>)
 800dd06:	480a      	ldr	r0, [pc, #40]	; (800dd30 <MX_USB_HOST_Init+0x44>)
 800dd08:	f7fc fbe6 	bl	800a4d8 <USBH_RegisterClass>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d001      	beq.n	800dd16 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800dd12:	f7f3 f83f 	bl	8000d94 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800dd16:	4806      	ldr	r0, [pc, #24]	; (800dd30 <MX_USB_HOST_Init+0x44>)
 800dd18:	f7fc fccc 	bl	800a6b4 <USBH_Start>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d001      	beq.n	800dd26 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800dd22:	f7f3 f837 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800dd26:	bf00      	nop
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	0800dd4d 	.word	0x0800dd4d
 800dd30:	20005424 	.word	0x20005424
 800dd34:	20000018 	.word	0x20000018

0800dd38 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800dd3c:	4802      	ldr	r0, [pc, #8]	; (800dd48 <MX_USB_HOST_Process+0x10>)
 800dd3e:	f7fc fcc9 	bl	800a6d4 <USBH_Process>
}
 800dd42:	bf00      	nop
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	20005424 	.word	0x20005424

0800dd4c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	460b      	mov	r3, r1
 800dd56:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800dd58:	78fb      	ldrb	r3, [r7, #3]
 800dd5a:	3b01      	subs	r3, #1
 800dd5c:	2b04      	cmp	r3, #4
 800dd5e:	d819      	bhi.n	800dd94 <USBH_UserProcess+0x48>
 800dd60:	a201      	add	r2, pc, #4	; (adr r2, 800dd68 <USBH_UserProcess+0x1c>)
 800dd62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd66:	bf00      	nop
 800dd68:	0800dd95 	.word	0x0800dd95
 800dd6c:	0800dd85 	.word	0x0800dd85
 800dd70:	0800dd95 	.word	0x0800dd95
 800dd74:	0800dd8d 	.word	0x0800dd8d
 800dd78:	0800dd7d 	.word	0x0800dd7d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800dd7c:	4b09      	ldr	r3, [pc, #36]	; (800dda4 <USBH_UserProcess+0x58>)
 800dd7e:	2203      	movs	r2, #3
 800dd80:	701a      	strb	r2, [r3, #0]
  break;
 800dd82:	e008      	b.n	800dd96 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800dd84:	4b07      	ldr	r3, [pc, #28]	; (800dda4 <USBH_UserProcess+0x58>)
 800dd86:	2202      	movs	r2, #2
 800dd88:	701a      	strb	r2, [r3, #0]
  break;
 800dd8a:	e004      	b.n	800dd96 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800dd8c:	4b05      	ldr	r3, [pc, #20]	; (800dda4 <USBH_UserProcess+0x58>)
 800dd8e:	2201      	movs	r2, #1
 800dd90:	701a      	strb	r2, [r3, #0]
  break;
 800dd92:	e000      	b.n	800dd96 <USBH_UserProcess+0x4a>

  default:
  break;
 800dd94:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800dd96:	bf00      	nop
 800dd98:	370c      	adds	r7, #12
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr
 800dda2:	bf00      	nop
 800dda4:	20003160 	.word	0x20003160

0800dda8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b08a      	sub	sp, #40	; 0x28
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ddb0:	f107 0314 	add.w	r3, r7, #20
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	601a      	str	r2, [r3, #0]
 800ddb8:	605a      	str	r2, [r3, #4]
 800ddba:	609a      	str	r2, [r3, #8]
 800ddbc:	60da      	str	r2, [r3, #12]
 800ddbe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ddc8:	d147      	bne.n	800de5a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ddca:	2300      	movs	r3, #0
 800ddcc:	613b      	str	r3, [r7, #16]
 800ddce:	4b25      	ldr	r3, [pc, #148]	; (800de64 <HAL_HCD_MspInit+0xbc>)
 800ddd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddd2:	4a24      	ldr	r2, [pc, #144]	; (800de64 <HAL_HCD_MspInit+0xbc>)
 800ddd4:	f043 0301 	orr.w	r3, r3, #1
 800ddd8:	6313      	str	r3, [r2, #48]	; 0x30
 800ddda:	4b22      	ldr	r3, [pc, #136]	; (800de64 <HAL_HCD_MspInit+0xbc>)
 800dddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddde:	f003 0301 	and.w	r3, r3, #1
 800dde2:	613b      	str	r3, [r7, #16]
 800dde4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800dde6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ddea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ddec:	2300      	movs	r3, #0
 800ddee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ddf4:	f107 0314 	add.w	r3, r7, #20
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	481b      	ldr	r0, [pc, #108]	; (800de68 <HAL_HCD_MspInit+0xc0>)
 800ddfc:	f7f5 fa04 	bl	8003208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800de00:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800de04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de06:	2302      	movs	r3, #2
 800de08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de0a:	2300      	movs	r3, #0
 800de0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800de0e:	2303      	movs	r3, #3
 800de10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800de12:	230a      	movs	r3, #10
 800de14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800de16:	f107 0314 	add.w	r3, r7, #20
 800de1a:	4619      	mov	r1, r3
 800de1c:	4812      	ldr	r0, [pc, #72]	; (800de68 <HAL_HCD_MspInit+0xc0>)
 800de1e:	f7f5 f9f3 	bl	8003208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800de22:	4b10      	ldr	r3, [pc, #64]	; (800de64 <HAL_HCD_MspInit+0xbc>)
 800de24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de26:	4a0f      	ldr	r2, [pc, #60]	; (800de64 <HAL_HCD_MspInit+0xbc>)
 800de28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de2c:	6353      	str	r3, [r2, #52]	; 0x34
 800de2e:	2300      	movs	r3, #0
 800de30:	60fb      	str	r3, [r7, #12]
 800de32:	4b0c      	ldr	r3, [pc, #48]	; (800de64 <HAL_HCD_MspInit+0xbc>)
 800de34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de36:	4a0b      	ldr	r2, [pc, #44]	; (800de64 <HAL_HCD_MspInit+0xbc>)
 800de38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800de3c:	6453      	str	r3, [r2, #68]	; 0x44
 800de3e:	4b09      	ldr	r3, [pc, #36]	; (800de64 <HAL_HCD_MspInit+0xbc>)
 800de40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de46:	60fb      	str	r3, [r7, #12]
 800de48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800de4a:	2200      	movs	r2, #0
 800de4c:	2100      	movs	r1, #0
 800de4e:	2043      	movs	r0, #67	; 0x43
 800de50:	f7f3 fcdb 	bl	800180a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800de54:	2043      	movs	r0, #67	; 0x43
 800de56:	f7f3 fcf4 	bl	8001842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800de5a:	bf00      	nop
 800de5c:	3728      	adds	r7, #40	; 0x28
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
 800de62:	bf00      	nop
 800de64:	40023800 	.word	0x40023800
 800de68:	40020000 	.word	0x40020000

0800de6c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b082      	sub	sp, #8
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7fd f949 	bl	800b112 <USBH_LL_IncTimer>
}
 800de80:	bf00      	nop
 800de82:	3708      	adds	r7, #8
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800de96:	4618      	mov	r0, r3
 800de98:	f7fd f981 	bl	800b19e <USBH_LL_Connect>
}
 800de9c:	bf00      	nop
 800de9e:	3708      	adds	r7, #8
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7fd f98a 	bl	800b1cc <USBH_LL_Disconnect>
}
 800deb8:	bf00      	nop
 800deba:	3708      	adds	r7, #8
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b083      	sub	sp, #12
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	460b      	mov	r3, r1
 800deca:	70fb      	strb	r3, [r7, #3]
 800decc:	4613      	mov	r3, r2
 800dece:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ded0:	bf00      	nop
 800ded2:	370c      	adds	r7, #12
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr

0800dedc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b082      	sub	sp, #8
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800deea:	4618      	mov	r0, r3
 800deec:	f7fd f93b 	bl	800b166 <USBH_LL_PortEnabled>
}
 800def0:	bf00      	nop
 800def2:	3708      	adds	r7, #8
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}

0800def8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b082      	sub	sp, #8
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800df06:	4618      	mov	r0, r3
 800df08:	f7fd f93b 	bl	800b182 <USBH_LL_PortDisabled>
}
 800df0c:	bf00      	nop
 800df0e:	3708      	adds	r7, #8
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}

0800df14 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b082      	sub	sp, #8
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800df22:	2b01      	cmp	r3, #1
 800df24:	d12a      	bne.n	800df7c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800df26:	4a18      	ldr	r2, [pc, #96]	; (800df88 <USBH_LL_Init+0x74>)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	4a15      	ldr	r2, [pc, #84]	; (800df88 <USBH_LL_Init+0x74>)
 800df32:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800df36:	4b14      	ldr	r3, [pc, #80]	; (800df88 <USBH_LL_Init+0x74>)
 800df38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800df3c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800df3e:	4b12      	ldr	r3, [pc, #72]	; (800df88 <USBH_LL_Init+0x74>)
 800df40:	2208      	movs	r2, #8
 800df42:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800df44:	4b10      	ldr	r3, [pc, #64]	; (800df88 <USBH_LL_Init+0x74>)
 800df46:	2201      	movs	r2, #1
 800df48:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800df4a:	4b0f      	ldr	r3, [pc, #60]	; (800df88 <USBH_LL_Init+0x74>)
 800df4c:	2200      	movs	r2, #0
 800df4e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800df50:	4b0d      	ldr	r3, [pc, #52]	; (800df88 <USBH_LL_Init+0x74>)
 800df52:	2202      	movs	r2, #2
 800df54:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800df56:	4b0c      	ldr	r3, [pc, #48]	; (800df88 <USBH_LL_Init+0x74>)
 800df58:	2200      	movs	r2, #0
 800df5a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800df5c:	480a      	ldr	r0, [pc, #40]	; (800df88 <USBH_LL_Init+0x74>)
 800df5e:	f7f5 faef 	bl	8003540 <HAL_HCD_Init>
 800df62:	4603      	mov	r3, r0
 800df64:	2b00      	cmp	r3, #0
 800df66:	d001      	beq.n	800df6c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800df68:	f7f2 ff14 	bl	8000d94 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800df6c:	4806      	ldr	r0, [pc, #24]	; (800df88 <USBH_LL_Init+0x74>)
 800df6e:	f7f5 fed2 	bl	8003d16 <HAL_HCD_GetCurrentFrame>
 800df72:	4603      	mov	r3, r0
 800df74:	4619      	mov	r1, r3
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f7fd f8bc 	bl	800b0f4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800df7c:	2300      	movs	r3, #0
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3708      	adds	r7, #8
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}
 800df86:	bf00      	nop
 800df88:	200057fc 	.word	0x200057fc

0800df8c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b084      	sub	sp, #16
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df94:	2300      	movs	r3, #0
 800df96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800df98:	2300      	movs	r3, #0
 800df9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7f5 fe41 	bl	8003c2a <HAL_HCD_Start>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dfac:	7bfb      	ldrb	r3, [r7, #15]
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f000 f982 	bl	800e2b8 <USBH_Get_USB_Status>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3710      	adds	r7, #16
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}

0800dfc2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800dfc2:	b580      	push	{r7, lr}
 800dfc4:	b084      	sub	sp, #16
 800dfc6:	af00      	add	r7, sp, #0
 800dfc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7f5 fe49 	bl	8003c70 <HAL_HCD_Stop>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dfe2:	7bfb      	ldrb	r3, [r7, #15]
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f000 f967 	bl	800e2b8 <USBH_Get_USB_Status>
 800dfea:	4603      	mov	r3, r0
 800dfec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfee:	7bbb      	ldrb	r3, [r7, #14]
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3710      	adds	r7, #16
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e000:	2301      	movs	r3, #1
 800e002:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7f5 fe91 	bl	8003d32 <HAL_HCD_GetCurrentSpeed>
 800e010:	4603      	mov	r3, r0
 800e012:	2b02      	cmp	r3, #2
 800e014:	d00c      	beq.n	800e030 <USBH_LL_GetSpeed+0x38>
 800e016:	2b02      	cmp	r3, #2
 800e018:	d80d      	bhi.n	800e036 <USBH_LL_GetSpeed+0x3e>
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d002      	beq.n	800e024 <USBH_LL_GetSpeed+0x2c>
 800e01e:	2b01      	cmp	r3, #1
 800e020:	d003      	beq.n	800e02a <USBH_LL_GetSpeed+0x32>
 800e022:	e008      	b.n	800e036 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e024:	2300      	movs	r3, #0
 800e026:	73fb      	strb	r3, [r7, #15]
    break;
 800e028:	e008      	b.n	800e03c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e02a:	2301      	movs	r3, #1
 800e02c:	73fb      	strb	r3, [r7, #15]
    break;
 800e02e:	e005      	b.n	800e03c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e030:	2302      	movs	r3, #2
 800e032:	73fb      	strb	r3, [r7, #15]
    break;
 800e034:	e002      	b.n	800e03c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e036:	2301      	movs	r3, #1
 800e038:	73fb      	strb	r3, [r7, #15]
    break;
 800e03a:	bf00      	nop
  }
  return  speed;
 800e03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3710      	adds	r7, #16
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}

0800e046 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e046:	b580      	push	{r7, lr}
 800e048:	b084      	sub	sp, #16
 800e04a:	af00      	add	r7, sp, #0
 800e04c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e04e:	2300      	movs	r3, #0
 800e050:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e052:	2300      	movs	r3, #0
 800e054:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7f5 fe24 	bl	8003caa <HAL_HCD_ResetPort>
 800e062:	4603      	mov	r3, r0
 800e064:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e066:	7bfb      	ldrb	r3, [r7, #15]
 800e068:	4618      	mov	r0, r3
 800e06a:	f000 f925 	bl	800e2b8 <USBH_Get_USB_Status>
 800e06e:	4603      	mov	r3, r0
 800e070:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e072:	7bbb      	ldrb	r3, [r7, #14]
}
 800e074:	4618      	mov	r0, r3
 800e076:	3710      	adds	r7, #16
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	460b      	mov	r3, r1
 800e086:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e08e:	78fa      	ldrb	r2, [r7, #3]
 800e090:	4611      	mov	r1, r2
 800e092:	4618      	mov	r0, r3
 800e094:	f7f5 fe2b 	bl	8003cee <HAL_HCD_HC_GetXferCount>
 800e098:	4603      	mov	r3, r0
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	3708      	adds	r7, #8
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}

0800e0a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e0a2:	b590      	push	{r4, r7, lr}
 800e0a4:	b089      	sub	sp, #36	; 0x24
 800e0a6:	af04      	add	r7, sp, #16
 800e0a8:	6078      	str	r0, [r7, #4]
 800e0aa:	4608      	mov	r0, r1
 800e0ac:	4611      	mov	r1, r2
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	70fb      	strb	r3, [r7, #3]
 800e0b4:	460b      	mov	r3, r1
 800e0b6:	70bb      	strb	r3, [r7, #2]
 800e0b8:	4613      	mov	r3, r2
 800e0ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e0ca:	787c      	ldrb	r4, [r7, #1]
 800e0cc:	78ba      	ldrb	r2, [r7, #2]
 800e0ce:	78f9      	ldrb	r1, [r7, #3]
 800e0d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e0d2:	9302      	str	r3, [sp, #8]
 800e0d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e0d8:	9301      	str	r3, [sp, #4]
 800e0da:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e0de:	9300      	str	r3, [sp, #0]
 800e0e0:	4623      	mov	r3, r4
 800e0e2:	f7f5 fa8f 	bl	8003604 <HAL_HCD_HC_Init>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e0ea:	7bfb      	ldrb	r3, [r7, #15]
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f000 f8e3 	bl	800e2b8 <USBH_Get_USB_Status>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3714      	adds	r7, #20
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd90      	pop	{r4, r7, pc}

0800e100 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	460b      	mov	r3, r1
 800e10a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e10c:	2300      	movs	r3, #0
 800e10e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e110:	2300      	movs	r3, #0
 800e112:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e11a:	78fa      	ldrb	r2, [r7, #3]
 800e11c:	4611      	mov	r1, r2
 800e11e:	4618      	mov	r0, r3
 800e120:	f7f5 faff 	bl	8003722 <HAL_HCD_HC_Halt>
 800e124:	4603      	mov	r3, r0
 800e126:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e128:	7bfb      	ldrb	r3, [r7, #15]
 800e12a:	4618      	mov	r0, r3
 800e12c:	f000 f8c4 	bl	800e2b8 <USBH_Get_USB_Status>
 800e130:	4603      	mov	r3, r0
 800e132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e134:	7bbb      	ldrb	r3, [r7, #14]
}
 800e136:	4618      	mov	r0, r3
 800e138:	3710      	adds	r7, #16
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}

0800e13e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e13e:	b590      	push	{r4, r7, lr}
 800e140:	b089      	sub	sp, #36	; 0x24
 800e142:	af04      	add	r7, sp, #16
 800e144:	6078      	str	r0, [r7, #4]
 800e146:	4608      	mov	r0, r1
 800e148:	4611      	mov	r1, r2
 800e14a:	461a      	mov	r2, r3
 800e14c:	4603      	mov	r3, r0
 800e14e:	70fb      	strb	r3, [r7, #3]
 800e150:	460b      	mov	r3, r1
 800e152:	70bb      	strb	r3, [r7, #2]
 800e154:	4613      	mov	r3, r2
 800e156:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e158:	2300      	movs	r3, #0
 800e15a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e15c:	2300      	movs	r3, #0
 800e15e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e166:	787c      	ldrb	r4, [r7, #1]
 800e168:	78ba      	ldrb	r2, [r7, #2]
 800e16a:	78f9      	ldrb	r1, [r7, #3]
 800e16c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e170:	9303      	str	r3, [sp, #12]
 800e172:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e174:	9302      	str	r3, [sp, #8]
 800e176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e178:	9301      	str	r3, [sp, #4]
 800e17a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e17e:	9300      	str	r3, [sp, #0]
 800e180:	4623      	mov	r3, r4
 800e182:	f7f5 faf1 	bl	8003768 <HAL_HCD_HC_SubmitRequest>
 800e186:	4603      	mov	r3, r0
 800e188:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e18a:	7bfb      	ldrb	r3, [r7, #15]
 800e18c:	4618      	mov	r0, r3
 800e18e:	f000 f893 	bl	800e2b8 <USBH_Get_USB_Status>
 800e192:	4603      	mov	r3, r0
 800e194:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e196:	7bbb      	ldrb	r3, [r7, #14]
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3714      	adds	r7, #20
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd90      	pop	{r4, r7, pc}

0800e1a0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b082      	sub	sp, #8
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	460b      	mov	r3, r1
 800e1aa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e1b2:	78fa      	ldrb	r2, [r7, #3]
 800e1b4:	4611      	mov	r1, r2
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7f5 fd85 	bl	8003cc6 <HAL_HCD_HC_GetURBState>
 800e1bc:	4603      	mov	r3, r0
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3708      	adds	r7, #8
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}

0800e1c6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e1c6:	b580      	push	{r7, lr}
 800e1c8:	b082      	sub	sp, #8
 800e1ca:	af00      	add	r7, sp, #0
 800e1cc:	6078      	str	r0, [r7, #4]
 800e1ce:	460b      	mov	r3, r1
 800e1d0:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800e1d2:	20c8      	movs	r0, #200	; 0xc8
 800e1d4:	f7f3 fa1a 	bl	800160c <HAL_Delay>
  return USBH_OK;
 800e1d8:	2300      	movs	r3, #0
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3708      	adds	r7, #8
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}

0800e1e2 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e1e2:	b480      	push	{r7}
 800e1e4:	b085      	sub	sp, #20
 800e1e6:	af00      	add	r7, sp, #0
 800e1e8:	6078      	str	r0, [r7, #4]
 800e1ea:	460b      	mov	r3, r1
 800e1ec:	70fb      	strb	r3, [r7, #3]
 800e1ee:	4613      	mov	r3, r2
 800e1f0:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e1f8:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e1fa:	78fb      	ldrb	r3, [r7, #3]
 800e1fc:	68fa      	ldr	r2, [r7, #12]
 800e1fe:	212c      	movs	r1, #44	; 0x2c
 800e200:	fb01 f303 	mul.w	r3, r1, r3
 800e204:	4413      	add	r3, r2
 800e206:	333b      	adds	r3, #59	; 0x3b
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d009      	beq.n	800e222 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e20e:	78fb      	ldrb	r3, [r7, #3]
 800e210:	68fa      	ldr	r2, [r7, #12]
 800e212:	212c      	movs	r1, #44	; 0x2c
 800e214:	fb01 f303 	mul.w	r3, r1, r3
 800e218:	4413      	add	r3, r2
 800e21a:	3354      	adds	r3, #84	; 0x54
 800e21c:	78ba      	ldrb	r2, [r7, #2]
 800e21e:	701a      	strb	r2, [r3, #0]
 800e220:	e008      	b.n	800e234 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e222:	78fb      	ldrb	r3, [r7, #3]
 800e224:	68fa      	ldr	r2, [r7, #12]
 800e226:	212c      	movs	r1, #44	; 0x2c
 800e228:	fb01 f303 	mul.w	r3, r1, r3
 800e22c:	4413      	add	r3, r2
 800e22e:	3355      	adds	r3, #85	; 0x55
 800e230:	78ba      	ldrb	r2, [r7, #2]
 800e232:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e234:	2300      	movs	r3, #0
}
 800e236:	4618      	mov	r0, r3
 800e238:	3714      	adds	r7, #20
 800e23a:	46bd      	mov	sp, r7
 800e23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e240:	4770      	bx	lr

0800e242 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e242:	b480      	push	{r7}
 800e244:	b085      	sub	sp, #20
 800e246:	af00      	add	r7, sp, #0
 800e248:	6078      	str	r0, [r7, #4]
 800e24a:	460b      	mov	r3, r1
 800e24c:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800e24e:	2300      	movs	r3, #0
 800e250:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e258:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800e25a:	78fb      	ldrb	r3, [r7, #3]
 800e25c:	68ba      	ldr	r2, [r7, #8]
 800e25e:	212c      	movs	r1, #44	; 0x2c
 800e260:	fb01 f303 	mul.w	r3, r1, r3
 800e264:	4413      	add	r3, r2
 800e266:	333b      	adds	r3, #59	; 0x3b
 800e268:	781b      	ldrb	r3, [r3, #0]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d009      	beq.n	800e282 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800e26e:	78fb      	ldrb	r3, [r7, #3]
 800e270:	68ba      	ldr	r2, [r7, #8]
 800e272:	212c      	movs	r1, #44	; 0x2c
 800e274:	fb01 f303 	mul.w	r3, r1, r3
 800e278:	4413      	add	r3, r2
 800e27a:	3354      	adds	r3, #84	; 0x54
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	73fb      	strb	r3, [r7, #15]
 800e280:	e008      	b.n	800e294 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800e282:	78fb      	ldrb	r3, [r7, #3]
 800e284:	68ba      	ldr	r2, [r7, #8]
 800e286:	212c      	movs	r1, #44	; 0x2c
 800e288:	fb01 f303 	mul.w	r3, r1, r3
 800e28c:	4413      	add	r3, r2
 800e28e:	3355      	adds	r3, #85	; 0x55
 800e290:	781b      	ldrb	r3, [r3, #0]
 800e292:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800e294:	7bfb      	ldrb	r3, [r7, #15]
}
 800e296:	4618      	mov	r0, r3
 800e298:	3714      	adds	r7, #20
 800e29a:	46bd      	mov	sp, r7
 800e29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a0:	4770      	bx	lr

0800e2a2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e2a2:	b580      	push	{r7, lr}
 800e2a4:	b082      	sub	sp, #8
 800e2a6:	af00      	add	r7, sp, #0
 800e2a8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f7f3 f9ae 	bl	800160c <HAL_Delay>
}
 800e2b0:	bf00      	nop
 800e2b2:	3708      	adds	r7, #8
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}

0800e2b8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b085      	sub	sp, #20
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	4603      	mov	r3, r0
 800e2c0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e2c6:	79fb      	ldrb	r3, [r7, #7]
 800e2c8:	2b03      	cmp	r3, #3
 800e2ca:	d817      	bhi.n	800e2fc <USBH_Get_USB_Status+0x44>
 800e2cc:	a201      	add	r2, pc, #4	; (adr r2, 800e2d4 <USBH_Get_USB_Status+0x1c>)
 800e2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2d2:	bf00      	nop
 800e2d4:	0800e2e5 	.word	0x0800e2e5
 800e2d8:	0800e2eb 	.word	0x0800e2eb
 800e2dc:	0800e2f1 	.word	0x0800e2f1
 800e2e0:	0800e2f7 	.word	0x0800e2f7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	73fb      	strb	r3, [r7, #15]
    break;
 800e2e8:	e00b      	b.n	800e302 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e2ea:	2302      	movs	r3, #2
 800e2ec:	73fb      	strb	r3, [r7, #15]
    break;
 800e2ee:	e008      	b.n	800e302 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	73fb      	strb	r3, [r7, #15]
    break;
 800e2f4:	e005      	b.n	800e302 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e2f6:	2302      	movs	r3, #2
 800e2f8:	73fb      	strb	r3, [r7, #15]
    break;
 800e2fa:	e002      	b.n	800e302 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e2fc:	2302      	movs	r3, #2
 800e2fe:	73fb      	strb	r3, [r7, #15]
    break;
 800e300:	bf00      	nop
  }
  return usb_status;
 800e302:	7bfb      	ldrb	r3, [r7, #15]
}
 800e304:	4618      	mov	r0, r3
 800e306:	3714      	adds	r7, #20
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr

0800e310 <__errno>:
 800e310:	4b01      	ldr	r3, [pc, #4]	; (800e318 <__errno+0x8>)
 800e312:	6818      	ldr	r0, [r3, #0]
 800e314:	4770      	bx	lr
 800e316:	bf00      	nop
 800e318:	20000038 	.word	0x20000038

0800e31c <__libc_init_array>:
 800e31c:	b570      	push	{r4, r5, r6, lr}
 800e31e:	4d0d      	ldr	r5, [pc, #52]	; (800e354 <__libc_init_array+0x38>)
 800e320:	4c0d      	ldr	r4, [pc, #52]	; (800e358 <__libc_init_array+0x3c>)
 800e322:	1b64      	subs	r4, r4, r5
 800e324:	10a4      	asrs	r4, r4, #2
 800e326:	2600      	movs	r6, #0
 800e328:	42a6      	cmp	r6, r4
 800e32a:	d109      	bne.n	800e340 <__libc_init_array+0x24>
 800e32c:	4d0b      	ldr	r5, [pc, #44]	; (800e35c <__libc_init_array+0x40>)
 800e32e:	4c0c      	ldr	r4, [pc, #48]	; (800e360 <__libc_init_array+0x44>)
 800e330:	f000 fff2 	bl	800f318 <_init>
 800e334:	1b64      	subs	r4, r4, r5
 800e336:	10a4      	asrs	r4, r4, #2
 800e338:	2600      	movs	r6, #0
 800e33a:	42a6      	cmp	r6, r4
 800e33c:	d105      	bne.n	800e34a <__libc_init_array+0x2e>
 800e33e:	bd70      	pop	{r4, r5, r6, pc}
 800e340:	f855 3b04 	ldr.w	r3, [r5], #4
 800e344:	4798      	blx	r3
 800e346:	3601      	adds	r6, #1
 800e348:	e7ee      	b.n	800e328 <__libc_init_array+0xc>
 800e34a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e34e:	4798      	blx	r3
 800e350:	3601      	adds	r6, #1
 800e352:	e7f2      	b.n	800e33a <__libc_init_array+0x1e>
 800e354:	08086470 	.word	0x08086470
 800e358:	08086470 	.word	0x08086470
 800e35c:	08086470 	.word	0x08086470
 800e360:	08086474 	.word	0x08086474

0800e364 <malloc>:
 800e364:	4b02      	ldr	r3, [pc, #8]	; (800e370 <malloc+0xc>)
 800e366:	4601      	mov	r1, r0
 800e368:	6818      	ldr	r0, [r3, #0]
 800e36a:	f000 b871 	b.w	800e450 <_malloc_r>
 800e36e:	bf00      	nop
 800e370:	20000038 	.word	0x20000038

0800e374 <free>:
 800e374:	4b02      	ldr	r3, [pc, #8]	; (800e380 <free+0xc>)
 800e376:	4601      	mov	r1, r0
 800e378:	6818      	ldr	r0, [r3, #0]
 800e37a:	f000 b819 	b.w	800e3b0 <_free_r>
 800e37e:	bf00      	nop
 800e380:	20000038 	.word	0x20000038

0800e384 <memcpy>:
 800e384:	440a      	add	r2, r1
 800e386:	4291      	cmp	r1, r2
 800e388:	f100 33ff 	add.w	r3, r0, #4294967295
 800e38c:	d100      	bne.n	800e390 <memcpy+0xc>
 800e38e:	4770      	bx	lr
 800e390:	b510      	push	{r4, lr}
 800e392:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e396:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e39a:	4291      	cmp	r1, r2
 800e39c:	d1f9      	bne.n	800e392 <memcpy+0xe>
 800e39e:	bd10      	pop	{r4, pc}

0800e3a0 <memset>:
 800e3a0:	4402      	add	r2, r0
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	d100      	bne.n	800e3aa <memset+0xa>
 800e3a8:	4770      	bx	lr
 800e3aa:	f803 1b01 	strb.w	r1, [r3], #1
 800e3ae:	e7f9      	b.n	800e3a4 <memset+0x4>

0800e3b0 <_free_r>:
 800e3b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3b2:	2900      	cmp	r1, #0
 800e3b4:	d048      	beq.n	800e448 <_free_r+0x98>
 800e3b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3ba:	9001      	str	r0, [sp, #4]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	f1a1 0404 	sub.w	r4, r1, #4
 800e3c2:	bfb8      	it	lt
 800e3c4:	18e4      	addlt	r4, r4, r3
 800e3c6:	f000 f9d3 	bl	800e770 <__malloc_lock>
 800e3ca:	4a20      	ldr	r2, [pc, #128]	; (800e44c <_free_r+0x9c>)
 800e3cc:	9801      	ldr	r0, [sp, #4]
 800e3ce:	6813      	ldr	r3, [r2, #0]
 800e3d0:	4615      	mov	r5, r2
 800e3d2:	b933      	cbnz	r3, 800e3e2 <_free_r+0x32>
 800e3d4:	6063      	str	r3, [r4, #4]
 800e3d6:	6014      	str	r4, [r2, #0]
 800e3d8:	b003      	add	sp, #12
 800e3da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e3de:	f000 b9cd 	b.w	800e77c <__malloc_unlock>
 800e3e2:	42a3      	cmp	r3, r4
 800e3e4:	d90b      	bls.n	800e3fe <_free_r+0x4e>
 800e3e6:	6821      	ldr	r1, [r4, #0]
 800e3e8:	1862      	adds	r2, r4, r1
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	bf04      	itt	eq
 800e3ee:	681a      	ldreq	r2, [r3, #0]
 800e3f0:	685b      	ldreq	r3, [r3, #4]
 800e3f2:	6063      	str	r3, [r4, #4]
 800e3f4:	bf04      	itt	eq
 800e3f6:	1852      	addeq	r2, r2, r1
 800e3f8:	6022      	streq	r2, [r4, #0]
 800e3fa:	602c      	str	r4, [r5, #0]
 800e3fc:	e7ec      	b.n	800e3d8 <_free_r+0x28>
 800e3fe:	461a      	mov	r2, r3
 800e400:	685b      	ldr	r3, [r3, #4]
 800e402:	b10b      	cbz	r3, 800e408 <_free_r+0x58>
 800e404:	42a3      	cmp	r3, r4
 800e406:	d9fa      	bls.n	800e3fe <_free_r+0x4e>
 800e408:	6811      	ldr	r1, [r2, #0]
 800e40a:	1855      	adds	r5, r2, r1
 800e40c:	42a5      	cmp	r5, r4
 800e40e:	d10b      	bne.n	800e428 <_free_r+0x78>
 800e410:	6824      	ldr	r4, [r4, #0]
 800e412:	4421      	add	r1, r4
 800e414:	1854      	adds	r4, r2, r1
 800e416:	42a3      	cmp	r3, r4
 800e418:	6011      	str	r1, [r2, #0]
 800e41a:	d1dd      	bne.n	800e3d8 <_free_r+0x28>
 800e41c:	681c      	ldr	r4, [r3, #0]
 800e41e:	685b      	ldr	r3, [r3, #4]
 800e420:	6053      	str	r3, [r2, #4]
 800e422:	4421      	add	r1, r4
 800e424:	6011      	str	r1, [r2, #0]
 800e426:	e7d7      	b.n	800e3d8 <_free_r+0x28>
 800e428:	d902      	bls.n	800e430 <_free_r+0x80>
 800e42a:	230c      	movs	r3, #12
 800e42c:	6003      	str	r3, [r0, #0]
 800e42e:	e7d3      	b.n	800e3d8 <_free_r+0x28>
 800e430:	6825      	ldr	r5, [r4, #0]
 800e432:	1961      	adds	r1, r4, r5
 800e434:	428b      	cmp	r3, r1
 800e436:	bf04      	itt	eq
 800e438:	6819      	ldreq	r1, [r3, #0]
 800e43a:	685b      	ldreq	r3, [r3, #4]
 800e43c:	6063      	str	r3, [r4, #4]
 800e43e:	bf04      	itt	eq
 800e440:	1949      	addeq	r1, r1, r5
 800e442:	6021      	streq	r1, [r4, #0]
 800e444:	6054      	str	r4, [r2, #4]
 800e446:	e7c7      	b.n	800e3d8 <_free_r+0x28>
 800e448:	b003      	add	sp, #12
 800e44a:	bd30      	pop	{r4, r5, pc}
 800e44c:	20003164 	.word	0x20003164

0800e450 <_malloc_r>:
 800e450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e452:	1ccd      	adds	r5, r1, #3
 800e454:	f025 0503 	bic.w	r5, r5, #3
 800e458:	3508      	adds	r5, #8
 800e45a:	2d0c      	cmp	r5, #12
 800e45c:	bf38      	it	cc
 800e45e:	250c      	movcc	r5, #12
 800e460:	2d00      	cmp	r5, #0
 800e462:	4606      	mov	r6, r0
 800e464:	db01      	blt.n	800e46a <_malloc_r+0x1a>
 800e466:	42a9      	cmp	r1, r5
 800e468:	d903      	bls.n	800e472 <_malloc_r+0x22>
 800e46a:	230c      	movs	r3, #12
 800e46c:	6033      	str	r3, [r6, #0]
 800e46e:	2000      	movs	r0, #0
 800e470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e472:	f000 f97d 	bl	800e770 <__malloc_lock>
 800e476:	4921      	ldr	r1, [pc, #132]	; (800e4fc <_malloc_r+0xac>)
 800e478:	680a      	ldr	r2, [r1, #0]
 800e47a:	4614      	mov	r4, r2
 800e47c:	b99c      	cbnz	r4, 800e4a6 <_malloc_r+0x56>
 800e47e:	4f20      	ldr	r7, [pc, #128]	; (800e500 <_malloc_r+0xb0>)
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	b923      	cbnz	r3, 800e48e <_malloc_r+0x3e>
 800e484:	4621      	mov	r1, r4
 800e486:	4630      	mov	r0, r6
 800e488:	f000 f86a 	bl	800e560 <_sbrk_r>
 800e48c:	6038      	str	r0, [r7, #0]
 800e48e:	4629      	mov	r1, r5
 800e490:	4630      	mov	r0, r6
 800e492:	f000 f865 	bl	800e560 <_sbrk_r>
 800e496:	1c43      	adds	r3, r0, #1
 800e498:	d123      	bne.n	800e4e2 <_malloc_r+0x92>
 800e49a:	230c      	movs	r3, #12
 800e49c:	6033      	str	r3, [r6, #0]
 800e49e:	4630      	mov	r0, r6
 800e4a0:	f000 f96c 	bl	800e77c <__malloc_unlock>
 800e4a4:	e7e3      	b.n	800e46e <_malloc_r+0x1e>
 800e4a6:	6823      	ldr	r3, [r4, #0]
 800e4a8:	1b5b      	subs	r3, r3, r5
 800e4aa:	d417      	bmi.n	800e4dc <_malloc_r+0x8c>
 800e4ac:	2b0b      	cmp	r3, #11
 800e4ae:	d903      	bls.n	800e4b8 <_malloc_r+0x68>
 800e4b0:	6023      	str	r3, [r4, #0]
 800e4b2:	441c      	add	r4, r3
 800e4b4:	6025      	str	r5, [r4, #0]
 800e4b6:	e004      	b.n	800e4c2 <_malloc_r+0x72>
 800e4b8:	6863      	ldr	r3, [r4, #4]
 800e4ba:	42a2      	cmp	r2, r4
 800e4bc:	bf0c      	ite	eq
 800e4be:	600b      	streq	r3, [r1, #0]
 800e4c0:	6053      	strne	r3, [r2, #4]
 800e4c2:	4630      	mov	r0, r6
 800e4c4:	f000 f95a 	bl	800e77c <__malloc_unlock>
 800e4c8:	f104 000b 	add.w	r0, r4, #11
 800e4cc:	1d23      	adds	r3, r4, #4
 800e4ce:	f020 0007 	bic.w	r0, r0, #7
 800e4d2:	1ac2      	subs	r2, r0, r3
 800e4d4:	d0cc      	beq.n	800e470 <_malloc_r+0x20>
 800e4d6:	1a1b      	subs	r3, r3, r0
 800e4d8:	50a3      	str	r3, [r4, r2]
 800e4da:	e7c9      	b.n	800e470 <_malloc_r+0x20>
 800e4dc:	4622      	mov	r2, r4
 800e4de:	6864      	ldr	r4, [r4, #4]
 800e4e0:	e7cc      	b.n	800e47c <_malloc_r+0x2c>
 800e4e2:	1cc4      	adds	r4, r0, #3
 800e4e4:	f024 0403 	bic.w	r4, r4, #3
 800e4e8:	42a0      	cmp	r0, r4
 800e4ea:	d0e3      	beq.n	800e4b4 <_malloc_r+0x64>
 800e4ec:	1a21      	subs	r1, r4, r0
 800e4ee:	4630      	mov	r0, r6
 800e4f0:	f000 f836 	bl	800e560 <_sbrk_r>
 800e4f4:	3001      	adds	r0, #1
 800e4f6:	d1dd      	bne.n	800e4b4 <_malloc_r+0x64>
 800e4f8:	e7cf      	b.n	800e49a <_malloc_r+0x4a>
 800e4fa:	bf00      	nop
 800e4fc:	20003164 	.word	0x20003164
 800e500:	20003168 	.word	0x20003168

0800e504 <iprintf>:
 800e504:	b40f      	push	{r0, r1, r2, r3}
 800e506:	4b0a      	ldr	r3, [pc, #40]	; (800e530 <iprintf+0x2c>)
 800e508:	b513      	push	{r0, r1, r4, lr}
 800e50a:	681c      	ldr	r4, [r3, #0]
 800e50c:	b124      	cbz	r4, 800e518 <iprintf+0x14>
 800e50e:	69a3      	ldr	r3, [r4, #24]
 800e510:	b913      	cbnz	r3, 800e518 <iprintf+0x14>
 800e512:	4620      	mov	r0, r4
 800e514:	f000 f88c 	bl	800e630 <__sinit>
 800e518:	ab05      	add	r3, sp, #20
 800e51a:	9a04      	ldr	r2, [sp, #16]
 800e51c:	68a1      	ldr	r1, [r4, #8]
 800e51e:	9301      	str	r3, [sp, #4]
 800e520:	4620      	mov	r0, r4
 800e522:	f000 f95b 	bl	800e7dc <_vfiprintf_r>
 800e526:	b002      	add	sp, #8
 800e528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e52c:	b004      	add	sp, #16
 800e52e:	4770      	bx	lr
 800e530:	20000038 	.word	0x20000038

0800e534 <putchar>:
 800e534:	4b09      	ldr	r3, [pc, #36]	; (800e55c <putchar+0x28>)
 800e536:	b513      	push	{r0, r1, r4, lr}
 800e538:	681c      	ldr	r4, [r3, #0]
 800e53a:	4601      	mov	r1, r0
 800e53c:	b134      	cbz	r4, 800e54c <putchar+0x18>
 800e53e:	69a3      	ldr	r3, [r4, #24]
 800e540:	b923      	cbnz	r3, 800e54c <putchar+0x18>
 800e542:	9001      	str	r0, [sp, #4]
 800e544:	4620      	mov	r0, r4
 800e546:	f000 f873 	bl	800e630 <__sinit>
 800e54a:	9901      	ldr	r1, [sp, #4]
 800e54c:	68a2      	ldr	r2, [r4, #8]
 800e54e:	4620      	mov	r0, r4
 800e550:	b002      	add	sp, #8
 800e552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e556:	f000 bc05 	b.w	800ed64 <_putc_r>
 800e55a:	bf00      	nop
 800e55c:	20000038 	.word	0x20000038

0800e560 <_sbrk_r>:
 800e560:	b538      	push	{r3, r4, r5, lr}
 800e562:	4d06      	ldr	r5, [pc, #24]	; (800e57c <_sbrk_r+0x1c>)
 800e564:	2300      	movs	r3, #0
 800e566:	4604      	mov	r4, r0
 800e568:	4608      	mov	r0, r1
 800e56a:	602b      	str	r3, [r5, #0]
 800e56c:	f7f2 ff6a 	bl	8001444 <_sbrk>
 800e570:	1c43      	adds	r3, r0, #1
 800e572:	d102      	bne.n	800e57a <_sbrk_r+0x1a>
 800e574:	682b      	ldr	r3, [r5, #0]
 800e576:	b103      	cbz	r3, 800e57a <_sbrk_r+0x1a>
 800e578:	6023      	str	r3, [r4, #0]
 800e57a:	bd38      	pop	{r3, r4, r5, pc}
 800e57c:	20005b0c 	.word	0x20005b0c

0800e580 <std>:
 800e580:	2300      	movs	r3, #0
 800e582:	b510      	push	{r4, lr}
 800e584:	4604      	mov	r4, r0
 800e586:	e9c0 3300 	strd	r3, r3, [r0]
 800e58a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e58e:	6083      	str	r3, [r0, #8]
 800e590:	8181      	strh	r1, [r0, #12]
 800e592:	6643      	str	r3, [r0, #100]	; 0x64
 800e594:	81c2      	strh	r2, [r0, #14]
 800e596:	6183      	str	r3, [r0, #24]
 800e598:	4619      	mov	r1, r3
 800e59a:	2208      	movs	r2, #8
 800e59c:	305c      	adds	r0, #92	; 0x5c
 800e59e:	f7ff feff 	bl	800e3a0 <memset>
 800e5a2:	4b05      	ldr	r3, [pc, #20]	; (800e5b8 <std+0x38>)
 800e5a4:	6263      	str	r3, [r4, #36]	; 0x24
 800e5a6:	4b05      	ldr	r3, [pc, #20]	; (800e5bc <std+0x3c>)
 800e5a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e5aa:	4b05      	ldr	r3, [pc, #20]	; (800e5c0 <std+0x40>)
 800e5ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e5ae:	4b05      	ldr	r3, [pc, #20]	; (800e5c4 <std+0x44>)
 800e5b0:	6224      	str	r4, [r4, #32]
 800e5b2:	6323      	str	r3, [r4, #48]	; 0x30
 800e5b4:	bd10      	pop	{r4, pc}
 800e5b6:	bf00      	nop
 800e5b8:	0800edf5 	.word	0x0800edf5
 800e5bc:	0800ee17 	.word	0x0800ee17
 800e5c0:	0800ee4f 	.word	0x0800ee4f
 800e5c4:	0800ee73 	.word	0x0800ee73

0800e5c8 <_cleanup_r>:
 800e5c8:	4901      	ldr	r1, [pc, #4]	; (800e5d0 <_cleanup_r+0x8>)
 800e5ca:	f000 b8af 	b.w	800e72c <_fwalk_reent>
 800e5ce:	bf00      	nop
 800e5d0:	0800f14d 	.word	0x0800f14d

0800e5d4 <__sfmoreglue>:
 800e5d4:	b570      	push	{r4, r5, r6, lr}
 800e5d6:	1e4a      	subs	r2, r1, #1
 800e5d8:	2568      	movs	r5, #104	; 0x68
 800e5da:	4355      	muls	r5, r2
 800e5dc:	460e      	mov	r6, r1
 800e5de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e5e2:	f7ff ff35 	bl	800e450 <_malloc_r>
 800e5e6:	4604      	mov	r4, r0
 800e5e8:	b140      	cbz	r0, 800e5fc <__sfmoreglue+0x28>
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	e9c0 1600 	strd	r1, r6, [r0]
 800e5f0:	300c      	adds	r0, #12
 800e5f2:	60a0      	str	r0, [r4, #8]
 800e5f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e5f8:	f7ff fed2 	bl	800e3a0 <memset>
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	bd70      	pop	{r4, r5, r6, pc}

0800e600 <__sfp_lock_acquire>:
 800e600:	4801      	ldr	r0, [pc, #4]	; (800e608 <__sfp_lock_acquire+0x8>)
 800e602:	f000 b8b3 	b.w	800e76c <__retarget_lock_acquire_recursive>
 800e606:	bf00      	nop
 800e608:	20005b08 	.word	0x20005b08

0800e60c <__sfp_lock_release>:
 800e60c:	4801      	ldr	r0, [pc, #4]	; (800e614 <__sfp_lock_release+0x8>)
 800e60e:	f000 b8ae 	b.w	800e76e <__retarget_lock_release_recursive>
 800e612:	bf00      	nop
 800e614:	20005b08 	.word	0x20005b08

0800e618 <__sinit_lock_acquire>:
 800e618:	4801      	ldr	r0, [pc, #4]	; (800e620 <__sinit_lock_acquire+0x8>)
 800e61a:	f000 b8a7 	b.w	800e76c <__retarget_lock_acquire_recursive>
 800e61e:	bf00      	nop
 800e620:	20005b03 	.word	0x20005b03

0800e624 <__sinit_lock_release>:
 800e624:	4801      	ldr	r0, [pc, #4]	; (800e62c <__sinit_lock_release+0x8>)
 800e626:	f000 b8a2 	b.w	800e76e <__retarget_lock_release_recursive>
 800e62a:	bf00      	nop
 800e62c:	20005b03 	.word	0x20005b03

0800e630 <__sinit>:
 800e630:	b510      	push	{r4, lr}
 800e632:	4604      	mov	r4, r0
 800e634:	f7ff fff0 	bl	800e618 <__sinit_lock_acquire>
 800e638:	69a3      	ldr	r3, [r4, #24]
 800e63a:	b11b      	cbz	r3, 800e644 <__sinit+0x14>
 800e63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e640:	f7ff bff0 	b.w	800e624 <__sinit_lock_release>
 800e644:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e648:	6523      	str	r3, [r4, #80]	; 0x50
 800e64a:	4b13      	ldr	r3, [pc, #76]	; (800e698 <__sinit+0x68>)
 800e64c:	4a13      	ldr	r2, [pc, #76]	; (800e69c <__sinit+0x6c>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	62a2      	str	r2, [r4, #40]	; 0x28
 800e652:	42a3      	cmp	r3, r4
 800e654:	bf04      	itt	eq
 800e656:	2301      	moveq	r3, #1
 800e658:	61a3      	streq	r3, [r4, #24]
 800e65a:	4620      	mov	r0, r4
 800e65c:	f000 f820 	bl	800e6a0 <__sfp>
 800e660:	6060      	str	r0, [r4, #4]
 800e662:	4620      	mov	r0, r4
 800e664:	f000 f81c 	bl	800e6a0 <__sfp>
 800e668:	60a0      	str	r0, [r4, #8]
 800e66a:	4620      	mov	r0, r4
 800e66c:	f000 f818 	bl	800e6a0 <__sfp>
 800e670:	2200      	movs	r2, #0
 800e672:	60e0      	str	r0, [r4, #12]
 800e674:	2104      	movs	r1, #4
 800e676:	6860      	ldr	r0, [r4, #4]
 800e678:	f7ff ff82 	bl	800e580 <std>
 800e67c:	68a0      	ldr	r0, [r4, #8]
 800e67e:	2201      	movs	r2, #1
 800e680:	2109      	movs	r1, #9
 800e682:	f7ff ff7d 	bl	800e580 <std>
 800e686:	68e0      	ldr	r0, [r4, #12]
 800e688:	2202      	movs	r2, #2
 800e68a:	2112      	movs	r1, #18
 800e68c:	f7ff ff78 	bl	800e580 <std>
 800e690:	2301      	movs	r3, #1
 800e692:	61a3      	str	r3, [r4, #24]
 800e694:	e7d2      	b.n	800e63c <__sinit+0xc>
 800e696:	bf00      	nop
 800e698:	080863d0 	.word	0x080863d0
 800e69c:	0800e5c9 	.word	0x0800e5c9

0800e6a0 <__sfp>:
 800e6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6a2:	4607      	mov	r7, r0
 800e6a4:	f7ff ffac 	bl	800e600 <__sfp_lock_acquire>
 800e6a8:	4b1e      	ldr	r3, [pc, #120]	; (800e724 <__sfp+0x84>)
 800e6aa:	681e      	ldr	r6, [r3, #0]
 800e6ac:	69b3      	ldr	r3, [r6, #24]
 800e6ae:	b913      	cbnz	r3, 800e6b6 <__sfp+0x16>
 800e6b0:	4630      	mov	r0, r6
 800e6b2:	f7ff ffbd 	bl	800e630 <__sinit>
 800e6b6:	3648      	adds	r6, #72	; 0x48
 800e6b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e6bc:	3b01      	subs	r3, #1
 800e6be:	d503      	bpl.n	800e6c8 <__sfp+0x28>
 800e6c0:	6833      	ldr	r3, [r6, #0]
 800e6c2:	b30b      	cbz	r3, 800e708 <__sfp+0x68>
 800e6c4:	6836      	ldr	r6, [r6, #0]
 800e6c6:	e7f7      	b.n	800e6b8 <__sfp+0x18>
 800e6c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e6cc:	b9d5      	cbnz	r5, 800e704 <__sfp+0x64>
 800e6ce:	4b16      	ldr	r3, [pc, #88]	; (800e728 <__sfp+0x88>)
 800e6d0:	60e3      	str	r3, [r4, #12]
 800e6d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e6d6:	6665      	str	r5, [r4, #100]	; 0x64
 800e6d8:	f000 f847 	bl	800e76a <__retarget_lock_init_recursive>
 800e6dc:	f7ff ff96 	bl	800e60c <__sfp_lock_release>
 800e6e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e6e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e6e8:	6025      	str	r5, [r4, #0]
 800e6ea:	61a5      	str	r5, [r4, #24]
 800e6ec:	2208      	movs	r2, #8
 800e6ee:	4629      	mov	r1, r5
 800e6f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e6f4:	f7ff fe54 	bl	800e3a0 <memset>
 800e6f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e6fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e700:	4620      	mov	r0, r4
 800e702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e704:	3468      	adds	r4, #104	; 0x68
 800e706:	e7d9      	b.n	800e6bc <__sfp+0x1c>
 800e708:	2104      	movs	r1, #4
 800e70a:	4638      	mov	r0, r7
 800e70c:	f7ff ff62 	bl	800e5d4 <__sfmoreglue>
 800e710:	4604      	mov	r4, r0
 800e712:	6030      	str	r0, [r6, #0]
 800e714:	2800      	cmp	r0, #0
 800e716:	d1d5      	bne.n	800e6c4 <__sfp+0x24>
 800e718:	f7ff ff78 	bl	800e60c <__sfp_lock_release>
 800e71c:	230c      	movs	r3, #12
 800e71e:	603b      	str	r3, [r7, #0]
 800e720:	e7ee      	b.n	800e700 <__sfp+0x60>
 800e722:	bf00      	nop
 800e724:	080863d0 	.word	0x080863d0
 800e728:	ffff0001 	.word	0xffff0001

0800e72c <_fwalk_reent>:
 800e72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e730:	4606      	mov	r6, r0
 800e732:	4688      	mov	r8, r1
 800e734:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e738:	2700      	movs	r7, #0
 800e73a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e73e:	f1b9 0901 	subs.w	r9, r9, #1
 800e742:	d505      	bpl.n	800e750 <_fwalk_reent+0x24>
 800e744:	6824      	ldr	r4, [r4, #0]
 800e746:	2c00      	cmp	r4, #0
 800e748:	d1f7      	bne.n	800e73a <_fwalk_reent+0xe>
 800e74a:	4638      	mov	r0, r7
 800e74c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e750:	89ab      	ldrh	r3, [r5, #12]
 800e752:	2b01      	cmp	r3, #1
 800e754:	d907      	bls.n	800e766 <_fwalk_reent+0x3a>
 800e756:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e75a:	3301      	adds	r3, #1
 800e75c:	d003      	beq.n	800e766 <_fwalk_reent+0x3a>
 800e75e:	4629      	mov	r1, r5
 800e760:	4630      	mov	r0, r6
 800e762:	47c0      	blx	r8
 800e764:	4307      	orrs	r7, r0
 800e766:	3568      	adds	r5, #104	; 0x68
 800e768:	e7e9      	b.n	800e73e <_fwalk_reent+0x12>

0800e76a <__retarget_lock_init_recursive>:
 800e76a:	4770      	bx	lr

0800e76c <__retarget_lock_acquire_recursive>:
 800e76c:	4770      	bx	lr

0800e76e <__retarget_lock_release_recursive>:
 800e76e:	4770      	bx	lr

0800e770 <__malloc_lock>:
 800e770:	4801      	ldr	r0, [pc, #4]	; (800e778 <__malloc_lock+0x8>)
 800e772:	f7ff bffb 	b.w	800e76c <__retarget_lock_acquire_recursive>
 800e776:	bf00      	nop
 800e778:	20005b04 	.word	0x20005b04

0800e77c <__malloc_unlock>:
 800e77c:	4801      	ldr	r0, [pc, #4]	; (800e784 <__malloc_unlock+0x8>)
 800e77e:	f7ff bff6 	b.w	800e76e <__retarget_lock_release_recursive>
 800e782:	bf00      	nop
 800e784:	20005b04 	.word	0x20005b04

0800e788 <__sfputc_r>:
 800e788:	6893      	ldr	r3, [r2, #8]
 800e78a:	3b01      	subs	r3, #1
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	b410      	push	{r4}
 800e790:	6093      	str	r3, [r2, #8]
 800e792:	da08      	bge.n	800e7a6 <__sfputc_r+0x1e>
 800e794:	6994      	ldr	r4, [r2, #24]
 800e796:	42a3      	cmp	r3, r4
 800e798:	db01      	blt.n	800e79e <__sfputc_r+0x16>
 800e79a:	290a      	cmp	r1, #10
 800e79c:	d103      	bne.n	800e7a6 <__sfputc_r+0x1e>
 800e79e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7a2:	f000 bb6b 	b.w	800ee7c <__swbuf_r>
 800e7a6:	6813      	ldr	r3, [r2, #0]
 800e7a8:	1c58      	adds	r0, r3, #1
 800e7aa:	6010      	str	r0, [r2, #0]
 800e7ac:	7019      	strb	r1, [r3, #0]
 800e7ae:	4608      	mov	r0, r1
 800e7b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7b4:	4770      	bx	lr

0800e7b6 <__sfputs_r>:
 800e7b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7b8:	4606      	mov	r6, r0
 800e7ba:	460f      	mov	r7, r1
 800e7bc:	4614      	mov	r4, r2
 800e7be:	18d5      	adds	r5, r2, r3
 800e7c0:	42ac      	cmp	r4, r5
 800e7c2:	d101      	bne.n	800e7c8 <__sfputs_r+0x12>
 800e7c4:	2000      	movs	r0, #0
 800e7c6:	e007      	b.n	800e7d8 <__sfputs_r+0x22>
 800e7c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7cc:	463a      	mov	r2, r7
 800e7ce:	4630      	mov	r0, r6
 800e7d0:	f7ff ffda 	bl	800e788 <__sfputc_r>
 800e7d4:	1c43      	adds	r3, r0, #1
 800e7d6:	d1f3      	bne.n	800e7c0 <__sfputs_r+0xa>
 800e7d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e7dc <_vfiprintf_r>:
 800e7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7e0:	460d      	mov	r5, r1
 800e7e2:	b09d      	sub	sp, #116	; 0x74
 800e7e4:	4614      	mov	r4, r2
 800e7e6:	4698      	mov	r8, r3
 800e7e8:	4606      	mov	r6, r0
 800e7ea:	b118      	cbz	r0, 800e7f4 <_vfiprintf_r+0x18>
 800e7ec:	6983      	ldr	r3, [r0, #24]
 800e7ee:	b90b      	cbnz	r3, 800e7f4 <_vfiprintf_r+0x18>
 800e7f0:	f7ff ff1e 	bl	800e630 <__sinit>
 800e7f4:	4b89      	ldr	r3, [pc, #548]	; (800ea1c <_vfiprintf_r+0x240>)
 800e7f6:	429d      	cmp	r5, r3
 800e7f8:	d11b      	bne.n	800e832 <_vfiprintf_r+0x56>
 800e7fa:	6875      	ldr	r5, [r6, #4]
 800e7fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7fe:	07d9      	lsls	r1, r3, #31
 800e800:	d405      	bmi.n	800e80e <_vfiprintf_r+0x32>
 800e802:	89ab      	ldrh	r3, [r5, #12]
 800e804:	059a      	lsls	r2, r3, #22
 800e806:	d402      	bmi.n	800e80e <_vfiprintf_r+0x32>
 800e808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e80a:	f7ff ffaf 	bl	800e76c <__retarget_lock_acquire_recursive>
 800e80e:	89ab      	ldrh	r3, [r5, #12]
 800e810:	071b      	lsls	r3, r3, #28
 800e812:	d501      	bpl.n	800e818 <_vfiprintf_r+0x3c>
 800e814:	692b      	ldr	r3, [r5, #16]
 800e816:	b9eb      	cbnz	r3, 800e854 <_vfiprintf_r+0x78>
 800e818:	4629      	mov	r1, r5
 800e81a:	4630      	mov	r0, r6
 800e81c:	f000 fb92 	bl	800ef44 <__swsetup_r>
 800e820:	b1c0      	cbz	r0, 800e854 <_vfiprintf_r+0x78>
 800e822:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e824:	07dc      	lsls	r4, r3, #31
 800e826:	d50e      	bpl.n	800e846 <_vfiprintf_r+0x6a>
 800e828:	f04f 30ff 	mov.w	r0, #4294967295
 800e82c:	b01d      	add	sp, #116	; 0x74
 800e82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e832:	4b7b      	ldr	r3, [pc, #492]	; (800ea20 <_vfiprintf_r+0x244>)
 800e834:	429d      	cmp	r5, r3
 800e836:	d101      	bne.n	800e83c <_vfiprintf_r+0x60>
 800e838:	68b5      	ldr	r5, [r6, #8]
 800e83a:	e7df      	b.n	800e7fc <_vfiprintf_r+0x20>
 800e83c:	4b79      	ldr	r3, [pc, #484]	; (800ea24 <_vfiprintf_r+0x248>)
 800e83e:	429d      	cmp	r5, r3
 800e840:	bf08      	it	eq
 800e842:	68f5      	ldreq	r5, [r6, #12]
 800e844:	e7da      	b.n	800e7fc <_vfiprintf_r+0x20>
 800e846:	89ab      	ldrh	r3, [r5, #12]
 800e848:	0598      	lsls	r0, r3, #22
 800e84a:	d4ed      	bmi.n	800e828 <_vfiprintf_r+0x4c>
 800e84c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e84e:	f7ff ff8e 	bl	800e76e <__retarget_lock_release_recursive>
 800e852:	e7e9      	b.n	800e828 <_vfiprintf_r+0x4c>
 800e854:	2300      	movs	r3, #0
 800e856:	9309      	str	r3, [sp, #36]	; 0x24
 800e858:	2320      	movs	r3, #32
 800e85a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e85e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e862:	2330      	movs	r3, #48	; 0x30
 800e864:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ea28 <_vfiprintf_r+0x24c>
 800e868:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e86c:	f04f 0901 	mov.w	r9, #1
 800e870:	4623      	mov	r3, r4
 800e872:	469a      	mov	sl, r3
 800e874:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e878:	b10a      	cbz	r2, 800e87e <_vfiprintf_r+0xa2>
 800e87a:	2a25      	cmp	r2, #37	; 0x25
 800e87c:	d1f9      	bne.n	800e872 <_vfiprintf_r+0x96>
 800e87e:	ebba 0b04 	subs.w	fp, sl, r4
 800e882:	d00b      	beq.n	800e89c <_vfiprintf_r+0xc0>
 800e884:	465b      	mov	r3, fp
 800e886:	4622      	mov	r2, r4
 800e888:	4629      	mov	r1, r5
 800e88a:	4630      	mov	r0, r6
 800e88c:	f7ff ff93 	bl	800e7b6 <__sfputs_r>
 800e890:	3001      	adds	r0, #1
 800e892:	f000 80aa 	beq.w	800e9ea <_vfiprintf_r+0x20e>
 800e896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e898:	445a      	add	r2, fp
 800e89a:	9209      	str	r2, [sp, #36]	; 0x24
 800e89c:	f89a 3000 	ldrb.w	r3, [sl]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	f000 80a2 	beq.w	800e9ea <_vfiprintf_r+0x20e>
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8b0:	f10a 0a01 	add.w	sl, sl, #1
 800e8b4:	9304      	str	r3, [sp, #16]
 800e8b6:	9307      	str	r3, [sp, #28]
 800e8b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e8bc:	931a      	str	r3, [sp, #104]	; 0x68
 800e8be:	4654      	mov	r4, sl
 800e8c0:	2205      	movs	r2, #5
 800e8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8c6:	4858      	ldr	r0, [pc, #352]	; (800ea28 <_vfiprintf_r+0x24c>)
 800e8c8:	f7f1 fc82 	bl	80001d0 <memchr>
 800e8cc:	9a04      	ldr	r2, [sp, #16]
 800e8ce:	b9d8      	cbnz	r0, 800e908 <_vfiprintf_r+0x12c>
 800e8d0:	06d1      	lsls	r1, r2, #27
 800e8d2:	bf44      	itt	mi
 800e8d4:	2320      	movmi	r3, #32
 800e8d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8da:	0713      	lsls	r3, r2, #28
 800e8dc:	bf44      	itt	mi
 800e8de:	232b      	movmi	r3, #43	; 0x2b
 800e8e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8e4:	f89a 3000 	ldrb.w	r3, [sl]
 800e8e8:	2b2a      	cmp	r3, #42	; 0x2a
 800e8ea:	d015      	beq.n	800e918 <_vfiprintf_r+0x13c>
 800e8ec:	9a07      	ldr	r2, [sp, #28]
 800e8ee:	4654      	mov	r4, sl
 800e8f0:	2000      	movs	r0, #0
 800e8f2:	f04f 0c0a 	mov.w	ip, #10
 800e8f6:	4621      	mov	r1, r4
 800e8f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8fc:	3b30      	subs	r3, #48	; 0x30
 800e8fe:	2b09      	cmp	r3, #9
 800e900:	d94e      	bls.n	800e9a0 <_vfiprintf_r+0x1c4>
 800e902:	b1b0      	cbz	r0, 800e932 <_vfiprintf_r+0x156>
 800e904:	9207      	str	r2, [sp, #28]
 800e906:	e014      	b.n	800e932 <_vfiprintf_r+0x156>
 800e908:	eba0 0308 	sub.w	r3, r0, r8
 800e90c:	fa09 f303 	lsl.w	r3, r9, r3
 800e910:	4313      	orrs	r3, r2
 800e912:	9304      	str	r3, [sp, #16]
 800e914:	46a2      	mov	sl, r4
 800e916:	e7d2      	b.n	800e8be <_vfiprintf_r+0xe2>
 800e918:	9b03      	ldr	r3, [sp, #12]
 800e91a:	1d19      	adds	r1, r3, #4
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	9103      	str	r1, [sp, #12]
 800e920:	2b00      	cmp	r3, #0
 800e922:	bfbb      	ittet	lt
 800e924:	425b      	neglt	r3, r3
 800e926:	f042 0202 	orrlt.w	r2, r2, #2
 800e92a:	9307      	strge	r3, [sp, #28]
 800e92c:	9307      	strlt	r3, [sp, #28]
 800e92e:	bfb8      	it	lt
 800e930:	9204      	strlt	r2, [sp, #16]
 800e932:	7823      	ldrb	r3, [r4, #0]
 800e934:	2b2e      	cmp	r3, #46	; 0x2e
 800e936:	d10c      	bne.n	800e952 <_vfiprintf_r+0x176>
 800e938:	7863      	ldrb	r3, [r4, #1]
 800e93a:	2b2a      	cmp	r3, #42	; 0x2a
 800e93c:	d135      	bne.n	800e9aa <_vfiprintf_r+0x1ce>
 800e93e:	9b03      	ldr	r3, [sp, #12]
 800e940:	1d1a      	adds	r2, r3, #4
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	9203      	str	r2, [sp, #12]
 800e946:	2b00      	cmp	r3, #0
 800e948:	bfb8      	it	lt
 800e94a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e94e:	3402      	adds	r4, #2
 800e950:	9305      	str	r3, [sp, #20]
 800e952:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ea38 <_vfiprintf_r+0x25c>
 800e956:	7821      	ldrb	r1, [r4, #0]
 800e958:	2203      	movs	r2, #3
 800e95a:	4650      	mov	r0, sl
 800e95c:	f7f1 fc38 	bl	80001d0 <memchr>
 800e960:	b140      	cbz	r0, 800e974 <_vfiprintf_r+0x198>
 800e962:	2340      	movs	r3, #64	; 0x40
 800e964:	eba0 000a 	sub.w	r0, r0, sl
 800e968:	fa03 f000 	lsl.w	r0, r3, r0
 800e96c:	9b04      	ldr	r3, [sp, #16]
 800e96e:	4303      	orrs	r3, r0
 800e970:	3401      	adds	r4, #1
 800e972:	9304      	str	r3, [sp, #16]
 800e974:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e978:	482c      	ldr	r0, [pc, #176]	; (800ea2c <_vfiprintf_r+0x250>)
 800e97a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e97e:	2206      	movs	r2, #6
 800e980:	f7f1 fc26 	bl	80001d0 <memchr>
 800e984:	2800      	cmp	r0, #0
 800e986:	d03f      	beq.n	800ea08 <_vfiprintf_r+0x22c>
 800e988:	4b29      	ldr	r3, [pc, #164]	; (800ea30 <_vfiprintf_r+0x254>)
 800e98a:	bb1b      	cbnz	r3, 800e9d4 <_vfiprintf_r+0x1f8>
 800e98c:	9b03      	ldr	r3, [sp, #12]
 800e98e:	3307      	adds	r3, #7
 800e990:	f023 0307 	bic.w	r3, r3, #7
 800e994:	3308      	adds	r3, #8
 800e996:	9303      	str	r3, [sp, #12]
 800e998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e99a:	443b      	add	r3, r7
 800e99c:	9309      	str	r3, [sp, #36]	; 0x24
 800e99e:	e767      	b.n	800e870 <_vfiprintf_r+0x94>
 800e9a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9a4:	460c      	mov	r4, r1
 800e9a6:	2001      	movs	r0, #1
 800e9a8:	e7a5      	b.n	800e8f6 <_vfiprintf_r+0x11a>
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	3401      	adds	r4, #1
 800e9ae:	9305      	str	r3, [sp, #20]
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	f04f 0c0a 	mov.w	ip, #10
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9bc:	3a30      	subs	r2, #48	; 0x30
 800e9be:	2a09      	cmp	r2, #9
 800e9c0:	d903      	bls.n	800e9ca <_vfiprintf_r+0x1ee>
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d0c5      	beq.n	800e952 <_vfiprintf_r+0x176>
 800e9c6:	9105      	str	r1, [sp, #20]
 800e9c8:	e7c3      	b.n	800e952 <_vfiprintf_r+0x176>
 800e9ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9ce:	4604      	mov	r4, r0
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	e7f0      	b.n	800e9b6 <_vfiprintf_r+0x1da>
 800e9d4:	ab03      	add	r3, sp, #12
 800e9d6:	9300      	str	r3, [sp, #0]
 800e9d8:	462a      	mov	r2, r5
 800e9da:	4b16      	ldr	r3, [pc, #88]	; (800ea34 <_vfiprintf_r+0x258>)
 800e9dc:	a904      	add	r1, sp, #16
 800e9de:	4630      	mov	r0, r6
 800e9e0:	f3af 8000 	nop.w
 800e9e4:	4607      	mov	r7, r0
 800e9e6:	1c78      	adds	r0, r7, #1
 800e9e8:	d1d6      	bne.n	800e998 <_vfiprintf_r+0x1bc>
 800e9ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9ec:	07d9      	lsls	r1, r3, #31
 800e9ee:	d405      	bmi.n	800e9fc <_vfiprintf_r+0x220>
 800e9f0:	89ab      	ldrh	r3, [r5, #12]
 800e9f2:	059a      	lsls	r2, r3, #22
 800e9f4:	d402      	bmi.n	800e9fc <_vfiprintf_r+0x220>
 800e9f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9f8:	f7ff feb9 	bl	800e76e <__retarget_lock_release_recursive>
 800e9fc:	89ab      	ldrh	r3, [r5, #12]
 800e9fe:	065b      	lsls	r3, r3, #25
 800ea00:	f53f af12 	bmi.w	800e828 <_vfiprintf_r+0x4c>
 800ea04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea06:	e711      	b.n	800e82c <_vfiprintf_r+0x50>
 800ea08:	ab03      	add	r3, sp, #12
 800ea0a:	9300      	str	r3, [sp, #0]
 800ea0c:	462a      	mov	r2, r5
 800ea0e:	4b09      	ldr	r3, [pc, #36]	; (800ea34 <_vfiprintf_r+0x258>)
 800ea10:	a904      	add	r1, sp, #16
 800ea12:	4630      	mov	r0, r6
 800ea14:	f000 f880 	bl	800eb18 <_printf_i>
 800ea18:	e7e4      	b.n	800e9e4 <_vfiprintf_r+0x208>
 800ea1a:	bf00      	nop
 800ea1c:	080863f4 	.word	0x080863f4
 800ea20:	08086414 	.word	0x08086414
 800ea24:	080863d4 	.word	0x080863d4
 800ea28:	08086434 	.word	0x08086434
 800ea2c:	0808643e 	.word	0x0808643e
 800ea30:	00000000 	.word	0x00000000
 800ea34:	0800e7b7 	.word	0x0800e7b7
 800ea38:	0808643a 	.word	0x0808643a

0800ea3c <_printf_common>:
 800ea3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea40:	4616      	mov	r6, r2
 800ea42:	4699      	mov	r9, r3
 800ea44:	688a      	ldr	r2, [r1, #8]
 800ea46:	690b      	ldr	r3, [r1, #16]
 800ea48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ea4c:	4293      	cmp	r3, r2
 800ea4e:	bfb8      	it	lt
 800ea50:	4613      	movlt	r3, r2
 800ea52:	6033      	str	r3, [r6, #0]
 800ea54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ea58:	4607      	mov	r7, r0
 800ea5a:	460c      	mov	r4, r1
 800ea5c:	b10a      	cbz	r2, 800ea62 <_printf_common+0x26>
 800ea5e:	3301      	adds	r3, #1
 800ea60:	6033      	str	r3, [r6, #0]
 800ea62:	6823      	ldr	r3, [r4, #0]
 800ea64:	0699      	lsls	r1, r3, #26
 800ea66:	bf42      	ittt	mi
 800ea68:	6833      	ldrmi	r3, [r6, #0]
 800ea6a:	3302      	addmi	r3, #2
 800ea6c:	6033      	strmi	r3, [r6, #0]
 800ea6e:	6825      	ldr	r5, [r4, #0]
 800ea70:	f015 0506 	ands.w	r5, r5, #6
 800ea74:	d106      	bne.n	800ea84 <_printf_common+0x48>
 800ea76:	f104 0a19 	add.w	sl, r4, #25
 800ea7a:	68e3      	ldr	r3, [r4, #12]
 800ea7c:	6832      	ldr	r2, [r6, #0]
 800ea7e:	1a9b      	subs	r3, r3, r2
 800ea80:	42ab      	cmp	r3, r5
 800ea82:	dc26      	bgt.n	800ead2 <_printf_common+0x96>
 800ea84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ea88:	1e13      	subs	r3, r2, #0
 800ea8a:	6822      	ldr	r2, [r4, #0]
 800ea8c:	bf18      	it	ne
 800ea8e:	2301      	movne	r3, #1
 800ea90:	0692      	lsls	r2, r2, #26
 800ea92:	d42b      	bmi.n	800eaec <_printf_common+0xb0>
 800ea94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ea98:	4649      	mov	r1, r9
 800ea9a:	4638      	mov	r0, r7
 800ea9c:	47c0      	blx	r8
 800ea9e:	3001      	adds	r0, #1
 800eaa0:	d01e      	beq.n	800eae0 <_printf_common+0xa4>
 800eaa2:	6823      	ldr	r3, [r4, #0]
 800eaa4:	68e5      	ldr	r5, [r4, #12]
 800eaa6:	6832      	ldr	r2, [r6, #0]
 800eaa8:	f003 0306 	and.w	r3, r3, #6
 800eaac:	2b04      	cmp	r3, #4
 800eaae:	bf08      	it	eq
 800eab0:	1aad      	subeq	r5, r5, r2
 800eab2:	68a3      	ldr	r3, [r4, #8]
 800eab4:	6922      	ldr	r2, [r4, #16]
 800eab6:	bf0c      	ite	eq
 800eab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eabc:	2500      	movne	r5, #0
 800eabe:	4293      	cmp	r3, r2
 800eac0:	bfc4      	itt	gt
 800eac2:	1a9b      	subgt	r3, r3, r2
 800eac4:	18ed      	addgt	r5, r5, r3
 800eac6:	2600      	movs	r6, #0
 800eac8:	341a      	adds	r4, #26
 800eaca:	42b5      	cmp	r5, r6
 800eacc:	d11a      	bne.n	800eb04 <_printf_common+0xc8>
 800eace:	2000      	movs	r0, #0
 800ead0:	e008      	b.n	800eae4 <_printf_common+0xa8>
 800ead2:	2301      	movs	r3, #1
 800ead4:	4652      	mov	r2, sl
 800ead6:	4649      	mov	r1, r9
 800ead8:	4638      	mov	r0, r7
 800eada:	47c0      	blx	r8
 800eadc:	3001      	adds	r0, #1
 800eade:	d103      	bne.n	800eae8 <_printf_common+0xac>
 800eae0:	f04f 30ff 	mov.w	r0, #4294967295
 800eae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eae8:	3501      	adds	r5, #1
 800eaea:	e7c6      	b.n	800ea7a <_printf_common+0x3e>
 800eaec:	18e1      	adds	r1, r4, r3
 800eaee:	1c5a      	adds	r2, r3, #1
 800eaf0:	2030      	movs	r0, #48	; 0x30
 800eaf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eaf6:	4422      	add	r2, r4
 800eaf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eafc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eb00:	3302      	adds	r3, #2
 800eb02:	e7c7      	b.n	800ea94 <_printf_common+0x58>
 800eb04:	2301      	movs	r3, #1
 800eb06:	4622      	mov	r2, r4
 800eb08:	4649      	mov	r1, r9
 800eb0a:	4638      	mov	r0, r7
 800eb0c:	47c0      	blx	r8
 800eb0e:	3001      	adds	r0, #1
 800eb10:	d0e6      	beq.n	800eae0 <_printf_common+0xa4>
 800eb12:	3601      	adds	r6, #1
 800eb14:	e7d9      	b.n	800eaca <_printf_common+0x8e>
	...

0800eb18 <_printf_i>:
 800eb18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb1c:	460c      	mov	r4, r1
 800eb1e:	4691      	mov	r9, r2
 800eb20:	7e27      	ldrb	r7, [r4, #24]
 800eb22:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eb24:	2f78      	cmp	r7, #120	; 0x78
 800eb26:	4680      	mov	r8, r0
 800eb28:	469a      	mov	sl, r3
 800eb2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb2e:	d807      	bhi.n	800eb40 <_printf_i+0x28>
 800eb30:	2f62      	cmp	r7, #98	; 0x62
 800eb32:	d80a      	bhi.n	800eb4a <_printf_i+0x32>
 800eb34:	2f00      	cmp	r7, #0
 800eb36:	f000 80d8 	beq.w	800ecea <_printf_i+0x1d2>
 800eb3a:	2f58      	cmp	r7, #88	; 0x58
 800eb3c:	f000 80a3 	beq.w	800ec86 <_printf_i+0x16e>
 800eb40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eb44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eb48:	e03a      	b.n	800ebc0 <_printf_i+0xa8>
 800eb4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eb4e:	2b15      	cmp	r3, #21
 800eb50:	d8f6      	bhi.n	800eb40 <_printf_i+0x28>
 800eb52:	a001      	add	r0, pc, #4	; (adr r0, 800eb58 <_printf_i+0x40>)
 800eb54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800eb58:	0800ebb1 	.word	0x0800ebb1
 800eb5c:	0800ebc5 	.word	0x0800ebc5
 800eb60:	0800eb41 	.word	0x0800eb41
 800eb64:	0800eb41 	.word	0x0800eb41
 800eb68:	0800eb41 	.word	0x0800eb41
 800eb6c:	0800eb41 	.word	0x0800eb41
 800eb70:	0800ebc5 	.word	0x0800ebc5
 800eb74:	0800eb41 	.word	0x0800eb41
 800eb78:	0800eb41 	.word	0x0800eb41
 800eb7c:	0800eb41 	.word	0x0800eb41
 800eb80:	0800eb41 	.word	0x0800eb41
 800eb84:	0800ecd1 	.word	0x0800ecd1
 800eb88:	0800ebf5 	.word	0x0800ebf5
 800eb8c:	0800ecb3 	.word	0x0800ecb3
 800eb90:	0800eb41 	.word	0x0800eb41
 800eb94:	0800eb41 	.word	0x0800eb41
 800eb98:	0800ecf3 	.word	0x0800ecf3
 800eb9c:	0800eb41 	.word	0x0800eb41
 800eba0:	0800ebf5 	.word	0x0800ebf5
 800eba4:	0800eb41 	.word	0x0800eb41
 800eba8:	0800eb41 	.word	0x0800eb41
 800ebac:	0800ecbb 	.word	0x0800ecbb
 800ebb0:	680b      	ldr	r3, [r1, #0]
 800ebb2:	1d1a      	adds	r2, r3, #4
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	600a      	str	r2, [r1, #0]
 800ebb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ebbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	e0a3      	b.n	800ed0c <_printf_i+0x1f4>
 800ebc4:	6825      	ldr	r5, [r4, #0]
 800ebc6:	6808      	ldr	r0, [r1, #0]
 800ebc8:	062e      	lsls	r6, r5, #24
 800ebca:	f100 0304 	add.w	r3, r0, #4
 800ebce:	d50a      	bpl.n	800ebe6 <_printf_i+0xce>
 800ebd0:	6805      	ldr	r5, [r0, #0]
 800ebd2:	600b      	str	r3, [r1, #0]
 800ebd4:	2d00      	cmp	r5, #0
 800ebd6:	da03      	bge.n	800ebe0 <_printf_i+0xc8>
 800ebd8:	232d      	movs	r3, #45	; 0x2d
 800ebda:	426d      	negs	r5, r5
 800ebdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebe0:	485e      	ldr	r0, [pc, #376]	; (800ed5c <_printf_i+0x244>)
 800ebe2:	230a      	movs	r3, #10
 800ebe4:	e019      	b.n	800ec1a <_printf_i+0x102>
 800ebe6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ebea:	6805      	ldr	r5, [r0, #0]
 800ebec:	600b      	str	r3, [r1, #0]
 800ebee:	bf18      	it	ne
 800ebf0:	b22d      	sxthne	r5, r5
 800ebf2:	e7ef      	b.n	800ebd4 <_printf_i+0xbc>
 800ebf4:	680b      	ldr	r3, [r1, #0]
 800ebf6:	6825      	ldr	r5, [r4, #0]
 800ebf8:	1d18      	adds	r0, r3, #4
 800ebfa:	6008      	str	r0, [r1, #0]
 800ebfc:	0628      	lsls	r0, r5, #24
 800ebfe:	d501      	bpl.n	800ec04 <_printf_i+0xec>
 800ec00:	681d      	ldr	r5, [r3, #0]
 800ec02:	e002      	b.n	800ec0a <_printf_i+0xf2>
 800ec04:	0669      	lsls	r1, r5, #25
 800ec06:	d5fb      	bpl.n	800ec00 <_printf_i+0xe8>
 800ec08:	881d      	ldrh	r5, [r3, #0]
 800ec0a:	4854      	ldr	r0, [pc, #336]	; (800ed5c <_printf_i+0x244>)
 800ec0c:	2f6f      	cmp	r7, #111	; 0x6f
 800ec0e:	bf0c      	ite	eq
 800ec10:	2308      	moveq	r3, #8
 800ec12:	230a      	movne	r3, #10
 800ec14:	2100      	movs	r1, #0
 800ec16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ec1a:	6866      	ldr	r6, [r4, #4]
 800ec1c:	60a6      	str	r6, [r4, #8]
 800ec1e:	2e00      	cmp	r6, #0
 800ec20:	bfa2      	ittt	ge
 800ec22:	6821      	ldrge	r1, [r4, #0]
 800ec24:	f021 0104 	bicge.w	r1, r1, #4
 800ec28:	6021      	strge	r1, [r4, #0]
 800ec2a:	b90d      	cbnz	r5, 800ec30 <_printf_i+0x118>
 800ec2c:	2e00      	cmp	r6, #0
 800ec2e:	d04d      	beq.n	800eccc <_printf_i+0x1b4>
 800ec30:	4616      	mov	r6, r2
 800ec32:	fbb5 f1f3 	udiv	r1, r5, r3
 800ec36:	fb03 5711 	mls	r7, r3, r1, r5
 800ec3a:	5dc7      	ldrb	r7, [r0, r7]
 800ec3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ec40:	462f      	mov	r7, r5
 800ec42:	42bb      	cmp	r3, r7
 800ec44:	460d      	mov	r5, r1
 800ec46:	d9f4      	bls.n	800ec32 <_printf_i+0x11a>
 800ec48:	2b08      	cmp	r3, #8
 800ec4a:	d10b      	bne.n	800ec64 <_printf_i+0x14c>
 800ec4c:	6823      	ldr	r3, [r4, #0]
 800ec4e:	07df      	lsls	r7, r3, #31
 800ec50:	d508      	bpl.n	800ec64 <_printf_i+0x14c>
 800ec52:	6923      	ldr	r3, [r4, #16]
 800ec54:	6861      	ldr	r1, [r4, #4]
 800ec56:	4299      	cmp	r1, r3
 800ec58:	bfde      	ittt	le
 800ec5a:	2330      	movle	r3, #48	; 0x30
 800ec5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ec60:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ec64:	1b92      	subs	r2, r2, r6
 800ec66:	6122      	str	r2, [r4, #16]
 800ec68:	f8cd a000 	str.w	sl, [sp]
 800ec6c:	464b      	mov	r3, r9
 800ec6e:	aa03      	add	r2, sp, #12
 800ec70:	4621      	mov	r1, r4
 800ec72:	4640      	mov	r0, r8
 800ec74:	f7ff fee2 	bl	800ea3c <_printf_common>
 800ec78:	3001      	adds	r0, #1
 800ec7a:	d14c      	bne.n	800ed16 <_printf_i+0x1fe>
 800ec7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec80:	b004      	add	sp, #16
 800ec82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec86:	4835      	ldr	r0, [pc, #212]	; (800ed5c <_printf_i+0x244>)
 800ec88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ec8c:	6823      	ldr	r3, [r4, #0]
 800ec8e:	680e      	ldr	r6, [r1, #0]
 800ec90:	061f      	lsls	r7, r3, #24
 800ec92:	f856 5b04 	ldr.w	r5, [r6], #4
 800ec96:	600e      	str	r6, [r1, #0]
 800ec98:	d514      	bpl.n	800ecc4 <_printf_i+0x1ac>
 800ec9a:	07d9      	lsls	r1, r3, #31
 800ec9c:	bf44      	itt	mi
 800ec9e:	f043 0320 	orrmi.w	r3, r3, #32
 800eca2:	6023      	strmi	r3, [r4, #0]
 800eca4:	b91d      	cbnz	r5, 800ecae <_printf_i+0x196>
 800eca6:	6823      	ldr	r3, [r4, #0]
 800eca8:	f023 0320 	bic.w	r3, r3, #32
 800ecac:	6023      	str	r3, [r4, #0]
 800ecae:	2310      	movs	r3, #16
 800ecb0:	e7b0      	b.n	800ec14 <_printf_i+0xfc>
 800ecb2:	6823      	ldr	r3, [r4, #0]
 800ecb4:	f043 0320 	orr.w	r3, r3, #32
 800ecb8:	6023      	str	r3, [r4, #0]
 800ecba:	2378      	movs	r3, #120	; 0x78
 800ecbc:	4828      	ldr	r0, [pc, #160]	; (800ed60 <_printf_i+0x248>)
 800ecbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ecc2:	e7e3      	b.n	800ec8c <_printf_i+0x174>
 800ecc4:	065e      	lsls	r6, r3, #25
 800ecc6:	bf48      	it	mi
 800ecc8:	b2ad      	uxthmi	r5, r5
 800ecca:	e7e6      	b.n	800ec9a <_printf_i+0x182>
 800eccc:	4616      	mov	r6, r2
 800ecce:	e7bb      	b.n	800ec48 <_printf_i+0x130>
 800ecd0:	680b      	ldr	r3, [r1, #0]
 800ecd2:	6826      	ldr	r6, [r4, #0]
 800ecd4:	6960      	ldr	r0, [r4, #20]
 800ecd6:	1d1d      	adds	r5, r3, #4
 800ecd8:	600d      	str	r5, [r1, #0]
 800ecda:	0635      	lsls	r5, r6, #24
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	d501      	bpl.n	800ece4 <_printf_i+0x1cc>
 800ece0:	6018      	str	r0, [r3, #0]
 800ece2:	e002      	b.n	800ecea <_printf_i+0x1d2>
 800ece4:	0671      	lsls	r1, r6, #25
 800ece6:	d5fb      	bpl.n	800ece0 <_printf_i+0x1c8>
 800ece8:	8018      	strh	r0, [r3, #0]
 800ecea:	2300      	movs	r3, #0
 800ecec:	6123      	str	r3, [r4, #16]
 800ecee:	4616      	mov	r6, r2
 800ecf0:	e7ba      	b.n	800ec68 <_printf_i+0x150>
 800ecf2:	680b      	ldr	r3, [r1, #0]
 800ecf4:	1d1a      	adds	r2, r3, #4
 800ecf6:	600a      	str	r2, [r1, #0]
 800ecf8:	681e      	ldr	r6, [r3, #0]
 800ecfa:	6862      	ldr	r2, [r4, #4]
 800ecfc:	2100      	movs	r1, #0
 800ecfe:	4630      	mov	r0, r6
 800ed00:	f7f1 fa66 	bl	80001d0 <memchr>
 800ed04:	b108      	cbz	r0, 800ed0a <_printf_i+0x1f2>
 800ed06:	1b80      	subs	r0, r0, r6
 800ed08:	6060      	str	r0, [r4, #4]
 800ed0a:	6863      	ldr	r3, [r4, #4]
 800ed0c:	6123      	str	r3, [r4, #16]
 800ed0e:	2300      	movs	r3, #0
 800ed10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed14:	e7a8      	b.n	800ec68 <_printf_i+0x150>
 800ed16:	6923      	ldr	r3, [r4, #16]
 800ed18:	4632      	mov	r2, r6
 800ed1a:	4649      	mov	r1, r9
 800ed1c:	4640      	mov	r0, r8
 800ed1e:	47d0      	blx	sl
 800ed20:	3001      	adds	r0, #1
 800ed22:	d0ab      	beq.n	800ec7c <_printf_i+0x164>
 800ed24:	6823      	ldr	r3, [r4, #0]
 800ed26:	079b      	lsls	r3, r3, #30
 800ed28:	d413      	bmi.n	800ed52 <_printf_i+0x23a>
 800ed2a:	68e0      	ldr	r0, [r4, #12]
 800ed2c:	9b03      	ldr	r3, [sp, #12]
 800ed2e:	4298      	cmp	r0, r3
 800ed30:	bfb8      	it	lt
 800ed32:	4618      	movlt	r0, r3
 800ed34:	e7a4      	b.n	800ec80 <_printf_i+0x168>
 800ed36:	2301      	movs	r3, #1
 800ed38:	4632      	mov	r2, r6
 800ed3a:	4649      	mov	r1, r9
 800ed3c:	4640      	mov	r0, r8
 800ed3e:	47d0      	blx	sl
 800ed40:	3001      	adds	r0, #1
 800ed42:	d09b      	beq.n	800ec7c <_printf_i+0x164>
 800ed44:	3501      	adds	r5, #1
 800ed46:	68e3      	ldr	r3, [r4, #12]
 800ed48:	9903      	ldr	r1, [sp, #12]
 800ed4a:	1a5b      	subs	r3, r3, r1
 800ed4c:	42ab      	cmp	r3, r5
 800ed4e:	dcf2      	bgt.n	800ed36 <_printf_i+0x21e>
 800ed50:	e7eb      	b.n	800ed2a <_printf_i+0x212>
 800ed52:	2500      	movs	r5, #0
 800ed54:	f104 0619 	add.w	r6, r4, #25
 800ed58:	e7f5      	b.n	800ed46 <_printf_i+0x22e>
 800ed5a:	bf00      	nop
 800ed5c:	08086445 	.word	0x08086445
 800ed60:	08086456 	.word	0x08086456

0800ed64 <_putc_r>:
 800ed64:	b570      	push	{r4, r5, r6, lr}
 800ed66:	460d      	mov	r5, r1
 800ed68:	4614      	mov	r4, r2
 800ed6a:	4606      	mov	r6, r0
 800ed6c:	b118      	cbz	r0, 800ed76 <_putc_r+0x12>
 800ed6e:	6983      	ldr	r3, [r0, #24]
 800ed70:	b90b      	cbnz	r3, 800ed76 <_putc_r+0x12>
 800ed72:	f7ff fc5d 	bl	800e630 <__sinit>
 800ed76:	4b1c      	ldr	r3, [pc, #112]	; (800ede8 <_putc_r+0x84>)
 800ed78:	429c      	cmp	r4, r3
 800ed7a:	d124      	bne.n	800edc6 <_putc_r+0x62>
 800ed7c:	6874      	ldr	r4, [r6, #4]
 800ed7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed80:	07d8      	lsls	r0, r3, #31
 800ed82:	d405      	bmi.n	800ed90 <_putc_r+0x2c>
 800ed84:	89a3      	ldrh	r3, [r4, #12]
 800ed86:	0599      	lsls	r1, r3, #22
 800ed88:	d402      	bmi.n	800ed90 <_putc_r+0x2c>
 800ed8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed8c:	f7ff fcee 	bl	800e76c <__retarget_lock_acquire_recursive>
 800ed90:	68a3      	ldr	r3, [r4, #8]
 800ed92:	3b01      	subs	r3, #1
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	60a3      	str	r3, [r4, #8]
 800ed98:	da05      	bge.n	800eda6 <_putc_r+0x42>
 800ed9a:	69a2      	ldr	r2, [r4, #24]
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	db1c      	blt.n	800edda <_putc_r+0x76>
 800eda0:	b2eb      	uxtb	r3, r5
 800eda2:	2b0a      	cmp	r3, #10
 800eda4:	d019      	beq.n	800edda <_putc_r+0x76>
 800eda6:	6823      	ldr	r3, [r4, #0]
 800eda8:	1c5a      	adds	r2, r3, #1
 800edaa:	6022      	str	r2, [r4, #0]
 800edac:	701d      	strb	r5, [r3, #0]
 800edae:	b2ed      	uxtb	r5, r5
 800edb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800edb2:	07da      	lsls	r2, r3, #31
 800edb4:	d405      	bmi.n	800edc2 <_putc_r+0x5e>
 800edb6:	89a3      	ldrh	r3, [r4, #12]
 800edb8:	059b      	lsls	r3, r3, #22
 800edba:	d402      	bmi.n	800edc2 <_putc_r+0x5e>
 800edbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800edbe:	f7ff fcd6 	bl	800e76e <__retarget_lock_release_recursive>
 800edc2:	4628      	mov	r0, r5
 800edc4:	bd70      	pop	{r4, r5, r6, pc}
 800edc6:	4b09      	ldr	r3, [pc, #36]	; (800edec <_putc_r+0x88>)
 800edc8:	429c      	cmp	r4, r3
 800edca:	d101      	bne.n	800edd0 <_putc_r+0x6c>
 800edcc:	68b4      	ldr	r4, [r6, #8]
 800edce:	e7d6      	b.n	800ed7e <_putc_r+0x1a>
 800edd0:	4b07      	ldr	r3, [pc, #28]	; (800edf0 <_putc_r+0x8c>)
 800edd2:	429c      	cmp	r4, r3
 800edd4:	bf08      	it	eq
 800edd6:	68f4      	ldreq	r4, [r6, #12]
 800edd8:	e7d1      	b.n	800ed7e <_putc_r+0x1a>
 800edda:	4629      	mov	r1, r5
 800eddc:	4622      	mov	r2, r4
 800edde:	4630      	mov	r0, r6
 800ede0:	f000 f84c 	bl	800ee7c <__swbuf_r>
 800ede4:	4605      	mov	r5, r0
 800ede6:	e7e3      	b.n	800edb0 <_putc_r+0x4c>
 800ede8:	080863f4 	.word	0x080863f4
 800edec:	08086414 	.word	0x08086414
 800edf0:	080863d4 	.word	0x080863d4

0800edf4 <__sread>:
 800edf4:	b510      	push	{r4, lr}
 800edf6:	460c      	mov	r4, r1
 800edf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edfc:	f000 fa58 	bl	800f2b0 <_read_r>
 800ee00:	2800      	cmp	r0, #0
 800ee02:	bfab      	itete	ge
 800ee04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee06:	89a3      	ldrhlt	r3, [r4, #12]
 800ee08:	181b      	addge	r3, r3, r0
 800ee0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee0e:	bfac      	ite	ge
 800ee10:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee12:	81a3      	strhlt	r3, [r4, #12]
 800ee14:	bd10      	pop	{r4, pc}

0800ee16 <__swrite>:
 800ee16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee1a:	461f      	mov	r7, r3
 800ee1c:	898b      	ldrh	r3, [r1, #12]
 800ee1e:	05db      	lsls	r3, r3, #23
 800ee20:	4605      	mov	r5, r0
 800ee22:	460c      	mov	r4, r1
 800ee24:	4616      	mov	r6, r2
 800ee26:	d505      	bpl.n	800ee34 <__swrite+0x1e>
 800ee28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee2c:	2302      	movs	r3, #2
 800ee2e:	2200      	movs	r2, #0
 800ee30:	f000 f9c8 	bl	800f1c4 <_lseek_r>
 800ee34:	89a3      	ldrh	r3, [r4, #12]
 800ee36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee3e:	81a3      	strh	r3, [r4, #12]
 800ee40:	4632      	mov	r2, r6
 800ee42:	463b      	mov	r3, r7
 800ee44:	4628      	mov	r0, r5
 800ee46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee4a:	f000 b869 	b.w	800ef20 <_write_r>

0800ee4e <__sseek>:
 800ee4e:	b510      	push	{r4, lr}
 800ee50:	460c      	mov	r4, r1
 800ee52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee56:	f000 f9b5 	bl	800f1c4 <_lseek_r>
 800ee5a:	1c43      	adds	r3, r0, #1
 800ee5c:	89a3      	ldrh	r3, [r4, #12]
 800ee5e:	bf15      	itete	ne
 800ee60:	6560      	strne	r0, [r4, #84]	; 0x54
 800ee62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ee66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ee6a:	81a3      	strheq	r3, [r4, #12]
 800ee6c:	bf18      	it	ne
 800ee6e:	81a3      	strhne	r3, [r4, #12]
 800ee70:	bd10      	pop	{r4, pc}

0800ee72 <__sclose>:
 800ee72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee76:	f000 b8d3 	b.w	800f020 <_close_r>
	...

0800ee7c <__swbuf_r>:
 800ee7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee7e:	460e      	mov	r6, r1
 800ee80:	4614      	mov	r4, r2
 800ee82:	4605      	mov	r5, r0
 800ee84:	b118      	cbz	r0, 800ee8e <__swbuf_r+0x12>
 800ee86:	6983      	ldr	r3, [r0, #24]
 800ee88:	b90b      	cbnz	r3, 800ee8e <__swbuf_r+0x12>
 800ee8a:	f7ff fbd1 	bl	800e630 <__sinit>
 800ee8e:	4b21      	ldr	r3, [pc, #132]	; (800ef14 <__swbuf_r+0x98>)
 800ee90:	429c      	cmp	r4, r3
 800ee92:	d12b      	bne.n	800eeec <__swbuf_r+0x70>
 800ee94:	686c      	ldr	r4, [r5, #4]
 800ee96:	69a3      	ldr	r3, [r4, #24]
 800ee98:	60a3      	str	r3, [r4, #8]
 800ee9a:	89a3      	ldrh	r3, [r4, #12]
 800ee9c:	071a      	lsls	r2, r3, #28
 800ee9e:	d52f      	bpl.n	800ef00 <__swbuf_r+0x84>
 800eea0:	6923      	ldr	r3, [r4, #16]
 800eea2:	b36b      	cbz	r3, 800ef00 <__swbuf_r+0x84>
 800eea4:	6923      	ldr	r3, [r4, #16]
 800eea6:	6820      	ldr	r0, [r4, #0]
 800eea8:	1ac0      	subs	r0, r0, r3
 800eeaa:	6963      	ldr	r3, [r4, #20]
 800eeac:	b2f6      	uxtb	r6, r6
 800eeae:	4283      	cmp	r3, r0
 800eeb0:	4637      	mov	r7, r6
 800eeb2:	dc04      	bgt.n	800eebe <__swbuf_r+0x42>
 800eeb4:	4621      	mov	r1, r4
 800eeb6:	4628      	mov	r0, r5
 800eeb8:	f000 f948 	bl	800f14c <_fflush_r>
 800eebc:	bb30      	cbnz	r0, 800ef0c <__swbuf_r+0x90>
 800eebe:	68a3      	ldr	r3, [r4, #8]
 800eec0:	3b01      	subs	r3, #1
 800eec2:	60a3      	str	r3, [r4, #8]
 800eec4:	6823      	ldr	r3, [r4, #0]
 800eec6:	1c5a      	adds	r2, r3, #1
 800eec8:	6022      	str	r2, [r4, #0]
 800eeca:	701e      	strb	r6, [r3, #0]
 800eecc:	6963      	ldr	r3, [r4, #20]
 800eece:	3001      	adds	r0, #1
 800eed0:	4283      	cmp	r3, r0
 800eed2:	d004      	beq.n	800eede <__swbuf_r+0x62>
 800eed4:	89a3      	ldrh	r3, [r4, #12]
 800eed6:	07db      	lsls	r3, r3, #31
 800eed8:	d506      	bpl.n	800eee8 <__swbuf_r+0x6c>
 800eeda:	2e0a      	cmp	r6, #10
 800eedc:	d104      	bne.n	800eee8 <__swbuf_r+0x6c>
 800eede:	4621      	mov	r1, r4
 800eee0:	4628      	mov	r0, r5
 800eee2:	f000 f933 	bl	800f14c <_fflush_r>
 800eee6:	b988      	cbnz	r0, 800ef0c <__swbuf_r+0x90>
 800eee8:	4638      	mov	r0, r7
 800eeea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eeec:	4b0a      	ldr	r3, [pc, #40]	; (800ef18 <__swbuf_r+0x9c>)
 800eeee:	429c      	cmp	r4, r3
 800eef0:	d101      	bne.n	800eef6 <__swbuf_r+0x7a>
 800eef2:	68ac      	ldr	r4, [r5, #8]
 800eef4:	e7cf      	b.n	800ee96 <__swbuf_r+0x1a>
 800eef6:	4b09      	ldr	r3, [pc, #36]	; (800ef1c <__swbuf_r+0xa0>)
 800eef8:	429c      	cmp	r4, r3
 800eefa:	bf08      	it	eq
 800eefc:	68ec      	ldreq	r4, [r5, #12]
 800eefe:	e7ca      	b.n	800ee96 <__swbuf_r+0x1a>
 800ef00:	4621      	mov	r1, r4
 800ef02:	4628      	mov	r0, r5
 800ef04:	f000 f81e 	bl	800ef44 <__swsetup_r>
 800ef08:	2800      	cmp	r0, #0
 800ef0a:	d0cb      	beq.n	800eea4 <__swbuf_r+0x28>
 800ef0c:	f04f 37ff 	mov.w	r7, #4294967295
 800ef10:	e7ea      	b.n	800eee8 <__swbuf_r+0x6c>
 800ef12:	bf00      	nop
 800ef14:	080863f4 	.word	0x080863f4
 800ef18:	08086414 	.word	0x08086414
 800ef1c:	080863d4 	.word	0x080863d4

0800ef20 <_write_r>:
 800ef20:	b538      	push	{r3, r4, r5, lr}
 800ef22:	4d07      	ldr	r5, [pc, #28]	; (800ef40 <_write_r+0x20>)
 800ef24:	4604      	mov	r4, r0
 800ef26:	4608      	mov	r0, r1
 800ef28:	4611      	mov	r1, r2
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	602a      	str	r2, [r5, #0]
 800ef2e:	461a      	mov	r2, r3
 800ef30:	f7f2 fa37 	bl	80013a2 <_write>
 800ef34:	1c43      	adds	r3, r0, #1
 800ef36:	d102      	bne.n	800ef3e <_write_r+0x1e>
 800ef38:	682b      	ldr	r3, [r5, #0]
 800ef3a:	b103      	cbz	r3, 800ef3e <_write_r+0x1e>
 800ef3c:	6023      	str	r3, [r4, #0]
 800ef3e:	bd38      	pop	{r3, r4, r5, pc}
 800ef40:	20005b0c 	.word	0x20005b0c

0800ef44 <__swsetup_r>:
 800ef44:	4b32      	ldr	r3, [pc, #200]	; (800f010 <__swsetup_r+0xcc>)
 800ef46:	b570      	push	{r4, r5, r6, lr}
 800ef48:	681d      	ldr	r5, [r3, #0]
 800ef4a:	4606      	mov	r6, r0
 800ef4c:	460c      	mov	r4, r1
 800ef4e:	b125      	cbz	r5, 800ef5a <__swsetup_r+0x16>
 800ef50:	69ab      	ldr	r3, [r5, #24]
 800ef52:	b913      	cbnz	r3, 800ef5a <__swsetup_r+0x16>
 800ef54:	4628      	mov	r0, r5
 800ef56:	f7ff fb6b 	bl	800e630 <__sinit>
 800ef5a:	4b2e      	ldr	r3, [pc, #184]	; (800f014 <__swsetup_r+0xd0>)
 800ef5c:	429c      	cmp	r4, r3
 800ef5e:	d10f      	bne.n	800ef80 <__swsetup_r+0x3c>
 800ef60:	686c      	ldr	r4, [r5, #4]
 800ef62:	89a3      	ldrh	r3, [r4, #12]
 800ef64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef68:	0719      	lsls	r1, r3, #28
 800ef6a:	d42c      	bmi.n	800efc6 <__swsetup_r+0x82>
 800ef6c:	06dd      	lsls	r5, r3, #27
 800ef6e:	d411      	bmi.n	800ef94 <__swsetup_r+0x50>
 800ef70:	2309      	movs	r3, #9
 800ef72:	6033      	str	r3, [r6, #0]
 800ef74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ef78:	81a3      	strh	r3, [r4, #12]
 800ef7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef7e:	e03e      	b.n	800effe <__swsetup_r+0xba>
 800ef80:	4b25      	ldr	r3, [pc, #148]	; (800f018 <__swsetup_r+0xd4>)
 800ef82:	429c      	cmp	r4, r3
 800ef84:	d101      	bne.n	800ef8a <__swsetup_r+0x46>
 800ef86:	68ac      	ldr	r4, [r5, #8]
 800ef88:	e7eb      	b.n	800ef62 <__swsetup_r+0x1e>
 800ef8a:	4b24      	ldr	r3, [pc, #144]	; (800f01c <__swsetup_r+0xd8>)
 800ef8c:	429c      	cmp	r4, r3
 800ef8e:	bf08      	it	eq
 800ef90:	68ec      	ldreq	r4, [r5, #12]
 800ef92:	e7e6      	b.n	800ef62 <__swsetup_r+0x1e>
 800ef94:	0758      	lsls	r0, r3, #29
 800ef96:	d512      	bpl.n	800efbe <__swsetup_r+0x7a>
 800ef98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef9a:	b141      	cbz	r1, 800efae <__swsetup_r+0x6a>
 800ef9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800efa0:	4299      	cmp	r1, r3
 800efa2:	d002      	beq.n	800efaa <__swsetup_r+0x66>
 800efa4:	4630      	mov	r0, r6
 800efa6:	f7ff fa03 	bl	800e3b0 <_free_r>
 800efaa:	2300      	movs	r3, #0
 800efac:	6363      	str	r3, [r4, #52]	; 0x34
 800efae:	89a3      	ldrh	r3, [r4, #12]
 800efb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800efb4:	81a3      	strh	r3, [r4, #12]
 800efb6:	2300      	movs	r3, #0
 800efb8:	6063      	str	r3, [r4, #4]
 800efba:	6923      	ldr	r3, [r4, #16]
 800efbc:	6023      	str	r3, [r4, #0]
 800efbe:	89a3      	ldrh	r3, [r4, #12]
 800efc0:	f043 0308 	orr.w	r3, r3, #8
 800efc4:	81a3      	strh	r3, [r4, #12]
 800efc6:	6923      	ldr	r3, [r4, #16]
 800efc8:	b94b      	cbnz	r3, 800efde <__swsetup_r+0x9a>
 800efca:	89a3      	ldrh	r3, [r4, #12]
 800efcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800efd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800efd4:	d003      	beq.n	800efde <__swsetup_r+0x9a>
 800efd6:	4621      	mov	r1, r4
 800efd8:	4630      	mov	r0, r6
 800efda:	f000 f929 	bl	800f230 <__smakebuf_r>
 800efde:	89a0      	ldrh	r0, [r4, #12]
 800efe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800efe4:	f010 0301 	ands.w	r3, r0, #1
 800efe8:	d00a      	beq.n	800f000 <__swsetup_r+0xbc>
 800efea:	2300      	movs	r3, #0
 800efec:	60a3      	str	r3, [r4, #8]
 800efee:	6963      	ldr	r3, [r4, #20]
 800eff0:	425b      	negs	r3, r3
 800eff2:	61a3      	str	r3, [r4, #24]
 800eff4:	6923      	ldr	r3, [r4, #16]
 800eff6:	b943      	cbnz	r3, 800f00a <__swsetup_r+0xc6>
 800eff8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800effc:	d1ba      	bne.n	800ef74 <__swsetup_r+0x30>
 800effe:	bd70      	pop	{r4, r5, r6, pc}
 800f000:	0781      	lsls	r1, r0, #30
 800f002:	bf58      	it	pl
 800f004:	6963      	ldrpl	r3, [r4, #20]
 800f006:	60a3      	str	r3, [r4, #8]
 800f008:	e7f4      	b.n	800eff4 <__swsetup_r+0xb0>
 800f00a:	2000      	movs	r0, #0
 800f00c:	e7f7      	b.n	800effe <__swsetup_r+0xba>
 800f00e:	bf00      	nop
 800f010:	20000038 	.word	0x20000038
 800f014:	080863f4 	.word	0x080863f4
 800f018:	08086414 	.word	0x08086414
 800f01c:	080863d4 	.word	0x080863d4

0800f020 <_close_r>:
 800f020:	b538      	push	{r3, r4, r5, lr}
 800f022:	4d06      	ldr	r5, [pc, #24]	; (800f03c <_close_r+0x1c>)
 800f024:	2300      	movs	r3, #0
 800f026:	4604      	mov	r4, r0
 800f028:	4608      	mov	r0, r1
 800f02a:	602b      	str	r3, [r5, #0]
 800f02c:	f7f2 f9d5 	bl	80013da <_close>
 800f030:	1c43      	adds	r3, r0, #1
 800f032:	d102      	bne.n	800f03a <_close_r+0x1a>
 800f034:	682b      	ldr	r3, [r5, #0]
 800f036:	b103      	cbz	r3, 800f03a <_close_r+0x1a>
 800f038:	6023      	str	r3, [r4, #0]
 800f03a:	bd38      	pop	{r3, r4, r5, pc}
 800f03c:	20005b0c 	.word	0x20005b0c

0800f040 <__sflush_r>:
 800f040:	898a      	ldrh	r2, [r1, #12]
 800f042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f046:	4605      	mov	r5, r0
 800f048:	0710      	lsls	r0, r2, #28
 800f04a:	460c      	mov	r4, r1
 800f04c:	d458      	bmi.n	800f100 <__sflush_r+0xc0>
 800f04e:	684b      	ldr	r3, [r1, #4]
 800f050:	2b00      	cmp	r3, #0
 800f052:	dc05      	bgt.n	800f060 <__sflush_r+0x20>
 800f054:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f056:	2b00      	cmp	r3, #0
 800f058:	dc02      	bgt.n	800f060 <__sflush_r+0x20>
 800f05a:	2000      	movs	r0, #0
 800f05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f060:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f062:	2e00      	cmp	r6, #0
 800f064:	d0f9      	beq.n	800f05a <__sflush_r+0x1a>
 800f066:	2300      	movs	r3, #0
 800f068:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f06c:	682f      	ldr	r7, [r5, #0]
 800f06e:	602b      	str	r3, [r5, #0]
 800f070:	d032      	beq.n	800f0d8 <__sflush_r+0x98>
 800f072:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f074:	89a3      	ldrh	r3, [r4, #12]
 800f076:	075a      	lsls	r2, r3, #29
 800f078:	d505      	bpl.n	800f086 <__sflush_r+0x46>
 800f07a:	6863      	ldr	r3, [r4, #4]
 800f07c:	1ac0      	subs	r0, r0, r3
 800f07e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f080:	b10b      	cbz	r3, 800f086 <__sflush_r+0x46>
 800f082:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f084:	1ac0      	subs	r0, r0, r3
 800f086:	2300      	movs	r3, #0
 800f088:	4602      	mov	r2, r0
 800f08a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f08c:	6a21      	ldr	r1, [r4, #32]
 800f08e:	4628      	mov	r0, r5
 800f090:	47b0      	blx	r6
 800f092:	1c43      	adds	r3, r0, #1
 800f094:	89a3      	ldrh	r3, [r4, #12]
 800f096:	d106      	bne.n	800f0a6 <__sflush_r+0x66>
 800f098:	6829      	ldr	r1, [r5, #0]
 800f09a:	291d      	cmp	r1, #29
 800f09c:	d82c      	bhi.n	800f0f8 <__sflush_r+0xb8>
 800f09e:	4a2a      	ldr	r2, [pc, #168]	; (800f148 <__sflush_r+0x108>)
 800f0a0:	40ca      	lsrs	r2, r1
 800f0a2:	07d6      	lsls	r6, r2, #31
 800f0a4:	d528      	bpl.n	800f0f8 <__sflush_r+0xb8>
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	6062      	str	r2, [r4, #4]
 800f0aa:	04d9      	lsls	r1, r3, #19
 800f0ac:	6922      	ldr	r2, [r4, #16]
 800f0ae:	6022      	str	r2, [r4, #0]
 800f0b0:	d504      	bpl.n	800f0bc <__sflush_r+0x7c>
 800f0b2:	1c42      	adds	r2, r0, #1
 800f0b4:	d101      	bne.n	800f0ba <__sflush_r+0x7a>
 800f0b6:	682b      	ldr	r3, [r5, #0]
 800f0b8:	b903      	cbnz	r3, 800f0bc <__sflush_r+0x7c>
 800f0ba:	6560      	str	r0, [r4, #84]	; 0x54
 800f0bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0be:	602f      	str	r7, [r5, #0]
 800f0c0:	2900      	cmp	r1, #0
 800f0c2:	d0ca      	beq.n	800f05a <__sflush_r+0x1a>
 800f0c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0c8:	4299      	cmp	r1, r3
 800f0ca:	d002      	beq.n	800f0d2 <__sflush_r+0x92>
 800f0cc:	4628      	mov	r0, r5
 800f0ce:	f7ff f96f 	bl	800e3b0 <_free_r>
 800f0d2:	2000      	movs	r0, #0
 800f0d4:	6360      	str	r0, [r4, #52]	; 0x34
 800f0d6:	e7c1      	b.n	800f05c <__sflush_r+0x1c>
 800f0d8:	6a21      	ldr	r1, [r4, #32]
 800f0da:	2301      	movs	r3, #1
 800f0dc:	4628      	mov	r0, r5
 800f0de:	47b0      	blx	r6
 800f0e0:	1c41      	adds	r1, r0, #1
 800f0e2:	d1c7      	bne.n	800f074 <__sflush_r+0x34>
 800f0e4:	682b      	ldr	r3, [r5, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d0c4      	beq.n	800f074 <__sflush_r+0x34>
 800f0ea:	2b1d      	cmp	r3, #29
 800f0ec:	d001      	beq.n	800f0f2 <__sflush_r+0xb2>
 800f0ee:	2b16      	cmp	r3, #22
 800f0f0:	d101      	bne.n	800f0f6 <__sflush_r+0xb6>
 800f0f2:	602f      	str	r7, [r5, #0]
 800f0f4:	e7b1      	b.n	800f05a <__sflush_r+0x1a>
 800f0f6:	89a3      	ldrh	r3, [r4, #12]
 800f0f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0fc:	81a3      	strh	r3, [r4, #12]
 800f0fe:	e7ad      	b.n	800f05c <__sflush_r+0x1c>
 800f100:	690f      	ldr	r7, [r1, #16]
 800f102:	2f00      	cmp	r7, #0
 800f104:	d0a9      	beq.n	800f05a <__sflush_r+0x1a>
 800f106:	0793      	lsls	r3, r2, #30
 800f108:	680e      	ldr	r6, [r1, #0]
 800f10a:	bf08      	it	eq
 800f10c:	694b      	ldreq	r3, [r1, #20]
 800f10e:	600f      	str	r7, [r1, #0]
 800f110:	bf18      	it	ne
 800f112:	2300      	movne	r3, #0
 800f114:	eba6 0807 	sub.w	r8, r6, r7
 800f118:	608b      	str	r3, [r1, #8]
 800f11a:	f1b8 0f00 	cmp.w	r8, #0
 800f11e:	dd9c      	ble.n	800f05a <__sflush_r+0x1a>
 800f120:	6a21      	ldr	r1, [r4, #32]
 800f122:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f124:	4643      	mov	r3, r8
 800f126:	463a      	mov	r2, r7
 800f128:	4628      	mov	r0, r5
 800f12a:	47b0      	blx	r6
 800f12c:	2800      	cmp	r0, #0
 800f12e:	dc06      	bgt.n	800f13e <__sflush_r+0xfe>
 800f130:	89a3      	ldrh	r3, [r4, #12]
 800f132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f136:	81a3      	strh	r3, [r4, #12]
 800f138:	f04f 30ff 	mov.w	r0, #4294967295
 800f13c:	e78e      	b.n	800f05c <__sflush_r+0x1c>
 800f13e:	4407      	add	r7, r0
 800f140:	eba8 0800 	sub.w	r8, r8, r0
 800f144:	e7e9      	b.n	800f11a <__sflush_r+0xda>
 800f146:	bf00      	nop
 800f148:	20400001 	.word	0x20400001

0800f14c <_fflush_r>:
 800f14c:	b538      	push	{r3, r4, r5, lr}
 800f14e:	690b      	ldr	r3, [r1, #16]
 800f150:	4605      	mov	r5, r0
 800f152:	460c      	mov	r4, r1
 800f154:	b913      	cbnz	r3, 800f15c <_fflush_r+0x10>
 800f156:	2500      	movs	r5, #0
 800f158:	4628      	mov	r0, r5
 800f15a:	bd38      	pop	{r3, r4, r5, pc}
 800f15c:	b118      	cbz	r0, 800f166 <_fflush_r+0x1a>
 800f15e:	6983      	ldr	r3, [r0, #24]
 800f160:	b90b      	cbnz	r3, 800f166 <_fflush_r+0x1a>
 800f162:	f7ff fa65 	bl	800e630 <__sinit>
 800f166:	4b14      	ldr	r3, [pc, #80]	; (800f1b8 <_fflush_r+0x6c>)
 800f168:	429c      	cmp	r4, r3
 800f16a:	d11b      	bne.n	800f1a4 <_fflush_r+0x58>
 800f16c:	686c      	ldr	r4, [r5, #4]
 800f16e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d0ef      	beq.n	800f156 <_fflush_r+0xa>
 800f176:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f178:	07d0      	lsls	r0, r2, #31
 800f17a:	d404      	bmi.n	800f186 <_fflush_r+0x3a>
 800f17c:	0599      	lsls	r1, r3, #22
 800f17e:	d402      	bmi.n	800f186 <_fflush_r+0x3a>
 800f180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f182:	f7ff faf3 	bl	800e76c <__retarget_lock_acquire_recursive>
 800f186:	4628      	mov	r0, r5
 800f188:	4621      	mov	r1, r4
 800f18a:	f7ff ff59 	bl	800f040 <__sflush_r>
 800f18e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f190:	07da      	lsls	r2, r3, #31
 800f192:	4605      	mov	r5, r0
 800f194:	d4e0      	bmi.n	800f158 <_fflush_r+0xc>
 800f196:	89a3      	ldrh	r3, [r4, #12]
 800f198:	059b      	lsls	r3, r3, #22
 800f19a:	d4dd      	bmi.n	800f158 <_fflush_r+0xc>
 800f19c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f19e:	f7ff fae6 	bl	800e76e <__retarget_lock_release_recursive>
 800f1a2:	e7d9      	b.n	800f158 <_fflush_r+0xc>
 800f1a4:	4b05      	ldr	r3, [pc, #20]	; (800f1bc <_fflush_r+0x70>)
 800f1a6:	429c      	cmp	r4, r3
 800f1a8:	d101      	bne.n	800f1ae <_fflush_r+0x62>
 800f1aa:	68ac      	ldr	r4, [r5, #8]
 800f1ac:	e7df      	b.n	800f16e <_fflush_r+0x22>
 800f1ae:	4b04      	ldr	r3, [pc, #16]	; (800f1c0 <_fflush_r+0x74>)
 800f1b0:	429c      	cmp	r4, r3
 800f1b2:	bf08      	it	eq
 800f1b4:	68ec      	ldreq	r4, [r5, #12]
 800f1b6:	e7da      	b.n	800f16e <_fflush_r+0x22>
 800f1b8:	080863f4 	.word	0x080863f4
 800f1bc:	08086414 	.word	0x08086414
 800f1c0:	080863d4 	.word	0x080863d4

0800f1c4 <_lseek_r>:
 800f1c4:	b538      	push	{r3, r4, r5, lr}
 800f1c6:	4d07      	ldr	r5, [pc, #28]	; (800f1e4 <_lseek_r+0x20>)
 800f1c8:	4604      	mov	r4, r0
 800f1ca:	4608      	mov	r0, r1
 800f1cc:	4611      	mov	r1, r2
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	602a      	str	r2, [r5, #0]
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	f7f2 f928 	bl	8001428 <_lseek>
 800f1d8:	1c43      	adds	r3, r0, #1
 800f1da:	d102      	bne.n	800f1e2 <_lseek_r+0x1e>
 800f1dc:	682b      	ldr	r3, [r5, #0]
 800f1de:	b103      	cbz	r3, 800f1e2 <_lseek_r+0x1e>
 800f1e0:	6023      	str	r3, [r4, #0]
 800f1e2:	bd38      	pop	{r3, r4, r5, pc}
 800f1e4:	20005b0c 	.word	0x20005b0c

0800f1e8 <__swhatbuf_r>:
 800f1e8:	b570      	push	{r4, r5, r6, lr}
 800f1ea:	460e      	mov	r6, r1
 800f1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1f0:	2900      	cmp	r1, #0
 800f1f2:	b096      	sub	sp, #88	; 0x58
 800f1f4:	4614      	mov	r4, r2
 800f1f6:	461d      	mov	r5, r3
 800f1f8:	da07      	bge.n	800f20a <__swhatbuf_r+0x22>
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	602b      	str	r3, [r5, #0]
 800f1fe:	89b3      	ldrh	r3, [r6, #12]
 800f200:	061a      	lsls	r2, r3, #24
 800f202:	d410      	bmi.n	800f226 <__swhatbuf_r+0x3e>
 800f204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f208:	e00e      	b.n	800f228 <__swhatbuf_r+0x40>
 800f20a:	466a      	mov	r2, sp
 800f20c:	f000 f862 	bl	800f2d4 <_fstat_r>
 800f210:	2800      	cmp	r0, #0
 800f212:	dbf2      	blt.n	800f1fa <__swhatbuf_r+0x12>
 800f214:	9a01      	ldr	r2, [sp, #4]
 800f216:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f21a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f21e:	425a      	negs	r2, r3
 800f220:	415a      	adcs	r2, r3
 800f222:	602a      	str	r2, [r5, #0]
 800f224:	e7ee      	b.n	800f204 <__swhatbuf_r+0x1c>
 800f226:	2340      	movs	r3, #64	; 0x40
 800f228:	2000      	movs	r0, #0
 800f22a:	6023      	str	r3, [r4, #0]
 800f22c:	b016      	add	sp, #88	; 0x58
 800f22e:	bd70      	pop	{r4, r5, r6, pc}

0800f230 <__smakebuf_r>:
 800f230:	898b      	ldrh	r3, [r1, #12]
 800f232:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f234:	079d      	lsls	r5, r3, #30
 800f236:	4606      	mov	r6, r0
 800f238:	460c      	mov	r4, r1
 800f23a:	d507      	bpl.n	800f24c <__smakebuf_r+0x1c>
 800f23c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f240:	6023      	str	r3, [r4, #0]
 800f242:	6123      	str	r3, [r4, #16]
 800f244:	2301      	movs	r3, #1
 800f246:	6163      	str	r3, [r4, #20]
 800f248:	b002      	add	sp, #8
 800f24a:	bd70      	pop	{r4, r5, r6, pc}
 800f24c:	ab01      	add	r3, sp, #4
 800f24e:	466a      	mov	r2, sp
 800f250:	f7ff ffca 	bl	800f1e8 <__swhatbuf_r>
 800f254:	9900      	ldr	r1, [sp, #0]
 800f256:	4605      	mov	r5, r0
 800f258:	4630      	mov	r0, r6
 800f25a:	f7ff f8f9 	bl	800e450 <_malloc_r>
 800f25e:	b948      	cbnz	r0, 800f274 <__smakebuf_r+0x44>
 800f260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f264:	059a      	lsls	r2, r3, #22
 800f266:	d4ef      	bmi.n	800f248 <__smakebuf_r+0x18>
 800f268:	f023 0303 	bic.w	r3, r3, #3
 800f26c:	f043 0302 	orr.w	r3, r3, #2
 800f270:	81a3      	strh	r3, [r4, #12]
 800f272:	e7e3      	b.n	800f23c <__smakebuf_r+0xc>
 800f274:	4b0d      	ldr	r3, [pc, #52]	; (800f2ac <__smakebuf_r+0x7c>)
 800f276:	62b3      	str	r3, [r6, #40]	; 0x28
 800f278:	89a3      	ldrh	r3, [r4, #12]
 800f27a:	6020      	str	r0, [r4, #0]
 800f27c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f280:	81a3      	strh	r3, [r4, #12]
 800f282:	9b00      	ldr	r3, [sp, #0]
 800f284:	6163      	str	r3, [r4, #20]
 800f286:	9b01      	ldr	r3, [sp, #4]
 800f288:	6120      	str	r0, [r4, #16]
 800f28a:	b15b      	cbz	r3, 800f2a4 <__smakebuf_r+0x74>
 800f28c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f290:	4630      	mov	r0, r6
 800f292:	f000 f831 	bl	800f2f8 <_isatty_r>
 800f296:	b128      	cbz	r0, 800f2a4 <__smakebuf_r+0x74>
 800f298:	89a3      	ldrh	r3, [r4, #12]
 800f29a:	f023 0303 	bic.w	r3, r3, #3
 800f29e:	f043 0301 	orr.w	r3, r3, #1
 800f2a2:	81a3      	strh	r3, [r4, #12]
 800f2a4:	89a0      	ldrh	r0, [r4, #12]
 800f2a6:	4305      	orrs	r5, r0
 800f2a8:	81a5      	strh	r5, [r4, #12]
 800f2aa:	e7cd      	b.n	800f248 <__smakebuf_r+0x18>
 800f2ac:	0800e5c9 	.word	0x0800e5c9

0800f2b0 <_read_r>:
 800f2b0:	b538      	push	{r3, r4, r5, lr}
 800f2b2:	4d07      	ldr	r5, [pc, #28]	; (800f2d0 <_read_r+0x20>)
 800f2b4:	4604      	mov	r4, r0
 800f2b6:	4608      	mov	r0, r1
 800f2b8:	4611      	mov	r1, r2
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	602a      	str	r2, [r5, #0]
 800f2be:	461a      	mov	r2, r3
 800f2c0:	f7f2 f852 	bl	8001368 <_read>
 800f2c4:	1c43      	adds	r3, r0, #1
 800f2c6:	d102      	bne.n	800f2ce <_read_r+0x1e>
 800f2c8:	682b      	ldr	r3, [r5, #0]
 800f2ca:	b103      	cbz	r3, 800f2ce <_read_r+0x1e>
 800f2cc:	6023      	str	r3, [r4, #0]
 800f2ce:	bd38      	pop	{r3, r4, r5, pc}
 800f2d0:	20005b0c 	.word	0x20005b0c

0800f2d4 <_fstat_r>:
 800f2d4:	b538      	push	{r3, r4, r5, lr}
 800f2d6:	4d07      	ldr	r5, [pc, #28]	; (800f2f4 <_fstat_r+0x20>)
 800f2d8:	2300      	movs	r3, #0
 800f2da:	4604      	mov	r4, r0
 800f2dc:	4608      	mov	r0, r1
 800f2de:	4611      	mov	r1, r2
 800f2e0:	602b      	str	r3, [r5, #0]
 800f2e2:	f7f2 f886 	bl	80013f2 <_fstat>
 800f2e6:	1c43      	adds	r3, r0, #1
 800f2e8:	d102      	bne.n	800f2f0 <_fstat_r+0x1c>
 800f2ea:	682b      	ldr	r3, [r5, #0]
 800f2ec:	b103      	cbz	r3, 800f2f0 <_fstat_r+0x1c>
 800f2ee:	6023      	str	r3, [r4, #0]
 800f2f0:	bd38      	pop	{r3, r4, r5, pc}
 800f2f2:	bf00      	nop
 800f2f4:	20005b0c 	.word	0x20005b0c

0800f2f8 <_isatty_r>:
 800f2f8:	b538      	push	{r3, r4, r5, lr}
 800f2fa:	4d06      	ldr	r5, [pc, #24]	; (800f314 <_isatty_r+0x1c>)
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	4604      	mov	r4, r0
 800f300:	4608      	mov	r0, r1
 800f302:	602b      	str	r3, [r5, #0]
 800f304:	f7f2 f885 	bl	8001412 <_isatty>
 800f308:	1c43      	adds	r3, r0, #1
 800f30a:	d102      	bne.n	800f312 <_isatty_r+0x1a>
 800f30c:	682b      	ldr	r3, [r5, #0]
 800f30e:	b103      	cbz	r3, 800f312 <_isatty_r+0x1a>
 800f310:	6023      	str	r3, [r4, #0]
 800f312:	bd38      	pop	{r3, r4, r5, pc}
 800f314:	20005b0c 	.word	0x20005b0c

0800f318 <_init>:
 800f318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f31a:	bf00      	nop
 800f31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f31e:	bc08      	pop	{r3}
 800f320:	469e      	mov	lr, r3
 800f322:	4770      	bx	lr

0800f324 <_fini>:
 800f324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f326:	bf00      	nop
 800f328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f32a:	bc08      	pop	{r3}
 800f32c:	469e      	mov	lr, r3
 800f32e:	4770      	bx	lr
