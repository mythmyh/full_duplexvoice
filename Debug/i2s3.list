
i2s3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fcc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00077138  0800fe58  0800fe58  0001fe58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08086f90  08086f90  000a00a8  2**0
                  CONTENTS
  4 .ARM          00000008  08086f90  08086f90  00096f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08086f98  08086f98  000a00a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08086f98  08086f98  00096f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08086f9c  08086f9c  00096f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08086fa0  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000a00a8  2**0
                  CONTENTS
 10 .bss          00006acc  200000a8  200000a8  000a00a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006b74  20006b74  000a00a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000a00a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e39c  00000000  00000000  000a00d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a45  00000000  00000000  000ce474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016d0  00000000  00000000  000d3ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001500  00000000  00000000  000d5590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b6e  00000000  00000000  000d6a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000239f0  00000000  00000000  000fe5fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ced1c  00000000  00000000  00121fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001f0d0a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006630  00000000  00000000  001f0d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fe40 	.word	0x0800fe40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800fe40 	.word	0x0800fe40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <WM8978_Register_Wirter>:
//	return HAL_I2C_Master_Transmit(&USEI2C, WM8978_WIRTE_ADDRESS, pData, 2,
//			1000);
//}

HAL_StatusTypeDef WM8978_Register_Wirter(I2C_HandleTypeDef *hi2c,uint8_t reg_addr, uint16_t data)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af02      	add	r7, sp, #8
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	460b      	mov	r3, r1
 8000572:	70fb      	strb	r3, [r7, #3]
 8000574:	4613      	mov	r3, r2
 8000576:	803b      	strh	r3, [r7, #0]
	uint8_t pData[10] =	{ 0 };
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	809a      	strh	r2, [r3, #4]

	pData[0] = (reg_addr << 1) | ((data >> 8) & 0x01);
 8000586:	78fb      	ldrb	r3, [r7, #3]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	b25a      	sxtb	r2, r3
 800058c:	883b      	ldrh	r3, [r7, #0]
 800058e:	0a1b      	lsrs	r3, r3, #8
 8000590:	b29b      	uxth	r3, r3
 8000592:	b25b      	sxtb	r3, r3
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	b25b      	sxtb	r3, r3
 800059a:	4313      	orrs	r3, r2
 800059c:	b25b      	sxtb	r3, r3
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	733b      	strb	r3, [r7, #12]
	pData[1] = data & 0xFF;
 80005a2:	883b      	ldrh	r3, [r7, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	737b      	strb	r3, [r7, #13]
	//WM8978_REGVAL_TBL[reg_addr]=data;	//卤拢麓忙录脛麓忙脝梅脰碌碌陆卤戮碌脴

	return HAL_I2C_Master_Transmit(hi2c,WM8978_WIRTE_ADDRESS, pData, 2, 1000);
 80005a8:	f107 020c 	add.w	r2, r7, #12
 80005ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2302      	movs	r3, #2
 80005b4:	2134      	movs	r1, #52	; 0x34
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f004 fec4 	bl	8005344 <HAL_I2C_Master_Transmit>
 80005bc:	4603      	mov	r3, r0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3718      	adds	r7, #24
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <WAV_FileInit>:




void WAV_FileInit(void) {
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	DataLength = sizeof(data) - 0x2c;
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <WAV_FileInit+0x1c>)
 80005ce:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <WAV_FileInit+0x20>)
 80005d0:	601a      	str	r2, [r3, #0]
	DataAddress = (uint8_t*) (data + 0x2c);
 80005d2:	4a06      	ldr	r2, [pc, #24]	; (80005ec <WAV_FileInit+0x24>)
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <WAV_FileInit+0x28>)
 80005d6:	601a      	str	r2, [r3, #0]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200010c4 	.word	0x200010c4
 80005e8:	00076926 	.word	0x00076926
 80005ec:	0801059c 	.word	0x0801059c
 80005f0:	200010c8 	.word	0x200010c8

080005f4 <WAV_FileRead2>:
uint32_t WAV_FileRead2(uint8_t *buf, uint32_t size) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
	bw = 0;
 80005fe:	4b19      	ldr	r3, [pc, #100]	; (8000664 <WAV_FileRead2+0x70>)
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
	f_read(&file, buf, size, (void*)&bw); //16bit音频,直接读取数据
 8000604:	4b17      	ldr	r3, [pc, #92]	; (8000664 <WAV_FileRead2+0x70>)
 8000606:	683a      	ldr	r2, [r7, #0]
 8000608:	6879      	ldr	r1, [r7, #4]
 800060a:	4817      	ldr	r0, [pc, #92]	; (8000668 <WAV_FileRead2+0x74>)
 800060c:	f00d fc7a 	bl	800df04 <f_read>
	//printf("aaaa %d\n",bw);

	if (bw < BUFFER_SIZE) //不够数据了,补充0
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <WAV_FileRead2+0x70>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000618:	d21e      	bcs.n	8000658 <WAV_FileRead2+0x64>
	{
		for (i = bw; i < BUFFER_SIZE - bw; i++)
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <WAV_FileRead2+0x70>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	461a      	mov	r2, r3
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <WAV_FileRead2+0x78>)
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	e00b      	b.n	800063e <WAV_FileRead2+0x4a>
			buf[i] = 0;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <WAV_FileRead2+0x78>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	461a      	mov	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4413      	add	r3, r2
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
		for (i = bw; i < BUFFER_SIZE - bw; i++)
 8000634:	4b0d      	ldr	r3, [pc, #52]	; (800066c <WAV_FileRead2+0x78>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	4a0c      	ldr	r2, [pc, #48]	; (800066c <WAV_FileRead2+0x78>)
 800063c:	6013      	str	r3, [r2, #0]
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <WAV_FileRead2+0x70>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000646:	4a09      	ldr	r2, [pc, #36]	; (800066c <WAV_FileRead2+0x78>)
 8000648:	6812      	ldr	r2, [r2, #0]
 800064a:	4293      	cmp	r3, r2
 800064c:	d8eb      	bhi.n	8000626 <WAV_FileRead2+0x32>

		f_close(&file);
 800064e:	4806      	ldr	r0, [pc, #24]	; (8000668 <WAV_FileRead2+0x74>)
 8000650:	f00d fe35 	bl	800e2be <f_close>

		return 0;
 8000654:	2300      	movs	r3, #0
 8000656:	e000      	b.n	800065a <WAV_FileRead2+0x66>

	}
	return 1;
 8000658:	2301      	movs	r3, #1
}
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	2000216c 	.word	0x2000216c
 8000668:	200032f4 	.word	0x200032f4
 800066c:	20002168 	.word	0x20002168

08000670 <HAL_I2S_Transmit_DMAEx>:

	return Playing_End;
}

HAL_StatusTypeDef HAL_I2S_Transmit_DMAEx(I2S_HandleTypeDef *hi2s,
		uint16_t *FirstBuffer, uint16_t *SecondBuffer, uint16_t Size) {
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b089      	sub	sp, #36	; 0x24
 8000674:	af02      	add	r7, sp, #8
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
 800067c:	807b      	strh	r3, [r7, #2]
	uint32_t tmpreg_cfgr;
	if ((FirstBuffer == NULL) || (SecondBuffer == NULL) || (Size == 0U)) {
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d005      	beq.n	8000690 <HAL_I2S_Transmit_DMAEx+0x20>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d002      	beq.n	8000690 <HAL_I2S_Transmit_DMAEx+0x20>
 800068a:	887b      	ldrh	r3, [r7, #2]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d101      	bne.n	8000694 <HAL_I2S_Transmit_DMAEx+0x24>
		return HAL_ERROR;
 8000690:	2301      	movs	r3, #1
 8000692:	e09c      	b.n	80007ce <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Process Locked */
	__HAL_LOCK(hi2s);
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b01      	cmp	r3, #1
 800069e:	d101      	bne.n	80006a4 <HAL_I2S_Transmit_DMAEx+0x34>
 80006a0:	2302      	movs	r3, #2
 80006a2:	e094      	b.n	80007ce <HAL_I2S_Transmit_DMAEx+0x15e>
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2201      	movs	r2, #1
 80006a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (hi2s->State != HAL_I2S_STATE_READY) {
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d005      	beq.n	80006c4 <HAL_I2S_Transmit_DMAEx+0x54>
		__HAL_UNLOCK(hi2s);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	2200      	movs	r2, #0
 80006bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_BUSY;
 80006c0:	2302      	movs	r3, #2
 80006c2:	e084      	b.n	80007ce <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Set state and reset error code */
	hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2203      	movs	r2, #3
 80006c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	2200      	movs	r2, #0
 80006d0:	645a      	str	r2, [r3, #68]	; 0x44
	hi2s->pTxBuffPtr = FirstBuffer;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	68ba      	ldr	r2, [r7, #8]
 80006d6:	625a      	str	r2, [r3, #36]	; 0x24

	tmpreg_cfgr = hi2s->Instance->I2SCFGR
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	617b      	str	r3, [r7, #20]
			& (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);

	if ((tmpreg_cfgr == I2S_DATAFORMAT_24B)
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	2b03      	cmp	r3, #3
 80006e8:	d002      	beq.n	80006f0 <HAL_I2S_Transmit_DMAEx+0x80>
			|| (tmpreg_cfgr == I2S_DATAFORMAT_32B)) {
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	2b05      	cmp	r3, #5
 80006ee:	d10a      	bne.n	8000706 <HAL_I2S_Transmit_DMAEx+0x96>
		hi2s->TxXferSize = (Size << 1U);
 80006f0:	887b      	ldrh	r3, [r7, #2]
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = (Size << 1U);
 80006fa:	887b      	ldrh	r3, [r7, #2]
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	b29a      	uxth	r2, r3
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000704:	e005      	b.n	8000712 <HAL_I2S_Transmit_DMAEx+0xa2>
	} else {
		hi2s->TxXferSize = Size;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	887a      	ldrh	r2, [r7, #2]
 800070a:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = Size;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	887a      	ldrh	r2, [r7, #2]
 8000710:	855a      	strh	r2, [r3, #42]	; 0x2a
	}

	/* Set the I2S Tx DMA Half transfer complete callback */
	hi2s->hdmatx->XferHalfCpltCallback = NULL;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000716:	2200      	movs	r2, #0
 8000718:	641a      	str	r2, [r3, #64]	; 0x40
	hi2s->hdmatx->XferM1HalfCpltCallback = NULL;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800071e:	2200      	movs	r2, #0
 8000720:	649a      	str	r2, [r3, #72]	; 0x48

	/* Set the I2S Tx DMA transfer complete callback */
	hi2s->hdmatx->XferCpltCallback = DMAEx_XferCpltCallback;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000726:	4a2c      	ldr	r2, [pc, #176]	; (80007d8 <HAL_I2S_Transmit_DMAEx+0x168>)
 8000728:	63da      	str	r2, [r3, #60]	; 0x3c
	hi2s->hdmatx->XferM1CpltCallback = DMAEx_XferM1CpltCallback;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800072e:	4a2b      	ldr	r2, [pc, #172]	; (80007dc <HAL_I2S_Transmit_DMAEx+0x16c>)
 8000730:	645a      	str	r2, [r3, #68]	; 0x44

	/* Set the DMA error callback */
	hi2s->hdmatx->XferErrorCallback = DMAEx_XferErrorCallback;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000736:	4a2a      	ldr	r2, [pc, #168]	; (80007e0 <HAL_I2S_Transmit_DMAEx+0x170>)
 8000738:	64da      	str	r2, [r3, #76]	; 0x4c

	/* Set the DMA abort callback */
	hi2s->hdmatx->XferAbortCallback = NULL;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800073e:	2200      	movs	r2, #0
 8000740:	651a      	str	r2, [r3, #80]	; 0x50

	/* Enable the Tx DMA Stream/Channel */
	if (HAL_OK
			!= HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx,
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000746:	68b9      	ldr	r1, [r7, #8]
					(uint32_t) FirstBuffer, (uint32_t) &hi2s->Instance->DR,
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	330c      	adds	r3, #12
			!= HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx,
 800074e:	461c      	mov	r4, r3
 8000750:	687a      	ldr	r2, [r7, #4]
					(uint32_t) SecondBuffer, hi2s->TxXferSize)) {
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000756:	b29b      	uxth	r3, r3
			!= HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx,
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	4613      	mov	r3, r2
 800075c:	4622      	mov	r2, r4
 800075e:	f001 fc33 	bl	8001fc8 <HAL_DMAEx_MultiBufferStart_IT>
 8000762:	4603      	mov	r3, r0
	if (HAL_OK
 8000764:	2b00      	cmp	r3, #0
 8000766:	d00f      	beq.n	8000788 <HAL_I2S_Transmit_DMAEx+0x118>
		/* Update SPI error code */
		SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076c:	f043 0208 	orr.w	r2, r3, #8
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	645a      	str	r2, [r3, #68]	; 0x44
		hi2s->State = HAL_I2S_STATE_READY;
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2201      	movs	r2, #1
 8000778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		__HAL_UNLOCK(hi2s);
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_ERROR;
 8000784:	2301      	movs	r3, #1
 8000786:	e022      	b.n	80007ce <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Check if the I2S is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE)) {
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000792:	2b00      	cmp	r3, #0
 8000794:	d107      	bne.n	80007a6 <HAL_I2S_Transmit_DMAEx+0x136>
		/* Enable I2S peripheral */
		__HAL_I2S_ENABLE(hi2s);
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	69da      	ldr	r2, [r3, #28]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80007a4:	61da      	str	r2, [r3, #28]
	}

	/* Check if the I2S Tx request is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN)) {
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	f003 0302 	and.w	r3, r3, #2
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d107      	bne.n	80007c4 <HAL_I2S_Transmit_DMAEx+0x154>
		/* Enable Tx DMA Request */
		SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f042 0202 	orr.w	r2, r2, #2
 80007c2:	605a      	str	r2, [r3, #4]
	}

	__HAL_UNLOCK(hi2s);
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	return HAL_OK;
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	371c      	adds	r7, #28
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd90      	pop	{r4, r7, pc}
 80007d6:	bf00      	nop
 80007d8:	080007e5 	.word	0x080007e5
 80007dc:	0800080d 	.word	0x0800080d
 80007e0:	08000835 	.word	0x08000835

080007e4 <DMAEx_XferCpltCallback>:





static void DMAEx_XferCpltCallback(struct __DMA_HandleTypeDef *hdma) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	//if (DMA1_Stream3->CR & (1 << 19)) {
	//if(DMA1_Stream4->CR&(1<<19)){
	if (WAV_FileRead2((uint8_t*) I2S_Buf0, sizeof(I2S_Buf0)) == 0) {
 80007ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <DMAEx_XferCpltCallback+0x24>)
 80007f2:	f7ff feff 	bl	80005f4 <WAV_FileRead2>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d101      	bne.n	8000800 <DMAEx_XferCpltCallback+0x1c>
		Audio_Player_Stop();
 80007fc:	f000 f88c 	bl	8000918 <Audio_Player_Stop>
	}

	//}

}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000c4 	.word	0x200000c4

0800080c <DMAEx_XferM1CpltCallback>:

static void DMAEx_XferM1CpltCallback(struct __DMA_HandleTypeDef *hdma) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]

	if (WAV_FileRead2((uint8_t*) I2S_Buf1, sizeof(I2S_Buf1)) == 0) {
 8000814:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <DMAEx_XferM1CpltCallback+0x24>)
 800081a:	f7ff feeb 	bl	80005f4 <WAV_FileRead2>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d101      	bne.n	8000828 <DMAEx_XferM1CpltCallback+0x1c>
		Audio_Player_Stop();
 8000824:	f000 f878 	bl	8000918 <Audio_Player_Stop>
	}

}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200008c4 	.word	0x200008c4

08000834 <DMAEx_XferErrorCallback>:

static void DMAEx_XferErrorCallback(struct __DMA_HandleTypeDef *hdma) {
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]

}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <Audio_Player_Init>:

void Audio_Player_Init(I2C_HandleTypeDef*hi2c) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]

	WM8978_Register_Wirter(hi2c,0, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2100      	movs	r1, #0
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff fe87 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,1,0X1B);	//R1,MICEN脡猫脰脙脦陋1(MIC脢鹿脛脺),BIASEN脡猫脰脙脦陋1(脛拢脛芒脝梅鹿陇脳梅),VMIDSEL[1:0]脡猫脰脙脦陋:11(5K)
 800085a:	221b      	movs	r2, #27
 800085c:	2101      	movs	r1, #1
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff fe82 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,2,0X1B0);	//R2,ROUT1,LOUT1脢盲鲁枚脢鹿脛脺(露煤禄煤驴脡脪脭鹿陇脳梅),BOOSTENR,BOOSTENL脢鹿脛脺
 8000864:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8000868:	2102      	movs	r1, #2
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff fe7c 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,3,0X6C);	//R3,LOUT2,ROUT2脢盲鲁枚脢鹿脛脺(脌庐掳脠鹿陇脳梅),RMIX,LMIX脢鹿脛脺
 8000870:	226c      	movs	r2, #108	; 0x6c
 8000872:	2103      	movs	r1, #3
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff fe77 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,3, 0x7F);
 800087a:	227f      	movs	r2, #127	; 0x7f
 800087c:	2103      	movs	r1, #3
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff fe72 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,4, 0x10);
 8000884:	2210      	movs	r2, #16
 8000886:	2104      	movs	r1, #4
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff fe6d 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,6,0);		//R6,MCLK脫脡脥芒虏驴脤谩鹿漏
 800088e:	2200      	movs	r2, #0
 8000890:	2106      	movs	r1, #6
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff fe68 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,43,1<<4);	//R43,INVROUT2路麓脧貌,脟媒露炉脌庐掳脠
 8000898:	2210      	movs	r2, #16
 800089a:	212b      	movs	r1, #43	; 0x2b
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff fe63 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,47,1<<8);	//R47脡猫脰脙,PGABOOSTL,脳贸脥篓碌脌MIC禄帽碌脙20卤露脭枚脪忙
 80008a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008a6:	212f      	movs	r1, #47	; 0x2f
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff fe5d 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,48,1<<8);	//R48脡猫脰脙,PGABOOSTR,脫脪脥篓碌脌MIC禄帽碌脙20卤露脭枚脪忙
 80008ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008b2:	2130      	movs	r1, #48	; 0x30
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff fe57 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,49,1<<1);	//R49,TSDEN,驴陋脝么鹿媒脠脠卤拢禄陇
 80008ba:	2202      	movs	r2, #2
 80008bc:	2131      	movs	r1, #49	; 0x31
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff fe52 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,10,1<<3);	//R10,SOFTMUTE鹿脴卤脮,128x虏脡脩霉,脳卯录脩SNR
 80008c4:	2208      	movs	r2, #8
 80008c6:	210a      	movs	r1, #10
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff fe4d 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,14,1<<3);	//R14,AD
 80008ce:	2208      	movs	r2, #8
 80008d0:	210e      	movs	r1, #14
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff fe48 	bl	8000568 <WM8978_Register_Wirter>

}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <Audio_Player_Start>:



void Audio_Player_Start() {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	WAV_FileRead2((uint8_t*) I2S_Buf0, sizeof(I2S_Buf0));
 80008e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008e8:	4808      	ldr	r0, [pc, #32]	; (800090c <Audio_Player_Start+0x2c>)
 80008ea:	f7ff fe83 	bl	80005f4 <WAV_FileRead2>
	WAV_FileRead2((uint8_t*) I2S_Buf1, sizeof(I2S_Buf1));
 80008ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008f2:	4807      	ldr	r0, [pc, #28]	; (8000910 <Audio_Player_Start+0x30>)
 80008f4:	f7ff fe7e 	bl	80005f4 <WAV_FileRead2>
	HAL_I2S_Transmit_DMAEx(&USEI2S, I2S_Buf0, I2S_Buf1, BUFFER_SIZE);
 80008f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fc:	4a04      	ldr	r2, [pc, #16]	; (8000910 <Audio_Player_Start+0x30>)
 80008fe:	4903      	ldr	r1, [pc, #12]	; (800090c <Audio_Player_Start+0x2c>)
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <Audio_Player_Start+0x34>)
 8000902:	f7ff feb5 	bl	8000670 <HAL_I2S_Transmit_DMAEx>

	//HAL_I2S_Transmit_DMAEx(&USEI2S, I2S_Buf0, I2S_Buf1, BUFFER_SIZE);

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200000c4 	.word	0x200000c4
 8000910:	200008c4 	.word	0x200008c4
 8000914:	200043d0 	.word	0x200043d0

08000918 <Audio_Player_Stop>:

void Audio_Player_Resume(void) {
	HAL_I2S_DMAResume(&USEI2S);
}

void Audio_Player_Stop(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	WAV_FileInit();
 800091c:	f7ff fe54 	bl	80005c8 <WAV_FileInit>
	HAL_I2S_DMAStop(&USEI2S);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <Audio_Player_Stop+0x14>)
 8000922:	f005 f957 	bl	8005bd4 <HAL_I2S_DMAStop>
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200043d0 	.word	0x200043d0

08000930 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart5, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000938:	1d39      	adds	r1, r7, #4
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
 800093e:	2201      	movs	r2, #1
 8000940:	4803      	ldr	r0, [pc, #12]	; (8000950 <__io_putchar+0x20>)
 8000942:	f006 fcc6 	bl	80072d2 <HAL_UART_Transmit>
  return ch;
 8000946:	687b      	ldr	r3, [r7, #4]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200032b0 	.word	0x200032b0

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000958:	f000 fe34 	bl	80015c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095c:	f000 f878 	bl	8000a50 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000960:	f000 f8e0 	bl	8000b24 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000964:	f000 fa04 	bl	8000d70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000968:	f000 f9da 	bl	8000d20 <MX_DMA_Init>
  MX_I2S3_Init();
 800096c:	f000 f980 	bl	8000c70 <MX_I2S3_Init>
  MX_I2C1_Init();
 8000970:	f000 f8f4 	bl	8000b5c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000974:	f000 f920 	bl	8000bb8 <MX_I2C2_Init>
  MX_I2S2_Init();
 8000978:	f000 f94c 	bl	8000c14 <MX_I2S2_Init>
  MX_FATFS_Init();
 800097c:	f007 ff2a 	bl	80087d4 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000980:	f00d ff48 	bl	800e814 <MX_USB_HOST_Init>
  MX_UART5_Init();
 8000984:	f000 f9a2 	bl	8000ccc <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  Audio_Player_Init(&hi2c1);
 8000988:	4825      	ldr	r0, [pc, #148]	; (8000a20 <main+0xcc>)
 800098a:	f7ff ff5d 	bl	8000848 <Audio_Player_Init>
  Audio_Player_Init(&hi2c2);
 800098e:	4825      	ldr	r0, [pc, #148]	; (8000a24 <main+0xd0>)
 8000990:	f7ff ff5a 	bl	8000848 <Audio_Player_Init>
  //ETX_MSC_ProcessUsbDevice();

  while( Appli_state !=APPLICATION_READY){
 8000994:	e001      	b.n	800099a <main+0x46>
	    MX_USB_HOST_Process();
 8000996:	f00d ff63 	bl	800e860 <MX_USB_HOST_Process>
  while( Appli_state !=APPLICATION_READY){
 800099a:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <main+0xd4>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d1f9      	bne.n	8000996 <main+0x42>
  }
  res = f_mount( &UsbDiskFatFs, (TCHAR const*)UsbDiskPath, 0 );
 80009a2:	2200      	movs	r2, #0
 80009a4:	4921      	ldr	r1, [pc, #132]	; (8000a2c <main+0xd8>)
 80009a6:	4822      	ldr	r0, [pc, #136]	; (8000a30 <main+0xdc>)
 80009a8:	f00d f89a 	bl	800dae0 <f_mount>
 80009ac:	4603      	mov	r3, r0
 80009ae:	461a      	mov	r2, r3
 80009b0:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <main+0xe0>)
 80009b2:	701a      	strb	r2, [r3, #0]

  printf("mount %d\n",res);
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <main+0xe0>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	481f      	ldr	r0, [pc, #124]	; (8000a38 <main+0xe4>)
 80009bc:	f00e fb36 	bl	800f02c <iprintf>
  res = f_open( &file, file_name, FA_READ );
 80009c0:	2201      	movs	r2, #1
 80009c2:	491e      	ldr	r1, [pc, #120]	; (8000a3c <main+0xe8>)
 80009c4:	481e      	ldr	r0, [pc, #120]	; (8000a40 <main+0xec>)
 80009c6:	f00d f8d1 	bl	800db6c <f_open>
 80009ca:	4603      	mov	r3, r0
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <main+0xe0>)
 80009d0:	701a      	strb	r2, [r3, #0]


  f_lseek(&file,44);
 80009d2:	212c      	movs	r1, #44	; 0x2c
 80009d4:	481a      	ldr	r0, [pc, #104]	; (8000a40 <main+0xec>)
 80009d6:	f00d fc9c 	bl	800e312 <f_lseek>
  printf("open %d\n",res);
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <main+0xe0>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	4619      	mov	r1, r3
 80009e0:	4818      	ldr	r0, [pc, #96]	; (8000a44 <main+0xf0>)
 80009e2:	f00e fb23 	bl	800f02c <iprintf>
  res = f_open( &file2, file_name2, FA_READ );
 80009e6:	2201      	movs	r2, #1
 80009e8:	4917      	ldr	r1, [pc, #92]	; (8000a48 <main+0xf4>)
 80009ea:	4818      	ldr	r0, [pc, #96]	; (8000a4c <main+0xf8>)
 80009ec:	f00d f8be 	bl	800db6c <f_open>
 80009f0:	4603      	mov	r3, r0
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <main+0xe0>)
 80009f6:	701a      	strb	r2, [r3, #0]
  f_lseek(&file2,44);
 80009f8:	212c      	movs	r1, #44	; 0x2c
 80009fa:	4814      	ldr	r0, [pc, #80]	; (8000a4c <main+0xf8>)
 80009fc:	f00d fc89 	bl	800e312 <f_lseek>

  printf("open %d\n",res);
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <main+0xe0>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	480f      	ldr	r0, [pc, #60]	; (8000a44 <main+0xf0>)
 8000a08:	f00e fb10 	bl	800f02c <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000a0c:	f00d ff28 	bl	800e860 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	  Audio_Player_Start();
 8000a10:	f7ff ff66 	bl	80008e0 <Audio_Player_Start>
	  HAL_Delay(50000);
 8000a14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000a18:	f000 fe46 	bl	80016a8 <HAL_Delay>
    MX_USB_HOST_Process();
 8000a1c:	e7f6      	b.n	8000a0c <main+0xb8>
 8000a1e:	bf00      	nop
 8000a20:	200031a4 	.word	0x200031a4
 8000a24:	200031f8 	.word	0x200031f8
 8000a28:	2000213c 	.word	0x2000213c
 8000a2c:	20002100 	.word	0x20002100
 8000a30:	200010cc 	.word	0x200010cc
 8000a34:	20004324 	.word	0x20004324
 8000a38:	0800fedc 	.word	0x0800fedc
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	200032f4 	.word	0x200032f4
 8000a44:	0800fee8 	.word	0x0800fee8
 8000a48:	2000000c 	.word	0x2000000c
 8000a4c:	20002170 	.word	0x20002170

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b094      	sub	sp, #80	; 0x50
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0320 	add.w	r3, r7, #32
 8000a5a:	2230      	movs	r2, #48	; 0x30
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f00e fa32 	bl	800eec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <SystemClock_Config+0xcc>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	4a27      	ldr	r2, [pc, #156]	; (8000b1c <SystemClock_Config+0xcc>)
 8000a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a82:	6413      	str	r3, [r2, #64]	; 0x40
 8000a84:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <SystemClock_Config+0xcc>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a90:	2300      	movs	r3, #0
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <SystemClock_Config+0xd0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a21      	ldr	r2, [pc, #132]	; (8000b20 <SystemClock_Config+0xd0>)
 8000a9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9e:	6013      	str	r3, [r2, #0]
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <SystemClock_Config+0xd0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aac:	2301      	movs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ac4:	23a8      	movs	r3, #168	; 0xa8
 8000ac6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000acc:	2307      	movs	r3, #7
 8000ace:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad0:	f107 0320 	add.w	r3, r7, #32
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f005 fdfb 	bl	80066d0 <HAL_RCC_OscConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ae0:	f000 f9a6 	bl	8000e30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae4:	230f      	movs	r3, #15
 8000ae6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000af0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000af4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	2105      	movs	r1, #5
 8000b02:	4618      	mov	r0, r3
 8000b04:	f006 f85c 	bl	8006bc0 <HAL_RCC_ClockConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b0e:	f000 f98f 	bl	8000e30 <Error_Handler>
  }
}
 8000b12:	bf00      	nop
 8000b14:	3750      	adds	r7, #80	; 0x50
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40007000 	.word	0x40007000

08000b24 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b36:	2301      	movs	r3, #1
 8000b38:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b3a:	23c0      	movs	r3, #192	; 0xc0
 8000b3c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b42:	463b      	mov	r3, r7
 8000b44:	4618      	mov	r0, r3
 8000b46:	f006 fa37 	bl	8006fb8 <HAL_RCCEx_PeriphCLKConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000b50:	f000 f96e 	bl	8000e30 <Error_Handler>
  }
}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <MX_I2C1_Init+0x50>)
 8000b62:	4a13      	ldr	r2, [pc, #76]	; (8000bb0 <MX_I2C1_Init+0x54>)
 8000b64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_I2C1_Init+0x50>)
 8000b68:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <MX_I2C1_Init+0x58>)
 8000b6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_I2C1_Init+0x50>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_I2C1_Init+0x50>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_I2C1_Init+0x50>)
 8000b7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <MX_I2C1_Init+0x50>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_I2C1_Init+0x50>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <MX_I2C1_Init+0x50>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_I2C1_Init+0x50>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <MX_I2C1_Init+0x50>)
 8000b9a:	f004 fa8f 	bl	80050bc <HAL_I2C_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ba4:	f000 f944 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200031a4 	.word	0x200031a4
 8000bb0:	40005400 	.word	0x40005400
 8000bb4:	000186a0 	.word	0x000186a0

08000bb8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_I2C2_Init+0x50>)
 8000bbe:	4a13      	ldr	r2, [pc, #76]	; (8000c0c <MX_I2C2_Init+0x54>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_I2C2_Init+0x50>)
 8000bc4:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <MX_I2C2_Init+0x58>)
 8000bc6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_I2C2_Init+0x50>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_I2C2_Init+0x50>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MX_I2C2_Init+0x50>)
 8000bd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bda:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <MX_I2C2_Init+0x50>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_I2C2_Init+0x50>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <MX_I2C2_Init+0x50>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_I2C2_Init+0x50>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <MX_I2C2_Init+0x50>)
 8000bf6:	f004 fa61 	bl	80050bc <HAL_I2C_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c00:	f000 f916 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200031f8 	.word	0x200031f8
 8000c0c:	40005800 	.word	0x40005800
 8000c10:	000186a0 	.word	0x000186a0

08000c14 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <MX_I2S2_Init+0x54>)
 8000c1a:	4a14      	ldr	r2, [pc, #80]	; (8000c6c <MX_I2S2_Init+0x58>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <MX_I2S2_Init+0x54>)
 8000c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c24:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <MX_I2S2_Init+0x54>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_I2S2_Init+0x54>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <MX_I2S2_Init+0x54>)
 8000c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c38:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_I2S2_Init+0x54>)
 8000c3c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000c40:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_I2S2_Init+0x54>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <MX_I2S2_Init+0x54>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_I2S2_Init+0x54>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <MX_I2S2_Init+0x54>)
 8000c56:	f004 fe7d 	bl	8005954 <HAL_I2S_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000c60:	f000 f8e6 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20004388 	.word	0x20004388
 8000c6c:	40003800 	.word	0x40003800

08000c70 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <MX_I2S3_Init+0x54>)
 8000c76:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <MX_I2S3_Init+0x58>)
 8000c78:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000c7a:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <MX_I2S3_Init+0x54>)
 8000c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c80:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <MX_I2S3_Init+0x54>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <MX_I2S3_Init+0x54>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <MX_I2S3_Init+0x54>)
 8000c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c94:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <MX_I2S3_Init+0x54>)
 8000c98:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000c9c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <MX_I2S3_Init+0x54>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <MX_I2S3_Init+0x54>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <MX_I2S3_Init+0x54>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000cb0:	4804      	ldr	r0, [pc, #16]	; (8000cc4 <MX_I2S3_Init+0x54>)
 8000cb2:	f004 fe4f 	bl	8005954 <HAL_I2S_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000cbc:	f000 f8b8 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200043d0 	.word	0x200043d0
 8000cc8:	40003c00 	.word	0x40003c00

08000ccc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_UART5_Init+0x4c>)
 8000cd2:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <MX_UART5_Init+0x50>)
 8000cd4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <MX_UART5_Init+0x4c>)
 8000cd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cdc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_UART5_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <MX_UART5_Init+0x4c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <MX_UART5_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <MX_UART5_Init+0x4c>)
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <MX_UART5_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_UART5_Init+0x4c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_UART5_Init+0x4c>)
 8000d04:	f006 fa98 	bl	8007238 <HAL_UART_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000d0e:	f000 f88f 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200032b0 	.word	0x200032b0
 8000d1c:	40005000 	.word	0x40005000

08000d20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <MX_DMA_Init+0x4c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <MX_DMA_Init+0x4c>)
 8000d30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <MX_DMA_Init+0x4c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2100      	movs	r1, #0
 8000d46:	200f      	movs	r0, #15
 8000d48:	f000 fdad 	bl	80018a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d4c:	200f      	movs	r0, #15
 8000d4e:	f000 fdc6 	bl	80018de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 2, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2102      	movs	r1, #2
 8000d56:	2010      	movs	r0, #16
 8000d58:	f000 fda5 	bl	80018a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d5c:	2010      	movs	r0, #16
 8000d5e:	f000 fdbe 	bl	80018de <HAL_NVIC_EnableIRQ>

}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800

08000d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b087      	sub	sp, #28
 8000d74:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	4b2c      	ldr	r3, [pc, #176]	; (8000e2c <MX_GPIO_Init+0xbc>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a2b      	ldr	r2, [pc, #172]	; (8000e2c <MX_GPIO_Init+0xbc>)
 8000d80:	f043 0320 	orr.w	r3, r3, #32
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b29      	ldr	r3, [pc, #164]	; (8000e2c <MX_GPIO_Init+0xbc>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0320 	and.w	r3, r3, #32
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <MX_GPIO_Init+0xbc>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a24      	ldr	r2, [pc, #144]	; (8000e2c <MX_GPIO_Init+0xbc>)
 8000d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <MX_GPIO_Init+0xbc>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <MX_GPIO_Init+0xbc>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a1d      	ldr	r2, [pc, #116]	; (8000e2c <MX_GPIO_Init+0xbc>)
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <MX_GPIO_Init+0xbc>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <MX_GPIO_Init+0xbc>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a16      	ldr	r2, [pc, #88]	; (8000e2c <MX_GPIO_Init+0xbc>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_GPIO_Init+0xbc>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <MX_GPIO_Init+0xbc>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a0f      	ldr	r2, [pc, #60]	; (8000e2c <MX_GPIO_Init+0xbc>)
 8000df0:	f043 0302 	orr.w	r3, r3, #2
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <MX_GPIO_Init+0xbc>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	603b      	str	r3, [r7, #0]
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_GPIO_Init+0xbc>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <MX_GPIO_Init+0xbc>)
 8000e0c:	f043 0308 	orr.w	r3, r3, #8
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_GPIO_Init+0xbc>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0308 	and.w	r3, r3, #8
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]

}
 8000e1e:	bf00      	nop
 8000e20:	371c      	adds	r7, #28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800

08000e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e34:	b672      	cpsid	i
}
 8000e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <Error_Handler+0x8>
	...

08000e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	4a0f      	ldr	r2, [pc, #60]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e50:	6453      	str	r3, [r2, #68]	; 0x44
 8000e52:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	603b      	str	r3, [r7, #0]
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800

08000e8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08c      	sub	sp, #48	; 0x30
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a32      	ldr	r2, [pc, #200]	; (8000f74 <HAL_I2C_MspInit+0xe8>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d12c      	bne.n	8000f08 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
 8000eb2:	4b31      	ldr	r3, [pc, #196]	; (8000f78 <HAL_I2C_MspInit+0xec>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a30      	ldr	r2, [pc, #192]	; (8000f78 <HAL_I2C_MspInit+0xec>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b2e      	ldr	r3, [pc, #184]	; (8000f78 <HAL_I2C_MspInit+0xec>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	61bb      	str	r3, [r7, #24]
 8000ec8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eca:	23c0      	movs	r3, #192	; 0xc0
 8000ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ece:	2312      	movs	r3, #18
 8000ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eda:	2304      	movs	r3, #4
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4825      	ldr	r0, [pc, #148]	; (8000f7c <HAL_I2C_MspInit+0xf0>)
 8000ee6:	f002 f9dd 	bl	80032a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <HAL_I2C_MspInit+0xec>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	4a21      	ldr	r2, [pc, #132]	; (8000f78 <HAL_I2C_MspInit+0xec>)
 8000ef4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8000efa:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <HAL_I2C_MspInit+0xec>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f06:	e030      	b.n	8000f6a <HAL_I2C_MspInit+0xde>
  else if(hi2c->Instance==I2C2)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a1c      	ldr	r2, [pc, #112]	; (8000f80 <HAL_I2C_MspInit+0xf4>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d12b      	bne.n	8000f6a <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <HAL_I2C_MspInit+0xec>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a17      	ldr	r2, [pc, #92]	; (8000f78 <HAL_I2C_MspInit+0xec>)
 8000f1c:	f043 0320 	orr.w	r3, r3, #32
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <HAL_I2C_MspInit+0xec>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0320 	and.w	r3, r3, #32
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f32:	2312      	movs	r3, #18
 8000f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f3e:	2304      	movs	r3, #4
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	4619      	mov	r1, r3
 8000f48:	480e      	ldr	r0, [pc, #56]	; (8000f84 <HAL_I2C_MspInit+0xf8>)
 8000f4a:	f002 f9ab 	bl	80032a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_I2C_MspInit+0xec>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <HAL_I2C_MspInit+0xec>)
 8000f58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_I2C_MspInit+0xec>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
}
 8000f6a:	bf00      	nop
 8000f6c:	3730      	adds	r7, #48	; 0x30
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40005400 	.word	0x40005400
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	40005800 	.word	0x40005800
 8000f84:	40021400 	.word	0x40021400

08000f88 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08e      	sub	sp, #56	; 0x38
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a4b      	ldr	r2, [pc, #300]	; (80010d4 <HAL_I2S_MspInit+0x14c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	f040 80a0 	bne.w	80010ec <HAL_I2S_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
 8000fb0:	4b49      	ldr	r3, [pc, #292]	; (80010d8 <HAL_I2S_MspInit+0x150>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	4a48      	ldr	r2, [pc, #288]	; (80010d8 <HAL_I2S_MspInit+0x150>)
 8000fb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fba:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbc:	4b46      	ldr	r3, [pc, #280]	; (80010d8 <HAL_I2S_MspInit+0x150>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc4:	623b      	str	r3, [r7, #32]
 8000fc6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
 8000fcc:	4b42      	ldr	r3, [pc, #264]	; (80010d8 <HAL_I2S_MspInit+0x150>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a41      	ldr	r2, [pc, #260]	; (80010d8 <HAL_I2S_MspInit+0x150>)
 8000fd2:	f043 0304 	orr.w	r3, r3, #4
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd8:	4b3f      	ldr	r3, [pc, #252]	; (80010d8 <HAL_I2S_MspInit+0x150>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	61fb      	str	r3, [r7, #28]
 8000fe2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61bb      	str	r3, [r7, #24]
 8000fe8:	4b3b      	ldr	r3, [pc, #236]	; (80010d8 <HAL_I2S_MspInit+0x150>)
 8000fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fec:	4a3a      	ldr	r2, [pc, #232]	; (80010d8 <HAL_I2S_MspInit+0x150>)
 8000fee:	f043 0302 	orr.w	r3, r3, #2
 8000ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff4:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <HAL_I2S_MspInit+0x150>)
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	61bb      	str	r3, [r7, #24]
 8000ffe:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001000:	2304      	movs	r3, #4
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001010:	2306      	movs	r3, #6
 8001012:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001018:	4619      	mov	r1, r3
 800101a:	4830      	ldr	r0, [pc, #192]	; (80010dc <HAL_I2S_MspInit+0x154>)
 800101c:	f002 f942 	bl	80032a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8001020:	2348      	movs	r3, #72	; 0x48
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001030:	2305      	movs	r3, #5
 8001032:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001038:	4619      	mov	r1, r3
 800103a:	4828      	ldr	r0, [pc, #160]	; (80010dc <HAL_I2S_MspInit+0x154>)
 800103c:	f002 f932 	bl	80032a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001040:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001052:	2305      	movs	r3, #5
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105a:	4619      	mov	r1, r3
 800105c:	4820      	ldr	r0, [pc, #128]	; (80010e0 <HAL_I2S_MspInit+0x158>)
 800105e:	f002 f921 	bl	80032a4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <HAL_I2S_MspInit+0x15c>)
 8001064:	4a20      	ldr	r2, [pc, #128]	; (80010e8 <HAL_I2S_MspInit+0x160>)
 8001066:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001068:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <HAL_I2S_MspInit+0x15c>)
 800106a:	2200      	movs	r2, #0
 800106c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <HAL_I2S_MspInit+0x15c>)
 8001070:	2240      	movs	r2, #64	; 0x40
 8001072:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <HAL_I2S_MspInit+0x15c>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800107a:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <HAL_I2S_MspInit+0x15c>)
 800107c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001080:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_I2S_MspInit+0x15c>)
 8001084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001088:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <HAL_I2S_MspInit+0x15c>)
 800108c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001090:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_I2S_MspInit+0x15c>)
 8001094:	2200      	movs	r2, #0
 8001096:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_I2S_MspInit+0x15c>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_I2S_MspInit+0x15c>)
 80010a0:	2204      	movs	r2, #4
 80010a2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <HAL_I2S_MspInit+0x15c>)
 80010a6:	2203      	movs	r2, #3
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_I2S_MspInit+0x15c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <HAL_I2S_MspInit+0x15c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80010b6:	480b      	ldr	r0, [pc, #44]	; (80010e4 <HAL_I2S_MspInit+0x15c>)
 80010b8:	f000 fc2c 	bl	8001914 <HAL_DMA_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 80010c2:	f7ff feb5 	bl	8000e30 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <HAL_I2S_MspInit+0x15c>)
 80010ca:	639a      	str	r2, [r3, #56]	; 0x38
 80010cc:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <HAL_I2S_MspInit+0x15c>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010d2:	e0ca      	b.n	800126a <HAL_I2S_MspInit+0x2e2>
 80010d4:	40003800 	.word	0x40003800
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020800 	.word	0x40020800
 80010e0:	40020400 	.word	0x40020400
 80010e4:	20004328 	.word	0x20004328
 80010e8:	40026070 	.word	0x40026070
  else if(hi2s->Instance==SPI3)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a60      	ldr	r2, [pc, #384]	; (8001274 <HAL_I2S_MspInit+0x2ec>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	f040 80b9 	bne.w	800126a <HAL_I2S_MspInit+0x2e2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	4b5e      	ldr	r3, [pc, #376]	; (8001278 <HAL_I2S_MspInit+0x2f0>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	4a5d      	ldr	r2, [pc, #372]	; (8001278 <HAL_I2S_MspInit+0x2f0>)
 8001102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001106:	6413      	str	r3, [r2, #64]	; 0x40
 8001108:	4b5b      	ldr	r3, [pc, #364]	; (8001278 <HAL_I2S_MspInit+0x2f0>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	4b57      	ldr	r3, [pc, #348]	; (8001278 <HAL_I2S_MspInit+0x2f0>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	4a56      	ldr	r2, [pc, #344]	; (8001278 <HAL_I2S_MspInit+0x2f0>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6313      	str	r3, [r2, #48]	; 0x30
 8001124:	4b54      	ldr	r3, [pc, #336]	; (8001278 <HAL_I2S_MspInit+0x2f0>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	4b50      	ldr	r3, [pc, #320]	; (8001278 <HAL_I2S_MspInit+0x2f0>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	4a4f      	ldr	r2, [pc, #316]	; (8001278 <HAL_I2S_MspInit+0x2f0>)
 800113a:	f043 0304 	orr.w	r3, r3, #4
 800113e:	6313      	str	r3, [r2, #48]	; 0x30
 8001140:	4b4d      	ldr	r3, [pc, #308]	; (8001278 <HAL_I2S_MspInit+0x2f0>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	4b49      	ldr	r3, [pc, #292]	; (8001278 <HAL_I2S_MspInit+0x2f0>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	4a48      	ldr	r2, [pc, #288]	; (8001278 <HAL_I2S_MspInit+0x2f0>)
 8001156:	f043 0302 	orr.w	r3, r3, #2
 800115a:	6313      	str	r3, [r2, #48]	; 0x30
 800115c:	4b46      	ldr	r3, [pc, #280]	; (8001278 <HAL_I2S_MspInit+0x2f0>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001168:	2310      	movs	r3, #16
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001178:	2306      	movs	r3, #6
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001180:	4619      	mov	r1, r3
 8001182:	483e      	ldr	r0, [pc, #248]	; (800127c <HAL_I2S_MspInit+0x2f4>)
 8001184:	f002 f88e 	bl	80032a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001198:	2306      	movs	r3, #6
 800119a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a0:	4619      	mov	r1, r3
 80011a2:	4837      	ldr	r0, [pc, #220]	; (8001280 <HAL_I2S_MspInit+0x2f8>)
 80011a4:	f002 f87e 	bl	80032a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 80011ba:	2305      	movs	r3, #5
 80011bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c2:	4619      	mov	r1, r3
 80011c4:	482e      	ldr	r0, [pc, #184]	; (8001280 <HAL_I2S_MspInit+0x2f8>)
 80011c6:	f002 f86d 	bl	80032a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80011ca:	2328      	movs	r3, #40	; 0x28
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011da:	2306      	movs	r3, #6
 80011dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e2:	4619      	mov	r1, r3
 80011e4:	4827      	ldr	r0, [pc, #156]	; (8001284 <HAL_I2S_MspInit+0x2fc>)
 80011e6:	f002 f85d 	bl	80032a4 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80011ea:	4b27      	ldr	r3, [pc, #156]	; (8001288 <HAL_I2S_MspInit+0x300>)
 80011ec:	4a27      	ldr	r2, [pc, #156]	; (800128c <HAL_I2S_MspInit+0x304>)
 80011ee:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80011f0:	4b25      	ldr	r3, [pc, #148]	; (8001288 <HAL_I2S_MspInit+0x300>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011f6:	4b24      	ldr	r3, [pc, #144]	; (8001288 <HAL_I2S_MspInit+0x300>)
 80011f8:	2240      	movs	r2, #64	; 0x40
 80011fa:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011fc:	4b22      	ldr	r3, [pc, #136]	; (8001288 <HAL_I2S_MspInit+0x300>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001202:	4b21      	ldr	r3, [pc, #132]	; (8001288 <HAL_I2S_MspInit+0x300>)
 8001204:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001208:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800120a:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <HAL_I2S_MspInit+0x300>)
 800120c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001210:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001212:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <HAL_I2S_MspInit+0x300>)
 8001214:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001218:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800121a:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <HAL_I2S_MspInit+0x300>)
 800121c:	2200      	movs	r2, #0
 800121e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <HAL_I2S_MspInit+0x300>)
 8001222:	2200      	movs	r2, #0
 8001224:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <HAL_I2S_MspInit+0x300>)
 8001228:	2204      	movs	r2, #4
 800122a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <HAL_I2S_MspInit+0x300>)
 800122e:	2203      	movs	r2, #3
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_I2S_MspInit+0x300>)
 8001234:	2200      	movs	r2, #0
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <HAL_I2S_MspInit+0x300>)
 800123a:	2200      	movs	r2, #0
 800123c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800123e:	4812      	ldr	r0, [pc, #72]	; (8001288 <HAL_I2S_MspInit+0x300>)
 8001240:	f000 fb68 	bl	8001914 <HAL_DMA_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_I2S_MspInit+0x2c6>
      Error_Handler();
 800124a:	f7ff fdf1 	bl	8000e30 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <HAL_I2S_MspInit+0x300>)
 8001252:	639a      	str	r2, [r3, #56]	; 0x38
 8001254:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <HAL_I2S_MspInit+0x300>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	2033      	movs	r0, #51	; 0x33
 8001260:	f000 fb21 	bl	80018a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001264:	2033      	movs	r0, #51	; 0x33
 8001266:	f000 fb3a 	bl	80018de <HAL_NVIC_EnableIRQ>
}
 800126a:	bf00      	nop
 800126c:	3738      	adds	r7, #56	; 0x38
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40003c00 	.word	0x40003c00
 8001278:	40023800 	.word	0x40023800
 800127c:	40020000 	.word	0x40020000
 8001280:	40020800 	.word	0x40020800
 8001284:	40020400 	.word	0x40020400
 8001288:	20003250 	.word	0x20003250
 800128c:	40026088 	.word	0x40026088

08001290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a28      	ldr	r2, [pc, #160]	; (8001350 <HAL_UART_MspInit+0xc0>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d14a      	bne.n	8001348 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	4b27      	ldr	r3, [pc, #156]	; (8001354 <HAL_UART_MspInit+0xc4>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	4a26      	ldr	r2, [pc, #152]	; (8001354 <HAL_UART_MspInit+0xc4>)
 80012bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012c0:	6413      	str	r3, [r2, #64]	; 0x40
 80012c2:	4b24      	ldr	r3, [pc, #144]	; (8001354 <HAL_UART_MspInit+0xc4>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <HAL_UART_MspInit+0xc4>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <HAL_UART_MspInit+0xc4>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <HAL_UART_MspInit+0xc4>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_UART_MspInit+0xc4>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a18      	ldr	r2, [pc, #96]	; (8001354 <HAL_UART_MspInit+0xc4>)
 80012f4:	f043 0308 	orr.w	r3, r3, #8
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <HAL_UART_MspInit+0xc4>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001318:	2308      	movs	r3, #8
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <HAL_UART_MspInit+0xc8>)
 8001324:	f001 ffbe 	bl	80032a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001328:	2304      	movs	r3, #4
 800132a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001338:	2308      	movs	r3, #8
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <HAL_UART_MspInit+0xcc>)
 8001344:	f001 ffae 	bl	80032a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001348:	bf00      	nop
 800134a:	3728      	adds	r7, #40	; 0x28
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40005000 	.word	0x40005000
 8001354:	40023800 	.word	0x40023800
 8001358:	40020800 	.word	0x40020800
 800135c:	40020c00 	.word	0x40020c00

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <NMI_Handler+0x4>

08001366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <MemManage_Handler+0x4>

08001372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <UsageFault_Handler+0x4>

0800137e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ac:	f000 f95c 	bl	8001668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <DMA1_Stream4_IRQHandler+0x10>)
 80013ba:	f000 fbc9 	bl	8001b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20004328 	.word	0x20004328

080013c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <DMA1_Stream5_IRQHandler+0x10>)
 80013ce:	f000 fbbf 	bl	8001b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20003250 	.word	0x20003250

080013dc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <SPI3_IRQHandler+0x10>)
 80013e2:	f004 fdd1 	bl	8005f88 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200043d0 	.word	0x200043d0

080013f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <OTG_FS_IRQHandler+0x10>)
 80013f6:	f002 fb5b 	bl	8003ab0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20006860 	.word	0x20006860

08001404 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	e00a      	b.n	800142c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001416:	f3af 8000 	nop.w
 800141a:	4601      	mov	r1, r0
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	60ba      	str	r2, [r7, #8]
 8001422:	b2ca      	uxtb	r2, r1
 8001424:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	429a      	cmp	r2, r3
 8001432:	dbf0      	blt.n	8001416 <_read+0x12>
	}

return len;
 8001434:	687b      	ldr	r3, [r7, #4]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	60f8      	str	r0, [r7, #12]
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	e009      	b.n	8001464 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	60ba      	str	r2, [r7, #8]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fa69 	bl	8000930 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbf1      	blt.n	8001450 <_write+0x12>
	}
	return len;
 800146c:	687b      	ldr	r3, [r7, #4]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_close>:

int _close(int file)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
	return -1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800149e:	605a      	str	r2, [r3, #4]
	return 0;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <_isatty>:

int _isatty(int file)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
	return 1;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
	return 0;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e8:	4a14      	ldr	r2, [pc, #80]	; (800153c <_sbrk+0x5c>)
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <_sbrk+0x60>)
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d102      	bne.n	8001502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <_sbrk+0x64>)
 80014fe:	4a12      	ldr	r2, [pc, #72]	; (8001548 <_sbrk+0x68>)
 8001500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <_sbrk+0x64>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	429a      	cmp	r2, r3
 800150e:	d207      	bcs.n	8001520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001510:	f00d fc92 	bl	800ee38 <__errno>
 8001514:	4603      	mov	r3, r0
 8001516:	220c      	movs	r2, #12
 8001518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	e009      	b.n	8001534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <_sbrk+0x64>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <_sbrk+0x64>)
 8001530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001532:	68fb      	ldr	r3, [r7, #12]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20020000 	.word	0x20020000
 8001540:	00000400 	.word	0x00000400
 8001544:	20002104 	.word	0x20002104
 8001548:	20006b78 	.word	0x20006b78

0800154c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <SystemInit+0x20>)
 8001552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <SystemInit+0x20>)
 8001558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800155c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001574:	480d      	ldr	r0, [pc, #52]	; (80015ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001576:	490e      	ldr	r1, [pc, #56]	; (80015b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001578:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800157c:	e002      	b.n	8001584 <LoopCopyDataInit>

0800157e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001582:	3304      	adds	r3, #4

08001584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001588:	d3f9      	bcc.n	800157e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158a:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800158c:	4c0b      	ldr	r4, [pc, #44]	; (80015bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001590:	e001      	b.n	8001596 <LoopFillZerobss>

08001592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001594:	3204      	adds	r2, #4

08001596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001598:	d3fb      	bcc.n	8001592 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800159a:	f7ff ffd7 	bl	800154c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159e:	f00d fc51 	bl	800ee44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a2:	f7ff f9d7 	bl	8000954 <main>
  bx  lr    
 80015a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b0:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80015b4:	08086fa0 	.word	0x08086fa0
  ldr r2, =_sbss
 80015b8:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80015bc:	20006b74 	.word	0x20006b74

080015c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC_IRQHandler>
	...

080015c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <HAL_Init+0x40>)
 80015ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <HAL_Init+0x40>)
 80015da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_Init+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a07      	ldr	r2, [pc, #28]	; (8001604 <HAL_Init+0x40>)
 80015e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ec:	2003      	movs	r0, #3
 80015ee:	f000 f94f 	bl	8001890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f2:	200f      	movs	r0, #15
 80015f4:	f000 f808 	bl	8001608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f8:	f7ff fc20 	bl	8000e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023c00 	.word	0x40023c00

08001608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_InitTick+0x54>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_InitTick+0x58>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f967 	bl	80018fa <HAL_SYSTICK_Config>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e00e      	b.n	8001654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d80a      	bhi.n	8001652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f000 f92f 	bl	80018a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001648:	4a06      	ldr	r2, [pc, #24]	; (8001664 <HAL_InitTick+0x5c>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	e000      	b.n	8001654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000018 	.word	0x20000018
 8001660:	20000020 	.word	0x20000020
 8001664:	2000001c 	.word	0x2000001c

08001668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_IncTick+0x20>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_IncTick+0x24>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4413      	add	r3, r2
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <HAL_IncTick+0x24>)
 800167a:	6013      	str	r3, [r2, #0]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000020 	.word	0x20000020
 800168c:	20004418 	.word	0x20004418

08001690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return uwTick;
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_GetTick+0x14>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20004418 	.word	0x20004418

080016a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b0:	f7ff ffee 	bl	8001690 <HAL_GetTick>
 80016b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c0:	d005      	beq.n	80016ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <HAL_Delay+0x44>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ce:	bf00      	nop
 80016d0:	f7ff ffde 	bl	8001690 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d8f7      	bhi.n	80016d0 <HAL_Delay+0x28>
  {
  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000020 	.word	0x20000020

080016f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800171c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001722:	4a04      	ldr	r2, [pc, #16]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	60d3      	str	r3, [r2, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <__NVIC_GetPriorityGrouping+0x18>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	f003 0307 	and.w	r3, r3, #7
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	2b00      	cmp	r3, #0
 8001764:	db0b      	blt.n	800177e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	f003 021f 	and.w	r2, r3, #31
 800176c:	4907      	ldr	r1, [pc, #28]	; (800178c <__NVIC_EnableIRQ+0x38>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	095b      	lsrs	r3, r3, #5
 8001774:	2001      	movs	r0, #1
 8001776:	fa00 f202 	lsl.w	r2, r0, r2
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000e100 	.word	0xe000e100

08001790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	db0a      	blt.n	80017ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	490c      	ldr	r1, [pc, #48]	; (80017dc <__NVIC_SetPriority+0x4c>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	0112      	lsls	r2, r2, #4
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	440b      	add	r3, r1
 80017b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b8:	e00a      	b.n	80017d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4908      	ldr	r1, [pc, #32]	; (80017e0 <__NVIC_SetPriority+0x50>)
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	3b04      	subs	r3, #4
 80017c8:	0112      	lsls	r2, r2, #4
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	440b      	add	r3, r1
 80017ce:	761a      	strb	r2, [r3, #24]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000e100 	.word	0xe000e100
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f1c3 0307 	rsb	r3, r3, #7
 80017fe:	2b04      	cmp	r3, #4
 8001800:	bf28      	it	cs
 8001802:	2304      	movcs	r3, #4
 8001804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3304      	adds	r3, #4
 800180a:	2b06      	cmp	r3, #6
 800180c:	d902      	bls.n	8001814 <NVIC_EncodePriority+0x30>
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3b03      	subs	r3, #3
 8001812:	e000      	b.n	8001816 <NVIC_EncodePriority+0x32>
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	f04f 32ff 	mov.w	r2, #4294967295
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43da      	mvns	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	401a      	ands	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800182c:	f04f 31ff 	mov.w	r1, #4294967295
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	43d9      	mvns	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	4313      	orrs	r3, r2
         );
}
 800183e:	4618      	mov	r0, r3
 8001840:	3724      	adds	r7, #36	; 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800185c:	d301      	bcc.n	8001862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185e:	2301      	movs	r3, #1
 8001860:	e00f      	b.n	8001882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <SysTick_Config+0x40>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186a:	210f      	movs	r1, #15
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f7ff ff8e 	bl	8001790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <SysTick_Config+0x40>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <SysTick_Config+0x40>)
 800187c:	2207      	movs	r2, #7
 800187e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	e000e010 	.word	0xe000e010

08001890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff29 	bl	80016f0 <__NVIC_SetPriorityGrouping>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b8:	f7ff ff3e 	bl	8001738 <__NVIC_GetPriorityGrouping>
 80018bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	6978      	ldr	r0, [r7, #20]
 80018c4:	f7ff ff8e 	bl	80017e4 <NVIC_EncodePriority>
 80018c8:	4602      	mov	r2, r0
 80018ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff5d 	bl	8001790 <__NVIC_SetPriority>
}
 80018d6:	bf00      	nop
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff31 	bl	8001754 <__NVIC_EnableIRQ>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ffa2 	bl	800184c <SysTick_Config>
 8001908:	4603      	mov	r3, r0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001920:	f7ff feb6 	bl	8001690 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e099      	b.n	8001a64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2202      	movs	r2, #2
 8001934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0201 	bic.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001950:	e00f      	b.n	8001972 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001952:	f7ff fe9d 	bl	8001690 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b05      	cmp	r3, #5
 800195e:	d908      	bls.n	8001972 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2220      	movs	r2, #32
 8001964:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2203      	movs	r2, #3
 800196a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e078      	b.n	8001a64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1e8      	bne.n	8001952 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <HAL_DMA_Init+0x158>)
 800198c:	4013      	ands	r3, r2
 800198e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800199e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d107      	bne.n	80019dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d4:	4313      	orrs	r3, r2
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4313      	orrs	r3, r2
 80019da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f023 0307 	bic.w	r3, r3, #7
 80019f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d117      	bne.n	8001a36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00e      	beq.n	8001a36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 fa59 	bl	8001ed0 <DMA_CheckFifoParam>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d008      	beq.n	8001a36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2240      	movs	r2, #64	; 0x40
 8001a28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a32:	2301      	movs	r3, #1
 8001a34:	e016      	b.n	8001a64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 fa10 	bl	8001e64 <DMA_CalcBaseAndBitshift>
 8001a44:	4603      	mov	r3, r0
 8001a46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4c:	223f      	movs	r2, #63	; 0x3f
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	f010803f 	.word	0xf010803f

08001a70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a7e:	f7ff fe07 	bl	8001690 <HAL_GetTick>
 8001a82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d008      	beq.n	8001aa2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2280      	movs	r2, #128	; 0x80
 8001a94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e052      	b.n	8001b48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0216 	bic.w	r2, r2, #22
 8001ab0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ac0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d103      	bne.n	8001ad2 <HAL_DMA_Abort+0x62>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0208 	bic.w	r2, r2, #8
 8001ae0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0201 	bic.w	r2, r2, #1
 8001af0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001af2:	e013      	b.n	8001b1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001af4:	f7ff fdcc 	bl	8001690 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b05      	cmp	r3, #5
 8001b00:	d90c      	bls.n	8001b1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2220      	movs	r2, #32
 8001b06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e015      	b.n	8001b48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1e4      	bne.n	8001af4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2e:	223f      	movs	r2, #63	; 0x3f
 8001b30:	409a      	lsls	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b5c:	4b92      	ldr	r3, [pc, #584]	; (8001da8 <HAL_DMA_IRQHandler+0x258>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a92      	ldr	r2, [pc, #584]	; (8001dac <HAL_DMA_IRQHandler+0x25c>)
 8001b62:	fba2 2303 	umull	r2, r3, r2, r3
 8001b66:	0a9b      	lsrs	r3, r3, #10
 8001b68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7a:	2208      	movs	r2, #8
 8001b7c:	409a      	lsls	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d01a      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d013      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0204 	bic.w	r2, r2, #4
 8001ba2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba8:	2208      	movs	r2, #8
 8001baa:	409a      	lsls	r2, r3
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb4:	f043 0201 	orr.w	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d012      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bde:	2201      	movs	r2, #1
 8001be0:	409a      	lsls	r2, r3
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bea:	f043 0202 	orr.w	r2, r3, #2
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d012      	beq.n	8001c28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00b      	beq.n	8001c28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c14:	2204      	movs	r2, #4
 8001c16:	409a      	lsls	r2, r3
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c20:	f043 0204 	orr.w	r2, r3, #4
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2c:	2210      	movs	r2, #16
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d043      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d03c      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4a:	2210      	movs	r2, #16
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d018      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d108      	bne.n	8001c80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d024      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	4798      	blx	r3
 8001c7e:	e01f      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01b      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	4798      	blx	r3
 8001c90:	e016      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d107      	bne.n	8001cb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0208 	bic.w	r2, r2, #8
 8001cae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 808e 	beq.w	8001dee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0310 	and.w	r3, r3, #16
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 8086 	beq.w	8001dee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b05      	cmp	r3, #5
 8001cf8:	d136      	bne.n	8001d68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0216 	bic.w	r2, r2, #22
 8001d08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695a      	ldr	r2, [r3, #20]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d103      	bne.n	8001d2a <HAL_DMA_IRQHandler+0x1da>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d007      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0208 	bic.w	r2, r2, #8
 8001d38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3e:	223f      	movs	r2, #63	; 0x3f
 8001d40:	409a      	lsls	r2, r3
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d07d      	beq.n	8001e5a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	4798      	blx	r3
        }
        return;
 8001d66:	e078      	b.n	8001e5a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d01c      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d108      	bne.n	8001d96 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d030      	beq.n	8001dee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	4798      	blx	r3
 8001d94:	e02b      	b.n	8001dee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d027      	beq.n	8001dee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	4798      	blx	r3
 8001da6:	e022      	b.n	8001dee <HAL_DMA_IRQHandler+0x29e>
 8001da8:	20000018 	.word	0x20000018
 8001dac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10f      	bne.n	8001dde <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0210 	bic.w	r2, r2, #16
 8001dcc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d032      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d022      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2205      	movs	r2, #5
 8001e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d307      	bcc.n	8001e36 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1f2      	bne.n	8001e1a <HAL_DMA_IRQHandler+0x2ca>
 8001e34:	e000      	b.n	8001e38 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001e36:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	4798      	blx	r3
 8001e58:	e000      	b.n	8001e5c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001e5a:	bf00      	nop
    }
  }
}
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop

08001e64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	3b10      	subs	r3, #16
 8001e74:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <DMA_CalcBaseAndBitshift+0x64>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	091b      	lsrs	r3, r3, #4
 8001e7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e7e:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <DMA_CalcBaseAndBitshift+0x68>)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d909      	bls.n	8001ea6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e9a:	f023 0303 	bic.w	r3, r3, #3
 8001e9e:	1d1a      	adds	r2, r3, #4
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ea4:	e007      	b.n	8001eb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001eae:	f023 0303 	bic.w	r3, r3, #3
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	aaaaaaab 	.word	0xaaaaaaab
 8001ecc:	08086edc 	.word	0x08086edc

08001ed0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d11f      	bne.n	8001f2a <DMA_CheckFifoParam+0x5a>
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d856      	bhi.n	8001f9e <DMA_CheckFifoParam+0xce>
 8001ef0:	a201      	add	r2, pc, #4	; (adr r2, 8001ef8 <DMA_CheckFifoParam+0x28>)
 8001ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef6:	bf00      	nop
 8001ef8:	08001f09 	.word	0x08001f09
 8001efc:	08001f1b 	.word	0x08001f1b
 8001f00:	08001f09 	.word	0x08001f09
 8001f04:	08001f9f 	.word	0x08001f9f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d046      	beq.n	8001fa2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f18:	e043      	b.n	8001fa2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f22:	d140      	bne.n	8001fa6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f28:	e03d      	b.n	8001fa6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f32:	d121      	bne.n	8001f78 <DMA_CheckFifoParam+0xa8>
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d837      	bhi.n	8001faa <DMA_CheckFifoParam+0xda>
 8001f3a:	a201      	add	r2, pc, #4	; (adr r2, 8001f40 <DMA_CheckFifoParam+0x70>)
 8001f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f40:	08001f51 	.word	0x08001f51
 8001f44:	08001f57 	.word	0x08001f57
 8001f48:	08001f51 	.word	0x08001f51
 8001f4c:	08001f69 	.word	0x08001f69
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	73fb      	strb	r3, [r7, #15]
      break;
 8001f54:	e030      	b.n	8001fb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d025      	beq.n	8001fae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f66:	e022      	b.n	8001fae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f70:	d11f      	bne.n	8001fb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f76:	e01c      	b.n	8001fb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d903      	bls.n	8001f86 <DMA_CheckFifoParam+0xb6>
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d003      	beq.n	8001f8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f84:	e018      	b.n	8001fb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
      break;
 8001f8a:	e015      	b.n	8001fb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00e      	beq.n	8001fb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f9c:	e00b      	b.n	8001fb6 <DMA_CheckFifoParam+0xe6>
      break;
 8001f9e:	bf00      	nop
 8001fa0:	e00a      	b.n	8001fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fa2:	bf00      	nop
 8001fa4:	e008      	b.n	8001fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fa6:	bf00      	nop
 8001fa8:	e006      	b.n	8001fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001faa:	bf00      	nop
 8001fac:	e004      	b.n	8001fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fae:	bf00      	nop
 8001fb0:	e002      	b.n	8001fb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001fb2:	bf00      	nop
 8001fb4:	e000      	b.n	8001fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fb6:	bf00      	nop
    }
  } 
  
  return status; 
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop

08001fc8 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b80      	cmp	r3, #128	; 0x80
 8001fe0:	d106      	bne.n	8001ff0 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	f001 b913 	b.w	8003216 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d007      	beq.n	8002008 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002004:	2b00      	cmp	r3, #0
 8002006:	d105      	bne.n	8002014 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2240      	movs	r2, #64	; 0x40
 800200c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	f001 b901 	b.w	8003216 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800201a:	2b01      	cmp	r3, #1
 800201c:	d102      	bne.n	8002024 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 800201e:	2302      	movs	r3, #2
 8002020:	f001 b8f9 	b.w	8003216 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b01      	cmp	r3, #1
 8002036:	f041 80e7 	bne.w	8003208 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2202      	movs	r2, #2
 800203e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002056:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f001 f8f6 	bl	8003258 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	4b99      	ldr	r3, [pc, #612]	; (80022d8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002074:	429a      	cmp	r2, r3
 8002076:	d960      	bls.n	800213a <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a97      	ldr	r2, [pc, #604]	; (80022dc <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d057      	beq.n	8002132 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a96      	ldr	r2, [pc, #600]	; (80022e0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d050      	beq.n	800212e <HAL_DMAEx_MultiBufferStart_IT+0x166>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a94      	ldr	r2, [pc, #592]	; (80022e4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d049      	beq.n	800212a <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a93      	ldr	r2, [pc, #588]	; (80022e8 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d042      	beq.n	8002126 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a91      	ldr	r2, [pc, #580]	; (80022ec <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d03a      	beq.n	8002120 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a90      	ldr	r2, [pc, #576]	; (80022f0 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d032      	beq.n	800211a <HAL_DMAEx_MultiBufferStart_IT+0x152>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a8e      	ldr	r2, [pc, #568]	; (80022f4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d02a      	beq.n	8002114 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a8d      	ldr	r2, [pc, #564]	; (80022f8 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d022      	beq.n	800210e <HAL_DMAEx_MultiBufferStart_IT+0x146>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a8b      	ldr	r2, [pc, #556]	; (80022fc <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d01a      	beq.n	8002108 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a8a      	ldr	r2, [pc, #552]	; (8002300 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d012      	beq.n	8002102 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a88      	ldr	r2, [pc, #544]	; (8002304 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d00a      	beq.n	80020fc <HAL_DMAEx_MultiBufferStart_IT+0x134>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a87      	ldr	r2, [pc, #540]	; (8002308 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d102      	bne.n	80020f6 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 80020f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020f4:	e01e      	b.n	8002134 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80020f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80020fa:	e01b      	b.n	8002134 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80020fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002100:	e018      	b.n	8002134 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002102:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002106:	e015      	b.n	8002134 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002108:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800210c:	e012      	b.n	8002134 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800210e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002112:	e00f      	b.n	8002134 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002114:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002118:	e00c      	b.n	8002134 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800211a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800211e:	e009      	b.n	8002134 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002120:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002124:	e006      	b.n	8002134 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002126:	2320      	movs	r3, #32
 8002128:	e004      	b.n	8002134 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800212a:	2320      	movs	r3, #32
 800212c:	e002      	b.n	8002134 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800212e:	2320      	movs	r3, #32
 8002130:	e000      	b.n	8002134 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002132:	2320      	movs	r3, #32
 8002134:	4a75      	ldr	r2, [pc, #468]	; (800230c <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8002136:	60d3      	str	r3, [r2, #12]
 8002138:	e150      	b.n	80023dc <HAL_DMAEx_MultiBufferStart_IT+0x414>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	4b73      	ldr	r3, [pc, #460]	; (8002310 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8002142:	429a      	cmp	r2, r3
 8002144:	d960      	bls.n	8002208 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a64      	ldr	r2, [pc, #400]	; (80022dc <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d057      	beq.n	8002200 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a62      	ldr	r2, [pc, #392]	; (80022e0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d050      	beq.n	80021fc <HAL_DMAEx_MultiBufferStart_IT+0x234>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a61      	ldr	r2, [pc, #388]	; (80022e4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d049      	beq.n	80021f8 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a5f      	ldr	r2, [pc, #380]	; (80022e8 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d042      	beq.n	80021f4 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a5e      	ldr	r2, [pc, #376]	; (80022ec <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d03a      	beq.n	80021ee <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a5c      	ldr	r2, [pc, #368]	; (80022f0 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d032      	beq.n	80021e8 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a5b      	ldr	r2, [pc, #364]	; (80022f4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d02a      	beq.n	80021e2 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a59      	ldr	r2, [pc, #356]	; (80022f8 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d022      	beq.n	80021dc <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a58      	ldr	r2, [pc, #352]	; (80022fc <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d01a      	beq.n	80021d6 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a56      	ldr	r2, [pc, #344]	; (8002300 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d012      	beq.n	80021d0 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a55      	ldr	r2, [pc, #340]	; (8002304 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d00a      	beq.n	80021ca <HAL_DMAEx_MultiBufferStart_IT+0x202>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a53      	ldr	r2, [pc, #332]	; (8002308 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d102      	bne.n	80021c4 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 80021be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021c2:	e01e      	b.n	8002202 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80021c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80021c8:	e01b      	b.n	8002202 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80021ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021ce:	e018      	b.n	8002202 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80021d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021d4:	e015      	b.n	8002202 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80021d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021da:	e012      	b.n	8002202 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80021dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021e0:	e00f      	b.n	8002202 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80021e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021e6:	e00c      	b.n	8002202 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80021e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021ec:	e009      	b.n	8002202 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80021ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021f2:	e006      	b.n	8002202 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80021f4:	2320      	movs	r3, #32
 80021f6:	e004      	b.n	8002202 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80021f8:	2320      	movs	r3, #32
 80021fa:	e002      	b.n	8002202 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80021fc:	2320      	movs	r3, #32
 80021fe:	e000      	b.n	8002202 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002200:	2320      	movs	r3, #32
 8002202:	4a42      	ldr	r2, [pc, #264]	; (800230c <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8002204:	6093      	str	r3, [r2, #8]
 8002206:	e0e9      	b.n	80023dc <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	4b41      	ldr	r3, [pc, #260]	; (8002314 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8002210:	429a      	cmp	r2, r3
 8002212:	f240 8083 	bls.w	800231c <HAL_DMAEx_MultiBufferStart_IT+0x354>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a30      	ldr	r2, [pc, #192]	; (80022dc <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d057      	beq.n	80022d0 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a2e      	ldr	r2, [pc, #184]	; (80022e0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d050      	beq.n	80022cc <HAL_DMAEx_MultiBufferStart_IT+0x304>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a2d      	ldr	r2, [pc, #180]	; (80022e4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d049      	beq.n	80022c8 <HAL_DMAEx_MultiBufferStart_IT+0x300>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a2b      	ldr	r2, [pc, #172]	; (80022e8 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d042      	beq.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a2a      	ldr	r2, [pc, #168]	; (80022ec <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d03a      	beq.n	80022be <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a28      	ldr	r2, [pc, #160]	; (80022f0 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d032      	beq.n	80022b8 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a27      	ldr	r2, [pc, #156]	; (80022f4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d02a      	beq.n	80022b2 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a25      	ldr	r2, [pc, #148]	; (80022f8 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d022      	beq.n	80022ac <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a24      	ldr	r2, [pc, #144]	; (80022fc <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d01a      	beq.n	80022a6 <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a22      	ldr	r2, [pc, #136]	; (8002300 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d012      	beq.n	80022a0 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a21      	ldr	r2, [pc, #132]	; (8002304 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d00a      	beq.n	800229a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a1f      	ldr	r2, [pc, #124]	; (8002308 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d102      	bne.n	8002294 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 800228e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002292:	e01e      	b.n	80022d2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002294:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002298:	e01b      	b.n	80022d2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800229a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800229e:	e018      	b.n	80022d2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80022a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022a4:	e015      	b.n	80022d2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80022a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022aa:	e012      	b.n	80022d2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80022ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022b0:	e00f      	b.n	80022d2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80022b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022b6:	e00c      	b.n	80022d2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80022b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022bc:	e009      	b.n	80022d2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80022be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022c2:	e006      	b.n	80022d2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80022c4:	2320      	movs	r3, #32
 80022c6:	e004      	b.n	80022d2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80022c8:	2320      	movs	r3, #32
 80022ca:	e002      	b.n	80022d2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80022cc:	2320      	movs	r3, #32
 80022ce:	e000      	b.n	80022d2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80022d0:	2320      	movs	r3, #32
 80022d2:	4a11      	ldr	r2, [pc, #68]	; (8002318 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 80022d4:	60d3      	str	r3, [r2, #12]
 80022d6:	e081      	b.n	80023dc <HAL_DMAEx_MultiBufferStart_IT+0x414>
 80022d8:	40026458 	.word	0x40026458
 80022dc:	40026010 	.word	0x40026010
 80022e0:	40026410 	.word	0x40026410
 80022e4:	40026070 	.word	0x40026070
 80022e8:	40026470 	.word	0x40026470
 80022ec:	40026028 	.word	0x40026028
 80022f0:	40026428 	.word	0x40026428
 80022f4:	40026088 	.word	0x40026088
 80022f8:	40026488 	.word	0x40026488
 80022fc:	40026040 	.word	0x40026040
 8002300:	40026440 	.word	0x40026440
 8002304:	400260a0 	.word	0x400260a0
 8002308:	400264a0 	.word	0x400264a0
 800230c:	40026400 	.word	0x40026400
 8002310:	400260b8 	.word	0x400260b8
 8002314:	40026058 	.word	0x40026058
 8002318:	40026000 	.word	0x40026000
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a96      	ldr	r2, [pc, #600]	; (800257c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d057      	beq.n	80023d6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a95      	ldr	r2, [pc, #596]	; (8002580 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d050      	beq.n	80023d2 <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a93      	ldr	r2, [pc, #588]	; (8002584 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d049      	beq.n	80023ce <HAL_DMAEx_MultiBufferStart_IT+0x406>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a92      	ldr	r2, [pc, #584]	; (8002588 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d042      	beq.n	80023ca <HAL_DMAEx_MultiBufferStart_IT+0x402>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a90      	ldr	r2, [pc, #576]	; (800258c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d03a      	beq.n	80023c4 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a8f      	ldr	r2, [pc, #572]	; (8002590 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d032      	beq.n	80023be <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a8d      	ldr	r2, [pc, #564]	; (8002594 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d02a      	beq.n	80023b8 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a8c      	ldr	r2, [pc, #560]	; (8002598 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d022      	beq.n	80023b2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a8a      	ldr	r2, [pc, #552]	; (800259c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d01a      	beq.n	80023ac <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a89      	ldr	r2, [pc, #548]	; (80025a0 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d012      	beq.n	80023a6 <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a87      	ldr	r2, [pc, #540]	; (80025a4 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00a      	beq.n	80023a0 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a86      	ldr	r2, [pc, #536]	; (80025a8 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d102      	bne.n	800239a <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8002394:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002398:	e01e      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800239a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800239e:	e01b      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80023a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023a4:	e018      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80023a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023aa:	e015      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80023ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023b0:	e012      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80023b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023b6:	e00f      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80023b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023bc:	e00c      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80023be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023c2:	e009      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80023c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023c8:	e006      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80023ca:	2320      	movs	r3, #32
 80023cc:	e004      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80023ce:	2320      	movs	r3, #32
 80023d0:	e002      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80023d2:	2320      	movs	r3, #32
 80023d4:	e000      	b.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80023d6:	2320      	movs	r3, #32
 80023d8:	4a74      	ldr	r2, [pc, #464]	; (80025ac <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 80023da:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b73      	ldr	r3, [pc, #460]	; (80025b0 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d960      	bls.n	80024aa <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a63      	ldr	r2, [pc, #396]	; (800257c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d057      	beq.n	80024a2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a62      	ldr	r2, [pc, #392]	; (8002580 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d050      	beq.n	800249e <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a60      	ldr	r2, [pc, #384]	; (8002584 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d049      	beq.n	800249a <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a5f      	ldr	r2, [pc, #380]	; (8002588 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d042      	beq.n	8002496 <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a5d      	ldr	r2, [pc, #372]	; (800258c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d03a      	beq.n	8002490 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a5c      	ldr	r2, [pc, #368]	; (8002590 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d032      	beq.n	800248a <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a5a      	ldr	r2, [pc, #360]	; (8002594 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d02a      	beq.n	8002484 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a59      	ldr	r2, [pc, #356]	; (8002598 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d022      	beq.n	800247e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a57      	ldr	r2, [pc, #348]	; (800259c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d01a      	beq.n	8002478 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a56      	ldr	r2, [pc, #344]	; (80025a0 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d012      	beq.n	8002472 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a54      	ldr	r2, [pc, #336]	; (80025a4 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00a      	beq.n	800246c <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a53      	ldr	r2, [pc, #332]	; (80025a8 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d102      	bne.n	8002466 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8002460:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002464:	e01e      	b.n	80024a4 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002466:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800246a:	e01b      	b.n	80024a4 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800246c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002470:	e018      	b.n	80024a4 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002472:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002476:	e015      	b.n	80024a4 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002478:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800247c:	e012      	b.n	80024a4 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800247e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002482:	e00f      	b.n	80024a4 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002488:	e00c      	b.n	80024a4 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800248a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800248e:	e009      	b.n	80024a4 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002494:	e006      	b.n	80024a4 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002496:	2310      	movs	r3, #16
 8002498:	e004      	b.n	80024a4 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800249a:	2310      	movs	r3, #16
 800249c:	e002      	b.n	80024a4 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800249e:	2310      	movs	r3, #16
 80024a0:	e000      	b.n	80024a4 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 80024a2:	2310      	movs	r3, #16
 80024a4:	4a43      	ldr	r2, [pc, #268]	; (80025b4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 80024a6:	60d3      	str	r3, [r2, #12]
 80024a8:	e14f      	b.n	800274a <HAL_DMAEx_MultiBufferStart_IT+0x782>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 80024b2:	429a      	cmp	r2, r3
 80024b4:	f240 8082 	bls.w	80025bc <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a2f      	ldr	r2, [pc, #188]	; (800257c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d057      	beq.n	8002572 <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a2e      	ldr	r2, [pc, #184]	; (8002580 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d050      	beq.n	800256e <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a2c      	ldr	r2, [pc, #176]	; (8002584 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d049      	beq.n	800256a <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a2b      	ldr	r2, [pc, #172]	; (8002588 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d042      	beq.n	8002566 <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a29      	ldr	r2, [pc, #164]	; (800258c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d03a      	beq.n	8002560 <HAL_DMAEx_MultiBufferStart_IT+0x598>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a28      	ldr	r2, [pc, #160]	; (8002590 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d032      	beq.n	800255a <HAL_DMAEx_MultiBufferStart_IT+0x592>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a26      	ldr	r2, [pc, #152]	; (8002594 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d02a      	beq.n	8002554 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a25      	ldr	r2, [pc, #148]	; (8002598 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d022      	beq.n	800254e <HAL_DMAEx_MultiBufferStart_IT+0x586>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a23      	ldr	r2, [pc, #140]	; (800259c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d01a      	beq.n	8002548 <HAL_DMAEx_MultiBufferStart_IT+0x580>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a22      	ldr	r2, [pc, #136]	; (80025a0 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d012      	beq.n	8002542 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a20      	ldr	r2, [pc, #128]	; (80025a4 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00a      	beq.n	800253c <HAL_DMAEx_MultiBufferStart_IT+0x574>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a1f      	ldr	r2, [pc, #124]	; (80025a8 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d102      	bne.n	8002536 <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8002530:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002534:	e01e      	b.n	8002574 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002536:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800253a:	e01b      	b.n	8002574 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800253c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002540:	e018      	b.n	8002574 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002542:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002546:	e015      	b.n	8002574 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002548:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800254c:	e012      	b.n	8002574 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800254e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002552:	e00f      	b.n	8002574 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002558:	e00c      	b.n	8002574 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800255a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800255e:	e009      	b.n	8002574 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002564:	e006      	b.n	8002574 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002566:	2310      	movs	r3, #16
 8002568:	e004      	b.n	8002574 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800256a:	2310      	movs	r3, #16
 800256c:	e002      	b.n	8002574 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800256e:	2310      	movs	r3, #16
 8002570:	e000      	b.n	8002574 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002572:	2310      	movs	r3, #16
 8002574:	4a0f      	ldr	r2, [pc, #60]	; (80025b4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8002576:	6093      	str	r3, [r2, #8]
 8002578:	e0e7      	b.n	800274a <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800257a:	bf00      	nop
 800257c:	40026010 	.word	0x40026010
 8002580:	40026410 	.word	0x40026410
 8002584:	40026070 	.word	0x40026070
 8002588:	40026470 	.word	0x40026470
 800258c:	40026028 	.word	0x40026028
 8002590:	40026428 	.word	0x40026428
 8002594:	40026088 	.word	0x40026088
 8002598:	40026488 	.word	0x40026488
 800259c:	40026040 	.word	0x40026040
 80025a0:	40026440 	.word	0x40026440
 80025a4:	400260a0 	.word	0x400260a0
 80025a8:	400264a0 	.word	0x400264a0
 80025ac:	40026000 	.word	0x40026000
 80025b0:	40026458 	.word	0x40026458
 80025b4:	40026400 	.word	0x40026400
 80025b8:	400260b8 	.word	0x400260b8
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b96      	ldr	r3, [pc, #600]	; (800281c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d960      	bls.n	800268a <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a94      	ldr	r2, [pc, #592]	; (8002820 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d057      	beq.n	8002682 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a93      	ldr	r2, [pc, #588]	; (8002824 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d050      	beq.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a91      	ldr	r2, [pc, #580]	; (8002828 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d049      	beq.n	800267a <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a90      	ldr	r2, [pc, #576]	; (800282c <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d042      	beq.n	8002676 <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a8e      	ldr	r2, [pc, #568]	; (8002830 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d03a      	beq.n	8002670 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a8d      	ldr	r2, [pc, #564]	; (8002834 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d032      	beq.n	800266a <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a8b      	ldr	r2, [pc, #556]	; (8002838 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d02a      	beq.n	8002664 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a8a      	ldr	r2, [pc, #552]	; (800283c <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d022      	beq.n	800265e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a88      	ldr	r2, [pc, #544]	; (8002840 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d01a      	beq.n	8002658 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a87      	ldr	r2, [pc, #540]	; (8002844 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d012      	beq.n	8002652 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a85      	ldr	r2, [pc, #532]	; (8002848 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00a      	beq.n	800264c <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a84      	ldr	r2, [pc, #528]	; (800284c <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d102      	bne.n	8002646 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8002640:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002644:	e01e      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002646:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800264a:	e01b      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800264c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002650:	e018      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002652:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002656:	e015      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002658:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800265c:	e012      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800265e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002662:	e00f      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002668:	e00c      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800266a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800266e:	e009      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002674:	e006      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002676:	2310      	movs	r3, #16
 8002678:	e004      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800267a:	2310      	movs	r3, #16
 800267c:	e002      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800267e:	2310      	movs	r3, #16
 8002680:	e000      	b.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002682:	2310      	movs	r3, #16
 8002684:	4a72      	ldr	r2, [pc, #456]	; (8002850 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8002686:	60d3      	str	r3, [r2, #12]
 8002688:	e05f      	b.n	800274a <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a64      	ldr	r2, [pc, #400]	; (8002820 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d057      	beq.n	8002744 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a62      	ldr	r2, [pc, #392]	; (8002824 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d050      	beq.n	8002740 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a61      	ldr	r2, [pc, #388]	; (8002828 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d049      	beq.n	800273c <HAL_DMAEx_MultiBufferStart_IT+0x774>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a5f      	ldr	r2, [pc, #380]	; (800282c <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d042      	beq.n	8002738 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a5e      	ldr	r2, [pc, #376]	; (8002830 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d03a      	beq.n	8002732 <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a5c      	ldr	r2, [pc, #368]	; (8002834 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d032      	beq.n	800272c <HAL_DMAEx_MultiBufferStart_IT+0x764>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a5b      	ldr	r2, [pc, #364]	; (8002838 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d02a      	beq.n	8002726 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a59      	ldr	r2, [pc, #356]	; (800283c <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d022      	beq.n	8002720 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a58      	ldr	r2, [pc, #352]	; (8002840 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d01a      	beq.n	800271a <HAL_DMAEx_MultiBufferStart_IT+0x752>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a56      	ldr	r2, [pc, #344]	; (8002844 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d012      	beq.n	8002714 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a55      	ldr	r2, [pc, #340]	; (8002848 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00a      	beq.n	800270e <HAL_DMAEx_MultiBufferStart_IT+0x746>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a53      	ldr	r2, [pc, #332]	; (800284c <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d102      	bne.n	8002708 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 8002702:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002706:	e01e      	b.n	8002746 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002708:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800270c:	e01b      	b.n	8002746 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800270e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002712:	e018      	b.n	8002746 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002714:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002718:	e015      	b.n	8002746 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800271a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800271e:	e012      	b.n	8002746 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002724:	e00f      	b.n	8002746 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800272a:	e00c      	b.n	8002746 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800272c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002730:	e009      	b.n	8002746 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002736:	e006      	b.n	8002746 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002738:	2310      	movs	r3, #16
 800273a:	e004      	b.n	8002746 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800273c:	2310      	movs	r3, #16
 800273e:	e002      	b.n	8002746 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002740:	2310      	movs	r3, #16
 8002742:	e000      	b.n	8002746 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002744:	2310      	movs	r3, #16
 8002746:	4a42      	ldr	r2, [pc, #264]	; (8002850 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8002748:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	4b40      	ldr	r3, [pc, #256]	; (8002854 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 8002752:	429a      	cmp	r2, r3
 8002754:	f240 8082 	bls.w	800285c <HAL_DMAEx_MultiBufferStart_IT+0x894>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a30      	ldr	r2, [pc, #192]	; (8002820 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d057      	beq.n	8002812 <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a2f      	ldr	r2, [pc, #188]	; (8002824 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d050      	beq.n	800280e <HAL_DMAEx_MultiBufferStart_IT+0x846>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a2d      	ldr	r2, [pc, #180]	; (8002828 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d049      	beq.n	800280a <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a2c      	ldr	r2, [pc, #176]	; (800282c <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d042      	beq.n	8002806 <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a2a      	ldr	r2, [pc, #168]	; (8002830 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d03a      	beq.n	8002800 <HAL_DMAEx_MultiBufferStart_IT+0x838>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a29      	ldr	r2, [pc, #164]	; (8002834 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d032      	beq.n	80027fa <HAL_DMAEx_MultiBufferStart_IT+0x832>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a27      	ldr	r2, [pc, #156]	; (8002838 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d02a      	beq.n	80027f4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a26      	ldr	r2, [pc, #152]	; (800283c <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d022      	beq.n	80027ee <HAL_DMAEx_MultiBufferStart_IT+0x826>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a24      	ldr	r2, [pc, #144]	; (8002840 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d01a      	beq.n	80027e8 <HAL_DMAEx_MultiBufferStart_IT+0x820>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a23      	ldr	r2, [pc, #140]	; (8002844 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d012      	beq.n	80027e2 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a21      	ldr	r2, [pc, #132]	; (8002848 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d00a      	beq.n	80027dc <HAL_DMAEx_MultiBufferStart_IT+0x814>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a20      	ldr	r2, [pc, #128]	; (800284c <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d102      	bne.n	80027d6 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 80027d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80027d4:	e01e      	b.n	8002814 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80027d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027da:	e01b      	b.n	8002814 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80027dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80027e0:	e018      	b.n	8002814 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80027e2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80027e6:	e015      	b.n	8002814 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80027e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80027ec:	e012      	b.n	8002814 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80027ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027f2:	e00f      	b.n	8002814 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80027f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027f8:	e00c      	b.n	8002814 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80027fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027fe:	e009      	b.n	8002814 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002804:	e006      	b.n	8002814 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002806:	2308      	movs	r3, #8
 8002808:	e004      	b.n	8002814 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800280a:	2308      	movs	r3, #8
 800280c:	e002      	b.n	8002814 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800280e:	2308      	movs	r3, #8
 8002810:	e000      	b.n	8002814 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002812:	2308      	movs	r3, #8
 8002814:	4a10      	ldr	r2, [pc, #64]	; (8002858 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 8002816:	60d3      	str	r3, [r2, #12]
 8002818:	e16f      	b.n	8002afa <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 800281a:	bf00      	nop
 800281c:	40026058 	.word	0x40026058
 8002820:	40026010 	.word	0x40026010
 8002824:	40026410 	.word	0x40026410
 8002828:	40026070 	.word	0x40026070
 800282c:	40026470 	.word	0x40026470
 8002830:	40026028 	.word	0x40026028
 8002834:	40026428 	.word	0x40026428
 8002838:	40026088 	.word	0x40026088
 800283c:	40026488 	.word	0x40026488
 8002840:	40026040 	.word	0x40026040
 8002844:	40026440 	.word	0x40026440
 8002848:	400260a0 	.word	0x400260a0
 800284c:	400264a0 	.word	0x400264a0
 8002850:	40026000 	.word	0x40026000
 8002854:	40026458 	.word	0x40026458
 8002858:	40026400 	.word	0x40026400
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	4b94      	ldr	r3, [pc, #592]	; (8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002864:	429a      	cmp	r2, r3
 8002866:	d960      	bls.n	800292a <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a92      	ldr	r2, [pc, #584]	; (8002ab8 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d057      	beq.n	8002922 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a91      	ldr	r2, [pc, #580]	; (8002abc <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d050      	beq.n	800291e <HAL_DMAEx_MultiBufferStart_IT+0x956>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a8f      	ldr	r2, [pc, #572]	; (8002ac0 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d049      	beq.n	800291a <HAL_DMAEx_MultiBufferStart_IT+0x952>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a8e      	ldr	r2, [pc, #568]	; (8002ac4 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d042      	beq.n	8002916 <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a8c      	ldr	r2, [pc, #560]	; (8002ac8 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d03a      	beq.n	8002910 <HAL_DMAEx_MultiBufferStart_IT+0x948>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a8b      	ldr	r2, [pc, #556]	; (8002acc <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d032      	beq.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x942>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a89      	ldr	r2, [pc, #548]	; (8002ad0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d02a      	beq.n	8002904 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a88      	ldr	r2, [pc, #544]	; (8002ad4 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d022      	beq.n	80028fe <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a86      	ldr	r2, [pc, #536]	; (8002ad8 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d01a      	beq.n	80028f8 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a85      	ldr	r2, [pc, #532]	; (8002adc <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d012      	beq.n	80028f2 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a83      	ldr	r2, [pc, #524]	; (8002ae0 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00a      	beq.n	80028ec <HAL_DMAEx_MultiBufferStart_IT+0x924>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a82      	ldr	r2, [pc, #520]	; (8002ae4 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d102      	bne.n	80028e6 <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 80028e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80028e4:	e01e      	b.n	8002924 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80028e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ea:	e01b      	b.n	8002924 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80028ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80028f0:	e018      	b.n	8002924 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80028f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80028f6:	e015      	b.n	8002924 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80028f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80028fc:	e012      	b.n	8002924 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80028fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002902:	e00f      	b.n	8002924 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002908:	e00c      	b.n	8002924 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800290a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800290e:	e009      	b.n	8002924 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002914:	e006      	b.n	8002924 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002916:	2308      	movs	r3, #8
 8002918:	e004      	b.n	8002924 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800291a:	2308      	movs	r3, #8
 800291c:	e002      	b.n	8002924 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800291e:	2308      	movs	r3, #8
 8002920:	e000      	b.n	8002924 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002922:	2308      	movs	r3, #8
 8002924:	4a70      	ldr	r2, [pc, #448]	; (8002ae8 <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 8002926:	6093      	str	r3, [r2, #8]
 8002928:	e0e7      	b.n	8002afa <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	4b6e      	ldr	r3, [pc, #440]	; (8002aec <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 8002932:	429a      	cmp	r2, r3
 8002934:	d960      	bls.n	80029f8 <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a5f      	ldr	r2, [pc, #380]	; (8002ab8 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d057      	beq.n	80029f0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a5d      	ldr	r2, [pc, #372]	; (8002abc <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d050      	beq.n	80029ec <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a5c      	ldr	r2, [pc, #368]	; (8002ac0 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d049      	beq.n	80029e8 <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a5a      	ldr	r2, [pc, #360]	; (8002ac4 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d042      	beq.n	80029e4 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a59      	ldr	r2, [pc, #356]	; (8002ac8 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d03a      	beq.n	80029de <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a57      	ldr	r2, [pc, #348]	; (8002acc <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d032      	beq.n	80029d8 <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a56      	ldr	r2, [pc, #344]	; (8002ad0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d02a      	beq.n	80029d2 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a54      	ldr	r2, [pc, #336]	; (8002ad4 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d022      	beq.n	80029cc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a53      	ldr	r2, [pc, #332]	; (8002ad8 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d01a      	beq.n	80029c6 <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a51      	ldr	r2, [pc, #324]	; (8002adc <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d012      	beq.n	80029c0 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a50      	ldr	r2, [pc, #320]	; (8002ae0 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d00a      	beq.n	80029ba <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a4e      	ldr	r2, [pc, #312]	; (8002ae4 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d102      	bne.n	80029b4 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 80029ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029b2:	e01e      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80029b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029b8:	e01b      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80029ba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029be:	e018      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80029c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029c4:	e015      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80029c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029ca:	e012      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80029cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029d0:	e00f      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80029d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029d6:	e00c      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80029d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029dc:	e009      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80029de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029e2:	e006      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80029e4:	2308      	movs	r3, #8
 80029e6:	e004      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80029e8:	2308      	movs	r3, #8
 80029ea:	e002      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80029ec:	2308      	movs	r3, #8
 80029ee:	e000      	b.n	80029f2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80029f0:	2308      	movs	r3, #8
 80029f2:	4a3f      	ldr	r2, [pc, #252]	; (8002af0 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 80029f4:	60d3      	str	r3, [r2, #12]
 80029f6:	e080      	b.n	8002afa <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a2e      	ldr	r2, [pc, #184]	; (8002ab8 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d078      	beq.n	8002af4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a2d      	ldr	r2, [pc, #180]	; (8002abc <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d050      	beq.n	8002aae <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a2b      	ldr	r2, [pc, #172]	; (8002ac0 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d049      	beq.n	8002aaa <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a2a      	ldr	r2, [pc, #168]	; (8002ac4 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d042      	beq.n	8002aa6 <HAL_DMAEx_MultiBufferStart_IT+0xade>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a28      	ldr	r2, [pc, #160]	; (8002ac8 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d03a      	beq.n	8002aa0 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a27      	ldr	r2, [pc, #156]	; (8002acc <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d032      	beq.n	8002a9a <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a25      	ldr	r2, [pc, #148]	; (8002ad0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d02a      	beq.n	8002a94 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a24      	ldr	r2, [pc, #144]	; (8002ad4 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d022      	beq.n	8002a8e <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a22      	ldr	r2, [pc, #136]	; (8002ad8 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d01a      	beq.n	8002a88 <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a21      	ldr	r2, [pc, #132]	; (8002adc <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d012      	beq.n	8002a82 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a1f      	ldr	r2, [pc, #124]	; (8002ae0 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00a      	beq.n	8002a7c <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ae4 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d102      	bne.n	8002a76 <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 8002a70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a74:	e03f      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a7a:	e03c      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a80:	e039      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a82:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a86:	e036      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a8c:	e033      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a92:	e030      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a98:	e02d      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a9e:	e02a      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aa4:	e027      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002aa6:	2308      	movs	r3, #8
 8002aa8:	e025      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002aaa:	2308      	movs	r3, #8
 8002aac:	e023      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002aae:	2308      	movs	r3, #8
 8002ab0:	e021      	b.n	8002af6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002ab2:	bf00      	nop
 8002ab4:	400260b8 	.word	0x400260b8
 8002ab8:	40026010 	.word	0x40026010
 8002abc:	40026410 	.word	0x40026410
 8002ac0:	40026070 	.word	0x40026070
 8002ac4:	40026470 	.word	0x40026470
 8002ac8:	40026028 	.word	0x40026028
 8002acc:	40026428 	.word	0x40026428
 8002ad0:	40026088 	.word	0x40026088
 8002ad4:	40026488 	.word	0x40026488
 8002ad8:	40026040 	.word	0x40026040
 8002adc:	40026440 	.word	0x40026440
 8002ae0:	400260a0 	.word	0x400260a0
 8002ae4:	400264a0 	.word	0x400264a0
 8002ae8:	40026400 	.word	0x40026400
 8002aec:	40026058 	.word	0x40026058
 8002af0:	40026000 	.word	0x40026000
 8002af4:	2308      	movs	r3, #8
 8002af6:	4a9a      	ldr	r2, [pc, #616]	; (8002d60 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8002af8:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	4b98      	ldr	r3, [pc, #608]	; (8002d64 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d960      	bls.n	8002bc8 <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a97      	ldr	r2, [pc, #604]	; (8002d68 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d057      	beq.n	8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a95      	ldr	r2, [pc, #596]	; (8002d6c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d050      	beq.n	8002bbc <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a94      	ldr	r2, [pc, #592]	; (8002d70 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d049      	beq.n	8002bb8 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a92      	ldr	r2, [pc, #584]	; (8002d74 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d042      	beq.n	8002bb4 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a91      	ldr	r2, [pc, #580]	; (8002d78 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d03a      	beq.n	8002bae <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a8f      	ldr	r2, [pc, #572]	; (8002d7c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d032      	beq.n	8002ba8 <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a8e      	ldr	r2, [pc, #568]	; (8002d80 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d02a      	beq.n	8002ba2 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a8c      	ldr	r2, [pc, #560]	; (8002d84 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d022      	beq.n	8002b9c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a8b      	ldr	r2, [pc, #556]	; (8002d88 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d01a      	beq.n	8002b96 <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a89      	ldr	r2, [pc, #548]	; (8002d8c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d012      	beq.n	8002b90 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a88      	ldr	r2, [pc, #544]	; (8002d90 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00a      	beq.n	8002b8a <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a86      	ldr	r2, [pc, #536]	; (8002d94 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d102      	bne.n	8002b84 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 8002b7e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b82:	e01e      	b.n	8002bc2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b88:	e01b      	b.n	8002bc2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b8a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b8e:	e018      	b.n	8002bc2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b94:	e015      	b.n	8002bc2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b96:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b9a:	e012      	b.n	8002bc2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ba0:	e00f      	b.n	8002bc2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002ba2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ba6:	e00c      	b.n	8002bc2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002ba8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bac:	e009      	b.n	8002bc2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bb2:	e006      	b.n	8002bc2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	e004      	b.n	8002bc2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002bb8:	2304      	movs	r3, #4
 8002bba:	e002      	b.n	8002bc2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002bbc:	2304      	movs	r3, #4
 8002bbe:	e000      	b.n	8002bc2 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002bc0:	2304      	movs	r3, #4
 8002bc2:	4a75      	ldr	r2, [pc, #468]	; (8002d98 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8002bc4:	60d3      	str	r3, [r2, #12]
 8002bc6:	e151      	b.n	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4b73      	ldr	r3, [pc, #460]	; (8002d9c <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d960      	bls.n	8002c96 <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a63      	ldr	r2, [pc, #396]	; (8002d68 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d057      	beq.n	8002c8e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a62      	ldr	r2, [pc, #392]	; (8002d6c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d050      	beq.n	8002c8a <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a60      	ldr	r2, [pc, #384]	; (8002d70 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d049      	beq.n	8002c86 <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a5f      	ldr	r2, [pc, #380]	; (8002d74 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d042      	beq.n	8002c82 <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a5d      	ldr	r2, [pc, #372]	; (8002d78 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d03a      	beq.n	8002c7c <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a5c      	ldr	r2, [pc, #368]	; (8002d7c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d032      	beq.n	8002c76 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a5a      	ldr	r2, [pc, #360]	; (8002d80 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d02a      	beq.n	8002c70 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a59      	ldr	r2, [pc, #356]	; (8002d84 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d022      	beq.n	8002c6a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a57      	ldr	r2, [pc, #348]	; (8002d88 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d01a      	beq.n	8002c64 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a56      	ldr	r2, [pc, #344]	; (8002d8c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d012      	beq.n	8002c5e <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a54      	ldr	r2, [pc, #336]	; (8002d90 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d00a      	beq.n	8002c58 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a53      	ldr	r2, [pc, #332]	; (8002d94 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d102      	bne.n	8002c52 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 8002c4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c50:	e01e      	b.n	8002c90 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002c52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c56:	e01b      	b.n	8002c90 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002c58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c5c:	e018      	b.n	8002c90 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002c5e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c62:	e015      	b.n	8002c90 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002c64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c68:	e012      	b.n	8002c90 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c6e:	e00f      	b.n	8002c90 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c74:	e00c      	b.n	8002c90 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c7a:	e009      	b.n	8002c90 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c80:	e006      	b.n	8002c90 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002c82:	2304      	movs	r3, #4
 8002c84:	e004      	b.n	8002c90 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002c86:	2304      	movs	r3, #4
 8002c88:	e002      	b.n	8002c90 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	e000      	b.n	8002c90 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002c8e:	2304      	movs	r3, #4
 8002c90:	4a41      	ldr	r2, [pc, #260]	; (8002d98 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8002c92:	6093      	str	r3, [r2, #8]
 8002c94:	e0ea      	b.n	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4b40      	ldr	r3, [pc, #256]	; (8002da0 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	f240 8084 	bls.w	8002dac <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a2f      	ldr	r2, [pc, #188]	; (8002d68 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d07a      	beq.n	8002da4 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a2e      	ldr	r2, [pc, #184]	; (8002d6c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d050      	beq.n	8002d5a <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a2c      	ldr	r2, [pc, #176]	; (8002d70 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d049      	beq.n	8002d56 <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a2b      	ldr	r2, [pc, #172]	; (8002d74 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d042      	beq.n	8002d52 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a29      	ldr	r2, [pc, #164]	; (8002d78 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d03a      	beq.n	8002d4c <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a28      	ldr	r2, [pc, #160]	; (8002d7c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d032      	beq.n	8002d46 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a26      	ldr	r2, [pc, #152]	; (8002d80 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d02a      	beq.n	8002d40 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a25      	ldr	r2, [pc, #148]	; (8002d84 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d022      	beq.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a23      	ldr	r2, [pc, #140]	; (8002d88 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d01a      	beq.n	8002d34 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a22      	ldr	r2, [pc, #136]	; (8002d8c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d012      	beq.n	8002d2e <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a20      	ldr	r2, [pc, #128]	; (8002d90 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00a      	beq.n	8002d28 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a1f      	ldr	r2, [pc, #124]	; (8002d94 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d102      	bne.n	8002d22 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8002d1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d20:	e041      	b.n	8002da6 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002d22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d26:	e03e      	b.n	8002da6 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002d28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d2c:	e03b      	b.n	8002da6 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002d2e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d32:	e038      	b.n	8002da6 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002d34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d38:	e035      	b.n	8002da6 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d3e:	e032      	b.n	8002da6 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002d40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d44:	e02f      	b.n	8002da6 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d4a:	e02c      	b.n	8002da6 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d50:	e029      	b.n	8002da6 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002d52:	2304      	movs	r3, #4
 8002d54:	e027      	b.n	8002da6 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002d56:	2304      	movs	r3, #4
 8002d58:	e025      	b.n	8002da6 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	e023      	b.n	8002da6 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002d5e:	bf00      	nop
 8002d60:	40026000 	.word	0x40026000
 8002d64:	40026458 	.word	0x40026458
 8002d68:	40026010 	.word	0x40026010
 8002d6c:	40026410 	.word	0x40026410
 8002d70:	40026070 	.word	0x40026070
 8002d74:	40026470 	.word	0x40026470
 8002d78:	40026028 	.word	0x40026028
 8002d7c:	40026428 	.word	0x40026428
 8002d80:	40026088 	.word	0x40026088
 8002d84:	40026488 	.word	0x40026488
 8002d88:	40026040 	.word	0x40026040
 8002d8c:	40026440 	.word	0x40026440
 8002d90:	400260a0 	.word	0x400260a0
 8002d94:	400264a0 	.word	0x400264a0
 8002d98:	40026400 	.word	0x40026400
 8002d9c:	400260b8 	.word	0x400260b8
 8002da0:	40026058 	.word	0x40026058
 8002da4:	2304      	movs	r3, #4
 8002da6:	4a94      	ldr	r2, [pc, #592]	; (8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002da8:	60d3      	str	r3, [r2, #12]
 8002daa:	e05f      	b.n	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a92      	ldr	r2, [pc, #584]	; (8002ffc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d057      	beq.n	8002e66 <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a91      	ldr	r2, [pc, #580]	; (8003000 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d050      	beq.n	8002e62 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a8f      	ldr	r2, [pc, #572]	; (8003004 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d049      	beq.n	8002e5e <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a8e      	ldr	r2, [pc, #568]	; (8003008 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d042      	beq.n	8002e5a <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a8c      	ldr	r2, [pc, #560]	; (800300c <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d03a      	beq.n	8002e54 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a8b      	ldr	r2, [pc, #556]	; (8003010 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d032      	beq.n	8002e4e <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a89      	ldr	r2, [pc, #548]	; (8003014 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d02a      	beq.n	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a88      	ldr	r2, [pc, #544]	; (8003018 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d022      	beq.n	8002e42 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a86      	ldr	r2, [pc, #536]	; (800301c <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d01a      	beq.n	8002e3c <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a85      	ldr	r2, [pc, #532]	; (8003020 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d012      	beq.n	8002e36 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a83      	ldr	r2, [pc, #524]	; (8003024 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d00a      	beq.n	8002e30 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a82      	ldr	r2, [pc, #520]	; (8003028 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d102      	bne.n	8002e2a <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 8002e24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e28:	e01e      	b.n	8002e68 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002e2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e2e:	e01b      	b.n	8002e68 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002e30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e34:	e018      	b.n	8002e68 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002e36:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e3a:	e015      	b.n	8002e68 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002e3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e40:	e012      	b.n	8002e68 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002e42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e46:	e00f      	b.n	8002e68 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002e48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e4c:	e00c      	b.n	8002e68 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e52:	e009      	b.n	8002e68 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002e54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e58:	e006      	b.n	8002e68 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	e004      	b.n	8002e68 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002e5e:	2304      	movs	r3, #4
 8002e60:	e002      	b.n	8002e68 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002e62:	2304      	movs	r3, #4
 8002e64:	e000      	b.n	8002e68 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002e66:	2304      	movs	r3, #4
 8002e68:	4a63      	ldr	r2, [pc, #396]	; (8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002e6a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	4b6e      	ldr	r3, [pc, #440]	; (800302c <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d95c      	bls.n	8002f32 <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a5f      	ldr	r2, [pc, #380]	; (8002ffc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d053      	beq.n	8002f2a <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a5e      	ldr	r2, [pc, #376]	; (8003000 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d04c      	beq.n	8002f26 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a5c      	ldr	r2, [pc, #368]	; (8003004 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d045      	beq.n	8002f22 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a5b      	ldr	r2, [pc, #364]	; (8003008 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d03e      	beq.n	8002f1e <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a59      	ldr	r2, [pc, #356]	; (800300c <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d037      	beq.n	8002f1a <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a58      	ldr	r2, [pc, #352]	; (8003010 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d030      	beq.n	8002f16 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a56      	ldr	r2, [pc, #344]	; (8003014 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d029      	beq.n	8002f12 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a55      	ldr	r2, [pc, #340]	; (8003018 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d022      	beq.n	8002f0e <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a53      	ldr	r2, [pc, #332]	; (800301c <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d01a      	beq.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a52      	ldr	r2, [pc, #328]	; (8003020 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d012      	beq.n	8002f02 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a50      	ldr	r2, [pc, #320]	; (8003024 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00a      	beq.n	8002efc <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a4f      	ldr	r2, [pc, #316]	; (8003028 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d102      	bne.n	8002ef6 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8002ef0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ef4:	e01a      	b.n	8002f2c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002ef6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002efa:	e017      	b.n	8002f2c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002efc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f00:	e014      	b.n	8002f2c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002f02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f06:	e011      	b.n	8002f2c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002f08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f0c:	e00e      	b.n	8002f2c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002f0e:	2340      	movs	r3, #64	; 0x40
 8002f10:	e00c      	b.n	8002f2c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002f12:	2340      	movs	r3, #64	; 0x40
 8002f14:	e00a      	b.n	8002f2c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002f16:	2340      	movs	r3, #64	; 0x40
 8002f18:	e008      	b.n	8002f2c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002f1a:	2340      	movs	r3, #64	; 0x40
 8002f1c:	e006      	b.n	8002f2c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e004      	b.n	8002f2c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e002      	b.n	8002f2c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	4a40      	ldr	r2, [pc, #256]	; (8003030 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8002f2e:	60d3      	str	r3, [r2, #12]
 8002f30:	e141      	b.n	80031b6 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	4b3e      	ldr	r3, [pc, #248]	; (8003034 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d97c      	bls.n	8003038 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a2e      	ldr	r2, [pc, #184]	; (8002ffc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d053      	beq.n	8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a2c      	ldr	r2, [pc, #176]	; (8003000 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d04c      	beq.n	8002fec <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a2b      	ldr	r2, [pc, #172]	; (8003004 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d045      	beq.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a29      	ldr	r2, [pc, #164]	; (8003008 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d03e      	beq.n	8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a28      	ldr	r2, [pc, #160]	; (800300c <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d037      	beq.n	8002fe0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a26      	ldr	r2, [pc, #152]	; (8003010 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d030      	beq.n	8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a25      	ldr	r2, [pc, #148]	; (8003014 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d029      	beq.n	8002fd8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a23      	ldr	r2, [pc, #140]	; (8003018 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d022      	beq.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a22      	ldr	r2, [pc, #136]	; (800301c <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d01a      	beq.n	8002fce <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a20      	ldr	r2, [pc, #128]	; (8003020 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d012      	beq.n	8002fc8 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a1f      	ldr	r2, [pc, #124]	; (8003024 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d00a      	beq.n	8002fc2 <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1d      	ldr	r2, [pc, #116]	; (8003028 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d102      	bne.n	8002fbc <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8002fb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fba:	e01a      	b.n	8002ff2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002fbc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fc0:	e017      	b.n	8002ff2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002fc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fc6:	e014      	b.n	8002ff2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002fc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fcc:	e011      	b.n	8002ff2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002fce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fd2:	e00e      	b.n	8002ff2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002fd4:	2340      	movs	r3, #64	; 0x40
 8002fd6:	e00c      	b.n	8002ff2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002fd8:	2340      	movs	r3, #64	; 0x40
 8002fda:	e00a      	b.n	8002ff2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002fdc:	2340      	movs	r3, #64	; 0x40
 8002fde:	e008      	b.n	8002ff2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002fe0:	2340      	movs	r3, #64	; 0x40
 8002fe2:	e006      	b.n	8002ff2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e004      	b.n	8002ff2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e002      	b.n	8002ff2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	4a0f      	ldr	r2, [pc, #60]	; (8003030 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8002ff4:	6093      	str	r3, [r2, #8]
 8002ff6:	e0de      	b.n	80031b6 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8002ff8:	40026000 	.word	0x40026000
 8002ffc:	40026010 	.word	0x40026010
 8003000:	40026410 	.word	0x40026410
 8003004:	40026070 	.word	0x40026070
 8003008:	40026470 	.word	0x40026470
 800300c:	40026028 	.word	0x40026028
 8003010:	40026428 	.word	0x40026428
 8003014:	40026088 	.word	0x40026088
 8003018:	40026488 	.word	0x40026488
 800301c:	40026040 	.word	0x40026040
 8003020:	40026440 	.word	0x40026440
 8003024:	400260a0 	.word	0x400260a0
 8003028:	400264a0 	.word	0x400264a0
 800302c:	40026458 	.word	0x40026458
 8003030:	40026400 	.word	0x40026400
 8003034:	400260b8 	.word	0x400260b8
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	4b78      	ldr	r3, [pc, #480]	; (8003220 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003040:	429a      	cmp	r2, r3
 8003042:	d95c      	bls.n	80030fe <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a76      	ldr	r2, [pc, #472]	; (8003224 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d053      	beq.n	80030f6 <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a75      	ldr	r2, [pc, #468]	; (8003228 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d04c      	beq.n	80030f2 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a73      	ldr	r2, [pc, #460]	; (800322c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d045      	beq.n	80030ee <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a72      	ldr	r2, [pc, #456]	; (8003230 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d03e      	beq.n	80030ea <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a70      	ldr	r2, [pc, #448]	; (8003234 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d037      	beq.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a6f      	ldr	r2, [pc, #444]	; (8003238 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d030      	beq.n	80030e2 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a6d      	ldr	r2, [pc, #436]	; (800323c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d029      	beq.n	80030de <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a6c      	ldr	r2, [pc, #432]	; (8003240 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d022      	beq.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a6a      	ldr	r2, [pc, #424]	; (8003244 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d01a      	beq.n	80030d4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a69      	ldr	r2, [pc, #420]	; (8003248 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d012      	beq.n	80030ce <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a67      	ldr	r2, [pc, #412]	; (800324c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00a      	beq.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a66      	ldr	r2, [pc, #408]	; (8003250 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d102      	bne.n	80030c2 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 80030bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030c0:	e01a      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80030c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030c6:	e017      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80030c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030cc:	e014      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80030ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030d2:	e011      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80030d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030d8:	e00e      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80030da:	2340      	movs	r3, #64	; 0x40
 80030dc:	e00c      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80030de:	2340      	movs	r3, #64	; 0x40
 80030e0:	e00a      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80030e2:	2340      	movs	r3, #64	; 0x40
 80030e4:	e008      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80030e6:	2340      	movs	r3, #64	; 0x40
 80030e8:	e006      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e004      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e002      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80030f6:	2301      	movs	r3, #1
 80030f8:	4a56      	ldr	r2, [pc, #344]	; (8003254 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80030fa:	60d3      	str	r3, [r2, #12]
 80030fc:	e05b      	b.n	80031b6 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a48      	ldr	r2, [pc, #288]	; (8003224 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d053      	beq.n	80031b0 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a46      	ldr	r2, [pc, #280]	; (8003228 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d04c      	beq.n	80031ac <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a45      	ldr	r2, [pc, #276]	; (800322c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d045      	beq.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a43      	ldr	r2, [pc, #268]	; (8003230 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d03e      	beq.n	80031a4 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a42      	ldr	r2, [pc, #264]	; (8003234 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d037      	beq.n	80031a0 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a40      	ldr	r2, [pc, #256]	; (8003238 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d030      	beq.n	800319c <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a3f      	ldr	r2, [pc, #252]	; (800323c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d029      	beq.n	8003198 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a3d      	ldr	r2, [pc, #244]	; (8003240 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d022      	beq.n	8003194 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a3c      	ldr	r2, [pc, #240]	; (8003244 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d01a      	beq.n	800318e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a3a      	ldr	r2, [pc, #232]	; (8003248 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d012      	beq.n	8003188 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a39      	ldr	r2, [pc, #228]	; (800324c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00a      	beq.n	8003182 <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a37      	ldr	r2, [pc, #220]	; (8003250 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d102      	bne.n	800317c <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8003176:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800317a:	e01a      	b.n	80031b2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800317c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003180:	e017      	b.n	80031b2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003182:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003186:	e014      	b.n	80031b2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003188:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800318c:	e011      	b.n	80031b2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800318e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003192:	e00e      	b.n	80031b2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003194:	2340      	movs	r3, #64	; 0x40
 8003196:	e00c      	b.n	80031b2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003198:	2340      	movs	r3, #64	; 0x40
 800319a:	e00a      	b.n	80031b2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800319c:	2340      	movs	r3, #64	; 0x40
 800319e:	e008      	b.n	80031b2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80031a0:	2340      	movs	r3, #64	; 0x40
 80031a2:	e006      	b.n	80031b2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e004      	b.n	80031b2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e002      	b.n	80031b2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80031b0:	2301      	movs	r3, #1
 80031b2:	4a28      	ldr	r2, [pc, #160]	; (8003254 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80031b4:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0216 	orr.w	r2, r2, #22
 80031c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695a      	ldr	r2, [r3, #20]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d103      	bne.n	80031e6 <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0208 	orr.w	r2, r2, #8
 80031f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f042 0201 	orr.w	r2, r2, #1
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	e005      	b.n	8003214 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003210:	2302      	movs	r3, #2
 8003212:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003214:	7dfb      	ldrb	r3, [r7, #23]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40026058 	.word	0x40026058
 8003224:	40026010 	.word	0x40026010
 8003228:	40026410 	.word	0x40026410
 800322c:	40026070 	.word	0x40026070
 8003230:	40026470 	.word	0x40026470
 8003234:	40026028 	.word	0x40026028
 8003238:	40026428 	.word	0x40026428
 800323c:	40026088 	.word	0x40026088
 8003240:	40026488 	.word	0x40026488
 8003244:	40026040 	.word	0x40026040
 8003248:	40026440 	.word	0x40026440
 800324c:	400260a0 	.word	0x400260a0
 8003250:	400264a0 	.word	0x400264a0
 8003254:	40026000 	.word	0x40026000

08003258 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b40      	cmp	r3, #64	; 0x40
 8003274:	d108      	bne.n	8003288 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003286:	e007      	b.n	8003298 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	60da      	str	r2, [r3, #12]
}
 8003298:	bf00      	nop
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b089      	sub	sp, #36	; 0x24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	e16b      	b.n	8003598 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032c0:	2201      	movs	r2, #1
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	429a      	cmp	r2, r3
 80032da:	f040 815a 	bne.w	8003592 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d005      	beq.n	80032f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d130      	bne.n	8003358 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	2203      	movs	r2, #3
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4013      	ands	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800332c:	2201      	movs	r2, #1
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	f003 0201 	and.w	r2, r3, #1
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 0303 	and.w	r3, r3, #3
 8003360:	2b03      	cmp	r3, #3
 8003362:	d017      	beq.n	8003394 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	2203      	movs	r2, #3
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d123      	bne.n	80033e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	08da      	lsrs	r2, r3, #3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3208      	adds	r2, #8
 80033a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	220f      	movs	r2, #15
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4013      	ands	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	08da      	lsrs	r2, r3, #3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3208      	adds	r2, #8
 80033e2:	69b9      	ldr	r1, [r7, #24]
 80033e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	2203      	movs	r2, #3
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 0203 	and.w	r2, r3, #3
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80b4 	beq.w	8003592 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	4b60      	ldr	r3, [pc, #384]	; (80035b0 <HAL_GPIO_Init+0x30c>)
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	4a5f      	ldr	r2, [pc, #380]	; (80035b0 <HAL_GPIO_Init+0x30c>)
 8003434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003438:	6453      	str	r3, [r2, #68]	; 0x44
 800343a:	4b5d      	ldr	r3, [pc, #372]	; (80035b0 <HAL_GPIO_Init+0x30c>)
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003446:	4a5b      	ldr	r2, [pc, #364]	; (80035b4 <HAL_GPIO_Init+0x310>)
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	089b      	lsrs	r3, r3, #2
 800344c:	3302      	adds	r3, #2
 800344e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	220f      	movs	r2, #15
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4013      	ands	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a52      	ldr	r2, [pc, #328]	; (80035b8 <HAL_GPIO_Init+0x314>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d02b      	beq.n	80034ca <HAL_GPIO_Init+0x226>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a51      	ldr	r2, [pc, #324]	; (80035bc <HAL_GPIO_Init+0x318>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d025      	beq.n	80034c6 <HAL_GPIO_Init+0x222>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a50      	ldr	r2, [pc, #320]	; (80035c0 <HAL_GPIO_Init+0x31c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d01f      	beq.n	80034c2 <HAL_GPIO_Init+0x21e>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a4f      	ldr	r2, [pc, #316]	; (80035c4 <HAL_GPIO_Init+0x320>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d019      	beq.n	80034be <HAL_GPIO_Init+0x21a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a4e      	ldr	r2, [pc, #312]	; (80035c8 <HAL_GPIO_Init+0x324>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d013      	beq.n	80034ba <HAL_GPIO_Init+0x216>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a4d      	ldr	r2, [pc, #308]	; (80035cc <HAL_GPIO_Init+0x328>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00d      	beq.n	80034b6 <HAL_GPIO_Init+0x212>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a4c      	ldr	r2, [pc, #304]	; (80035d0 <HAL_GPIO_Init+0x32c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d007      	beq.n	80034b2 <HAL_GPIO_Init+0x20e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a4b      	ldr	r2, [pc, #300]	; (80035d4 <HAL_GPIO_Init+0x330>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d101      	bne.n	80034ae <HAL_GPIO_Init+0x20a>
 80034aa:	2307      	movs	r3, #7
 80034ac:	e00e      	b.n	80034cc <HAL_GPIO_Init+0x228>
 80034ae:	2308      	movs	r3, #8
 80034b0:	e00c      	b.n	80034cc <HAL_GPIO_Init+0x228>
 80034b2:	2306      	movs	r3, #6
 80034b4:	e00a      	b.n	80034cc <HAL_GPIO_Init+0x228>
 80034b6:	2305      	movs	r3, #5
 80034b8:	e008      	b.n	80034cc <HAL_GPIO_Init+0x228>
 80034ba:	2304      	movs	r3, #4
 80034bc:	e006      	b.n	80034cc <HAL_GPIO_Init+0x228>
 80034be:	2303      	movs	r3, #3
 80034c0:	e004      	b.n	80034cc <HAL_GPIO_Init+0x228>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e002      	b.n	80034cc <HAL_GPIO_Init+0x228>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <HAL_GPIO_Init+0x228>
 80034ca:	2300      	movs	r3, #0
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	f002 0203 	and.w	r2, r2, #3
 80034d2:	0092      	lsls	r2, r2, #2
 80034d4:	4093      	lsls	r3, r2
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034dc:	4935      	ldr	r1, [pc, #212]	; (80035b4 <HAL_GPIO_Init+0x310>)
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	3302      	adds	r3, #2
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034ea:	4b3b      	ldr	r3, [pc, #236]	; (80035d8 <HAL_GPIO_Init+0x334>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800350e:	4a32      	ldr	r2, [pc, #200]	; (80035d8 <HAL_GPIO_Init+0x334>)
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003514:	4b30      	ldr	r3, [pc, #192]	; (80035d8 <HAL_GPIO_Init+0x334>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003538:	4a27      	ldr	r2, [pc, #156]	; (80035d8 <HAL_GPIO_Init+0x334>)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800353e:	4b26      	ldr	r3, [pc, #152]	; (80035d8 <HAL_GPIO_Init+0x334>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	43db      	mvns	r3, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003562:	4a1d      	ldr	r2, [pc, #116]	; (80035d8 <HAL_GPIO_Init+0x334>)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003568:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <HAL_GPIO_Init+0x334>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800358c:	4a12      	ldr	r2, [pc, #72]	; (80035d8 <HAL_GPIO_Init+0x334>)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	3301      	adds	r3, #1
 8003596:	61fb      	str	r3, [r7, #28]
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	2b0f      	cmp	r3, #15
 800359c:	f67f ae90 	bls.w	80032c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035a0:	bf00      	nop
 80035a2:	bf00      	nop
 80035a4:	3724      	adds	r7, #36	; 0x24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40013800 	.word	0x40013800
 80035b8:	40020000 	.word	0x40020000
 80035bc:	40020400 	.word	0x40020400
 80035c0:	40020800 	.word	0x40020800
 80035c4:	40020c00 	.word	0x40020c00
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40021400 	.word	0x40021400
 80035d0:	40021800 	.word	0x40021800
 80035d4:	40021c00 	.word	0x40021c00
 80035d8:	40013c00 	.word	0x40013c00

080035dc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80035dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035de:	b08f      	sub	sp, #60	; 0x3c
 80035e0:	af0a      	add	r7, sp, #40	; 0x28
 80035e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e054      	b.n	8003698 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d106      	bne.n	800360e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f00b f961 	bl	800e8d0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2203      	movs	r2, #3
 8003612:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	2b00      	cmp	r3, #0
 8003620:	d102      	bne.n	8003628 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f004 f98b 	bl	8007948 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	687e      	ldr	r6, [r7, #4]
 800363a:	466d      	mov	r5, sp
 800363c:	f106 0410 	add.w	r4, r6, #16
 8003640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003642:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003646:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003648:	e894 0003 	ldmia.w	r4, {r0, r1}
 800364c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003650:	1d33      	adds	r3, r6, #4
 8003652:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003654:	6838      	ldr	r0, [r7, #0]
 8003656:	f004 f905 	bl	8007864 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2101      	movs	r1, #1
 8003660:	4618      	mov	r0, r3
 8003662:	f004 f982 	bl	800796a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	687e      	ldr	r6, [r7, #4]
 800366e:	466d      	mov	r5, sp
 8003670:	f106 0410 	add.w	r4, r6, #16
 8003674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800367a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800367c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003680:	e885 0003 	stmia.w	r5, {r0, r1}
 8003684:	1d33      	adds	r3, r6, #4
 8003686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003688:	6838      	ldr	r0, [r7, #0]
 800368a:	f004 fae9 	bl	8007c60 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036a0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80036a0:	b590      	push	{r4, r7, lr}
 80036a2:	b089      	sub	sp, #36	; 0x24
 80036a4:	af04      	add	r7, sp, #16
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	4608      	mov	r0, r1
 80036aa:	4611      	mov	r1, r2
 80036ac:	461a      	mov	r2, r3
 80036ae:	4603      	mov	r3, r0
 80036b0:	70fb      	strb	r3, [r7, #3]
 80036b2:	460b      	mov	r3, r1
 80036b4:	70bb      	strb	r3, [r7, #2]
 80036b6:	4613      	mov	r3, r2
 80036b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_HCD_HC_Init+0x28>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e076      	b.n	80037b6 <HAL_HCD_HC_Init+0x116>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	212c      	movs	r1, #44	; 0x2c
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	4413      	add	r3, r2
 80036dc:	333d      	adds	r3, #61	; 0x3d
 80036de:	2200      	movs	r2, #0
 80036e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80036e2:	78fb      	ldrb	r3, [r7, #3]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	212c      	movs	r1, #44	; 0x2c
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	4413      	add	r3, r2
 80036ee:	3338      	adds	r3, #56	; 0x38
 80036f0:	787a      	ldrb	r2, [r7, #1]
 80036f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80036f4:	78fb      	ldrb	r3, [r7, #3]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	212c      	movs	r1, #44	; 0x2c
 80036fa:	fb01 f303 	mul.w	r3, r1, r3
 80036fe:	4413      	add	r3, r2
 8003700:	3340      	adds	r3, #64	; 0x40
 8003702:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003704:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003706:	78fb      	ldrb	r3, [r7, #3]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	212c      	movs	r1, #44	; 0x2c
 800370c:	fb01 f303 	mul.w	r3, r1, r3
 8003710:	4413      	add	r3, r2
 8003712:	3339      	adds	r3, #57	; 0x39
 8003714:	78fa      	ldrb	r2, [r7, #3]
 8003716:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	212c      	movs	r1, #44	; 0x2c
 800371e:	fb01 f303 	mul.w	r3, r1, r3
 8003722:	4413      	add	r3, r2
 8003724:	333f      	adds	r3, #63	; 0x3f
 8003726:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800372a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800372c:	78fb      	ldrb	r3, [r7, #3]
 800372e:	78ba      	ldrb	r2, [r7, #2]
 8003730:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003734:	b2d0      	uxtb	r0, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	212c      	movs	r1, #44	; 0x2c
 800373a:	fb01 f303 	mul.w	r3, r1, r3
 800373e:	4413      	add	r3, r2
 8003740:	333a      	adds	r3, #58	; 0x3a
 8003742:	4602      	mov	r2, r0
 8003744:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003746:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800374a:	2b00      	cmp	r3, #0
 800374c:	da09      	bge.n	8003762 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800374e:	78fb      	ldrb	r3, [r7, #3]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	212c      	movs	r1, #44	; 0x2c
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	4413      	add	r3, r2
 800375a:	333b      	adds	r3, #59	; 0x3b
 800375c:	2201      	movs	r2, #1
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	e008      	b.n	8003774 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	212c      	movs	r1, #44	; 0x2c
 8003768:	fb01 f303 	mul.w	r3, r1, r3
 800376c:	4413      	add	r3, r2
 800376e:	333b      	adds	r3, #59	; 0x3b
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	212c      	movs	r1, #44	; 0x2c
 800377a:	fb01 f303 	mul.w	r3, r1, r3
 800377e:	4413      	add	r3, r2
 8003780:	333c      	adds	r3, #60	; 0x3c
 8003782:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003786:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6818      	ldr	r0, [r3, #0]
 800378c:	787c      	ldrb	r4, [r7, #1]
 800378e:	78ba      	ldrb	r2, [r7, #2]
 8003790:	78f9      	ldrb	r1, [r7, #3]
 8003792:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003794:	9302      	str	r3, [sp, #8]
 8003796:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	4623      	mov	r3, r4
 80037a4:	f004 fbd6 	bl	8007f54 <USB_HC_Init>
 80037a8:	4603      	mov	r3, r0
 80037aa:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd90      	pop	{r4, r7, pc}

080037be <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	460b      	mov	r3, r1
 80037c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_HCD_HC_Halt+0x1e>
 80037d8:	2302      	movs	r3, #2
 80037da:	e00f      	b.n	80037fc <HAL_HCD_HC_Halt+0x3e>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	78fa      	ldrb	r2, [r7, #3]
 80037ea:	4611      	mov	r1, r2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f004 fe12 	bl	8008416 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	4608      	mov	r0, r1
 800380e:	4611      	mov	r1, r2
 8003810:	461a      	mov	r2, r3
 8003812:	4603      	mov	r3, r0
 8003814:	70fb      	strb	r3, [r7, #3]
 8003816:	460b      	mov	r3, r1
 8003818:	70bb      	strb	r3, [r7, #2]
 800381a:	4613      	mov	r3, r2
 800381c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800381e:	78fb      	ldrb	r3, [r7, #3]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	212c      	movs	r1, #44	; 0x2c
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	4413      	add	r3, r2
 800382a:	333b      	adds	r3, #59	; 0x3b
 800382c:	78ba      	ldrb	r2, [r7, #2]
 800382e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	212c      	movs	r1, #44	; 0x2c
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	4413      	add	r3, r2
 800383c:	333f      	adds	r3, #63	; 0x3f
 800383e:	787a      	ldrb	r2, [r7, #1]
 8003840:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003842:	7c3b      	ldrb	r3, [r7, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d112      	bne.n	800386e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	212c      	movs	r1, #44	; 0x2c
 800384e:	fb01 f303 	mul.w	r3, r1, r3
 8003852:	4413      	add	r3, r2
 8003854:	3342      	adds	r3, #66	; 0x42
 8003856:	2203      	movs	r2, #3
 8003858:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800385a:	78fb      	ldrb	r3, [r7, #3]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	212c      	movs	r1, #44	; 0x2c
 8003860:	fb01 f303 	mul.w	r3, r1, r3
 8003864:	4413      	add	r3, r2
 8003866:	333d      	adds	r3, #61	; 0x3d
 8003868:	7f3a      	ldrb	r2, [r7, #28]
 800386a:	701a      	strb	r2, [r3, #0]
 800386c:	e008      	b.n	8003880 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	212c      	movs	r1, #44	; 0x2c
 8003874:	fb01 f303 	mul.w	r3, r1, r3
 8003878:	4413      	add	r3, r2
 800387a:	3342      	adds	r3, #66	; 0x42
 800387c:	2202      	movs	r2, #2
 800387e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003880:	787b      	ldrb	r3, [r7, #1]
 8003882:	2b03      	cmp	r3, #3
 8003884:	f200 80c6 	bhi.w	8003a14 <HAL_HCD_HC_SubmitRequest+0x210>
 8003888:	a201      	add	r2, pc, #4	; (adr r2, 8003890 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800388a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388e:	bf00      	nop
 8003890:	080038a1 	.word	0x080038a1
 8003894:	08003a01 	.word	0x08003a01
 8003898:	08003905 	.word	0x08003905
 800389c:	08003983 	.word	0x08003983
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80038a0:	7c3b      	ldrb	r3, [r7, #16]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	f040 80b8 	bne.w	8003a18 <HAL_HCD_HC_SubmitRequest+0x214>
 80038a8:	78bb      	ldrb	r3, [r7, #2]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f040 80b4 	bne.w	8003a18 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80038b0:	8b3b      	ldrh	r3, [r7, #24]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d108      	bne.n	80038c8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80038b6:	78fb      	ldrb	r3, [r7, #3]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	212c      	movs	r1, #44	; 0x2c
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
 80038c0:	4413      	add	r3, r2
 80038c2:	3355      	adds	r3, #85	; 0x55
 80038c4:	2201      	movs	r2, #1
 80038c6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	212c      	movs	r1, #44	; 0x2c
 80038ce:	fb01 f303 	mul.w	r3, r1, r3
 80038d2:	4413      	add	r3, r2
 80038d4:	3355      	adds	r3, #85	; 0x55
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d109      	bne.n	80038f0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	212c      	movs	r1, #44	; 0x2c
 80038e2:	fb01 f303 	mul.w	r3, r1, r3
 80038e6:	4413      	add	r3, r2
 80038e8:	3342      	adds	r3, #66	; 0x42
 80038ea:	2200      	movs	r2, #0
 80038ec:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80038ee:	e093      	b.n	8003a18 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	212c      	movs	r1, #44	; 0x2c
 80038f6:	fb01 f303 	mul.w	r3, r1, r3
 80038fa:	4413      	add	r3, r2
 80038fc:	3342      	adds	r3, #66	; 0x42
 80038fe:	2202      	movs	r2, #2
 8003900:	701a      	strb	r2, [r3, #0]
      break;
 8003902:	e089      	b.n	8003a18 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003904:	78bb      	ldrb	r3, [r7, #2]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d11d      	bne.n	8003946 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	212c      	movs	r1, #44	; 0x2c
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	4413      	add	r3, r2
 8003916:	3355      	adds	r3, #85	; 0x55
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800391e:	78fb      	ldrb	r3, [r7, #3]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	212c      	movs	r1, #44	; 0x2c
 8003924:	fb01 f303 	mul.w	r3, r1, r3
 8003928:	4413      	add	r3, r2
 800392a:	3342      	adds	r3, #66	; 0x42
 800392c:	2200      	movs	r2, #0
 800392e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003930:	e073      	b.n	8003a1a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003932:	78fb      	ldrb	r3, [r7, #3]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	212c      	movs	r1, #44	; 0x2c
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	4413      	add	r3, r2
 800393e:	3342      	adds	r3, #66	; 0x42
 8003940:	2202      	movs	r2, #2
 8003942:	701a      	strb	r2, [r3, #0]
      break;
 8003944:	e069      	b.n	8003a1a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003946:	78fb      	ldrb	r3, [r7, #3]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	212c      	movs	r1, #44	; 0x2c
 800394c:	fb01 f303 	mul.w	r3, r1, r3
 8003950:	4413      	add	r3, r2
 8003952:	3354      	adds	r3, #84	; 0x54
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	212c      	movs	r1, #44	; 0x2c
 8003960:	fb01 f303 	mul.w	r3, r1, r3
 8003964:	4413      	add	r3, r2
 8003966:	3342      	adds	r3, #66	; 0x42
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
      break;
 800396c:	e055      	b.n	8003a1a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800396e:	78fb      	ldrb	r3, [r7, #3]
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	212c      	movs	r1, #44	; 0x2c
 8003974:	fb01 f303 	mul.w	r3, r1, r3
 8003978:	4413      	add	r3, r2
 800397a:	3342      	adds	r3, #66	; 0x42
 800397c:	2202      	movs	r2, #2
 800397e:	701a      	strb	r2, [r3, #0]
      break;
 8003980:	e04b      	b.n	8003a1a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003982:	78bb      	ldrb	r3, [r7, #2]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d11d      	bne.n	80039c4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	212c      	movs	r1, #44	; 0x2c
 800398e:	fb01 f303 	mul.w	r3, r1, r3
 8003992:	4413      	add	r3, r2
 8003994:	3355      	adds	r3, #85	; 0x55
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d109      	bne.n	80039b0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	212c      	movs	r1, #44	; 0x2c
 80039a2:	fb01 f303 	mul.w	r3, r1, r3
 80039a6:	4413      	add	r3, r2
 80039a8:	3342      	adds	r3, #66	; 0x42
 80039aa:	2200      	movs	r2, #0
 80039ac:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80039ae:	e034      	b.n	8003a1a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	212c      	movs	r1, #44	; 0x2c
 80039b6:	fb01 f303 	mul.w	r3, r1, r3
 80039ba:	4413      	add	r3, r2
 80039bc:	3342      	adds	r3, #66	; 0x42
 80039be:	2202      	movs	r2, #2
 80039c0:	701a      	strb	r2, [r3, #0]
      break;
 80039c2:	e02a      	b.n	8003a1a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80039c4:	78fb      	ldrb	r3, [r7, #3]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	212c      	movs	r1, #44	; 0x2c
 80039ca:	fb01 f303 	mul.w	r3, r1, r3
 80039ce:	4413      	add	r3, r2
 80039d0:	3354      	adds	r3, #84	; 0x54
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d109      	bne.n	80039ec <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039d8:	78fb      	ldrb	r3, [r7, #3]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	212c      	movs	r1, #44	; 0x2c
 80039de:	fb01 f303 	mul.w	r3, r1, r3
 80039e2:	4413      	add	r3, r2
 80039e4:	3342      	adds	r3, #66	; 0x42
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
      break;
 80039ea:	e016      	b.n	8003a1a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	212c      	movs	r1, #44	; 0x2c
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	3342      	adds	r3, #66	; 0x42
 80039fa:	2202      	movs	r2, #2
 80039fc:	701a      	strb	r2, [r3, #0]
      break;
 80039fe:	e00c      	b.n	8003a1a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a00:	78fb      	ldrb	r3, [r7, #3]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	212c      	movs	r1, #44	; 0x2c
 8003a06:	fb01 f303 	mul.w	r3, r1, r3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3342      	adds	r3, #66	; 0x42
 8003a0e:	2200      	movs	r2, #0
 8003a10:	701a      	strb	r2, [r3, #0]
      break;
 8003a12:	e002      	b.n	8003a1a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003a14:	bf00      	nop
 8003a16:	e000      	b.n	8003a1a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003a18:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003a1a:	78fb      	ldrb	r3, [r7, #3]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	212c      	movs	r1, #44	; 0x2c
 8003a20:	fb01 f303 	mul.w	r3, r1, r3
 8003a24:	4413      	add	r3, r2
 8003a26:	3344      	adds	r3, #68	; 0x44
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	8b3a      	ldrh	r2, [r7, #24]
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	202c      	movs	r0, #44	; 0x2c
 8003a34:	fb00 f303 	mul.w	r3, r0, r3
 8003a38:	440b      	add	r3, r1
 8003a3a:	334c      	adds	r3, #76	; 0x4c
 8003a3c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003a3e:	78fb      	ldrb	r3, [r7, #3]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	212c      	movs	r1, #44	; 0x2c
 8003a44:	fb01 f303 	mul.w	r3, r1, r3
 8003a48:	4413      	add	r3, r2
 8003a4a:	3360      	adds	r3, #96	; 0x60
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	212c      	movs	r1, #44	; 0x2c
 8003a56:	fb01 f303 	mul.w	r3, r1, r3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3350      	adds	r3, #80	; 0x50
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	212c      	movs	r1, #44	; 0x2c
 8003a68:	fb01 f303 	mul.w	r3, r1, r3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3339      	adds	r3, #57	; 0x39
 8003a70:	78fa      	ldrb	r2, [r7, #3]
 8003a72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	212c      	movs	r1, #44	; 0x2c
 8003a7a:	fb01 f303 	mul.w	r3, r1, r3
 8003a7e:	4413      	add	r3, r2
 8003a80:	3361      	adds	r3, #97	; 0x61
 8003a82:	2200      	movs	r2, #0
 8003a84:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	78fb      	ldrb	r3, [r7, #3]
 8003a8c:	222c      	movs	r2, #44	; 0x2c
 8003a8e:	fb02 f303 	mul.w	r3, r2, r3
 8003a92:	3338      	adds	r3, #56	; 0x38
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	18d1      	adds	r1, r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	f004 fb66 	bl	8008170 <USB_HC_StartXfer>
 8003aa4:	4603      	mov	r3, r0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop

08003ab0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f004 f889 	bl	8007bde <USB_GetMode>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	f040 80f6 	bne.w	8003cc0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f004 f86d 	bl	8007bb8 <USB_ReadInterrupts>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 80ec 	beq.w	8003cbe <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f004 f864 	bl	8007bb8 <USB_ReadInterrupts>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003af6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003afa:	d104      	bne.n	8003b06 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003b04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f004 f854 	bl	8007bb8 <USB_ReadInterrupts>
 8003b10:	4603      	mov	r3, r0
 8003b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b1a:	d104      	bne.n	8003b26 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f004 f844 	bl	8007bb8 <USB_ReadInterrupts>
 8003b30:	4603      	mov	r3, r0
 8003b32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b3a:	d104      	bne.n	8003b46 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003b44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f004 f834 	bl	8007bb8 <USB_ReadInterrupts>
 8003b50:	4603      	mov	r3, r0
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d103      	bne.n	8003b62 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f004 f826 	bl	8007bb8 <USB_ReadInterrupts>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b76:	d11c      	bne.n	8003bb2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003b80:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10f      	bne.n	8003bb2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003b92:	2110      	movs	r1, #16
 8003b94:	6938      	ldr	r0, [r7, #16]
 8003b96:	f003 ff35 	bl	8007a04 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003b9a:	6938      	ldr	r0, [r7, #16]
 8003b9c:	f003 ff56 	bl	8007a4c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f004 f90e 	bl	8007dc8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f00a ff0d 	bl	800e9cc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f003 fffe 	bl	8007bb8 <USB_ReadInterrupts>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bc6:	d102      	bne.n	8003bce <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f001 fa03 	bl	8004fd4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f003 fff0 	bl	8007bb8 <USB_ReadInterrupts>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d106      	bne.n	8003bf0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f00a fed6 	bl	800e994 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2208      	movs	r2, #8
 8003bee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f003 ffdf 	bl	8007bb8 <USB_ReadInterrupts>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f003 0310 	and.w	r3, r3, #16
 8003c00:	2b10      	cmp	r3, #16
 8003c02:	d101      	bne.n	8003c08 <HAL_HCD_IRQHandler+0x158>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <HAL_HCD_IRQHandler+0x15a>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d012      	beq.n	8003c34 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	699a      	ldr	r2, [r3, #24]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0210 	bic.w	r2, r2, #16
 8003c1c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f001 f906 	bl	8004e30 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699a      	ldr	r2, [r3, #24]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0210 	orr.w	r2, r2, #16
 8003c32:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f003 ffbd 	bl	8007bb8 <USB_ReadInterrupts>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c48:	d13a      	bne.n	8003cc0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f004 fbd0 	bl	80083f4 <USB_HC_ReadInterrupt>
 8003c54:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	e025      	b.n	8003ca8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	fa22 f303 	lsr.w	r3, r2, r3
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d018      	beq.n	8003ca2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c86:	d106      	bne.n	8003c96 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f8ab 	bl	8003dea <HCD_HC_IN_IRQHandler>
 8003c94:	e005      	b.n	8003ca2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fcc6 	bl	800462e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d3d4      	bcc.n	8003c5c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cba:	615a      	str	r2, [r3, #20]
 8003cbc:	e000      	b.n	8003cc0 <HAL_HCD_IRQHandler+0x210>
      return;
 8003cbe:	bf00      	nop
    }
  }
}
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <HAL_HCD_Start+0x16>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	e013      	b.n	8003d04 <HAL_HCD_Start+0x3e>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2101      	movs	r1, #1
 8003cea:	4618      	mov	r0, r3
 8003cec:	f004 f8d0 	bl	8007e90 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f003 fe16 	bl	8007926 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_HCD_Stop+0x16>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e00d      	b.n	8003d3e <HAL_HCD_Stop+0x32>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f004 fcca 	bl	80086c8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f004 f872 	bl	8007e3c <USB_ResetPort>
 8003d58:	4603      	mov	r3, r0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003d6e:	78fb      	ldrb	r3, [r7, #3]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	212c      	movs	r1, #44	; 0x2c
 8003d74:	fb01 f303 	mul.w	r3, r1, r3
 8003d78:	4413      	add	r3, r2
 8003d7a:	3360      	adds	r3, #96	; 0x60
 8003d7c:	781b      	ldrb	r3, [r3, #0]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	460b      	mov	r3, r1
 8003d94:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003d96:	78fb      	ldrb	r3, [r7, #3]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	212c      	movs	r1, #44	; 0x2c
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	4413      	add	r3, r2
 8003da2:	3350      	adds	r3, #80	; 0x50
 8003da4:	681b      	ldr	r3, [r3, #0]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f004 f8b6 	bl	8007f30 <USB_GetCurrentFrame>
 8003dc4:	4603      	mov	r3, r0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b082      	sub	sp, #8
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f004 f891 	bl	8007f02 <USB_GetHostSpeed>
 8003de0:	4603      	mov	r3, r0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b086      	sub	sp, #24
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	460b      	mov	r3, r1
 8003df4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003e00:	78fb      	ldrb	r3, [r7, #3]
 8003e02:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d119      	bne.n	8003e4e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e26:	461a      	mov	r2, r3
 8003e28:	2304      	movs	r3, #4
 8003e2a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	0151      	lsls	r1, r2, #5
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	440a      	add	r2, r1
 8003e42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e46:	f043 0302 	orr.w	r3, r3, #2
 8003e4a:	60d3      	str	r3, [r2, #12]
 8003e4c:	e101      	b.n	8004052 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e64:	d12b      	bne.n	8003ebe <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e72:	461a      	mov	r2, r3
 8003e74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e78:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	212c      	movs	r1, #44	; 0x2c
 8003e80:	fb01 f303 	mul.w	r3, r1, r3
 8003e84:	4413      	add	r3, r2
 8003e86:	3361      	adds	r3, #97	; 0x61
 8003e88:	2207      	movs	r2, #7
 8003e8a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	0151      	lsls	r1, r2, #5
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	440a      	add	r2, r1
 8003ea2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ea6:	f043 0302 	orr.w	r3, r3, #2
 8003eaa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f004 faad 	bl	8008416 <USB_HC_Halt>
 8003ebc:	e0c9      	b.n	8004052 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	d109      	bne.n	8003ee8 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2320      	movs	r3, #32
 8003ee4:	6093      	str	r3, [r2, #8]
 8003ee6:	e0b4      	b.n	8004052 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d133      	bne.n	8003f66 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	0151      	lsls	r1, r2, #5
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	440a      	add	r2, r1
 8003f14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f18:	f043 0302 	orr.w	r3, r3, #2
 8003f1c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	212c      	movs	r1, #44	; 0x2c
 8003f24:	fb01 f303 	mul.w	r3, r1, r3
 8003f28:	4413      	add	r3, r2
 8003f2a:	3361      	adds	r3, #97	; 0x61
 8003f2c:	2205      	movs	r2, #5
 8003f2e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	2310      	movs	r3, #16
 8003f40:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4e:	461a      	mov	r2, r3
 8003f50:	2308      	movs	r3, #8
 8003f52:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	4611      	mov	r1, r2
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f004 fa59 	bl	8008416 <USB_HC_Halt>
 8003f64:	e075      	b.n	8004052 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7c:	d134      	bne.n	8003fe8 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	0151      	lsls	r1, r2, #5
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	440a      	add	r2, r1
 8003f94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f98:	f043 0302 	orr.w	r3, r3, #2
 8003f9c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	212c      	movs	r1, #44	; 0x2c
 8003fa4:	fb01 f303 	mul.w	r3, r1, r3
 8003fa8:	4413      	add	r3, r2
 8003faa:	3361      	adds	r3, #97	; 0x61
 8003fac:	2208      	movs	r2, #8
 8003fae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	2310      	movs	r3, #16
 8003fc0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fd4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	4611      	mov	r1, r2
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f004 fa18 	bl	8008416 <USB_HC_Halt>
 8003fe6:	e034      	b.n	8004052 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffa:	2b80      	cmp	r3, #128	; 0x80
 8003ffc:	d129      	bne.n	8004052 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4413      	add	r3, r2
 8004006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	0151      	lsls	r1, r2, #5
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	440a      	add	r2, r1
 8004014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004018:	f043 0302 	orr.w	r3, r3, #2
 800401c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	212c      	movs	r1, #44	; 0x2c
 8004024:	fb01 f303 	mul.w	r3, r1, r3
 8004028:	4413      	add	r3, r2
 800402a:	3361      	adds	r3, #97	; 0x61
 800402c:	2206      	movs	r2, #6
 800402e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	4611      	mov	r1, r2
 800403a:	4618      	mov	r0, r3
 800403c:	f004 f9eb 	bl	8008416 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	4413      	add	r3, r2
 8004048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800404c:	461a      	mov	r2, r3
 800404e:	2380      	movs	r3, #128	; 0x80
 8004050:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4413      	add	r3, r2
 800405a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004068:	d122      	bne.n	80040b0 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4413      	add	r3, r2
 8004072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	0151      	lsls	r1, r2, #5
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	440a      	add	r2, r1
 8004080:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f004 f9be 	bl	8008416 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a6:	461a      	mov	r2, r3
 80040a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040ac:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80040ae:	e2ba      	b.n	8004626 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	f040 811b 	bne.w	80042fe <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d019      	beq.n	8004104 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	212c      	movs	r1, #44	; 0x2c
 80040d6:	fb01 f303 	mul.w	r3, r1, r3
 80040da:	4413      	add	r3, r2
 80040dc:	3348      	adds	r3, #72	; 0x48
 80040de:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	0159      	lsls	r1, r3, #5
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	440b      	add	r3, r1
 80040e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80040f2:	1ad2      	subs	r2, r2, r3
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	202c      	movs	r0, #44	; 0x2c
 80040fa:	fb00 f303 	mul.w	r3, r0, r3
 80040fe:	440b      	add	r3, r1
 8004100:	3350      	adds	r3, #80	; 0x50
 8004102:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	212c      	movs	r1, #44	; 0x2c
 800410a:	fb01 f303 	mul.w	r3, r1, r3
 800410e:	4413      	add	r3, r2
 8004110:	3361      	adds	r3, #97	; 0x61
 8004112:	2201      	movs	r2, #1
 8004114:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	212c      	movs	r1, #44	; 0x2c
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	4413      	add	r3, r2
 8004122:	335c      	adds	r3, #92	; 0x5c
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	4413      	add	r3, r2
 8004130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004134:	461a      	mov	r2, r3
 8004136:	2301      	movs	r3, #1
 8004138:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	212c      	movs	r1, #44	; 0x2c
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	4413      	add	r3, r2
 8004146:	333f      	adds	r3, #63	; 0x3f
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d009      	beq.n	8004162 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	212c      	movs	r1, #44	; 0x2c
 8004154:	fb01 f303 	mul.w	r3, r1, r3
 8004158:	4413      	add	r3, r2
 800415a:	333f      	adds	r3, #63	; 0x3f
 800415c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800415e:	2b02      	cmp	r3, #2
 8004160:	d121      	bne.n	80041a6 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	4413      	add	r3, r2
 800416a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	0151      	lsls	r1, r2, #5
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	440a      	add	r2, r1
 8004178:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800417c:	f043 0302 	orr.w	r3, r3, #2
 8004180:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	4611      	mov	r1, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f004 f942 	bl	8008416 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	4413      	add	r3, r2
 800419a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800419e:	461a      	mov	r2, r3
 80041a0:	2310      	movs	r3, #16
 80041a2:	6093      	str	r3, [r2, #8]
 80041a4:	e066      	b.n	8004274 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	212c      	movs	r1, #44	; 0x2c
 80041ac:	fb01 f303 	mul.w	r3, r1, r3
 80041b0:	4413      	add	r3, r2
 80041b2:	333f      	adds	r3, #63	; 0x3f
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d127      	bne.n	800420a <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	0151      	lsls	r1, r2, #5
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	440a      	add	r2, r1
 80041d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041d8:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	212c      	movs	r1, #44	; 0x2c
 80041e0:	fb01 f303 	mul.w	r3, r1, r3
 80041e4:	4413      	add	r3, r2
 80041e6:	3360      	adds	r3, #96	; 0x60
 80041e8:	2201      	movs	r2, #1
 80041ea:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	b2d9      	uxtb	r1, r3
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	202c      	movs	r0, #44	; 0x2c
 80041f6:	fb00 f303 	mul.w	r3, r0, r3
 80041fa:	4413      	add	r3, r2
 80041fc:	3360      	adds	r3, #96	; 0x60
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	461a      	mov	r2, r3
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f00a fbf0 	bl	800e9e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004208:	e034      	b.n	8004274 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	212c      	movs	r1, #44	; 0x2c
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	4413      	add	r3, r2
 8004216:	333f      	adds	r3, #63	; 0x3f
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d12a      	bne.n	8004274 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	212c      	movs	r1, #44	; 0x2c
 8004224:	fb01 f303 	mul.w	r3, r1, r3
 8004228:	4413      	add	r3, r2
 800422a:	3360      	adds	r3, #96	; 0x60
 800422c:	2201      	movs	r2, #1
 800422e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	212c      	movs	r1, #44	; 0x2c
 8004236:	fb01 f303 	mul.w	r3, r1, r3
 800423a:	4413      	add	r3, r2
 800423c:	3354      	adds	r3, #84	; 0x54
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	f083 0301 	eor.w	r3, r3, #1
 8004244:	b2d8      	uxtb	r0, r3
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	212c      	movs	r1, #44	; 0x2c
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	4413      	add	r3, r2
 8004252:	3354      	adds	r3, #84	; 0x54
 8004254:	4602      	mov	r2, r0
 8004256:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	b2d9      	uxtb	r1, r3
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	202c      	movs	r0, #44	; 0x2c
 8004262:	fb00 f303 	mul.w	r3, r0, r3
 8004266:	4413      	add	r3, r2
 8004268:	3360      	adds	r3, #96	; 0x60
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	461a      	mov	r2, r3
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f00a fbba 	bl	800e9e8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d12b      	bne.n	80042d4 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	212c      	movs	r1, #44	; 0x2c
 8004282:	fb01 f303 	mul.w	r3, r1, r3
 8004286:	4413      	add	r3, r2
 8004288:	3348      	adds	r3, #72	; 0x48
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	202c      	movs	r0, #44	; 0x2c
 8004292:	fb00 f202 	mul.w	r2, r0, r2
 8004296:	440a      	add	r2, r1
 8004298:	3240      	adds	r2, #64	; 0x40
 800429a:	8812      	ldrh	r2, [r2, #0]
 800429c:	fbb3 f3f2 	udiv	r3, r3, r2
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 81be 	beq.w	8004626 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	212c      	movs	r1, #44	; 0x2c
 80042b0:	fb01 f303 	mul.w	r3, r1, r3
 80042b4:	4413      	add	r3, r2
 80042b6:	3354      	adds	r3, #84	; 0x54
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	f083 0301 	eor.w	r3, r3, #1
 80042be:	b2d8      	uxtb	r0, r3
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	212c      	movs	r1, #44	; 0x2c
 80042c6:	fb01 f303 	mul.w	r3, r1, r3
 80042ca:	4413      	add	r3, r2
 80042cc:	3354      	adds	r3, #84	; 0x54
 80042ce:	4602      	mov	r2, r0
 80042d0:	701a      	strb	r2, [r3, #0]
}
 80042d2:	e1a8      	b.n	8004626 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	212c      	movs	r1, #44	; 0x2c
 80042da:	fb01 f303 	mul.w	r3, r1, r3
 80042de:	4413      	add	r3, r2
 80042e0:	3354      	adds	r3, #84	; 0x54
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	f083 0301 	eor.w	r3, r3, #1
 80042e8:	b2d8      	uxtb	r0, r3
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	212c      	movs	r1, #44	; 0x2c
 80042f0:	fb01 f303 	mul.w	r3, r1, r3
 80042f4:	4413      	add	r3, r2
 80042f6:	3354      	adds	r3, #84	; 0x54
 80042f8:	4602      	mov	r2, r0
 80042fa:	701a      	strb	r2, [r3, #0]
}
 80042fc:	e193      	b.n	8004626 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	4413      	add	r3, r2
 8004306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b02      	cmp	r3, #2
 8004312:	f040 8106 	bne.w	8004522 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4413      	add	r3, r2
 800431e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	0151      	lsls	r1, r2, #5
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	440a      	add	r2, r1
 800432c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004330:	f023 0302 	bic.w	r3, r3, #2
 8004334:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	212c      	movs	r1, #44	; 0x2c
 800433c:	fb01 f303 	mul.w	r3, r1, r3
 8004340:	4413      	add	r3, r2
 8004342:	3361      	adds	r3, #97	; 0x61
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d109      	bne.n	800435e <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	212c      	movs	r1, #44	; 0x2c
 8004350:	fb01 f303 	mul.w	r3, r1, r3
 8004354:	4413      	add	r3, r2
 8004356:	3360      	adds	r3, #96	; 0x60
 8004358:	2201      	movs	r2, #1
 800435a:	701a      	strb	r2, [r3, #0]
 800435c:	e0c9      	b.n	80044f2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	212c      	movs	r1, #44	; 0x2c
 8004364:	fb01 f303 	mul.w	r3, r1, r3
 8004368:	4413      	add	r3, r2
 800436a:	3361      	adds	r3, #97	; 0x61
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b05      	cmp	r3, #5
 8004370:	d109      	bne.n	8004386 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	212c      	movs	r1, #44	; 0x2c
 8004378:	fb01 f303 	mul.w	r3, r1, r3
 800437c:	4413      	add	r3, r2
 800437e:	3360      	adds	r3, #96	; 0x60
 8004380:	2205      	movs	r2, #5
 8004382:	701a      	strb	r2, [r3, #0]
 8004384:	e0b5      	b.n	80044f2 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	212c      	movs	r1, #44	; 0x2c
 800438c:	fb01 f303 	mul.w	r3, r1, r3
 8004390:	4413      	add	r3, r2
 8004392:	3361      	adds	r3, #97	; 0x61
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b06      	cmp	r3, #6
 8004398:	d009      	beq.n	80043ae <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	212c      	movs	r1, #44	; 0x2c
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	4413      	add	r3, r2
 80043a6:	3361      	adds	r3, #97	; 0x61
 80043a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80043aa:	2b08      	cmp	r3, #8
 80043ac:	d150      	bne.n	8004450 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	212c      	movs	r1, #44	; 0x2c
 80043b4:	fb01 f303 	mul.w	r3, r1, r3
 80043b8:	4413      	add	r3, r2
 80043ba:	335c      	adds	r3, #92	; 0x5c
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	202c      	movs	r0, #44	; 0x2c
 80043c6:	fb00 f303 	mul.w	r3, r0, r3
 80043ca:	440b      	add	r3, r1
 80043cc:	335c      	adds	r3, #92	; 0x5c
 80043ce:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	212c      	movs	r1, #44	; 0x2c
 80043d6:	fb01 f303 	mul.w	r3, r1, r3
 80043da:	4413      	add	r3, r2
 80043dc:	335c      	adds	r3, #92	; 0x5c
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d912      	bls.n	800440a <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	212c      	movs	r1, #44	; 0x2c
 80043ea:	fb01 f303 	mul.w	r3, r1, r3
 80043ee:	4413      	add	r3, r2
 80043f0:	335c      	adds	r3, #92	; 0x5c
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	212c      	movs	r1, #44	; 0x2c
 80043fc:	fb01 f303 	mul.w	r3, r1, r3
 8004400:	4413      	add	r3, r2
 8004402:	3360      	adds	r3, #96	; 0x60
 8004404:	2204      	movs	r2, #4
 8004406:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004408:	e073      	b.n	80044f2 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	212c      	movs	r1, #44	; 0x2c
 8004410:	fb01 f303 	mul.w	r3, r1, r3
 8004414:	4413      	add	r3, r2
 8004416:	3360      	adds	r3, #96	; 0x60
 8004418:	2202      	movs	r2, #2
 800441a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4413      	add	r3, r2
 8004424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004432:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800443a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	4413      	add	r3, r2
 8004444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004448:	461a      	mov	r2, r3
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800444e:	e050      	b.n	80044f2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	212c      	movs	r1, #44	; 0x2c
 8004456:	fb01 f303 	mul.w	r3, r1, r3
 800445a:	4413      	add	r3, r2
 800445c:	3361      	adds	r3, #97	; 0x61
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b03      	cmp	r3, #3
 8004462:	d122      	bne.n	80044aa <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	212c      	movs	r1, #44	; 0x2c
 800446a:	fb01 f303 	mul.w	r3, r1, r3
 800446e:	4413      	add	r3, r2
 8004470:	3360      	adds	r3, #96	; 0x60
 8004472:	2202      	movs	r2, #2
 8004474:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	4413      	add	r3, r2
 800447e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800448c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004494:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	4413      	add	r3, r2
 800449e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a2:	461a      	mov	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	e023      	b.n	80044f2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	212c      	movs	r1, #44	; 0x2c
 80044b0:	fb01 f303 	mul.w	r3, r1, r3
 80044b4:	4413      	add	r3, r2
 80044b6:	3361      	adds	r3, #97	; 0x61
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b07      	cmp	r3, #7
 80044bc:	d119      	bne.n	80044f2 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	212c      	movs	r1, #44	; 0x2c
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	4413      	add	r3, r2
 80044ca:	335c      	adds	r3, #92	; 0x5c
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	202c      	movs	r0, #44	; 0x2c
 80044d6:	fb00 f303 	mul.w	r3, r0, r3
 80044da:	440b      	add	r3, r1
 80044dc:	335c      	adds	r3, #92	; 0x5c
 80044de:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	212c      	movs	r1, #44	; 0x2c
 80044e6:	fb01 f303 	mul.w	r3, r1, r3
 80044ea:	4413      	add	r3, r2
 80044ec:	3360      	adds	r3, #96	; 0x60
 80044ee:	2204      	movs	r2, #4
 80044f0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044fe:	461a      	mov	r2, r3
 8004500:	2302      	movs	r3, #2
 8004502:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	b2d9      	uxtb	r1, r3
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	202c      	movs	r0, #44	; 0x2c
 800450e:	fb00 f303 	mul.w	r3, r0, r3
 8004512:	4413      	add	r3, r2
 8004514:	3360      	adds	r3, #96	; 0x60
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f00a fa64 	bl	800e9e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004520:	e081      	b.n	8004626 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	4413      	add	r3, r2
 800452a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 0310 	and.w	r3, r3, #16
 8004534:	2b10      	cmp	r3, #16
 8004536:	d176      	bne.n	8004626 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	212c      	movs	r1, #44	; 0x2c
 800453e:	fb01 f303 	mul.w	r3, r1, r3
 8004542:	4413      	add	r3, r2
 8004544:	333f      	adds	r3, #63	; 0x3f
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b03      	cmp	r3, #3
 800454a:	d121      	bne.n	8004590 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	212c      	movs	r1, #44	; 0x2c
 8004552:	fb01 f303 	mul.w	r3, r1, r3
 8004556:	4413      	add	r3, r2
 8004558:	335c      	adds	r3, #92	; 0x5c
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	4413      	add	r3, r2
 8004566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	0151      	lsls	r1, r2, #5
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	440a      	add	r2, r1
 8004574:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004578:	f043 0302 	orr.w	r3, r3, #2
 800457c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	4611      	mov	r1, r2
 8004588:	4618      	mov	r0, r3
 800458a:	f003 ff44 	bl	8008416 <USB_HC_Halt>
 800458e:	e041      	b.n	8004614 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	212c      	movs	r1, #44	; 0x2c
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	4413      	add	r3, r2
 800459c:	333f      	adds	r3, #63	; 0x3f
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d009      	beq.n	80045b8 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	212c      	movs	r1, #44	; 0x2c
 80045aa:	fb01 f303 	mul.w	r3, r1, r3
 80045ae:	4413      	add	r3, r2
 80045b0:	333f      	adds	r3, #63	; 0x3f
 80045b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d12d      	bne.n	8004614 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	212c      	movs	r1, #44	; 0x2c
 80045be:	fb01 f303 	mul.w	r3, r1, r3
 80045c2:	4413      	add	r3, r2
 80045c4:	335c      	adds	r3, #92	; 0x5c
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d120      	bne.n	8004614 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	212c      	movs	r1, #44	; 0x2c
 80045d8:	fb01 f303 	mul.w	r3, r1, r3
 80045dc:	4413      	add	r3, r2
 80045de:	3361      	adds	r3, #97	; 0x61
 80045e0:	2203      	movs	r2, #3
 80045e2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	0151      	lsls	r1, r2, #5
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	440a      	add	r2, r1
 80045fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045fe:	f043 0302 	orr.w	r3, r3, #2
 8004602:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	4611      	mov	r1, r2
 800460e:	4618      	mov	r0, r3
 8004610:	f003 ff01 	bl	8008416 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	4413      	add	r3, r2
 800461c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004620:	461a      	mov	r2, r3
 8004622:	2310      	movs	r3, #16
 8004624:	6093      	str	r3, [r2, #8]
}
 8004626:	bf00      	nop
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b088      	sub	sp, #32
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	460b      	mov	r3, r1
 8004638:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004644:	78fb      	ldrb	r3, [r7, #3]
 8004646:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	4413      	add	r3, r2
 8004650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b04      	cmp	r3, #4
 800465c:	d119      	bne.n	8004692 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	4413      	add	r3, r2
 8004666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800466a:	461a      	mov	r2, r3
 800466c:	2304      	movs	r3, #4
 800466e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	4413      	add	r3, r2
 8004678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	0151      	lsls	r1, r2, #5
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	440a      	add	r2, r1
 8004686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800468a:	f043 0302 	orr.w	r3, r3, #2
 800468e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004690:	e3ca      	b.n	8004e28 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	4413      	add	r3, r2
 800469a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 0320 	and.w	r3, r3, #32
 80046a4:	2b20      	cmp	r3, #32
 80046a6:	d13e      	bne.n	8004726 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b4:	461a      	mov	r2, r3
 80046b6:	2320      	movs	r3, #32
 80046b8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	212c      	movs	r1, #44	; 0x2c
 80046c0:	fb01 f303 	mul.w	r3, r1, r3
 80046c4:	4413      	add	r3, r2
 80046c6:	333d      	adds	r3, #61	; 0x3d
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	f040 83ac 	bne.w	8004e28 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	212c      	movs	r1, #44	; 0x2c
 80046d6:	fb01 f303 	mul.w	r3, r1, r3
 80046da:	4413      	add	r3, r2
 80046dc:	333d      	adds	r3, #61	; 0x3d
 80046de:	2200      	movs	r2, #0
 80046e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	212c      	movs	r1, #44	; 0x2c
 80046e8:	fb01 f303 	mul.w	r3, r1, r3
 80046ec:	4413      	add	r3, r2
 80046ee:	3360      	adds	r3, #96	; 0x60
 80046f0:	2202      	movs	r2, #2
 80046f2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	0151      	lsls	r1, r2, #5
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	440a      	add	r2, r1
 800470a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800470e:	f043 0302 	orr.w	r3, r3, #2
 8004712:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	4611      	mov	r1, r2
 800471e:	4618      	mov	r0, r3
 8004720:	f003 fe79 	bl	8008416 <USB_HC_Halt>
}
 8004724:	e380      	b.n	8004e28 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	4413      	add	r3, r2
 800472e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800473c:	d122      	bne.n	8004784 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	4413      	add	r3, r2
 8004746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	0151      	lsls	r1, r2, #5
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	440a      	add	r2, r1
 8004754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004758:	f043 0302 	orr.w	r3, r3, #2
 800475c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	4611      	mov	r1, r2
 8004768:	4618      	mov	r0, r3
 800476a:	f003 fe54 	bl	8008416 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	4413      	add	r3, r2
 8004776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800477a:	461a      	mov	r2, r3
 800477c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004780:	6093      	str	r3, [r2, #8]
}
 8004782:	e351      	b.n	8004e28 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	4413      	add	r3, r2
 800478c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b01      	cmp	r3, #1
 8004798:	d150      	bne.n	800483c <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	212c      	movs	r1, #44	; 0x2c
 80047a0:	fb01 f303 	mul.w	r3, r1, r3
 80047a4:	4413      	add	r3, r2
 80047a6:	335c      	adds	r3, #92	; 0x5c
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047be:	2b40      	cmp	r3, #64	; 0x40
 80047c0:	d111      	bne.n	80047e6 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	212c      	movs	r1, #44	; 0x2c
 80047c8:	fb01 f303 	mul.w	r3, r1, r3
 80047cc:	4413      	add	r3, r2
 80047ce:	333d      	adds	r3, #61	; 0x3d
 80047d0:	2201      	movs	r2, #1
 80047d2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e0:	461a      	mov	r2, r3
 80047e2:	2340      	movs	r3, #64	; 0x40
 80047e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	0151      	lsls	r1, r2, #5
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	440a      	add	r2, r1
 80047fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004800:	f043 0302 	orr.w	r3, r3, #2
 8004804:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	4611      	mov	r1, r2
 8004810:	4618      	mov	r0, r3
 8004812:	f003 fe00 	bl	8008416 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	4413      	add	r3, r2
 800481e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004822:	461a      	mov	r2, r3
 8004824:	2301      	movs	r3, #1
 8004826:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	212c      	movs	r1, #44	; 0x2c
 800482e:	fb01 f303 	mul.w	r3, r1, r3
 8004832:	4413      	add	r3, r2
 8004834:	3361      	adds	r3, #97	; 0x61
 8004836:	2201      	movs	r2, #1
 8004838:	701a      	strb	r2, [r3, #0]
}
 800483a:	e2f5      	b.n	8004e28 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	4413      	add	r3, r2
 8004844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484e:	2b40      	cmp	r3, #64	; 0x40
 8004850:	d13c      	bne.n	80048cc <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	212c      	movs	r1, #44	; 0x2c
 8004858:	fb01 f303 	mul.w	r3, r1, r3
 800485c:	4413      	add	r3, r2
 800485e:	3361      	adds	r3, #97	; 0x61
 8004860:	2204      	movs	r2, #4
 8004862:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	212c      	movs	r1, #44	; 0x2c
 800486a:	fb01 f303 	mul.w	r3, r1, r3
 800486e:	4413      	add	r3, r2
 8004870:	333d      	adds	r3, #61	; 0x3d
 8004872:	2201      	movs	r2, #1
 8004874:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	212c      	movs	r1, #44	; 0x2c
 800487c:	fb01 f303 	mul.w	r3, r1, r3
 8004880:	4413      	add	r3, r2
 8004882:	335c      	adds	r3, #92	; 0x5c
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	4413      	add	r3, r2
 8004890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	0151      	lsls	r1, r2, #5
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	440a      	add	r2, r1
 800489e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048a2:	f043 0302 	orr.w	r3, r3, #2
 80048a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	4611      	mov	r1, r2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f003 fdaf 	bl	8008416 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c4:	461a      	mov	r2, r3
 80048c6:	2340      	movs	r3, #64	; 0x40
 80048c8:	6093      	str	r3, [r2, #8]
}
 80048ca:	e2ad      	b.n	8004e28 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d12a      	bne.n	8004938 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ee:	461a      	mov	r2, r3
 80048f0:	2308      	movs	r3, #8
 80048f2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	0151      	lsls	r1, r2, #5
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	440a      	add	r2, r1
 800490a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800490e:	f043 0302 	orr.w	r3, r3, #2
 8004912:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	4611      	mov	r1, r2
 800491e:	4618      	mov	r0, r3
 8004920:	f003 fd79 	bl	8008416 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	212c      	movs	r1, #44	; 0x2c
 800492a:	fb01 f303 	mul.w	r3, r1, r3
 800492e:	4413      	add	r3, r2
 8004930:	3361      	adds	r3, #97	; 0x61
 8004932:	2205      	movs	r2, #5
 8004934:	701a      	strb	r2, [r3, #0]
}
 8004936:	e277      	b.n	8004e28 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	4413      	add	r3, r2
 8004940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 0310 	and.w	r3, r3, #16
 800494a:	2b10      	cmp	r3, #16
 800494c:	d150      	bne.n	80049f0 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	212c      	movs	r1, #44	; 0x2c
 8004954:	fb01 f303 	mul.w	r3, r1, r3
 8004958:	4413      	add	r3, r2
 800495a:	335c      	adds	r3, #92	; 0x5c
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	212c      	movs	r1, #44	; 0x2c
 8004966:	fb01 f303 	mul.w	r3, r1, r3
 800496a:	4413      	add	r3, r2
 800496c:	3361      	adds	r3, #97	; 0x61
 800496e:	2203      	movs	r2, #3
 8004970:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	212c      	movs	r1, #44	; 0x2c
 8004978:	fb01 f303 	mul.w	r3, r1, r3
 800497c:	4413      	add	r3, r2
 800497e:	333d      	adds	r3, #61	; 0x3d
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d112      	bne.n	80049ac <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	212c      	movs	r1, #44	; 0x2c
 800498c:	fb01 f303 	mul.w	r3, r1, r3
 8004990:	4413      	add	r3, r2
 8004992:	333c      	adds	r3, #60	; 0x3c
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d108      	bne.n	80049ac <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	212c      	movs	r1, #44	; 0x2c
 80049a0:	fb01 f303 	mul.w	r3, r1, r3
 80049a4:	4413      	add	r3, r2
 80049a6:	333d      	adds	r3, #61	; 0x3d
 80049a8:	2201      	movs	r2, #1
 80049aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	0151      	lsls	r1, r2, #5
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	440a      	add	r2, r1
 80049c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049c6:	f043 0302 	orr.w	r3, r3, #2
 80049ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	4611      	mov	r1, r2
 80049d6:	4618      	mov	r0, r3
 80049d8:	f003 fd1d 	bl	8008416 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e8:	461a      	mov	r2, r3
 80049ea:	2310      	movs	r3, #16
 80049ec:	6093      	str	r3, [r2, #8]
}
 80049ee:	e21b      	b.n	8004e28 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a02:	2b80      	cmp	r3, #128	; 0x80
 8004a04:	d174      	bne.n	8004af0 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d121      	bne.n	8004a52 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	212c      	movs	r1, #44	; 0x2c
 8004a14:	fb01 f303 	mul.w	r3, r1, r3
 8004a18:	4413      	add	r3, r2
 8004a1a:	3361      	adds	r3, #97	; 0x61
 8004a1c:	2206      	movs	r2, #6
 8004a1e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	0151      	lsls	r1, r2, #5
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	440a      	add	r2, r1
 8004a36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a3a:	f043 0302 	orr.w	r3, r3, #2
 8004a3e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	4611      	mov	r1, r2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f003 fce3 	bl	8008416 <USB_HC_Halt>
 8004a50:	e044      	b.n	8004adc <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	212c      	movs	r1, #44	; 0x2c
 8004a58:	fb01 f303 	mul.w	r3, r1, r3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	335c      	adds	r3, #92	; 0x5c
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	202c      	movs	r0, #44	; 0x2c
 8004a6a:	fb00 f303 	mul.w	r3, r0, r3
 8004a6e:	440b      	add	r3, r1
 8004a70:	335c      	adds	r3, #92	; 0x5c
 8004a72:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	212c      	movs	r1, #44	; 0x2c
 8004a7a:	fb01 f303 	mul.w	r3, r1, r3
 8004a7e:	4413      	add	r3, r2
 8004a80:	335c      	adds	r3, #92	; 0x5c
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d920      	bls.n	8004aca <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	212c      	movs	r1, #44	; 0x2c
 8004a8e:	fb01 f303 	mul.w	r3, r1, r3
 8004a92:	4413      	add	r3, r2
 8004a94:	335c      	adds	r3, #92	; 0x5c
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	212c      	movs	r1, #44	; 0x2c
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	3360      	adds	r3, #96	; 0x60
 8004aa8:	2204      	movs	r2, #4
 8004aaa:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	b2d9      	uxtb	r1, r3
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	202c      	movs	r0, #44	; 0x2c
 8004ab6:	fb00 f303 	mul.w	r3, r0, r3
 8004aba:	4413      	add	r3, r2
 8004abc:	3360      	adds	r3, #96	; 0x60
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f009 ff90 	bl	800e9e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004ac8:	e008      	b.n	8004adc <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	212c      	movs	r1, #44	; 0x2c
 8004ad0:	fb01 f303 	mul.w	r3, r1, r3
 8004ad4:	4413      	add	r3, r2
 8004ad6:	3360      	adds	r3, #96	; 0x60
 8004ad8:	2202      	movs	r2, #2
 8004ada:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae8:	461a      	mov	r2, r3
 8004aea:	2380      	movs	r3, #128	; 0x80
 8004aec:	6093      	str	r3, [r2, #8]
}
 8004aee:	e19b      	b.n	8004e28 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b06:	d134      	bne.n	8004b72 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	0151      	lsls	r1, r2, #5
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	440a      	add	r2, r1
 8004b1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b22:	f043 0302 	orr.w	r3, r3, #2
 8004b26:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	4611      	mov	r1, r2
 8004b32:	4618      	mov	r0, r3
 8004b34:	f003 fc6f 	bl	8008416 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b44:	461a      	mov	r2, r3
 8004b46:	2310      	movs	r3, #16
 8004b48:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b56:	461a      	mov	r2, r3
 8004b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	212c      	movs	r1, #44	; 0x2c
 8004b64:	fb01 f303 	mul.w	r3, r1, r3
 8004b68:	4413      	add	r3, r2
 8004b6a:	3361      	adds	r3, #97	; 0x61
 8004b6c:	2208      	movs	r2, #8
 8004b6e:	701a      	strb	r2, [r3, #0]
}
 8004b70:	e15a      	b.n	8004e28 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	f040 814f 	bne.w	8004e28 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	0151      	lsls	r1, r2, #5
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	440a      	add	r2, r1
 8004ba0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ba4:	f023 0302 	bic.w	r3, r3, #2
 8004ba8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	212c      	movs	r1, #44	; 0x2c
 8004bb0:	fb01 f303 	mul.w	r3, r1, r3
 8004bb4:	4413      	add	r3, r2
 8004bb6:	3361      	adds	r3, #97	; 0x61
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d17d      	bne.n	8004cba <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	212c      	movs	r1, #44	; 0x2c
 8004bc4:	fb01 f303 	mul.w	r3, r1, r3
 8004bc8:	4413      	add	r3, r2
 8004bca:	3360      	adds	r3, #96	; 0x60
 8004bcc:	2201      	movs	r2, #1
 8004bce:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	212c      	movs	r1, #44	; 0x2c
 8004bd6:	fb01 f303 	mul.w	r3, r1, r3
 8004bda:	4413      	add	r3, r2
 8004bdc:	333f      	adds	r3, #63	; 0x3f
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d00a      	beq.n	8004bfa <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	212c      	movs	r1, #44	; 0x2c
 8004bea:	fb01 f303 	mul.w	r3, r1, r3
 8004bee:	4413      	add	r3, r2
 8004bf0:	333f      	adds	r3, #63	; 0x3f
 8004bf2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004bf4:	2b03      	cmp	r3, #3
 8004bf6:	f040 8100 	bne.w	8004dfa <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d113      	bne.n	8004c2a <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	212c      	movs	r1, #44	; 0x2c
 8004c08:	fb01 f303 	mul.w	r3, r1, r3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	3355      	adds	r3, #85	; 0x55
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	f083 0301 	eor.w	r3, r3, #1
 8004c16:	b2d8      	uxtb	r0, r3
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	212c      	movs	r1, #44	; 0x2c
 8004c1e:	fb01 f303 	mul.w	r3, r1, r3
 8004c22:	4413      	add	r3, r2
 8004c24:	3355      	adds	r3, #85	; 0x55
 8004c26:	4602      	mov	r2, r0
 8004c28:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	f040 80e3 	bne.w	8004dfa <HCD_HC_OUT_IRQHandler+0x7cc>
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	212c      	movs	r1, #44	; 0x2c
 8004c3a:	fb01 f303 	mul.w	r3, r1, r3
 8004c3e:	4413      	add	r3, r2
 8004c40:	334c      	adds	r3, #76	; 0x4c
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 80d8 	beq.w	8004dfa <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	212c      	movs	r1, #44	; 0x2c
 8004c50:	fb01 f303 	mul.w	r3, r1, r3
 8004c54:	4413      	add	r3, r2
 8004c56:	334c      	adds	r3, #76	; 0x4c
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	202c      	movs	r0, #44	; 0x2c
 8004c60:	fb00 f202 	mul.w	r2, r0, r2
 8004c64:	440a      	add	r2, r1
 8004c66:	3240      	adds	r2, #64	; 0x40
 8004c68:	8812      	ldrh	r2, [r2, #0]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	202c      	movs	r0, #44	; 0x2c
 8004c74:	fb00 f202 	mul.w	r2, r0, r2
 8004c78:	440a      	add	r2, r1
 8004c7a:	3240      	adds	r2, #64	; 0x40
 8004c7c:	8812      	ldrh	r2, [r2, #0]
 8004c7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 80b5 	beq.w	8004dfa <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	212c      	movs	r1, #44	; 0x2c
 8004c96:	fb01 f303 	mul.w	r3, r1, r3
 8004c9a:	4413      	add	r3, r2
 8004c9c:	3355      	adds	r3, #85	; 0x55
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	f083 0301 	eor.w	r3, r3, #1
 8004ca4:	b2d8      	uxtb	r0, r3
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	212c      	movs	r1, #44	; 0x2c
 8004cac:	fb01 f303 	mul.w	r3, r1, r3
 8004cb0:	4413      	add	r3, r2
 8004cb2:	3355      	adds	r3, #85	; 0x55
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	701a      	strb	r2, [r3, #0]
 8004cb8:	e09f      	b.n	8004dfa <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	212c      	movs	r1, #44	; 0x2c
 8004cc0:	fb01 f303 	mul.w	r3, r1, r3
 8004cc4:	4413      	add	r3, r2
 8004cc6:	3361      	adds	r3, #97	; 0x61
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d109      	bne.n	8004ce2 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	212c      	movs	r1, #44	; 0x2c
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	4413      	add	r3, r2
 8004cda:	3360      	adds	r3, #96	; 0x60
 8004cdc:	2202      	movs	r2, #2
 8004cde:	701a      	strb	r2, [r3, #0]
 8004ce0:	e08b      	b.n	8004dfa <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	212c      	movs	r1, #44	; 0x2c
 8004ce8:	fb01 f303 	mul.w	r3, r1, r3
 8004cec:	4413      	add	r3, r2
 8004cee:	3361      	adds	r3, #97	; 0x61
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d109      	bne.n	8004d0a <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	212c      	movs	r1, #44	; 0x2c
 8004cfc:	fb01 f303 	mul.w	r3, r1, r3
 8004d00:	4413      	add	r3, r2
 8004d02:	3360      	adds	r3, #96	; 0x60
 8004d04:	2202      	movs	r2, #2
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	e077      	b.n	8004dfa <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	212c      	movs	r1, #44	; 0x2c
 8004d10:	fb01 f303 	mul.w	r3, r1, r3
 8004d14:	4413      	add	r3, r2
 8004d16:	3361      	adds	r3, #97	; 0x61
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	2b05      	cmp	r3, #5
 8004d1c:	d109      	bne.n	8004d32 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	212c      	movs	r1, #44	; 0x2c
 8004d24:	fb01 f303 	mul.w	r3, r1, r3
 8004d28:	4413      	add	r3, r2
 8004d2a:	3360      	adds	r3, #96	; 0x60
 8004d2c:	2205      	movs	r2, #5
 8004d2e:	701a      	strb	r2, [r3, #0]
 8004d30:	e063      	b.n	8004dfa <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	212c      	movs	r1, #44	; 0x2c
 8004d38:	fb01 f303 	mul.w	r3, r1, r3
 8004d3c:	4413      	add	r3, r2
 8004d3e:	3361      	adds	r3, #97	; 0x61
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	2b06      	cmp	r3, #6
 8004d44:	d009      	beq.n	8004d5a <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	212c      	movs	r1, #44	; 0x2c
 8004d4c:	fb01 f303 	mul.w	r3, r1, r3
 8004d50:	4413      	add	r3, r2
 8004d52:	3361      	adds	r3, #97	; 0x61
 8004d54:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d56:	2b08      	cmp	r3, #8
 8004d58:	d14f      	bne.n	8004dfa <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	212c      	movs	r1, #44	; 0x2c
 8004d60:	fb01 f303 	mul.w	r3, r1, r3
 8004d64:	4413      	add	r3, r2
 8004d66:	335c      	adds	r3, #92	; 0x5c
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	202c      	movs	r0, #44	; 0x2c
 8004d72:	fb00 f303 	mul.w	r3, r0, r3
 8004d76:	440b      	add	r3, r1
 8004d78:	335c      	adds	r3, #92	; 0x5c
 8004d7a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	212c      	movs	r1, #44	; 0x2c
 8004d82:	fb01 f303 	mul.w	r3, r1, r3
 8004d86:	4413      	add	r3, r2
 8004d88:	335c      	adds	r3, #92	; 0x5c
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d912      	bls.n	8004db6 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	212c      	movs	r1, #44	; 0x2c
 8004d96:	fb01 f303 	mul.w	r3, r1, r3
 8004d9a:	4413      	add	r3, r2
 8004d9c:	335c      	adds	r3, #92	; 0x5c
 8004d9e:	2200      	movs	r2, #0
 8004da0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	212c      	movs	r1, #44	; 0x2c
 8004da8:	fb01 f303 	mul.w	r3, r1, r3
 8004dac:	4413      	add	r3, r2
 8004dae:	3360      	adds	r3, #96	; 0x60
 8004db0:	2204      	movs	r2, #4
 8004db2:	701a      	strb	r2, [r3, #0]
 8004db4:	e021      	b.n	8004dfa <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	212c      	movs	r1, #44	; 0x2c
 8004dbc:	fb01 f303 	mul.w	r3, r1, r3
 8004dc0:	4413      	add	r3, r2
 8004dc2:	3360      	adds	r3, #96	; 0x60
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004dde:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004de6:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df4:	461a      	mov	r2, r3
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e06:	461a      	mov	r2, r3
 8004e08:	2302      	movs	r3, #2
 8004e0a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	b2d9      	uxtb	r1, r3
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	202c      	movs	r0, #44	; 0x2c
 8004e16:	fb00 f303 	mul.w	r3, r0, r3
 8004e1a:	4413      	add	r3, r2
 8004e1c:	3360      	adds	r3, #96	; 0x60
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	461a      	mov	r2, r3
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f009 fde0 	bl	800e9e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004e28:	bf00      	nop
 8004e2a:	3720      	adds	r7, #32
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08a      	sub	sp, #40	; 0x28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	f003 030f 	and.w	r3, r3, #15
 8004e50:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	0c5b      	lsrs	r3, r3, #17
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	091b      	lsrs	r3, r3, #4
 8004e60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e64:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d004      	beq.n	8004e76 <HCD_RXQLVL_IRQHandler+0x46>
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	2b05      	cmp	r3, #5
 8004e70:	f000 80a9 	beq.w	8004fc6 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004e74:	e0aa      	b.n	8004fcc <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 80a6 	beq.w	8004fca <HCD_RXQLVL_IRQHandler+0x19a>
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	212c      	movs	r1, #44	; 0x2c
 8004e84:	fb01 f303 	mul.w	r3, r1, r3
 8004e88:	4413      	add	r3, r2
 8004e8a:	3344      	adds	r3, #68	; 0x44
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 809b 	beq.w	8004fca <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	212c      	movs	r1, #44	; 0x2c
 8004e9a:	fb01 f303 	mul.w	r3, r1, r3
 8004e9e:	4413      	add	r3, r2
 8004ea0:	3350      	adds	r3, #80	; 0x50
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	441a      	add	r2, r3
 8004ea8:	6879      	ldr	r1, [r7, #4]
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	202c      	movs	r0, #44	; 0x2c
 8004eae:	fb00 f303 	mul.w	r3, r0, r3
 8004eb2:	440b      	add	r3, r1
 8004eb4:	334c      	adds	r3, #76	; 0x4c
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d87a      	bhi.n	8004fb2 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6818      	ldr	r0, [r3, #0]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	212c      	movs	r1, #44	; 0x2c
 8004ec6:	fb01 f303 	mul.w	r3, r1, r3
 8004eca:	4413      	add	r3, r2
 8004ecc:	3344      	adds	r3, #68	; 0x44
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	b292      	uxth	r2, r2
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	f002 fe17 	bl	8007b08 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	212c      	movs	r1, #44	; 0x2c
 8004ee0:	fb01 f303 	mul.w	r3, r1, r3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3344      	adds	r3, #68	; 0x44
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	441a      	add	r2, r3
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	202c      	movs	r0, #44	; 0x2c
 8004ef4:	fb00 f303 	mul.w	r3, r0, r3
 8004ef8:	440b      	add	r3, r1
 8004efa:	3344      	adds	r3, #68	; 0x44
 8004efc:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	212c      	movs	r1, #44	; 0x2c
 8004f04:	fb01 f303 	mul.w	r3, r1, r3
 8004f08:	4413      	add	r3, r2
 8004f0a:	3350      	adds	r3, #80	; 0x50
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	441a      	add	r2, r3
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	202c      	movs	r0, #44	; 0x2c
 8004f18:	fb00 f303 	mul.w	r3, r0, r3
 8004f1c:	440b      	add	r3, r1
 8004f1e:	3350      	adds	r3, #80	; 0x50
 8004f20:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	0cdb      	lsrs	r3, r3, #19
 8004f32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f36:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	212c      	movs	r1, #44	; 0x2c
 8004f3e:	fb01 f303 	mul.w	r3, r1, r3
 8004f42:	4413      	add	r3, r2
 8004f44:	3340      	adds	r3, #64	; 0x40
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d13c      	bne.n	8004fca <HCD_RXQLVL_IRQHandler+0x19a>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d039      	beq.n	8004fca <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f6c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f74:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f82:	461a      	mov	r2, r3
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	212c      	movs	r1, #44	; 0x2c
 8004f8e:	fb01 f303 	mul.w	r3, r1, r3
 8004f92:	4413      	add	r3, r2
 8004f94:	3354      	adds	r3, #84	; 0x54
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	f083 0301 	eor.w	r3, r3, #1
 8004f9c:	b2d8      	uxtb	r0, r3
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	212c      	movs	r1, #44	; 0x2c
 8004fa4:	fb01 f303 	mul.w	r3, r1, r3
 8004fa8:	4413      	add	r3, r2
 8004faa:	3354      	adds	r3, #84	; 0x54
 8004fac:	4602      	mov	r2, r0
 8004fae:	701a      	strb	r2, [r3, #0]
      break;
 8004fb0:	e00b      	b.n	8004fca <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	212c      	movs	r1, #44	; 0x2c
 8004fb8:	fb01 f303 	mul.w	r3, r1, r3
 8004fbc:	4413      	add	r3, r2
 8004fbe:	3360      	adds	r3, #96	; 0x60
 8004fc0:	2204      	movs	r2, #4
 8004fc2:	701a      	strb	r2, [r3, #0]
      break;
 8004fc4:	e001      	b.n	8004fca <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004fc6:	bf00      	nop
 8004fc8:	e000      	b.n	8004fcc <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004fca:	bf00      	nop
  }
}
 8004fcc:	bf00      	nop
 8004fce:	3728      	adds	r7, #40	; 0x28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005000:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b02      	cmp	r3, #2
 800500a:	d10b      	bne.n	8005024 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b01      	cmp	r3, #1
 8005014:	d102      	bne.n	800501c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f009 fcca 	bl	800e9b0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f043 0302 	orr.w	r3, r3, #2
 8005022:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f003 0308 	and.w	r3, r3, #8
 800502a:	2b08      	cmp	r3, #8
 800502c:	d132      	bne.n	8005094 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f043 0308 	orr.w	r3, r3, #8
 8005034:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b04      	cmp	r3, #4
 800503e:	d126      	bne.n	800508e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d113      	bne.n	8005070 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800504e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005052:	d106      	bne.n	8005062 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2102      	movs	r1, #2
 800505a:	4618      	mov	r0, r3
 800505c:	f002 feb4 	bl	8007dc8 <USB_InitFSLSPClkSel>
 8005060:	e011      	b.n	8005086 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2101      	movs	r1, #1
 8005068:	4618      	mov	r0, r3
 800506a:	f002 fead 	bl	8007dc8 <USB_InitFSLSPClkSel>
 800506e:	e00a      	b.n	8005086 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d106      	bne.n	8005086 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800507e:	461a      	mov	r2, r3
 8005080:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005084:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f009 fcbc 	bl	800ea04 <HAL_HCD_PortEnabled_Callback>
 800508c:	e002      	b.n	8005094 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f009 fcc6 	bl	800ea20 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b20      	cmp	r3, #32
 800509c:	d103      	bne.n	80050a6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f043 0320 	orr.w	r3, r3, #32
 80050a4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050ac:	461a      	mov	r2, r3
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	6013      	str	r3, [r2, #0]
}
 80050b2:	bf00      	nop
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e12b      	b.n	8005326 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d106      	bne.n	80050e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7fb fed2 	bl	8000e8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2224      	movs	r2, #36	; 0x24
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0201 	bic.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800510e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800511e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005120:	f001 ff22 	bl	8006f68 <HAL_RCC_GetPCLK1Freq>
 8005124:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	4a81      	ldr	r2, [pc, #516]	; (8005330 <HAL_I2C_Init+0x274>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d807      	bhi.n	8005140 <HAL_I2C_Init+0x84>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4a80      	ldr	r2, [pc, #512]	; (8005334 <HAL_I2C_Init+0x278>)
 8005134:	4293      	cmp	r3, r2
 8005136:	bf94      	ite	ls
 8005138:	2301      	movls	r3, #1
 800513a:	2300      	movhi	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	e006      	b.n	800514e <HAL_I2C_Init+0x92>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4a7d      	ldr	r2, [pc, #500]	; (8005338 <HAL_I2C_Init+0x27c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	bf94      	ite	ls
 8005148:	2301      	movls	r3, #1
 800514a:	2300      	movhi	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e0e7      	b.n	8005326 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4a78      	ldr	r2, [pc, #480]	; (800533c <HAL_I2C_Init+0x280>)
 800515a:	fba2 2303 	umull	r2, r3, r2, r3
 800515e:	0c9b      	lsrs	r3, r3, #18
 8005160:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	430a      	orrs	r2, r1
 8005174:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	4a6a      	ldr	r2, [pc, #424]	; (8005330 <HAL_I2C_Init+0x274>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d802      	bhi.n	8005190 <HAL_I2C_Init+0xd4>
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	3301      	adds	r3, #1
 800518e:	e009      	b.n	80051a4 <HAL_I2C_Init+0xe8>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005196:	fb02 f303 	mul.w	r3, r2, r3
 800519a:	4a69      	ldr	r2, [pc, #420]	; (8005340 <HAL_I2C_Init+0x284>)
 800519c:	fba2 2303 	umull	r2, r3, r2, r3
 80051a0:	099b      	lsrs	r3, r3, #6
 80051a2:	3301      	adds	r3, #1
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6812      	ldr	r2, [r2, #0]
 80051a8:	430b      	orrs	r3, r1
 80051aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80051b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	495c      	ldr	r1, [pc, #368]	; (8005330 <HAL_I2C_Init+0x274>)
 80051c0:	428b      	cmp	r3, r1
 80051c2:	d819      	bhi.n	80051f8 <HAL_I2C_Init+0x13c>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	1e59      	subs	r1, r3, #1
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80051d2:	1c59      	adds	r1, r3, #1
 80051d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80051d8:	400b      	ands	r3, r1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <HAL_I2C_Init+0x138>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	1e59      	subs	r1, r3, #1
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80051ec:	3301      	adds	r3, #1
 80051ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f2:	e051      	b.n	8005298 <HAL_I2C_Init+0x1dc>
 80051f4:	2304      	movs	r3, #4
 80051f6:	e04f      	b.n	8005298 <HAL_I2C_Init+0x1dc>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d111      	bne.n	8005224 <HAL_I2C_Init+0x168>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	1e58      	subs	r0, r3, #1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6859      	ldr	r1, [r3, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	440b      	add	r3, r1
 800520e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005212:	3301      	adds	r3, #1
 8005214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005218:	2b00      	cmp	r3, #0
 800521a:	bf0c      	ite	eq
 800521c:	2301      	moveq	r3, #1
 800521e:	2300      	movne	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	e012      	b.n	800524a <HAL_I2C_Init+0x18e>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	1e58      	subs	r0, r3, #1
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6859      	ldr	r1, [r3, #4]
 800522c:	460b      	mov	r3, r1
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	0099      	lsls	r1, r3, #2
 8005234:	440b      	add	r3, r1
 8005236:	fbb0 f3f3 	udiv	r3, r0, r3
 800523a:	3301      	adds	r3, #1
 800523c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005240:	2b00      	cmp	r3, #0
 8005242:	bf0c      	ite	eq
 8005244:	2301      	moveq	r3, #1
 8005246:	2300      	movne	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <HAL_I2C_Init+0x196>
 800524e:	2301      	movs	r3, #1
 8005250:	e022      	b.n	8005298 <HAL_I2C_Init+0x1dc>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10e      	bne.n	8005278 <HAL_I2C_Init+0x1bc>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	1e58      	subs	r0, r3, #1
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6859      	ldr	r1, [r3, #4]
 8005262:	460b      	mov	r3, r1
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	440b      	add	r3, r1
 8005268:	fbb0 f3f3 	udiv	r3, r0, r3
 800526c:	3301      	adds	r3, #1
 800526e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005276:	e00f      	b.n	8005298 <HAL_I2C_Init+0x1dc>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	1e58      	subs	r0, r3, #1
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6859      	ldr	r1, [r3, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	0099      	lsls	r1, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	fbb0 f3f3 	udiv	r3, r0, r3
 800528e:	3301      	adds	r3, #1
 8005290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005294:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	6809      	ldr	r1, [r1, #0]
 800529c:	4313      	orrs	r3, r2
 800529e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69da      	ldr	r2, [r3, #28]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80052c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6911      	ldr	r1, [r2, #16]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	68d2      	ldr	r2, [r2, #12]
 80052d2:	4311      	orrs	r1, r2
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6812      	ldr	r2, [r2, #0]
 80052d8:	430b      	orrs	r3, r1
 80052da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695a      	ldr	r2, [r3, #20]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2220      	movs	r2, #32
 8005312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	000186a0 	.word	0x000186a0
 8005334:	001e847f 	.word	0x001e847f
 8005338:	003d08ff 	.word	0x003d08ff
 800533c:	431bde83 	.word	0x431bde83
 8005340:	10624dd3 	.word	0x10624dd3

08005344 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af02      	add	r7, sp, #8
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	607a      	str	r2, [r7, #4]
 800534e:	461a      	mov	r2, r3
 8005350:	460b      	mov	r3, r1
 8005352:	817b      	strh	r3, [r7, #10]
 8005354:	4613      	mov	r3, r2
 8005356:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005358:	f7fc f99a 	bl	8001690 <HAL_GetTick>
 800535c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b20      	cmp	r3, #32
 8005368:	f040 80e0 	bne.w	800552c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	2319      	movs	r3, #25
 8005372:	2201      	movs	r2, #1
 8005374:	4970      	ldr	r1, [pc, #448]	; (8005538 <HAL_I2C_Master_Transmit+0x1f4>)
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 f964 	bl	8005644 <I2C_WaitOnFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005382:	2302      	movs	r3, #2
 8005384:	e0d3      	b.n	800552e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_I2C_Master_Transmit+0x50>
 8005390:	2302      	movs	r3, #2
 8005392:	e0cc      	b.n	800552e <HAL_I2C_Master_Transmit+0x1ea>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d007      	beq.n	80053ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0201 	orr.w	r2, r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2221      	movs	r2, #33	; 0x21
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2210      	movs	r2, #16
 80053d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	893a      	ldrh	r2, [r7, #8]
 80053ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4a50      	ldr	r2, [pc, #320]	; (800553c <HAL_I2C_Master_Transmit+0x1f8>)
 80053fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80053fc:	8979      	ldrh	r1, [r7, #10]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	6a3a      	ldr	r2, [r7, #32]
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 f89c 	bl	8005540 <I2C_MasterRequestWrite>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e08d      	b.n	800552e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005412:	2300      	movs	r3, #0
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	613b      	str	r3, [r7, #16]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	613b      	str	r3, [r7, #16]
 8005426:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005428:	e066      	b.n	80054f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	6a39      	ldr	r1, [r7, #32]
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 f9de 	bl	80057f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00d      	beq.n	8005456 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	2b04      	cmp	r3, #4
 8005440:	d107      	bne.n	8005452 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005450:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e06b      	b.n	800552e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	781a      	ldrb	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005470:	b29b      	uxth	r3, r3
 8005472:	3b01      	subs	r3, #1
 8005474:	b29a      	uxth	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800547e:	3b01      	subs	r3, #1
 8005480:	b29a      	uxth	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b04      	cmp	r3, #4
 8005492:	d11b      	bne.n	80054cc <HAL_I2C_Master_Transmit+0x188>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005498:	2b00      	cmp	r3, #0
 800549a:	d017      	beq.n	80054cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	781a      	ldrb	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	6a39      	ldr	r1, [r7, #32]
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f9ce 	bl	8005872 <I2C_WaitOnBTFFlagUntilTimeout>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00d      	beq.n	80054f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d107      	bne.n	80054f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e01a      	b.n	800552e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d194      	bne.n	800542a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800550e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005528:	2300      	movs	r3, #0
 800552a:	e000      	b.n	800552e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800552c:	2302      	movs	r3, #2
  }
}
 800552e:	4618      	mov	r0, r3
 8005530:	3718      	adds	r7, #24
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	00100002 	.word	0x00100002
 800553c:	ffff0000 	.word	0xffff0000

08005540 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af02      	add	r7, sp, #8
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	607a      	str	r2, [r7, #4]
 800554a:	603b      	str	r3, [r7, #0]
 800554c:	460b      	mov	r3, r1
 800554e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005554:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2b08      	cmp	r3, #8
 800555a:	d006      	beq.n	800556a <I2C_MasterRequestWrite+0x2a>
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d003      	beq.n	800556a <I2C_MasterRequestWrite+0x2a>
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005568:	d108      	bne.n	800557c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	e00b      	b.n	8005594 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005580:	2b12      	cmp	r3, #18
 8005582:	d107      	bne.n	8005594 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005592:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 f84f 	bl	8005644 <I2C_WaitOnFlagUntilTimeout>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00d      	beq.n	80055c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ba:	d103      	bne.n	80055c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e035      	b.n	8005634 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055d0:	d108      	bne.n	80055e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055d2:	897b      	ldrh	r3, [r7, #10]
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	461a      	mov	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055e0:	611a      	str	r2, [r3, #16]
 80055e2:	e01b      	b.n	800561c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80055e4:	897b      	ldrh	r3, [r7, #10]
 80055e6:	11db      	asrs	r3, r3, #7
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	f003 0306 	and.w	r3, r3, #6
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	f063 030f 	orn	r3, r3, #15
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	490e      	ldr	r1, [pc, #56]	; (800563c <I2C_MasterRequestWrite+0xfc>)
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 f875 	bl	80056f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e010      	b.n	8005634 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005612:	897b      	ldrh	r3, [r7, #10]
 8005614:	b2da      	uxtb	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	4907      	ldr	r1, [pc, #28]	; (8005640 <I2C_MasterRequestWrite+0x100>)
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 f865 	bl	80056f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e000      	b.n	8005634 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3718      	adds	r7, #24
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	00010008 	.word	0x00010008
 8005640:	00010002 	.word	0x00010002

08005644 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	603b      	str	r3, [r7, #0]
 8005650:	4613      	mov	r3, r2
 8005652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005654:	e025      	b.n	80056a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565c:	d021      	beq.n	80056a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800565e:	f7fc f817 	bl	8001690 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	429a      	cmp	r2, r3
 800566c:	d302      	bcc.n	8005674 <I2C_WaitOnFlagUntilTimeout+0x30>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d116      	bne.n	80056a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2220      	movs	r2, #32
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	f043 0220 	orr.w	r2, r3, #32
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e023      	b.n	80056ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	0c1b      	lsrs	r3, r3, #16
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d10d      	bne.n	80056c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	43da      	mvns	r2, r3
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	4013      	ands	r3, r2
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	bf0c      	ite	eq
 80056be:	2301      	moveq	r3, #1
 80056c0:	2300      	movne	r3, #0
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	461a      	mov	r2, r3
 80056c6:	e00c      	b.n	80056e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	43da      	mvns	r2, r3
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	4013      	ands	r3, r2
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	bf0c      	ite	eq
 80056da:	2301      	moveq	r3, #1
 80056dc:	2300      	movne	r3, #0
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	461a      	mov	r2, r3
 80056e2:	79fb      	ldrb	r3, [r7, #7]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d0b6      	beq.n	8005656 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	607a      	str	r2, [r7, #4]
 80056fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005700:	e051      	b.n	80057a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800570c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005710:	d123      	bne.n	800575a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005720:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800572a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	f043 0204 	orr.w	r2, r3, #4
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e046      	b.n	80057e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005760:	d021      	beq.n	80057a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005762:	f7fb ff95 	bl	8001690 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	429a      	cmp	r2, r3
 8005770:	d302      	bcc.n	8005778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d116      	bne.n	80057a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2220      	movs	r2, #32
 8005782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	f043 0220 	orr.w	r2, r3, #32
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e020      	b.n	80057e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	0c1b      	lsrs	r3, r3, #16
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d10c      	bne.n	80057ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	43da      	mvns	r2, r3
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	4013      	ands	r3, r2
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	bf14      	ite	ne
 80057c2:	2301      	movne	r3, #1
 80057c4:	2300      	moveq	r3, #0
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	e00b      	b.n	80057e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	43da      	mvns	r2, r3
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	4013      	ands	r3, r2
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	bf14      	ite	ne
 80057dc:	2301      	movne	r3, #1
 80057de:	2300      	moveq	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d18d      	bne.n	8005702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057fc:	e02d      	b.n	800585a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 f878 	bl	80058f4 <I2C_IsAcknowledgeFailed>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e02d      	b.n	800586a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005814:	d021      	beq.n	800585a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005816:	f7fb ff3b 	bl	8001690 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	429a      	cmp	r2, r3
 8005824:	d302      	bcc.n	800582c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d116      	bne.n	800585a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2220      	movs	r2, #32
 8005836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	f043 0220 	orr.w	r2, r3, #32
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e007      	b.n	800586a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005864:	2b80      	cmp	r3, #128	; 0x80
 8005866:	d1ca      	bne.n	80057fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b084      	sub	sp, #16
 8005876:	af00      	add	r7, sp, #0
 8005878:	60f8      	str	r0, [r7, #12]
 800587a:	60b9      	str	r1, [r7, #8]
 800587c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800587e:	e02d      	b.n	80058dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f837 	bl	80058f4 <I2C_IsAcknowledgeFailed>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e02d      	b.n	80058ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005896:	d021      	beq.n	80058dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005898:	f7fb fefa 	bl	8001690 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d302      	bcc.n	80058ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d116      	bne.n	80058dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c8:	f043 0220 	orr.w	r2, r3, #32
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e007      	b.n	80058ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	f003 0304 	and.w	r3, r3, #4
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d1ca      	bne.n	8005880 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800590a:	d11b      	bne.n	8005944 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005914:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005930:	f043 0204 	orr.w	r2, r3, #4
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e000      	b.n	8005946 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
	...

08005954 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e128      	b.n	8005bb8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d109      	bne.n	8005986 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a90      	ldr	r2, [pc, #576]	; (8005bc0 <HAL_I2S_Init+0x26c>)
 800597e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f7fb fb01 	bl	8000f88 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2202      	movs	r2, #2
 800598a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	6812      	ldr	r2, [r2, #0]
 8005998:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800599c:	f023 030f 	bic.w	r3, r3, #15
 80059a0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2202      	movs	r2, #2
 80059a8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d060      	beq.n	8005a74 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d102      	bne.n	80059c0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80059ba:	2310      	movs	r3, #16
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	e001      	b.n	80059c4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80059c0:	2320      	movs	r3, #32
 80059c2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	2b20      	cmp	r3, #32
 80059ca:	d802      	bhi.n	80059d2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	005b      	lsls	r3, r3, #1
 80059d0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80059d2:	2001      	movs	r0, #1
 80059d4:	f001 fbd2 	bl	800717c <HAL_RCCEx_GetPeriphCLKFreq>
 80059d8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059e2:	d125      	bne.n	8005a30 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d010      	beq.n	8005a0e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	461a      	mov	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a08:	3305      	adds	r3, #5
 8005a0a:	613b      	str	r3, [r7, #16]
 8005a0c:	e01f      	b.n	8005a4e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	461a      	mov	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2a:	3305      	adds	r3, #5
 8005a2c:	613b      	str	r3, [r7, #16]
 8005a2e:	e00e      	b.n	8005a4e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a38:	4613      	mov	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	461a      	mov	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4a:	3305      	adds	r3, #5
 8005a4c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	4a5c      	ldr	r2, [pc, #368]	; (8005bc4 <HAL_I2S_Init+0x270>)
 8005a52:	fba2 2303 	umull	r2, r3, r2, r3
 8005a56:	08db      	lsrs	r3, r3, #3
 8005a58:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	085b      	lsrs	r3, r3, #1
 8005a6a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	021b      	lsls	r3, r3, #8
 8005a70:	61bb      	str	r3, [r7, #24]
 8005a72:	e003      	b.n	8005a7c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005a74:	2302      	movs	r3, #2
 8005a76:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d902      	bls.n	8005a88 <HAL_I2S_Init+0x134>
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	2bff      	cmp	r3, #255	; 0xff
 8005a86:	d907      	bls.n	8005a98 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8c:	f043 0210 	orr.w	r2, r3, #16
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e08f      	b.n	8005bb8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	ea42 0103 	orr.w	r1, r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	69fa      	ldr	r2, [r7, #28]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005ab6:	f023 030f 	bic.w	r3, r3, #15
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6851      	ldr	r1, [r2, #4]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6892      	ldr	r2, [r2, #8]
 8005ac2:	4311      	orrs	r1, r2
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	68d2      	ldr	r2, [r2, #12]
 8005ac8:	4311      	orrs	r1, r2
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6992      	ldr	r2, [r2, #24]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ada:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d161      	bne.n	8005ba8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a38      	ldr	r2, [pc, #224]	; (8005bc8 <HAL_I2S_Init+0x274>)
 8005ae8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a37      	ldr	r2, [pc, #220]	; (8005bcc <HAL_I2S_Init+0x278>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d101      	bne.n	8005af8 <HAL_I2S_Init+0x1a4>
 8005af4:	4b36      	ldr	r3, [pc, #216]	; (8005bd0 <HAL_I2S_Init+0x27c>)
 8005af6:	e001      	b.n	8005afc <HAL_I2S_Init+0x1a8>
 8005af8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	6812      	ldr	r2, [r2, #0]
 8005b02:	4932      	ldr	r1, [pc, #200]	; (8005bcc <HAL_I2S_Init+0x278>)
 8005b04:	428a      	cmp	r2, r1
 8005b06:	d101      	bne.n	8005b0c <HAL_I2S_Init+0x1b8>
 8005b08:	4a31      	ldr	r2, [pc, #196]	; (8005bd0 <HAL_I2S_Init+0x27c>)
 8005b0a:	e001      	b.n	8005b10 <HAL_I2S_Init+0x1bc>
 8005b0c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005b10:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005b14:	f023 030f 	bic.w	r3, r3, #15
 8005b18:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a2b      	ldr	r2, [pc, #172]	; (8005bcc <HAL_I2S_Init+0x278>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d101      	bne.n	8005b28 <HAL_I2S_Init+0x1d4>
 8005b24:	4b2a      	ldr	r3, [pc, #168]	; (8005bd0 <HAL_I2S_Init+0x27c>)
 8005b26:	e001      	b.n	8005b2c <HAL_I2S_Init+0x1d8>
 8005b28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a25      	ldr	r2, [pc, #148]	; (8005bcc <HAL_I2S_Init+0x278>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d101      	bne.n	8005b3e <HAL_I2S_Init+0x1ea>
 8005b3a:	4b25      	ldr	r3, [pc, #148]	; (8005bd0 <HAL_I2S_Init+0x27c>)
 8005b3c:	e001      	b.n	8005b42 <HAL_I2S_Init+0x1ee>
 8005b3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b4e:	d003      	beq.n	8005b58 <HAL_I2S_Init+0x204>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d103      	bne.n	8005b60 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005b58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b5c:	613b      	str	r3, [r7, #16]
 8005b5e:	e001      	b.n	8005b64 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005b60:	2300      	movs	r3, #0
 8005b62:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b82:	4313      	orrs	r3, r2
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	897b      	ldrh	r3, [r7, #10]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b90:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a0d      	ldr	r2, [pc, #52]	; (8005bcc <HAL_I2S_Init+0x278>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d101      	bne.n	8005ba0 <HAL_I2S_Init+0x24c>
 8005b9c:	4b0c      	ldr	r3, [pc, #48]	; (8005bd0 <HAL_I2S_Init+0x27c>)
 8005b9e:	e001      	b.n	8005ba4 <HAL_I2S_Init+0x250>
 8005ba0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ba4:	897a      	ldrh	r2, [r7, #10]
 8005ba6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3720      	adds	r7, #32
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	08006097 	.word	0x08006097
 8005bc4:	cccccccd 	.word	0xcccccccd
 8005bc8:	0800621d 	.word	0x0800621d
 8005bcc:	40003800 	.word	0x40003800
 8005bd0:	40003400 	.word	0x40003400

08005bd4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005be8:	d004      	beq.n	8005bf4 <HAL_I2S_DMAStop+0x20>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f040 80d1 	bne.w	8005d96 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00f      	beq.n	8005c1c <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7fb ff35 	bl	8001a70 <HAL_DMA_Abort>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d007      	beq.n	8005c1c <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c10:	f043 0208 	orr.w	r2, r3, #8
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005c1c:	2364      	movs	r3, #100	; 0x64
 8005c1e:	2201      	movs	r2, #1
 8005c20:	2102      	movs	r1, #2
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fac1 	bl	80061aa <I2S_WaitFlagStateUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00b      	beq.n	8005c46 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c32:	f043 0201 	orr.w	r2, r3, #1
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005c46:	2364      	movs	r3, #100	; 0x64
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2180      	movs	r1, #128	; 0x80
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 faac 	bl	80061aa <I2S_WaitFlagStateUntilTimeout>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00b      	beq.n	8005c70 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5c:	f043 0201 	orr.w	r2, r3, #1
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	69da      	ldr	r2, [r3, #28]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c7e:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005c80:	2300      	movs	r3, #0
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	617b      	str	r3, [r7, #20]
 8005c8c:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0202 	bic.w	r2, r2, #2
 8005c9c:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b05      	cmp	r3, #5
 8005ca8:	f040 8165 	bne.w	8005f76 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00f      	beq.n	8005cd4 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fb fed9 	bl	8001a70 <HAL_DMA_Abort>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d007      	beq.n	8005cd4 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc8:	f043 0208 	orr.w	r2, r3, #8
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a8a      	ldr	r2, [pc, #552]	; (8005f04 <HAL_I2S_DMAStop+0x330>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d101      	bne.n	8005ce2 <HAL_I2S_DMAStop+0x10e>
 8005cde:	4b8a      	ldr	r3, [pc, #552]	; (8005f08 <HAL_I2S_DMAStop+0x334>)
 8005ce0:	e001      	b.n	8005ce6 <HAL_I2S_DMAStop+0x112>
 8005ce2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ce6:	69da      	ldr	r2, [r3, #28]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4985      	ldr	r1, [pc, #532]	; (8005f04 <HAL_I2S_DMAStop+0x330>)
 8005cee:	428b      	cmp	r3, r1
 8005cf0:	d101      	bne.n	8005cf6 <HAL_I2S_DMAStop+0x122>
 8005cf2:	4b85      	ldr	r3, [pc, #532]	; (8005f08 <HAL_I2S_DMAStop+0x334>)
 8005cf4:	e001      	b.n	8005cfa <HAL_I2S_DMAStop+0x126>
 8005cf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cfe:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8005d00:	2300      	movs	r3, #0
 8005d02:	613b      	str	r3, [r7, #16]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a7e      	ldr	r2, [pc, #504]	; (8005f04 <HAL_I2S_DMAStop+0x330>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d101      	bne.n	8005d12 <HAL_I2S_DMAStop+0x13e>
 8005d0e:	4b7e      	ldr	r3, [pc, #504]	; (8005f08 <HAL_I2S_DMAStop+0x334>)
 8005d10:	e001      	b.n	8005d16 <HAL_I2S_DMAStop+0x142>
 8005d12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	613b      	str	r3, [r7, #16]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a79      	ldr	r2, [pc, #484]	; (8005f04 <HAL_I2S_DMAStop+0x330>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d101      	bne.n	8005d28 <HAL_I2S_DMAStop+0x154>
 8005d24:	4b78      	ldr	r3, [pc, #480]	; (8005f08 <HAL_I2S_DMAStop+0x334>)
 8005d26:	e001      	b.n	8005d2c <HAL_I2S_DMAStop+0x158>
 8005d28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	613b      	str	r3, [r7, #16]
 8005d30:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a73      	ldr	r2, [pc, #460]	; (8005f04 <HAL_I2S_DMAStop+0x330>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d101      	bne.n	8005d40 <HAL_I2S_DMAStop+0x16c>
 8005d3c:	4b72      	ldr	r3, [pc, #456]	; (8005f08 <HAL_I2S_DMAStop+0x334>)
 8005d3e:	e001      	b.n	8005d44 <HAL_I2S_DMAStop+0x170>
 8005d40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	496e      	ldr	r1, [pc, #440]	; (8005f04 <HAL_I2S_DMAStop+0x330>)
 8005d4c:	428b      	cmp	r3, r1
 8005d4e:	d101      	bne.n	8005d54 <HAL_I2S_DMAStop+0x180>
 8005d50:	4b6d      	ldr	r3, [pc, #436]	; (8005f08 <HAL_I2S_DMAStop+0x334>)
 8005d52:	e001      	b.n	8005d58 <HAL_I2S_DMAStop+0x184>
 8005d54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d58:	f022 0201 	bic.w	r2, r2, #1
 8005d5c:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10c      	bne.n	8005d80 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005d7e:	e0fa      	b.n	8005f76 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a5f      	ldr	r2, [pc, #380]	; (8005f04 <HAL_I2S_DMAStop+0x330>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d101      	bne.n	8005d8e <HAL_I2S_DMAStop+0x1ba>
 8005d8a:	4b5f      	ldr	r3, [pc, #380]	; (8005f08 <HAL_I2S_DMAStop+0x334>)
 8005d8c:	e001      	b.n	8005d92 <HAL_I2S_DMAStop+0x1be>
 8005d8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d92:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005d94:	e0ef      	b.n	8005f76 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d9e:	d005      	beq.n	8005dac <HAL_I2S_DMAStop+0x1d8>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005da8:	f040 80e5 	bne.w	8005f76 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00f      	beq.n	8005dd4 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7fb fe59 	bl	8001a70 <HAL_DMA_Abort>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d007      	beq.n	8005dd4 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc8:	f043 0208 	orr.w	r2, r3, #8
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b05      	cmp	r3, #5
 8005dde:	f040 809a 	bne.w	8005f16 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00f      	beq.n	8005e0a <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fb fe3e 	bl	8001a70 <HAL_DMA_Abort>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d007      	beq.n	8005e0a <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfe:	f043 0208 	orr.w	r2, r3, #8
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8005e0a:	f7fb fc41 	bl	8001690 <HAL_GetTick>
 8005e0e:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005e10:	e012      	b.n	8005e38 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005e12:	f7fb fc3d 	bl	8001690 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b64      	cmp	r3, #100	; 0x64
 8005e1e:	d90b      	bls.n	8005e38 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e24:	f043 0201 	orr.w	r2, r3, #1
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a31      	ldr	r2, [pc, #196]	; (8005f04 <HAL_I2S_DMAStop+0x330>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d101      	bne.n	8005e46 <HAL_I2S_DMAStop+0x272>
 8005e42:	4b31      	ldr	r3, [pc, #196]	; (8005f08 <HAL_I2S_DMAStop+0x334>)
 8005e44:	e001      	b.n	8005e4a <HAL_I2S_DMAStop+0x276>
 8005e46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d1de      	bne.n	8005e12 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005e54:	e012      	b.n	8005e7c <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005e56:	f7fb fc1b 	bl	8001690 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	2b64      	cmp	r3, #100	; 0x64
 8005e62:	d90b      	bls.n	8005e7c <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e68:	f043 0201 	orr.w	r2, r3, #1
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a20      	ldr	r2, [pc, #128]	; (8005f04 <HAL_I2S_DMAStop+0x330>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d101      	bne.n	8005e8a <HAL_I2S_DMAStop+0x2b6>
 8005e86:	4b20      	ldr	r3, [pc, #128]	; (8005f08 <HAL_I2S_DMAStop+0x334>)
 8005e88:	e001      	b.n	8005e8e <HAL_I2S_DMAStop+0x2ba>
 8005e8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e94:	2b80      	cmp	r3, #128	; 0x80
 8005e96:	d0de      	beq.n	8005e56 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a19      	ldr	r2, [pc, #100]	; (8005f04 <HAL_I2S_DMAStop+0x330>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d101      	bne.n	8005ea6 <HAL_I2S_DMAStop+0x2d2>
 8005ea2:	4b19      	ldr	r3, [pc, #100]	; (8005f08 <HAL_I2S_DMAStop+0x334>)
 8005ea4:	e001      	b.n	8005eaa <HAL_I2S_DMAStop+0x2d6>
 8005ea6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005eaa:	69da      	ldr	r2, [r3, #28]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4914      	ldr	r1, [pc, #80]	; (8005f04 <HAL_I2S_DMAStop+0x330>)
 8005eb2:	428b      	cmp	r3, r1
 8005eb4:	d101      	bne.n	8005eba <HAL_I2S_DMAStop+0x2e6>
 8005eb6:	4b14      	ldr	r3, [pc, #80]	; (8005f08 <HAL_I2S_DMAStop+0x334>)
 8005eb8:	e001      	b.n	8005ebe <HAL_I2S_DMAStop+0x2ea>
 8005eba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec2:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a0d      	ldr	r2, [pc, #52]	; (8005f04 <HAL_I2S_DMAStop+0x330>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d101      	bne.n	8005ed6 <HAL_I2S_DMAStop+0x302>
 8005ed2:	4b0d      	ldr	r3, [pc, #52]	; (8005f08 <HAL_I2S_DMAStop+0x334>)
 8005ed4:	e001      	b.n	8005eda <HAL_I2S_DMAStop+0x306>
 8005ed6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a07      	ldr	r2, [pc, #28]	; (8005f04 <HAL_I2S_DMAStop+0x330>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d101      	bne.n	8005eee <HAL_I2S_DMAStop+0x31a>
 8005eea:	4b07      	ldr	r3, [pc, #28]	; (8005f08 <HAL_I2S_DMAStop+0x334>)
 8005eec:	e001      	b.n	8005ef2 <HAL_I2S_DMAStop+0x31e>
 8005eee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4902      	ldr	r1, [pc, #8]	; (8005f04 <HAL_I2S_DMAStop+0x330>)
 8005efa:	428b      	cmp	r3, r1
 8005efc:	d106      	bne.n	8005f0c <HAL_I2S_DMAStop+0x338>
 8005efe:	4b02      	ldr	r3, [pc, #8]	; (8005f08 <HAL_I2S_DMAStop+0x334>)
 8005f00:	e006      	b.n	8005f10 <HAL_I2S_DMAStop+0x33c>
 8005f02:	bf00      	nop
 8005f04:	40003800 	.word	0x40003800
 8005f08:	40003400 	.word	0x40003400
 8005f0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f10:	f022 0202 	bic.w	r2, r2, #2
 8005f14:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	69da      	ldr	r2, [r3, #28]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f24:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005f26:	2300      	movs	r3, #0
 8005f28:	60bb      	str	r3, [r7, #8]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	60bb      	str	r3, [r7, #8]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	60bb      	str	r3, [r7, #8]
 8005f3a:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 0201 	bic.w	r2, r2, #1
 8005f4a:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f54:	d10c      	bne.n	8005f70 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	77fb      	strb	r3, [r7, #31]
 8005f6e:	e002      	b.n	8005f76 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8005f7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3720      	adds	r7, #32
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	4798      	blx	r3
}
 8005f98:	bf00      	nop
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	881a      	ldrh	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	1c9a      	adds	r2, r3, #2
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	3b01      	subs	r3, #1
 8006002:	b29a      	uxth	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600c:	b29b      	uxth	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10e      	bne.n	8006030 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006020:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7ff ffb8 	bl	8005fa0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006030:	bf00      	nop
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604a:	b292      	uxth	r2, r2
 800604c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006052:	1c9a      	adds	r2, r3, #2
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800605c:	b29b      	uxth	r3, r3
 800605e:	3b01      	subs	r3, #1
 8006060:	b29a      	uxth	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800606a:	b29b      	uxth	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10e      	bne.n	800608e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800607e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7ff ff93 	bl	8005fb4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800608e:	bf00      	nop
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b086      	sub	sp, #24
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b04      	cmp	r3, #4
 80060b0:	d13a      	bne.n	8006128 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d109      	bne.n	80060d0 <I2S_IRQHandler+0x3a>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c6:	2b40      	cmp	r3, #64	; 0x40
 80060c8:	d102      	bne.n	80060d0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7ff ffb4 	bl	8006038 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d6:	2b40      	cmp	r3, #64	; 0x40
 80060d8:	d126      	bne.n	8006128 <I2S_IRQHandler+0x92>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f003 0320 	and.w	r3, r3, #32
 80060e4:	2b20      	cmp	r3, #32
 80060e6:	d11f      	bne.n	8006128 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80060f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80060f8:	2300      	movs	r3, #0
 80060fa:	613b      	str	r3, [r7, #16]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	613b      	str	r3, [r7, #16]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611a:	f043 0202 	orr.w	r2, r3, #2
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff ff50 	bl	8005fc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b03      	cmp	r3, #3
 8006132:	d136      	bne.n	80061a2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b02      	cmp	r3, #2
 800613c:	d109      	bne.n	8006152 <I2S_IRQHandler+0xbc>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006148:	2b80      	cmp	r3, #128	; 0x80
 800614a:	d102      	bne.n	8006152 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7ff ff45 	bl	8005fdc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f003 0308 	and.w	r3, r3, #8
 8006158:	2b08      	cmp	r3, #8
 800615a:	d122      	bne.n	80061a2 <I2S_IRQHandler+0x10c>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b20      	cmp	r3, #32
 8006168:	d11b      	bne.n	80061a2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006178:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800617a:	2300      	movs	r3, #0
 800617c:	60fb      	str	r3, [r7, #12]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006194:	f043 0204 	orr.w	r2, r3, #4
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7ff ff13 	bl	8005fc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061a2:	bf00      	nop
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b086      	sub	sp, #24
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	603b      	str	r3, [r7, #0]
 80061b6:	4613      	mov	r3, r2
 80061b8:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80061ba:	f7fb fa69 	bl	8001690 <HAL_GetTick>
 80061be:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80061c0:	e018      	b.n	80061f4 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c8:	d014      	beq.n	80061f4 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80061ca:	f7fb fa61 	bl	8001690 <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d902      	bls.n	80061e0 <I2S_WaitFlagStateUntilTimeout+0x36>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d109      	bne.n	80061f4 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e00f      	b.n	8006214 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689a      	ldr	r2, [r3, #8]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	4013      	ands	r3, r2
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	429a      	cmp	r2, r3
 8006202:	bf0c      	ite	eq
 8006204:	2301      	moveq	r3, #1
 8006206:	2300      	movne	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	461a      	mov	r2, r3
 800620c:	79fb      	ldrb	r3, [r7, #7]
 800620e:	429a      	cmp	r2, r3
 8006210:	d1d7      	bne.n	80061c2 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b088      	sub	sp, #32
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4aa2      	ldr	r2, [pc, #648]	; (80064bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d101      	bne.n	800623a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006236:	4ba2      	ldr	r3, [pc, #648]	; (80064c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006238:	e001      	b.n	800623e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800623a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a9b      	ldr	r2, [pc, #620]	; (80064bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d101      	bne.n	8006258 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006254:	4b9a      	ldr	r3, [pc, #616]	; (80064c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006256:	e001      	b.n	800625c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006258:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006268:	d004      	beq.n	8006274 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	f040 8099 	bne.w	80063a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b02      	cmp	r3, #2
 800627c:	d107      	bne.n	800628e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f925 	bl	80064d8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b01      	cmp	r3, #1
 8006296:	d107      	bne.n	80062a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f9c8 	bl	8006638 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ae:	2b40      	cmp	r3, #64	; 0x40
 80062b0:	d13a      	bne.n	8006328 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f003 0320 	and.w	r3, r3, #32
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d035      	beq.n	8006328 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a7e      	ldr	r2, [pc, #504]	; (80064bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d101      	bne.n	80062ca <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80062c6:	4b7e      	ldr	r3, [pc, #504]	; (80064c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80062c8:	e001      	b.n	80062ce <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80062ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4979      	ldr	r1, [pc, #484]	; (80064bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80062d6:	428b      	cmp	r3, r1
 80062d8:	d101      	bne.n	80062de <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80062da:	4b79      	ldr	r3, [pc, #484]	; (80064c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80062dc:	e001      	b.n	80062e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80062de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80062e6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80062f8:	2300      	movs	r3, #0
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	60fb      	str	r3, [r7, #12]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	60fb      	str	r3, [r7, #12]
 800630c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631a:	f043 0202 	orr.w	r2, r3, #2
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7ff fe50 	bl	8005fc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	f003 0308 	and.w	r3, r3, #8
 800632e:	2b08      	cmp	r3, #8
 8006330:	f040 80be 	bne.w	80064b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f003 0320 	and.w	r3, r3, #32
 800633a:	2b00      	cmp	r3, #0
 800633c:	f000 80b8 	beq.w	80064b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800634e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a59      	ldr	r2, [pc, #356]	; (80064bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d101      	bne.n	800635e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800635a:	4b59      	ldr	r3, [pc, #356]	; (80064c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800635c:	e001      	b.n	8006362 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800635e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4954      	ldr	r1, [pc, #336]	; (80064bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800636a:	428b      	cmp	r3, r1
 800636c:	d101      	bne.n	8006372 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800636e:	4b54      	ldr	r3, [pc, #336]	; (80064c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006370:	e001      	b.n	8006376 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006372:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006376:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800637a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800637c:	2300      	movs	r3, #0
 800637e:	60bb      	str	r3, [r7, #8]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	60bb      	str	r3, [r7, #8]
 8006388:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006396:	f043 0204 	orr.w	r2, r3, #4
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7ff fe12 	bl	8005fc8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80063a4:	e084      	b.n	80064b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d107      	bne.n	80063c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d002      	beq.n	80063c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f8be 	bl	800653c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d107      	bne.n	80063da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f8fd 	bl	80065d4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e0:	2b40      	cmp	r3, #64	; 0x40
 80063e2:	d12f      	bne.n	8006444 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d02a      	beq.n	8006444 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063fc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a2e      	ldr	r2, [pc, #184]	; (80064bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d101      	bne.n	800640c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006408:	4b2d      	ldr	r3, [pc, #180]	; (80064c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800640a:	e001      	b.n	8006410 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800640c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4929      	ldr	r1, [pc, #164]	; (80064bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006418:	428b      	cmp	r3, r1
 800641a:	d101      	bne.n	8006420 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800641c:	4b28      	ldr	r3, [pc, #160]	; (80064c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800641e:	e001      	b.n	8006424 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006420:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006424:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006428:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006436:	f043 0202 	orr.w	r2, r3, #2
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7ff fdc2 	bl	8005fc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	f003 0308 	and.w	r3, r3, #8
 800644a:	2b08      	cmp	r3, #8
 800644c:	d131      	bne.n	80064b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f003 0320 	and.w	r3, r3, #32
 8006454:	2b00      	cmp	r3, #0
 8006456:	d02c      	beq.n	80064b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a17      	ldr	r2, [pc, #92]	; (80064bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d101      	bne.n	8006466 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006462:	4b17      	ldr	r3, [pc, #92]	; (80064c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006464:	e001      	b.n	800646a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006466:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4912      	ldr	r1, [pc, #72]	; (80064bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006472:	428b      	cmp	r3, r1
 8006474:	d101      	bne.n	800647a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006476:	4b12      	ldr	r3, [pc, #72]	; (80064c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006478:	e001      	b.n	800647e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800647a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800647e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006482:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006492:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a0:	f043 0204 	orr.w	r2, r3, #4
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff fd8d 	bl	8005fc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064ae:	e000      	b.n	80064b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064b0:	bf00      	nop
}
 80064b2:	bf00      	nop
 80064b4:	3720      	adds	r7, #32
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	40003800 	.word	0x40003800
 80064c0:	40003400 	.word	0x40003400

080064c4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	1c99      	adds	r1, r3, #2
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	6251      	str	r1, [r2, #36]	; 0x24
 80064ea:	881a      	ldrh	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	3b01      	subs	r3, #1
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006504:	b29b      	uxth	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d113      	bne.n	8006532 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006518:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800651e:	b29b      	uxth	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d106      	bne.n	8006532 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7ff ffc9 	bl	80064c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006532:	bf00      	nop
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	1c99      	adds	r1, r3, #2
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	6251      	str	r1, [r2, #36]	; 0x24
 800654e:	8819      	ldrh	r1, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a1d      	ldr	r2, [pc, #116]	; (80065cc <I2SEx_TxISR_I2SExt+0x90>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d101      	bne.n	800655e <I2SEx_TxISR_I2SExt+0x22>
 800655a:	4b1d      	ldr	r3, [pc, #116]	; (80065d0 <I2SEx_TxISR_I2SExt+0x94>)
 800655c:	e001      	b.n	8006562 <I2SEx_TxISR_I2SExt+0x26>
 800655e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006562:	460a      	mov	r2, r1
 8006564:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800656a:	b29b      	uxth	r3, r3
 800656c:	3b01      	subs	r3, #1
 800656e:	b29a      	uxth	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006578:	b29b      	uxth	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d121      	bne.n	80065c2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a12      	ldr	r2, [pc, #72]	; (80065cc <I2SEx_TxISR_I2SExt+0x90>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d101      	bne.n	800658c <I2SEx_TxISR_I2SExt+0x50>
 8006588:	4b11      	ldr	r3, [pc, #68]	; (80065d0 <I2SEx_TxISR_I2SExt+0x94>)
 800658a:	e001      	b.n	8006590 <I2SEx_TxISR_I2SExt+0x54>
 800658c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	490d      	ldr	r1, [pc, #52]	; (80065cc <I2SEx_TxISR_I2SExt+0x90>)
 8006598:	428b      	cmp	r3, r1
 800659a:	d101      	bne.n	80065a0 <I2SEx_TxISR_I2SExt+0x64>
 800659c:	4b0c      	ldr	r3, [pc, #48]	; (80065d0 <I2SEx_TxISR_I2SExt+0x94>)
 800659e:	e001      	b.n	80065a4 <I2SEx_TxISR_I2SExt+0x68>
 80065a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d106      	bne.n	80065c2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7ff ff81 	bl	80064c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065c2:	bf00      	nop
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	40003800 	.word	0x40003800
 80065d0:	40003400 	.word	0x40003400

080065d4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68d8      	ldr	r0, [r3, #12]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e6:	1c99      	adds	r1, r3, #2
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	62d1      	str	r1, [r2, #44]	; 0x2c
 80065ec:	b282      	uxth	r2, r0
 80065ee:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006602:	b29b      	uxth	r3, r3
 8006604:	2b00      	cmp	r3, #0
 8006606:	d113      	bne.n	8006630 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006616:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661c:	b29b      	uxth	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d106      	bne.n	8006630 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7ff ff4a 	bl	80064c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006630:	bf00      	nop
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a20      	ldr	r2, [pc, #128]	; (80066c8 <I2SEx_RxISR_I2SExt+0x90>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d101      	bne.n	800664e <I2SEx_RxISR_I2SExt+0x16>
 800664a:	4b20      	ldr	r3, [pc, #128]	; (80066cc <I2SEx_RxISR_I2SExt+0x94>)
 800664c:	e001      	b.n	8006652 <I2SEx_RxISR_I2SExt+0x1a>
 800664e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006652:	68d8      	ldr	r0, [r3, #12]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006658:	1c99      	adds	r1, r3, #2
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800665e:	b282      	uxth	r2, r0
 8006660:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006666:	b29b      	uxth	r3, r3
 8006668:	3b01      	subs	r3, #1
 800666a:	b29a      	uxth	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006674:	b29b      	uxth	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d121      	bne.n	80066be <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a12      	ldr	r2, [pc, #72]	; (80066c8 <I2SEx_RxISR_I2SExt+0x90>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d101      	bne.n	8006688 <I2SEx_RxISR_I2SExt+0x50>
 8006684:	4b11      	ldr	r3, [pc, #68]	; (80066cc <I2SEx_RxISR_I2SExt+0x94>)
 8006686:	e001      	b.n	800668c <I2SEx_RxISR_I2SExt+0x54>
 8006688:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	490d      	ldr	r1, [pc, #52]	; (80066c8 <I2SEx_RxISR_I2SExt+0x90>)
 8006694:	428b      	cmp	r3, r1
 8006696:	d101      	bne.n	800669c <I2SEx_RxISR_I2SExt+0x64>
 8006698:	4b0c      	ldr	r3, [pc, #48]	; (80066cc <I2SEx_RxISR_I2SExt+0x94>)
 800669a:	e001      	b.n	80066a0 <I2SEx_RxISR_I2SExt+0x68>
 800669c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066a4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d106      	bne.n	80066be <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7ff ff03 	bl	80064c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80066be:	bf00      	nop
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	40003800 	.word	0x40003800
 80066cc:	40003400 	.word	0x40003400

080066d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e264      	b.n	8006bac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d075      	beq.n	80067da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066ee:	4ba3      	ldr	r3, [pc, #652]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 030c 	and.w	r3, r3, #12
 80066f6:	2b04      	cmp	r3, #4
 80066f8:	d00c      	beq.n	8006714 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066fa:	4ba0      	ldr	r3, [pc, #640]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006702:	2b08      	cmp	r3, #8
 8006704:	d112      	bne.n	800672c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006706:	4b9d      	ldr	r3, [pc, #628]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800670e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006712:	d10b      	bne.n	800672c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006714:	4b99      	ldr	r3, [pc, #612]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d05b      	beq.n	80067d8 <HAL_RCC_OscConfig+0x108>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d157      	bne.n	80067d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e23f      	b.n	8006bac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006734:	d106      	bne.n	8006744 <HAL_RCC_OscConfig+0x74>
 8006736:	4b91      	ldr	r3, [pc, #580]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a90      	ldr	r2, [pc, #576]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 800673c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006740:	6013      	str	r3, [r2, #0]
 8006742:	e01d      	b.n	8006780 <HAL_RCC_OscConfig+0xb0>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800674c:	d10c      	bne.n	8006768 <HAL_RCC_OscConfig+0x98>
 800674e:	4b8b      	ldr	r3, [pc, #556]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a8a      	ldr	r2, [pc, #552]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 8006754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006758:	6013      	str	r3, [r2, #0]
 800675a:	4b88      	ldr	r3, [pc, #544]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a87      	ldr	r2, [pc, #540]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 8006760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006764:	6013      	str	r3, [r2, #0]
 8006766:	e00b      	b.n	8006780 <HAL_RCC_OscConfig+0xb0>
 8006768:	4b84      	ldr	r3, [pc, #528]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a83      	ldr	r2, [pc, #524]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 800676e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006772:	6013      	str	r3, [r2, #0]
 8006774:	4b81      	ldr	r3, [pc, #516]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a80      	ldr	r2, [pc, #512]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 800677a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800677e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d013      	beq.n	80067b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006788:	f7fa ff82 	bl	8001690 <HAL_GetTick>
 800678c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800678e:	e008      	b.n	80067a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006790:	f7fa ff7e 	bl	8001690 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2b64      	cmp	r3, #100	; 0x64
 800679c:	d901      	bls.n	80067a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e204      	b.n	8006bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067a2:	4b76      	ldr	r3, [pc, #472]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d0f0      	beq.n	8006790 <HAL_RCC_OscConfig+0xc0>
 80067ae:	e014      	b.n	80067da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b0:	f7fa ff6e 	bl	8001690 <HAL_GetTick>
 80067b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067b6:	e008      	b.n	80067ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067b8:	f7fa ff6a 	bl	8001690 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	2b64      	cmp	r3, #100	; 0x64
 80067c4:	d901      	bls.n	80067ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e1f0      	b.n	8006bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067ca:	4b6c      	ldr	r3, [pc, #432]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1f0      	bne.n	80067b8 <HAL_RCC_OscConfig+0xe8>
 80067d6:	e000      	b.n	80067da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d063      	beq.n	80068ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067e6:	4b65      	ldr	r3, [pc, #404]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f003 030c 	and.w	r3, r3, #12
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00b      	beq.n	800680a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067f2:	4b62      	ldr	r3, [pc, #392]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067fa:	2b08      	cmp	r3, #8
 80067fc:	d11c      	bne.n	8006838 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067fe:	4b5f      	ldr	r3, [pc, #380]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d116      	bne.n	8006838 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800680a:	4b5c      	ldr	r3, [pc, #368]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d005      	beq.n	8006822 <HAL_RCC_OscConfig+0x152>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d001      	beq.n	8006822 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e1c4      	b.n	8006bac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006822:	4b56      	ldr	r3, [pc, #344]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	00db      	lsls	r3, r3, #3
 8006830:	4952      	ldr	r1, [pc, #328]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 8006832:	4313      	orrs	r3, r2
 8006834:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006836:	e03a      	b.n	80068ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d020      	beq.n	8006882 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006840:	4b4f      	ldr	r3, [pc, #316]	; (8006980 <HAL_RCC_OscConfig+0x2b0>)
 8006842:	2201      	movs	r2, #1
 8006844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006846:	f7fa ff23 	bl	8001690 <HAL_GetTick>
 800684a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800684c:	e008      	b.n	8006860 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800684e:	f7fa ff1f 	bl	8001690 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	2b02      	cmp	r3, #2
 800685a:	d901      	bls.n	8006860 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e1a5      	b.n	8006bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006860:	4b46      	ldr	r3, [pc, #280]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d0f0      	beq.n	800684e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800686c:	4b43      	ldr	r3, [pc, #268]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	00db      	lsls	r3, r3, #3
 800687a:	4940      	ldr	r1, [pc, #256]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 800687c:	4313      	orrs	r3, r2
 800687e:	600b      	str	r3, [r1, #0]
 8006880:	e015      	b.n	80068ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006882:	4b3f      	ldr	r3, [pc, #252]	; (8006980 <HAL_RCC_OscConfig+0x2b0>)
 8006884:	2200      	movs	r2, #0
 8006886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006888:	f7fa ff02 	bl	8001690 <HAL_GetTick>
 800688c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006890:	f7fa fefe 	bl	8001690 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e184      	b.n	8006bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068a2:	4b36      	ldr	r3, [pc, #216]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1f0      	bne.n	8006890 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0308 	and.w	r3, r3, #8
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d030      	beq.n	800691c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d016      	beq.n	80068f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068c2:	4b30      	ldr	r3, [pc, #192]	; (8006984 <HAL_RCC_OscConfig+0x2b4>)
 80068c4:	2201      	movs	r2, #1
 80068c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c8:	f7fa fee2 	bl	8001690 <HAL_GetTick>
 80068cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068ce:	e008      	b.n	80068e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068d0:	f7fa fede 	bl	8001690 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e164      	b.n	8006bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068e2:	4b26      	ldr	r3, [pc, #152]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 80068e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d0f0      	beq.n	80068d0 <HAL_RCC_OscConfig+0x200>
 80068ee:	e015      	b.n	800691c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068f0:	4b24      	ldr	r3, [pc, #144]	; (8006984 <HAL_RCC_OscConfig+0x2b4>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068f6:	f7fa fecb 	bl	8001690 <HAL_GetTick>
 80068fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068fc:	e008      	b.n	8006910 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068fe:	f7fa fec7 	bl	8001690 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	2b02      	cmp	r3, #2
 800690a:	d901      	bls.n	8006910 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e14d      	b.n	8006bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006910:	4b1a      	ldr	r3, [pc, #104]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 8006912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1f0      	bne.n	80068fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0304 	and.w	r3, r3, #4
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 80a0 	beq.w	8006a6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800692a:	2300      	movs	r3, #0
 800692c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800692e:	4b13      	ldr	r3, [pc, #76]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10f      	bne.n	800695a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800693a:	2300      	movs	r3, #0
 800693c:	60bb      	str	r3, [r7, #8]
 800693e:	4b0f      	ldr	r3, [pc, #60]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 8006940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006942:	4a0e      	ldr	r2, [pc, #56]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 8006944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006948:	6413      	str	r3, [r2, #64]	; 0x40
 800694a:	4b0c      	ldr	r3, [pc, #48]	; (800697c <HAL_RCC_OscConfig+0x2ac>)
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006952:	60bb      	str	r3, [r7, #8]
 8006954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006956:	2301      	movs	r3, #1
 8006958:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800695a:	4b0b      	ldr	r3, [pc, #44]	; (8006988 <HAL_RCC_OscConfig+0x2b8>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006962:	2b00      	cmp	r3, #0
 8006964:	d121      	bne.n	80069aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006966:	4b08      	ldr	r3, [pc, #32]	; (8006988 <HAL_RCC_OscConfig+0x2b8>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a07      	ldr	r2, [pc, #28]	; (8006988 <HAL_RCC_OscConfig+0x2b8>)
 800696c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006972:	f7fa fe8d 	bl	8001690 <HAL_GetTick>
 8006976:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006978:	e011      	b.n	800699e <HAL_RCC_OscConfig+0x2ce>
 800697a:	bf00      	nop
 800697c:	40023800 	.word	0x40023800
 8006980:	42470000 	.word	0x42470000
 8006984:	42470e80 	.word	0x42470e80
 8006988:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800698c:	f7fa fe80 	bl	8001690 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	2b02      	cmp	r3, #2
 8006998:	d901      	bls.n	800699e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e106      	b.n	8006bac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800699e:	4b85      	ldr	r3, [pc, #532]	; (8006bb4 <HAL_RCC_OscConfig+0x4e4>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d0f0      	beq.n	800698c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d106      	bne.n	80069c0 <HAL_RCC_OscConfig+0x2f0>
 80069b2:	4b81      	ldr	r3, [pc, #516]	; (8006bb8 <HAL_RCC_OscConfig+0x4e8>)
 80069b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b6:	4a80      	ldr	r2, [pc, #512]	; (8006bb8 <HAL_RCC_OscConfig+0x4e8>)
 80069b8:	f043 0301 	orr.w	r3, r3, #1
 80069bc:	6713      	str	r3, [r2, #112]	; 0x70
 80069be:	e01c      	b.n	80069fa <HAL_RCC_OscConfig+0x32a>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	2b05      	cmp	r3, #5
 80069c6:	d10c      	bne.n	80069e2 <HAL_RCC_OscConfig+0x312>
 80069c8:	4b7b      	ldr	r3, [pc, #492]	; (8006bb8 <HAL_RCC_OscConfig+0x4e8>)
 80069ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069cc:	4a7a      	ldr	r2, [pc, #488]	; (8006bb8 <HAL_RCC_OscConfig+0x4e8>)
 80069ce:	f043 0304 	orr.w	r3, r3, #4
 80069d2:	6713      	str	r3, [r2, #112]	; 0x70
 80069d4:	4b78      	ldr	r3, [pc, #480]	; (8006bb8 <HAL_RCC_OscConfig+0x4e8>)
 80069d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d8:	4a77      	ldr	r2, [pc, #476]	; (8006bb8 <HAL_RCC_OscConfig+0x4e8>)
 80069da:	f043 0301 	orr.w	r3, r3, #1
 80069de:	6713      	str	r3, [r2, #112]	; 0x70
 80069e0:	e00b      	b.n	80069fa <HAL_RCC_OscConfig+0x32a>
 80069e2:	4b75      	ldr	r3, [pc, #468]	; (8006bb8 <HAL_RCC_OscConfig+0x4e8>)
 80069e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e6:	4a74      	ldr	r2, [pc, #464]	; (8006bb8 <HAL_RCC_OscConfig+0x4e8>)
 80069e8:	f023 0301 	bic.w	r3, r3, #1
 80069ec:	6713      	str	r3, [r2, #112]	; 0x70
 80069ee:	4b72      	ldr	r3, [pc, #456]	; (8006bb8 <HAL_RCC_OscConfig+0x4e8>)
 80069f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f2:	4a71      	ldr	r2, [pc, #452]	; (8006bb8 <HAL_RCC_OscConfig+0x4e8>)
 80069f4:	f023 0304 	bic.w	r3, r3, #4
 80069f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d015      	beq.n	8006a2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a02:	f7fa fe45 	bl	8001690 <HAL_GetTick>
 8006a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a08:	e00a      	b.n	8006a20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a0a:	f7fa fe41 	bl	8001690 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d901      	bls.n	8006a20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e0c5      	b.n	8006bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a20:	4b65      	ldr	r3, [pc, #404]	; (8006bb8 <HAL_RCC_OscConfig+0x4e8>)
 8006a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d0ee      	beq.n	8006a0a <HAL_RCC_OscConfig+0x33a>
 8006a2c:	e014      	b.n	8006a58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a2e:	f7fa fe2f 	bl	8001690 <HAL_GetTick>
 8006a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a34:	e00a      	b.n	8006a4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a36:	f7fa fe2b 	bl	8001690 <HAL_GetTick>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d901      	bls.n	8006a4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e0af      	b.n	8006bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a4c:	4b5a      	ldr	r3, [pc, #360]	; (8006bb8 <HAL_RCC_OscConfig+0x4e8>)
 8006a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1ee      	bne.n	8006a36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a58:	7dfb      	ldrb	r3, [r7, #23]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d105      	bne.n	8006a6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a5e:	4b56      	ldr	r3, [pc, #344]	; (8006bb8 <HAL_RCC_OscConfig+0x4e8>)
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	4a55      	ldr	r2, [pc, #340]	; (8006bb8 <HAL_RCC_OscConfig+0x4e8>)
 8006a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 809b 	beq.w	8006baa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a74:	4b50      	ldr	r3, [pc, #320]	; (8006bb8 <HAL_RCC_OscConfig+0x4e8>)
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f003 030c 	and.w	r3, r3, #12
 8006a7c:	2b08      	cmp	r3, #8
 8006a7e:	d05c      	beq.n	8006b3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d141      	bne.n	8006b0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a88:	4b4c      	ldr	r3, [pc, #304]	; (8006bbc <HAL_RCC_OscConfig+0x4ec>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a8e:	f7fa fdff 	bl	8001690 <HAL_GetTick>
 8006a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a94:	e008      	b.n	8006aa8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a96:	f7fa fdfb 	bl	8001690 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d901      	bls.n	8006aa8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e081      	b.n	8006bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aa8:	4b43      	ldr	r3, [pc, #268]	; (8006bb8 <HAL_RCC_OscConfig+0x4e8>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1f0      	bne.n	8006a96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	69da      	ldr	r2, [r3, #28]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	019b      	lsls	r3, r3, #6
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aca:	085b      	lsrs	r3, r3, #1
 8006acc:	3b01      	subs	r3, #1
 8006ace:	041b      	lsls	r3, r3, #16
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad6:	061b      	lsls	r3, r3, #24
 8006ad8:	4937      	ldr	r1, [pc, #220]	; (8006bb8 <HAL_RCC_OscConfig+0x4e8>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ade:	4b37      	ldr	r3, [pc, #220]	; (8006bbc <HAL_RCC_OscConfig+0x4ec>)
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ae4:	f7fa fdd4 	bl	8001690 <HAL_GetTick>
 8006ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aea:	e008      	b.n	8006afe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aec:	f7fa fdd0 	bl	8001690 <HAL_GetTick>
 8006af0:	4602      	mov	r2, r0
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d901      	bls.n	8006afe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e056      	b.n	8006bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006afe:	4b2e      	ldr	r3, [pc, #184]	; (8006bb8 <HAL_RCC_OscConfig+0x4e8>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d0f0      	beq.n	8006aec <HAL_RCC_OscConfig+0x41c>
 8006b0a:	e04e      	b.n	8006baa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b0c:	4b2b      	ldr	r3, [pc, #172]	; (8006bbc <HAL_RCC_OscConfig+0x4ec>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b12:	f7fa fdbd 	bl	8001690 <HAL_GetTick>
 8006b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b18:	e008      	b.n	8006b2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b1a:	f7fa fdb9 	bl	8001690 <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d901      	bls.n	8006b2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e03f      	b.n	8006bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b2c:	4b22      	ldr	r3, [pc, #136]	; (8006bb8 <HAL_RCC_OscConfig+0x4e8>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1f0      	bne.n	8006b1a <HAL_RCC_OscConfig+0x44a>
 8006b38:	e037      	b.n	8006baa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d101      	bne.n	8006b46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e032      	b.n	8006bac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b46:	4b1c      	ldr	r3, [pc, #112]	; (8006bb8 <HAL_RCC_OscConfig+0x4e8>)
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d028      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d121      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d11a      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b76:	4013      	ands	r3, r2
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b7c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d111      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8c:	085b      	lsrs	r3, r3, #1
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d107      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d001      	beq.n	8006baa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e000      	b.n	8006bac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3718      	adds	r7, #24
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	40007000 	.word	0x40007000
 8006bb8:	40023800 	.word	0x40023800
 8006bbc:	42470060 	.word	0x42470060

08006bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e0cc      	b.n	8006d6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bd4:	4b68      	ldr	r3, [pc, #416]	; (8006d78 <HAL_RCC_ClockConfig+0x1b8>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0307 	and.w	r3, r3, #7
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d90c      	bls.n	8006bfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006be2:	4b65      	ldr	r3, [pc, #404]	; (8006d78 <HAL_RCC_ClockConfig+0x1b8>)
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bea:	4b63      	ldr	r3, [pc, #396]	; (8006d78 <HAL_RCC_ClockConfig+0x1b8>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0307 	and.w	r3, r3, #7
 8006bf2:	683a      	ldr	r2, [r7, #0]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d001      	beq.n	8006bfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e0b8      	b.n	8006d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d020      	beq.n	8006c4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0304 	and.w	r3, r3, #4
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d005      	beq.n	8006c20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c14:	4b59      	ldr	r3, [pc, #356]	; (8006d7c <HAL_RCC_ClockConfig+0x1bc>)
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	4a58      	ldr	r2, [pc, #352]	; (8006d7c <HAL_RCC_ClockConfig+0x1bc>)
 8006c1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0308 	and.w	r3, r3, #8
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d005      	beq.n	8006c38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c2c:	4b53      	ldr	r3, [pc, #332]	; (8006d7c <HAL_RCC_ClockConfig+0x1bc>)
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	4a52      	ldr	r2, [pc, #328]	; (8006d7c <HAL_RCC_ClockConfig+0x1bc>)
 8006c32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c38:	4b50      	ldr	r3, [pc, #320]	; (8006d7c <HAL_RCC_ClockConfig+0x1bc>)
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	494d      	ldr	r1, [pc, #308]	; (8006d7c <HAL_RCC_ClockConfig+0x1bc>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d044      	beq.n	8006ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d107      	bne.n	8006c6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c5e:	4b47      	ldr	r3, [pc, #284]	; (8006d7c <HAL_RCC_ClockConfig+0x1bc>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d119      	bne.n	8006c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e07f      	b.n	8006d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d003      	beq.n	8006c7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c7a:	2b03      	cmp	r3, #3
 8006c7c:	d107      	bne.n	8006c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c7e:	4b3f      	ldr	r3, [pc, #252]	; (8006d7c <HAL_RCC_ClockConfig+0x1bc>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d109      	bne.n	8006c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e06f      	b.n	8006d6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c8e:	4b3b      	ldr	r3, [pc, #236]	; (8006d7c <HAL_RCC_ClockConfig+0x1bc>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e067      	b.n	8006d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c9e:	4b37      	ldr	r3, [pc, #220]	; (8006d7c <HAL_RCC_ClockConfig+0x1bc>)
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f023 0203 	bic.w	r2, r3, #3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	4934      	ldr	r1, [pc, #208]	; (8006d7c <HAL_RCC_ClockConfig+0x1bc>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006cb0:	f7fa fcee 	bl	8001690 <HAL_GetTick>
 8006cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cb6:	e00a      	b.n	8006cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cb8:	f7fa fcea 	bl	8001690 <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e04f      	b.n	8006d6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cce:	4b2b      	ldr	r3, [pc, #172]	; (8006d7c <HAL_RCC_ClockConfig+0x1bc>)
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f003 020c 	and.w	r2, r3, #12
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d1eb      	bne.n	8006cb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ce0:	4b25      	ldr	r3, [pc, #148]	; (8006d78 <HAL_RCC_ClockConfig+0x1b8>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0307 	and.w	r3, r3, #7
 8006ce8:	683a      	ldr	r2, [r7, #0]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d20c      	bcs.n	8006d08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cee:	4b22      	ldr	r3, [pc, #136]	; (8006d78 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	b2d2      	uxtb	r2, r2
 8006cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cf6:	4b20      	ldr	r3, [pc, #128]	; (8006d78 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0307 	and.w	r3, r3, #7
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d001      	beq.n	8006d08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e032      	b.n	8006d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0304 	and.w	r3, r3, #4
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d008      	beq.n	8006d26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d14:	4b19      	ldr	r3, [pc, #100]	; (8006d7c <HAL_RCC_ClockConfig+0x1bc>)
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	4916      	ldr	r1, [pc, #88]	; (8006d7c <HAL_RCC_ClockConfig+0x1bc>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0308 	and.w	r3, r3, #8
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d009      	beq.n	8006d46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d32:	4b12      	ldr	r3, [pc, #72]	; (8006d7c <HAL_RCC_ClockConfig+0x1bc>)
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	00db      	lsls	r3, r3, #3
 8006d40:	490e      	ldr	r1, [pc, #56]	; (8006d7c <HAL_RCC_ClockConfig+0x1bc>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d46:	f000 f821 	bl	8006d8c <HAL_RCC_GetSysClockFreq>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	4b0b      	ldr	r3, [pc, #44]	; (8006d7c <HAL_RCC_ClockConfig+0x1bc>)
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	091b      	lsrs	r3, r3, #4
 8006d52:	f003 030f 	and.w	r3, r3, #15
 8006d56:	490a      	ldr	r1, [pc, #40]	; (8006d80 <HAL_RCC_ClockConfig+0x1c0>)
 8006d58:	5ccb      	ldrb	r3, [r1, r3]
 8006d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d5e:	4a09      	ldr	r2, [pc, #36]	; (8006d84 <HAL_RCC_ClockConfig+0x1c4>)
 8006d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d62:	4b09      	ldr	r3, [pc, #36]	; (8006d88 <HAL_RCC_ClockConfig+0x1c8>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fa fc4e 	bl	8001608 <HAL_InitTick>

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	40023c00 	.word	0x40023c00
 8006d7c:	40023800 	.word	0x40023800
 8006d80:	08086ec4 	.word	0x08086ec4
 8006d84:	20000018 	.word	0x20000018
 8006d88:	2000001c 	.word	0x2000001c

08006d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006d90:	b084      	sub	sp, #16
 8006d92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d94:	2300      	movs	r3, #0
 8006d96:	607b      	str	r3, [r7, #4]
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006da4:	4b67      	ldr	r3, [pc, #412]	; (8006f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f003 030c 	and.w	r3, r3, #12
 8006dac:	2b08      	cmp	r3, #8
 8006dae:	d00d      	beq.n	8006dcc <HAL_RCC_GetSysClockFreq+0x40>
 8006db0:	2b08      	cmp	r3, #8
 8006db2:	f200 80bd 	bhi.w	8006f30 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d002      	beq.n	8006dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8006dba:	2b04      	cmp	r3, #4
 8006dbc:	d003      	beq.n	8006dc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006dbe:	e0b7      	b.n	8006f30 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006dc0:	4b61      	ldr	r3, [pc, #388]	; (8006f48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006dc2:	60bb      	str	r3, [r7, #8]
       break;
 8006dc4:	e0b7      	b.n	8006f36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dc6:	4b61      	ldr	r3, [pc, #388]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006dc8:	60bb      	str	r3, [r7, #8]
      break;
 8006dca:	e0b4      	b.n	8006f36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006dcc:	4b5d      	ldr	r3, [pc, #372]	; (8006f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dd4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006dd6:	4b5b      	ldr	r3, [pc, #364]	; (8006f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d04d      	beq.n	8006e7e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006de2:	4b58      	ldr	r3, [pc, #352]	; (8006f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	099b      	lsrs	r3, r3, #6
 8006de8:	461a      	mov	r2, r3
 8006dea:	f04f 0300 	mov.w	r3, #0
 8006dee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006df2:	f04f 0100 	mov.w	r1, #0
 8006df6:	ea02 0800 	and.w	r8, r2, r0
 8006dfa:	ea03 0901 	and.w	r9, r3, r1
 8006dfe:	4640      	mov	r0, r8
 8006e00:	4649      	mov	r1, r9
 8006e02:	f04f 0200 	mov.w	r2, #0
 8006e06:	f04f 0300 	mov.w	r3, #0
 8006e0a:	014b      	lsls	r3, r1, #5
 8006e0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006e10:	0142      	lsls	r2, r0, #5
 8006e12:	4610      	mov	r0, r2
 8006e14:	4619      	mov	r1, r3
 8006e16:	ebb0 0008 	subs.w	r0, r0, r8
 8006e1a:	eb61 0109 	sbc.w	r1, r1, r9
 8006e1e:	f04f 0200 	mov.w	r2, #0
 8006e22:	f04f 0300 	mov.w	r3, #0
 8006e26:	018b      	lsls	r3, r1, #6
 8006e28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006e2c:	0182      	lsls	r2, r0, #6
 8006e2e:	1a12      	subs	r2, r2, r0
 8006e30:	eb63 0301 	sbc.w	r3, r3, r1
 8006e34:	f04f 0000 	mov.w	r0, #0
 8006e38:	f04f 0100 	mov.w	r1, #0
 8006e3c:	00d9      	lsls	r1, r3, #3
 8006e3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e42:	00d0      	lsls	r0, r2, #3
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	eb12 0208 	adds.w	r2, r2, r8
 8006e4c:	eb43 0309 	adc.w	r3, r3, r9
 8006e50:	f04f 0000 	mov.w	r0, #0
 8006e54:	f04f 0100 	mov.w	r1, #0
 8006e58:	0259      	lsls	r1, r3, #9
 8006e5a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006e5e:	0250      	lsls	r0, r2, #9
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	4610      	mov	r0, r2
 8006e66:	4619      	mov	r1, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	f04f 0300 	mov.w	r3, #0
 8006e70:	f7f9 f9fe 	bl	8000270 <__aeabi_uldivmod>
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	4613      	mov	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]
 8006e7c:	e04a      	b.n	8006f14 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e7e:	4b31      	ldr	r3, [pc, #196]	; (8006f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	099b      	lsrs	r3, r3, #6
 8006e84:	461a      	mov	r2, r3
 8006e86:	f04f 0300 	mov.w	r3, #0
 8006e8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006e8e:	f04f 0100 	mov.w	r1, #0
 8006e92:	ea02 0400 	and.w	r4, r2, r0
 8006e96:	ea03 0501 	and.w	r5, r3, r1
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	4629      	mov	r1, r5
 8006e9e:	f04f 0200 	mov.w	r2, #0
 8006ea2:	f04f 0300 	mov.w	r3, #0
 8006ea6:	014b      	lsls	r3, r1, #5
 8006ea8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006eac:	0142      	lsls	r2, r0, #5
 8006eae:	4610      	mov	r0, r2
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	1b00      	subs	r0, r0, r4
 8006eb4:	eb61 0105 	sbc.w	r1, r1, r5
 8006eb8:	f04f 0200 	mov.w	r2, #0
 8006ebc:	f04f 0300 	mov.w	r3, #0
 8006ec0:	018b      	lsls	r3, r1, #6
 8006ec2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006ec6:	0182      	lsls	r2, r0, #6
 8006ec8:	1a12      	subs	r2, r2, r0
 8006eca:	eb63 0301 	sbc.w	r3, r3, r1
 8006ece:	f04f 0000 	mov.w	r0, #0
 8006ed2:	f04f 0100 	mov.w	r1, #0
 8006ed6:	00d9      	lsls	r1, r3, #3
 8006ed8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006edc:	00d0      	lsls	r0, r2, #3
 8006ede:	4602      	mov	r2, r0
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	1912      	adds	r2, r2, r4
 8006ee4:	eb45 0303 	adc.w	r3, r5, r3
 8006ee8:	f04f 0000 	mov.w	r0, #0
 8006eec:	f04f 0100 	mov.w	r1, #0
 8006ef0:	0299      	lsls	r1, r3, #10
 8006ef2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006ef6:	0290      	lsls	r0, r2, #10
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4610      	mov	r0, r2
 8006efe:	4619      	mov	r1, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	461a      	mov	r2, r3
 8006f04:	f04f 0300 	mov.w	r3, #0
 8006f08:	f7f9 f9b2 	bl	8000270 <__aeabi_uldivmod>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4613      	mov	r3, r2
 8006f12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f14:	4b0b      	ldr	r3, [pc, #44]	; (8006f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	0c1b      	lsrs	r3, r3, #16
 8006f1a:	f003 0303 	and.w	r3, r3, #3
 8006f1e:	3301      	adds	r3, #1
 8006f20:	005b      	lsls	r3, r3, #1
 8006f22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f2c:	60bb      	str	r3, [r7, #8]
      break;
 8006f2e:	e002      	b.n	8006f36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f30:	4b05      	ldr	r3, [pc, #20]	; (8006f48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006f32:	60bb      	str	r3, [r7, #8]
      break;
 8006f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f36:	68bb      	ldr	r3, [r7, #8]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006f42:	bf00      	nop
 8006f44:	40023800 	.word	0x40023800
 8006f48:	00f42400 	.word	0x00f42400
 8006f4c:	007a1200 	.word	0x007a1200

08006f50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f54:	4b03      	ldr	r3, [pc, #12]	; (8006f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f56:	681b      	ldr	r3, [r3, #0]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	20000018 	.word	0x20000018

08006f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f6c:	f7ff fff0 	bl	8006f50 <HAL_RCC_GetHCLKFreq>
 8006f70:	4602      	mov	r2, r0
 8006f72:	4b05      	ldr	r3, [pc, #20]	; (8006f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	0a9b      	lsrs	r3, r3, #10
 8006f78:	f003 0307 	and.w	r3, r3, #7
 8006f7c:	4903      	ldr	r1, [pc, #12]	; (8006f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f7e:	5ccb      	ldrb	r3, [r1, r3]
 8006f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	40023800 	.word	0x40023800
 8006f8c:	08086ed4 	.word	0x08086ed4

08006f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f94:	f7ff ffdc 	bl	8006f50 <HAL_RCC_GetHCLKFreq>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	0b5b      	lsrs	r3, r3, #13
 8006fa0:	f003 0307 	and.w	r3, r3, #7
 8006fa4:	4903      	ldr	r1, [pc, #12]	; (8006fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fa6:	5ccb      	ldrb	r3, [r1, r3]
 8006fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	40023800 	.word	0x40023800
 8006fb4:	08086ed4 	.word	0x08086ed4

08006fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d105      	bne.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d035      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006fe0:	4b62      	ldr	r3, [pc, #392]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fe6:	f7fa fb53 	bl	8001690 <HAL_GetTick>
 8006fea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fec:	e008      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006fee:	f7fa fb4f 	bl	8001690 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d901      	bls.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e0b0      	b.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007000:	4b5b      	ldr	r3, [pc, #364]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1f0      	bne.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	019a      	lsls	r2, r3, #6
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	071b      	lsls	r3, r3, #28
 8007018:	4955      	ldr	r1, [pc, #340]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800701a:	4313      	orrs	r3, r2
 800701c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007020:	4b52      	ldr	r3, [pc, #328]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007022:	2201      	movs	r2, #1
 8007024:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007026:	f7fa fb33 	bl	8001690 <HAL_GetTick>
 800702a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800702c:	e008      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800702e:	f7fa fb2f 	bl	8001690 <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	2b02      	cmp	r3, #2
 800703a:	d901      	bls.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e090      	b.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007040:	4b4b      	ldr	r3, [pc, #300]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d0f0      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 8083 	beq.w	8007160 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]
 800705e:	4b44      	ldr	r3, [pc, #272]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	4a43      	ldr	r2, [pc, #268]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007068:	6413      	str	r3, [r2, #64]	; 0x40
 800706a:	4b41      	ldr	r3, [pc, #260]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800706c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007072:	60fb      	str	r3, [r7, #12]
 8007074:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007076:	4b3f      	ldr	r3, [pc, #252]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a3e      	ldr	r2, [pc, #248]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800707c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007080:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007082:	f7fa fb05 	bl	8001690 <HAL_GetTick>
 8007086:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007088:	e008      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800708a:	f7fa fb01 	bl	8001690 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	2b02      	cmp	r3, #2
 8007096:	d901      	bls.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e062      	b.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800709c:	4b35      	ldr	r3, [pc, #212]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d0f0      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80070a8:	4b31      	ldr	r3, [pc, #196]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070b0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d02f      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d028      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070c6:	4b2a      	ldr	r3, [pc, #168]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80070d0:	4b29      	ldr	r3, [pc, #164]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80070d2:	2201      	movs	r2, #1
 80070d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80070d6:	4b28      	ldr	r3, [pc, #160]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80070dc:	4a24      	ldr	r2, [pc, #144]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80070e2:	4b23      	ldr	r3, [pc, #140]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d114      	bne.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80070ee:	f7fa facf 	bl	8001690 <HAL_GetTick>
 80070f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070f4:	e00a      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070f6:	f7fa facb 	bl	8001690 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	f241 3288 	movw	r2, #5000	; 0x1388
 8007104:	4293      	cmp	r3, r2
 8007106:	d901      	bls.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e02a      	b.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800710c:	4b18      	ldr	r3, [pc, #96]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800710e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	2b00      	cmp	r3, #0
 8007116:	d0ee      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007120:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007124:	d10d      	bne.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007126:	4b12      	ldr	r3, [pc, #72]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800713a:	490d      	ldr	r1, [pc, #52]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800713c:	4313      	orrs	r3, r2
 800713e:	608b      	str	r3, [r1, #8]
 8007140:	e005      	b.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007142:	4b0b      	ldr	r3, [pc, #44]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	4a0a      	ldr	r2, [pc, #40]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007148:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800714c:	6093      	str	r3, [r2, #8]
 800714e:	4b08      	ldr	r3, [pc, #32]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007150:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800715a:	4905      	ldr	r1, [pc, #20]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800715c:	4313      	orrs	r3, r2
 800715e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	42470068 	.word	0x42470068
 8007170:	40023800 	.word	0x40023800
 8007174:	40007000 	.word	0x40007000
 8007178:	42470e40 	.word	0x42470e40

0800717c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007184:	2300      	movs	r3, #0
 8007186:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007188:	2300      	movs	r3, #0
 800718a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d13e      	bne.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800719a:	4b23      	ldr	r3, [pc, #140]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d005      	beq.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d12f      	bne.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80071b0:	4b1e      	ldr	r3, [pc, #120]	; (800722c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80071b2:	617b      	str	r3, [r7, #20]
          break;
 80071b4:	e02f      	b.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80071b6:	4b1c      	ldr	r3, [pc, #112]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071c2:	d108      	bne.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80071c4:	4b18      	ldr	r3, [pc, #96]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071cc:	4a18      	ldr	r2, [pc, #96]	; (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80071ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d2:	613b      	str	r3, [r7, #16]
 80071d4:	e007      	b.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80071d6:	4b14      	ldr	r3, [pc, #80]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071de:	4a15      	ldr	r2, [pc, #84]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80071e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80071e6:	4b10      	ldr	r3, [pc, #64]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071ec:	099b      	lsrs	r3, r3, #6
 80071ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	fb02 f303 	mul.w	r3, r2, r3
 80071f8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80071fa:	4b0b      	ldr	r3, [pc, #44]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007200:	0f1b      	lsrs	r3, r3, #28
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	fbb2 f3f3 	udiv	r3, r2, r3
 800720c:	617b      	str	r3, [r7, #20]
          break;
 800720e:	e002      	b.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	617b      	str	r3, [r7, #20]
          break;
 8007214:	bf00      	nop
        }
      }
      break;
 8007216:	bf00      	nop
    }
  }
  return frequency;
 8007218:	697b      	ldr	r3, [r7, #20]
}
 800721a:	4618      	mov	r0, r3
 800721c:	371c      	adds	r7, #28
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	40023800 	.word	0x40023800
 800722c:	00bb8000 	.word	0x00bb8000
 8007230:	007a1200 	.word	0x007a1200
 8007234:	00f42400 	.word	0x00f42400

08007238 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e03f      	b.n	80072ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d106      	bne.n	8007264 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7fa f816 	bl	8001290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2224      	movs	r2, #36	; 0x24
 8007268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68da      	ldr	r2, [r3, #12]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800727a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f929 	bl	80074d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	691a      	ldr	r2, [r3, #16]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007290:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	695a      	ldr	r2, [r3, #20]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2220      	movs	r2, #32
 80072c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b08a      	sub	sp, #40	; 0x28
 80072d6:	af02      	add	r7, sp, #8
 80072d8:	60f8      	str	r0, [r7, #12]
 80072da:	60b9      	str	r1, [r7, #8]
 80072dc:	603b      	str	r3, [r7, #0]
 80072de:	4613      	mov	r3, r2
 80072e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b20      	cmp	r3, #32
 80072f0:	d17c      	bne.n	80073ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d002      	beq.n	80072fe <HAL_UART_Transmit+0x2c>
 80072f8:	88fb      	ldrh	r3, [r7, #6]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e075      	b.n	80073ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007308:	2b01      	cmp	r3, #1
 800730a:	d101      	bne.n	8007310 <HAL_UART_Transmit+0x3e>
 800730c:	2302      	movs	r3, #2
 800730e:	e06e      	b.n	80073ee <HAL_UART_Transmit+0x11c>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2221      	movs	r2, #33	; 0x21
 8007322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007326:	f7fa f9b3 	bl	8001690 <HAL_GetTick>
 800732a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	88fa      	ldrh	r2, [r7, #6]
 8007330:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	88fa      	ldrh	r2, [r7, #6]
 8007336:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007340:	d108      	bne.n	8007354 <HAL_UART_Transmit+0x82>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d104      	bne.n	8007354 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800734a:	2300      	movs	r3, #0
 800734c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	61bb      	str	r3, [r7, #24]
 8007352:	e003      	b.n	800735c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007358:	2300      	movs	r3, #0
 800735a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007364:	e02a      	b.n	80073bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2200      	movs	r2, #0
 800736e:	2180      	movs	r1, #128	; 0x80
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 f840 	bl	80073f6 <UART_WaitOnFlagUntilTimeout>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e036      	b.n	80073ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10b      	bne.n	800739e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007394:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	3302      	adds	r3, #2
 800739a:	61bb      	str	r3, [r7, #24]
 800739c:	e007      	b.n	80073ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	781a      	ldrb	r2, [r3, #0]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	3301      	adds	r3, #1
 80073ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	3b01      	subs	r3, #1
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1cf      	bne.n	8007366 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	2200      	movs	r2, #0
 80073ce:	2140      	movs	r1, #64	; 0x40
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 f810 	bl	80073f6 <UART_WaitOnFlagUntilTimeout>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e006      	b.n	80073ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2220      	movs	r2, #32
 80073e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	e000      	b.n	80073ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80073ec:	2302      	movs	r3, #2
  }
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3720      	adds	r7, #32
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b090      	sub	sp, #64	; 0x40
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	60f8      	str	r0, [r7, #12]
 80073fe:	60b9      	str	r1, [r7, #8]
 8007400:	603b      	str	r3, [r7, #0]
 8007402:	4613      	mov	r3, r2
 8007404:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007406:	e050      	b.n	80074aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800740a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740e:	d04c      	beq.n	80074aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007412:	2b00      	cmp	r3, #0
 8007414:	d007      	beq.n	8007426 <UART_WaitOnFlagUntilTimeout+0x30>
 8007416:	f7fa f93b 	bl	8001690 <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007422:	429a      	cmp	r2, r3
 8007424:	d241      	bcs.n	80074aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	330c      	adds	r3, #12
 800742c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007430:	e853 3f00 	ldrex	r3, [r3]
 8007434:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800743c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	330c      	adds	r3, #12
 8007444:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007446:	637a      	str	r2, [r7, #52]	; 0x34
 8007448:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800744c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800744e:	e841 2300 	strex	r3, r2, [r1]
 8007452:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1e5      	bne.n	8007426 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3314      	adds	r3, #20
 8007460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	e853 3f00 	ldrex	r3, [r3]
 8007468:	613b      	str	r3, [r7, #16]
   return(result);
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	f023 0301 	bic.w	r3, r3, #1
 8007470:	63bb      	str	r3, [r7, #56]	; 0x38
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3314      	adds	r3, #20
 8007478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800747a:	623a      	str	r2, [r7, #32]
 800747c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747e:	69f9      	ldr	r1, [r7, #28]
 8007480:	6a3a      	ldr	r2, [r7, #32]
 8007482:	e841 2300 	strex	r3, r2, [r1]
 8007486:	61bb      	str	r3, [r7, #24]
   return(result);
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1e5      	bne.n	800745a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2220      	movs	r2, #32
 8007492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2220      	movs	r2, #32
 800749a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e00f      	b.n	80074ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	4013      	ands	r3, r2
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	bf0c      	ite	eq
 80074ba:	2301      	moveq	r3, #1
 80074bc:	2300      	movne	r3, #0
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	461a      	mov	r2, r3
 80074c2:	79fb      	ldrb	r3, [r7, #7]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d09f      	beq.n	8007408 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3740      	adds	r7, #64	; 0x40
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
	...

080074d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d8:	b09f      	sub	sp, #124	; 0x7c
 80074da:	af00      	add	r7, sp, #0
 80074dc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ea:	68d9      	ldr	r1, [r3, #12]
 80074ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	ea40 0301 	orr.w	r3, r0, r1
 80074f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074f8:	689a      	ldr	r2, [r3, #8]
 80074fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	431a      	orrs	r2, r3
 8007500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	431a      	orrs	r2, r3
 8007506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007508:	69db      	ldr	r3, [r3, #28]
 800750a:	4313      	orrs	r3, r2
 800750c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800750e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007518:	f021 010c 	bic.w	r1, r1, #12
 800751c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007522:	430b      	orrs	r3, r1
 8007524:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007532:	6999      	ldr	r1, [r3, #24]
 8007534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	ea40 0301 	orr.w	r3, r0, r1
 800753c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800753e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	4bc5      	ldr	r3, [pc, #788]	; (8007858 <UART_SetConfig+0x384>)
 8007544:	429a      	cmp	r2, r3
 8007546:	d004      	beq.n	8007552 <UART_SetConfig+0x7e>
 8007548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	4bc3      	ldr	r3, [pc, #780]	; (800785c <UART_SetConfig+0x388>)
 800754e:	429a      	cmp	r2, r3
 8007550:	d103      	bne.n	800755a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007552:	f7ff fd1d 	bl	8006f90 <HAL_RCC_GetPCLK2Freq>
 8007556:	6778      	str	r0, [r7, #116]	; 0x74
 8007558:	e002      	b.n	8007560 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800755a:	f7ff fd05 	bl	8006f68 <HAL_RCC_GetPCLK1Freq>
 800755e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007562:	69db      	ldr	r3, [r3, #28]
 8007564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007568:	f040 80b6 	bne.w	80076d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800756c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800756e:	461c      	mov	r4, r3
 8007570:	f04f 0500 	mov.w	r5, #0
 8007574:	4622      	mov	r2, r4
 8007576:	462b      	mov	r3, r5
 8007578:	1891      	adds	r1, r2, r2
 800757a:	6439      	str	r1, [r7, #64]	; 0x40
 800757c:	415b      	adcs	r3, r3
 800757e:	647b      	str	r3, [r7, #68]	; 0x44
 8007580:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007584:	1912      	adds	r2, r2, r4
 8007586:	eb45 0303 	adc.w	r3, r5, r3
 800758a:	f04f 0000 	mov.w	r0, #0
 800758e:	f04f 0100 	mov.w	r1, #0
 8007592:	00d9      	lsls	r1, r3, #3
 8007594:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007598:	00d0      	lsls	r0, r2, #3
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	1911      	adds	r1, r2, r4
 80075a0:	6639      	str	r1, [r7, #96]	; 0x60
 80075a2:	416b      	adcs	r3, r5
 80075a4:	667b      	str	r3, [r7, #100]	; 0x64
 80075a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	461a      	mov	r2, r3
 80075ac:	f04f 0300 	mov.w	r3, #0
 80075b0:	1891      	adds	r1, r2, r2
 80075b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80075b4:	415b      	adcs	r3, r3
 80075b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80075bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80075c0:	f7f8 fe56 	bl	8000270 <__aeabi_uldivmod>
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	4ba5      	ldr	r3, [pc, #660]	; (8007860 <UART_SetConfig+0x38c>)
 80075ca:	fba3 2302 	umull	r2, r3, r3, r2
 80075ce:	095b      	lsrs	r3, r3, #5
 80075d0:	011e      	lsls	r6, r3, #4
 80075d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075d4:	461c      	mov	r4, r3
 80075d6:	f04f 0500 	mov.w	r5, #0
 80075da:	4622      	mov	r2, r4
 80075dc:	462b      	mov	r3, r5
 80075de:	1891      	adds	r1, r2, r2
 80075e0:	6339      	str	r1, [r7, #48]	; 0x30
 80075e2:	415b      	adcs	r3, r3
 80075e4:	637b      	str	r3, [r7, #52]	; 0x34
 80075e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80075ea:	1912      	adds	r2, r2, r4
 80075ec:	eb45 0303 	adc.w	r3, r5, r3
 80075f0:	f04f 0000 	mov.w	r0, #0
 80075f4:	f04f 0100 	mov.w	r1, #0
 80075f8:	00d9      	lsls	r1, r3, #3
 80075fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80075fe:	00d0      	lsls	r0, r2, #3
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	1911      	adds	r1, r2, r4
 8007606:	65b9      	str	r1, [r7, #88]	; 0x58
 8007608:	416b      	adcs	r3, r5
 800760a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800760c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	461a      	mov	r2, r3
 8007612:	f04f 0300 	mov.w	r3, #0
 8007616:	1891      	adds	r1, r2, r2
 8007618:	62b9      	str	r1, [r7, #40]	; 0x28
 800761a:	415b      	adcs	r3, r3
 800761c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800761e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007622:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007626:	f7f8 fe23 	bl	8000270 <__aeabi_uldivmod>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	4b8c      	ldr	r3, [pc, #560]	; (8007860 <UART_SetConfig+0x38c>)
 8007630:	fba3 1302 	umull	r1, r3, r3, r2
 8007634:	095b      	lsrs	r3, r3, #5
 8007636:	2164      	movs	r1, #100	; 0x64
 8007638:	fb01 f303 	mul.w	r3, r1, r3
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	00db      	lsls	r3, r3, #3
 8007640:	3332      	adds	r3, #50	; 0x32
 8007642:	4a87      	ldr	r2, [pc, #540]	; (8007860 <UART_SetConfig+0x38c>)
 8007644:	fba2 2303 	umull	r2, r3, r2, r3
 8007648:	095b      	lsrs	r3, r3, #5
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007650:	441e      	add	r6, r3
 8007652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007654:	4618      	mov	r0, r3
 8007656:	f04f 0100 	mov.w	r1, #0
 800765a:	4602      	mov	r2, r0
 800765c:	460b      	mov	r3, r1
 800765e:	1894      	adds	r4, r2, r2
 8007660:	623c      	str	r4, [r7, #32]
 8007662:	415b      	adcs	r3, r3
 8007664:	627b      	str	r3, [r7, #36]	; 0x24
 8007666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800766a:	1812      	adds	r2, r2, r0
 800766c:	eb41 0303 	adc.w	r3, r1, r3
 8007670:	f04f 0400 	mov.w	r4, #0
 8007674:	f04f 0500 	mov.w	r5, #0
 8007678:	00dd      	lsls	r5, r3, #3
 800767a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800767e:	00d4      	lsls	r4, r2, #3
 8007680:	4622      	mov	r2, r4
 8007682:	462b      	mov	r3, r5
 8007684:	1814      	adds	r4, r2, r0
 8007686:	653c      	str	r4, [r7, #80]	; 0x50
 8007688:	414b      	adcs	r3, r1
 800768a:	657b      	str	r3, [r7, #84]	; 0x54
 800768c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	461a      	mov	r2, r3
 8007692:	f04f 0300 	mov.w	r3, #0
 8007696:	1891      	adds	r1, r2, r2
 8007698:	61b9      	str	r1, [r7, #24]
 800769a:	415b      	adcs	r3, r3
 800769c:	61fb      	str	r3, [r7, #28]
 800769e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80076a6:	f7f8 fde3 	bl	8000270 <__aeabi_uldivmod>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4b6c      	ldr	r3, [pc, #432]	; (8007860 <UART_SetConfig+0x38c>)
 80076b0:	fba3 1302 	umull	r1, r3, r3, r2
 80076b4:	095b      	lsrs	r3, r3, #5
 80076b6:	2164      	movs	r1, #100	; 0x64
 80076b8:	fb01 f303 	mul.w	r3, r1, r3
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	00db      	lsls	r3, r3, #3
 80076c0:	3332      	adds	r3, #50	; 0x32
 80076c2:	4a67      	ldr	r2, [pc, #412]	; (8007860 <UART_SetConfig+0x38c>)
 80076c4:	fba2 2303 	umull	r2, r3, r2, r3
 80076c8:	095b      	lsrs	r3, r3, #5
 80076ca:	f003 0207 	and.w	r2, r3, #7
 80076ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4432      	add	r2, r6
 80076d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80076d6:	e0b9      	b.n	800784c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076da:	461c      	mov	r4, r3
 80076dc:	f04f 0500 	mov.w	r5, #0
 80076e0:	4622      	mov	r2, r4
 80076e2:	462b      	mov	r3, r5
 80076e4:	1891      	adds	r1, r2, r2
 80076e6:	6139      	str	r1, [r7, #16]
 80076e8:	415b      	adcs	r3, r3
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80076f0:	1912      	adds	r2, r2, r4
 80076f2:	eb45 0303 	adc.w	r3, r5, r3
 80076f6:	f04f 0000 	mov.w	r0, #0
 80076fa:	f04f 0100 	mov.w	r1, #0
 80076fe:	00d9      	lsls	r1, r3, #3
 8007700:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007704:	00d0      	lsls	r0, r2, #3
 8007706:	4602      	mov	r2, r0
 8007708:	460b      	mov	r3, r1
 800770a:	eb12 0804 	adds.w	r8, r2, r4
 800770e:	eb43 0905 	adc.w	r9, r3, r5
 8007712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	4618      	mov	r0, r3
 8007718:	f04f 0100 	mov.w	r1, #0
 800771c:	f04f 0200 	mov.w	r2, #0
 8007720:	f04f 0300 	mov.w	r3, #0
 8007724:	008b      	lsls	r3, r1, #2
 8007726:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800772a:	0082      	lsls	r2, r0, #2
 800772c:	4640      	mov	r0, r8
 800772e:	4649      	mov	r1, r9
 8007730:	f7f8 fd9e 	bl	8000270 <__aeabi_uldivmod>
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	4b49      	ldr	r3, [pc, #292]	; (8007860 <UART_SetConfig+0x38c>)
 800773a:	fba3 2302 	umull	r2, r3, r3, r2
 800773e:	095b      	lsrs	r3, r3, #5
 8007740:	011e      	lsls	r6, r3, #4
 8007742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007744:	4618      	mov	r0, r3
 8007746:	f04f 0100 	mov.w	r1, #0
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	1894      	adds	r4, r2, r2
 8007750:	60bc      	str	r4, [r7, #8]
 8007752:	415b      	adcs	r3, r3
 8007754:	60fb      	str	r3, [r7, #12]
 8007756:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800775a:	1812      	adds	r2, r2, r0
 800775c:	eb41 0303 	adc.w	r3, r1, r3
 8007760:	f04f 0400 	mov.w	r4, #0
 8007764:	f04f 0500 	mov.w	r5, #0
 8007768:	00dd      	lsls	r5, r3, #3
 800776a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800776e:	00d4      	lsls	r4, r2, #3
 8007770:	4622      	mov	r2, r4
 8007772:	462b      	mov	r3, r5
 8007774:	1814      	adds	r4, r2, r0
 8007776:	64bc      	str	r4, [r7, #72]	; 0x48
 8007778:	414b      	adcs	r3, r1
 800777a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800777c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	4618      	mov	r0, r3
 8007782:	f04f 0100 	mov.w	r1, #0
 8007786:	f04f 0200 	mov.w	r2, #0
 800778a:	f04f 0300 	mov.w	r3, #0
 800778e:	008b      	lsls	r3, r1, #2
 8007790:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007794:	0082      	lsls	r2, r0, #2
 8007796:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800779a:	f7f8 fd69 	bl	8000270 <__aeabi_uldivmod>
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	4b2f      	ldr	r3, [pc, #188]	; (8007860 <UART_SetConfig+0x38c>)
 80077a4:	fba3 1302 	umull	r1, r3, r3, r2
 80077a8:	095b      	lsrs	r3, r3, #5
 80077aa:	2164      	movs	r1, #100	; 0x64
 80077ac:	fb01 f303 	mul.w	r3, r1, r3
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	011b      	lsls	r3, r3, #4
 80077b4:	3332      	adds	r3, #50	; 0x32
 80077b6:	4a2a      	ldr	r2, [pc, #168]	; (8007860 <UART_SetConfig+0x38c>)
 80077b8:	fba2 2303 	umull	r2, r3, r2, r3
 80077bc:	095b      	lsrs	r3, r3, #5
 80077be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077c2:	441e      	add	r6, r3
 80077c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077c6:	4618      	mov	r0, r3
 80077c8:	f04f 0100 	mov.w	r1, #0
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	1894      	adds	r4, r2, r2
 80077d2:	603c      	str	r4, [r7, #0]
 80077d4:	415b      	adcs	r3, r3
 80077d6:	607b      	str	r3, [r7, #4]
 80077d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077dc:	1812      	adds	r2, r2, r0
 80077de:	eb41 0303 	adc.w	r3, r1, r3
 80077e2:	f04f 0400 	mov.w	r4, #0
 80077e6:	f04f 0500 	mov.w	r5, #0
 80077ea:	00dd      	lsls	r5, r3, #3
 80077ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80077f0:	00d4      	lsls	r4, r2, #3
 80077f2:	4622      	mov	r2, r4
 80077f4:	462b      	mov	r3, r5
 80077f6:	eb12 0a00 	adds.w	sl, r2, r0
 80077fa:	eb43 0b01 	adc.w	fp, r3, r1
 80077fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	4618      	mov	r0, r3
 8007804:	f04f 0100 	mov.w	r1, #0
 8007808:	f04f 0200 	mov.w	r2, #0
 800780c:	f04f 0300 	mov.w	r3, #0
 8007810:	008b      	lsls	r3, r1, #2
 8007812:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007816:	0082      	lsls	r2, r0, #2
 8007818:	4650      	mov	r0, sl
 800781a:	4659      	mov	r1, fp
 800781c:	f7f8 fd28 	bl	8000270 <__aeabi_uldivmod>
 8007820:	4602      	mov	r2, r0
 8007822:	460b      	mov	r3, r1
 8007824:	4b0e      	ldr	r3, [pc, #56]	; (8007860 <UART_SetConfig+0x38c>)
 8007826:	fba3 1302 	umull	r1, r3, r3, r2
 800782a:	095b      	lsrs	r3, r3, #5
 800782c:	2164      	movs	r1, #100	; 0x64
 800782e:	fb01 f303 	mul.w	r3, r1, r3
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	011b      	lsls	r3, r3, #4
 8007836:	3332      	adds	r3, #50	; 0x32
 8007838:	4a09      	ldr	r2, [pc, #36]	; (8007860 <UART_SetConfig+0x38c>)
 800783a:	fba2 2303 	umull	r2, r3, r2, r3
 800783e:	095b      	lsrs	r3, r3, #5
 8007840:	f003 020f 	and.w	r2, r3, #15
 8007844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4432      	add	r2, r6
 800784a:	609a      	str	r2, [r3, #8]
}
 800784c:	bf00      	nop
 800784e:	377c      	adds	r7, #124	; 0x7c
 8007850:	46bd      	mov	sp, r7
 8007852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007856:	bf00      	nop
 8007858:	40011000 	.word	0x40011000
 800785c:	40011400 	.word	0x40011400
 8007860:	51eb851f 	.word	0x51eb851f

08007864 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007864:	b084      	sub	sp, #16
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	f107 001c 	add.w	r0, r7, #28
 8007872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007878:	2b01      	cmp	r3, #1
 800787a:	d122      	bne.n	80078c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007880:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80078a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d105      	bne.n	80078b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f9a0 	bl	8007bfc <USB_CoreReset>
 80078bc:	4603      	mov	r3, r0
 80078be:	73fb      	strb	r3, [r7, #15]
 80078c0:	e01a      	b.n	80078f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f994 	bl	8007bfc <USB_CoreReset>
 80078d4:	4603      	mov	r3, r0
 80078d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80078d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d106      	bne.n	80078ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	639a      	str	r2, [r3, #56]	; 0x38
 80078ea:	e005      	b.n	80078f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80078f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d10b      	bne.n	8007916 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f043 0206 	orr.w	r2, r3, #6
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f043 0220 	orr.w	r2, r3, #32
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007916:	7bfb      	ldrb	r3, [r7, #15]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007922:	b004      	add	sp, #16
 8007924:	4770      	bx	lr

08007926 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007926:	b480      	push	{r7}
 8007928:	b083      	sub	sp, #12
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f043 0201 	orr.w	r2, r3, #1
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f023 0201 	bic.w	r2, r3, #1
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	460b      	mov	r3, r1
 8007974:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007986:	78fb      	ldrb	r3, [r7, #3]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d115      	bne.n	80079b8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007998:	2001      	movs	r0, #1
 800799a:	f7f9 fe85 	bl	80016a8 <HAL_Delay>
      ms++;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	3301      	adds	r3, #1
 80079a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f91a 	bl	8007bde <USB_GetMode>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d01e      	beq.n	80079ee <USB_SetCurrentMode+0x84>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2b31      	cmp	r3, #49	; 0x31
 80079b4:	d9f0      	bls.n	8007998 <USB_SetCurrentMode+0x2e>
 80079b6:	e01a      	b.n	80079ee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80079b8:	78fb      	ldrb	r3, [r7, #3]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d115      	bne.n	80079ea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80079ca:	2001      	movs	r0, #1
 80079cc:	f7f9 fe6c 	bl	80016a8 <HAL_Delay>
      ms++;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	3301      	adds	r3, #1
 80079d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f901 	bl	8007bde <USB_GetMode>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d005      	beq.n	80079ee <USB_SetCurrentMode+0x84>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2b31      	cmp	r3, #49	; 0x31
 80079e6:	d9f0      	bls.n	80079ca <USB_SetCurrentMode+0x60>
 80079e8:	e001      	b.n	80079ee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e005      	b.n	80079fa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2b32      	cmp	r3, #50	; 0x32
 80079f2:	d101      	bne.n	80079f8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e000      	b.n	80079fa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
	...

08007a04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	019b      	lsls	r3, r3, #6
 8007a16:	f043 0220 	orr.w	r2, r3, #32
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	3301      	adds	r3, #1
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	4a08      	ldr	r2, [pc, #32]	; (8007a48 <USB_FlushTxFifo+0x44>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d901      	bls.n	8007a2e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e006      	b.n	8007a3c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	f003 0320 	and.w	r3, r3, #32
 8007a36:	2b20      	cmp	r3, #32
 8007a38:	d0f1      	beq.n	8007a1e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	00030d40 	.word	0x00030d40

08007a4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2210      	movs	r2, #16
 8007a5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	3301      	adds	r3, #1
 8007a62:	60fb      	str	r3, [r7, #12]
 8007a64:	4a08      	ldr	r2, [pc, #32]	; (8007a88 <USB_FlushRxFifo+0x3c>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d901      	bls.n	8007a6e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e006      	b.n	8007a7c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	f003 0310 	and.w	r3, r3, #16
 8007a76:	2b10      	cmp	r3, #16
 8007a78:	d0f1      	beq.n	8007a5e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	00030d40 	.word	0x00030d40

08007a8c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b089      	sub	sp, #36	; 0x24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	4611      	mov	r1, r2
 8007a98:	461a      	mov	r2, r3
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	71fb      	strb	r3, [r7, #7]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007aaa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d123      	bne.n	8007afa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007ab2:	88bb      	ldrh	r3, [r7, #4]
 8007ab4:	3303      	adds	r3, #3
 8007ab6:	089b      	lsrs	r3, r3, #2
 8007ab8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007aba:	2300      	movs	r3, #0
 8007abc:	61bb      	str	r3, [r7, #24]
 8007abe:	e018      	b.n	8007af2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ac0:	79fb      	ldrb	r3, [r7, #7]
 8007ac2:	031a      	lsls	r2, r3, #12
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007acc:	461a      	mov	r2, r3
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	3301      	adds	r3, #1
 8007ade:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	3301      	adds	r3, #1
 8007af0:	61bb      	str	r3, [r7, #24]
 8007af2:	69ba      	ldr	r2, [r7, #24]
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d3e2      	bcc.n	8007ac0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3724      	adds	r7, #36	; 0x24
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b08b      	sub	sp, #44	; 0x2c
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	4613      	mov	r3, r2
 8007b14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b1e:	88fb      	ldrh	r3, [r7, #6]
 8007b20:	089b      	lsrs	r3, r3, #2
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007b26:	88fb      	ldrh	r3, [r7, #6]
 8007b28:	f003 0303 	and.w	r3, r3, #3
 8007b2c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007b2e:	2300      	movs	r3, #0
 8007b30:	623b      	str	r3, [r7, #32]
 8007b32:	e014      	b.n	8007b5e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	3301      	adds	r3, #1
 8007b44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	3301      	adds	r3, #1
 8007b4a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4e:	3301      	adds	r3, #1
 8007b50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b54:	3301      	adds	r3, #1
 8007b56:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	623b      	str	r3, [r7, #32]
 8007b5e:	6a3a      	ldr	r2, [r7, #32]
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d3e6      	bcc.n	8007b34 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007b66:	8bfb      	ldrh	r3, [r7, #30]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d01e      	beq.n	8007baa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b76:	461a      	mov	r2, r3
 8007b78:	f107 0310 	add.w	r3, r7, #16
 8007b7c:	6812      	ldr	r2, [r2, #0]
 8007b7e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007b80:	693a      	ldr	r2, [r7, #16]
 8007b82:	6a3b      	ldr	r3, [r7, #32]
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	00db      	lsls	r3, r3, #3
 8007b88:	fa22 f303 	lsr.w	r3, r2, r3
 8007b8c:	b2da      	uxtb	r2, r3
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	701a      	strb	r2, [r3, #0]
      i++;
 8007b92:	6a3b      	ldr	r3, [r7, #32]
 8007b94:	3301      	adds	r3, #1
 8007b96:	623b      	str	r3, [r7, #32]
      pDest++;
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007b9e:	8bfb      	ldrh	r3, [r7, #30]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007ba4:	8bfb      	ldrh	r3, [r7, #30]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1ea      	bne.n	8007b80 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	372c      	adds	r7, #44	; 0x2c
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	695b      	ldr	r3, [r3, #20]
 8007bc4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	4013      	ands	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b083      	sub	sp, #12
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	f003 0301 	and.w	r3, r3, #1
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
	...

08007bfc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c04:	2300      	movs	r3, #0
 8007c06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	60fb      	str	r3, [r7, #12]
 8007c0e:	4a13      	ldr	r2, [pc, #76]	; (8007c5c <USB_CoreReset+0x60>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d901      	bls.n	8007c18 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e01a      	b.n	8007c4e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	daf3      	bge.n	8007c08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c20:	2300      	movs	r3, #0
 8007c22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	f043 0201 	orr.w	r2, r3, #1
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	3301      	adds	r3, #1
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	4a09      	ldr	r2, [pc, #36]	; (8007c5c <USB_CoreReset+0x60>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d901      	bls.n	8007c40 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e006      	b.n	8007c4e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	f003 0301 	and.w	r3, r3, #1
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d0f1      	beq.n	8007c30 <USB_CoreReset+0x34>

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	00030d40 	.word	0x00030d40

08007c60 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c60:	b084      	sub	sp, #16
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b084      	sub	sp, #16
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	f107 001c 	add.w	r0, r7, #28
 8007c6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	2300      	movs	r3, #0
 8007c80:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c92:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d018      	beq.n	8007ce4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d10a      	bne.n	8007cce <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007cc6:	f043 0304 	orr.w	r3, r3, #4
 8007cca:	6013      	str	r3, [r2, #0]
 8007ccc:	e014      	b.n	8007cf8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007cdc:	f023 0304 	bic.w	r3, r3, #4
 8007ce0:	6013      	str	r3, [r2, #0]
 8007ce2:	e009      	b.n	8007cf8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007cf2:	f023 0304 	bic.w	r3, r3, #4
 8007cf6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007cf8:	2110      	movs	r1, #16
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7ff fe82 	bl	8007a04 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7ff fea3 	bl	8007a4c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007d06:	2300      	movs	r3, #0
 8007d08:	60fb      	str	r3, [r7, #12]
 8007d0a:	e015      	b.n	8007d38 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d18:	461a      	mov	r2, r3
 8007d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d1e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	2300      	movs	r3, #0
 8007d30:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	3301      	adds	r3, #1
 8007d36:	60fb      	str	r3, [r7, #12]
 8007d38:	6a3b      	ldr	r3, [r7, #32]
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d3e5      	bcc.n	8007d0c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f04f 32ff 	mov.w	r2, #4294967295
 8007d4c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00b      	beq.n	8007d72 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d60:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a13      	ldr	r2, [pc, #76]	; (8007db4 <USB_HostInit+0x154>)
 8007d66:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a13      	ldr	r2, [pc, #76]	; (8007db8 <USB_HostInit+0x158>)
 8007d6c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007d70:	e009      	b.n	8007d86 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2280      	movs	r2, #128	; 0x80
 8007d76:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a10      	ldr	r2, [pc, #64]	; (8007dbc <USB_HostInit+0x15c>)
 8007d7c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a0f      	ldr	r2, [pc, #60]	; (8007dc0 <USB_HostInit+0x160>)
 8007d82:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d105      	bne.n	8007d98 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	699b      	ldr	r3, [r3, #24]
 8007d90:	f043 0210 	orr.w	r2, r3, #16
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	699a      	ldr	r2, [r3, #24]
 8007d9c:	4b09      	ldr	r3, [pc, #36]	; (8007dc4 <USB_HostInit+0x164>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007db0:	b004      	add	sp, #16
 8007db2:	4770      	bx	lr
 8007db4:	01000200 	.word	0x01000200
 8007db8:	00e00300 	.word	0x00e00300
 8007dbc:	00600080 	.word	0x00600080
 8007dc0:	004000e0 	.word	0x004000e0
 8007dc4:	a3200008 	.word	0xa3200008

08007dc8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007de6:	f023 0303 	bic.w	r3, r3, #3
 8007dea:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	78fb      	ldrb	r3, [r7, #3]
 8007df6:	f003 0303 	and.w	r3, r3, #3
 8007dfa:	68f9      	ldr	r1, [r7, #12]
 8007dfc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007e00:	4313      	orrs	r3, r2
 8007e02:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007e04:	78fb      	ldrb	r3, [r7, #3]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d107      	bne.n	8007e1a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e10:	461a      	mov	r2, r3
 8007e12:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007e16:	6053      	str	r3, [r2, #4]
 8007e18:	e009      	b.n	8007e2e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007e1a:	78fb      	ldrb	r3, [r7, #3]
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d106      	bne.n	8007e2e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e26:	461a      	mov	r2, r3
 8007e28:	f241 7370 	movw	r3, #6000	; 0x1770
 8007e2c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007e5c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e6a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007e6c:	2064      	movs	r0, #100	; 0x64
 8007e6e:	f7f9 fc1b 	bl	80016a8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e7e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007e80:	200a      	movs	r0, #10
 8007e82:	f7f9 fc11 	bl	80016a8 <HAL_Delay>

  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007eb4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d109      	bne.n	8007ed4 <USB_DriveVbus+0x44>
 8007ec0:	78fb      	ldrb	r3, [r7, #3]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d106      	bne.n	8007ed4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007ece:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007ed2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ede:	d109      	bne.n	8007ef4 <USB_DriveVbus+0x64>
 8007ee0:	78fb      	ldrb	r3, [r7, #3]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d106      	bne.n	8007ef4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007eee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ef2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b085      	sub	sp, #20
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	0c5b      	lsrs	r3, r3, #17
 8007f20:	f003 0303 	and.w	r3, r3, #3
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	b29b      	uxth	r3, r3
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
	...

08007f54 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b088      	sub	sp, #32
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	4608      	mov	r0, r1
 8007f5e:	4611      	mov	r1, r2
 8007f60:	461a      	mov	r2, r3
 8007f62:	4603      	mov	r3, r0
 8007f64:	70fb      	strb	r3, [r7, #3]
 8007f66:	460b      	mov	r3, r1
 8007f68:	70bb      	strb	r3, [r7, #2]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007f76:	78fb      	ldrb	r3, [r7, #3]
 8007f78:	015a      	lsls	r2, r3, #5
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f82:	461a      	mov	r2, r3
 8007f84:	f04f 33ff 	mov.w	r3, #4294967295
 8007f88:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007f8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	d87e      	bhi.n	8008090 <USB_HC_Init+0x13c>
 8007f92:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <USB_HC_Init+0x44>)
 8007f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f98:	08007fa9 	.word	0x08007fa9
 8007f9c:	08008053 	.word	0x08008053
 8007fa0:	08007fa9 	.word	0x08007fa9
 8007fa4:	08008015 	.word	0x08008015
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007fa8:	78fb      	ldrb	r3, [r7, #3]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	f240 439d 	movw	r3, #1181	; 0x49d
 8007fba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007fbc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	da10      	bge.n	8007fe6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007fc4:	78fb      	ldrb	r3, [r7, #3]
 8007fc6:	015a      	lsls	r2, r3, #5
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	4413      	add	r3, r2
 8007fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	78fa      	ldrb	r2, [r7, #3]
 8007fd4:	0151      	lsls	r1, r2, #5
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	440a      	add	r2, r1
 8007fda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fe2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007fe4:	e057      	b.n	8008096 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d051      	beq.n	8008096 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007ff2:	78fb      	ldrb	r3, [r7, #3]
 8007ff4:	015a      	lsls	r2, r3, #5
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	78fa      	ldrb	r2, [r7, #3]
 8008002:	0151      	lsls	r1, r2, #5
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	440a      	add	r2, r1
 8008008:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800800c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008010:	60d3      	str	r3, [r2, #12]
      break;
 8008012:	e040      	b.n	8008096 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008014:	78fb      	ldrb	r3, [r7, #3]
 8008016:	015a      	lsls	r2, r3, #5
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	4413      	add	r3, r2
 800801c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008020:	461a      	mov	r2, r3
 8008022:	f240 639d 	movw	r3, #1693	; 0x69d
 8008026:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008028:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800802c:	2b00      	cmp	r3, #0
 800802e:	da34      	bge.n	800809a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008030:	78fb      	ldrb	r3, [r7, #3]
 8008032:	015a      	lsls	r2, r3, #5
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	4413      	add	r3, r2
 8008038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	78fa      	ldrb	r2, [r7, #3]
 8008040:	0151      	lsls	r1, r2, #5
 8008042:	693a      	ldr	r2, [r7, #16]
 8008044:	440a      	add	r2, r1
 8008046:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800804a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800804e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008050:	e023      	b.n	800809a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008052:	78fb      	ldrb	r3, [r7, #3]
 8008054:	015a      	lsls	r2, r3, #5
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	4413      	add	r3, r2
 800805a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800805e:	461a      	mov	r2, r3
 8008060:	f240 2325 	movw	r3, #549	; 0x225
 8008064:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008066:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800806a:	2b00      	cmp	r3, #0
 800806c:	da17      	bge.n	800809e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800806e:	78fb      	ldrb	r3, [r7, #3]
 8008070:	015a      	lsls	r2, r3, #5
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	4413      	add	r3, r2
 8008076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	78fa      	ldrb	r2, [r7, #3]
 800807e:	0151      	lsls	r1, r2, #5
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	440a      	add	r2, r1
 8008084:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008088:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800808c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800808e:	e006      	b.n	800809e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	77fb      	strb	r3, [r7, #31]
      break;
 8008094:	e004      	b.n	80080a0 <USB_HC_Init+0x14c>
      break;
 8008096:	bf00      	nop
 8008098:	e002      	b.n	80080a0 <USB_HC_Init+0x14c>
      break;
 800809a:	bf00      	nop
 800809c:	e000      	b.n	80080a0 <USB_HC_Init+0x14c>
      break;
 800809e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080a6:	699a      	ldr	r2, [r3, #24]
 80080a8:	78fb      	ldrb	r3, [r7, #3]
 80080aa:	f003 030f 	and.w	r3, r3, #15
 80080ae:	2101      	movs	r1, #1
 80080b0:	fa01 f303 	lsl.w	r3, r1, r3
 80080b4:	6939      	ldr	r1, [r7, #16]
 80080b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80080ba:	4313      	orrs	r3, r2
 80080bc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80080ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	da03      	bge.n	80080da <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80080d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080d6:	61bb      	str	r3, [r7, #24]
 80080d8:	e001      	b.n	80080de <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80080da:	2300      	movs	r3, #0
 80080dc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7ff ff0f 	bl	8007f02 <USB_GetHostSpeed>
 80080e4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80080e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d106      	bne.n	80080fc <USB_HC_Init+0x1a8>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d003      	beq.n	80080fc <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80080f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80080f8:	617b      	str	r3, [r7, #20]
 80080fa:	e001      	b.n	8008100 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80080fc:	2300      	movs	r3, #0
 80080fe:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008100:	787b      	ldrb	r3, [r7, #1]
 8008102:	059b      	lsls	r3, r3, #22
 8008104:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008108:	78bb      	ldrb	r3, [r7, #2]
 800810a:	02db      	lsls	r3, r3, #11
 800810c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008110:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008112:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008116:	049b      	lsls	r3, r3, #18
 8008118:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800811c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800811e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008120:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008124:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800812a:	78fb      	ldrb	r3, [r7, #3]
 800812c:	0159      	lsls	r1, r3, #5
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	440b      	add	r3, r1
 8008132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008136:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800813c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800813e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008142:	2b03      	cmp	r3, #3
 8008144:	d10f      	bne.n	8008166 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008146:	78fb      	ldrb	r3, [r7, #3]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	4413      	add	r3, r2
 800814e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	78fa      	ldrb	r2, [r7, #3]
 8008156:	0151      	lsls	r1, r2, #5
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	440a      	add	r2, r1
 800815c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008160:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008164:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008166:	7ffb      	ldrb	r3, [r7, #31]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3720      	adds	r7, #32
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b08c      	sub	sp, #48	; 0x30
 8008174:	af02      	add	r7, sp, #8
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	4613      	mov	r3, r2
 800817c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	785b      	ldrb	r3, [r3, #1]
 8008186:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008188:	f44f 7380 	mov.w	r3, #256	; 0x100
 800818c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008196:	2b00      	cmp	r3, #0
 8008198:	d02d      	beq.n	80081f6 <USB_HC_StartXfer+0x86>
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	791b      	ldrb	r3, [r3, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d129      	bne.n	80081f6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80081a2:	79fb      	ldrb	r3, [r7, #7]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d117      	bne.n	80081d8 <USB_HC_StartXfer+0x68>
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	79db      	ldrb	r3, [r3, #7]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d003      	beq.n	80081b8 <USB_HC_StartXfer+0x48>
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	79db      	ldrb	r3, [r3, #7]
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d10f      	bne.n	80081d8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	015a      	lsls	r2, r3, #5
 80081bc:	6a3b      	ldr	r3, [r7, #32]
 80081be:	4413      	add	r3, r2
 80081c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	69fa      	ldr	r2, [r7, #28]
 80081c8:	0151      	lsls	r1, r2, #5
 80081ca:	6a3a      	ldr	r2, [r7, #32]
 80081cc:	440a      	add	r2, r1
 80081ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081d6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80081d8:	79fb      	ldrb	r3, [r7, #7]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d10b      	bne.n	80081f6 <USB_HC_StartXfer+0x86>
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	795b      	ldrb	r3, [r3, #5]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d107      	bne.n	80081f6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	785b      	ldrb	r3, [r3, #1]
 80081ea:	4619      	mov	r1, r3
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 fa2f 	bl	8008650 <USB_DoPing>
      return HAL_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	e0f8      	b.n	80083e8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d018      	beq.n	8008230 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	695b      	ldr	r3, [r3, #20]
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	8912      	ldrh	r2, [r2, #8]
 8008206:	4413      	add	r3, r2
 8008208:	3b01      	subs	r3, #1
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	8912      	ldrh	r2, [r2, #8]
 800820e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008212:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008214:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008216:	8b7b      	ldrh	r3, [r7, #26]
 8008218:	429a      	cmp	r2, r3
 800821a:	d90b      	bls.n	8008234 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800821c:	8b7b      	ldrh	r3, [r7, #26]
 800821e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008220:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	8912      	ldrh	r2, [r2, #8]
 8008226:	fb02 f203 	mul.w	r2, r2, r3
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	611a      	str	r2, [r3, #16]
 800822e:	e001      	b.n	8008234 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008230:	2301      	movs	r3, #1
 8008232:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	78db      	ldrb	r3, [r3, #3]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d007      	beq.n	800824c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800823c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	8912      	ldrh	r2, [r2, #8]
 8008242:	fb02 f203 	mul.w	r2, r2, r3
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	611a      	str	r2, [r3, #16]
 800824a:	e003      	b.n	8008254 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	695a      	ldr	r2, [r3, #20]
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800825c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800825e:	04d9      	lsls	r1, r3, #19
 8008260:	4b63      	ldr	r3, [pc, #396]	; (80083f0 <USB_HC_StartXfer+0x280>)
 8008262:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008264:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	7a9b      	ldrb	r3, [r3, #10]
 800826a:	075b      	lsls	r3, r3, #29
 800826c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008270:	69f9      	ldr	r1, [r7, #28]
 8008272:	0148      	lsls	r0, r1, #5
 8008274:	6a39      	ldr	r1, [r7, #32]
 8008276:	4401      	add	r1, r0
 8008278:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800827c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800827e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008280:	79fb      	ldrb	r3, [r7, #7]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d009      	beq.n	800829a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	68d9      	ldr	r1, [r3, #12]
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	015a      	lsls	r2, r3, #5
 800828e:	6a3b      	ldr	r3, [r7, #32]
 8008290:	4413      	add	r3, r2
 8008292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008296:	460a      	mov	r2, r1
 8008298:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800829a:	6a3b      	ldr	r3, [r7, #32]
 800829c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	bf0c      	ite	eq
 80082aa:	2301      	moveq	r3, #1
 80082ac:	2300      	movne	r3, #0
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	015a      	lsls	r2, r3, #5
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	4413      	add	r3, r2
 80082ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	69fa      	ldr	r2, [r7, #28]
 80082c2:	0151      	lsls	r1, r2, #5
 80082c4:	6a3a      	ldr	r2, [r7, #32]
 80082c6:	440a      	add	r2, r1
 80082c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80082d0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	6a3b      	ldr	r3, [r7, #32]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	7e7b      	ldrb	r3, [r7, #25]
 80082e2:	075b      	lsls	r3, r3, #29
 80082e4:	69f9      	ldr	r1, [r7, #28]
 80082e6:	0148      	lsls	r0, r1, #5
 80082e8:	6a39      	ldr	r1, [r7, #32]
 80082ea:	4401      	add	r1, r0
 80082ec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80082f0:	4313      	orrs	r3, r2
 80082f2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	015a      	lsls	r2, r3, #5
 80082f8:	6a3b      	ldr	r3, [r7, #32]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800830a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	78db      	ldrb	r3, [r3, #3]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d004      	beq.n	800831e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800831a:	613b      	str	r3, [r7, #16]
 800831c:	e003      	b.n	8008326 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008324:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800832c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	015a      	lsls	r2, r3, #5
 8008332:	6a3b      	ldr	r3, [r7, #32]
 8008334:	4413      	add	r3, r2
 8008336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800833a:	461a      	mov	r2, r3
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008340:	79fb      	ldrb	r3, [r7, #7]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	e04e      	b.n	80083e8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	78db      	ldrb	r3, [r3, #3]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d149      	bne.n	80083e6 <USB_HC_StartXfer+0x276>
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d045      	beq.n	80083e6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	79db      	ldrb	r3, [r3, #7]
 800835e:	2b03      	cmp	r3, #3
 8008360:	d830      	bhi.n	80083c4 <USB_HC_StartXfer+0x254>
 8008362:	a201      	add	r2, pc, #4	; (adr r2, 8008368 <USB_HC_StartXfer+0x1f8>)
 8008364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008368:	08008379 	.word	0x08008379
 800836c:	0800839d 	.word	0x0800839d
 8008370:	08008379 	.word	0x08008379
 8008374:	0800839d 	.word	0x0800839d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	695b      	ldr	r3, [r3, #20]
 800837c:	3303      	adds	r3, #3
 800837e:	089b      	lsrs	r3, r3, #2
 8008380:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008382:	8afa      	ldrh	r2, [r7, #22]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008388:	b29b      	uxth	r3, r3
 800838a:	429a      	cmp	r2, r3
 800838c:	d91c      	bls.n	80083c8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	f043 0220 	orr.w	r2, r3, #32
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	619a      	str	r2, [r3, #24]
        }
        break;
 800839a:	e015      	b.n	80083c8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	695b      	ldr	r3, [r3, #20]
 80083a0:	3303      	adds	r3, #3
 80083a2:	089b      	lsrs	r3, r3, #2
 80083a4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80083a6:	8afa      	ldrh	r2, [r7, #22]
 80083a8:	6a3b      	ldr	r3, [r7, #32]
 80083aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d90a      	bls.n	80083cc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	619a      	str	r2, [r3, #24]
        }
        break;
 80083c2:	e003      	b.n	80083cc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80083c4:	bf00      	nop
 80083c6:	e002      	b.n	80083ce <USB_HC_StartXfer+0x25e>
        break;
 80083c8:	bf00      	nop
 80083ca:	e000      	b.n	80083ce <USB_HC_StartXfer+0x25e>
        break;
 80083cc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	68d9      	ldr	r1, [r3, #12]
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	785a      	ldrb	r2, [r3, #1]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	695b      	ldr	r3, [r3, #20]
 80083da:	b29b      	uxth	r3, r3
 80083dc:	2000      	movs	r0, #0
 80083de:	9000      	str	r0, [sp, #0]
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f7ff fb53 	bl	8007a8c <USB_WritePacket>
  }

  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3728      	adds	r7, #40	; 0x28
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	1ff80000 	.word	0x1ff80000

080083f4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008406:	695b      	ldr	r3, [r3, #20]
 8008408:	b29b      	uxth	r3, r3
}
 800840a:	4618      	mov	r0, r3
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008416:	b480      	push	{r7}
 8008418:	b089      	sub	sp, #36	; 0x24
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	460b      	mov	r3, r1
 8008420:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8008426:	78fb      	ldrb	r3, [r7, #3]
 8008428:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	4413      	add	r3, r2
 8008436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	0c9b      	lsrs	r3, r3, #18
 800843e:	f003 0303 	and.w	r3, r3, #3
 8008442:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	015a      	lsls	r2, r3, #5
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	4413      	add	r3, r2
 800844c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	0fdb      	lsrs	r3, r3, #31
 8008454:	f003 0301 	and.w	r3, r3, #1
 8008458:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	f003 0320 	and.w	r3, r3, #32
 8008462:	2b20      	cmp	r3, #32
 8008464:	d104      	bne.n	8008470 <USB_HC_Halt+0x5a>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d101      	bne.n	8008470 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	e0e8      	b.n	8008642 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d002      	beq.n	800847c <USB_HC_Halt+0x66>
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	2b02      	cmp	r3, #2
 800847a:	d173      	bne.n	8008564 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	4413      	add	r3, r2
 8008484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	0151      	lsls	r1, r2, #5
 800848e:	69ba      	ldr	r2, [r7, #24]
 8008490:	440a      	add	r2, r1
 8008492:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008496:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800849a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	f003 0320 	and.w	r3, r3, #32
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f040 80cb 	bne.w	8008640 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d143      	bne.n	800853e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	015a      	lsls	r2, r3, #5
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	4413      	add	r3, r2
 80084be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	0151      	lsls	r1, r2, #5
 80084c8:	69ba      	ldr	r2, [r7, #24]
 80084ca:	440a      	add	r2, r1
 80084cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084d4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	015a      	lsls	r2, r3, #5
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	4413      	add	r3, r2
 80084de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	697a      	ldr	r2, [r7, #20]
 80084e6:	0151      	lsls	r1, r2, #5
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	440a      	add	r2, r1
 80084ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084f4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	0151      	lsls	r1, r2, #5
 8008508:	69ba      	ldr	r2, [r7, #24]
 800850a:	440a      	add	r2, r1
 800850c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008510:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008514:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	3301      	adds	r3, #1
 800851a:	61fb      	str	r3, [r7, #28]
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008522:	d81d      	bhi.n	8008560 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	4413      	add	r3, r2
 800852c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800853a:	d0ec      	beq.n	8008516 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800853c:	e080      	b.n	8008640 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	015a      	lsls	r2, r3, #5
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	4413      	add	r3, r2
 8008546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	0151      	lsls	r1, r2, #5
 8008550:	69ba      	ldr	r2, [r7, #24]
 8008552:	440a      	add	r2, r1
 8008554:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008558:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800855c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800855e:	e06f      	b.n	8008640 <USB_HC_Halt+0x22a>
            break;
 8008560:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008562:	e06d      	b.n	8008640 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	4413      	add	r3, r2
 800856c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	0151      	lsls	r1, r2, #5
 8008576:	69ba      	ldr	r2, [r7, #24]
 8008578:	440a      	add	r2, r1
 800857a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800857e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008582:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d143      	bne.n	800861c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	015a      	lsls	r2, r3, #5
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	4413      	add	r3, r2
 800859c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	697a      	ldr	r2, [r7, #20]
 80085a4:	0151      	lsls	r1, r2, #5
 80085a6:	69ba      	ldr	r2, [r7, #24]
 80085a8:	440a      	add	r2, r1
 80085aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	0151      	lsls	r1, r2, #5
 80085c6:	69ba      	ldr	r2, [r7, #24]
 80085c8:	440a      	add	r2, r1
 80085ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	015a      	lsls	r2, r3, #5
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	4413      	add	r3, r2
 80085dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	0151      	lsls	r1, r2, #5
 80085e6:	69ba      	ldr	r2, [r7, #24]
 80085e8:	440a      	add	r2, r1
 80085ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085f2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	3301      	adds	r3, #1
 80085f8:	61fb      	str	r3, [r7, #28]
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008600:	d81d      	bhi.n	800863e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	015a      	lsls	r2, r3, #5
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	4413      	add	r3, r2
 800860a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008618:	d0ec      	beq.n	80085f4 <USB_HC_Halt+0x1de>
 800861a:	e011      	b.n	8008640 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	4413      	add	r3, r2
 8008624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	697a      	ldr	r2, [r7, #20]
 800862c:	0151      	lsls	r1, r2, #5
 800862e:	69ba      	ldr	r2, [r7, #24]
 8008630:	440a      	add	r2, r1
 8008632:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008636:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800863a:	6013      	str	r3, [r2, #0]
 800863c:	e000      	b.n	8008640 <USB_HC_Halt+0x22a>
          break;
 800863e:	bf00      	nop
    }
  }

  return HAL_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3724      	adds	r7, #36	; 0x24
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr
	...

08008650 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008650:	b480      	push	{r7}
 8008652:	b087      	sub	sp, #28
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	460b      	mov	r3, r1
 800865a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008660:	78fb      	ldrb	r3, [r7, #3]
 8008662:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008664:	2301      	movs	r3, #1
 8008666:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	04da      	lsls	r2, r3, #19
 800866c:	4b15      	ldr	r3, [pc, #84]	; (80086c4 <USB_DoPing+0x74>)
 800866e:	4013      	ands	r3, r2
 8008670:	693a      	ldr	r2, [r7, #16]
 8008672:	0151      	lsls	r1, r2, #5
 8008674:	697a      	ldr	r2, [r7, #20]
 8008676:	440a      	add	r2, r1
 8008678:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800867c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008680:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	015a      	lsls	r2, r3, #5
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	4413      	add	r3, r2
 800868a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008698:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086a0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	015a      	lsls	r2, r3, #5
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	4413      	add	r3, r2
 80086aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ae:	461a      	mov	r2, r3
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	371c      	adds	r7, #28
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	1ff80000 	.word	0x1ff80000

080086c8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b086      	sub	sp, #24
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80086d4:	2300      	movs	r3, #0
 80086d6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f7ff f935 	bl	8007948 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80086de:	2110      	movs	r1, #16
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7ff f98f 	bl	8007a04 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7ff f9b0 	bl	8007a4c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80086ec:	2300      	movs	r3, #0
 80086ee:	613b      	str	r3, [r7, #16]
 80086f0:	e01f      	b.n	8008732 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	015a      	lsls	r2, r3, #5
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	4413      	add	r3, r2
 80086fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008708:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008710:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008718:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	015a      	lsls	r2, r3, #5
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	4413      	add	r3, r2
 8008722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008726:	461a      	mov	r2, r3
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	3301      	adds	r3, #1
 8008730:	613b      	str	r3, [r7, #16]
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	2b0f      	cmp	r3, #15
 8008736:	d9dc      	bls.n	80086f2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008738:	2300      	movs	r3, #0
 800873a:	613b      	str	r3, [r7, #16]
 800873c:	e034      	b.n	80087a8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	015a      	lsls	r2, r3, #5
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	4413      	add	r3, r2
 8008746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008754:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800875c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008764:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	015a      	lsls	r2, r3, #5
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	4413      	add	r3, r2
 800876e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008772:	461a      	mov	r2, r3
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	3301      	adds	r3, #1
 800877c:	617b      	str	r3, [r7, #20]
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008784:	d80c      	bhi.n	80087a0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	015a      	lsls	r2, r3, #5
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	4413      	add	r3, r2
 800878e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800879c:	d0ec      	beq.n	8008778 <USB_StopHost+0xb0>
 800879e:	e000      	b.n	80087a2 <USB_StopHost+0xda>
        break;
 80087a0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	3301      	adds	r3, #1
 80087a6:	613b      	str	r3, [r7, #16]
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	2b0f      	cmp	r3, #15
 80087ac:	d9c7      	bls.n	800873e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087b4:	461a      	mov	r2, r3
 80087b6:	f04f 33ff 	mov.w	r3, #4294967295
 80087ba:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f04f 32ff 	mov.w	r2, #4294967295
 80087c2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f7ff f8ae 	bl	8007926 <USB_EnableGlobalInt>

  return HAL_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3718      	adds	r7, #24
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80087d8:	4904      	ldr	r1, [pc, #16]	; (80087ec <MX_FATFS_Init+0x18>)
 80087da:	4805      	ldr	r0, [pc, #20]	; (80087f0 <MX_FATFS_Init+0x1c>)
 80087dc:	f006 f80a 	bl	800e7f4 <FATFS_LinkDriver>
 80087e0:	4603      	mov	r3, r0
 80087e2:	461a      	mov	r2, r3
 80087e4:	4b03      	ldr	r3, [pc, #12]	; (80087f4 <MX_FATFS_Init+0x20>)
 80087e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80087e8:	bf00      	nop
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	2000441c 	.word	0x2000441c
 80087f0:	08086ee4 	.word	0x08086ee4
 80087f4:	20006484 	.word	0x20006484

080087f8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80087f8:	b480      	push	{r7}
 80087fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80087fc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80087fe:	4618      	mov	r0, r3
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	4603      	mov	r3, r0
 8008810:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	4603      	mov	r3, r0
 8008828:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800882e:	79fb      	ldrb	r3, [r7, #7]
 8008830:	4619      	mov	r1, r3
 8008832:	4808      	ldr	r0, [pc, #32]	; (8008854 <USBH_status+0x34>)
 8008834:	f000 ff98 	bl	8009768 <USBH_MSC_UnitIsReady>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d002      	beq.n	8008844 <USBH_status+0x24>
  {
    res = RES_OK;
 800883e:	2300      	movs	r3, #0
 8008840:	73fb      	strb	r3, [r7, #15]
 8008842:	e001      	b.n	8008848 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008848:	7bfb      	ldrb	r3, [r7, #15]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20006488 	.word	0x20006488

08008858 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b094      	sub	sp, #80	; 0x50
 800885c:	af02      	add	r7, sp, #8
 800885e:	60b9      	str	r1, [r7, #8]
 8008860:	607a      	str	r2, [r7, #4]
 8008862:	603b      	str	r3, [r7, #0]
 8008864:	4603      	mov	r3, r0
 8008866:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800886e:	7bf9      	ldrb	r1, [r7, #15]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	4818      	ldr	r0, [pc, #96]	; (80088dc <USBH_read+0x84>)
 800887a:	f000 ffbf 	bl	80097fc <USBH_MSC_Read>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d103      	bne.n	800888c <USBH_read+0x34>
  {
    res = RES_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800888a:	e020      	b.n	80088ce <USBH_read+0x76>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800888c:	f107 0210 	add.w	r2, r7, #16
 8008890:	7bfb      	ldrb	r3, [r7, #15]
 8008892:	4619      	mov	r1, r3
 8008894:	4811      	ldr	r0, [pc, #68]	; (80088dc <USBH_read+0x84>)
 8008896:	f000 ff8d 	bl	80097b4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800889a:	7f7b      	ldrb	r3, [r7, #29]
 800889c:	2b3a      	cmp	r3, #58	; 0x3a
 800889e:	d005      	beq.n	80088ac <USBH_read+0x54>
 80088a0:	2b3a      	cmp	r3, #58	; 0x3a
 80088a2:	dc10      	bgt.n	80088c6 <USBH_read+0x6e>
 80088a4:	2b04      	cmp	r3, #4
 80088a6:	d001      	beq.n	80088ac <USBH_read+0x54>
 80088a8:	2b28      	cmp	r3, #40	; 0x28
 80088aa:	d10c      	bne.n	80088c6 <USBH_read+0x6e>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
 80088ac:	480c      	ldr	r0, [pc, #48]	; (80088e0 <USBH_read+0x88>)
 80088ae:	f006 fbbd 	bl	800f02c <iprintf>
 80088b2:	480c      	ldr	r0, [pc, #48]	; (80088e4 <USBH_read+0x8c>)
 80088b4:	f006 fbba 	bl	800f02c <iprintf>
 80088b8:	200a      	movs	r0, #10
 80088ba:	f006 fbcf 	bl	800f05c <putchar>
      res = RES_NOTRDY;
 80088be:	2303      	movs	r3, #3
 80088c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80088c4:	e003      	b.n	80088ce <USBH_read+0x76>

    default:
      res = RES_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80088cc:	bf00      	nop
    }
  }

  return res;
 80088ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3748      	adds	r7, #72	; 0x48
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	20006488 	.word	0x20006488
 80088e0:	0800fef4 	.word	0x0800fef4
 80088e4:	0800fefc 	.word	0x0800fefc

080088e8 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b094      	sub	sp, #80	; 0x50
 80088ec:	af02      	add	r7, sp, #8
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	607a      	str	r2, [r7, #4]
 80088f2:	603b      	str	r3, [r7, #0]
 80088f4:	4603      	mov	r3, r0
 80088f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80088fe:	7bf9      	ldrb	r1, [r7, #15]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	4820      	ldr	r0, [pc, #128]	; (800898c <USBH_write+0xa4>)
 800890a:	f000 ffe0 	bl	80098ce <USBH_MSC_Write>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d103      	bne.n	800891c <USBH_write+0x34>
  {
    res = RES_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800891a:	e031      	b.n	8008980 <USBH_write+0x98>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800891c:	f107 0210 	add.w	r2, r7, #16
 8008920:	7bfb      	ldrb	r3, [r7, #15]
 8008922:	4619      	mov	r1, r3
 8008924:	4819      	ldr	r0, [pc, #100]	; (800898c <USBH_write+0xa4>)
 8008926:	f000 ff45 	bl	80097b4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800892a:	7f7b      	ldrb	r3, [r7, #29]
 800892c:	2b3a      	cmp	r3, #58	; 0x3a
 800892e:	d016      	beq.n	800895e <USBH_write+0x76>
 8008930:	2b3a      	cmp	r3, #58	; 0x3a
 8008932:	dc21      	bgt.n	8008978 <USBH_write+0x90>
 8008934:	2b28      	cmp	r3, #40	; 0x28
 8008936:	d012      	beq.n	800895e <USBH_write+0x76>
 8008938:	2b28      	cmp	r3, #40	; 0x28
 800893a:	dc1d      	bgt.n	8008978 <USBH_write+0x90>
 800893c:	2b04      	cmp	r3, #4
 800893e:	d00e      	beq.n	800895e <USBH_write+0x76>
 8008940:	2b27      	cmp	r3, #39	; 0x27
 8008942:	d119      	bne.n	8008978 <USBH_write+0x90>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
 8008944:	4812      	ldr	r0, [pc, #72]	; (8008990 <USBH_write+0xa8>)
 8008946:	f006 fb71 	bl	800f02c <iprintf>
 800894a:	4812      	ldr	r0, [pc, #72]	; (8008994 <USBH_write+0xac>)
 800894c:	f006 fb6e 	bl	800f02c <iprintf>
 8008950:	200a      	movs	r0, #10
 8008952:	f006 fb83 	bl	800f05c <putchar>
      res = RES_WRPRT;
 8008956:	2302      	movs	r3, #2
 8008958:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800895c:	e010      	b.n	8008980 <USBH_write+0x98>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
 800895e:	480c      	ldr	r0, [pc, #48]	; (8008990 <USBH_write+0xa8>)
 8008960:	f006 fb64 	bl	800f02c <iprintf>
 8008964:	480c      	ldr	r0, [pc, #48]	; (8008998 <USBH_write+0xb0>)
 8008966:	f006 fb61 	bl	800f02c <iprintf>
 800896a:	200a      	movs	r0, #10
 800896c:	f006 fb76 	bl	800f05c <putchar>
      res = RES_NOTRDY;
 8008970:	2303      	movs	r3, #3
 8008972:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008976:	e003      	b.n	8008980 <USBH_write+0x98>

    default:
      res = RES_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800897e:	bf00      	nop
    }
  }

  return res;
 8008980:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008984:	4618      	mov	r0, r3
 8008986:	3748      	adds	r7, #72	; 0x48
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	20006488 	.word	0x20006488
 8008990:	0800fef4 	.word	0x0800fef4
 8008994:	0800ff14 	.word	0x0800ff14
 8008998:	0800fefc 	.word	0x0800fefc

0800899c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b090      	sub	sp, #64	; 0x40
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	4603      	mov	r3, r0
 80089a4:	603a      	str	r2, [r7, #0]
 80089a6:	71fb      	strb	r3, [r7, #7]
 80089a8:	460b      	mov	r3, r1
 80089aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80089b2:	79bb      	ldrb	r3, [r7, #6]
 80089b4:	2b03      	cmp	r3, #3
 80089b6:	d852      	bhi.n	8008a5e <USBH_ioctl+0xc2>
 80089b8:	a201      	add	r2, pc, #4	; (adr r2, 80089c0 <USBH_ioctl+0x24>)
 80089ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089be:	bf00      	nop
 80089c0:	080089d1 	.word	0x080089d1
 80089c4:	080089d9 	.word	0x080089d9
 80089c8:	08008a03 	.word	0x08008a03
 80089cc:	08008a2f 	.word	0x08008a2f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80089d6:	e045      	b.n	8008a64 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80089d8:	f107 0208 	add.w	r2, r7, #8
 80089dc:	79fb      	ldrb	r3, [r7, #7]
 80089de:	4619      	mov	r1, r3
 80089e0:	4823      	ldr	r0, [pc, #140]	; (8008a70 <USBH_ioctl+0xd4>)
 80089e2:	f000 fee7 	bl	80097b4 <USBH_MSC_GetLUNInfo>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d106      	bne.n	80089fa <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80089f8:	e034      	b.n	8008a64 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008a00:	e030      	b.n	8008a64 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008a02:	f107 0208 	add.w	r2, r7, #8
 8008a06:	79fb      	ldrb	r3, [r7, #7]
 8008a08:	4619      	mov	r1, r3
 8008a0a:	4819      	ldr	r0, [pc, #100]	; (8008a70 <USBH_ioctl+0xd4>)
 8008a0c:	f000 fed2 	bl	80097b4 <USBH_MSC_GetLUNInfo>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d107      	bne.n	8008a26 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008a16:	8a3b      	ldrh	r3, [r7, #16]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008a24:	e01e      	b.n	8008a64 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008a2c:	e01a      	b.n	8008a64 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008a2e:	f107 0208 	add.w	r2, r7, #8
 8008a32:	79fb      	ldrb	r3, [r7, #7]
 8008a34:	4619      	mov	r1, r3
 8008a36:	480e      	ldr	r0, [pc, #56]	; (8008a70 <USBH_ioctl+0xd4>)
 8008a38:	f000 febc 	bl	80097b4 <USBH_MSC_GetLUNInfo>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d109      	bne.n	8008a56 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008a42:	8a3b      	ldrh	r3, [r7, #16]
 8008a44:	0a5b      	lsrs	r3, r3, #9
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	461a      	mov	r2, r3
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008a54:	e006      	b.n	8008a64 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008a5c:	e002      	b.n	8008a64 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8008a5e:	2304      	movs	r3, #4
 8008a60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008a64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3740      	adds	r7, #64	; 0x40
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	20006488 	.word	0x20006488

08008a74 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008a74:	b590      	push	{r4, r7, lr}
 8008a76:	b089      	sub	sp, #36	; 0x24
 8008a78:	af04      	add	r7, sp, #16
 8008a7a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a82:	7919      	ldrb	r1, [r3, #4]
 8008a84:	2350      	movs	r3, #80	; 0x50
 8008a86:	2206      	movs	r2, #6
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f001 fe1b 	bl	800a6c4 <USBH_FindInterface>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
 8008a94:	2bff      	cmp	r3, #255	; 0xff
 8008a96:	d002      	beq.n	8008a9e <USBH_MSC_InterfaceInit+0x2a>
 8008a98:	7bfb      	ldrb	r3, [r7, #15]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d90f      	bls.n	8008abe <USBH_MSC_InterfaceInit+0x4a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 8008a9e:	4886      	ldr	r0, [pc, #536]	; (8008cb8 <USBH_MSC_InterfaceInit+0x244>)
 8008aa0:	f006 fac4 	bl	800f02c <iprintf>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4619      	mov	r1, r3
 8008aae:	4883      	ldr	r0, [pc, #524]	; (8008cbc <USBH_MSC_InterfaceInit+0x248>)
 8008ab0:	f006 fabc 	bl	800f02c <iprintf>
 8008ab4:	200a      	movs	r0, #10
 8008ab6:	f006 fad1 	bl	800f05c <putchar>
    return USBH_FAIL;
 8008aba:	2302      	movs	r3, #2
 8008abc:	e0f8      	b.n	8008cb0 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f001 fd96 	bl	800a5f4 <USBH_SelectInterface>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008acc:	7bbb      	ldrb	r3, [r7, #14]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d001      	beq.n	8008ad6 <USBH_MSC_InterfaceInit+0x62>
  {
    return USBH_FAIL;
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	e0ec      	b.n	8008cb0 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008adc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008ae0:	f006 f9d4 	bl	800ee8c <malloc>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008aee:	69db      	ldr	r3, [r3, #28]
 8008af0:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10a      	bne.n	8008b0e <USBH_MSC_InterfaceInit+0x9a>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
 8008af8:	486f      	ldr	r0, [pc, #444]	; (8008cb8 <USBH_MSC_InterfaceInit+0x244>)
 8008afa:	f006 fa97 	bl	800f02c <iprintf>
 8008afe:	4870      	ldr	r0, [pc, #448]	; (8008cc0 <USBH_MSC_InterfaceInit+0x24c>)
 8008b00:	f006 fa94 	bl	800f02c <iprintf>
 8008b04:	200a      	movs	r0, #10
 8008b06:	f006 faa9 	bl	800f05c <putchar>
    return USBH_FAIL;
 8008b0a:	2302      	movs	r3, #2
 8008b0c:	e0d0      	b.n	8008cb0 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b12:	2100      	movs	r1, #0
 8008b14:	68b8      	ldr	r0, [r7, #8]
 8008b16:	f006 f9d7 	bl	800eec8 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	211a      	movs	r1, #26
 8008b20:	fb01 f303 	mul.w	r3, r1, r3
 8008b24:	4413      	add	r3, r2
 8008b26:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	b25b      	sxtb	r3, r3
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	da16      	bge.n	8008b60 <USBH_MSC_InterfaceInit+0xec>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008b32:	7bfb      	ldrb	r3, [r7, #15]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	211a      	movs	r1, #26
 8008b38:	fb01 f303 	mul.w	r3, r1, r3
 8008b3c:	4413      	add	r3, r2
 8008b3e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b42:	781a      	ldrb	r2, [r3, #0]
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	211a      	movs	r1, #26
 8008b4e:	fb01 f303 	mul.w	r3, r1, r3
 8008b52:	4413      	add	r3, r2
 8008b54:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008b58:	881a      	ldrh	r2, [r3, #0]
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	815a      	strh	r2, [r3, #10]
 8008b5e:	e015      	b.n	8008b8c <USBH_MSC_InterfaceInit+0x118>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	211a      	movs	r1, #26
 8008b66:	fb01 f303 	mul.w	r3, r1, r3
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b70:	781a      	ldrb	r2, [r3, #0]
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	211a      	movs	r1, #26
 8008b7c:	fb01 f303 	mul.w	r3, r1, r3
 8008b80:	4413      	add	r3, r2
 8008b82:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008b86:	881a      	ldrh	r2, [r3, #0]
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	211a      	movs	r1, #26
 8008b92:	fb01 f303 	mul.w	r3, r1, r3
 8008b96:	4413      	add	r3, r2
 8008b98:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	b25b      	sxtb	r3, r3
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	da16      	bge.n	8008bd2 <USBH_MSC_InterfaceInit+0x15e>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	211a      	movs	r1, #26
 8008baa:	fb01 f303 	mul.w	r3, r1, r3
 8008bae:	4413      	add	r3, r2
 8008bb0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008bb4:	781a      	ldrb	r2, [r3, #0]
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	211a      	movs	r1, #26
 8008bc0:	fb01 f303 	mul.w	r3, r1, r3
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008bca:	881a      	ldrh	r2, [r3, #0]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	815a      	strh	r2, [r3, #10]
 8008bd0:	e015      	b.n	8008bfe <USBH_MSC_InterfaceInit+0x18a>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	211a      	movs	r1, #26
 8008bd8:	fb01 f303 	mul.w	r3, r1, r3
 8008bdc:	4413      	add	r3, r2
 8008bde:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008be2:	781a      	ldrb	r2, [r3, #0]
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	211a      	movs	r1, #26
 8008bee:	fb01 f303 	mul.w	r3, r1, r3
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008bf8:	881a      	ldrh	r2, [r3, #0]
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	2200      	movs	r2, #0
 8008c02:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	2200      	movs	r2, #0
 8008c08:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	799b      	ldrb	r3, [r3, #6]
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f003 f8cf 	bl	800bdba <USBH_AllocPipe>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	461a      	mov	r2, r3
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	79db      	ldrb	r3, [r3, #7]
 8008c28:	4619      	mov	r1, r3
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f003 f8c5 	bl	800bdba <USBH_AllocPipe>
 8008c30:	4603      	mov	r3, r0
 8008c32:	461a      	mov	r2, r3
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 feed 	bl	8009a18 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	7959      	ldrb	r1, [r3, #5]
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	7998      	ldrb	r0, [r3, #6]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	8912      	ldrh	r2, [r2, #8]
 8008c56:	9202      	str	r2, [sp, #8]
 8008c58:	2202      	movs	r2, #2
 8008c5a:	9201      	str	r2, [sp, #4]
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	4623      	mov	r3, r4
 8008c60:	4602      	mov	r2, r0
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f003 f87a 	bl	800bd5c <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	7919      	ldrb	r1, [r3, #4]
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	79d8      	ldrb	r0, [r3, #7]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	8952      	ldrh	r2, [r2, #10]
 8008c80:	9202      	str	r2, [sp, #8]
 8008c82:	2202      	movs	r2, #2
 8008c84:	9201      	str	r2, [sp, #4]
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	4623      	mov	r3, r4
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f003 f865 	bl	800bd5c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	791b      	ldrb	r3, [r3, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f006 f835 	bl	800ed0a <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	795b      	ldrb	r3, [r3, #5]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f006 f82e 	bl	800ed0a <USBH_LL_SetToggle>

  return USBH_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3714      	adds	r7, #20
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd90      	pop	{r4, r7, pc}
 8008cb8:	0800ff38 	.word	0x0800ff38
 8008cbc:	0800ff44 	.word	0x0800ff44
 8008cc0:	0800ff6c 	.word	0x0800ff6c

08008cc4 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cd2:	69db      	ldr	r3, [r3, #28]
 8008cd4:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	795b      	ldrb	r3, [r3, #5]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00e      	beq.n	8008cfc <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	795b      	ldrb	r3, [r3, #5]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f003 f858 	bl	800bd9a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	795b      	ldrb	r3, [r3, #5]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f003 f883 	bl	800bdfc <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	791b      	ldrb	r3, [r3, #4]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00e      	beq.n	8008d22 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	791b      	ldrb	r3, [r3, #4]
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f003 f845 	bl	800bd9a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	791b      	ldrb	r3, [r3, #4]
 8008d14:	4619      	mov	r1, r3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f003 f870 	bl	800bdfc <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d28:	69db      	ldr	r3, [r3, #28]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00b      	beq.n	8008d46 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d34:	69db      	ldr	r3, [r3, #28]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f006 f8b0 	bl	800ee9c <free>
    phost->pActiveClass->pData = 0U;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d42:	2200      	movs	r2, #0
 8008d44:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d5e:	69db      	ldr	r3, [r3, #28]
 8008d60:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d62:	2301      	movs	r3, #1
 8008d64:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	7b9b      	ldrb	r3, [r3, #14]
 8008d6a:	2b03      	cmp	r3, #3
 8008d6c:	d04a      	beq.n	8008e04 <USBH_MSC_ClassRequest+0xb4>
 8008d6e:	2b03      	cmp	r3, #3
 8008d70:	dc54      	bgt.n	8008e1c <USBH_MSC_ClassRequest+0xcc>
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d001      	beq.n	8008d7a <USBH_MSC_ClassRequest+0x2a>
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d150      	bne.n	8008e1c <USBH_MSC_ClassRequest+0xcc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fe2b 	bl	80099da <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008d84:	4603      	mov	r3, r0
 8008d86:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
 8008d8a:	2b03      	cmp	r3, #3
 8008d8c:	d104      	bne.n	8008d98 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	2200      	movs	r2, #0
 8008d92:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d140      	bne.n	8008e20 <USBH_MSC_ClassRequest+0xd0>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d804      	bhi.n	8008db0 <USBH_MSC_ClassRequest+0x60>
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	3301      	adds	r3, #1
 8008dac:	b2da      	uxtb	r2, r3
 8008dae:	e000      	b.n	8008db2 <USBH_MSC_ClassRequest+0x62>
 8008db0:	2202      	movs	r2, #2
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	4619      	mov	r1, r3
 8008dbc:	481c      	ldr	r0, [pc, #112]	; (8008e30 <USBH_MSC_ClassRequest+0xe0>)
 8008dbe:	f006 f935 	bl	800f02c <iprintf>
 8008dc2:	200a      	movs	r0, #10
 8008dc4:	f006 f94a 	bl	800f05c <putchar>

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008dc8:	2300      	movs	r3, #0
 8008dca:	73bb      	strb	r3, [r7, #14]
 8008dcc:	e014      	b.n	8008df8 <USBH_MSC_ClassRequest+0xa8>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008dce:	7bbb      	ldrb	r3, [r7, #14]
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	2134      	movs	r1, #52	; 0x34
 8008dd4:	fb01 f303 	mul.w	r3, r1, r3
 8008dd8:	4413      	add	r3, r2
 8008dda:	3392      	adds	r3, #146	; 0x92
 8008ddc:	2202      	movs	r2, #2
 8008dde:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008de0:	7bbb      	ldrb	r3, [r7, #14]
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	2134      	movs	r1, #52	; 0x34
 8008de6:	fb01 f303 	mul.w	r3, r1, r3
 8008dea:	4413      	add	r3, r2
 8008dec:	33c1      	adds	r3, #193	; 0xc1
 8008dee:	2200      	movs	r2, #0
 8008df0:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008df2:	7bbb      	ldrb	r3, [r7, #14]
 8008df4:	3301      	adds	r3, #1
 8008df6:	73bb      	strb	r3, [r7, #14]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	7bba      	ldrb	r2, [r7, #14]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d3e5      	bcc.n	8008dce <USBH_MSC_ClassRequest+0x7e>
        }
      }
      break;
 8008e02:	e00d      	b.n	8008e20 <USBH_MSC_ClassRequest+0xd0>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008e04:	2100      	movs	r1, #0
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f002 fb69 	bl	800b4de <USBH_ClrFeature>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d108      	bne.n	8008e24 <USBH_MSC_ClassRequest+0xd4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	7bda      	ldrb	r2, [r3, #15]
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	739a      	strb	r2, [r3, #14]
      }
      break;
 8008e1a:	e003      	b.n	8008e24 <USBH_MSC_ClassRequest+0xd4>

    default:
      break;
 8008e1c:	bf00      	nop
 8008e1e:	e002      	b.n	8008e26 <USBH_MSC_ClassRequest+0xd6>
      break;
 8008e20:	bf00      	nop
 8008e22:	e000      	b.n	8008e26 <USBH_MSC_ClassRequest+0xd6>
      break;
 8008e24:	bf00      	nop
  }

  return status;
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	0800ff94 	.word	0x0800ff94

08008e34 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e42:	69db      	ldr	r3, [r3, #28]
 8008e44:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008e46:	2301      	movs	r3, #1
 8008e48:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	7b1b      	ldrb	r3, [r3, #12]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d003      	beq.n	8008e62 <USBH_MSC_Process+0x2e>
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	f000 8355 	beq.w	800950a <USBH_MSC_Process+0x6d6>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008e60:	e356      	b.n	8009510 <USBH_MSC_Process+0x6dc>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	f080 8333 	bcs.w	80094da <USBH_MSC_Process+0x6a6>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	2334      	movs	r3, #52	; 0x34
 8008e80:	fb03 f301 	mul.w	r3, r3, r1
 8008e84:	4413      	add	r3, r2
 8008e86:	3391      	adds	r3, #145	; 0x91
 8008e88:	2201      	movs	r2, #1
 8008e8a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e92:	4619      	mov	r1, r3
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	2334      	movs	r3, #52	; 0x34
 8008e98:	fb03 f301 	mul.w	r3, r3, r1
 8008e9c:	4413      	add	r3, r2
 8008e9e:	3390      	adds	r3, #144	; 0x90
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	2b08      	cmp	r3, #8
 8008ea4:	f200 8327 	bhi.w	80094f6 <USBH_MSC_Process+0x6c2>
 8008ea8:	a201      	add	r2, pc, #4	; (adr r2, 8008eb0 <USBH_MSC_Process+0x7c>)
 8008eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eae:	bf00      	nop
 8008eb0:	08008ed5 	.word	0x08008ed5
 8008eb4:	080094f7 	.word	0x080094f7
 8008eb8:	0800901d 	.word	0x0800901d
 8008ebc:	080091d1 	.word	0x080091d1
 8008ec0:	08008f0f 	.word	0x08008f0f
 8008ec4:	0800933d 	.word	0x0800933d
 8008ec8:	080094f7 	.word	0x080094f7
 8008ecc:	080094f7 	.word	0x080094f7
 8008ed0:	080094c9 	.word	0x080094c9
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008eda:	4619      	mov	r1, r3
 8008edc:	48b6      	ldr	r0, [pc, #728]	; (80091b8 <USBH_MSC_Process+0x384>)
 8008ede:	f006 f8a5 	bl	800f02c <iprintf>
 8008ee2:	200a      	movs	r0, #10
 8008ee4:	f006 f8ba 	bl	800f05c <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008eee:	4619      	mov	r1, r3
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	2334      	movs	r3, #52	; 0x34
 8008ef4:	fb03 f301 	mul.w	r3, r3, r1
 8008ef8:	4413      	add	r3, r2
 8008efa:	3390      	adds	r3, #144	; 0x90
 8008efc:	2204      	movs	r2, #4
 8008efe:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008f0c:	e2fc      	b.n	8009508 <USBH_MSC_Process+0x6d4>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f14:	b2d9      	uxtb	r1, r3
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	2334      	movs	r3, #52	; 0x34
 8008f20:	fb03 f302 	mul.w	r3, r3, r2
 8008f24:	3398      	adds	r3, #152	; 0x98
 8008f26:	693a      	ldr	r2, [r7, #16]
 8008f28:	4413      	add	r3, r2
 8008f2a:	3307      	adds	r3, #7
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f001 f890 	bl	800a054 <USBH_MSC_SCSI_Inquiry>
 8008f34:	4603      	mov	r3, r0
 8008f36:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d141      	bne.n	8008fc2 <USBH_MSC_Process+0x18e>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f44:	461a      	mov	r2, r3
 8008f46:	2334      	movs	r3, #52	; 0x34
 8008f48:	fb03 f302 	mul.w	r3, r3, r2
 8008f4c:	3398      	adds	r3, #152	; 0x98
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	4413      	add	r3, r2
 8008f52:	330a      	adds	r3, #10
 8008f54:	4619      	mov	r1, r3
 8008f56:	4899      	ldr	r0, [pc, #612]	; (80091bc <USBH_MSC_Process+0x388>)
 8008f58:	f006 f868 	bl	800f02c <iprintf>
 8008f5c:	200a      	movs	r0, #10
 8008f5e:	f006 f87d 	bl	800f05c <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f68:	461a      	mov	r2, r3
 8008f6a:	2334      	movs	r3, #52	; 0x34
 8008f6c:	fb03 f302 	mul.w	r3, r3, r2
 8008f70:	33a0      	adds	r3, #160	; 0xa0
 8008f72:	693a      	ldr	r2, [r7, #16]
 8008f74:	4413      	add	r3, r2
 8008f76:	330b      	adds	r3, #11
 8008f78:	4619      	mov	r1, r3
 8008f7a:	4891      	ldr	r0, [pc, #580]	; (80091c0 <USBH_MSC_Process+0x38c>)
 8008f7c:	f006 f856 	bl	800f02c <iprintf>
 8008f80:	200a      	movs	r0, #10
 8008f82:	f006 f86b 	bl	800f05c <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	2334      	movs	r3, #52	; 0x34
 8008f90:	fb03 f302 	mul.w	r3, r3, r2
 8008f94:	33b0      	adds	r3, #176	; 0xb0
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	4413      	add	r3, r2
 8008f9a:	330c      	adds	r3, #12
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	4889      	ldr	r0, [pc, #548]	; (80091c4 <USBH_MSC_Process+0x390>)
 8008fa0:	f006 f844 	bl	800f02c <iprintf>
 8008fa4:	200a      	movs	r0, #10
 8008fa6:	f006 f859 	bl	800f05c <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	2334      	movs	r3, #52	; 0x34
 8008fb6:	fb03 f301 	mul.w	r3, r3, r1
 8008fba:	4413      	add	r3, r2
 8008fbc:	3390      	adds	r3, #144	; 0x90
 8008fbe:	2202      	movs	r2, #2
 8008fc0:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d10c      	bne.n	8008fe2 <USBH_MSC_Process+0x1ae>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fce:	4619      	mov	r1, r3
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	2334      	movs	r3, #52	; 0x34
 8008fd4:	fb03 f301 	mul.w	r3, r3, r1
 8008fd8:	4413      	add	r3, r2
 8008fda:	3390      	adds	r3, #144	; 0x90
 8008fdc:	2205      	movs	r2, #5
 8008fde:	701a      	strb	r2, [r3, #0]
            break;
 8008fe0:	e28b      	b.n	80094fa <USBH_MSC_Process+0x6c6>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	2b04      	cmp	r3, #4
 8008fe6:	f040 8288 	bne.w	80094fa <USBH_MSC_Process+0x6c6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	2334      	movs	r3, #52	; 0x34
 8008ff6:	fb03 f301 	mul.w	r3, r3, r1
 8008ffa:	4413      	add	r3, r2
 8008ffc:	3390      	adds	r3, #144	; 0x90
 8008ffe:	2201      	movs	r2, #1
 8009000:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009008:	4619      	mov	r1, r3
 800900a:	693a      	ldr	r2, [r7, #16]
 800900c:	2334      	movs	r3, #52	; 0x34
 800900e:	fb03 f301 	mul.w	r3, r3, r1
 8009012:	4413      	add	r3, r2
 8009014:	3391      	adds	r3, #145	; 0x91
 8009016:	2202      	movs	r2, #2
 8009018:	701a      	strb	r2, [r3, #0]
            break;
 800901a:	e26e      	b.n	80094fa <USBH_MSC_Process+0x6c6>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009022:	b2db      	uxtb	r3, r3
 8009024:	4619      	mov	r1, r3
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 ff56 	bl	8009ed8 <USBH_MSC_SCSI_TestUnitReady>
 800902c:	4603      	mov	r3, r0
 800902e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009030:	7bbb      	ldrb	r3, [r7, #14]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d14f      	bne.n	80090d6 <USBH_MSC_Process+0x2a2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800903c:	4619      	mov	r1, r3
 800903e:	693a      	ldr	r2, [r7, #16]
 8009040:	2334      	movs	r3, #52	; 0x34
 8009042:	fb03 f301 	mul.w	r3, r3, r1
 8009046:	4413      	add	r3, r2
 8009048:	3392      	adds	r3, #146	; 0x92
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d012      	beq.n	8009076 <USBH_MSC_Process+0x242>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009056:	4619      	mov	r1, r3
 8009058:	693a      	ldr	r2, [r7, #16]
 800905a:	2334      	movs	r3, #52	; 0x34
 800905c:	fb03 f301 	mul.w	r3, r3, r1
 8009060:	4413      	add	r3, r2
 8009062:	33c1      	adds	r3, #193	; 0xc1
 8009064:	2201      	movs	r2, #1
 8009066:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device ready");
 8009068:	4857      	ldr	r0, [pc, #348]	; (80091c8 <USBH_MSC_Process+0x394>)
 800906a:	f005 ffdf 	bl	800f02c <iprintf>
 800906e:	200a      	movs	r0, #10
 8009070:	f005 fff4 	bl	800f05c <putchar>
 8009074:	e00b      	b.n	800908e <USBH_MSC_Process+0x25a>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800907c:	4619      	mov	r1, r3
 800907e:	693a      	ldr	r2, [r7, #16]
 8009080:	2334      	movs	r3, #52	; 0x34
 8009082:	fb03 f301 	mul.w	r3, r3, r1
 8009086:	4413      	add	r3, r2
 8009088:	33c1      	adds	r3, #193	; 0xc1
 800908a:	2200      	movs	r2, #0
 800908c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009094:	4619      	mov	r1, r3
 8009096:	693a      	ldr	r2, [r7, #16]
 8009098:	2334      	movs	r3, #52	; 0x34
 800909a:	fb03 f301 	mul.w	r3, r3, r1
 800909e:	4413      	add	r3, r2
 80090a0:	3390      	adds	r3, #144	; 0x90
 80090a2:	2203      	movs	r2, #3
 80090a4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090ac:	4619      	mov	r1, r3
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	2334      	movs	r3, #52	; 0x34
 80090b2:	fb03 f301 	mul.w	r3, r3, r1
 80090b6:	4413      	add	r3, r2
 80090b8:	3391      	adds	r3, #145	; 0x91
 80090ba:	2200      	movs	r2, #0
 80090bc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090c4:	4619      	mov	r1, r3
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	2334      	movs	r3, #52	; 0x34
 80090ca:	fb03 f301 	mul.w	r3, r3, r1
 80090ce:	4413      	add	r3, r2
 80090d0:	3392      	adds	r3, #146	; 0x92
 80090d2:	2200      	movs	r2, #0
 80090d4:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80090d6:	7bbb      	ldrb	r3, [r7, #14]
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d150      	bne.n	800917e <USBH_MSC_Process+0x34a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090e2:	4619      	mov	r1, r3
 80090e4:	693a      	ldr	r2, [r7, #16]
 80090e6:	2334      	movs	r3, #52	; 0x34
 80090e8:	fb03 f301 	mul.w	r3, r3, r1
 80090ec:	4413      	add	r3, r2
 80090ee:	3392      	adds	r3, #146	; 0x92
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d012      	beq.n	800911c <USBH_MSC_Process+0x2e8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090fc:	4619      	mov	r1, r3
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	2334      	movs	r3, #52	; 0x34
 8009102:	fb03 f301 	mul.w	r3, r3, r1
 8009106:	4413      	add	r3, r2
 8009108:	33c1      	adds	r3, #193	; 0xc1
 800910a:	2201      	movs	r2, #1
 800910c:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device NOT ready");
 800910e:	482f      	ldr	r0, [pc, #188]	; (80091cc <USBH_MSC_Process+0x398>)
 8009110:	f005 ff8c 	bl	800f02c <iprintf>
 8009114:	200a      	movs	r0, #10
 8009116:	f005 ffa1 	bl	800f05c <putchar>
 800911a:	e00b      	b.n	8009134 <USBH_MSC_Process+0x300>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009122:	4619      	mov	r1, r3
 8009124:	693a      	ldr	r2, [r7, #16]
 8009126:	2334      	movs	r3, #52	; 0x34
 8009128:	fb03 f301 	mul.w	r3, r3, r1
 800912c:	4413      	add	r3, r2
 800912e:	33c1      	adds	r3, #193	; 0xc1
 8009130:	2200      	movs	r2, #0
 8009132:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800913a:	4619      	mov	r1, r3
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	2334      	movs	r3, #52	; 0x34
 8009140:	fb03 f301 	mul.w	r3, r3, r1
 8009144:	4413      	add	r3, r2
 8009146:	3390      	adds	r3, #144	; 0x90
 8009148:	2205      	movs	r2, #5
 800914a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009152:	4619      	mov	r1, r3
 8009154:	693a      	ldr	r2, [r7, #16]
 8009156:	2334      	movs	r3, #52	; 0x34
 8009158:	fb03 f301 	mul.w	r3, r3, r1
 800915c:	4413      	add	r3, r2
 800915e:	3391      	adds	r3, #145	; 0x91
 8009160:	2201      	movs	r2, #1
 8009162:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800916a:	4619      	mov	r1, r3
 800916c:	693a      	ldr	r2, [r7, #16]
 800916e:	2334      	movs	r3, #52	; 0x34
 8009170:	fb03 f301 	mul.w	r3, r3, r1
 8009174:	4413      	add	r3, r2
 8009176:	3392      	adds	r3, #146	; 0x92
 8009178:	2202      	movs	r2, #2
 800917a:	701a      	strb	r2, [r3, #0]
            break;
 800917c:	e1bf      	b.n	80094fe <USBH_MSC_Process+0x6ca>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800917e:	7bbb      	ldrb	r3, [r7, #14]
 8009180:	2b04      	cmp	r3, #4
 8009182:	f040 81bc 	bne.w	80094fe <USBH_MSC_Process+0x6ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800918c:	4619      	mov	r1, r3
 800918e:	693a      	ldr	r2, [r7, #16]
 8009190:	2334      	movs	r3, #52	; 0x34
 8009192:	fb03 f301 	mul.w	r3, r3, r1
 8009196:	4413      	add	r3, r2
 8009198:	3390      	adds	r3, #144	; 0x90
 800919a:	2201      	movs	r2, #1
 800919c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091a4:	4619      	mov	r1, r3
 80091a6:	693a      	ldr	r2, [r7, #16]
 80091a8:	2334      	movs	r3, #52	; 0x34
 80091aa:	fb03 f301 	mul.w	r3, r3, r1
 80091ae:	4413      	add	r3, r2
 80091b0:	3391      	adds	r3, #145	; 0x91
 80091b2:	2202      	movs	r2, #2
 80091b4:	701a      	strb	r2, [r3, #0]
            break;
 80091b6:	e1a2      	b.n	80094fe <USBH_MSC_Process+0x6ca>
 80091b8:	0800ffb0 	.word	0x0800ffb0
 80091bc:	0800ffbc 	.word	0x0800ffbc
 80091c0:	0800ffd4 	.word	0x0800ffd4
 80091c4:	0800ffec 	.word	0x0800ffec
 80091c8:	08010004 	.word	0x08010004
 80091cc:	08010018 	.word	0x08010018
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091d6:	b2d9      	uxtb	r1, r3
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091de:	461a      	mov	r2, r3
 80091e0:	2334      	movs	r3, #52	; 0x34
 80091e2:	fb03 f302 	mul.w	r3, r3, r2
 80091e6:	3390      	adds	r3, #144	; 0x90
 80091e8:	693a      	ldr	r2, [r7, #16]
 80091ea:	4413      	add	r3, r2
 80091ec:	3304      	adds	r3, #4
 80091ee:	461a      	mov	r2, r3
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 feb4 	bl	8009f5e <USBH_MSC_SCSI_ReadCapacity>
 80091f6:	4603      	mov	r3, r0
 80091f8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d170      	bne.n	80092e2 <USBH_MSC_Process+0x4ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009206:	4619      	mov	r1, r3
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	2334      	movs	r3, #52	; 0x34
 800920c:	fb03 f301 	mul.w	r3, r3, r1
 8009210:	4413      	add	r3, r2
 8009212:	33c1      	adds	r3, #193	; 0xc1
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d142      	bne.n	80092a0 <USBH_MSC_Process+0x46c>
                USBH_UsrLog("MSC Device capacity : %lu Bytes", \
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009220:	4619      	mov	r1, r3
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	2334      	movs	r3, #52	; 0x34
 8009226:	fb03 f301 	mul.w	r3, r3, r1
 800922a:	4413      	add	r3, r2
 800922c:	3394      	adds	r3, #148	; 0x94
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 8009236:	4610      	mov	r0, r2
 8009238:	6939      	ldr	r1, [r7, #16]
 800923a:	2234      	movs	r2, #52	; 0x34
 800923c:	fb02 f200 	mul.w	r2, r2, r0
 8009240:	440a      	add	r2, r1
 8009242:	3298      	adds	r2, #152	; 0x98
 8009244:	8812      	ldrh	r2, [r2, #0]
 8009246:	fb02 f303 	mul.w	r3, r2, r3
 800924a:	4619      	mov	r1, r3
 800924c:	48b3      	ldr	r0, [pc, #716]	; (800951c <USBH_MSC_Process+0x6e8>)
 800924e:	f005 feed 	bl	800f02c <iprintf>
 8009252:	200a      	movs	r0, #10
 8009254:	f005 ff02 	bl	800f05c <putchar>
                USBH_UsrLog("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800925e:	4619      	mov	r1, r3
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	2334      	movs	r3, #52	; 0x34
 8009264:	fb03 f301 	mul.w	r3, r3, r1
 8009268:	4413      	add	r3, r2
 800926a:	3394      	adds	r3, #148	; 0x94
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4619      	mov	r1, r3
 8009270:	48ab      	ldr	r0, [pc, #684]	; (8009520 <USBH_MSC_Process+0x6ec>)
 8009272:	f005 fedb 	bl	800f02c <iprintf>
 8009276:	200a      	movs	r0, #10
 8009278:	f005 fef0 	bl	800f05c <putchar>
                USBH_UsrLog("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009282:	4619      	mov	r1, r3
 8009284:	693a      	ldr	r2, [r7, #16]
 8009286:	2334      	movs	r3, #52	; 0x34
 8009288:	fb03 f301 	mul.w	r3, r3, r1
 800928c:	4413      	add	r3, r2
 800928e:	3398      	adds	r3, #152	; 0x98
 8009290:	881b      	ldrh	r3, [r3, #0]
 8009292:	4619      	mov	r1, r3
 8009294:	48a3      	ldr	r0, [pc, #652]	; (8009524 <USBH_MSC_Process+0x6f0>)
 8009296:	f005 fec9 	bl	800f02c <iprintf>
 800929a:	200a      	movs	r0, #10
 800929c:	f005 fede 	bl	800f05c <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092a6:	4619      	mov	r1, r3
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	2334      	movs	r3, #52	; 0x34
 80092ac:	fb03 f301 	mul.w	r3, r3, r1
 80092b0:	4413      	add	r3, r2
 80092b2:	3390      	adds	r3, #144	; 0x90
 80092b4:	2201      	movs	r2, #1
 80092b6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092be:	4619      	mov	r1, r3
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	2334      	movs	r3, #52	; 0x34
 80092c4:	fb03 f301 	mul.w	r3, r3, r1
 80092c8:	4413      	add	r3, r2
 80092ca:	3391      	adds	r3, #145	; 0x91
 80092cc:	2200      	movs	r2, #0
 80092ce:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092d6:	3301      	adds	r3, #1
 80092d8:	b29a      	uxth	r2, r3
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80092e0:	e10f      	b.n	8009502 <USBH_MSC_Process+0x6ce>
            else if (scsi_status == USBH_FAIL)
 80092e2:	7bfb      	ldrb	r3, [r7, #15]
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d10c      	bne.n	8009302 <USBH_MSC_Process+0x4ce>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092ee:	4619      	mov	r1, r3
 80092f0:	693a      	ldr	r2, [r7, #16]
 80092f2:	2334      	movs	r3, #52	; 0x34
 80092f4:	fb03 f301 	mul.w	r3, r3, r1
 80092f8:	4413      	add	r3, r2
 80092fa:	3390      	adds	r3, #144	; 0x90
 80092fc:	2205      	movs	r2, #5
 80092fe:	701a      	strb	r2, [r3, #0]
            break;
 8009300:	e0ff      	b.n	8009502 <USBH_MSC_Process+0x6ce>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009302:	7bfb      	ldrb	r3, [r7, #15]
 8009304:	2b04      	cmp	r3, #4
 8009306:	f040 80fc 	bne.w	8009502 <USBH_MSC_Process+0x6ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009310:	4619      	mov	r1, r3
 8009312:	693a      	ldr	r2, [r7, #16]
 8009314:	2334      	movs	r3, #52	; 0x34
 8009316:	fb03 f301 	mul.w	r3, r3, r1
 800931a:	4413      	add	r3, r2
 800931c:	3390      	adds	r3, #144	; 0x90
 800931e:	2201      	movs	r2, #1
 8009320:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009328:	4619      	mov	r1, r3
 800932a:	693a      	ldr	r2, [r7, #16]
 800932c:	2334      	movs	r3, #52	; 0x34
 800932e:	fb03 f301 	mul.w	r3, r3, r1
 8009332:	4413      	add	r3, r2
 8009334:	3391      	adds	r3, #145	; 0x91
 8009336:	2202      	movs	r2, #2
 8009338:	701a      	strb	r2, [r3, #0]
            break;
 800933a:	e0e2      	b.n	8009502 <USBH_MSC_Process+0x6ce>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009342:	b2d9      	uxtb	r1, r3
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800934a:	461a      	mov	r2, r3
 800934c:	2334      	movs	r3, #52	; 0x34
 800934e:	fb03 f302 	mul.w	r3, r3, r2
 8009352:	3398      	adds	r3, #152	; 0x98
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	4413      	add	r3, r2
 8009358:	3304      	adds	r3, #4
 800935a:	461a      	mov	r2, r3
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 ff1e 	bl	800a19e <USBH_MSC_SCSI_RequestSense>
 8009362:	4603      	mov	r3, r0
 8009364:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009366:	7bfb      	ldrb	r3, [r7, #15]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d17b      	bne.n	8009464 <USBH_MSC_Process+0x630>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009372:	4619      	mov	r1, r3
 8009374:	693a      	ldr	r2, [r7, #16]
 8009376:	2334      	movs	r3, #52	; 0x34
 8009378:	fb03 f301 	mul.w	r3, r3, r1
 800937c:	4413      	add	r3, r2
 800937e:	339c      	adds	r3, #156	; 0x9c
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	2b06      	cmp	r3, #6
 8009384:	d00c      	beq.n	80093a0 <USBH_MSC_Process+0x56c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800938c:	4619      	mov	r1, r3
 800938e:	693a      	ldr	r2, [r7, #16]
 8009390:	2334      	movs	r3, #52	; 0x34
 8009392:	fb03 f301 	mul.w	r3, r3, r1
 8009396:	4413      	add	r3, r2
 8009398:	339c      	adds	r3, #156	; 0x9c
 800939a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800939c:	2b02      	cmp	r3, #2
 800939e:	d117      	bne.n	80093d0 <USBH_MSC_Process+0x59c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d80c      	bhi.n	80093d0 <USBH_MSC_Process+0x59c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093bc:	4619      	mov	r1, r3
 80093be:	693a      	ldr	r2, [r7, #16]
 80093c0:	2334      	movs	r3, #52	; 0x34
 80093c2:	fb03 f301 	mul.w	r3, r3, r1
 80093c6:	4413      	add	r3, r2
 80093c8:	3390      	adds	r3, #144	; 0x90
 80093ca:	2202      	movs	r2, #2
 80093cc:	701a      	strb	r2, [r3, #0]
                  break;
 80093ce:	e09b      	b.n	8009508 <USBH_MSC_Process+0x6d4>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093d6:	4619      	mov	r1, r3
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	2334      	movs	r3, #52	; 0x34
 80093dc:	fb03 f301 	mul.w	r3, r3, r1
 80093e0:	4413      	add	r3, r2
 80093e2:	339c      	adds	r3, #156	; 0x9c
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	4619      	mov	r1, r3
 80093e8:	484f      	ldr	r0, [pc, #316]	; (8009528 <USBH_MSC_Process+0x6f4>)
 80093ea:	f005 fe1f 	bl	800f02c <iprintf>
 80093ee:	200a      	movs	r0, #10
 80093f0:	f005 fe34 	bl	800f05c <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093fa:	4619      	mov	r1, r3
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	2334      	movs	r3, #52	; 0x34
 8009400:	fb03 f301 	mul.w	r3, r3, r1
 8009404:	4413      	add	r3, r2
 8009406:	339d      	adds	r3, #157	; 0x9d
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	4619      	mov	r1, r3
 800940c:	4847      	ldr	r0, [pc, #284]	; (800952c <USBH_MSC_Process+0x6f8>)
 800940e:	f005 fe0d 	bl	800f02c <iprintf>
 8009412:	200a      	movs	r0, #10
 8009414:	f005 fe22 	bl	800f05c <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800941e:	4619      	mov	r1, r3
 8009420:	693a      	ldr	r2, [r7, #16]
 8009422:	2334      	movs	r3, #52	; 0x34
 8009424:	fb03 f301 	mul.w	r3, r3, r1
 8009428:	4413      	add	r3, r2
 800942a:	339e      	adds	r3, #158	; 0x9e
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	4619      	mov	r1, r3
 8009430:	483f      	ldr	r0, [pc, #252]	; (8009530 <USBH_MSC_Process+0x6fc>)
 8009432:	f005 fdfb 	bl	800f02c <iprintf>
 8009436:	200a      	movs	r0, #10
 8009438:	f005 fe10 	bl	800f05c <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009442:	4619      	mov	r1, r3
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	2334      	movs	r3, #52	; 0x34
 8009448:	fb03 f301 	mul.w	r3, r3, r1
 800944c:	4413      	add	r3, r2
 800944e:	3390      	adds	r3, #144	; 0x90
 8009450:	2201      	movs	r2, #1
 8009452:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800945a:	3301      	adds	r3, #1
 800945c:	b29a      	uxth	r2, r3
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8009464:	7bfb      	ldrb	r3, [r7, #15]
 8009466:	2b02      	cmp	r3, #2
 8009468:	d112      	bne.n	8009490 <USBH_MSC_Process+0x65c>
              USBH_UsrLog("MSC Device NOT ready");
 800946a:	4832      	ldr	r0, [pc, #200]	; (8009534 <USBH_MSC_Process+0x700>)
 800946c:	f005 fdde 	bl	800f02c <iprintf>
 8009470:	200a      	movs	r0, #10
 8009472:	f005 fdf3 	bl	800f05c <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800947c:	4619      	mov	r1, r3
 800947e:	693a      	ldr	r2, [r7, #16]
 8009480:	2334      	movs	r3, #52	; 0x34
 8009482:	fb03 f301 	mul.w	r3, r3, r1
 8009486:	4413      	add	r3, r2
 8009488:	3390      	adds	r3, #144	; 0x90
 800948a:	2208      	movs	r2, #8
 800948c:	701a      	strb	r2, [r3, #0]
            break;
 800948e:	e03a      	b.n	8009506 <USBH_MSC_Process+0x6d2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009490:	7bfb      	ldrb	r3, [r7, #15]
 8009492:	2b04      	cmp	r3, #4
 8009494:	d137      	bne.n	8009506 <USBH_MSC_Process+0x6d2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800949c:	4619      	mov	r1, r3
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	2334      	movs	r3, #52	; 0x34
 80094a2:	fb03 f301 	mul.w	r3, r3, r1
 80094a6:	4413      	add	r3, r2
 80094a8:	3390      	adds	r3, #144	; 0x90
 80094aa:	2201      	movs	r2, #1
 80094ac:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094b4:	4619      	mov	r1, r3
 80094b6:	693a      	ldr	r2, [r7, #16]
 80094b8:	2334      	movs	r3, #52	; 0x34
 80094ba:	fb03 f301 	mul.w	r3, r3, r1
 80094be:	4413      	add	r3, r2
 80094c0:	3391      	adds	r3, #145	; 0x91
 80094c2:	2202      	movs	r2, #2
 80094c4:	701a      	strb	r2, [r3, #0]
            break;
 80094c6:	e01e      	b.n	8009506 <USBH_MSC_Process+0x6d2>
            MSC_Handle->current_lun++;
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094ce:	3301      	adds	r3, #1
 80094d0:	b29a      	uxth	r2, r3
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80094d8:	e016      	b.n	8009508 <USBH_MSC_Process+0x6d4>
        MSC_Handle->current_lun = 0U;
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	2200      	movs	r2, #0
 80094de:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	2201      	movs	r2, #1
 80094e6:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094ee:	2102      	movs	r1, #2
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	4798      	blx	r3
      break;
 80094f4:	e00c      	b.n	8009510 <USBH_MSC_Process+0x6dc>
            break;
 80094f6:	bf00      	nop
 80094f8:	e00a      	b.n	8009510 <USBH_MSC_Process+0x6dc>
            break;
 80094fa:	bf00      	nop
 80094fc:	e008      	b.n	8009510 <USBH_MSC_Process+0x6dc>
            break;
 80094fe:	bf00      	nop
 8009500:	e006      	b.n	8009510 <USBH_MSC_Process+0x6dc>
            break;
 8009502:	bf00      	nop
 8009504:	e004      	b.n	8009510 <USBH_MSC_Process+0x6dc>
            break;
 8009506:	bf00      	nop
      break;
 8009508:	e002      	b.n	8009510 <USBH_MSC_Process+0x6dc>
      error = USBH_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	75fb      	strb	r3, [r7, #23]
      break;
 800950e:	bf00      	nop
  }
  return error;
 8009510:	7dfb      	ldrb	r3, [r7, #23]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3718      	adds	r7, #24
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	08010030 	.word	0x08010030
 8009520:	08010050 	.word	0x08010050
 8009524:	08010064 	.word	0x08010064
 8009528:	08010078 	.word	0x08010078
 800952c:	08010088 	.word	0x08010088
 8009530:	080100a4 	.word	0x080100a4
 8009534:	08010018 	.word	0x08010018

08009538 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	370c      	adds	r7, #12
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
	...

08009550 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b088      	sub	sp, #32
 8009554:	af02      	add	r7, sp, #8
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	460b      	mov	r3, r1
 800955a:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009562:	69db      	ldr	r3, [r3, #28]
 8009564:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009566:	2301      	movs	r3, #1
 8009568:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800956a:	2301      	movs	r3, #1
 800956c:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800956e:	78fb      	ldrb	r3, [r7, #3]
 8009570:	693a      	ldr	r2, [r7, #16]
 8009572:	2134      	movs	r1, #52	; 0x34
 8009574:	fb01 f303 	mul.w	r3, r1, r3
 8009578:	4413      	add	r3, r2
 800957a:	3390      	adds	r3, #144	; 0x90
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	2b07      	cmp	r3, #7
 8009580:	d03d      	beq.n	80095fe <USBH_MSC_RdWrProcess+0xae>
 8009582:	2b07      	cmp	r3, #7
 8009584:	f300 80dc 	bgt.w	8009740 <USBH_MSC_RdWrProcess+0x1f0>
 8009588:	2b05      	cmp	r3, #5
 800958a:	d06d      	beq.n	8009668 <USBH_MSC_RdWrProcess+0x118>
 800958c:	2b06      	cmp	r3, #6
 800958e:	f040 80d7 	bne.w	8009740 <USBH_MSC_RdWrProcess+0x1f0>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8009592:	78f9      	ldrb	r1, [r7, #3]
 8009594:	2300      	movs	r3, #0
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	2300      	movs	r3, #0
 800959a:	2200      	movs	r2, #0
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fee2 	bl	800a366 <USBH_MSC_SCSI_Read>
 80095a2:	4603      	mov	r3, r0
 80095a4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80095a6:	7bfb      	ldrb	r3, [r7, #15]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10b      	bne.n	80095c4 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80095ac:	78fb      	ldrb	r3, [r7, #3]
 80095ae:	693a      	ldr	r2, [r7, #16]
 80095b0:	2134      	movs	r1, #52	; 0x34
 80095b2:	fb01 f303 	mul.w	r3, r1, r3
 80095b6:	4413      	add	r3, r2
 80095b8:	3390      	adds	r3, #144	; 0x90
 80095ba:	2201      	movs	r2, #1
 80095bc:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80095be:	2300      	movs	r3, #0
 80095c0:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80095c2:	e0bf      	b.n	8009744 <USBH_MSC_RdWrProcess+0x1f4>
      else if (scsi_status == USBH_FAIL)
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d109      	bne.n	80095de <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80095ca:	78fb      	ldrb	r3, [r7, #3]
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	2134      	movs	r1, #52	; 0x34
 80095d0:	fb01 f303 	mul.w	r3, r1, r3
 80095d4:	4413      	add	r3, r2
 80095d6:	3390      	adds	r3, #144	; 0x90
 80095d8:	2205      	movs	r2, #5
 80095da:	701a      	strb	r2, [r3, #0]
      break;
 80095dc:	e0b2      	b.n	8009744 <USBH_MSC_RdWrProcess+0x1f4>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80095de:	7bfb      	ldrb	r3, [r7, #15]
 80095e0:	2b04      	cmp	r3, #4
 80095e2:	f040 80af 	bne.w	8009744 <USBH_MSC_RdWrProcess+0x1f4>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80095e6:	78fb      	ldrb	r3, [r7, #3]
 80095e8:	693a      	ldr	r2, [r7, #16]
 80095ea:	2134      	movs	r1, #52	; 0x34
 80095ec:	fb01 f303 	mul.w	r3, r1, r3
 80095f0:	4413      	add	r3, r2
 80095f2:	3390      	adds	r3, #144	; 0x90
 80095f4:	2208      	movs	r2, #8
 80095f6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80095f8:	2302      	movs	r3, #2
 80095fa:	75fb      	strb	r3, [r7, #23]
      break;
 80095fc:	e0a2      	b.n	8009744 <USBH_MSC_RdWrProcess+0x1f4>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80095fe:	78f9      	ldrb	r1, [r7, #3]
 8009600:	2300      	movs	r3, #0
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	2300      	movs	r3, #0
 8009606:	2200      	movs	r2, #0
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fe41 	bl	800a290 <USBH_MSC_SCSI_Write>
 800960e:	4603      	mov	r3, r0
 8009610:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009612:	7bfb      	ldrb	r3, [r7, #15]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10b      	bne.n	8009630 <USBH_MSC_RdWrProcess+0xe0>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009618:	78fb      	ldrb	r3, [r7, #3]
 800961a:	693a      	ldr	r2, [r7, #16]
 800961c:	2134      	movs	r1, #52	; 0x34
 800961e:	fb01 f303 	mul.w	r3, r1, r3
 8009622:	4413      	add	r3, r2
 8009624:	3390      	adds	r3, #144	; 0x90
 8009626:	2201      	movs	r2, #1
 8009628:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800962a:	2300      	movs	r3, #0
 800962c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800962e:	e08b      	b.n	8009748 <USBH_MSC_RdWrProcess+0x1f8>
      else if (scsi_status == USBH_FAIL)
 8009630:	7bfb      	ldrb	r3, [r7, #15]
 8009632:	2b02      	cmp	r3, #2
 8009634:	d109      	bne.n	800964a <USBH_MSC_RdWrProcess+0xfa>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009636:	78fb      	ldrb	r3, [r7, #3]
 8009638:	693a      	ldr	r2, [r7, #16]
 800963a:	2134      	movs	r1, #52	; 0x34
 800963c:	fb01 f303 	mul.w	r3, r1, r3
 8009640:	4413      	add	r3, r2
 8009642:	3390      	adds	r3, #144	; 0x90
 8009644:	2205      	movs	r2, #5
 8009646:	701a      	strb	r2, [r3, #0]
      break;
 8009648:	e07e      	b.n	8009748 <USBH_MSC_RdWrProcess+0x1f8>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800964a:	7bfb      	ldrb	r3, [r7, #15]
 800964c:	2b04      	cmp	r3, #4
 800964e:	d17b      	bne.n	8009748 <USBH_MSC_RdWrProcess+0x1f8>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009650:	78fb      	ldrb	r3, [r7, #3]
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	2134      	movs	r1, #52	; 0x34
 8009656:	fb01 f303 	mul.w	r3, r1, r3
 800965a:	4413      	add	r3, r2
 800965c:	3390      	adds	r3, #144	; 0x90
 800965e:	2208      	movs	r2, #8
 8009660:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009662:	2302      	movs	r3, #2
 8009664:	75fb      	strb	r3, [r7, #23]
      break;
 8009666:	e06f      	b.n	8009748 <USBH_MSC_RdWrProcess+0x1f8>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8009668:	78fb      	ldrb	r3, [r7, #3]
 800966a:	2234      	movs	r2, #52	; 0x34
 800966c:	fb02 f303 	mul.w	r3, r2, r3
 8009670:	3398      	adds	r3, #152	; 0x98
 8009672:	693a      	ldr	r2, [r7, #16]
 8009674:	4413      	add	r3, r2
 8009676:	1d1a      	adds	r2, r3, #4
 8009678:	78fb      	ldrb	r3, [r7, #3]
 800967a:	4619      	mov	r1, r3
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 fd8e 	bl	800a19e <USBH_MSC_SCSI_RequestSense>
 8009682:	4603      	mov	r3, r0
 8009684:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009686:	7bfb      	ldrb	r3, [r7, #15]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d140      	bne.n	800970e <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 800968c:	78fb      	ldrb	r3, [r7, #3]
 800968e:	693a      	ldr	r2, [r7, #16]
 8009690:	2134      	movs	r1, #52	; 0x34
 8009692:	fb01 f303 	mul.w	r3, r1, r3
 8009696:	4413      	add	r3, r2
 8009698:	339c      	adds	r3, #156	; 0x9c
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	4619      	mov	r1, r3
 800969e:	482e      	ldr	r0, [pc, #184]	; (8009758 <USBH_MSC_RdWrProcess+0x208>)
 80096a0:	f005 fcc4 	bl	800f02c <iprintf>
 80096a4:	200a      	movs	r0, #10
 80096a6:	f005 fcd9 	bl	800f05c <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
 80096aa:	78fb      	ldrb	r3, [r7, #3]
 80096ac:	693a      	ldr	r2, [r7, #16]
 80096ae:	2134      	movs	r1, #52	; 0x34
 80096b0:	fb01 f303 	mul.w	r3, r1, r3
 80096b4:	4413      	add	r3, r2
 80096b6:	339d      	adds	r3, #157	; 0x9d
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	4619      	mov	r1, r3
 80096bc:	4827      	ldr	r0, [pc, #156]	; (800975c <USBH_MSC_RdWrProcess+0x20c>)
 80096be:	f005 fcb5 	bl	800f02c <iprintf>
 80096c2:	200a      	movs	r0, #10
 80096c4:	f005 fcca 	bl	800f05c <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
 80096c8:	78fb      	ldrb	r3, [r7, #3]
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	2134      	movs	r1, #52	; 0x34
 80096ce:	fb01 f303 	mul.w	r3, r1, r3
 80096d2:	4413      	add	r3, r2
 80096d4:	339e      	adds	r3, #158	; 0x9e
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	4619      	mov	r1, r3
 80096da:	4821      	ldr	r0, [pc, #132]	; (8009760 <USBH_MSC_RdWrProcess+0x210>)
 80096dc:	f005 fca6 	bl	800f02c <iprintf>
 80096e0:	200a      	movs	r0, #10
 80096e2:	f005 fcbb 	bl	800f05c <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80096e6:	78fb      	ldrb	r3, [r7, #3]
 80096e8:	693a      	ldr	r2, [r7, #16]
 80096ea:	2134      	movs	r1, #52	; 0x34
 80096ec:	fb01 f303 	mul.w	r3, r1, r3
 80096f0:	4413      	add	r3, r2
 80096f2:	3390      	adds	r3, #144	; 0x90
 80096f4:	2201      	movs	r2, #1
 80096f6:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80096f8:	78fb      	ldrb	r3, [r7, #3]
 80096fa:	693a      	ldr	r2, [r7, #16]
 80096fc:	2134      	movs	r1, #52	; 0x34
 80096fe:	fb01 f303 	mul.w	r3, r1, r3
 8009702:	4413      	add	r3, r2
 8009704:	3391      	adds	r3, #145	; 0x91
 8009706:	2202      	movs	r2, #2
 8009708:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800970a:	2302      	movs	r3, #2
 800970c:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800970e:	7bfb      	ldrb	r3, [r7, #15]
 8009710:	2b02      	cmp	r3, #2
 8009712:	d106      	bne.n	8009722 <USBH_MSC_RdWrProcess+0x1d2>
      {
        USBH_UsrLog("MSC Device NOT ready");
 8009714:	4813      	ldr	r0, [pc, #76]	; (8009764 <USBH_MSC_RdWrProcess+0x214>)
 8009716:	f005 fc89 	bl	800f02c <iprintf>
 800971a:	200a      	movs	r0, #10
 800971c:	f005 fc9e 	bl	800f05c <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009720:	e014      	b.n	800974c <USBH_MSC_RdWrProcess+0x1fc>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009722:	7bfb      	ldrb	r3, [r7, #15]
 8009724:	2b04      	cmp	r3, #4
 8009726:	d111      	bne.n	800974c <USBH_MSC_RdWrProcess+0x1fc>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009728:	78fb      	ldrb	r3, [r7, #3]
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	2134      	movs	r1, #52	; 0x34
 800972e:	fb01 f303 	mul.w	r3, r1, r3
 8009732:	4413      	add	r3, r2
 8009734:	3390      	adds	r3, #144	; 0x90
 8009736:	2208      	movs	r2, #8
 8009738:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800973a:	2302      	movs	r3, #2
 800973c:	75fb      	strb	r3, [r7, #23]
      break;
 800973e:	e005      	b.n	800974c <USBH_MSC_RdWrProcess+0x1fc>

    default:
      break;
 8009740:	bf00      	nop
 8009742:	e004      	b.n	800974e <USBH_MSC_RdWrProcess+0x1fe>
      break;
 8009744:	bf00      	nop
 8009746:	e002      	b.n	800974e <USBH_MSC_RdWrProcess+0x1fe>
      break;
 8009748:	bf00      	nop
 800974a:	e000      	b.n	800974e <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800974c:	bf00      	nop

  }
  return error;
 800974e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3718      	adds	r7, #24
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	08010078 	.word	0x08010078
 800975c:	08010088 	.word	0x08010088
 8009760:	080100a4 	.word	0x080100a4
 8009764:	08010018 	.word	0x08010018

08009768 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009768:	b480      	push	{r7}
 800976a:	b085      	sub	sp, #20
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	460b      	mov	r3, r1
 8009772:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800977a:	69db      	ldr	r3, [r3, #28]
 800977c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b0b      	cmp	r3, #11
 8009786:	d10c      	bne.n	80097a2 <USBH_MSC_UnitIsReady+0x3a>
 8009788:	78fb      	ldrb	r3, [r7, #3]
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	2134      	movs	r1, #52	; 0x34
 800978e:	fb01 f303 	mul.w	r3, r1, r3
 8009792:	4413      	add	r3, r2
 8009794:	3391      	adds	r3, #145	; 0x91
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d102      	bne.n	80097a2 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800979c:	2301      	movs	r3, #1
 800979e:	73fb      	strb	r3, [r7, #15]
 80097a0:	e001      	b.n	80097a6 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80097a2:	2300      	movs	r3, #0
 80097a4:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80097a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3714      	adds	r7, #20
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	460b      	mov	r3, r1
 80097be:	607a      	str	r2, [r7, #4]
 80097c0:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097c8:	69db      	ldr	r3, [r3, #28]
 80097ca:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	2b0b      	cmp	r3, #11
 80097d4:	d10d      	bne.n	80097f2 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80097d6:	7afb      	ldrb	r3, [r7, #11]
 80097d8:	2234      	movs	r2, #52	; 0x34
 80097da:	fb02 f303 	mul.w	r3, r2, r3
 80097de:	3390      	adds	r3, #144	; 0x90
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	4413      	add	r3, r2
 80097e4:	2234      	movs	r2, #52	; 0x34
 80097e6:	4619      	mov	r1, r3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f005 fb5f 	bl	800eeac <memcpy>
    return USBH_OK;
 80097ee:	2300      	movs	r3, #0
 80097f0:	e000      	b.n	80097f4 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80097f2:	2302      	movs	r3, #2
  }
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3718      	adds	r7, #24
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b088      	sub	sp, #32
 8009800:	af02      	add	r7, sp, #8
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	607a      	str	r2, [r7, #4]
 8009806:	603b      	str	r3, [r7, #0]
 8009808:	460b      	mov	r3, r1
 800980a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009812:	69db      	ldr	r3, [r3, #28]
 8009814:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800981c:	b2db      	uxtb	r3, r3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00e      	beq.n	8009840 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009828:	2b0b      	cmp	r3, #11
 800982a:	d109      	bne.n	8009840 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800982c:	7afb      	ldrb	r3, [r7, #11]
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	2134      	movs	r1, #52	; 0x34
 8009832:	fb01 f303 	mul.w	r3, r1, r3
 8009836:	4413      	add	r3, r2
 8009838:	3390      	adds	r3, #144	; 0x90
 800983a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800983c:	2b01      	cmp	r3, #1
 800983e:	d001      	beq.n	8009844 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009840:	2302      	movs	r3, #2
 8009842:	e040      	b.n	80098c6 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	2206      	movs	r2, #6
 8009848:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800984a:	7afb      	ldrb	r3, [r7, #11]
 800984c:	697a      	ldr	r2, [r7, #20]
 800984e:	2134      	movs	r1, #52	; 0x34
 8009850:	fb01 f303 	mul.w	r3, r1, r3
 8009854:	4413      	add	r3, r2
 8009856:	3390      	adds	r3, #144	; 0x90
 8009858:	2206      	movs	r2, #6
 800985a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800985c:	7afb      	ldrb	r3, [r7, #11]
 800985e:	b29a      	uxth	r2, r3
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009866:	7af9      	ldrb	r1, [r7, #11]
 8009868:	6a3b      	ldr	r3, [r7, #32]
 800986a:	9300      	str	r3, [sp, #0]
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f000 fd78 	bl	800a366 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800987c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800987e:	e016      	b.n	80098ae <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	1ad2      	subs	r2, r2, r3
 800988a:	6a3b      	ldr	r3, [r7, #32]
 800988c:	f242 7110 	movw	r1, #10000	; 0x2710
 8009890:	fb01 f303 	mul.w	r3, r1, r3
 8009894:	429a      	cmp	r2, r3
 8009896:	d805      	bhi.n	80098a4 <USBH_MSC_Read+0xa8>
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d104      	bne.n	80098ae <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	2201      	movs	r2, #1
 80098a8:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80098aa:	2302      	movs	r3, #2
 80098ac:	e00b      	b.n	80098c6 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80098ae:	7afb      	ldrb	r3, [r7, #11]
 80098b0:	4619      	mov	r1, r3
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f7ff fe4c 	bl	8009550 <USBH_MSC_RdWrProcess>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d0e0      	beq.n	8009880 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	2201      	movs	r2, #1
 80098c2:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3718      	adds	r7, #24
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b088      	sub	sp, #32
 80098d2:	af02      	add	r7, sp, #8
 80098d4:	60f8      	str	r0, [r7, #12]
 80098d6:	607a      	str	r2, [r7, #4]
 80098d8:	603b      	str	r3, [r7, #0]
 80098da:	460b      	mov	r3, r1
 80098dc:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098e4:	69db      	ldr	r3, [r3, #28]
 80098e6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00e      	beq.n	8009912 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80098fa:	2b0b      	cmp	r3, #11
 80098fc:	d109      	bne.n	8009912 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80098fe:	7afb      	ldrb	r3, [r7, #11]
 8009900:	697a      	ldr	r2, [r7, #20]
 8009902:	2134      	movs	r1, #52	; 0x34
 8009904:	fb01 f303 	mul.w	r3, r1, r3
 8009908:	4413      	add	r3, r2
 800990a:	3390      	adds	r3, #144	; 0x90
 800990c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800990e:	2b01      	cmp	r3, #1
 8009910:	d001      	beq.n	8009916 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009912:	2302      	movs	r3, #2
 8009914:	e040      	b.n	8009998 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	2207      	movs	r2, #7
 800991a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800991c:	7afb      	ldrb	r3, [r7, #11]
 800991e:	697a      	ldr	r2, [r7, #20]
 8009920:	2134      	movs	r1, #52	; 0x34
 8009922:	fb01 f303 	mul.w	r3, r1, r3
 8009926:	4413      	add	r3, r2
 8009928:	3390      	adds	r3, #144	; 0x90
 800992a:	2207      	movs	r2, #7
 800992c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800992e:	7afb      	ldrb	r3, [r7, #11]
 8009930:	b29a      	uxth	r2, r3
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009938:	7af9      	ldrb	r1, [r7, #11]
 800993a:	6a3b      	ldr	r3, [r7, #32]
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	f000 fca4 	bl	800a290 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800994e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009950:	e016      	b.n	8009980 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	1ad2      	subs	r2, r2, r3
 800995c:	6a3b      	ldr	r3, [r7, #32]
 800995e:	f242 7110 	movw	r1, #10000	; 0x2710
 8009962:	fb01 f303 	mul.w	r3, r1, r3
 8009966:	429a      	cmp	r2, r3
 8009968:	d805      	bhi.n	8009976 <USBH_MSC_Write+0xa8>
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009970:	b2db      	uxtb	r3, r3
 8009972:	2b00      	cmp	r3, #0
 8009974:	d104      	bne.n	8009980 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	2201      	movs	r2, #1
 800997a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800997c:	2302      	movs	r3, #2
 800997e:	e00b      	b.n	8009998 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009980:	7afb      	ldrb	r3, [r7, #11]
 8009982:	4619      	mov	r1, r3
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f7ff fde3 	bl	8009550 <USBH_MSC_RdWrProcess>
 800998a:	4603      	mov	r3, r0
 800998c:	2b01      	cmp	r3, #1
 800998e:	d0e0      	beq.n	8009952 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	2201      	movs	r2, #1
 8009994:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3718      	adds	r7, #24
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2221      	movs	r2, #33	; 0x21
 80099ac:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	22ff      	movs	r2, #255	; 0xff
 80099b2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80099c6:	2200      	movs	r2, #0
 80099c8:	2100      	movs	r1, #0
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f001 ff67 	bl	800b89e <USBH_CtlReq>
 80099d0:	4603      	mov	r3, r0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3708      	adds	r7, #8
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b082      	sub	sp, #8
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
 80099e2:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	22a1      	movs	r2, #161	; 0xa1
 80099e8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	22fe      	movs	r2, #254	; 0xfe
 80099ee:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009a02:	2201      	movs	r2, #1
 8009a04:	6839      	ldr	r1, [r7, #0]
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f001 ff49 	bl	800b89e <USBH_CtlReq>
 8009a0c:	4603      	mov	r3, r0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
	...

08009a18 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a26:	69db      	ldr	r3, [r3, #28]
 8009a28:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	4a09      	ldr	r2, [pc, #36]	; (8009a54 <USBH_MSC_BOT_Init+0x3c>)
 8009a2e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	4a09      	ldr	r2, [pc, #36]	; (8009a58 <USBH_MSC_BOT_Init+0x40>)
 8009a34:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2201      	movs	r2, #1
 8009a42:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3714      	adds	r7, #20
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr
 8009a54:	43425355 	.word	0x43425355
 8009a58:	20304050 	.word	0x20304050

08009a5c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b088      	sub	sp, #32
 8009a60:	af02      	add	r7, sp, #8
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	460b      	mov	r3, r1
 8009a66:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009a70:	2301      	movs	r3, #1
 8009a72:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009a74:	2300      	movs	r3, #0
 8009a76:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a7e:	69db      	ldr	r3, [r3, #28]
 8009a80:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009a82:	2300      	movs	r3, #0
 8009a84:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	2b0a      	cmp	r3, #10
 8009a90:	f200 819e 	bhi.w	8009dd0 <USBH_MSC_BOT_Process+0x374>
 8009a94:	a201      	add	r2, pc, #4	; (adr r2, 8009a9c <USBH_MSC_BOT_Process+0x40>)
 8009a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9a:	bf00      	nop
 8009a9c:	08009ac9 	.word	0x08009ac9
 8009aa0:	08009af1 	.word	0x08009af1
 8009aa4:	08009b5b 	.word	0x08009b5b
 8009aa8:	08009b79 	.word	0x08009b79
 8009aac:	08009bfd 	.word	0x08009bfd
 8009ab0:	08009c1f 	.word	0x08009c1f
 8009ab4:	08009cb7 	.word	0x08009cb7
 8009ab8:	08009cd3 	.word	0x08009cd3
 8009abc:	08009d25 	.word	0x08009d25
 8009ac0:	08009d55 	.word	0x08009d55
 8009ac4:	08009db7 	.word	0x08009db7
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	78fa      	ldrb	r2, [r7, #3]
 8009acc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	2202      	movs	r2, #2
 8009ad4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	795b      	ldrb	r3, [r3, #5]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	9200      	str	r2, [sp, #0]
 8009ae6:	221f      	movs	r2, #31
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f002 f8f4 	bl	800bcd6 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009aee:	e17e      	b.n	8009dee <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	795b      	ldrb	r3, [r3, #5]
 8009af4:	4619      	mov	r1, r3
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f005 f8e6 	bl	800ecc8 <USBH_LL_GetURBState>
 8009afc:	4603      	mov	r3, r0
 8009afe:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009b00:	7d3b      	ldrb	r3, [r7, #20]
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d118      	bne.n	8009b38 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00f      	beq.n	8009b2e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009b14:	b25b      	sxtb	r3, r3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	da04      	bge.n	8009b24 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	2203      	movs	r2, #3
 8009b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009b22:	e157      	b.n	8009dd4 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	2205      	movs	r2, #5
 8009b28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b2c:	e152      	b.n	8009dd4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	2207      	movs	r2, #7
 8009b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b36:	e14d      	b.n	8009dd4 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009b38:	7d3b      	ldrb	r3, [r7, #20]
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	d104      	bne.n	8009b48 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b46:	e145      	b.n	8009dd4 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009b48:	7d3b      	ldrb	r3, [r7, #20]
 8009b4a:	2b05      	cmp	r3, #5
 8009b4c:	f040 8142 	bne.w	8009dd4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	220a      	movs	r2, #10
 8009b54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b58:	e13c      	b.n	8009dd4 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	895a      	ldrh	r2, [r3, #10]
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	791b      	ldrb	r3, [r3, #4]
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f002 f8d9 	bl	800bd20 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	2204      	movs	r2, #4
 8009b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009b76:	e13a      	b.n	8009dee <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	791b      	ldrb	r3, [r3, #4]
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f005 f8a2 	bl	800ecc8 <USBH_LL_GetURBState>
 8009b84:	4603      	mov	r3, r0
 8009b86:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009b88:	7d3b      	ldrb	r3, [r7, #20]
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d12d      	bne.n	8009bea <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b92:	693a      	ldr	r2, [r7, #16]
 8009b94:	8952      	ldrh	r2, [r2, #10]
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d910      	bls.n	8009bbc <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ba0:	693a      	ldr	r2, [r7, #16]
 8009ba2:	8952      	ldrh	r2, [r2, #10]
 8009ba4:	441a      	add	r2, r3
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bb0:	693a      	ldr	r2, [r7, #16]
 8009bb2:	8952      	ldrh	r2, [r2, #10]
 8009bb4:	1a9a      	subs	r2, r3, r2
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8009bba:	e002      	b.n	8009bc2 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00a      	beq.n	8009be0 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	895a      	ldrh	r2, [r3, #10]
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	791b      	ldrb	r3, [r3, #4]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f002 f8a1 	bl	800bd20 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009bde:	e0fb      	b.n	8009dd8 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	2207      	movs	r2, #7
 8009be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009be8:	e0f6      	b.n	8009dd8 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8009bea:	7d3b      	ldrb	r3, [r7, #20]
 8009bec:	2b05      	cmp	r3, #5
 8009bee:	f040 80f3 	bne.w	8009dd8 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	2209      	movs	r2, #9
 8009bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009bfa:	e0ed      	b.n	8009dd8 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	891a      	ldrh	r2, [r3, #8]
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	795b      	ldrb	r3, [r3, #5]
 8009c0a:	2001      	movs	r0, #1
 8009c0c:	9000      	str	r0, [sp, #0]
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f002 f861 	bl	800bcd6 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	2206      	movs	r2, #6
 8009c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c1c:	e0e7      	b.n	8009dee <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	795b      	ldrb	r3, [r3, #5]
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f005 f84f 	bl	800ecc8 <USBH_LL_GetURBState>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009c2e:	7d3b      	ldrb	r3, [r7, #20]
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d12f      	bne.n	8009c94 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c38:	693a      	ldr	r2, [r7, #16]
 8009c3a:	8912      	ldrh	r2, [r2, #8]
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d910      	bls.n	8009c62 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c46:	693a      	ldr	r2, [r7, #16]
 8009c48:	8912      	ldrh	r2, [r2, #8]
 8009c4a:	441a      	add	r2, r3
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c56:	693a      	ldr	r2, [r7, #16]
 8009c58:	8912      	ldrh	r2, [r2, #8]
 8009c5a:	1a9a      	subs	r2, r3, r2
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8009c60:	e002      	b.n	8009c68 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	2200      	movs	r2, #0
 8009c66:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00c      	beq.n	8009c8a <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	891a      	ldrh	r2, [r3, #8]
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	795b      	ldrb	r3, [r3, #5]
 8009c7e:	2001      	movs	r0, #1
 8009c80:	9000      	str	r0, [sp, #0]
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f002 f827 	bl	800bcd6 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009c88:	e0a8      	b.n	8009ddc <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	2207      	movs	r2, #7
 8009c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c92:	e0a3      	b.n	8009ddc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009c94:	7d3b      	ldrb	r3, [r7, #20]
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	d104      	bne.n	8009ca4 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	2205      	movs	r2, #5
 8009c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ca2:	e09b      	b.n	8009ddc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009ca4:	7d3b      	ldrb	r3, [r7, #20]
 8009ca6:	2b05      	cmp	r3, #5
 8009ca8:	f040 8098 	bne.w	8009ddc <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	220a      	movs	r2, #10
 8009cb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009cb4:	e092      	b.n	8009ddc <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	791b      	ldrb	r3, [r3, #4]
 8009cc0:	220d      	movs	r2, #13
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f002 f82c 	bl	800bd20 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	2208      	movs	r2, #8
 8009ccc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009cd0:	e08d      	b.n	8009dee <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	791b      	ldrb	r3, [r3, #4]
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f004 fff5 	bl	800ecc8 <USBH_LL_GetURBState>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009ce2:	7d3b      	ldrb	r3, [r7, #20]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d115      	bne.n	8009d14 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f8a9 	bl	8009e50 <USBH_MSC_DecodeCSW>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009d02:	7d7b      	ldrb	r3, [r7, #21]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d102      	bne.n	8009d0e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009d0c:	e068      	b.n	8009de0 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8009d0e:	2302      	movs	r3, #2
 8009d10:	75fb      	strb	r3, [r7, #23]
      break;
 8009d12:	e065      	b.n	8009de0 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009d14:	7d3b      	ldrb	r3, [r7, #20]
 8009d16:	2b05      	cmp	r3, #5
 8009d18:	d162      	bne.n	8009de0 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	2209      	movs	r2, #9
 8009d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009d22:	e05d      	b.n	8009de0 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009d24:	78fb      	ldrb	r3, [r7, #3]
 8009d26:	2200      	movs	r2, #0
 8009d28:	4619      	mov	r1, r3
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 f864 	bl	8009df8 <USBH_MSC_BOT_Abort>
 8009d30:	4603      	mov	r3, r0
 8009d32:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009d34:	7dbb      	ldrb	r3, [r7, #22]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d104      	bne.n	8009d44 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	2207      	movs	r2, #7
 8009d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009d42:	e04f      	b.n	8009de4 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009d44:	7dbb      	ldrb	r3, [r7, #22]
 8009d46:	2b04      	cmp	r3, #4
 8009d48:	d14c      	bne.n	8009de4 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	220b      	movs	r2, #11
 8009d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009d52:	e047      	b.n	8009de4 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009d54:	78fb      	ldrb	r3, [r7, #3]
 8009d56:	2201      	movs	r2, #1
 8009d58:	4619      	mov	r1, r3
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 f84c 	bl	8009df8 <USBH_MSC_BOT_Abort>
 8009d60:	4603      	mov	r3, r0
 8009d62:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009d64:	7dbb      	ldrb	r3, [r7, #22]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d11d      	bne.n	8009da6 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	795b      	ldrb	r3, [r3, #5]
 8009d6e:	4619      	mov	r1, r3
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f004 fffa 	bl	800ed6a <USBH_LL_GetToggle>
 8009d76:	4603      	mov	r3, r0
 8009d78:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	7959      	ldrb	r1, [r3, #5]
 8009d7e:	7bfb      	ldrb	r3, [r7, #15]
 8009d80:	f1c3 0301 	rsb	r3, r3, #1
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	461a      	mov	r2, r3
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f004 ffbe 	bl	800ed0a <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	791b      	ldrb	r3, [r3, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	4619      	mov	r1, r3
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f004 ffb7 	bl	800ed0a <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	2209      	movs	r2, #9
 8009da0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009da4:	e020      	b.n	8009de8 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8009da6:	7dbb      	ldrb	r3, [r7, #22]
 8009da8:	2b04      	cmp	r3, #4
 8009daa:	d11d      	bne.n	8009de8 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	220b      	movs	r2, #11
 8009db0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009db4:	e018      	b.n	8009de8 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f7ff fdf2 	bl	80099a0 <USBH_MSC_BOT_REQ_Reset>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009dc0:	7dfb      	ldrb	r3, [r7, #23]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d112      	bne.n	8009dec <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009dce:	e00d      	b.n	8009dec <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009dd0:	bf00      	nop
 8009dd2:	e00c      	b.n	8009dee <USBH_MSC_BOT_Process+0x392>
      break;
 8009dd4:	bf00      	nop
 8009dd6:	e00a      	b.n	8009dee <USBH_MSC_BOT_Process+0x392>
      break;
 8009dd8:	bf00      	nop
 8009dda:	e008      	b.n	8009dee <USBH_MSC_BOT_Process+0x392>
      break;
 8009ddc:	bf00      	nop
 8009dde:	e006      	b.n	8009dee <USBH_MSC_BOT_Process+0x392>
      break;
 8009de0:	bf00      	nop
 8009de2:	e004      	b.n	8009dee <USBH_MSC_BOT_Process+0x392>
      break;
 8009de4:	bf00      	nop
 8009de6:	e002      	b.n	8009dee <USBH_MSC_BOT_Process+0x392>
      break;
 8009de8:	bf00      	nop
 8009dea:	e000      	b.n	8009dee <USBH_MSC_BOT_Process+0x392>
      break;
 8009dec:	bf00      	nop
  }
  return status;
 8009dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3718      	adds	r7, #24
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	460b      	mov	r3, r1
 8009e02:	70fb      	strb	r3, [r7, #3]
 8009e04:	4613      	mov	r3, r2
 8009e06:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009e08:	2302      	movs	r3, #2
 8009e0a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e12:	69db      	ldr	r3, [r3, #28]
 8009e14:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009e16:	78bb      	ldrb	r3, [r7, #2]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d002      	beq.n	8009e22 <USBH_MSC_BOT_Abort+0x2a>
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d009      	beq.n	8009e34 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009e20:	e011      	b.n	8009e46 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	79db      	ldrb	r3, [r3, #7]
 8009e26:	4619      	mov	r1, r3
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f001 fb58 	bl	800b4de <USBH_ClrFeature>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	73fb      	strb	r3, [r7, #15]
      break;
 8009e32:	e008      	b.n	8009e46 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	799b      	ldrb	r3, [r3, #6]
 8009e38:	4619      	mov	r1, r3
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f001 fb4f 	bl	800b4de <USBH_ClrFeature>
 8009e40:	4603      	mov	r3, r0
 8009e42:	73fb      	strb	r3, [r7, #15]
      break;
 8009e44:	bf00      	nop
  }
  return status;
 8009e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e5e:	69db      	ldr	r3, [r3, #28]
 8009e60:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009e62:	2301      	movs	r3, #1
 8009e64:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	791b      	ldrb	r3, [r3, #4]
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f004 fe99 	bl	800eba4 <USBH_LL_GetLastXferSize>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b0d      	cmp	r3, #13
 8009e76:	d002      	beq.n	8009e7e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009e78:	2302      	movs	r3, #2
 8009e7a:	73fb      	strb	r3, [r7, #15]
 8009e7c:	e024      	b.n	8009ec8 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e82:	4a14      	ldr	r2, [pc, #80]	; (8009ed4 <USBH_MSC_DecodeCSW+0x84>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d11d      	bne.n	8009ec4 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d119      	bne.n	8009ec8 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d102      	bne.n	8009ea4 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	73fb      	strb	r3, [r7, #15]
 8009ea2:	e011      	b.n	8009ec8 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d102      	bne.n	8009eb4 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	73fb      	strb	r3, [r7, #15]
 8009eb2:	e009      	b.n	8009ec8 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009eba:	2b02      	cmp	r3, #2
 8009ebc:	d104      	bne.n	8009ec8 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009ebe:	2302      	movs	r3, #2
 8009ec0:	73fb      	strb	r3, [r7, #15]
 8009ec2:	e001      	b.n	8009ec8 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009ec4:	2302      	movs	r3, #2
 8009ec6:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	53425355 	.word	0x53425355

08009ed8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009ee4:	2302      	movs	r3, #2
 8009ee6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009eee:	69db      	ldr	r3, [r3, #28]
 8009ef0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d002      	beq.n	8009f02 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009efc:	2b02      	cmp	r3, #2
 8009efe:	d021      	beq.n	8009f44 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009f00:	e028      	b.n	8009f54 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	2200      	movs	r2, #0
 8009f06:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	220a      	movs	r2, #10
 8009f14:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	3363      	adds	r3, #99	; 0x63
 8009f1c:	2210      	movs	r2, #16
 8009f1e:	2100      	movs	r1, #0
 8009f20:	4618      	mov	r0, r3
 8009f22:	f004 ffd1 	bl	800eec8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	2201      	movs	r2, #1
 8009f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	2202      	movs	r2, #2
 8009f3a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	73fb      	strb	r3, [r7, #15]
      break;
 8009f42:	e007      	b.n	8009f54 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009f44:	78fb      	ldrb	r3, [r7, #3]
 8009f46:	4619      	mov	r1, r3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f7ff fd87 	bl	8009a5c <USBH_MSC_BOT_Process>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	73fb      	strb	r3, [r7, #15]
      break;
 8009f52:	bf00      	nop
  }

  return error;
 8009f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b086      	sub	sp, #24
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	60f8      	str	r0, [r7, #12]
 8009f66:	460b      	mov	r3, r1
 8009f68:	607a      	str	r2, [r7, #4]
 8009f6a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f76:	69db      	ldr	r3, [r3, #28]
 8009f78:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d002      	beq.n	8009f8a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009f84:	2b02      	cmp	r3, #2
 8009f86:	d027      	beq.n	8009fd8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009f88:	e05f      	b.n	800a04a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	2208      	movs	r2, #8
 8009f8e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	2280      	movs	r2, #128	; 0x80
 8009f94:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	220a      	movs	r2, #10
 8009f9c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	3363      	adds	r3, #99	; 0x63
 8009fa4:	2210      	movs	r2, #16
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f004 ff8d 	bl	800eec8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	2225      	movs	r2, #37	; 0x25
 8009fb2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	2202      	movs	r2, #2
 8009fc2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	f103 0210 	add.w	r2, r3, #16
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8009fd6:	e038      	b.n	800a04a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009fd8:	7afb      	ldrb	r3, [r7, #11]
 8009fda:	4619      	mov	r1, r3
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f7ff fd3d 	bl	8009a5c <USBH_MSC_BOT_Process>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009fe6:	7dfb      	ldrb	r3, [r7, #23]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d12d      	bne.n	800a048 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ff2:	3303      	adds	r3, #3
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ffe:	3302      	adds	r3, #2
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	021b      	lsls	r3, r3, #8
 800a004:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a00c:	3301      	adds	r3, #1
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a012:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	061b      	lsls	r3, r3, #24
 800a01e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a02a:	3307      	adds	r3, #7
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	b29a      	uxth	r2, r3
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a036:	3306      	adds	r3, #6
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	021b      	lsls	r3, r3, #8
 800a03e:	b29b      	uxth	r3, r3
 800a040:	4313      	orrs	r3, r2
 800a042:	b29a      	uxth	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	809a      	strh	r2, [r3, #4]
      break;
 800a048:	bf00      	nop
  }

  return error;
 800a04a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3718      	adds	r7, #24
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b086      	sub	sp, #24
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	460b      	mov	r3, r1
 800a05e:	607a      	str	r2, [r7, #4]
 800a060:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a062:	2302      	movs	r3, #2
 800a064:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a06c:	69db      	ldr	r3, [r3, #28]
 800a06e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a076:	2b01      	cmp	r3, #1
 800a078:	d002      	beq.n	800a080 <USBH_MSC_SCSI_Inquiry+0x2c>
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d03d      	beq.n	800a0fa <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a07e:	e089      	b.n	800a194 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	2224      	movs	r2, #36	; 0x24
 800a084:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	2280      	movs	r2, #128	; 0x80
 800a08a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	220a      	movs	r2, #10
 800a092:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	3363      	adds	r3, #99	; 0x63
 800a09a:	220a      	movs	r2, #10
 800a09c:	2100      	movs	r1, #0
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f004 ff12 	bl	800eec8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	2212      	movs	r2, #18
 800a0a8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a0ac:	7afb      	ldrb	r3, [r7, #11]
 800a0ae:	015b      	lsls	r3, r3, #5
 800a0b0:	b2da      	uxtb	r2, r3
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	2224      	movs	r2, #36	; 0x24
 800a0cc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	2202      	movs	r2, #2
 800a0e4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	f103 0210 	add.w	r2, r3, #16
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	75fb      	strb	r3, [r7, #23]
      break;
 800a0f8:	e04c      	b.n	800a194 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a0fa:	7afb      	ldrb	r3, [r7, #11]
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f7ff fcac 	bl	8009a5c <USBH_MSC_BOT_Process>
 800a104:	4603      	mov	r3, r0
 800a106:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a108:	7dfb      	ldrb	r3, [r7, #23]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d141      	bne.n	800a192 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a10e:	2222      	movs	r2, #34	; 0x22
 800a110:	2100      	movs	r1, #0
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f004 fed8 	bl	800eec8 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	f003 031f 	and.w	r3, r3, #31
 800a124:	b2da      	uxtb	r2, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	095b      	lsrs	r3, r3, #5
 800a134:	b2da      	uxtb	r2, r3
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a140:	3301      	adds	r3, #1
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	b25b      	sxtb	r3, r3
 800a146:	2b00      	cmp	r3, #0
 800a148:	da03      	bge.n	800a152 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	709a      	strb	r2, [r3, #2]
 800a150:	e002      	b.n	800a158 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2200      	movs	r2, #0
 800a156:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	1cd8      	adds	r0, r3, #3
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a162:	3308      	adds	r3, #8
 800a164:	2208      	movs	r2, #8
 800a166:	4619      	mov	r1, r3
 800a168:	f004 fea0 	bl	800eeac <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f103 000c 	add.w	r0, r3, #12
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a178:	3310      	adds	r3, #16
 800a17a:	2210      	movs	r2, #16
 800a17c:	4619      	mov	r1, r3
 800a17e:	f004 fe95 	bl	800eeac <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	331d      	adds	r3, #29
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a18c:	3220      	adds	r2, #32
 800a18e:	6812      	ldr	r2, [r2, #0]
 800a190:	601a      	str	r2, [r3, #0]
      break;
 800a192:	bf00      	nop
  }

  return error;
 800a194:	7dfb      	ldrb	r3, [r7, #23]
}
 800a196:	4618      	mov	r0, r3
 800a198:	3718      	adds	r7, #24
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b086      	sub	sp, #24
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	60f8      	str	r0, [r7, #12]
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	607a      	str	r2, [r7, #4]
 800a1aa:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1b6:	69db      	ldr	r3, [r3, #28]
 800a1b8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d002      	beq.n	800a1ca <USBH_MSC_SCSI_RequestSense+0x2c>
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d03d      	beq.n	800a244 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a1c8:	e05d      	b.n	800a286 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	220e      	movs	r2, #14
 800a1ce:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	2280      	movs	r2, #128	; 0x80
 800a1d4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	220a      	movs	r2, #10
 800a1dc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	3363      	adds	r3, #99	; 0x63
 800a1e4:	2210      	movs	r2, #16
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f004 fe6d 	bl	800eec8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	2203      	movs	r2, #3
 800a1f2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a1f6:	7afb      	ldrb	r3, [r7, #11]
 800a1f8:	015b      	lsls	r3, r3, #5
 800a1fa:	b2da      	uxtb	r2, r3
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	2200      	movs	r2, #0
 800a206:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	220e      	movs	r2, #14
 800a216:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	2201      	movs	r2, #1
 800a226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	2202      	movs	r2, #2
 800a22e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	f103 0210 	add.w	r2, r3, #16
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a23e:	2301      	movs	r3, #1
 800a240:	75fb      	strb	r3, [r7, #23]
      break;
 800a242:	e020      	b.n	800a286 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a244:	7afb      	ldrb	r3, [r7, #11]
 800a246:	4619      	mov	r1, r3
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f7ff fc07 	bl	8009a5c <USBH_MSC_BOT_Process>
 800a24e:	4603      	mov	r3, r0
 800a250:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a252:	7dfb      	ldrb	r3, [r7, #23]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d115      	bne.n	800a284 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a25e:	3302      	adds	r3, #2
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	f003 030f 	and.w	r3, r3, #15
 800a266:	b2da      	uxtb	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a272:	7b1a      	ldrb	r2, [r3, #12]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a27e:	7b5a      	ldrb	r2, [r3, #13]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	709a      	strb	r2, [r3, #2]
      break;
 800a284:	bf00      	nop
  }

  return error;
 800a286:	7dfb      	ldrb	r3, [r7, #23]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3718      	adds	r7, #24
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b086      	sub	sp, #24
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	607a      	str	r2, [r7, #4]
 800a29a:	603b      	str	r3, [r7, #0]
 800a29c:	460b      	mov	r3, r1
 800a29e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a2a0:	2302      	movs	r3, #2
 800a2a2:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2aa:	69db      	ldr	r3, [r3, #28]
 800a2ac:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d002      	beq.n	800a2be <USBH_MSC_SCSI_Write+0x2e>
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	d047      	beq.n	800a34c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a2bc:	e04e      	b.n	800a35c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	6a3b      	ldr	r3, [r7, #32]
 800a2c8:	fb03 f202 	mul.w	r2, r3, r2
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	220a      	movs	r2, #10
 800a2dc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	3363      	adds	r3, #99	; 0x63
 800a2e4:	2210      	movs	r2, #16
 800a2e6:	2100      	movs	r1, #0
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f004 fded 	bl	800eec8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	222a      	movs	r2, #42	; 0x2a
 800a2f2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a2f6:	79fa      	ldrb	r2, [r7, #7]
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a2fe:	79ba      	ldrb	r2, [r7, #6]
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a306:	797a      	ldrb	r2, [r7, #5]
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a30e:	1d3b      	adds	r3, r7, #4
 800a310:	781a      	ldrb	r2, [r3, #0]
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a318:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a322:	f107 0320 	add.w	r3, r7, #32
 800a326:	781a      	ldrb	r2, [r3, #0]
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	2201      	movs	r2, #1
 800a332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	2202      	movs	r2, #2
 800a33a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	683a      	ldr	r2, [r7, #0]
 800a342:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a346:	2301      	movs	r3, #1
 800a348:	75fb      	strb	r3, [r7, #23]
      break;
 800a34a:	e007      	b.n	800a35c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a34c:	7afb      	ldrb	r3, [r7, #11]
 800a34e:	4619      	mov	r1, r3
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f7ff fb83 	bl	8009a5c <USBH_MSC_BOT_Process>
 800a356:	4603      	mov	r3, r0
 800a358:	75fb      	strb	r3, [r7, #23]
      break;
 800a35a:	bf00      	nop
  }

  return error;
 800a35c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3718      	adds	r7, #24
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b086      	sub	sp, #24
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	60f8      	str	r0, [r7, #12]
 800a36e:	607a      	str	r2, [r7, #4]
 800a370:	603b      	str	r3, [r7, #0]
 800a372:	460b      	mov	r3, r1
 800a374:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a376:	2302      	movs	r3, #2
 800a378:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a380:	69db      	ldr	r3, [r3, #28]
 800a382:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d002      	beq.n	800a394 <USBH_MSC_SCSI_Read+0x2e>
 800a38e:	2b02      	cmp	r3, #2
 800a390:	d047      	beq.n	800a422 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a392:	e04e      	b.n	800a432 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a39a:	461a      	mov	r2, r3
 800a39c:	6a3b      	ldr	r3, [r7, #32]
 800a39e:	fb03 f202 	mul.w	r2, r3, r2
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	2280      	movs	r2, #128	; 0x80
 800a3aa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	220a      	movs	r2, #10
 800a3b2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	3363      	adds	r3, #99	; 0x63
 800a3ba:	2210      	movs	r2, #16
 800a3bc:	2100      	movs	r1, #0
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f004 fd82 	bl	800eec8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	2228      	movs	r2, #40	; 0x28
 800a3c8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a3cc:	79fa      	ldrb	r2, [r7, #7]
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a3d4:	79ba      	ldrb	r2, [r7, #6]
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a3dc:	797a      	ldrb	r2, [r7, #5]
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a3e4:	1d3b      	adds	r3, r7, #4
 800a3e6:	781a      	ldrb	r2, [r3, #0]
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a3ee:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a3f8:	f107 0320 	add.w	r3, r7, #32
 800a3fc:	781a      	ldrb	r2, [r3, #0]
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	2201      	movs	r2, #1
 800a408:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	2202      	movs	r2, #2
 800a410:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	683a      	ldr	r2, [r7, #0]
 800a418:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a41c:	2301      	movs	r3, #1
 800a41e:	75fb      	strb	r3, [r7, #23]
      break;
 800a420:	e007      	b.n	800a432 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a422:	7afb      	ldrb	r3, [r7, #11]
 800a424:	4619      	mov	r1, r3
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f7ff fb18 	bl	8009a5c <USBH_MSC_BOT_Process>
 800a42c:	4603      	mov	r3, r0
 800a42e:	75fb      	strb	r3, [r7, #23]
      break;
 800a430:	bf00      	nop
  }

  return error;
 800a432:	7dfb      	ldrb	r3, [r7, #23]
}
 800a434:	4618      	mov	r0, r3
 800a436:	3718      	adds	r7, #24
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	4613      	mov	r3, r2
 800a448:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d10a      	bne.n	800a466 <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800a450:	481c      	ldr	r0, [pc, #112]	; (800a4c4 <USBH_Init+0x88>)
 800a452:	f004 fdeb 	bl	800f02c <iprintf>
 800a456:	481c      	ldr	r0, [pc, #112]	; (800a4c8 <USBH_Init+0x8c>)
 800a458:	f004 fde8 	bl	800f02c <iprintf>
 800a45c:	200a      	movs	r0, #10
 800a45e:	f004 fdfd 	bl	800f05c <putchar>
    return USBH_FAIL;
 800a462:	2302      	movs	r3, #2
 800a464:	e029      	b.n	800a4ba <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	79fa      	ldrb	r2, [r7, #7]
 800a46a:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2200      	movs	r2, #0
 800a472:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f000 f824 	bl	800a4cc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d003      	beq.n	800a4b2 <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	68ba      	ldr	r2, [r7, #8]
 800a4ae:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	f004 fac2 	bl	800ea3c <USBH_LL_Init>

  return USBH_OK;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	080100c8 	.word	0x080100c8
 800a4c8:	080100d0 	.word	0x080100d0

0800a4cc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a4d8:	2300      	movs	r3, #0
 800a4da:	60fb      	str	r3, [r7, #12]
 800a4dc:	e009      	b.n	800a4f2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	33e0      	adds	r3, #224	; 0xe0
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	4413      	add	r3, r2
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	60fb      	str	r3, [r7, #12]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2b0e      	cmp	r3, #14
 800a4f6:	d9f2      	bls.n	800a4de <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	60fb      	str	r3, [r7, #12]
 800a4fc:	e009      	b.n	800a512 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	4413      	add	r3, r2
 800a504:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a508:	2200      	movs	r2, #0
 800a50a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	3301      	adds	r3, #1
 800a510:	60fb      	str	r3, [r7, #12]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a518:	d3f1      	bcc.n	800a4fe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2201      	movs	r2, #1
 800a52a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2240      	movs	r2, #64	; 0x40
 800a53e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2201      	movs	r2, #1
 800a552:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3714      	adds	r7, #20
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a57e:	2300      	movs	r3, #0
 800a580:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d01f      	beq.n	800a5c8 <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10e      	bne.n	800a5b0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a598:	1c59      	adds	r1, r3, #1
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	33de      	adds	r3, #222	; 0xde
 800a5a4:	6839      	ldr	r1, [r7, #0]
 800a5a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	73fb      	strb	r3, [r7, #15]
 800a5ae:	e016      	b.n	800a5de <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800a5b0:	480d      	ldr	r0, [pc, #52]	; (800a5e8 <USBH_RegisterClass+0x74>)
 800a5b2:	f004 fd3b 	bl	800f02c <iprintf>
 800a5b6:	480d      	ldr	r0, [pc, #52]	; (800a5ec <USBH_RegisterClass+0x78>)
 800a5b8:	f004 fd38 	bl	800f02c <iprintf>
 800a5bc:	200a      	movs	r0, #10
 800a5be:	f004 fd4d 	bl	800f05c <putchar>
      status = USBH_FAIL;
 800a5c2:	2302      	movs	r3, #2
 800a5c4:	73fb      	strb	r3, [r7, #15]
 800a5c6:	e00a      	b.n	800a5de <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800a5c8:	4807      	ldr	r0, [pc, #28]	; (800a5e8 <USBH_RegisterClass+0x74>)
 800a5ca:	f004 fd2f 	bl	800f02c <iprintf>
 800a5ce:	4808      	ldr	r0, [pc, #32]	; (800a5f0 <USBH_RegisterClass+0x7c>)
 800a5d0:	f004 fd2c 	bl	800f02c <iprintf>
 800a5d4:	200a      	movs	r0, #10
 800a5d6:	f004 fd41 	bl	800f05c <putchar>
    status = USBH_FAIL;
 800a5da:	2302      	movs	r3, #2
 800a5dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3710      	adds	r7, #16
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	080100c8 	.word	0x080100c8
 800a5ec:	080100e4 	.word	0x080100e4
 800a5f0:	08010100 	.word	0x08010100

0800a5f4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a600:	2300      	movs	r3, #0
 800a602:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a60a:	78fa      	ldrb	r2, [r7, #3]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d23c      	bcs.n	800a68a <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	78fa      	ldrb	r2, [r7, #3]
 800a614:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800a618:	78fb      	ldrb	r3, [r7, #3]
 800a61a:	4619      	mov	r1, r3
 800a61c:	4823      	ldr	r0, [pc, #140]	; (800a6ac <USBH_SelectInterface+0xb8>)
 800a61e:	f004 fd05 	bl	800f02c <iprintf>
 800a622:	200a      	movs	r0, #10
 800a624:	f004 fd1a 	bl	800f05c <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800a628:	78fb      	ldrb	r3, [r7, #3]
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	211a      	movs	r1, #26
 800a62e:	fb01 f303 	mul.w	r3, r1, r3
 800a632:	4413      	add	r3, r2
 800a634:	f203 3347 	addw	r3, r3, #839	; 0x347
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	4619      	mov	r1, r3
 800a63c:	481c      	ldr	r0, [pc, #112]	; (800a6b0 <USBH_SelectInterface+0xbc>)
 800a63e:	f004 fcf5 	bl	800f02c <iprintf>
 800a642:	200a      	movs	r0, #10
 800a644:	f004 fd0a 	bl	800f05c <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800a648:	78fb      	ldrb	r3, [r7, #3]
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	211a      	movs	r1, #26
 800a64e:	fb01 f303 	mul.w	r3, r1, r3
 800a652:	4413      	add	r3, r2
 800a654:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	4619      	mov	r1, r3
 800a65c:	4815      	ldr	r0, [pc, #84]	; (800a6b4 <USBH_SelectInterface+0xc0>)
 800a65e:	f004 fce5 	bl	800f02c <iprintf>
 800a662:	200a      	movs	r0, #10
 800a664:	f004 fcfa 	bl	800f05c <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800a668:	78fb      	ldrb	r3, [r7, #3]
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	211a      	movs	r1, #26
 800a66e:	fb01 f303 	mul.w	r3, r1, r3
 800a672:	4413      	add	r3, r2
 800a674:	f203 3349 	addw	r3, r3, #841	; 0x349
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	4619      	mov	r1, r3
 800a67c:	480e      	ldr	r0, [pc, #56]	; (800a6b8 <USBH_SelectInterface+0xc4>)
 800a67e:	f004 fcd5 	bl	800f02c <iprintf>
 800a682:	200a      	movs	r0, #10
 800a684:	f004 fcea 	bl	800f05c <putchar>
 800a688:	e00a      	b.n	800a6a0 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800a68a:	480c      	ldr	r0, [pc, #48]	; (800a6bc <USBH_SelectInterface+0xc8>)
 800a68c:	f004 fcce 	bl	800f02c <iprintf>
 800a690:	480b      	ldr	r0, [pc, #44]	; (800a6c0 <USBH_SelectInterface+0xcc>)
 800a692:	f004 fccb 	bl	800f02c <iprintf>
 800a696:	200a      	movs	r0, #10
 800a698:	f004 fce0 	bl	800f05c <putchar>
    status = USBH_FAIL;
 800a69c:	2302      	movs	r3, #2
 800a69e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a6a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	08010118 	.word	0x08010118
 800a6b0:	08010138 	.word	0x08010138
 800a6b4:	08010148 	.word	0x08010148
 800a6b8:	08010158 	.word	0x08010158
 800a6bc:	080100c8 	.word	0x080100c8
 800a6c0:	08010168 	.word	0x08010168

0800a6c4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b087      	sub	sp, #28
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	4608      	mov	r0, r1
 800a6ce:	4611      	mov	r1, r2
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	70fb      	strb	r3, [r7, #3]
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	70bb      	strb	r3, [r7, #2]
 800a6da:	4613      	mov	r3, r2
 800a6dc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a6ec:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a6ee:	e025      	b.n	800a73c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a6f0:	7dfb      	ldrb	r3, [r7, #23]
 800a6f2:	221a      	movs	r2, #26
 800a6f4:	fb02 f303 	mul.w	r3, r2, r3
 800a6f8:	3308      	adds	r3, #8
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	3302      	adds	r3, #2
 800a700:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	795b      	ldrb	r3, [r3, #5]
 800a706:	78fa      	ldrb	r2, [r7, #3]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d002      	beq.n	800a712 <USBH_FindInterface+0x4e>
 800a70c:	78fb      	ldrb	r3, [r7, #3]
 800a70e:	2bff      	cmp	r3, #255	; 0xff
 800a710:	d111      	bne.n	800a736 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a716:	78ba      	ldrb	r2, [r7, #2]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d002      	beq.n	800a722 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a71c:	78bb      	ldrb	r3, [r7, #2]
 800a71e:	2bff      	cmp	r3, #255	; 0xff
 800a720:	d109      	bne.n	800a736 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a726:	787a      	ldrb	r2, [r7, #1]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d002      	beq.n	800a732 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a72c:	787b      	ldrb	r3, [r7, #1]
 800a72e:	2bff      	cmp	r3, #255	; 0xff
 800a730:	d101      	bne.n	800a736 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a732:	7dfb      	ldrb	r3, [r7, #23]
 800a734:	e006      	b.n	800a744 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a736:	7dfb      	ldrb	r3, [r7, #23]
 800a738:	3301      	adds	r3, #1
 800a73a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a73c:	7dfb      	ldrb	r3, [r7, #23]
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d9d6      	bls.n	800a6f0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a742:	23ff      	movs	r3, #255	; 0xff
}
 800a744:	4618      	mov	r0, r3
 800a746:	371c      	adds	r7, #28
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f004 f9ab 	bl	800eab4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a75e:	2101      	movs	r1, #1
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f004 fac4 	bl	800ecee <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3708      	adds	r7, #8
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b088      	sub	sp, #32
 800a774:	af04      	add	r7, sp, #16
 800a776:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a778:	2302      	movs	r3, #2
 800a77a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a77c:	2300      	movs	r3, #0
 800a77e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a786:	b2db      	uxtb	r3, r3
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d102      	bne.n	800a792 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2203      	movs	r2, #3
 800a790:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	b2db      	uxtb	r3, r3
 800a798:	2b0b      	cmp	r3, #11
 800a79a:	f200 822b 	bhi.w	800abf4 <USBH_Process+0x484>
 800a79e:	a201      	add	r2, pc, #4	; (adr r2, 800a7a4 <USBH_Process+0x34>)
 800a7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a4:	0800a7d5 	.word	0x0800a7d5
 800a7a8:	0800a813 	.word	0x0800a813
 800a7ac:	0800a893 	.word	0x0800a893
 800a7b0:	0800ab83 	.word	0x0800ab83
 800a7b4:	0800abf5 	.word	0x0800abf5
 800a7b8:	0800a937 	.word	0x0800a937
 800a7bc:	0800ab05 	.word	0x0800ab05
 800a7c0:	0800a985 	.word	0x0800a985
 800a7c4:	0800a9a5 	.word	0x0800a9a5
 800a7c8:	0800a9d1 	.word	0x0800a9d1
 800a7cc:	0800aa0b 	.word	0x0800aa0b
 800a7d0:	0800ab6b 	.word	0x0800ab6b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f000 820b 	beq.w	800abf8 <USBH_Process+0x488>
      {
        USBH_UsrLog("USB Device Connected");
 800a7e2:	48b9      	ldr	r0, [pc, #740]	; (800aac8 <USBH_Process+0x358>)
 800a7e4:	f004 fc22 	bl	800f02c <iprintf>
 800a7e8:	200a      	movs	r0, #10
 800a7ea:	f004 fc37 	bl	800f05c <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a7f4:	20c8      	movs	r0, #200	; 0xc8
 800a7f6:	f004 fae8 	bl	800edca <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f004 f9b7 	bl	800eb6e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a810:	e1f2      	b.n	800abf8 <USBH_Process+0x488>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d10d      	bne.n	800a838 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800a81c:	48ab      	ldr	r0, [pc, #684]	; (800aacc <USBH_Process+0x35c>)
 800a81e:	f004 fc05 	bl	800f02c <iprintf>
 800a822:	200a      	movs	r0, #10
 800a824:	f004 fc1a 	bl	800f05c <putchar>
        phost->device.RstCnt = 0U;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2202      	movs	r2, #2
 800a834:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a836:	e1ec      	b.n	800ac12 <USBH_Process+0x4a2>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a83e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a842:	d91a      	bls.n	800a87a <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a84a:	3301      	adds	r3, #1
 800a84c:	b2da      	uxtb	r2, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a85a:	2b03      	cmp	r3, #3
 800a85c:	d909      	bls.n	800a872 <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800a85e:	489c      	ldr	r0, [pc, #624]	; (800aad0 <USBH_Process+0x360>)
 800a860:	f004 fbe4 	bl	800f02c <iprintf>
 800a864:	200a      	movs	r0, #10
 800a866:	f004 fbf9 	bl	800f05c <putchar>
            phost->gState = HOST_ABORT_STATE;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	220d      	movs	r2, #13
 800a86e:	701a      	strb	r2, [r3, #0]
      break;
 800a870:	e1cf      	b.n	800ac12 <USBH_Process+0x4a2>
            phost->gState = HOST_IDLE;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	701a      	strb	r2, [r3, #0]
      break;
 800a878:	e1cb      	b.n	800ac12 <USBH_Process+0x4a2>
          phost->Timeout += 10U;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a880:	f103 020a 	add.w	r2, r3, #10
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a88a:	200a      	movs	r0, #10
 800a88c:	f004 fa9d 	bl	800edca <USBH_Delay>
      break;
 800a890:	e1bf      	b.n	800ac12 <USBH_Process+0x4a2>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d005      	beq.n	800a8a8 <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8a2:	2104      	movs	r1, #4
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a8a8:	2064      	movs	r0, #100	; 0x64
 800a8aa:	f004 fa8e 	bl	800edca <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f004 f936 	bl	800eb20 <USBH_LL_GetSpeed>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2205      	movs	r2, #5
 800a8c2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a8c4:	2100      	movs	r1, #0
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f001 fa77 	bl	800bdba <USBH_AllocPipe>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a8d4:	2180      	movs	r1, #128	; 0x80
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f001 fa6f 	bl	800bdba <USBH_AllocPipe>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	461a      	mov	r2, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	7919      	ldrb	r1, [r3, #4]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a8f8:	b292      	uxth	r2, r2
 800a8fa:	9202      	str	r2, [sp, #8]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	9201      	str	r2, [sp, #4]
 800a900:	9300      	str	r3, [sp, #0]
 800a902:	4603      	mov	r3, r0
 800a904:	2280      	movs	r2, #128	; 0x80
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f001 fa28 	bl	800bd5c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	7959      	ldrb	r1, [r3, #5]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a920:	b292      	uxth	r2, r2
 800a922:	9202      	str	r2, [sp, #8]
 800a924:	2200      	movs	r2, #0
 800a926:	9201      	str	r2, [sp, #4]
 800a928:	9300      	str	r3, [sp, #0]
 800a92a:	4603      	mov	r3, r0
 800a92c:	2200      	movs	r2, #0
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f001 fa14 	bl	800bd5c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a934:	e16d      	b.n	800ac12 <USBH_Process+0x4a2>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f97a 	bl	800ac30 <USBH_HandleEnum>
 800a93c:	4603      	mov	r3, r0
 800a93e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a940:	7bbb      	ldrb	r3, [r7, #14]
 800a942:	b2db      	uxtb	r3, r3
 800a944:	2b00      	cmp	r3, #0
 800a946:	f040 8159 	bne.w	800abfc <USBH_Process+0x48c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800a94a:	4862      	ldr	r0, [pc, #392]	; (800aad4 <USBH_Process+0x364>)
 800a94c:	f004 fb6e 	bl	800f02c <iprintf>
 800a950:	200a      	movs	r0, #10
 800a952:	f004 fb83 	bl	800f05c <putchar>

        phost->device.current_interface = 0U;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a964:	2b01      	cmp	r3, #1
 800a966:	d109      	bne.n	800a97c <USBH_Process+0x20c>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800a968:	485b      	ldr	r0, [pc, #364]	; (800aad8 <USBH_Process+0x368>)
 800a96a:	f004 fb5f 	bl	800f02c <iprintf>
 800a96e:	200a      	movs	r0, #10
 800a970:	f004 fb74 	bl	800f05c <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2208      	movs	r2, #8
 800a978:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a97a:	e13f      	b.n	800abfc <USBH_Process+0x48c>
          phost->gState = HOST_INPUT;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2207      	movs	r2, #7
 800a980:	701a      	strb	r2, [r3, #0]
      break;
 800a982:	e13b      	b.n	800abfc <USBH_Process+0x48c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f000 8138 	beq.w	800ac00 <USBH_Process+0x490>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a996:	2101      	movs	r1, #1
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2208      	movs	r2, #8
 800a9a0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a9a2:	e12d      	b.n	800ac00 <USBH_Process+0x490>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fd4e 	bl	800b450 <USBH_SetCfg>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f040 8124 	bne.w	800ac04 <USBH_Process+0x494>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2209      	movs	r2, #9
 800a9c0:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800a9c2:	4846      	ldr	r0, [pc, #280]	; (800aadc <USBH_Process+0x36c>)
 800a9c4:	f004 fb32 	bl	800f02c <iprintf>
 800a9c8:	200a      	movs	r0, #10
 800a9ca:	f004 fb47 	bl	800f05c <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a9ce:	e119      	b.n	800ac04 <USBH_Process+0x494>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a9d6:	f003 0320 	and.w	r3, r3, #32
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d011      	beq.n	800aa02 <USBH_Process+0x292>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a9de:	2101      	movs	r1, #1
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 fd58 	bl	800b496 <USBH_SetFeature>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	f040 810d 	bne.w	800ac08 <USBH_Process+0x498>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800a9ee:	483c      	ldr	r0, [pc, #240]	; (800aae0 <USBH_Process+0x370>)
 800a9f0:	f004 fb1c 	bl	800f02c <iprintf>
 800a9f4:	200a      	movs	r0, #10
 800a9f6:	f004 fb31 	bl	800f05c <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	220a      	movs	r2, #10
 800a9fe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aa00:	e102      	b.n	800ac08 <USBH_Process+0x498>
        phost->gState = HOST_CHECK_CLASS;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	220a      	movs	r2, #10
 800aa06:	701a      	strb	r2, [r3, #0]
      break;
 800aa08:	e0fe      	b.n	800ac08 <USBH_Process+0x498>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d106      	bne.n	800aa22 <USBH_Process+0x2b2>
      {
        USBH_UsrLog("No Class has been registered.");
 800aa14:	4833      	ldr	r0, [pc, #204]	; (800aae4 <USBH_Process+0x374>)
 800aa16:	f004 fb09 	bl	800f02c <iprintf>
 800aa1a:	200a      	movs	r0, #10
 800aa1c:	f004 fb1e 	bl	800f05c <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aa20:	e0f7      	b.n	800ac12 <USBH_Process+0x4a2>
        phost->pActiveClass = NULL;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	73fb      	strb	r3, [r7, #15]
 800aa2e:	e016      	b.n	800aa5e <USBH_Process+0x2ee>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800aa30:	7bfa      	ldrb	r2, [r7, #15]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	32de      	adds	r2, #222	; 0xde
 800aa36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa3a:	791a      	ldrb	r2, [r3, #4]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d108      	bne.n	800aa58 <USBH_Process+0x2e8>
            phost->pActiveClass = phost->pClass[idx];
 800aa46:	7bfa      	ldrb	r2, [r7, #15]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	32de      	adds	r2, #222	; 0xde
 800aa4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800aa56:	e005      	b.n	800aa64 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aa58:	7bfb      	ldrb	r3, [r7, #15]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	73fb      	strb	r3, [r7, #15]
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d0e5      	beq.n	800aa30 <USBH_Process+0x2c0>
        if (phost->pActiveClass != NULL)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d040      	beq.n	800aaf0 <USBH_Process+0x380>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	4798      	blx	r3
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d114      	bne.n	800aaaa <USBH_Process+0x33a>
            phost->gState = HOST_CLASS_REQUEST;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2206      	movs	r2, #6
 800aa84:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4619      	mov	r1, r3
 800aa90:	4815      	ldr	r0, [pc, #84]	; (800aae8 <USBH_Process+0x378>)
 800aa92:	f004 facb 	bl	800f02c <iprintf>
 800aa96:	200a      	movs	r0, #10
 800aa98:	f004 fae0 	bl	800f05c <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aaa2:	2103      	movs	r1, #3
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	4798      	blx	r3
      break;
 800aaa8:	e0b3      	b.n	800ac12 <USBH_Process+0x4a2>
            phost->gState = HOST_ABORT_STATE;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	220d      	movs	r2, #13
 800aaae:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4619      	mov	r1, r3
 800aaba:	480c      	ldr	r0, [pc, #48]	; (800aaec <USBH_Process+0x37c>)
 800aabc:	f004 fab6 	bl	800f02c <iprintf>
 800aac0:	200a      	movs	r0, #10
 800aac2:	f004 facb 	bl	800f05c <putchar>
      break;
 800aac6:	e0a4      	b.n	800ac12 <USBH_Process+0x4a2>
 800aac8:	08010188 	.word	0x08010188
 800aacc:	080101a0 	.word	0x080101a0
 800aad0:	080101bc 	.word	0x080101bc
 800aad4:	080101e8 	.word	0x080101e8
 800aad8:	080101fc 	.word	0x080101fc
 800aadc:	08010224 	.word	0x08010224
 800aae0:	08010240 	.word	0x08010240
 800aae4:	08010260 	.word	0x08010260
 800aae8:	08010280 	.word	0x08010280
 800aaec:	08010294 	.word	0x08010294
          phost->gState = HOST_ABORT_STATE;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	220d      	movs	r2, #13
 800aaf4:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800aaf6:	4849      	ldr	r0, [pc, #292]	; (800ac1c <USBH_Process+0x4ac>)
 800aaf8:	f004 fa98 	bl	800f02c <iprintf>
 800aafc:	200a      	movs	r0, #10
 800aafe:	f004 faad 	bl	800f05c <putchar>
      break;
 800ab02:	e086      	b.n	800ac12 <USBH_Process+0x4a2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d020      	beq.n	800ab50 <USBH_Process+0x3e0>
      {
        status = phost->pActiveClass->Requests(phost);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	4798      	blx	r3
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ab1e:	7bbb      	ldrb	r3, [r7, #14]
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d103      	bne.n	800ab2e <USBH_Process+0x3be>
        {
          phost->gState = HOST_CLASS;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	220b      	movs	r2, #11
 800ab2a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ab2c:	e06e      	b.n	800ac0c <USBH_Process+0x49c>
        else if (status == USBH_FAIL)
 800ab2e:	7bbb      	ldrb	r3, [r7, #14]
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	2b02      	cmp	r3, #2
 800ab34:	d16a      	bne.n	800ac0c <USBH_Process+0x49c>
          phost->gState = HOST_ABORT_STATE;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	220d      	movs	r2, #13
 800ab3a:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800ab3c:	4838      	ldr	r0, [pc, #224]	; (800ac20 <USBH_Process+0x4b0>)
 800ab3e:	f004 fa75 	bl	800f02c <iprintf>
 800ab42:	4838      	ldr	r0, [pc, #224]	; (800ac24 <USBH_Process+0x4b4>)
 800ab44:	f004 fa72 	bl	800f02c <iprintf>
 800ab48:	200a      	movs	r0, #10
 800ab4a:	f004 fa87 	bl	800f05c <putchar>
      break;
 800ab4e:	e05d      	b.n	800ac0c <USBH_Process+0x49c>
        phost->gState = HOST_ABORT_STATE;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	220d      	movs	r2, #13
 800ab54:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800ab56:	4832      	ldr	r0, [pc, #200]	; (800ac20 <USBH_Process+0x4b0>)
 800ab58:	f004 fa68 	bl	800f02c <iprintf>
 800ab5c:	4832      	ldr	r0, [pc, #200]	; (800ac28 <USBH_Process+0x4b8>)
 800ab5e:	f004 fa65 	bl	800f02c <iprintf>
 800ab62:	200a      	movs	r0, #10
 800ab64:	f004 fa7a 	bl	800f05c <putchar>
      break;
 800ab68:	e050      	b.n	800ac0c <USBH_Process+0x49c>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d04d      	beq.n	800ac10 <USBH_Process+0x4a0>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab7a:	695b      	ldr	r3, [r3, #20]
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	4798      	blx	r3
      }
      break;
 800ab80:	e046      	b.n	800ac10 <USBH_Process+0x4a0>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f7ff fc9e 	bl	800a4cc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d009      	beq.n	800abae <USBH_Process+0x43e>
      {
        phost->pActiveClass->DeInit(phost);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2200      	movs	r2, #0
 800abaa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d005      	beq.n	800abc4 <USBH_Process+0x454>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800abbe:	2105      	movs	r1, #5
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800abc4:	4819      	ldr	r0, [pc, #100]	; (800ac2c <USBH_Process+0x4bc>)
 800abc6:	f004 fa31 	bl	800f02c <iprintf>
 800abca:	200a      	movs	r0, #10
 800abcc:	f004 fa46 	bl	800f05c <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d107      	bne.n	800abec <USBH_Process+0x47c>
      {
        phost->device.is_ReEnumerated = 0U;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f7ff fdb3 	bl	800a750 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800abea:	e012      	b.n	800ac12 <USBH_Process+0x4a2>
        USBH_LL_Start(phost);
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f003 ff61 	bl	800eab4 <USBH_LL_Start>
      break;
 800abf2:	e00e      	b.n	800ac12 <USBH_Process+0x4a2>

    case HOST_ABORT_STATE:
    default :
      break;
 800abf4:	bf00      	nop
 800abf6:	e00c      	b.n	800ac12 <USBH_Process+0x4a2>
      break;
 800abf8:	bf00      	nop
 800abfa:	e00a      	b.n	800ac12 <USBH_Process+0x4a2>
      break;
 800abfc:	bf00      	nop
 800abfe:	e008      	b.n	800ac12 <USBH_Process+0x4a2>
    break;
 800ac00:	bf00      	nop
 800ac02:	e006      	b.n	800ac12 <USBH_Process+0x4a2>
      break;
 800ac04:	bf00      	nop
 800ac06:	e004      	b.n	800ac12 <USBH_Process+0x4a2>
      break;
 800ac08:	bf00      	nop
 800ac0a:	e002      	b.n	800ac12 <USBH_Process+0x4a2>
      break;
 800ac0c:	bf00      	nop
 800ac0e:	e000      	b.n	800ac12 <USBH_Process+0x4a2>
      break;
 800ac10:	bf00      	nop
  }
  return USBH_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	080102b4 	.word	0x080102b4
 800ac20:	080100c8 	.word	0x080100c8
 800ac24:	080102dc 	.word	0x080102dc
 800ac28:	08010304 	.word	0x08010304
 800ac2c:	0801031c 	.word	0x0801031c

0800ac30 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b088      	sub	sp, #32
 800ac34:	af04      	add	r7, sp, #16
 800ac36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	785b      	ldrb	r3, [r3, #1]
 800ac44:	2b07      	cmp	r3, #7
 800ac46:	f200 8280 	bhi.w	800b14a <USBH_HandleEnum+0x51a>
 800ac4a:	a201      	add	r2, pc, #4	; (adr r2, 800ac50 <USBH_HandleEnum+0x20>)
 800ac4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac50:	0800ac71 	.word	0x0800ac71
 800ac54:	0800ad4d 	.word	0x0800ad4d
 800ac58:	0800adfd 	.word	0x0800adfd
 800ac5c:	0800aebd 	.word	0x0800aebd
 800ac60:	0800af45 	.word	0x0800af45
 800ac64:	0800aff9 	.word	0x0800aff9
 800ac68:	0800b06d 	.word	0x0800b06d
 800ac6c:	0800b0df 	.word	0x0800b0df
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ac70:	2108      	movs	r1, #8
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 fb1c 	bl	800b2b0 <USBH_Get_DevDesc>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac7c:	7bbb      	ldrb	r3, [r7, #14]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d130      	bne.n	800ace4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2201      	movs	r2, #1
 800ac90:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	7919      	ldrb	r1, [r3, #4]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800aca6:	b292      	uxth	r2, r2
 800aca8:	9202      	str	r2, [sp, #8]
 800acaa:	2200      	movs	r2, #0
 800acac:	9201      	str	r2, [sp, #4]
 800acae:	9300      	str	r3, [sp, #0]
 800acb0:	4603      	mov	r3, r0
 800acb2:	2280      	movs	r2, #128	; 0x80
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f001 f851 	bl	800bd5c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	7959      	ldrb	r1, [r3, #5]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800acce:	b292      	uxth	r2, r2
 800acd0:	9202      	str	r2, [sp, #8]
 800acd2:	2200      	movs	r2, #0
 800acd4:	9201      	str	r2, [sp, #4]
 800acd6:	9300      	str	r3, [sp, #0]
 800acd8:	4603      	mov	r3, r0
 800acda:	2200      	movs	r2, #0
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f001 f83d 	bl	800bd5c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ace2:	e234      	b.n	800b14e <USBH_HandleEnum+0x51e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ace4:	7bbb      	ldrb	r3, [r7, #14]
 800ace6:	2b03      	cmp	r3, #3
 800ace8:	f040 8231 	bne.w	800b14e <USBH_HandleEnum+0x51e>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800acec:	48b9      	ldr	r0, [pc, #740]	; (800afd4 <USBH_HandleEnum+0x3a4>)
 800acee:	f004 f99d 	bl	800f02c <iprintf>
 800acf2:	48b9      	ldr	r0, [pc, #740]	; (800afd8 <USBH_HandleEnum+0x3a8>)
 800acf4:	f004 f99a 	bl	800f02c <iprintf>
 800acf8:	200a      	movs	r0, #10
 800acfa:	f004 f9af 	bl	800f05c <putchar>
        phost->device.EnumCnt++;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad04:	3301      	adds	r3, #1
 800ad06:	b2da      	uxtb	r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad14:	2b03      	cmp	r3, #3
 800ad16:	d909      	bls.n	800ad2c <USBH_HandleEnum+0xfc>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800ad18:	48b0      	ldr	r0, [pc, #704]	; (800afdc <USBH_HandleEnum+0x3ac>)
 800ad1a:	f004 f987 	bl	800f02c <iprintf>
 800ad1e:	200a      	movs	r0, #10
 800ad20:	f004 f99c 	bl	800f05c <putchar>
          phost->gState = HOST_ABORT_STATE;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	220d      	movs	r2, #13
 800ad28:	701a      	strb	r2, [r3, #0]
      break;
 800ad2a:	e210      	b.n	800b14e <USBH_HandleEnum+0x51e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	795b      	ldrb	r3, [r3, #5]
 800ad30:	4619      	mov	r1, r3
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f001 f862 	bl	800bdfc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	791b      	ldrb	r3, [r3, #4]
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f001 f85c 	bl	800bdfc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	701a      	strb	r2, [r3, #0]
      break;
 800ad4a:	e200      	b.n	800b14e <USBH_HandleEnum+0x51e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ad4c:	2112      	movs	r1, #18
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 faae 	bl	800b2b0 <USBH_Get_DevDesc>
 800ad54:	4603      	mov	r3, r0
 800ad56:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad58:	7bbb      	ldrb	r3, [r7, #14]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d117      	bne.n	800ad8e <USBH_HandleEnum+0x15e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 800ad64:	4619      	mov	r1, r3
 800ad66:	489e      	ldr	r0, [pc, #632]	; (800afe0 <USBH_HandleEnum+0x3b0>)
 800ad68:	f004 f960 	bl	800f02c <iprintf>
 800ad6c:	200a      	movs	r0, #10
 800ad6e:	f004 f975 	bl	800f05c <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
 800ad78:	4619      	mov	r1, r3
 800ad7a:	489a      	ldr	r0, [pc, #616]	; (800afe4 <USBH_HandleEnum+0x3b4>)
 800ad7c:	f004 f956 	bl	800f02c <iprintf>
 800ad80:	200a      	movs	r0, #10
 800ad82:	f004 f96b 	bl	800f05c <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2202      	movs	r2, #2
 800ad8a:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ad8c:	e1e1      	b.n	800b152 <USBH_HandleEnum+0x522>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad8e:	7bbb      	ldrb	r3, [r7, #14]
 800ad90:	2b03      	cmp	r3, #3
 800ad92:	f040 81de 	bne.w	800b152 <USBH_HandleEnum+0x522>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800ad96:	488f      	ldr	r0, [pc, #572]	; (800afd4 <USBH_HandleEnum+0x3a4>)
 800ad98:	f004 f948 	bl	800f02c <iprintf>
 800ad9c:	4892      	ldr	r0, [pc, #584]	; (800afe8 <USBH_HandleEnum+0x3b8>)
 800ad9e:	f004 f945 	bl	800f02c <iprintf>
 800ada2:	200a      	movs	r0, #10
 800ada4:	f004 f95a 	bl	800f05c <putchar>
        phost->device.EnumCnt++;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800adae:	3301      	adds	r3, #1
 800adb0:	b2da      	uxtb	r2, r3
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800adbe:	2b03      	cmp	r3, #3
 800adc0:	d909      	bls.n	800add6 <USBH_HandleEnum+0x1a6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800adc2:	4886      	ldr	r0, [pc, #536]	; (800afdc <USBH_HandleEnum+0x3ac>)
 800adc4:	f004 f932 	bl	800f02c <iprintf>
 800adc8:	200a      	movs	r0, #10
 800adca:	f004 f947 	bl	800f05c <putchar>
          phost->gState = HOST_ABORT_STATE;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	220d      	movs	r2, #13
 800add2:	701a      	strb	r2, [r3, #0]
      break;
 800add4:	e1bd      	b.n	800b152 <USBH_HandleEnum+0x522>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	795b      	ldrb	r3, [r3, #5]
 800adda:	4619      	mov	r1, r3
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f001 f80d 	bl	800bdfc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	791b      	ldrb	r3, [r3, #4]
 800ade6:	4619      	mov	r1, r3
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f001 f807 	bl	800bdfc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2200      	movs	r2, #0
 800adf2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2200      	movs	r2, #0
 800adf8:	701a      	strb	r2, [r3, #0]
      break;
 800adfa:	e1aa      	b.n	800b152 <USBH_HandleEnum+0x522>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800adfc:	2101      	movs	r1, #1
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 fb02 	bl	800b408 <USBH_SetAddress>
 800ae04:	4603      	mov	r3, r0
 800ae06:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae08:	7bbb      	ldrb	r3, [r7, #14]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d13c      	bne.n	800ae88 <USBH_HandleEnum+0x258>
      {
        USBH_Delay(2U);
 800ae0e:	2002      	movs	r0, #2
 800ae10:	f003 ffdb 	bl	800edca <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2201      	movs	r2, #1
 800ae18:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 800ae22:	4619      	mov	r1, r3
 800ae24:	4871      	ldr	r0, [pc, #452]	; (800afec <USBH_HandleEnum+0x3bc>)
 800ae26:	f004 f901 	bl	800f02c <iprintf>
 800ae2a:	200a      	movs	r0, #10
 800ae2c:	f004 f916 	bl	800f05c <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2203      	movs	r2, #3
 800ae34:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	7919      	ldrb	r1, [r3, #4]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ae4a:	b292      	uxth	r2, r2
 800ae4c:	9202      	str	r2, [sp, #8]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	9201      	str	r2, [sp, #4]
 800ae52:	9300      	str	r3, [sp, #0]
 800ae54:	4603      	mov	r3, r0
 800ae56:	2280      	movs	r2, #128	; 0x80
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 ff7f 	bl	800bd5c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	7959      	ldrb	r1, [r3, #5]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ae72:	b292      	uxth	r2, r2
 800ae74:	9202      	str	r2, [sp, #8]
 800ae76:	2200      	movs	r2, #0
 800ae78:	9201      	str	r2, [sp, #4]
 800ae7a:	9300      	str	r3, [sp, #0]
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2200      	movs	r2, #0
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 ff6b 	bl	800bd5c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ae86:	e166      	b.n	800b156 <USBH_HandleEnum+0x526>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae88:	7bbb      	ldrb	r3, [r7, #14]
 800ae8a:	2b03      	cmp	r3, #3
 800ae8c:	f040 8163 	bne.w	800b156 <USBH_HandleEnum+0x526>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800ae90:	4850      	ldr	r0, [pc, #320]	; (800afd4 <USBH_HandleEnum+0x3a4>)
 800ae92:	f004 f8cb 	bl	800f02c <iprintf>
 800ae96:	4856      	ldr	r0, [pc, #344]	; (800aff0 <USBH_HandleEnum+0x3c0>)
 800ae98:	f004 f8c8 	bl	800f02c <iprintf>
 800ae9c:	200a      	movs	r0, #10
 800ae9e:	f004 f8dd 	bl	800f05c <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800aea2:	484e      	ldr	r0, [pc, #312]	; (800afdc <USBH_HandleEnum+0x3ac>)
 800aea4:	f004 f8c2 	bl	800f02c <iprintf>
 800aea8:	200a      	movs	r0, #10
 800aeaa:	f004 f8d7 	bl	800f05c <putchar>
        phost->gState = HOST_ABORT_STATE;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	220d      	movs	r2, #13
 800aeb2:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	705a      	strb	r2, [r3, #1]
      break;
 800aeba:	e14c      	b.n	800b156 <USBH_HandleEnum+0x526>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800aebc:	2109      	movs	r1, #9
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 fa1e 	bl	800b300 <USBH_Get_CfgDesc>
 800aec4:	4603      	mov	r3, r0
 800aec6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aec8:	7bbb      	ldrb	r3, [r7, #14]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d103      	bne.n	800aed6 <USBH_HandleEnum+0x2a6>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2204      	movs	r2, #4
 800aed2:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aed4:	e141      	b.n	800b15a <USBH_HandleEnum+0x52a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aed6:	7bbb      	ldrb	r3, [r7, #14]
 800aed8:	2b03      	cmp	r3, #3
 800aeda:	f040 813e 	bne.w	800b15a <USBH_HandleEnum+0x52a>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800aede:	483d      	ldr	r0, [pc, #244]	; (800afd4 <USBH_HandleEnum+0x3a4>)
 800aee0:	f004 f8a4 	bl	800f02c <iprintf>
 800aee4:	4843      	ldr	r0, [pc, #268]	; (800aff4 <USBH_HandleEnum+0x3c4>)
 800aee6:	f004 f8a1 	bl	800f02c <iprintf>
 800aeea:	200a      	movs	r0, #10
 800aeec:	f004 f8b6 	bl	800f05c <putchar>
        phost->device.EnumCnt++;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aef6:	3301      	adds	r3, #1
 800aef8:	b2da      	uxtb	r2, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af06:	2b03      	cmp	r3, #3
 800af08:	d909      	bls.n	800af1e <USBH_HandleEnum+0x2ee>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800af0a:	4834      	ldr	r0, [pc, #208]	; (800afdc <USBH_HandleEnum+0x3ac>)
 800af0c:	f004 f88e 	bl	800f02c <iprintf>
 800af10:	200a      	movs	r0, #10
 800af12:	f004 f8a3 	bl	800f05c <putchar>
          phost->gState = HOST_ABORT_STATE;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	220d      	movs	r2, #13
 800af1a:	701a      	strb	r2, [r3, #0]
      break;
 800af1c:	e11d      	b.n	800b15a <USBH_HandleEnum+0x52a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	795b      	ldrb	r3, [r3, #5]
 800af22:	4619      	mov	r1, r3
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 ff69 	bl	800bdfc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	791b      	ldrb	r3, [r3, #4]
 800af2e:	4619      	mov	r1, r3
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 ff63 	bl	800bdfc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2200      	movs	r2, #0
 800af40:	701a      	strb	r2, [r3, #0]
      break;
 800af42:	e10a      	b.n	800b15a <USBH_HandleEnum+0x52a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800af4a:	4619      	mov	r1, r3
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 f9d7 	bl	800b300 <USBH_Get_CfgDesc>
 800af52:	4603      	mov	r3, r0
 800af54:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800af56:	7bbb      	ldrb	r3, [r7, #14]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d103      	bne.n	800af64 <USBH_HandleEnum+0x334>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2205      	movs	r2, #5
 800af60:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800af62:	e0fc      	b.n	800b15e <USBH_HandleEnum+0x52e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af64:	7bbb      	ldrb	r3, [r7, #14]
 800af66:	2b03      	cmp	r3, #3
 800af68:	f040 80f9 	bne.w	800b15e <USBH_HandleEnum+0x52e>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800af6c:	4819      	ldr	r0, [pc, #100]	; (800afd4 <USBH_HandleEnum+0x3a4>)
 800af6e:	f004 f85d 	bl	800f02c <iprintf>
 800af72:	4820      	ldr	r0, [pc, #128]	; (800aff4 <USBH_HandleEnum+0x3c4>)
 800af74:	f004 f85a 	bl	800f02c <iprintf>
 800af78:	200a      	movs	r0, #10
 800af7a:	f004 f86f 	bl	800f05c <putchar>
        phost->device.EnumCnt++;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af84:	3301      	adds	r3, #1
 800af86:	b2da      	uxtb	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af94:	2b03      	cmp	r3, #3
 800af96:	d909      	bls.n	800afac <USBH_HandleEnum+0x37c>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800af98:	4810      	ldr	r0, [pc, #64]	; (800afdc <USBH_HandleEnum+0x3ac>)
 800af9a:	f004 f847 	bl	800f02c <iprintf>
 800af9e:	200a      	movs	r0, #10
 800afa0:	f004 f85c 	bl	800f05c <putchar>
          phost->gState = HOST_ABORT_STATE;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	220d      	movs	r2, #13
 800afa8:	701a      	strb	r2, [r3, #0]
      break;
 800afaa:	e0d8      	b.n	800b15e <USBH_HandleEnum+0x52e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	795b      	ldrb	r3, [r3, #5]
 800afb0:	4619      	mov	r1, r3
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 ff22 	bl	800bdfc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	791b      	ldrb	r3, [r3, #4]
 800afbc:	4619      	mov	r1, r3
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 ff1c 	bl	800bdfc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	701a      	strb	r2, [r3, #0]
      break;
 800afd0:	e0c5      	b.n	800b15e <USBH_HandleEnum+0x52e>
 800afd2:	bf00      	nop
 800afd4:	080100c8 	.word	0x080100c8
 800afd8:	08010334 	.word	0x08010334
 800afdc:	08010368 	.word	0x08010368
 800afe0:	080103a8 	.word	0x080103a8
 800afe4:	080103b4 	.word	0x080103b4
 800afe8:	080103c0 	.word	0x080103c0
 800afec:	080103fc 	.word	0x080103fc
 800aff0:	08010414 	.word	0x08010414
 800aff4:	08010448 	.word	0x08010448

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800affe:	2b00      	cmp	r3, #0
 800b000:	d02a      	beq.n	800b058 <USBH_HandleEnum+0x428>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b00e:	23ff      	movs	r3, #255	; 0xff
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 f999 	bl	800b348 <USBH_Get_StringDesc>
 800b016:	4603      	mov	r3, r0
 800b018:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b01a:	7bbb      	ldrb	r3, [r7, #14]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d10d      	bne.n	800b03c <USBH_HandleEnum+0x40c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b026:	4619      	mov	r1, r3
 800b028:	4853      	ldr	r0, [pc, #332]	; (800b178 <USBH_HandleEnum+0x548>)
 800b02a:	f003 ffff 	bl	800f02c <iprintf>
 800b02e:	200a      	movs	r0, #10
 800b030:	f004 f814 	bl	800f05c <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2206      	movs	r2, #6
 800b038:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b03a:	e092      	b.n	800b162 <USBH_HandleEnum+0x532>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b03c:	7bbb      	ldrb	r3, [r7, #14]
 800b03e:	2b03      	cmp	r3, #3
 800b040:	f040 808f 	bne.w	800b162 <USBH_HandleEnum+0x532>
          USBH_UsrLog("Manufacturer : N/A");
 800b044:	484d      	ldr	r0, [pc, #308]	; (800b17c <USBH_HandleEnum+0x54c>)
 800b046:	f003 fff1 	bl	800f02c <iprintf>
 800b04a:	200a      	movs	r0, #10
 800b04c:	f004 f806 	bl	800f05c <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2206      	movs	r2, #6
 800b054:	705a      	strb	r2, [r3, #1]
      break;
 800b056:	e084      	b.n	800b162 <USBH_HandleEnum+0x532>
        USBH_UsrLog("Manufacturer : N/A");
 800b058:	4848      	ldr	r0, [pc, #288]	; (800b17c <USBH_HandleEnum+0x54c>)
 800b05a:	f003 ffe7 	bl	800f02c <iprintf>
 800b05e:	200a      	movs	r0, #10
 800b060:	f003 fffc 	bl	800f05c <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2206      	movs	r2, #6
 800b068:	705a      	strb	r2, [r3, #1]
      break;
 800b06a:	e07a      	b.n	800b162 <USBH_HandleEnum+0x532>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b072:	2b00      	cmp	r3, #0
 800b074:	d029      	beq.n	800b0ca <USBH_HandleEnum+0x49a>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b082:	23ff      	movs	r3, #255	; 0xff
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 f95f 	bl	800b348 <USBH_Get_StringDesc>
 800b08a:	4603      	mov	r3, r0
 800b08c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b08e:	7bbb      	ldrb	r3, [r7, #14]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10d      	bne.n	800b0b0 <USBH_HandleEnum+0x480>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b09a:	4619      	mov	r1, r3
 800b09c:	4838      	ldr	r0, [pc, #224]	; (800b180 <USBH_HandleEnum+0x550>)
 800b09e:	f003 ffc5 	bl	800f02c <iprintf>
 800b0a2:	200a      	movs	r0, #10
 800b0a4:	f003 ffda 	bl	800f05c <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2207      	movs	r2, #7
 800b0ac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b0ae:	e05a      	b.n	800b166 <USBH_HandleEnum+0x536>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0b0:	7bbb      	ldrb	r3, [r7, #14]
 800b0b2:	2b03      	cmp	r3, #3
 800b0b4:	d157      	bne.n	800b166 <USBH_HandleEnum+0x536>
          USBH_UsrLog("Product : N/A");
 800b0b6:	4833      	ldr	r0, [pc, #204]	; (800b184 <USBH_HandleEnum+0x554>)
 800b0b8:	f003 ffb8 	bl	800f02c <iprintf>
 800b0bc:	200a      	movs	r0, #10
 800b0be:	f003 ffcd 	bl	800f05c <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2207      	movs	r2, #7
 800b0c6:	705a      	strb	r2, [r3, #1]
      break;
 800b0c8:	e04d      	b.n	800b166 <USBH_HandleEnum+0x536>
        USBH_UsrLog("Product : N/A");
 800b0ca:	482e      	ldr	r0, [pc, #184]	; (800b184 <USBH_HandleEnum+0x554>)
 800b0cc:	f003 ffae 	bl	800f02c <iprintf>
 800b0d0:	200a      	movs	r0, #10
 800b0d2:	f003 ffc3 	bl	800f05c <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2207      	movs	r2, #7
 800b0da:	705a      	strb	r2, [r3, #1]
      break;
 800b0dc:	e043      	b.n	800b166 <USBH_HandleEnum+0x536>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d027      	beq.n	800b138 <USBH_HandleEnum+0x508>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b0f4:	23ff      	movs	r3, #255	; 0xff
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 f926 	bl	800b348 <USBH_Get_StringDesc>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b100:	7bbb      	ldrb	r3, [r7, #14]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d10c      	bne.n	800b120 <USBH_HandleEnum+0x4f0>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b10c:	4619      	mov	r1, r3
 800b10e:	481e      	ldr	r0, [pc, #120]	; (800b188 <USBH_HandleEnum+0x558>)
 800b110:	f003 ff8c 	bl	800f02c <iprintf>
 800b114:	200a      	movs	r0, #10
 800b116:	f003 ffa1 	bl	800f05c <putchar>
          Status = USBH_OK;
 800b11a:	2300      	movs	r3, #0
 800b11c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b11e:	e024      	b.n	800b16a <USBH_HandleEnum+0x53a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b120:	7bbb      	ldrb	r3, [r7, #14]
 800b122:	2b03      	cmp	r3, #3
 800b124:	d121      	bne.n	800b16a <USBH_HandleEnum+0x53a>
          USBH_UsrLog("Serial Number : N/A");
 800b126:	4819      	ldr	r0, [pc, #100]	; (800b18c <USBH_HandleEnum+0x55c>)
 800b128:	f003 ff80 	bl	800f02c <iprintf>
 800b12c:	200a      	movs	r0, #10
 800b12e:	f003 ff95 	bl	800f05c <putchar>
          Status = USBH_OK;
 800b132:	2300      	movs	r3, #0
 800b134:	73fb      	strb	r3, [r7, #15]
      break;
 800b136:	e018      	b.n	800b16a <USBH_HandleEnum+0x53a>
        USBH_UsrLog("Serial Number : N/A");
 800b138:	4814      	ldr	r0, [pc, #80]	; (800b18c <USBH_HandleEnum+0x55c>)
 800b13a:	f003 ff77 	bl	800f02c <iprintf>
 800b13e:	200a      	movs	r0, #10
 800b140:	f003 ff8c 	bl	800f05c <putchar>
        Status = USBH_OK;
 800b144:	2300      	movs	r3, #0
 800b146:	73fb      	strb	r3, [r7, #15]
      break;
 800b148:	e00f      	b.n	800b16a <USBH_HandleEnum+0x53a>

    default:
      break;
 800b14a:	bf00      	nop
 800b14c:	e00e      	b.n	800b16c <USBH_HandleEnum+0x53c>
      break;
 800b14e:	bf00      	nop
 800b150:	e00c      	b.n	800b16c <USBH_HandleEnum+0x53c>
      break;
 800b152:	bf00      	nop
 800b154:	e00a      	b.n	800b16c <USBH_HandleEnum+0x53c>
      break;
 800b156:	bf00      	nop
 800b158:	e008      	b.n	800b16c <USBH_HandleEnum+0x53c>
      break;
 800b15a:	bf00      	nop
 800b15c:	e006      	b.n	800b16c <USBH_HandleEnum+0x53c>
      break;
 800b15e:	bf00      	nop
 800b160:	e004      	b.n	800b16c <USBH_HandleEnum+0x53c>
      break;
 800b162:	bf00      	nop
 800b164:	e002      	b.n	800b16c <USBH_HandleEnum+0x53c>
      break;
 800b166:	bf00      	nop
 800b168:	e000      	b.n	800b16c <USBH_HandleEnum+0x53c>
      break;
 800b16a:	bf00      	nop
  }
  return Status;
 800b16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	0801048c 	.word	0x0801048c
 800b17c:	080104a0 	.word	0x080104a0
 800b180:	080104b4 	.word	0x080104b4
 800b184:	080104c4 	.word	0x080104c4
 800b188:	080104d4 	.word	0x080104d4
 800b18c:	080104e8 	.word	0x080104e8

0800b190 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	683a      	ldr	r2, [r7, #0]
 800b19e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b1a2:	bf00      	nop
 800b1a4:	370c      	adds	r7, #12
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr

0800b1ae <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b082      	sub	sp, #8
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b1bc:	1c5a      	adds	r2, r3, #1
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 f804 	bl	800b1d2 <USBH_HandleSof>
}
 800b1ca:	bf00      	nop
 800b1cc:	3708      	adds	r7, #8
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b082      	sub	sp, #8
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	2b0b      	cmp	r3, #11
 800b1e2:	d10a      	bne.n	800b1fa <USBH_HandleSof+0x28>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d005      	beq.n	800b1fa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1f4:	699b      	ldr	r3, [r3, #24]
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	4798      	blx	r3
  }
}
 800b1fa:	bf00      	nop
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b202:	b480      	push	{r7}
 800b204:	b083      	sub	sp, #12
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2201      	movs	r2, #1
 800b20e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b212:	bf00      	nop
}
 800b214:	370c      	adds	r7, #12
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr

0800b21e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b21e:	b480      	push	{r7}
 800b220:	b083      	sub	sp, #12
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b22e:	bf00      	nop
}
 800b230:	370c      	adds	r7, #12
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr

0800b23a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b23a:	b480      	push	{r7}
 800b23c:	b083      	sub	sp, #12
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2201      	movs	r2, #1
 800b246:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2200      	movs	r2, #0
 800b256:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b25a:	2300      	movs	r3, #0
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	370c      	adds	r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr

0800b268 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2201      	movs	r2, #1
 800b274:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2200      	movs	r2, #0
 800b284:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f003 fc2e 	bl	800eaea <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	791b      	ldrb	r3, [r3, #4]
 800b292:	4619      	mov	r1, r3
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 fdb1 	bl	800bdfc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	795b      	ldrb	r3, [r3, #5]
 800b29e:	4619      	mov	r1, r3
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 fdab 	bl	800bdfc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b2a6:	2300      	movs	r3, #0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b086      	sub	sp, #24
 800b2b4:	af02      	add	r7, sp, #8
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b2c2:	78fb      	ldrb	r3, [r7, #3]
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	9300      	str	r3, [sp, #0]
 800b2c8:	4613      	mov	r3, r2
 800b2ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2ce:	2100      	movs	r1, #0
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 f864 	bl	800b39e <USBH_GetDescriptor>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	73fb      	strb	r3, [r7, #15]
 800b2da:	7bfb      	ldrb	r3, [r7, #15]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d10a      	bne.n	800b2f6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b2ec:	78fa      	ldrb	r2, [r7, #3]
 800b2ee:	b292      	uxth	r2, r2
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	f000 f918 	bl	800b526 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b300:	b580      	push	{r7, lr}
 800b302:	b086      	sub	sp, #24
 800b304:	af02      	add	r7, sp, #8
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	460b      	mov	r3, r1
 800b30a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	331c      	adds	r3, #28
 800b310:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b312:	887b      	ldrh	r3, [r7, #2]
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b31c:	2100      	movs	r1, #0
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 f83d 	bl	800b39e <USBH_GetDescriptor>
 800b324:	4603      	mov	r3, r0
 800b326:	72fb      	strb	r3, [r7, #11]
 800b328:	7afb      	ldrb	r3, [r7, #11]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d107      	bne.n	800b33e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b334:	887a      	ldrh	r2, [r7, #2]
 800b336:	68f9      	ldr	r1, [r7, #12]
 800b338:	4618      	mov	r0, r3
 800b33a:	f000 f964 	bl	800b606 <USBH_ParseCfgDesc>
  }

  return status;
 800b33e:	7afb      	ldrb	r3, [r7, #11]
}
 800b340:	4618      	mov	r0, r3
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b088      	sub	sp, #32
 800b34c:	af02      	add	r7, sp, #8
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	607a      	str	r2, [r7, #4]
 800b352:	461a      	mov	r2, r3
 800b354:	460b      	mov	r3, r1
 800b356:	72fb      	strb	r3, [r7, #11]
 800b358:	4613      	mov	r3, r2
 800b35a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b35c:	7afb      	ldrb	r3, [r7, #11]
 800b35e:	b29b      	uxth	r3, r3
 800b360:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b364:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b36c:	893b      	ldrh	r3, [r7, #8]
 800b36e:	9300      	str	r3, [sp, #0]
 800b370:	460b      	mov	r3, r1
 800b372:	2100      	movs	r1, #0
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f000 f812 	bl	800b39e <USBH_GetDescriptor>
 800b37a:	4603      	mov	r3, r0
 800b37c:	75fb      	strb	r3, [r7, #23]
 800b37e:	7dfb      	ldrb	r3, [r7, #23]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d107      	bne.n	800b394 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b38a:	893a      	ldrh	r2, [r7, #8]
 800b38c:	6879      	ldr	r1, [r7, #4]
 800b38e:	4618      	mov	r0, r3
 800b390:	f000 fa37 	bl	800b802 <USBH_ParseStringDesc>
  }

  return status;
 800b394:	7dfb      	ldrb	r3, [r7, #23]
}
 800b396:	4618      	mov	r0, r3
 800b398:	3718      	adds	r7, #24
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}

0800b39e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b39e:	b580      	push	{r7, lr}
 800b3a0:	b084      	sub	sp, #16
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	60f8      	str	r0, [r7, #12]
 800b3a6:	607b      	str	r3, [r7, #4]
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	72fb      	strb	r3, [r7, #11]
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	789b      	ldrb	r3, [r3, #2]
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d11c      	bne.n	800b3f2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b3b8:	7afb      	ldrb	r3, [r7, #11]
 800b3ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b3be:	b2da      	uxtb	r2, r3
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2206      	movs	r2, #6
 800b3c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	893a      	ldrh	r2, [r7, #8]
 800b3ce:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b3d0:	893b      	ldrh	r3, [r7, #8]
 800b3d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b3d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3da:	d104      	bne.n	800b3e6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f240 4209 	movw	r2, #1033	; 0x409
 800b3e2:	829a      	strh	r2, [r3, #20]
 800b3e4:	e002      	b.n	800b3ec <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	8b3a      	ldrh	r2, [r7, #24]
 800b3f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b3f2:	8b3b      	ldrh	r3, [r7, #24]
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	6879      	ldr	r1, [r7, #4]
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f000 fa50 	bl	800b89e <USBH_CtlReq>
 800b3fe:	4603      	mov	r3, r0
}
 800b400:	4618      	mov	r0, r3
 800b402:	3710      	adds	r7, #16
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	460b      	mov	r3, r1
 800b412:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	789b      	ldrb	r3, [r3, #2]
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d10f      	bne.n	800b43c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2205      	movs	r2, #5
 800b426:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b428:	78fb      	ldrb	r3, [r7, #3]
 800b42a:	b29a      	uxth	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b43c:	2200      	movs	r2, #0
 800b43e:	2100      	movs	r1, #0
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f000 fa2c 	bl	800b89e <USBH_CtlReq>
 800b446:	4603      	mov	r3, r0
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3708      	adds	r7, #8
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	460b      	mov	r3, r1
 800b45a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	789b      	ldrb	r3, [r3, #2]
 800b460:	2b01      	cmp	r3, #1
 800b462:	d10e      	bne.n	800b482 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2209      	movs	r2, #9
 800b46e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	887a      	ldrh	r2, [r7, #2]
 800b474:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2200      	movs	r2, #0
 800b480:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b482:	2200      	movs	r2, #0
 800b484:	2100      	movs	r1, #0
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 fa09 	bl	800b89e <USBH_CtlReq>
 800b48c:	4603      	mov	r3, r0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b082      	sub	sp, #8
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
 800b49e:	460b      	mov	r3, r1
 800b4a0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	789b      	ldrb	r3, [r3, #2]
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d10f      	bne.n	800b4ca <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2203      	movs	r2, #3
 800b4b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b4b6:	78fb      	ldrb	r3, [r7, #3]
 800b4b8:	b29a      	uxth	r2, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 f9e5 	bl	800b89e <USBH_CtlReq>
 800b4d4:	4603      	mov	r3, r0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3708      	adds	r7, #8
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b4de:	b580      	push	{r7, lr}
 800b4e0:	b082      	sub	sp, #8
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	789b      	ldrb	r3, [r3, #2]
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d10f      	bne.n	800b512 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2202      	movs	r2, #2
 800b4f6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b504:	78fb      	ldrb	r3, [r7, #3]
 800b506:	b29a      	uxth	r2, r3
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2200      	movs	r2, #0
 800b510:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b512:	2200      	movs	r2, #0
 800b514:	2100      	movs	r1, #0
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 f9c1 	bl	800b89e <USBH_CtlReq>
 800b51c:	4603      	mov	r3, r0
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3708      	adds	r7, #8
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b526:	b480      	push	{r7}
 800b528:	b085      	sub	sp, #20
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	60f8      	str	r0, [r7, #12]
 800b52e:	60b9      	str	r1, [r7, #8]
 800b530:	4613      	mov	r3, r2
 800b532:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	781a      	ldrb	r2, [r3, #0]
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	785a      	ldrb	r2, [r3, #1]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	3302      	adds	r3, #2
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	b29a      	uxth	r2, r3
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	3303      	adds	r3, #3
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	b29b      	uxth	r3, r3
 800b554:	021b      	lsls	r3, r3, #8
 800b556:	b29b      	uxth	r3, r3
 800b558:	4313      	orrs	r3, r2
 800b55a:	b29a      	uxth	r2, r3
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	791a      	ldrb	r2, [r3, #4]
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	795a      	ldrb	r2, [r3, #5]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	799a      	ldrb	r2, [r3, #6]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	79da      	ldrb	r2, [r3, #7]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b580:	88fb      	ldrh	r3, [r7, #6]
 800b582:	2b08      	cmp	r3, #8
 800b584:	d939      	bls.n	800b5fa <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	3308      	adds	r3, #8
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	b29a      	uxth	r2, r3
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	3309      	adds	r3, #9
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	b29b      	uxth	r3, r3
 800b596:	021b      	lsls	r3, r3, #8
 800b598:	b29b      	uxth	r3, r3
 800b59a:	4313      	orrs	r3, r2
 800b59c:	b29a      	uxth	r2, r3
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	330a      	adds	r3, #10
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	b29a      	uxth	r2, r3
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	330b      	adds	r3, #11
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	021b      	lsls	r3, r3, #8
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	b29a      	uxth	r2, r3
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	330c      	adds	r3, #12
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	b29a      	uxth	r2, r3
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	330d      	adds	r3, #13
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	b29b      	uxth	r3, r3
 800b5ce:	021b      	lsls	r3, r3, #8
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	b29a      	uxth	r2, r3
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	7b9a      	ldrb	r2, [r3, #14]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	7bda      	ldrb	r2, [r3, #15]
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	7c1a      	ldrb	r2, [r3, #16]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	7c5a      	ldrb	r2, [r3, #17]
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	745a      	strb	r2, [r3, #17]
  }
}
 800b5fa:	bf00      	nop
 800b5fc:	3714      	adds	r7, #20
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr

0800b606 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b606:	b580      	push	{r7, lr}
 800b608:	b08a      	sub	sp, #40	; 0x28
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	60f8      	str	r0, [r7, #12]
 800b60e:	60b9      	str	r1, [r7, #8]
 800b610:	4613      	mov	r3, r2
 800b612:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b618:	2300      	movs	r3, #0
 800b61a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b61e:	2300      	movs	r3, #0
 800b620:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	781a      	ldrb	r2, [r3, #0]
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	785a      	ldrb	r2, [r3, #1]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	3302      	adds	r3, #2
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	b29a      	uxth	r2, r3
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	3303      	adds	r3, #3
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	b29b      	uxth	r3, r3
 800b648:	021b      	lsls	r3, r3, #8
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	4313      	orrs	r3, r2
 800b64e:	b29a      	uxth	r2, r3
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	791a      	ldrb	r2, [r3, #4]
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	795a      	ldrb	r2, [r3, #5]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	799a      	ldrb	r2, [r3, #6]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	79da      	ldrb	r2, [r3, #7]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	7a1a      	ldrb	r2, [r3, #8]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b67c:	88fb      	ldrh	r3, [r7, #6]
 800b67e:	2b09      	cmp	r3, #9
 800b680:	d95f      	bls.n	800b742 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b682:	2309      	movs	r3, #9
 800b684:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b686:	2300      	movs	r3, #0
 800b688:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b68a:	e051      	b.n	800b730 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b68c:	f107 0316 	add.w	r3, r7, #22
 800b690:	4619      	mov	r1, r3
 800b692:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b694:	f000 f8e8 	bl	800b868 <USBH_GetNextDesc>
 800b698:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69c:	785b      	ldrb	r3, [r3, #1]
 800b69e:	2b04      	cmp	r3, #4
 800b6a0:	d146      	bne.n	800b730 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b6a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6a6:	221a      	movs	r2, #26
 800b6a8:	fb02 f303 	mul.w	r3, r2, r3
 800b6ac:	3308      	adds	r3, #8
 800b6ae:	68fa      	ldr	r2, [r7, #12]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	3302      	adds	r3, #2
 800b6b4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b6b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b6b8:	69f8      	ldr	r0, [r7, #28]
 800b6ba:	f000 f846 	bl	800b74a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b6c8:	e022      	b.n	800b710 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b6ca:	f107 0316 	add.w	r3, r7, #22
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6d2:	f000 f8c9 	bl	800b868 <USBH_GetNextDesc>
 800b6d6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6da:	785b      	ldrb	r3, [r3, #1]
 800b6dc:	2b05      	cmp	r3, #5
 800b6de:	d117      	bne.n	800b710 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b6e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6e4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b6e8:	3201      	adds	r2, #1
 800b6ea:	00d2      	lsls	r2, r2, #3
 800b6ec:	211a      	movs	r1, #26
 800b6ee:	fb01 f303 	mul.w	r3, r1, r3
 800b6f2:	4413      	add	r3, r2
 800b6f4:	3308      	adds	r3, #8
 800b6f6:	68fa      	ldr	r2, [r7, #12]
 800b6f8:	4413      	add	r3, r2
 800b6fa:	3304      	adds	r3, #4
 800b6fc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b6fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b700:	69b8      	ldr	r0, [r7, #24]
 800b702:	f000 f851 	bl	800b7a8 <USBH_ParseEPDesc>
            ep_ix++;
 800b706:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b70a:	3301      	adds	r3, #1
 800b70c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	791b      	ldrb	r3, [r3, #4]
 800b714:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b718:	429a      	cmp	r2, r3
 800b71a:	d204      	bcs.n	800b726 <USBH_ParseCfgDesc+0x120>
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	885a      	ldrh	r2, [r3, #2]
 800b720:	8afb      	ldrh	r3, [r7, #22]
 800b722:	429a      	cmp	r2, r3
 800b724:	d8d1      	bhi.n	800b6ca <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b726:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b72a:	3301      	adds	r3, #1
 800b72c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b730:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b734:	2b01      	cmp	r3, #1
 800b736:	d804      	bhi.n	800b742 <USBH_ParseCfgDesc+0x13c>
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	885a      	ldrh	r2, [r3, #2]
 800b73c:	8afb      	ldrh	r3, [r7, #22]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d8a4      	bhi.n	800b68c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b742:	bf00      	nop
 800b744:	3728      	adds	r7, #40	; 0x28
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b74a:	b480      	push	{r7}
 800b74c:	b083      	sub	sp, #12
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
 800b752:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	781a      	ldrb	r2, [r3, #0]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	785a      	ldrb	r2, [r3, #1]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	789a      	ldrb	r2, [r3, #2]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	78da      	ldrb	r2, [r3, #3]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	791a      	ldrb	r2, [r3, #4]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	795a      	ldrb	r2, [r3, #5]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	799a      	ldrb	r2, [r3, #6]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	79da      	ldrb	r2, [r3, #7]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	7a1a      	ldrb	r2, [r3, #8]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	721a      	strb	r2, [r3, #8]
}
 800b79c:	bf00      	nop
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	781a      	ldrb	r2, [r3, #0]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	785a      	ldrb	r2, [r3, #1]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	789a      	ldrb	r2, [r3, #2]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	78da      	ldrb	r2, [r3, #3]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	3304      	adds	r3, #4
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	b29a      	uxth	r2, r3
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	3305      	adds	r3, #5
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	021b      	lsls	r3, r3, #8
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	b29a      	uxth	r2, r3
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	799a      	ldrb	r2, [r3, #6]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	719a      	strb	r2, [r3, #6]
}
 800b7f6:	bf00      	nop
 800b7f8:	370c      	adds	r7, #12
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr

0800b802 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b802:	b480      	push	{r7}
 800b804:	b087      	sub	sp, #28
 800b806:	af00      	add	r7, sp, #0
 800b808:	60f8      	str	r0, [r7, #12]
 800b80a:	60b9      	str	r1, [r7, #8]
 800b80c:	4613      	mov	r3, r2
 800b80e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	3301      	adds	r3, #1
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	2b03      	cmp	r3, #3
 800b818:	d120      	bne.n	800b85c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	1e9a      	subs	r2, r3, #2
 800b820:	88fb      	ldrh	r3, [r7, #6]
 800b822:	4293      	cmp	r3, r2
 800b824:	bf28      	it	cs
 800b826:	4613      	movcs	r3, r2
 800b828:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	3302      	adds	r3, #2
 800b82e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b830:	2300      	movs	r3, #0
 800b832:	82fb      	strh	r3, [r7, #22]
 800b834:	e00b      	b.n	800b84e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b836:	8afb      	ldrh	r3, [r7, #22]
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	4413      	add	r3, r2
 800b83c:	781a      	ldrb	r2, [r3, #0]
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	3301      	adds	r3, #1
 800b846:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b848:	8afb      	ldrh	r3, [r7, #22]
 800b84a:	3302      	adds	r3, #2
 800b84c:	82fb      	strh	r3, [r7, #22]
 800b84e:	8afa      	ldrh	r2, [r7, #22]
 800b850:	8abb      	ldrh	r3, [r7, #20]
 800b852:	429a      	cmp	r2, r3
 800b854:	d3ef      	bcc.n	800b836 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	2200      	movs	r2, #0
 800b85a:	701a      	strb	r2, [r3, #0]
  }
}
 800b85c:	bf00      	nop
 800b85e:	371c      	adds	r7, #28
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr

0800b868 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b868:	b480      	push	{r7}
 800b86a:	b085      	sub	sp, #20
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	881a      	ldrh	r2, [r3, #0]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	4413      	add	r3, r2
 800b87e:	b29a      	uxth	r2, r3
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	4413      	add	r3, r2
 800b88e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b890:	68fb      	ldr	r3, [r7, #12]
}
 800b892:	4618      	mov	r0, r3
 800b894:	3714      	adds	r7, #20
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr

0800b89e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b086      	sub	sp, #24
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	60f8      	str	r0, [r7, #12]
 800b8a6:	60b9      	str	r1, [r7, #8]
 800b8a8:	4613      	mov	r3, r2
 800b8aa:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	789b      	ldrb	r3, [r3, #2]
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d002      	beq.n	800b8be <USBH_CtlReq+0x20>
 800b8b8:	2b02      	cmp	r3, #2
 800b8ba:	d00f      	beq.n	800b8dc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b8bc:	e027      	b.n	800b90e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	68ba      	ldr	r2, [r7, #8]
 800b8c2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	88fa      	ldrh	r2, [r7, #6]
 800b8c8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2202      	movs	r2, #2
 800b8d4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	75fb      	strb	r3, [r7, #23]
      break;
 800b8da:	e018      	b.n	800b90e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f000 f81b 	bl	800b918 <USBH_HandleControl>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b8e6:	7dfb      	ldrb	r3, [r7, #23]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d002      	beq.n	800b8f2 <USBH_CtlReq+0x54>
 800b8ec:	7dfb      	ldrb	r3, [r7, #23]
 800b8ee:	2b03      	cmp	r3, #3
 800b8f0:	d106      	bne.n	800b900 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	761a      	strb	r2, [r3, #24]
      break;
 800b8fe:	e005      	b.n	800b90c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b900:	7dfb      	ldrb	r3, [r7, #23]
 800b902:	2b02      	cmp	r3, #2
 800b904:	d102      	bne.n	800b90c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2201      	movs	r2, #1
 800b90a:	709a      	strb	r2, [r3, #2]
      break;
 800b90c:	bf00      	nop
  }
  return status;
 800b90e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b910:	4618      	mov	r0, r3
 800b912:	3718      	adds	r7, #24
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b086      	sub	sp, #24
 800b91c:	af02      	add	r7, sp, #8
 800b91e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b920:	2301      	movs	r3, #1
 800b922:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b924:	2300      	movs	r3, #0
 800b926:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	7e1b      	ldrb	r3, [r3, #24]
 800b92c:	3b01      	subs	r3, #1
 800b92e:	2b0a      	cmp	r3, #10
 800b930:	f200 815f 	bhi.w	800bbf2 <USBH_HandleControl+0x2da>
 800b934:	a201      	add	r2, pc, #4	; (adr r2, 800b93c <USBH_HandleControl+0x24>)
 800b936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b93a:	bf00      	nop
 800b93c:	0800b969 	.word	0x0800b969
 800b940:	0800b983 	.word	0x0800b983
 800b944:	0800b9ed 	.word	0x0800b9ed
 800b948:	0800ba13 	.word	0x0800ba13
 800b94c:	0800ba4b 	.word	0x0800ba4b
 800b950:	0800ba75 	.word	0x0800ba75
 800b954:	0800bac7 	.word	0x0800bac7
 800b958:	0800bae9 	.word	0x0800bae9
 800b95c:	0800bb25 	.word	0x0800bb25
 800b960:	0800bb4b 	.word	0x0800bb4b
 800b964:	0800bb89 	.word	0x0800bb89
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f103 0110 	add.w	r1, r3, #16
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	795b      	ldrb	r3, [r3, #5]
 800b972:	461a      	mov	r2, r3
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 f951 	bl	800bc1c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2202      	movs	r2, #2
 800b97e:	761a      	strb	r2, [r3, #24]
      break;
 800b980:	e142      	b.n	800bc08 <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	795b      	ldrb	r3, [r3, #5]
 800b986:	4619      	mov	r1, r3
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f003 f99d 	bl	800ecc8 <USBH_LL_GetURBState>
 800b98e:	4603      	mov	r3, r0
 800b990:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b992:	7bbb      	ldrb	r3, [r7, #14]
 800b994:	2b01      	cmp	r3, #1
 800b996:	d11e      	bne.n	800b9d6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	7c1b      	ldrb	r3, [r3, #16]
 800b99c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b9a0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	8adb      	ldrh	r3, [r3, #22]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d00a      	beq.n	800b9c0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b9aa:	7b7b      	ldrb	r3, [r7, #13]
 800b9ac:	2b80      	cmp	r3, #128	; 0x80
 800b9ae:	d103      	bne.n	800b9b8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2203      	movs	r2, #3
 800b9b4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b9b6:	e11e      	b.n	800bbf6 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2205      	movs	r2, #5
 800b9bc:	761a      	strb	r2, [r3, #24]
      break;
 800b9be:	e11a      	b.n	800bbf6 <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 800b9c0:	7b7b      	ldrb	r3, [r7, #13]
 800b9c2:	2b80      	cmp	r3, #128	; 0x80
 800b9c4:	d103      	bne.n	800b9ce <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2209      	movs	r2, #9
 800b9ca:	761a      	strb	r2, [r3, #24]
      break;
 800b9cc:	e113      	b.n	800bbf6 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2207      	movs	r2, #7
 800b9d2:	761a      	strb	r2, [r3, #24]
      break;
 800b9d4:	e10f      	b.n	800bbf6 <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b9d6:	7bbb      	ldrb	r3, [r7, #14]
 800b9d8:	2b04      	cmp	r3, #4
 800b9da:	d003      	beq.n	800b9e4 <USBH_HandleControl+0xcc>
 800b9dc:	7bbb      	ldrb	r3, [r7, #14]
 800b9de:	2b02      	cmp	r3, #2
 800b9e0:	f040 8109 	bne.w	800bbf6 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	220b      	movs	r2, #11
 800b9e8:	761a      	strb	r2, [r3, #24]
      break;
 800b9ea:	e104      	b.n	800bbf6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b9f2:	b29a      	uxth	r2, r3
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6899      	ldr	r1, [r3, #8]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	899a      	ldrh	r2, [r3, #12]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	791b      	ldrb	r3, [r3, #4]
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 f948 	bl	800bc9a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2204      	movs	r2, #4
 800ba0e:	761a      	strb	r2, [r3, #24]
      break;
 800ba10:	e0fa      	b.n	800bc08 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	791b      	ldrb	r3, [r3, #4]
 800ba16:	4619      	mov	r1, r3
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f003 f955 	bl	800ecc8 <USBH_LL_GetURBState>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ba22:	7bbb      	ldrb	r3, [r7, #14]
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d102      	bne.n	800ba2e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2209      	movs	r2, #9
 800ba2c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ba2e:	7bbb      	ldrb	r3, [r7, #14]
 800ba30:	2b05      	cmp	r3, #5
 800ba32:	d102      	bne.n	800ba3a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ba34:	2303      	movs	r3, #3
 800ba36:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ba38:	e0df      	b.n	800bbfa <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800ba3a:	7bbb      	ldrb	r3, [r7, #14]
 800ba3c:	2b04      	cmp	r3, #4
 800ba3e:	f040 80dc 	bne.w	800bbfa <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	220b      	movs	r2, #11
 800ba46:	761a      	strb	r2, [r3, #24]
      break;
 800ba48:	e0d7      	b.n	800bbfa <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6899      	ldr	r1, [r3, #8]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	899a      	ldrh	r2, [r3, #12]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	795b      	ldrb	r3, [r3, #5]
 800ba56:	2001      	movs	r0, #1
 800ba58:	9000      	str	r0, [sp, #0]
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 f8f8 	bl	800bc50 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ba66:	b29a      	uxth	r2, r3
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2206      	movs	r2, #6
 800ba70:	761a      	strb	r2, [r3, #24]
      break;
 800ba72:	e0c9      	b.n	800bc08 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	795b      	ldrb	r3, [r3, #5]
 800ba78:	4619      	mov	r1, r3
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f003 f924 	bl	800ecc8 <USBH_LL_GetURBState>
 800ba80:	4603      	mov	r3, r0
 800ba82:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ba84:	7bbb      	ldrb	r3, [r7, #14]
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d103      	bne.n	800ba92 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2207      	movs	r2, #7
 800ba8e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ba90:	e0b5      	b.n	800bbfe <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 800ba92:	7bbb      	ldrb	r3, [r7, #14]
 800ba94:	2b05      	cmp	r3, #5
 800ba96:	d105      	bne.n	800baa4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	220c      	movs	r2, #12
 800ba9c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ba9e:	2303      	movs	r3, #3
 800baa0:	73fb      	strb	r3, [r7, #15]
      break;
 800baa2:	e0ac      	b.n	800bbfe <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800baa4:	7bbb      	ldrb	r3, [r7, #14]
 800baa6:	2b02      	cmp	r3, #2
 800baa8:	d103      	bne.n	800bab2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2205      	movs	r2, #5
 800baae:	761a      	strb	r2, [r3, #24]
      break;
 800bab0:	e0a5      	b.n	800bbfe <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 800bab2:	7bbb      	ldrb	r3, [r7, #14]
 800bab4:	2b04      	cmp	r3, #4
 800bab6:	f040 80a2 	bne.w	800bbfe <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	220b      	movs	r2, #11
 800babe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bac0:	2302      	movs	r3, #2
 800bac2:	73fb      	strb	r3, [r7, #15]
      break;
 800bac4:	e09b      	b.n	800bbfe <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	791b      	ldrb	r3, [r3, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	2100      	movs	r1, #0
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f8e3 	bl	800bc9a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bada:	b29a      	uxth	r2, r3
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2208      	movs	r2, #8
 800bae4:	761a      	strb	r2, [r3, #24]

      break;
 800bae6:	e08f      	b.n	800bc08 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	791b      	ldrb	r3, [r3, #4]
 800baec:	4619      	mov	r1, r3
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f003 f8ea 	bl	800ecc8 <USBH_LL_GetURBState>
 800baf4:	4603      	mov	r3, r0
 800baf6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800baf8:	7bbb      	ldrb	r3, [r7, #14]
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d105      	bne.n	800bb0a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	220d      	movs	r2, #13
 800bb02:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bb04:	2300      	movs	r3, #0
 800bb06:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bb08:	e07b      	b.n	800bc02 <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 800bb0a:	7bbb      	ldrb	r3, [r7, #14]
 800bb0c:	2b04      	cmp	r3, #4
 800bb0e:	d103      	bne.n	800bb18 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	220b      	movs	r2, #11
 800bb14:	761a      	strb	r2, [r3, #24]
      break;
 800bb16:	e074      	b.n	800bc02 <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 800bb18:	7bbb      	ldrb	r3, [r7, #14]
 800bb1a:	2b05      	cmp	r3, #5
 800bb1c:	d171      	bne.n	800bc02 <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 800bb1e:	2303      	movs	r3, #3
 800bb20:	73fb      	strb	r3, [r7, #15]
      break;
 800bb22:	e06e      	b.n	800bc02 <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	795b      	ldrb	r3, [r3, #5]
 800bb28:	2201      	movs	r2, #1
 800bb2a:	9200      	str	r2, [sp, #0]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	2100      	movs	r1, #0
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 f88d 	bl	800bc50 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb3c:	b29a      	uxth	r2, r3
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	220a      	movs	r2, #10
 800bb46:	761a      	strb	r2, [r3, #24]
      break;
 800bb48:	e05e      	b.n	800bc08 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	795b      	ldrb	r3, [r3, #5]
 800bb4e:	4619      	mov	r1, r3
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f003 f8b9 	bl	800ecc8 <USBH_LL_GetURBState>
 800bb56:	4603      	mov	r3, r0
 800bb58:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bb5a:	7bbb      	ldrb	r3, [r7, #14]
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d105      	bne.n	800bb6c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bb60:	2300      	movs	r3, #0
 800bb62:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	220d      	movs	r2, #13
 800bb68:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bb6a:	e04c      	b.n	800bc06 <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bb6c:	7bbb      	ldrb	r3, [r7, #14]
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	d103      	bne.n	800bb7a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2209      	movs	r2, #9
 800bb76:	761a      	strb	r2, [r3, #24]
      break;
 800bb78:	e045      	b.n	800bc06 <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800bb7a:	7bbb      	ldrb	r3, [r7, #14]
 800bb7c:	2b04      	cmp	r3, #4
 800bb7e:	d142      	bne.n	800bc06 <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	220b      	movs	r2, #11
 800bb84:	761a      	strb	r2, [r3, #24]
      break;
 800bb86:	e03e      	b.n	800bc06 <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	7e5b      	ldrb	r3, [r3, #25]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	b2da      	uxtb	r2, r3
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	765a      	strb	r2, [r3, #25]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	7e5b      	ldrb	r3, [r3, #25]
 800bb98:	2b02      	cmp	r3, #2
 800bb9a:	d806      	bhi.n	800bbaa <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2201      	movs	r2, #1
 800bba6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bba8:	e02e      	b.n	800bc08 <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bbb0:	2106      	movs	r1, #6
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800bbbc:	4815      	ldr	r0, [pc, #84]	; (800bc14 <USBH_HandleControl+0x2fc>)
 800bbbe:	f003 fa35 	bl	800f02c <iprintf>
 800bbc2:	4815      	ldr	r0, [pc, #84]	; (800bc18 <USBH_HandleControl+0x300>)
 800bbc4:	f003 fa32 	bl	800f02c <iprintf>
 800bbc8:	200a      	movs	r0, #10
 800bbca:	f003 fa47 	bl	800f05c <putchar>
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	795b      	ldrb	r3, [r3, #5]
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 f911 	bl	800bdfc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	791b      	ldrb	r3, [r3, #4]
 800bbde:	4619      	mov	r1, r3
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 f90b 	bl	800bdfc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bbec:	2302      	movs	r3, #2
 800bbee:	73fb      	strb	r3, [r7, #15]
      break;
 800bbf0:	e00a      	b.n	800bc08 <USBH_HandleControl+0x2f0>

    default:
      break;
 800bbf2:	bf00      	nop
 800bbf4:	e008      	b.n	800bc08 <USBH_HandleControl+0x2f0>
      break;
 800bbf6:	bf00      	nop
 800bbf8:	e006      	b.n	800bc08 <USBH_HandleControl+0x2f0>
      break;
 800bbfa:	bf00      	nop
 800bbfc:	e004      	b.n	800bc08 <USBH_HandleControl+0x2f0>
      break;
 800bbfe:	bf00      	nop
 800bc00:	e002      	b.n	800bc08 <USBH_HandleControl+0x2f0>
      break;
 800bc02:	bf00      	nop
 800bc04:	e000      	b.n	800bc08 <USBH_HandleControl+0x2f0>
      break;
 800bc06:	bf00      	nop
  }

  return status;
 800bc08:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3710      	adds	r7, #16
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	080104fc 	.word	0x080104fc
 800bc18:	08010504 	.word	0x08010504

0800bc1c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b088      	sub	sp, #32
 800bc20:	af04      	add	r7, sp, #16
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	4613      	mov	r3, r2
 800bc28:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc2a:	79f9      	ldrb	r1, [r7, #7]
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	9303      	str	r3, [sp, #12]
 800bc30:	2308      	movs	r3, #8
 800bc32:	9302      	str	r3, [sp, #8]
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	9301      	str	r3, [sp, #4]
 800bc38:	2300      	movs	r3, #0
 800bc3a:	9300      	str	r3, [sp, #0]
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	2200      	movs	r2, #0
 800bc40:	68f8      	ldr	r0, [r7, #12]
 800bc42:	f003 f810 	bl	800ec66 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800bc46:	2300      	movs	r3, #0
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3710      	adds	r7, #16
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b088      	sub	sp, #32
 800bc54:	af04      	add	r7, sp, #16
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	60b9      	str	r1, [r7, #8]
 800bc5a:	4611      	mov	r1, r2
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	460b      	mov	r3, r1
 800bc60:	80fb      	strh	r3, [r7, #6]
 800bc62:	4613      	mov	r3, r2
 800bc64:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d001      	beq.n	800bc74 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bc70:	2300      	movs	r3, #0
 800bc72:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc74:	7979      	ldrb	r1, [r7, #5]
 800bc76:	7e3b      	ldrb	r3, [r7, #24]
 800bc78:	9303      	str	r3, [sp, #12]
 800bc7a:	88fb      	ldrh	r3, [r7, #6]
 800bc7c:	9302      	str	r3, [sp, #8]
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	9301      	str	r3, [sp, #4]
 800bc82:	2301      	movs	r3, #1
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	2300      	movs	r3, #0
 800bc88:	2200      	movs	r2, #0
 800bc8a:	68f8      	ldr	r0, [r7, #12]
 800bc8c:	f002 ffeb 	bl	800ec66 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bc90:	2300      	movs	r3, #0
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3710      	adds	r7, #16
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}

0800bc9a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bc9a:	b580      	push	{r7, lr}
 800bc9c:	b088      	sub	sp, #32
 800bc9e:	af04      	add	r7, sp, #16
 800bca0:	60f8      	str	r0, [r7, #12]
 800bca2:	60b9      	str	r1, [r7, #8]
 800bca4:	4611      	mov	r1, r2
 800bca6:	461a      	mov	r2, r3
 800bca8:	460b      	mov	r3, r1
 800bcaa:	80fb      	strh	r3, [r7, #6]
 800bcac:	4613      	mov	r3, r2
 800bcae:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bcb0:	7979      	ldrb	r1, [r7, #5]
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	9303      	str	r3, [sp, #12]
 800bcb6:	88fb      	ldrh	r3, [r7, #6]
 800bcb8:	9302      	str	r3, [sp, #8]
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	9301      	str	r3, [sp, #4]
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	9300      	str	r3, [sp, #0]
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	68f8      	ldr	r0, [r7, #12]
 800bcc8:	f002 ffcd 	bl	800ec66 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bccc:	2300      	movs	r3, #0

}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}

0800bcd6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b088      	sub	sp, #32
 800bcda:	af04      	add	r7, sp, #16
 800bcdc:	60f8      	str	r0, [r7, #12]
 800bcde:	60b9      	str	r1, [r7, #8]
 800bce0:	4611      	mov	r1, r2
 800bce2:	461a      	mov	r2, r3
 800bce4:	460b      	mov	r3, r1
 800bce6:	80fb      	strh	r3, [r7, #6]
 800bce8:	4613      	mov	r3, r2
 800bcea:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d001      	beq.n	800bcfa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bcfa:	7979      	ldrb	r1, [r7, #5]
 800bcfc:	7e3b      	ldrb	r3, [r7, #24]
 800bcfe:	9303      	str	r3, [sp, #12]
 800bd00:	88fb      	ldrh	r3, [r7, #6]
 800bd02:	9302      	str	r3, [sp, #8]
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	9301      	str	r3, [sp, #4]
 800bd08:	2301      	movs	r3, #1
 800bd0a:	9300      	str	r3, [sp, #0]
 800bd0c:	2302      	movs	r3, #2
 800bd0e:	2200      	movs	r2, #0
 800bd10:	68f8      	ldr	r0, [r7, #12]
 800bd12:	f002 ffa8 	bl	800ec66 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bd16:	2300      	movs	r3, #0
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3710      	adds	r7, #16
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b088      	sub	sp, #32
 800bd24:	af04      	add	r7, sp, #16
 800bd26:	60f8      	str	r0, [r7, #12]
 800bd28:	60b9      	str	r1, [r7, #8]
 800bd2a:	4611      	mov	r1, r2
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	460b      	mov	r3, r1
 800bd30:	80fb      	strh	r3, [r7, #6]
 800bd32:	4613      	mov	r3, r2
 800bd34:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bd36:	7979      	ldrb	r1, [r7, #5]
 800bd38:	2300      	movs	r3, #0
 800bd3a:	9303      	str	r3, [sp, #12]
 800bd3c:	88fb      	ldrh	r3, [r7, #6]
 800bd3e:	9302      	str	r3, [sp, #8]
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	9301      	str	r3, [sp, #4]
 800bd44:	2301      	movs	r3, #1
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	2302      	movs	r3, #2
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	f002 ff8a 	bl	800ec66 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bd52:	2300      	movs	r3, #0
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3710      	adds	r7, #16
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b086      	sub	sp, #24
 800bd60:	af04      	add	r7, sp, #16
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	4608      	mov	r0, r1
 800bd66:	4611      	mov	r1, r2
 800bd68:	461a      	mov	r2, r3
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	70fb      	strb	r3, [r7, #3]
 800bd6e:	460b      	mov	r3, r1
 800bd70:	70bb      	strb	r3, [r7, #2]
 800bd72:	4613      	mov	r3, r2
 800bd74:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bd76:	7878      	ldrb	r0, [r7, #1]
 800bd78:	78ba      	ldrb	r2, [r7, #2]
 800bd7a:	78f9      	ldrb	r1, [r7, #3]
 800bd7c:	8b3b      	ldrh	r3, [r7, #24]
 800bd7e:	9302      	str	r3, [sp, #8]
 800bd80:	7d3b      	ldrb	r3, [r7, #20]
 800bd82:	9301      	str	r3, [sp, #4]
 800bd84:	7c3b      	ldrb	r3, [r7, #16]
 800bd86:	9300      	str	r3, [sp, #0]
 800bd88:	4603      	mov	r3, r0
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f002 ff1d 	bl	800ebca <USBH_LL_OpenPipe>

  return USBH_OK;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3708      	adds	r7, #8
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}

0800bd9a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bd9a:	b580      	push	{r7, lr}
 800bd9c:	b082      	sub	sp, #8
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
 800bda2:	460b      	mov	r3, r1
 800bda4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bda6:	78fb      	ldrb	r3, [r7, #3]
 800bda8:	4619      	mov	r1, r3
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f002 ff3c 	bl	800ec28 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bdb0:	2300      	movs	r3, #0
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b084      	sub	sp, #16
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 f836 	bl	800be38 <USBH_GetFreePipe>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bdd0:	89fb      	ldrh	r3, [r7, #14]
 800bdd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d00a      	beq.n	800bdf0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800bdda:	78fa      	ldrb	r2, [r7, #3]
 800bddc:	89fb      	ldrh	r3, [r7, #14]
 800bdde:	f003 030f 	and.w	r3, r3, #15
 800bde2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bde6:	6879      	ldr	r1, [r7, #4]
 800bde8:	33e0      	adds	r3, #224	; 0xe0
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	440b      	add	r3, r1
 800bdee:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bdf0:	89fb      	ldrh	r3, [r7, #14]
 800bdf2:	b2db      	uxtb	r3, r3
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3710      	adds	r7, #16
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	460b      	mov	r3, r1
 800be06:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800be08:	78fb      	ldrb	r3, [r7, #3]
 800be0a:	2b0a      	cmp	r3, #10
 800be0c:	d80d      	bhi.n	800be2a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800be0e:	78fb      	ldrb	r3, [r7, #3]
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	33e0      	adds	r3, #224	; 0xe0
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	4413      	add	r3, r2
 800be18:	685a      	ldr	r2, [r3, #4]
 800be1a:	78fb      	ldrb	r3, [r7, #3]
 800be1c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800be20:	6879      	ldr	r1, [r7, #4]
 800be22:	33e0      	adds	r3, #224	; 0xe0
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	440b      	add	r3, r1
 800be28:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800be2a:	2300      	movs	r3, #0
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	370c      	adds	r7, #12
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr

0800be38 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800be38:	b480      	push	{r7}
 800be3a:	b085      	sub	sp, #20
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800be40:	2300      	movs	r3, #0
 800be42:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800be44:	2300      	movs	r3, #0
 800be46:	73fb      	strb	r3, [r7, #15]
 800be48:	e00f      	b.n	800be6a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800be4a:	7bfb      	ldrb	r3, [r7, #15]
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	33e0      	adds	r3, #224	; 0xe0
 800be50:	009b      	lsls	r3, r3, #2
 800be52:	4413      	add	r3, r2
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d102      	bne.n	800be64 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800be5e:	7bfb      	ldrb	r3, [r7, #15]
 800be60:	b29b      	uxth	r3, r3
 800be62:	e007      	b.n	800be74 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800be64:	7bfb      	ldrb	r3, [r7, #15]
 800be66:	3301      	adds	r3, #1
 800be68:	73fb      	strb	r3, [r7, #15]
 800be6a:	7bfb      	ldrb	r3, [r7, #15]
 800be6c:	2b0a      	cmp	r3, #10
 800be6e:	d9ec      	bls.n	800be4a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800be70:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800be74:	4618      	mov	r0, r3
 800be76:	3714      	adds	r7, #20
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
 800be86:	4603      	mov	r3, r0
 800be88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800be8a:	79fb      	ldrb	r3, [r7, #7]
 800be8c:	4a08      	ldr	r2, [pc, #32]	; (800beb0 <disk_status+0x30>)
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	4413      	add	r3, r2
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	79fa      	ldrb	r2, [r7, #7]
 800be98:	4905      	ldr	r1, [pc, #20]	; (800beb0 <disk_status+0x30>)
 800be9a:	440a      	add	r2, r1
 800be9c:	7a12      	ldrb	r2, [r2, #8]
 800be9e:	4610      	mov	r0, r2
 800bea0:	4798      	blx	r3
 800bea2:	4603      	mov	r3, r0
 800bea4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bea6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3710      	adds	r7, #16
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	20002130 	.word	0x20002130

0800beb4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	4603      	mov	r3, r0
 800bebc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bebe:	2300      	movs	r3, #0
 800bec0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bec2:	79fb      	ldrb	r3, [r7, #7]
 800bec4:	4a0d      	ldr	r2, [pc, #52]	; (800befc <disk_initialize+0x48>)
 800bec6:	5cd3      	ldrb	r3, [r2, r3]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d111      	bne.n	800bef0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800becc:	79fb      	ldrb	r3, [r7, #7]
 800bece:	4a0b      	ldr	r2, [pc, #44]	; (800befc <disk_initialize+0x48>)
 800bed0:	2101      	movs	r1, #1
 800bed2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bed4:	79fb      	ldrb	r3, [r7, #7]
 800bed6:	4a09      	ldr	r2, [pc, #36]	; (800befc <disk_initialize+0x48>)
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	4413      	add	r3, r2
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	79fa      	ldrb	r2, [r7, #7]
 800bee2:	4906      	ldr	r1, [pc, #24]	; (800befc <disk_initialize+0x48>)
 800bee4:	440a      	add	r2, r1
 800bee6:	7a12      	ldrb	r2, [r2, #8]
 800bee8:	4610      	mov	r0, r2
 800beea:	4798      	blx	r3
 800beec:	4603      	mov	r3, r0
 800beee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bef0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	20002130 	.word	0x20002130

0800bf00 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bf00:	b590      	push	{r4, r7, lr}
 800bf02:	b087      	sub	sp, #28
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	60b9      	str	r1, [r7, #8]
 800bf08:	607a      	str	r2, [r7, #4]
 800bf0a:	603b      	str	r3, [r7, #0]
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bf10:	7bfb      	ldrb	r3, [r7, #15]
 800bf12:	4a0a      	ldr	r2, [pc, #40]	; (800bf3c <disk_read+0x3c>)
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	4413      	add	r3, r2
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	689c      	ldr	r4, [r3, #8]
 800bf1c:	7bfb      	ldrb	r3, [r7, #15]
 800bf1e:	4a07      	ldr	r2, [pc, #28]	; (800bf3c <disk_read+0x3c>)
 800bf20:	4413      	add	r3, r2
 800bf22:	7a18      	ldrb	r0, [r3, #8]
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	68b9      	ldr	r1, [r7, #8]
 800bf2a:	47a0      	blx	r4
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	75fb      	strb	r3, [r7, #23]
  return res;
 800bf30:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	371c      	adds	r7, #28
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd90      	pop	{r4, r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	20002130 	.word	0x20002130

0800bf40 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bf40:	b590      	push	{r4, r7, lr}
 800bf42:	b087      	sub	sp, #28
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60b9      	str	r1, [r7, #8]
 800bf48:	607a      	str	r2, [r7, #4]
 800bf4a:	603b      	str	r3, [r7, #0]
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bf50:	7bfb      	ldrb	r3, [r7, #15]
 800bf52:	4a0a      	ldr	r2, [pc, #40]	; (800bf7c <disk_write+0x3c>)
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	4413      	add	r3, r2
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	68dc      	ldr	r4, [r3, #12]
 800bf5c:	7bfb      	ldrb	r3, [r7, #15]
 800bf5e:	4a07      	ldr	r2, [pc, #28]	; (800bf7c <disk_write+0x3c>)
 800bf60:	4413      	add	r3, r2
 800bf62:	7a18      	ldrb	r0, [r3, #8]
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	68b9      	ldr	r1, [r7, #8]
 800bf6a:	47a0      	blx	r4
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	75fb      	strb	r3, [r7, #23]
  return res;
 800bf70:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	371c      	adds	r7, #28
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd90      	pop	{r4, r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	20002130 	.word	0x20002130

0800bf80 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	4603      	mov	r3, r0
 800bf88:	603a      	str	r2, [r7, #0]
 800bf8a:	71fb      	strb	r3, [r7, #7]
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bf90:	79fb      	ldrb	r3, [r7, #7]
 800bf92:	4a09      	ldr	r2, [pc, #36]	; (800bfb8 <disk_ioctl+0x38>)
 800bf94:	009b      	lsls	r3, r3, #2
 800bf96:	4413      	add	r3, r2
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	691b      	ldr	r3, [r3, #16]
 800bf9c:	79fa      	ldrb	r2, [r7, #7]
 800bf9e:	4906      	ldr	r1, [pc, #24]	; (800bfb8 <disk_ioctl+0x38>)
 800bfa0:	440a      	add	r2, r1
 800bfa2:	7a10      	ldrb	r0, [r2, #8]
 800bfa4:	79b9      	ldrb	r1, [r7, #6]
 800bfa6:	683a      	ldr	r2, [r7, #0]
 800bfa8:	4798      	blx	r3
 800bfaa:	4603      	mov	r3, r0
 800bfac:	73fb      	strb	r3, [r7, #15]
  return res;
 800bfae:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3710      	adds	r7, #16
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	20002130 	.word	0x20002130

0800bfbc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b085      	sub	sp, #20
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bfcc:	89fb      	ldrh	r3, [r7, #14]
 800bfce:	021b      	lsls	r3, r3, #8
 800bfd0:	b21a      	sxth	r2, r3
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	b21b      	sxth	r3, r3
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	b21b      	sxth	r3, r3
 800bfdc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bfde:	89fb      	ldrh	r3, [r7, #14]
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3714      	adds	r7, #20
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bfec:	b480      	push	{r7}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	3303      	adds	r3, #3
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	021b      	lsls	r3, r3, #8
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	3202      	adds	r2, #2
 800c004:	7812      	ldrb	r2, [r2, #0]
 800c006:	4313      	orrs	r3, r2
 800c008:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	021b      	lsls	r3, r3, #8
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	3201      	adds	r2, #1
 800c012:	7812      	ldrb	r2, [r2, #0]
 800c014:	4313      	orrs	r3, r2
 800c016:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	021b      	lsls	r3, r3, #8
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	7812      	ldrb	r2, [r2, #0]
 800c020:	4313      	orrs	r3, r2
 800c022:	60fb      	str	r3, [r7, #12]
	return rv;
 800c024:	68fb      	ldr	r3, [r7, #12]
}
 800c026:	4618      	mov	r0, r3
 800c028:	3714      	adds	r7, #20
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr

0800c032 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c032:	b480      	push	{r7}
 800c034:	b083      	sub	sp, #12
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
 800c03a:	460b      	mov	r3, r1
 800c03c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	1c5a      	adds	r2, r3, #1
 800c042:	607a      	str	r2, [r7, #4]
 800c044:	887a      	ldrh	r2, [r7, #2]
 800c046:	b2d2      	uxtb	r2, r2
 800c048:	701a      	strb	r2, [r3, #0]
 800c04a:	887b      	ldrh	r3, [r7, #2]
 800c04c:	0a1b      	lsrs	r3, r3, #8
 800c04e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	1c5a      	adds	r2, r3, #1
 800c054:	607a      	str	r2, [r7, #4]
 800c056:	887a      	ldrh	r2, [r7, #2]
 800c058:	b2d2      	uxtb	r2, r2
 800c05a:	701a      	strb	r2, [r3, #0]
}
 800c05c:	bf00      	nop
 800c05e:	370c      	adds	r7, #12
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c068:	b480      	push	{r7}
 800c06a:	b083      	sub	sp, #12
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	1c5a      	adds	r2, r3, #1
 800c076:	607a      	str	r2, [r7, #4]
 800c078:	683a      	ldr	r2, [r7, #0]
 800c07a:	b2d2      	uxtb	r2, r2
 800c07c:	701a      	strb	r2, [r3, #0]
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	0a1b      	lsrs	r3, r3, #8
 800c082:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	1c5a      	adds	r2, r3, #1
 800c088:	607a      	str	r2, [r7, #4]
 800c08a:	683a      	ldr	r2, [r7, #0]
 800c08c:	b2d2      	uxtb	r2, r2
 800c08e:	701a      	strb	r2, [r3, #0]
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	0a1b      	lsrs	r3, r3, #8
 800c094:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	1c5a      	adds	r2, r3, #1
 800c09a:	607a      	str	r2, [r7, #4]
 800c09c:	683a      	ldr	r2, [r7, #0]
 800c09e:	b2d2      	uxtb	r2, r2
 800c0a0:	701a      	strb	r2, [r3, #0]
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	0a1b      	lsrs	r3, r3, #8
 800c0a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	1c5a      	adds	r2, r3, #1
 800c0ac:	607a      	str	r2, [r7, #4]
 800c0ae:	683a      	ldr	r2, [r7, #0]
 800c0b0:	b2d2      	uxtb	r2, r2
 800c0b2:	701a      	strb	r2, [r3, #0]
}
 800c0b4:	bf00      	nop
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c0c0:	b480      	push	{r7}
 800c0c2:	b087      	sub	sp, #28
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	60f8      	str	r0, [r7, #12]
 800c0c8:	60b9      	str	r1, [r7, #8]
 800c0ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00d      	beq.n	800c0f6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c0da:	693a      	ldr	r2, [r7, #16]
 800c0dc:	1c53      	adds	r3, r2, #1
 800c0de:	613b      	str	r3, [r7, #16]
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	1c59      	adds	r1, r3, #1
 800c0e4:	6179      	str	r1, [r7, #20]
 800c0e6:	7812      	ldrb	r2, [r2, #0]
 800c0e8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	3b01      	subs	r3, #1
 800c0ee:	607b      	str	r3, [r7, #4]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d1f1      	bne.n	800c0da <mem_cpy+0x1a>
	}
}
 800c0f6:	bf00      	nop
 800c0f8:	371c      	adds	r7, #28
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr

0800c102 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c102:	b480      	push	{r7}
 800c104:	b087      	sub	sp, #28
 800c106:	af00      	add	r7, sp, #0
 800c108:	60f8      	str	r0, [r7, #12]
 800c10a:	60b9      	str	r1, [r7, #8]
 800c10c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	1c5a      	adds	r2, r3, #1
 800c116:	617a      	str	r2, [r7, #20]
 800c118:	68ba      	ldr	r2, [r7, #8]
 800c11a:	b2d2      	uxtb	r2, r2
 800c11c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	3b01      	subs	r3, #1
 800c122:	607b      	str	r3, [r7, #4]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d1f3      	bne.n	800c112 <mem_set+0x10>
}
 800c12a:	bf00      	nop
 800c12c:	bf00      	nop
 800c12e:	371c      	adds	r7, #28
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr

0800c138 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c138:	b480      	push	{r7}
 800c13a:	b089      	sub	sp, #36	; 0x24
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	61fb      	str	r3, [r7, #28]
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c14c:	2300      	movs	r3, #0
 800c14e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	1c5a      	adds	r2, r3, #1
 800c154:	61fa      	str	r2, [r7, #28]
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	4619      	mov	r1, r3
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	1c5a      	adds	r2, r3, #1
 800c15e:	61ba      	str	r2, [r7, #24]
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	1acb      	subs	r3, r1, r3
 800c164:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	3b01      	subs	r3, #1
 800c16a:	607b      	str	r3, [r7, #4]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d002      	beq.n	800c178 <mem_cmp+0x40>
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d0eb      	beq.n	800c150 <mem_cmp+0x18>

	return r;
 800c178:	697b      	ldr	r3, [r7, #20]
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3724      	adds	r7, #36	; 0x24
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr

0800c186 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c186:	b480      	push	{r7}
 800c188:	b083      	sub	sp, #12
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
 800c18e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c190:	e002      	b.n	800c198 <chk_chr+0x12>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	3301      	adds	r3, #1
 800c196:	607b      	str	r3, [r7, #4]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d005      	beq.n	800c1ac <chk_chr+0x26>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d1f2      	bne.n	800c192 <chk_chr+0xc>
	return *str;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	781b      	ldrb	r3, [r3, #0]
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	370c      	adds	r7, #12
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b085      	sub	sp, #20
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	60bb      	str	r3, [r7, #8]
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	60fb      	str	r3, [r7, #12]
 800c1ce:	e029      	b.n	800c224 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c1d0:	4a27      	ldr	r2, [pc, #156]	; (800c270 <chk_lock+0xb4>)
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	011b      	lsls	r3, r3, #4
 800c1d6:	4413      	add	r3, r2
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d01d      	beq.n	800c21a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c1de:	4a24      	ldr	r2, [pc, #144]	; (800c270 <chk_lock+0xb4>)
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	011b      	lsls	r3, r3, #4
 800c1e4:	4413      	add	r3, r2
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d116      	bne.n	800c21e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c1f0:	4a1f      	ldr	r2, [pc, #124]	; (800c270 <chk_lock+0xb4>)
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	011b      	lsls	r3, r3, #4
 800c1f6:	4413      	add	r3, r2
 800c1f8:	3304      	adds	r3, #4
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c200:	429a      	cmp	r2, r3
 800c202:	d10c      	bne.n	800c21e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c204:	4a1a      	ldr	r2, [pc, #104]	; (800c270 <chk_lock+0xb4>)
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	011b      	lsls	r3, r3, #4
 800c20a:	4413      	add	r3, r2
 800c20c:	3308      	adds	r3, #8
 800c20e:	681a      	ldr	r2, [r3, #0]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c214:	429a      	cmp	r2, r3
 800c216:	d102      	bne.n	800c21e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c218:	e007      	b.n	800c22a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c21a:	2301      	movs	r3, #1
 800c21c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	3301      	adds	r3, #1
 800c222:	60fb      	str	r3, [r7, #12]
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2b01      	cmp	r3, #1
 800c228:	d9d2      	bls.n	800c1d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2b02      	cmp	r3, #2
 800c22e:	d109      	bne.n	800c244 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d102      	bne.n	800c23c <chk_lock+0x80>
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	2b02      	cmp	r3, #2
 800c23a:	d101      	bne.n	800c240 <chk_lock+0x84>
 800c23c:	2300      	movs	r3, #0
 800c23e:	e010      	b.n	800c262 <chk_lock+0xa6>
 800c240:	2312      	movs	r3, #18
 800c242:	e00e      	b.n	800c262 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d108      	bne.n	800c25c <chk_lock+0xa0>
 800c24a:	4a09      	ldr	r2, [pc, #36]	; (800c270 <chk_lock+0xb4>)
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	011b      	lsls	r3, r3, #4
 800c250:	4413      	add	r3, r2
 800c252:	330c      	adds	r3, #12
 800c254:	881b      	ldrh	r3, [r3, #0]
 800c256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c25a:	d101      	bne.n	800c260 <chk_lock+0xa4>
 800c25c:	2310      	movs	r3, #16
 800c25e:	e000      	b.n	800c262 <chk_lock+0xa6>
 800c260:	2300      	movs	r3, #0
}
 800c262:	4618      	mov	r0, r3
 800c264:	3714      	adds	r7, #20
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	20002110 	.word	0x20002110

0800c274 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c274:	b480      	push	{r7}
 800c276:	b083      	sub	sp, #12
 800c278:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c27a:	2300      	movs	r3, #0
 800c27c:	607b      	str	r3, [r7, #4]
 800c27e:	e002      	b.n	800c286 <enq_lock+0x12>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	3301      	adds	r3, #1
 800c284:	607b      	str	r3, [r7, #4]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d806      	bhi.n	800c29a <enq_lock+0x26>
 800c28c:	4a09      	ldr	r2, [pc, #36]	; (800c2b4 <enq_lock+0x40>)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	011b      	lsls	r3, r3, #4
 800c292:	4413      	add	r3, r2
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d1f2      	bne.n	800c280 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2b02      	cmp	r3, #2
 800c29e:	bf14      	ite	ne
 800c2a0:	2301      	movne	r3, #1
 800c2a2:	2300      	moveq	r3, #0
 800c2a4:	b2db      	uxtb	r3, r3
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	370c      	adds	r7, #12
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr
 800c2b2:	bf00      	nop
 800c2b4:	20002110 	.word	0x20002110

0800c2b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b085      	sub	sp, #20
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	60fb      	str	r3, [r7, #12]
 800c2c6:	e01f      	b.n	800c308 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c2c8:	4a41      	ldr	r2, [pc, #260]	; (800c3d0 <inc_lock+0x118>)
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	011b      	lsls	r3, r3, #4
 800c2ce:	4413      	add	r3, r2
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d113      	bne.n	800c302 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c2da:	4a3d      	ldr	r2, [pc, #244]	; (800c3d0 <inc_lock+0x118>)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	011b      	lsls	r3, r3, #4
 800c2e0:	4413      	add	r3, r2
 800c2e2:	3304      	adds	r3, #4
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d109      	bne.n	800c302 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c2ee:	4a38      	ldr	r2, [pc, #224]	; (800c3d0 <inc_lock+0x118>)
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	011b      	lsls	r3, r3, #4
 800c2f4:	4413      	add	r3, r2
 800c2f6:	3308      	adds	r3, #8
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d006      	beq.n	800c310 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	3301      	adds	r3, #1
 800c306:	60fb      	str	r3, [r7, #12]
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	d9dc      	bls.n	800c2c8 <inc_lock+0x10>
 800c30e:	e000      	b.n	800c312 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c310:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2b02      	cmp	r3, #2
 800c316:	d132      	bne.n	800c37e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c318:	2300      	movs	r3, #0
 800c31a:	60fb      	str	r3, [r7, #12]
 800c31c:	e002      	b.n	800c324 <inc_lock+0x6c>
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	3301      	adds	r3, #1
 800c322:	60fb      	str	r3, [r7, #12]
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2b01      	cmp	r3, #1
 800c328:	d806      	bhi.n	800c338 <inc_lock+0x80>
 800c32a:	4a29      	ldr	r2, [pc, #164]	; (800c3d0 <inc_lock+0x118>)
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	011b      	lsls	r3, r3, #4
 800c330:	4413      	add	r3, r2
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d1f2      	bne.n	800c31e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2b02      	cmp	r3, #2
 800c33c:	d101      	bne.n	800c342 <inc_lock+0x8a>
 800c33e:	2300      	movs	r3, #0
 800c340:	e040      	b.n	800c3c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681a      	ldr	r2, [r3, #0]
 800c346:	4922      	ldr	r1, [pc, #136]	; (800c3d0 <inc_lock+0x118>)
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	011b      	lsls	r3, r3, #4
 800c34c:	440b      	add	r3, r1
 800c34e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	689a      	ldr	r2, [r3, #8]
 800c354:	491e      	ldr	r1, [pc, #120]	; (800c3d0 <inc_lock+0x118>)
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	011b      	lsls	r3, r3, #4
 800c35a:	440b      	add	r3, r1
 800c35c:	3304      	adds	r3, #4
 800c35e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	695a      	ldr	r2, [r3, #20]
 800c364:	491a      	ldr	r1, [pc, #104]	; (800c3d0 <inc_lock+0x118>)
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	011b      	lsls	r3, r3, #4
 800c36a:	440b      	add	r3, r1
 800c36c:	3308      	adds	r3, #8
 800c36e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c370:	4a17      	ldr	r2, [pc, #92]	; (800c3d0 <inc_lock+0x118>)
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	011b      	lsls	r3, r3, #4
 800c376:	4413      	add	r3, r2
 800c378:	330c      	adds	r3, #12
 800c37a:	2200      	movs	r2, #0
 800c37c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d009      	beq.n	800c398 <inc_lock+0xe0>
 800c384:	4a12      	ldr	r2, [pc, #72]	; (800c3d0 <inc_lock+0x118>)
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	011b      	lsls	r3, r3, #4
 800c38a:	4413      	add	r3, r2
 800c38c:	330c      	adds	r3, #12
 800c38e:	881b      	ldrh	r3, [r3, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d001      	beq.n	800c398 <inc_lock+0xe0>
 800c394:	2300      	movs	r3, #0
 800c396:	e015      	b.n	800c3c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d108      	bne.n	800c3b0 <inc_lock+0xf8>
 800c39e:	4a0c      	ldr	r2, [pc, #48]	; (800c3d0 <inc_lock+0x118>)
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	011b      	lsls	r3, r3, #4
 800c3a4:	4413      	add	r3, r2
 800c3a6:	330c      	adds	r3, #12
 800c3a8:	881b      	ldrh	r3, [r3, #0]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	b29a      	uxth	r2, r3
 800c3ae:	e001      	b.n	800c3b4 <inc_lock+0xfc>
 800c3b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c3b4:	4906      	ldr	r1, [pc, #24]	; (800c3d0 <inc_lock+0x118>)
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	011b      	lsls	r3, r3, #4
 800c3ba:	440b      	add	r3, r1
 800c3bc:	330c      	adds	r3, #12
 800c3be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	3301      	adds	r3, #1
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3714      	adds	r7, #20
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr
 800c3d0:	20002110 	.word	0x20002110

0800c3d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b085      	sub	sp, #20
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	607b      	str	r3, [r7, #4]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d825      	bhi.n	800c434 <dec_lock+0x60>
		n = Files[i].ctr;
 800c3e8:	4a17      	ldr	r2, [pc, #92]	; (800c448 <dec_lock+0x74>)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	011b      	lsls	r3, r3, #4
 800c3ee:	4413      	add	r3, r2
 800c3f0:	330c      	adds	r3, #12
 800c3f2:	881b      	ldrh	r3, [r3, #0]
 800c3f4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c3f6:	89fb      	ldrh	r3, [r7, #14]
 800c3f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3fc:	d101      	bne.n	800c402 <dec_lock+0x2e>
 800c3fe:	2300      	movs	r3, #0
 800c400:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c402:	89fb      	ldrh	r3, [r7, #14]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d002      	beq.n	800c40e <dec_lock+0x3a>
 800c408:	89fb      	ldrh	r3, [r7, #14]
 800c40a:	3b01      	subs	r3, #1
 800c40c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c40e:	4a0e      	ldr	r2, [pc, #56]	; (800c448 <dec_lock+0x74>)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	011b      	lsls	r3, r3, #4
 800c414:	4413      	add	r3, r2
 800c416:	330c      	adds	r3, #12
 800c418:	89fa      	ldrh	r2, [r7, #14]
 800c41a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c41c:	89fb      	ldrh	r3, [r7, #14]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d105      	bne.n	800c42e <dec_lock+0x5a>
 800c422:	4a09      	ldr	r2, [pc, #36]	; (800c448 <dec_lock+0x74>)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	011b      	lsls	r3, r3, #4
 800c428:	4413      	add	r3, r2
 800c42a:	2200      	movs	r2, #0
 800c42c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c42e:	2300      	movs	r3, #0
 800c430:	737b      	strb	r3, [r7, #13]
 800c432:	e001      	b.n	800c438 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c434:	2302      	movs	r3, #2
 800c436:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c438:	7b7b      	ldrb	r3, [r7, #13]
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3714      	adds	r7, #20
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr
 800c446:	bf00      	nop
 800c448:	20002110 	.word	0x20002110

0800c44c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b085      	sub	sp, #20
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c454:	2300      	movs	r3, #0
 800c456:	60fb      	str	r3, [r7, #12]
 800c458:	e010      	b.n	800c47c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c45a:	4a0d      	ldr	r2, [pc, #52]	; (800c490 <clear_lock+0x44>)
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	011b      	lsls	r3, r3, #4
 800c460:	4413      	add	r3, r2
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	429a      	cmp	r2, r3
 800c468:	d105      	bne.n	800c476 <clear_lock+0x2a>
 800c46a:	4a09      	ldr	r2, [pc, #36]	; (800c490 <clear_lock+0x44>)
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	011b      	lsls	r3, r3, #4
 800c470:	4413      	add	r3, r2
 800c472:	2200      	movs	r2, #0
 800c474:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	3301      	adds	r3, #1
 800c47a:	60fb      	str	r3, [r7, #12]
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d9eb      	bls.n	800c45a <clear_lock+0xe>
	}
}
 800c482:	bf00      	nop
 800c484:	bf00      	nop
 800c486:	3714      	adds	r7, #20
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr
 800c490:	20002110 	.word	0x20002110

0800c494 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b086      	sub	sp, #24
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c49c:	2300      	movs	r3, #0
 800c49e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	78db      	ldrb	r3, [r3, #3]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d034      	beq.n	800c512 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	7858      	ldrb	r0, [r3, #1]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	697a      	ldr	r2, [r7, #20]
 800c4bc:	f7ff fd40 	bl	800bf40 <disk_write>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d002      	beq.n	800c4cc <sync_window+0x38>
			res = FR_DISK_ERR;
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	73fb      	strb	r3, [r7, #15]
 800c4ca:	e022      	b.n	800c512 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4d6:	697a      	ldr	r2, [r7, #20]
 800c4d8:	1ad2      	subs	r2, r2, r3
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	69db      	ldr	r3, [r3, #28]
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d217      	bcs.n	800c512 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	789b      	ldrb	r3, [r3, #2]
 800c4e6:	613b      	str	r3, [r7, #16]
 800c4e8:	e010      	b.n	800c50c <sync_window+0x78>
					wsect += fs->fsize;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	69db      	ldr	r3, [r3, #28]
 800c4ee:	697a      	ldr	r2, [r7, #20]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	7858      	ldrb	r0, [r3, #1]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c4fe:	2301      	movs	r3, #1
 800c500:	697a      	ldr	r2, [r7, #20]
 800c502:	f7ff fd1d 	bl	800bf40 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	3b01      	subs	r3, #1
 800c50a:	613b      	str	r3, [r7, #16]
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	2b01      	cmp	r3, #1
 800c510:	d8eb      	bhi.n	800c4ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c512:	7bfb      	ldrb	r3, [r7, #15]
}
 800c514:	4618      	mov	r0, r3
 800c516:	3718      	adds	r7, #24
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c526:	2300      	movs	r3, #0
 800c528:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c52e:	683a      	ldr	r2, [r7, #0]
 800c530:	429a      	cmp	r2, r3
 800c532:	d01b      	beq.n	800c56c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f7ff ffad 	bl	800c494 <sync_window>
 800c53a:	4603      	mov	r3, r0
 800c53c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c53e:	7bfb      	ldrb	r3, [r7, #15]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d113      	bne.n	800c56c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	7858      	ldrb	r0, [r3, #1]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c54e:	2301      	movs	r3, #1
 800c550:	683a      	ldr	r2, [r7, #0]
 800c552:	f7ff fcd5 	bl	800bf00 <disk_read>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d004      	beq.n	800c566 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c55c:	f04f 33ff 	mov.w	r3, #4294967295
 800c560:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c562:	2301      	movs	r3, #1
 800c564:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	683a      	ldr	r2, [r7, #0]
 800c56a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c56c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3710      	adds	r7, #16
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
	...

0800c578 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f7ff ff87 	bl	800c494 <sync_window>
 800c586:	4603      	mov	r3, r0
 800c588:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c58a:	7bfb      	ldrb	r3, [r7, #15]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d159      	bne.n	800c644 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	2b03      	cmp	r3, #3
 800c596:	d149      	bne.n	800c62c <sync_fs+0xb4>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	791b      	ldrb	r3, [r3, #4]
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d145      	bne.n	800c62c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	899b      	ldrh	r3, [r3, #12]
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	2100      	movs	r1, #0
 800c5ae:	f7ff fda8 	bl	800c102 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	3334      	adds	r3, #52	; 0x34
 800c5b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c5ba:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7ff fd37 	bl	800c032 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	3334      	adds	r3, #52	; 0x34
 800c5c8:	4921      	ldr	r1, [pc, #132]	; (800c650 <sync_fs+0xd8>)
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7ff fd4c 	bl	800c068 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	3334      	adds	r3, #52	; 0x34
 800c5d4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c5d8:	491e      	ldr	r1, [pc, #120]	; (800c654 <sync_fs+0xdc>)
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7ff fd44 	bl	800c068 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	3334      	adds	r3, #52	; 0x34
 800c5e4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	695b      	ldr	r3, [r3, #20]
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	4610      	mov	r0, r2
 800c5f0:	f7ff fd3a 	bl	800c068 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	3334      	adds	r3, #52	; 0x34
 800c5f8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	691b      	ldr	r3, [r3, #16]
 800c600:	4619      	mov	r1, r3
 800c602:	4610      	mov	r0, r2
 800c604:	f7ff fd30 	bl	800c068 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6a1b      	ldr	r3, [r3, #32]
 800c60c:	1c5a      	adds	r2, r3, #1
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	7858      	ldrb	r0, [r3, #1]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c620:	2301      	movs	r3, #1
 800c622:	f7ff fc8d 	bl	800bf40 <disk_write>
			fs->fsi_flag = 0;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2200      	movs	r2, #0
 800c62a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	785b      	ldrb	r3, [r3, #1]
 800c630:	2200      	movs	r2, #0
 800c632:	2100      	movs	r1, #0
 800c634:	4618      	mov	r0, r3
 800c636:	f7ff fca3 	bl	800bf80 <disk_ioctl>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d001      	beq.n	800c644 <sync_fs+0xcc>
 800c640:	2301      	movs	r3, #1
 800c642:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c644:	7bfb      	ldrb	r3, [r7, #15]
}
 800c646:	4618      	mov	r0, r3
 800c648:	3710      	adds	r7, #16
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	41615252 	.word	0x41615252
 800c654:	61417272 	.word	0x61417272

0800c658 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c658:	b480      	push	{r7}
 800c65a:	b083      	sub	sp, #12
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	3b02      	subs	r3, #2
 800c666:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	699b      	ldr	r3, [r3, #24]
 800c66c:	3b02      	subs	r3, #2
 800c66e:	683a      	ldr	r2, [r7, #0]
 800c670:	429a      	cmp	r2, r3
 800c672:	d301      	bcc.n	800c678 <clust2sect+0x20>
 800c674:	2300      	movs	r3, #0
 800c676:	e008      	b.n	800c68a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	895b      	ldrh	r3, [r3, #10]
 800c67c:	461a      	mov	r2, r3
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	fb03 f202 	mul.w	r2, r3, r2
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c688:	4413      	add	r3, r2
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	370c      	adds	r7, #12
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr

0800c696 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b086      	sub	sp, #24
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
 800c69e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	d904      	bls.n	800c6b6 <get_fat+0x20>
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	699b      	ldr	r3, [r3, #24]
 800c6b0:	683a      	ldr	r2, [r7, #0]
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d302      	bcc.n	800c6bc <get_fat+0x26>
		val = 1;	/* Internal error */
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	617b      	str	r3, [r7, #20]
 800c6ba:	e0bb      	b.n	800c834 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c6bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c6c0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	2b03      	cmp	r3, #3
 800c6c8:	f000 8083 	beq.w	800c7d2 <get_fat+0x13c>
 800c6cc:	2b03      	cmp	r3, #3
 800c6ce:	f300 80a7 	bgt.w	800c820 <get_fat+0x18a>
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d002      	beq.n	800c6dc <get_fat+0x46>
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	d056      	beq.n	800c788 <get_fat+0xf2>
 800c6da:	e0a1      	b.n	800c820 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	60fb      	str	r3, [r7, #12]
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	085b      	lsrs	r3, r3, #1
 800c6e4:	68fa      	ldr	r2, [r7, #12]
 800c6e6:	4413      	add	r3, r2
 800c6e8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	899b      	ldrh	r3, [r3, #12]
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800c6fa:	4413      	add	r3, r2
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	6938      	ldr	r0, [r7, #16]
 800c700:	f7ff ff0c 	bl	800c51c <move_window>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	f040 808d 	bne.w	800c826 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	1c5a      	adds	r2, r3, #1
 800c710:	60fa      	str	r2, [r7, #12]
 800c712:	693a      	ldr	r2, [r7, #16]
 800c714:	8992      	ldrh	r2, [r2, #12]
 800c716:	fbb3 f1f2 	udiv	r1, r3, r2
 800c71a:	fb02 f201 	mul.w	r2, r2, r1
 800c71e:	1a9b      	subs	r3, r3, r2
 800c720:	693a      	ldr	r2, [r7, #16]
 800c722:	4413      	add	r3, r2
 800c724:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c728:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	899b      	ldrh	r3, [r3, #12]
 800c732:	4619      	mov	r1, r3
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	fbb3 f3f1 	udiv	r3, r3, r1
 800c73a:	4413      	add	r3, r2
 800c73c:	4619      	mov	r1, r3
 800c73e:	6938      	ldr	r0, [r7, #16]
 800c740:	f7ff feec 	bl	800c51c <move_window>
 800c744:	4603      	mov	r3, r0
 800c746:	2b00      	cmp	r3, #0
 800c748:	d16f      	bne.n	800c82a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	899b      	ldrh	r3, [r3, #12]
 800c74e:	461a      	mov	r2, r3
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	fbb3 f1f2 	udiv	r1, r3, r2
 800c756:	fb02 f201 	mul.w	r2, r2, r1
 800c75a:	1a9b      	subs	r3, r3, r2
 800c75c:	693a      	ldr	r2, [r7, #16]
 800c75e:	4413      	add	r3, r2
 800c760:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c764:	021b      	lsls	r3, r3, #8
 800c766:	461a      	mov	r2, r3
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	4313      	orrs	r3, r2
 800c76c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	f003 0301 	and.w	r3, r3, #1
 800c774:	2b00      	cmp	r3, #0
 800c776:	d002      	beq.n	800c77e <get_fat+0xe8>
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	091b      	lsrs	r3, r3, #4
 800c77c:	e002      	b.n	800c784 <get_fat+0xee>
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c784:	617b      	str	r3, [r7, #20]
			break;
 800c786:	e055      	b.n	800c834 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	899b      	ldrh	r3, [r3, #12]
 800c790:	085b      	lsrs	r3, r3, #1
 800c792:	b29b      	uxth	r3, r3
 800c794:	4619      	mov	r1, r3
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	fbb3 f3f1 	udiv	r3, r3, r1
 800c79c:	4413      	add	r3, r2
 800c79e:	4619      	mov	r1, r3
 800c7a0:	6938      	ldr	r0, [r7, #16]
 800c7a2:	f7ff febb 	bl	800c51c <move_window>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d140      	bne.n	800c82e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	005b      	lsls	r3, r3, #1
 800c7b6:	693a      	ldr	r2, [r7, #16]
 800c7b8:	8992      	ldrh	r2, [r2, #12]
 800c7ba:	fbb3 f0f2 	udiv	r0, r3, r2
 800c7be:	fb02 f200 	mul.w	r2, r2, r0
 800c7c2:	1a9b      	subs	r3, r3, r2
 800c7c4:	440b      	add	r3, r1
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f7ff fbf8 	bl	800bfbc <ld_word>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	617b      	str	r3, [r7, #20]
			break;
 800c7d0:	e030      	b.n	800c834 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	899b      	ldrh	r3, [r3, #12]
 800c7da:	089b      	lsrs	r3, r3, #2
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	4619      	mov	r1, r3
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800c7e6:	4413      	add	r3, r2
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	6938      	ldr	r0, [r7, #16]
 800c7ec:	f7ff fe96 	bl	800c51c <move_window>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d11d      	bne.n	800c832 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	693a      	ldr	r2, [r7, #16]
 800c802:	8992      	ldrh	r2, [r2, #12]
 800c804:	fbb3 f0f2 	udiv	r0, r3, r2
 800c808:	fb02 f200 	mul.w	r2, r2, r0
 800c80c:	1a9b      	subs	r3, r3, r2
 800c80e:	440b      	add	r3, r1
 800c810:	4618      	mov	r0, r3
 800c812:	f7ff fbeb 	bl	800bfec <ld_dword>
 800c816:	4603      	mov	r3, r0
 800c818:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c81c:	617b      	str	r3, [r7, #20]
			break;
 800c81e:	e009      	b.n	800c834 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c820:	2301      	movs	r3, #1
 800c822:	617b      	str	r3, [r7, #20]
 800c824:	e006      	b.n	800c834 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c826:	bf00      	nop
 800c828:	e004      	b.n	800c834 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c82a:	bf00      	nop
 800c82c:	e002      	b.n	800c834 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c82e:	bf00      	nop
 800c830:	e000      	b.n	800c834 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c832:	bf00      	nop
		}
	}

	return val;
 800c834:	697b      	ldr	r3, [r7, #20]
}
 800c836:	4618      	mov	r0, r3
 800c838:	3718      	adds	r7, #24
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}

0800c83e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c83e:	b590      	push	{r4, r7, lr}
 800c840:	b089      	sub	sp, #36	; 0x24
 800c842:	af00      	add	r7, sp, #0
 800c844:	60f8      	str	r0, [r7, #12]
 800c846:	60b9      	str	r1, [r7, #8]
 800c848:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c84a:	2302      	movs	r3, #2
 800c84c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	2b01      	cmp	r3, #1
 800c852:	f240 8102 	bls.w	800ca5a <put_fat+0x21c>
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	699b      	ldr	r3, [r3, #24]
 800c85a:	68ba      	ldr	r2, [r7, #8]
 800c85c:	429a      	cmp	r2, r3
 800c85e:	f080 80fc 	bcs.w	800ca5a <put_fat+0x21c>
		switch (fs->fs_type) {
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	2b03      	cmp	r3, #3
 800c868:	f000 80b6 	beq.w	800c9d8 <put_fat+0x19a>
 800c86c:	2b03      	cmp	r3, #3
 800c86e:	f300 80fd 	bgt.w	800ca6c <put_fat+0x22e>
 800c872:	2b01      	cmp	r3, #1
 800c874:	d003      	beq.n	800c87e <put_fat+0x40>
 800c876:	2b02      	cmp	r3, #2
 800c878:	f000 8083 	beq.w	800c982 <put_fat+0x144>
 800c87c:	e0f6      	b.n	800ca6c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	61bb      	str	r3, [r7, #24]
 800c882:	69bb      	ldr	r3, [r7, #24]
 800c884:	085b      	lsrs	r3, r3, #1
 800c886:	69ba      	ldr	r2, [r7, #24]
 800c888:	4413      	add	r3, r2
 800c88a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	899b      	ldrh	r3, [r3, #12]
 800c894:	4619      	mov	r1, r3
 800c896:	69bb      	ldr	r3, [r7, #24]
 800c898:	fbb3 f3f1 	udiv	r3, r3, r1
 800c89c:	4413      	add	r3, r2
 800c89e:	4619      	mov	r1, r3
 800c8a0:	68f8      	ldr	r0, [r7, #12]
 800c8a2:	f7ff fe3b 	bl	800c51c <move_window>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c8aa:	7ffb      	ldrb	r3, [r7, #31]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	f040 80d6 	bne.w	800ca5e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c8b8:	69bb      	ldr	r3, [r7, #24]
 800c8ba:	1c5a      	adds	r2, r3, #1
 800c8bc:	61ba      	str	r2, [r7, #24]
 800c8be:	68fa      	ldr	r2, [r7, #12]
 800c8c0:	8992      	ldrh	r2, [r2, #12]
 800c8c2:	fbb3 f0f2 	udiv	r0, r3, r2
 800c8c6:	fb02 f200 	mul.w	r2, r2, r0
 800c8ca:	1a9b      	subs	r3, r3, r2
 800c8cc:	440b      	add	r3, r1
 800c8ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	f003 0301 	and.w	r3, r3, #1
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d00d      	beq.n	800c8f6 <put_fat+0xb8>
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	b25b      	sxtb	r3, r3
 800c8e0:	f003 030f 	and.w	r3, r3, #15
 800c8e4:	b25a      	sxtb	r2, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	011b      	lsls	r3, r3, #4
 800c8ec:	b25b      	sxtb	r3, r3
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	b25b      	sxtb	r3, r3
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	e001      	b.n	800c8fa <put_fat+0xbc>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	697a      	ldr	r2, [r7, #20]
 800c8fc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2201      	movs	r2, #1
 800c902:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	899b      	ldrh	r3, [r3, #12]
 800c90c:	4619      	mov	r1, r3
 800c90e:	69bb      	ldr	r3, [r7, #24]
 800c910:	fbb3 f3f1 	udiv	r3, r3, r1
 800c914:	4413      	add	r3, r2
 800c916:	4619      	mov	r1, r3
 800c918:	68f8      	ldr	r0, [r7, #12]
 800c91a:	f7ff fdff 	bl	800c51c <move_window>
 800c91e:	4603      	mov	r3, r0
 800c920:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c922:	7ffb      	ldrb	r3, [r7, #31]
 800c924:	2b00      	cmp	r3, #0
 800c926:	f040 809c 	bne.w	800ca62 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	899b      	ldrh	r3, [r3, #12]
 800c934:	461a      	mov	r2, r3
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	fbb3 f0f2 	udiv	r0, r3, r2
 800c93c:	fb02 f200 	mul.w	r2, r2, r0
 800c940:	1a9b      	subs	r3, r3, r2
 800c942:	440b      	add	r3, r1
 800c944:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	f003 0301 	and.w	r3, r3, #1
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d003      	beq.n	800c958 <put_fat+0x11a>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	091b      	lsrs	r3, r3, #4
 800c954:	b2db      	uxtb	r3, r3
 800c956:	e00e      	b.n	800c976 <put_fat+0x138>
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	b25b      	sxtb	r3, r3
 800c95e:	f023 030f 	bic.w	r3, r3, #15
 800c962:	b25a      	sxtb	r2, r3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	0a1b      	lsrs	r3, r3, #8
 800c968:	b25b      	sxtb	r3, r3
 800c96a:	f003 030f 	and.w	r3, r3, #15
 800c96e:	b25b      	sxtb	r3, r3
 800c970:	4313      	orrs	r3, r2
 800c972:	b25b      	sxtb	r3, r3
 800c974:	b2db      	uxtb	r3, r3
 800c976:	697a      	ldr	r2, [r7, #20]
 800c978:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2201      	movs	r2, #1
 800c97e:	70da      	strb	r2, [r3, #3]
			break;
 800c980:	e074      	b.n	800ca6c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	899b      	ldrh	r3, [r3, #12]
 800c98a:	085b      	lsrs	r3, r3, #1
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	4619      	mov	r1, r3
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	fbb3 f3f1 	udiv	r3, r3, r1
 800c996:	4413      	add	r3, r2
 800c998:	4619      	mov	r1, r3
 800c99a:	68f8      	ldr	r0, [r7, #12]
 800c99c:	f7ff fdbe 	bl	800c51c <move_window>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c9a4:	7ffb      	ldrb	r3, [r7, #31]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d15d      	bne.n	800ca66 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	005b      	lsls	r3, r3, #1
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	8992      	ldrh	r2, [r2, #12]
 800c9b8:	fbb3 f0f2 	udiv	r0, r3, r2
 800c9bc:	fb02 f200 	mul.w	r2, r2, r0
 800c9c0:	1a9b      	subs	r3, r3, r2
 800c9c2:	440b      	add	r3, r1
 800c9c4:	687a      	ldr	r2, [r7, #4]
 800c9c6:	b292      	uxth	r2, r2
 800c9c8:	4611      	mov	r1, r2
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7ff fb31 	bl	800c032 <st_word>
			fs->wflag = 1;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	70da      	strb	r2, [r3, #3]
			break;
 800c9d6:	e049      	b.n	800ca6c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	899b      	ldrh	r3, [r3, #12]
 800c9e0:	089b      	lsrs	r3, r3, #2
 800c9e2:	b29b      	uxth	r3, r3
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	fbb3 f3f1 	udiv	r3, r3, r1
 800c9ec:	4413      	add	r3, r2
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	68f8      	ldr	r0, [r7, #12]
 800c9f2:	f7ff fd93 	bl	800c51c <move_window>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c9fa:	7ffb      	ldrb	r3, [r7, #31]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d134      	bne.n	800ca6a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	68fa      	ldr	r2, [r7, #12]
 800ca12:	8992      	ldrh	r2, [r2, #12]
 800ca14:	fbb3 f0f2 	udiv	r0, r3, r2
 800ca18:	fb02 f200 	mul.w	r2, r2, r0
 800ca1c:	1a9b      	subs	r3, r3, r2
 800ca1e:	440b      	add	r3, r1
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7ff fae3 	bl	800bfec <ld_dword>
 800ca26:	4603      	mov	r3, r0
 800ca28:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ca2c:	4323      	orrs	r3, r4
 800ca2e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	009b      	lsls	r3, r3, #2
 800ca3a:	68fa      	ldr	r2, [r7, #12]
 800ca3c:	8992      	ldrh	r2, [r2, #12]
 800ca3e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ca42:	fb02 f200 	mul.w	r2, r2, r0
 800ca46:	1a9b      	subs	r3, r3, r2
 800ca48:	440b      	add	r3, r1
 800ca4a:	6879      	ldr	r1, [r7, #4]
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f7ff fb0b 	bl	800c068 <st_dword>
			fs->wflag = 1;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2201      	movs	r2, #1
 800ca56:	70da      	strb	r2, [r3, #3]
			break;
 800ca58:	e008      	b.n	800ca6c <put_fat+0x22e>
		}
	}
 800ca5a:	bf00      	nop
 800ca5c:	e006      	b.n	800ca6c <put_fat+0x22e>
			if (res != FR_OK) break;
 800ca5e:	bf00      	nop
 800ca60:	e004      	b.n	800ca6c <put_fat+0x22e>
			if (res != FR_OK) break;
 800ca62:	bf00      	nop
 800ca64:	e002      	b.n	800ca6c <put_fat+0x22e>
			if (res != FR_OK) break;
 800ca66:	bf00      	nop
 800ca68:	e000      	b.n	800ca6c <put_fat+0x22e>
			if (res != FR_OK) break;
 800ca6a:	bf00      	nop
	return res;
 800ca6c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3724      	adds	r7, #36	; 0x24
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd90      	pop	{r4, r7, pc}

0800ca76 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ca76:	b580      	push	{r7, lr}
 800ca78:	b088      	sub	sp, #32
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	60f8      	str	r0, [r7, #12]
 800ca7e:	60b9      	str	r1, [r7, #8]
 800ca80:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ca82:	2300      	movs	r3, #0
 800ca84:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	2b01      	cmp	r3, #1
 800ca90:	d904      	bls.n	800ca9c <remove_chain+0x26>
 800ca92:	69bb      	ldr	r3, [r7, #24]
 800ca94:	699b      	ldr	r3, [r3, #24]
 800ca96:	68ba      	ldr	r2, [r7, #8]
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d301      	bcc.n	800caa0 <remove_chain+0x2a>
 800ca9c:	2302      	movs	r3, #2
 800ca9e:	e04b      	b.n	800cb38 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d00c      	beq.n	800cac0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800caa6:	f04f 32ff 	mov.w	r2, #4294967295
 800caaa:	6879      	ldr	r1, [r7, #4]
 800caac:	69b8      	ldr	r0, [r7, #24]
 800caae:	f7ff fec6 	bl	800c83e <put_fat>
 800cab2:	4603      	mov	r3, r0
 800cab4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cab6:	7ffb      	ldrb	r3, [r7, #31]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d001      	beq.n	800cac0 <remove_chain+0x4a>
 800cabc:	7ffb      	ldrb	r3, [r7, #31]
 800cabe:	e03b      	b.n	800cb38 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cac0:	68b9      	ldr	r1, [r7, #8]
 800cac2:	68f8      	ldr	r0, [r7, #12]
 800cac4:	f7ff fde7 	bl	800c696 <get_fat>
 800cac8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d031      	beq.n	800cb34 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d101      	bne.n	800cada <remove_chain+0x64>
 800cad6:	2302      	movs	r3, #2
 800cad8:	e02e      	b.n	800cb38 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cae0:	d101      	bne.n	800cae6 <remove_chain+0x70>
 800cae2:	2301      	movs	r3, #1
 800cae4:	e028      	b.n	800cb38 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cae6:	2200      	movs	r2, #0
 800cae8:	68b9      	ldr	r1, [r7, #8]
 800caea:	69b8      	ldr	r0, [r7, #24]
 800caec:	f7ff fea7 	bl	800c83e <put_fat>
 800caf0:	4603      	mov	r3, r0
 800caf2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800caf4:	7ffb      	ldrb	r3, [r7, #31]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d001      	beq.n	800cafe <remove_chain+0x88>
 800cafa:	7ffb      	ldrb	r3, [r7, #31]
 800cafc:	e01c      	b.n	800cb38 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	695a      	ldr	r2, [r3, #20]
 800cb02:	69bb      	ldr	r3, [r7, #24]
 800cb04:	699b      	ldr	r3, [r3, #24]
 800cb06:	3b02      	subs	r3, #2
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d20b      	bcs.n	800cb24 <remove_chain+0xae>
			fs->free_clst++;
 800cb0c:	69bb      	ldr	r3, [r7, #24]
 800cb0e:	695b      	ldr	r3, [r3, #20]
 800cb10:	1c5a      	adds	r2, r3, #1
 800cb12:	69bb      	ldr	r3, [r7, #24]
 800cb14:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800cb16:	69bb      	ldr	r3, [r7, #24]
 800cb18:	791b      	ldrb	r3, [r3, #4]
 800cb1a:	f043 0301 	orr.w	r3, r3, #1
 800cb1e:	b2da      	uxtb	r2, r3
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cb28:	69bb      	ldr	r3, [r7, #24]
 800cb2a:	699b      	ldr	r3, [r3, #24]
 800cb2c:	68ba      	ldr	r2, [r7, #8]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d3c6      	bcc.n	800cac0 <remove_chain+0x4a>
 800cb32:	e000      	b.n	800cb36 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cb34:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cb36:	2300      	movs	r3, #0
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3720      	adds	r7, #32
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}

0800cb40 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b088      	sub	sp, #32
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d10d      	bne.n	800cb72 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	691b      	ldr	r3, [r3, #16]
 800cb5a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cb5c:	69bb      	ldr	r3, [r7, #24]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d004      	beq.n	800cb6c <create_chain+0x2c>
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	699b      	ldr	r3, [r3, #24]
 800cb66:	69ba      	ldr	r2, [r7, #24]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d31b      	bcc.n	800cba4 <create_chain+0x64>
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	61bb      	str	r3, [r7, #24]
 800cb70:	e018      	b.n	800cba4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cb72:	6839      	ldr	r1, [r7, #0]
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f7ff fd8e 	bl	800c696 <get_fat>
 800cb7a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d801      	bhi.n	800cb86 <create_chain+0x46>
 800cb82:	2301      	movs	r3, #1
 800cb84:	e070      	b.n	800cc68 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb8c:	d101      	bne.n	800cb92 <create_chain+0x52>
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	e06a      	b.n	800cc68 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	699b      	ldr	r3, [r3, #24]
 800cb96:	68fa      	ldr	r2, [r7, #12]
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d201      	bcs.n	800cba0 <create_chain+0x60>
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	e063      	b.n	800cc68 <create_chain+0x128>
		scl = clst;
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cba4:	69bb      	ldr	r3, [r7, #24]
 800cba6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	699b      	ldr	r3, [r3, #24]
 800cbb2:	69fa      	ldr	r2, [r7, #28]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d307      	bcc.n	800cbc8 <create_chain+0x88>
				ncl = 2;
 800cbb8:	2302      	movs	r3, #2
 800cbba:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cbbc:	69fa      	ldr	r2, [r7, #28]
 800cbbe:	69bb      	ldr	r3, [r7, #24]
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d901      	bls.n	800cbc8 <create_chain+0x88>
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	e04f      	b.n	800cc68 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cbc8:	69f9      	ldr	r1, [r7, #28]
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f7ff fd63 	bl	800c696 <get_fat>
 800cbd0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d00e      	beq.n	800cbf6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d003      	beq.n	800cbe6 <create_chain+0xa6>
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbe4:	d101      	bne.n	800cbea <create_chain+0xaa>
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	e03e      	b.n	800cc68 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cbea:	69fa      	ldr	r2, [r7, #28]
 800cbec:	69bb      	ldr	r3, [r7, #24]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d1da      	bne.n	800cba8 <create_chain+0x68>
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	e038      	b.n	800cc68 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cbf6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cbf8:	f04f 32ff 	mov.w	r2, #4294967295
 800cbfc:	69f9      	ldr	r1, [r7, #28]
 800cbfe:	6938      	ldr	r0, [r7, #16]
 800cc00:	f7ff fe1d 	bl	800c83e <put_fat>
 800cc04:	4603      	mov	r3, r0
 800cc06:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cc08:	7dfb      	ldrb	r3, [r7, #23]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d109      	bne.n	800cc22 <create_chain+0xe2>
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d006      	beq.n	800cc22 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cc14:	69fa      	ldr	r2, [r7, #28]
 800cc16:	6839      	ldr	r1, [r7, #0]
 800cc18:	6938      	ldr	r0, [r7, #16]
 800cc1a:	f7ff fe10 	bl	800c83e <put_fat>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cc22:	7dfb      	ldrb	r3, [r7, #23]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d116      	bne.n	800cc56 <create_chain+0x116>
		fs->last_clst = ncl;
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	69fa      	ldr	r2, [r7, #28]
 800cc2c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	695a      	ldr	r2, [r3, #20]
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	699b      	ldr	r3, [r3, #24]
 800cc36:	3b02      	subs	r3, #2
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d804      	bhi.n	800cc46 <create_chain+0x106>
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	695b      	ldr	r3, [r3, #20]
 800cc40:	1e5a      	subs	r2, r3, #1
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	791b      	ldrb	r3, [r3, #4]
 800cc4a:	f043 0301 	orr.w	r3, r3, #1
 800cc4e:	b2da      	uxtb	r2, r3
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	711a      	strb	r2, [r3, #4]
 800cc54:	e007      	b.n	800cc66 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cc56:	7dfb      	ldrb	r3, [r7, #23]
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d102      	bne.n	800cc62 <create_chain+0x122>
 800cc5c:	f04f 33ff 	mov.w	r3, #4294967295
 800cc60:	e000      	b.n	800cc64 <create_chain+0x124>
 800cc62:	2301      	movs	r3, #1
 800cc64:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cc66:	69fb      	ldr	r3, [r7, #28]
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3720      	adds	r7, #32
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b087      	sub	sp, #28
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc84:	3304      	adds	r3, #4
 800cc86:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	899b      	ldrh	r3, [r3, #12]
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc94:	68fa      	ldr	r2, [r7, #12]
 800cc96:	8952      	ldrh	r2, [r2, #10]
 800cc98:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc9c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	1d1a      	adds	r2, r3, #4
 800cca2:	613a      	str	r2, [r7, #16]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d101      	bne.n	800ccb2 <clmt_clust+0x42>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	e010      	b.n	800ccd4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800ccb2:	697a      	ldr	r2, [r7, #20]
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d307      	bcc.n	800ccca <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800ccba:	697a      	ldr	r2, [r7, #20]
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	1ad3      	subs	r3, r2, r3
 800ccc0:	617b      	str	r3, [r7, #20]
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	3304      	adds	r3, #4
 800ccc6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ccc8:	e7e9      	b.n	800cc9e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800ccca:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	4413      	add	r3, r2
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	371c      	adds	r7, #28
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b086      	sub	sp, #24
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ccf6:	d204      	bcs.n	800cd02 <dir_sdi+0x22>
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	f003 031f 	and.w	r3, r3, #31
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d001      	beq.n	800cd06 <dir_sdi+0x26>
		return FR_INT_ERR;
 800cd02:	2302      	movs	r3, #2
 800cd04:	e071      	b.n	800cdea <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	683a      	ldr	r2, [r7, #0]
 800cd0a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	689b      	ldr	r3, [r3, #8]
 800cd10:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d106      	bne.n	800cd26 <dir_sdi+0x46>
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	2b02      	cmp	r3, #2
 800cd1e:	d902      	bls.n	800cd26 <dir_sdi+0x46>
		clst = fs->dirbase;
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd24:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d10c      	bne.n	800cd46 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	095b      	lsrs	r3, r3, #5
 800cd30:	693a      	ldr	r2, [r7, #16]
 800cd32:	8912      	ldrh	r2, [r2, #8]
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d301      	bcc.n	800cd3c <dir_sdi+0x5c>
 800cd38:	2302      	movs	r3, #2
 800cd3a:	e056      	b.n	800cdea <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	61da      	str	r2, [r3, #28]
 800cd44:	e02d      	b.n	800cda2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	895b      	ldrh	r3, [r3, #10]
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	899b      	ldrh	r3, [r3, #12]
 800cd50:	fb03 f302 	mul.w	r3, r3, r2
 800cd54:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cd56:	e019      	b.n	800cd8c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6979      	ldr	r1, [r7, #20]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7ff fc9a 	bl	800c696 <get_fat>
 800cd62:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd6a:	d101      	bne.n	800cd70 <dir_sdi+0x90>
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	e03c      	b.n	800cdea <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	2b01      	cmp	r3, #1
 800cd74:	d904      	bls.n	800cd80 <dir_sdi+0xa0>
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	699b      	ldr	r3, [r3, #24]
 800cd7a:	697a      	ldr	r2, [r7, #20]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d301      	bcc.n	800cd84 <dir_sdi+0xa4>
 800cd80:	2302      	movs	r3, #2
 800cd82:	e032      	b.n	800cdea <dir_sdi+0x10a>
			ofs -= csz;
 800cd84:	683a      	ldr	r2, [r7, #0]
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	1ad3      	subs	r3, r2, r3
 800cd8a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cd8c:	683a      	ldr	r2, [r7, #0]
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d2e1      	bcs.n	800cd58 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800cd94:	6979      	ldr	r1, [r7, #20]
 800cd96:	6938      	ldr	r0, [r7, #16]
 800cd98:	f7ff fc5e 	bl	800c658 <clust2sect>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	697a      	ldr	r2, [r7, #20]
 800cda6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	69db      	ldr	r3, [r3, #28]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d101      	bne.n	800cdb4 <dir_sdi+0xd4>
 800cdb0:	2302      	movs	r3, #2
 800cdb2:	e01a      	b.n	800cdea <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	69da      	ldr	r2, [r3, #28]
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	899b      	ldrh	r3, [r3, #12]
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	fbb3 f3f1 	udiv	r3, r3, r1
 800cdc4:	441a      	add	r2, r3
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	899b      	ldrh	r3, [r3, #12]
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	fbb3 f0f2 	udiv	r0, r3, r2
 800cddc:	fb02 f200 	mul.w	r2, r2, r0
 800cde0:	1a9b      	subs	r3, r3, r2
 800cde2:	18ca      	adds	r2, r1, r3
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cde8:	2300      	movs	r3, #0
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3718      	adds	r7, #24
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b086      	sub	sp, #24
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
 800cdfa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	695b      	ldr	r3, [r3, #20]
 800ce06:	3320      	adds	r3, #32
 800ce08:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	69db      	ldr	r3, [r3, #28]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d003      	beq.n	800ce1a <dir_next+0x28>
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ce18:	d301      	bcc.n	800ce1e <dir_next+0x2c>
 800ce1a:	2304      	movs	r3, #4
 800ce1c:	e0bb      	b.n	800cf96 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	899b      	ldrh	r3, [r3, #12]
 800ce22:	461a      	mov	r2, r3
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce2a:	fb02 f201 	mul.w	r2, r2, r1
 800ce2e:	1a9b      	subs	r3, r3, r2
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	f040 809d 	bne.w	800cf70 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	69db      	ldr	r3, [r3, #28]
 800ce3a:	1c5a      	adds	r2, r3, #1
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	699b      	ldr	r3, [r3, #24]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d10b      	bne.n	800ce60 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	095b      	lsrs	r3, r3, #5
 800ce4c:	68fa      	ldr	r2, [r7, #12]
 800ce4e:	8912      	ldrh	r2, [r2, #8]
 800ce50:	4293      	cmp	r3, r2
 800ce52:	f0c0 808d 	bcc.w	800cf70 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	61da      	str	r2, [r3, #28]
 800ce5c:	2304      	movs	r3, #4
 800ce5e:	e09a      	b.n	800cf96 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	899b      	ldrh	r3, [r3, #12]
 800ce64:	461a      	mov	r2, r3
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce6c:	68fa      	ldr	r2, [r7, #12]
 800ce6e:	8952      	ldrh	r2, [r2, #10]
 800ce70:	3a01      	subs	r2, #1
 800ce72:	4013      	ands	r3, r2
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d17b      	bne.n	800cf70 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ce78:	687a      	ldr	r2, [r7, #4]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	699b      	ldr	r3, [r3, #24]
 800ce7e:	4619      	mov	r1, r3
 800ce80:	4610      	mov	r0, r2
 800ce82:	f7ff fc08 	bl	800c696 <get_fat>
 800ce86:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d801      	bhi.n	800ce92 <dir_next+0xa0>
 800ce8e:	2302      	movs	r3, #2
 800ce90:	e081      	b.n	800cf96 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce98:	d101      	bne.n	800ce9e <dir_next+0xac>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	e07b      	b.n	800cf96 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	699b      	ldr	r3, [r3, #24]
 800cea2:	697a      	ldr	r2, [r7, #20]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d359      	bcc.n	800cf5c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d104      	bne.n	800ceb8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	61da      	str	r2, [r3, #28]
 800ceb4:	2304      	movs	r3, #4
 800ceb6:	e06e      	b.n	800cf96 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ceb8:	687a      	ldr	r2, [r7, #4]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	699b      	ldr	r3, [r3, #24]
 800cebe:	4619      	mov	r1, r3
 800cec0:	4610      	mov	r0, r2
 800cec2:	f7ff fe3d 	bl	800cb40 <create_chain>
 800cec6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d101      	bne.n	800ced2 <dir_next+0xe0>
 800cece:	2307      	movs	r3, #7
 800ced0:	e061      	b.n	800cf96 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d101      	bne.n	800cedc <dir_next+0xea>
 800ced8:	2302      	movs	r3, #2
 800ceda:	e05c      	b.n	800cf96 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cee2:	d101      	bne.n	800cee8 <dir_next+0xf6>
 800cee4:	2301      	movs	r3, #1
 800cee6:	e056      	b.n	800cf96 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cee8:	68f8      	ldr	r0, [r7, #12]
 800ceea:	f7ff fad3 	bl	800c494 <sync_window>
 800ceee:	4603      	mov	r3, r0
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d001      	beq.n	800cef8 <dir_next+0x106>
 800cef4:	2301      	movs	r3, #1
 800cef6:	e04e      	b.n	800cf96 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	899b      	ldrh	r3, [r3, #12]
 800cf02:	461a      	mov	r2, r3
 800cf04:	2100      	movs	r1, #0
 800cf06:	f7ff f8fc 	bl	800c102 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	613b      	str	r3, [r7, #16]
 800cf0e:	6979      	ldr	r1, [r7, #20]
 800cf10:	68f8      	ldr	r0, [r7, #12]
 800cf12:	f7ff fba1 	bl	800c658 <clust2sect>
 800cf16:	4602      	mov	r2, r0
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	631a      	str	r2, [r3, #48]	; 0x30
 800cf1c:	e012      	b.n	800cf44 <dir_next+0x152>
						fs->wflag = 1;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2201      	movs	r2, #1
 800cf22:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	f7ff fab5 	bl	800c494 <sync_window>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d001      	beq.n	800cf34 <dir_next+0x142>
 800cf30:	2301      	movs	r3, #1
 800cf32:	e030      	b.n	800cf96 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	3301      	adds	r3, #1
 800cf38:	613b      	str	r3, [r7, #16]
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf3e:	1c5a      	adds	r2, r3, #1
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	631a      	str	r2, [r3, #48]	; 0x30
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	895b      	ldrh	r3, [r3, #10]
 800cf48:	461a      	mov	r2, r3
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d3e6      	bcc.n	800cf1e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	1ad2      	subs	r2, r2, r3
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	697a      	ldr	r2, [r7, #20]
 800cf60:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cf62:	6979      	ldr	r1, [r7, #20]
 800cf64:	68f8      	ldr	r0, [r7, #12]
 800cf66:	f7ff fb77 	bl	800c658 <clust2sect>
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	68ba      	ldr	r2, [r7, #8]
 800cf74:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	899b      	ldrh	r3, [r3, #12]
 800cf80:	461a      	mov	r2, r3
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	fbb3 f0f2 	udiv	r0, r3, r2
 800cf88:	fb02 f200 	mul.w	r2, r2, r0
 800cf8c:	1a9b      	subs	r3, r3, r2
 800cf8e:	18ca      	adds	r2, r1, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cf94:	2300      	movs	r3, #0
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3718      	adds	r7, #24
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}

0800cf9e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cf9e:	b580      	push	{r7, lr}
 800cfa0:	b086      	sub	sp, #24
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	6078      	str	r0, [r7, #4]
 800cfa6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cfae:	2100      	movs	r1, #0
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f7ff fe95 	bl	800cce0 <dir_sdi>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cfba:	7dfb      	ldrb	r3, [r7, #23]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d12b      	bne.n	800d018 <dir_alloc+0x7a>
		n = 0;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	69db      	ldr	r3, [r3, #28]
 800cfc8:	4619      	mov	r1, r3
 800cfca:	68f8      	ldr	r0, [r7, #12]
 800cfcc:	f7ff faa6 	bl	800c51c <move_window>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cfd4:	7dfb      	ldrb	r3, [r7, #23]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d11d      	bne.n	800d016 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6a1b      	ldr	r3, [r3, #32]
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	2be5      	cmp	r3, #229	; 0xe5
 800cfe2:	d004      	beq.n	800cfee <dir_alloc+0x50>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6a1b      	ldr	r3, [r3, #32]
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d107      	bne.n	800cffe <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	3301      	adds	r3, #1
 800cff2:	613b      	str	r3, [r7, #16]
 800cff4:	693a      	ldr	r2, [r7, #16]
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d102      	bne.n	800d002 <dir_alloc+0x64>
 800cffc:	e00c      	b.n	800d018 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cffe:	2300      	movs	r3, #0
 800d000:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d002:	2101      	movs	r1, #1
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f7ff fef4 	bl	800cdf2 <dir_next>
 800d00a:	4603      	mov	r3, r0
 800d00c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d00e:	7dfb      	ldrb	r3, [r7, #23]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d0d7      	beq.n	800cfc4 <dir_alloc+0x26>
 800d014:	e000      	b.n	800d018 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d016:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d018:	7dfb      	ldrb	r3, [r7, #23]
 800d01a:	2b04      	cmp	r3, #4
 800d01c:	d101      	bne.n	800d022 <dir_alloc+0x84>
 800d01e:	2307      	movs	r3, #7
 800d020:	75fb      	strb	r3, [r7, #23]
	return res;
 800d022:	7dfb      	ldrb	r3, [r7, #23]
}
 800d024:	4618      	mov	r0, r3
 800d026:	3718      	adds	r7, #24
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	331a      	adds	r3, #26
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7fe ffbe 	bl	800bfbc <ld_word>
 800d040:	4603      	mov	r3, r0
 800d042:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	2b03      	cmp	r3, #3
 800d04a:	d109      	bne.n	800d060 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	3314      	adds	r3, #20
 800d050:	4618      	mov	r0, r3
 800d052:	f7fe ffb3 	bl	800bfbc <ld_word>
 800d056:	4603      	mov	r3, r0
 800d058:	041b      	lsls	r3, r3, #16
 800d05a:	68fa      	ldr	r2, [r7, #12]
 800d05c:	4313      	orrs	r3, r2
 800d05e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d060:	68fb      	ldr	r3, [r7, #12]
}
 800d062:	4618      	mov	r0, r3
 800d064:	3710      	adds	r7, #16
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}

0800d06a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d06a:	b580      	push	{r7, lr}
 800d06c:	b084      	sub	sp, #16
 800d06e:	af00      	add	r7, sp, #0
 800d070:	60f8      	str	r0, [r7, #12]
 800d072:	60b9      	str	r1, [r7, #8]
 800d074:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	331a      	adds	r3, #26
 800d07a:	687a      	ldr	r2, [r7, #4]
 800d07c:	b292      	uxth	r2, r2
 800d07e:	4611      	mov	r1, r2
 800d080:	4618      	mov	r0, r3
 800d082:	f7fe ffd6 	bl	800c032 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	2b03      	cmp	r3, #3
 800d08c:	d109      	bne.n	800d0a2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	f103 0214 	add.w	r2, r3, #20
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	0c1b      	lsrs	r3, r3, #16
 800d098:	b29b      	uxth	r3, r3
 800d09a:	4619      	mov	r1, r3
 800d09c:	4610      	mov	r0, r2
 800d09e:	f7fe ffc8 	bl	800c032 <st_word>
	}
}
 800d0a2:	bf00      	nop
 800d0a4:	3710      	adds	r7, #16
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}

0800d0aa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d0aa:	b580      	push	{r7, lr}
 800d0ac:	b086      	sub	sp, #24
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d0b8:	2100      	movs	r1, #0
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f7ff fe10 	bl	800cce0 <dir_sdi>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d0c4:	7dfb      	ldrb	r3, [r7, #23]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d001      	beq.n	800d0ce <dir_find+0x24>
 800d0ca:	7dfb      	ldrb	r3, [r7, #23]
 800d0cc:	e03e      	b.n	800d14c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	69db      	ldr	r3, [r3, #28]
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	6938      	ldr	r0, [r7, #16]
 800d0d6:	f7ff fa21 	bl	800c51c <move_window>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d0de:	7dfb      	ldrb	r3, [r7, #23]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d12f      	bne.n	800d144 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6a1b      	ldr	r3, [r3, #32]
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d0ec:	7bfb      	ldrb	r3, [r7, #15]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d102      	bne.n	800d0f8 <dir_find+0x4e>
 800d0f2:	2304      	movs	r3, #4
 800d0f4:	75fb      	strb	r3, [r7, #23]
 800d0f6:	e028      	b.n	800d14a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6a1b      	ldr	r3, [r3, #32]
 800d0fc:	330b      	adds	r3, #11
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d104:	b2da      	uxtb	r2, r3
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6a1b      	ldr	r3, [r3, #32]
 800d10e:	330b      	adds	r3, #11
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	f003 0308 	and.w	r3, r3, #8
 800d116:	2b00      	cmp	r3, #0
 800d118:	d10a      	bne.n	800d130 <dir_find+0x86>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6a18      	ldr	r0, [r3, #32]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	3324      	adds	r3, #36	; 0x24
 800d122:	220b      	movs	r2, #11
 800d124:	4619      	mov	r1, r3
 800d126:	f7ff f807 	bl	800c138 <mem_cmp>
 800d12a:	4603      	mov	r3, r0
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d00b      	beq.n	800d148 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d130:	2100      	movs	r1, #0
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f7ff fe5d 	bl	800cdf2 <dir_next>
 800d138:	4603      	mov	r3, r0
 800d13a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d13c:	7dfb      	ldrb	r3, [r7, #23]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d0c5      	beq.n	800d0ce <dir_find+0x24>
 800d142:	e002      	b.n	800d14a <dir_find+0xa0>
		if (res != FR_OK) break;
 800d144:	bf00      	nop
 800d146:	e000      	b.n	800d14a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d148:	bf00      	nop

	return res;
 800d14a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3718      	adds	r7, #24
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d162:	2101      	movs	r1, #1
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f7ff ff1a 	bl	800cf9e <dir_alloc>
 800d16a:	4603      	mov	r3, r0
 800d16c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d16e:	7bfb      	ldrb	r3, [r7, #15]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d11c      	bne.n	800d1ae <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	69db      	ldr	r3, [r3, #28]
 800d178:	4619      	mov	r1, r3
 800d17a:	68b8      	ldr	r0, [r7, #8]
 800d17c:	f7ff f9ce 	bl	800c51c <move_window>
 800d180:	4603      	mov	r3, r0
 800d182:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d184:	7bfb      	ldrb	r3, [r7, #15]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d111      	bne.n	800d1ae <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6a1b      	ldr	r3, [r3, #32]
 800d18e:	2220      	movs	r2, #32
 800d190:	2100      	movs	r1, #0
 800d192:	4618      	mov	r0, r3
 800d194:	f7fe ffb5 	bl	800c102 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6a18      	ldr	r0, [r3, #32]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	3324      	adds	r3, #36	; 0x24
 800d1a0:	220b      	movs	r2, #11
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	f7fe ff8c 	bl	800c0c0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3710      	adds	r7, #16
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b08a      	sub	sp, #40	; 0x28
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	617b      	str	r3, [r7, #20]
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	3324      	adds	r3, #36	; 0x24
 800d1cc:	613b      	str	r3, [r7, #16]
	mem_set(sfn, ' ', 11);
 800d1ce:	220b      	movs	r2, #11
 800d1d0:	2120      	movs	r1, #32
 800d1d2:	6938      	ldr	r0, [r7, #16]
 800d1d4:	f7fe ff95 	bl	800c102 <mem_set>
	si = i = 0; ni = 8;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	61bb      	str	r3, [r7, #24]
 800d1dc:	69bb      	ldr	r3, [r7, #24]
 800d1de:	61fb      	str	r3, [r7, #28]
 800d1e0:	2308      	movs	r3, #8
 800d1e2:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d1e4:	69fb      	ldr	r3, [r7, #28]
 800d1e6:	1c5a      	adds	r2, r3, #1
 800d1e8:	61fa      	str	r2, [r7, #28]
 800d1ea:	697a      	ldr	r2, [r7, #20]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d1f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1f8:	2b20      	cmp	r3, #32
 800d1fa:	f240 8083 	bls.w	800d304 <create_name+0x14c>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d1fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d202:	2b2f      	cmp	r3, #47	; 0x2f
 800d204:	d007      	beq.n	800d216 <create_name+0x5e>
 800d206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d20a:	2b5c      	cmp	r3, #92	; 0x5c
 800d20c:	d110      	bne.n	800d230 <create_name+0x78>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d20e:	e002      	b.n	800d216 <create_name+0x5e>
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	3301      	adds	r3, #1
 800d214:	61fb      	str	r3, [r7, #28]
 800d216:	697a      	ldr	r2, [r7, #20]
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	4413      	add	r3, r2
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	2b2f      	cmp	r3, #47	; 0x2f
 800d220:	d0f6      	beq.n	800d210 <create_name+0x58>
 800d222:	697a      	ldr	r2, [r7, #20]
 800d224:	69fb      	ldr	r3, [r7, #28]
 800d226:	4413      	add	r3, r2
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	2b5c      	cmp	r3, #92	; 0x5c
 800d22c:	d0f0      	beq.n	800d210 <create_name+0x58>
			break;
 800d22e:	e06a      	b.n	800d306 <create_name+0x14e>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d234:	2b2e      	cmp	r3, #46	; 0x2e
 800d236:	d003      	beq.n	800d240 <create_name+0x88>
 800d238:	69ba      	ldr	r2, [r7, #24]
 800d23a:	6a3b      	ldr	r3, [r7, #32]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d30d      	bcc.n	800d25c <create_name+0xa4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d240:	6a3b      	ldr	r3, [r7, #32]
 800d242:	2b0b      	cmp	r3, #11
 800d244:	d003      	beq.n	800d24e <create_name+0x96>
 800d246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d24a:	2b2e      	cmp	r3, #46	; 0x2e
 800d24c:	d001      	beq.n	800d252 <create_name+0x9a>
 800d24e:	2306      	movs	r3, #6
 800d250:	e075      	b.n	800d33e <create_name+0x186>
			i = 8; ni = 11;				/* Goto extension */
 800d252:	2308      	movs	r3, #8
 800d254:	61bb      	str	r3, [r7, #24]
 800d256:	230b      	movs	r3, #11
 800d258:	623b      	str	r3, [r7, #32]
			continue;
 800d25a:	e052      	b.n	800d302 <create_name+0x14a>
#if !_DF1S
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false at SBCS cfg.) */
 800d25c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d260:	2b80      	cmp	r3, #128	; 0x80
 800d262:	d92e      	bls.n	800d2c2 <create_name+0x10a>
 800d264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d268:	2bff      	cmp	r3, #255	; 0xff
 800d26a:	d02a      	beq.n	800d2c2 <create_name+0x10a>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	1c5a      	adds	r2, r3, #1
 800d270:	61fa      	str	r2, [r7, #28]
 800d272:	697a      	ldr	r2, [r7, #20]
 800d274:	4413      	add	r3, r2
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	73fb      	strb	r3, [r7, #15]
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 800d27a:	7bfb      	ldrb	r3, [r7, #15]
 800d27c:	2b3f      	cmp	r3, #63	; 0x3f
 800d27e:	d902      	bls.n	800d286 <create_name+0xce>
 800d280:	7bfb      	ldrb	r3, [r7, #15]
 800d282:	2b7e      	cmp	r3, #126	; 0x7e
 800d284:	d906      	bls.n	800d294 <create_name+0xdc>
 800d286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	da07      	bge.n	800d29e <create_name+0xe6>
 800d28e:	7bfb      	ldrb	r3, [r7, #15]
 800d290:	2bff      	cmp	r3, #255	; 0xff
 800d292:	d004      	beq.n	800d29e <create_name+0xe6>
 800d294:	6a3b      	ldr	r3, [r7, #32]
 800d296:	3b01      	subs	r3, #1
 800d298:	69ba      	ldr	r2, [r7, #24]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d301      	bcc.n	800d2a2 <create_name+0xea>
 800d29e:	2306      	movs	r3, #6
 800d2a0:	e04d      	b.n	800d33e <create_name+0x186>
			sfn[i++] = c;
 800d2a2:	69bb      	ldr	r3, [r7, #24]
 800d2a4:	1c5a      	adds	r2, r3, #1
 800d2a6:	61ba      	str	r2, [r7, #24]
 800d2a8:	693a      	ldr	r2, [r7, #16]
 800d2aa:	4413      	add	r3, r2
 800d2ac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d2b0:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 800d2b2:	69bb      	ldr	r3, [r7, #24]
 800d2b4:	1c5a      	adds	r2, r3, #1
 800d2b6:	61ba      	str	r2, [r7, #24]
 800d2b8:	693a      	ldr	r2, [r7, #16]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	7bfa      	ldrb	r2, [r7, #15]
 800d2be:	701a      	strb	r2, [r3, #0]
 800d2c0:	e01f      	b.n	800d302 <create_name+0x14a>
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d2c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	481f      	ldr	r0, [pc, #124]	; (800d348 <create_name+0x190>)
 800d2ca:	f7fe ff5c 	bl	800c186 <chk_chr>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d001      	beq.n	800d2d8 <create_name+0x120>
 800d2d4:	2306      	movs	r3, #6
 800d2d6:	e032      	b.n	800d33e <create_name+0x186>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d2d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2dc:	2b60      	cmp	r3, #96	; 0x60
 800d2de:	d908      	bls.n	800d2f2 <create_name+0x13a>
 800d2e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2e4:	2b7a      	cmp	r3, #122	; 0x7a
 800d2e6:	d804      	bhi.n	800d2f2 <create_name+0x13a>
 800d2e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2ec:	3b20      	subs	r3, #32
 800d2ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 800d2f2:	69bb      	ldr	r3, [r7, #24]
 800d2f4:	1c5a      	adds	r2, r3, #1
 800d2f6:	61ba      	str	r2, [r7, #24]
 800d2f8:	693a      	ldr	r2, [r7, #16]
 800d2fa:	4413      	add	r3, r2
 800d2fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d300:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d302:	e76f      	b.n	800d1e4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d304:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d306:	697a      	ldr	r2, [r7, #20]
 800d308:	69fb      	ldr	r3, [r7, #28]
 800d30a:	441a      	add	r2, r3
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d310:	69bb      	ldr	r3, [r7, #24]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d101      	bne.n	800d31a <create_name+0x162>
 800d316:	2306      	movs	r3, #6
 800d318:	e011      	b.n	800d33e <create_name+0x186>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	2be5      	cmp	r3, #229	; 0xe5
 800d320:	d102      	bne.n	800d328 <create_name+0x170>
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	2205      	movs	r2, #5
 800d326:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d32c:	2b20      	cmp	r3, #32
 800d32e:	d801      	bhi.n	800d334 <create_name+0x17c>
 800d330:	2204      	movs	r2, #4
 800d332:	e000      	b.n	800d336 <create_name+0x17e>
 800d334:	2200      	movs	r2, #0
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	330b      	adds	r3, #11
 800d33a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d33c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3728      	adds	r7, #40	; 0x28
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	bf00      	nop
 800d348:	0801052c 	.word	0x0801052c

0800d34c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b086      	sub	sp, #24
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d360:	e002      	b.n	800d368 <follow_path+0x1c>
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	3301      	adds	r3, #1
 800d366:	603b      	str	r3, [r7, #0]
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	2b2f      	cmp	r3, #47	; 0x2f
 800d36e:	d0f8      	beq.n	800d362 <follow_path+0x16>
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	2b5c      	cmp	r3, #92	; 0x5c
 800d376:	d0f4      	beq.n	800d362 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	2200      	movs	r2, #0
 800d37c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	2b1f      	cmp	r3, #31
 800d384:	d80a      	bhi.n	800d39c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2280      	movs	r2, #128	; 0x80
 800d38a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d38e:	2100      	movs	r1, #0
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f7ff fca5 	bl	800cce0 <dir_sdi>
 800d396:	4603      	mov	r3, r0
 800d398:	75fb      	strb	r3, [r7, #23]
 800d39a:	e048      	b.n	800d42e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d39c:	463b      	mov	r3, r7
 800d39e:	4619      	mov	r1, r3
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f7ff ff09 	bl	800d1b8 <create_name>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d3aa:	7dfb      	ldrb	r3, [r7, #23]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d139      	bne.n	800d424 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f7ff fe7a 	bl	800d0aa <dir_find>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d3c0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d3c2:	7dfb      	ldrb	r3, [r7, #23]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d00a      	beq.n	800d3de <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d3c8:	7dfb      	ldrb	r3, [r7, #23]
 800d3ca:	2b04      	cmp	r3, #4
 800d3cc:	d12c      	bne.n	800d428 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d3ce:	7afb      	ldrb	r3, [r7, #11]
 800d3d0:	f003 0304 	and.w	r3, r3, #4
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d127      	bne.n	800d428 <follow_path+0xdc>
 800d3d8:	2305      	movs	r3, #5
 800d3da:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d3dc:	e024      	b.n	800d428 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d3de:	7afb      	ldrb	r3, [r7, #11]
 800d3e0:	f003 0304 	and.w	r3, r3, #4
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d121      	bne.n	800d42c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	799b      	ldrb	r3, [r3, #6]
 800d3ec:	f003 0310 	and.w	r3, r3, #16
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d102      	bne.n	800d3fa <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d3f4:	2305      	movs	r3, #5
 800d3f6:	75fb      	strb	r3, [r7, #23]
 800d3f8:	e019      	b.n	800d42e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	695b      	ldr	r3, [r3, #20]
 800d404:	68fa      	ldr	r2, [r7, #12]
 800d406:	8992      	ldrh	r2, [r2, #12]
 800d408:	fbb3 f0f2 	udiv	r0, r3, r2
 800d40c:	fb02 f200 	mul.w	r2, r2, r0
 800d410:	1a9b      	subs	r3, r3, r2
 800d412:	440b      	add	r3, r1
 800d414:	4619      	mov	r1, r3
 800d416:	68f8      	ldr	r0, [r7, #12]
 800d418:	f7ff fe08 	bl	800d02c <ld_clust>
 800d41c:	4602      	mov	r2, r0
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d422:	e7bb      	b.n	800d39c <follow_path+0x50>
			if (res != FR_OK) break;
 800d424:	bf00      	nop
 800d426:	e002      	b.n	800d42e <follow_path+0xe2>
				break;
 800d428:	bf00      	nop
 800d42a:	e000      	b.n	800d42e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d42c:	bf00      	nop
			}
		}
	}

	return res;
 800d42e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d430:	4618      	mov	r0, r3
 800d432:	3718      	adds	r7, #24
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d438:	b480      	push	{r7}
 800d43a:	b087      	sub	sp, #28
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d440:	f04f 33ff 	mov.w	r3, #4294967295
 800d444:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d031      	beq.n	800d4b2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	617b      	str	r3, [r7, #20]
 800d454:	e002      	b.n	800d45c <get_ldnumber+0x24>
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	3301      	adds	r3, #1
 800d45a:	617b      	str	r3, [r7, #20]
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	2b20      	cmp	r3, #32
 800d462:	d903      	bls.n	800d46c <get_ldnumber+0x34>
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	2b3a      	cmp	r3, #58	; 0x3a
 800d46a:	d1f4      	bne.n	800d456 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	2b3a      	cmp	r3, #58	; 0x3a
 800d472:	d11c      	bne.n	800d4ae <get_ldnumber+0x76>
			tp = *path;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	1c5a      	adds	r2, r3, #1
 800d47e:	60fa      	str	r2, [r7, #12]
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	3b30      	subs	r3, #48	; 0x30
 800d484:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	2b09      	cmp	r3, #9
 800d48a:	d80e      	bhi.n	800d4aa <get_ldnumber+0x72>
 800d48c:	68fa      	ldr	r2, [r7, #12]
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	429a      	cmp	r2, r3
 800d492:	d10a      	bne.n	800d4aa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d107      	bne.n	800d4aa <get_ldnumber+0x72>
					vol = (int)i;
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	617b      	str	r3, [r7, #20]
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	697a      	ldr	r2, [r7, #20]
 800d4a8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	e002      	b.n	800d4b4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d4b2:	693b      	ldr	r3, [r7, #16]
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	371c      	adds	r7, #28
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr

0800d4c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	70da      	strb	r2, [r3, #3]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4d6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d4d8:	6839      	ldr	r1, [r7, #0]
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f7ff f81e 	bl	800c51c <move_window>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d001      	beq.n	800d4ea <check_fs+0x2a>
 800d4e6:	2304      	movs	r3, #4
 800d4e8:	e038      	b.n	800d55c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	3334      	adds	r3, #52	; 0x34
 800d4ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7fe fd62 	bl	800bfbc <ld_word>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d500:	429a      	cmp	r2, r3
 800d502:	d001      	beq.n	800d508 <check_fs+0x48>
 800d504:	2303      	movs	r3, #3
 800d506:	e029      	b.n	800d55c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d50e:	2be9      	cmp	r3, #233	; 0xe9
 800d510:	d009      	beq.n	800d526 <check_fs+0x66>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d518:	2beb      	cmp	r3, #235	; 0xeb
 800d51a:	d11e      	bne.n	800d55a <check_fs+0x9a>
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d522:	2b90      	cmp	r3, #144	; 0x90
 800d524:	d119      	bne.n	800d55a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	3334      	adds	r3, #52	; 0x34
 800d52a:	3336      	adds	r3, #54	; 0x36
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7fe fd5d 	bl	800bfec <ld_dword>
 800d532:	4603      	mov	r3, r0
 800d534:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d538:	4a0a      	ldr	r2, [pc, #40]	; (800d564 <check_fs+0xa4>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d101      	bne.n	800d542 <check_fs+0x82>
 800d53e:	2300      	movs	r3, #0
 800d540:	e00c      	b.n	800d55c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	3334      	adds	r3, #52	; 0x34
 800d546:	3352      	adds	r3, #82	; 0x52
 800d548:	4618      	mov	r0, r3
 800d54a:	f7fe fd4f 	bl	800bfec <ld_dword>
 800d54e:	4603      	mov	r3, r0
 800d550:	4a05      	ldr	r2, [pc, #20]	; (800d568 <check_fs+0xa8>)
 800d552:	4293      	cmp	r3, r2
 800d554:	d101      	bne.n	800d55a <check_fs+0x9a>
 800d556:	2300      	movs	r3, #0
 800d558:	e000      	b.n	800d55c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d55a:	2302      	movs	r3, #2
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3708      	adds	r7, #8
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}
 800d564:	00544146 	.word	0x00544146
 800d568:	33544146 	.word	0x33544146

0800d56c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b096      	sub	sp, #88	; 0x58
 800d570:	af00      	add	r7, sp, #0
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	60b9      	str	r1, [r7, #8]
 800d576:	4613      	mov	r3, r2
 800d578:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	2200      	movs	r2, #0
 800d57e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d580:	68f8      	ldr	r0, [r7, #12]
 800d582:	f7ff ff59 	bl	800d438 <get_ldnumber>
 800d586:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	da01      	bge.n	800d592 <find_volume+0x26>
 800d58e:	230b      	movs	r3, #11
 800d590:	e265      	b.n	800da5e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d592:	4ab0      	ldr	r2, [pc, #704]	; (800d854 <find_volume+0x2e8>)
 800d594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d59a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d101      	bne.n	800d5a6 <find_volume+0x3a>
 800d5a2:	230c      	movs	r3, #12
 800d5a4:	e25b      	b.n	800da5e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5aa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d5ac:	79fb      	ldrb	r3, [r7, #7]
 800d5ae:	f023 0301 	bic.w	r3, r3, #1
 800d5b2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d01a      	beq.n	800d5f2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5be:	785b      	ldrb	r3, [r3, #1]
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f7fe fc5d 	bl	800be80 <disk_status>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d5cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d5d0:	f003 0301 	and.w	r3, r3, #1
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d10c      	bne.n	800d5f2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d5d8:	79fb      	ldrb	r3, [r7, #7]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d007      	beq.n	800d5ee <find_volume+0x82>
 800d5de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d5e2:	f003 0304 	and.w	r3, r3, #4
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d001      	beq.n	800d5ee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d5ea:	230a      	movs	r3, #10
 800d5ec:	e237      	b.n	800da5e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	e235      	b.n	800da5e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5fa:	b2da      	uxtb	r2, r3
 800d5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d602:	785b      	ldrb	r3, [r3, #1]
 800d604:	4618      	mov	r0, r3
 800d606:	f7fe fc55 	bl	800beb4 <disk_initialize>
 800d60a:	4603      	mov	r3, r0
 800d60c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d610:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d614:	f003 0301 	and.w	r3, r3, #1
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d001      	beq.n	800d620 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d61c:	2303      	movs	r3, #3
 800d61e:	e21e      	b.n	800da5e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d620:	79fb      	ldrb	r3, [r7, #7]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d007      	beq.n	800d636 <find_volume+0xca>
 800d626:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d62a:	f003 0304 	and.w	r3, r3, #4
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d001      	beq.n	800d636 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d632:	230a      	movs	r3, #10
 800d634:	e213      	b.n	800da5e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d638:	7858      	ldrb	r0, [r3, #1]
 800d63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63c:	330c      	adds	r3, #12
 800d63e:	461a      	mov	r2, r3
 800d640:	2102      	movs	r1, #2
 800d642:	f7fe fc9d 	bl	800bf80 <disk_ioctl>
 800d646:	4603      	mov	r3, r0
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d001      	beq.n	800d650 <find_volume+0xe4>
 800d64c:	2301      	movs	r3, #1
 800d64e:	e206      	b.n	800da5e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d652:	899b      	ldrh	r3, [r3, #12]
 800d654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d658:	d80d      	bhi.n	800d676 <find_volume+0x10a>
 800d65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65c:	899b      	ldrh	r3, [r3, #12]
 800d65e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d662:	d308      	bcc.n	800d676 <find_volume+0x10a>
 800d664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d666:	899b      	ldrh	r3, [r3, #12]
 800d668:	461a      	mov	r2, r3
 800d66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66c:	899b      	ldrh	r3, [r3, #12]
 800d66e:	3b01      	subs	r3, #1
 800d670:	4013      	ands	r3, r2
 800d672:	2b00      	cmp	r3, #0
 800d674:	d001      	beq.n	800d67a <find_volume+0x10e>
 800d676:	2301      	movs	r3, #1
 800d678:	e1f1      	b.n	800da5e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d67a:	2300      	movs	r3, #0
 800d67c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d67e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d680:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d682:	f7ff ff1d 	bl	800d4c0 <check_fs>
 800d686:	4603      	mov	r3, r0
 800d688:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d68c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d690:	2b02      	cmp	r3, #2
 800d692:	d14b      	bne.n	800d72c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d694:	2300      	movs	r3, #0
 800d696:	643b      	str	r3, [r7, #64]	; 0x40
 800d698:	e01f      	b.n	800d6da <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d69c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d6a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6a2:	011b      	lsls	r3, r3, #4
 800d6a4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d6a8:	4413      	add	r3, r2
 800d6aa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ae:	3304      	adds	r3, #4
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d006      	beq.n	800d6c4 <find_volume+0x158>
 800d6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b8:	3308      	adds	r3, #8
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7fe fc96 	bl	800bfec <ld_dword>
 800d6c0:	4602      	mov	r2, r0
 800d6c2:	e000      	b.n	800d6c6 <find_volume+0x15a>
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d6ce:	440b      	add	r3, r1
 800d6d0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d6d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	643b      	str	r3, [r7, #64]	; 0x40
 800d6da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6dc:	2b03      	cmp	r3, #3
 800d6de:	d9dc      	bls.n	800d69a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d6e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d002      	beq.n	800d6f0 <find_volume+0x184>
 800d6ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6ec:	3b01      	subs	r3, #1
 800d6ee:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d6f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6f2:	009b      	lsls	r3, r3, #2
 800d6f4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d6f8:	4413      	add	r3, r2
 800d6fa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d6fe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d702:	2b00      	cmp	r3, #0
 800d704:	d005      	beq.n	800d712 <find_volume+0x1a6>
 800d706:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d708:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d70a:	f7ff fed9 	bl	800d4c0 <check_fs>
 800d70e:	4603      	mov	r3, r0
 800d710:	e000      	b.n	800d714 <find_volume+0x1a8>
 800d712:	2303      	movs	r3, #3
 800d714:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d718:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d905      	bls.n	800d72c <find_volume+0x1c0>
 800d720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d722:	3301      	adds	r3, #1
 800d724:	643b      	str	r3, [r7, #64]	; 0x40
 800d726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d728:	2b03      	cmp	r3, #3
 800d72a:	d9e1      	bls.n	800d6f0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d72c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d730:	2b04      	cmp	r3, #4
 800d732:	d101      	bne.n	800d738 <find_volume+0x1cc>
 800d734:	2301      	movs	r3, #1
 800d736:	e192      	b.n	800da5e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d738:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	d901      	bls.n	800d744 <find_volume+0x1d8>
 800d740:	230d      	movs	r3, #13
 800d742:	e18c      	b.n	800da5e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d746:	3334      	adds	r3, #52	; 0x34
 800d748:	330b      	adds	r3, #11
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fe fc36 	bl	800bfbc <ld_word>
 800d750:	4603      	mov	r3, r0
 800d752:	461a      	mov	r2, r3
 800d754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d756:	899b      	ldrh	r3, [r3, #12]
 800d758:	429a      	cmp	r2, r3
 800d75a:	d001      	beq.n	800d760 <find_volume+0x1f4>
 800d75c:	230d      	movs	r3, #13
 800d75e:	e17e      	b.n	800da5e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d762:	3334      	adds	r3, #52	; 0x34
 800d764:	3316      	adds	r3, #22
 800d766:	4618      	mov	r0, r3
 800d768:	f7fe fc28 	bl	800bfbc <ld_word>
 800d76c:	4603      	mov	r3, r0
 800d76e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d772:	2b00      	cmp	r3, #0
 800d774:	d106      	bne.n	800d784 <find_volume+0x218>
 800d776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d778:	3334      	adds	r3, #52	; 0x34
 800d77a:	3324      	adds	r3, #36	; 0x24
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7fe fc35 	bl	800bfec <ld_dword>
 800d782:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d786:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d788:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d78c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d792:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d796:	789b      	ldrb	r3, [r3, #2]
 800d798:	2b01      	cmp	r3, #1
 800d79a:	d005      	beq.n	800d7a8 <find_volume+0x23c>
 800d79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d79e:	789b      	ldrb	r3, [r3, #2]
 800d7a0:	2b02      	cmp	r3, #2
 800d7a2:	d001      	beq.n	800d7a8 <find_volume+0x23c>
 800d7a4:	230d      	movs	r3, #13
 800d7a6:	e15a      	b.n	800da5e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7aa:	789b      	ldrb	r3, [r3, #2]
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7b0:	fb02 f303 	mul.w	r3, r2, r3
 800d7b4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c4:	895b      	ldrh	r3, [r3, #10]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d008      	beq.n	800d7dc <find_volume+0x270>
 800d7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7cc:	895b      	ldrh	r3, [r3, #10]
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d2:	895b      	ldrh	r3, [r3, #10]
 800d7d4:	3b01      	subs	r3, #1
 800d7d6:	4013      	ands	r3, r2
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d001      	beq.n	800d7e0 <find_volume+0x274>
 800d7dc:	230d      	movs	r3, #13
 800d7de:	e13e      	b.n	800da5e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e2:	3334      	adds	r3, #52	; 0x34
 800d7e4:	3311      	adds	r3, #17
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f7fe fbe8 	bl	800bfbc <ld_word>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	461a      	mov	r2, r3
 800d7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f6:	891b      	ldrh	r3, [r3, #8]
 800d7f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7fa:	8992      	ldrh	r2, [r2, #12]
 800d7fc:	0952      	lsrs	r2, r2, #5
 800d7fe:	b292      	uxth	r2, r2
 800d800:	fbb3 f1f2 	udiv	r1, r3, r2
 800d804:	fb02 f201 	mul.w	r2, r2, r1
 800d808:	1a9b      	subs	r3, r3, r2
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d001      	beq.n	800d814 <find_volume+0x2a8>
 800d810:	230d      	movs	r3, #13
 800d812:	e124      	b.n	800da5e <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d816:	3334      	adds	r3, #52	; 0x34
 800d818:	3313      	adds	r3, #19
 800d81a:	4618      	mov	r0, r3
 800d81c:	f7fe fbce 	bl	800bfbc <ld_word>
 800d820:	4603      	mov	r3, r0
 800d822:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d826:	2b00      	cmp	r3, #0
 800d828:	d106      	bne.n	800d838 <find_volume+0x2cc>
 800d82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d82c:	3334      	adds	r3, #52	; 0x34
 800d82e:	3320      	adds	r3, #32
 800d830:	4618      	mov	r0, r3
 800d832:	f7fe fbdb 	bl	800bfec <ld_dword>
 800d836:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d83a:	3334      	adds	r3, #52	; 0x34
 800d83c:	330e      	adds	r3, #14
 800d83e:	4618      	mov	r0, r3
 800d840:	f7fe fbbc 	bl	800bfbc <ld_word>
 800d844:	4603      	mov	r3, r0
 800d846:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d848:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d104      	bne.n	800d858 <find_volume+0x2ec>
 800d84e:	230d      	movs	r3, #13
 800d850:	e105      	b.n	800da5e <find_volume+0x4f2>
 800d852:	bf00      	nop
 800d854:	20002108 	.word	0x20002108

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d858:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d85a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d85c:	4413      	add	r3, r2
 800d85e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d860:	8911      	ldrh	r1, [r2, #8]
 800d862:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d864:	8992      	ldrh	r2, [r2, #12]
 800d866:	0952      	lsrs	r2, r2, #5
 800d868:	b292      	uxth	r2, r2
 800d86a:	fbb1 f2f2 	udiv	r2, r1, r2
 800d86e:	b292      	uxth	r2, r2
 800d870:	4413      	add	r3, r2
 800d872:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d874:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d878:	429a      	cmp	r2, r3
 800d87a:	d201      	bcs.n	800d880 <find_volume+0x314>
 800d87c:	230d      	movs	r3, #13
 800d87e:	e0ee      	b.n	800da5e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d880:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d884:	1ad3      	subs	r3, r2, r3
 800d886:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d888:	8952      	ldrh	r2, [r2, #10]
 800d88a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d88e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d892:	2b00      	cmp	r3, #0
 800d894:	d101      	bne.n	800d89a <find_volume+0x32e>
 800d896:	230d      	movs	r3, #13
 800d898:	e0e1      	b.n	800da5e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800d89a:	2303      	movs	r3, #3
 800d89c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d802      	bhi.n	800d8b0 <find_volume+0x344>
 800d8aa:	2302      	movs	r3, #2
 800d8ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d802      	bhi.n	800d8c0 <find_volume+0x354>
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c2:	1c9a      	adds	r2, r3, #2
 800d8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d8cc:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d8ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d8d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8d2:	441a      	add	r2, r3
 800d8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d8d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8dc:	441a      	add	r2, r3
 800d8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8e0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800d8e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d8e6:	2b03      	cmp	r3, #3
 800d8e8:	d11e      	bne.n	800d928 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ec:	3334      	adds	r3, #52	; 0x34
 800d8ee:	332a      	adds	r3, #42	; 0x2a
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7fe fb63 	bl	800bfbc <ld_word>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d001      	beq.n	800d900 <find_volume+0x394>
 800d8fc:	230d      	movs	r3, #13
 800d8fe:	e0ae      	b.n	800da5e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d902:	891b      	ldrh	r3, [r3, #8]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d001      	beq.n	800d90c <find_volume+0x3a0>
 800d908:	230d      	movs	r3, #13
 800d90a:	e0a8      	b.n	800da5e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d90e:	3334      	adds	r3, #52	; 0x34
 800d910:	332c      	adds	r3, #44	; 0x2c
 800d912:	4618      	mov	r0, r3
 800d914:	f7fe fb6a 	bl	800bfec <ld_dword>
 800d918:	4602      	mov	r2, r0
 800d91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d91c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d920:	699b      	ldr	r3, [r3, #24]
 800d922:	009b      	lsls	r3, r3, #2
 800d924:	647b      	str	r3, [r7, #68]	; 0x44
 800d926:	e01f      	b.n	800d968 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d92a:	891b      	ldrh	r3, [r3, #8]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d101      	bne.n	800d934 <find_volume+0x3c8>
 800d930:	230d      	movs	r3, #13
 800d932:	e094      	b.n	800da5e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d93a:	441a      	add	r2, r3
 800d93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d93e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d940:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d944:	2b02      	cmp	r3, #2
 800d946:	d103      	bne.n	800d950 <find_volume+0x3e4>
 800d948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d94a:	699b      	ldr	r3, [r3, #24]
 800d94c:	005b      	lsls	r3, r3, #1
 800d94e:	e00a      	b.n	800d966 <find_volume+0x3fa>
 800d950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d952:	699a      	ldr	r2, [r3, #24]
 800d954:	4613      	mov	r3, r2
 800d956:	005b      	lsls	r3, r3, #1
 800d958:	4413      	add	r3, r2
 800d95a:	085a      	lsrs	r2, r3, #1
 800d95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d95e:	699b      	ldr	r3, [r3, #24]
 800d960:	f003 0301 	and.w	r3, r3, #1
 800d964:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d966:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d96a:	69da      	ldr	r2, [r3, #28]
 800d96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d96e:	899b      	ldrh	r3, [r3, #12]
 800d970:	4619      	mov	r1, r3
 800d972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d974:	440b      	add	r3, r1
 800d976:	3b01      	subs	r3, #1
 800d978:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d97a:	8989      	ldrh	r1, [r1, #12]
 800d97c:	fbb3 f3f1 	udiv	r3, r3, r1
 800d980:	429a      	cmp	r2, r3
 800d982:	d201      	bcs.n	800d988 <find_volume+0x41c>
 800d984:	230d      	movs	r3, #13
 800d986:	e06a      	b.n	800da5e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d98a:	f04f 32ff 	mov.w	r2, #4294967295
 800d98e:	615a      	str	r2, [r3, #20]
 800d990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d992:	695a      	ldr	r2, [r3, #20]
 800d994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d996:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d99a:	2280      	movs	r2, #128	; 0x80
 800d99c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d99e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d9a2:	2b03      	cmp	r3, #3
 800d9a4:	d149      	bne.n	800da3a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a8:	3334      	adds	r3, #52	; 0x34
 800d9aa:	3330      	adds	r3, #48	; 0x30
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7fe fb05 	bl	800bfbc <ld_word>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d140      	bne.n	800da3a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d9b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	4619      	mov	r1, r3
 800d9be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d9c0:	f7fe fdac 	bl	800c51c <move_window>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d137      	bne.n	800da3a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800d9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d2:	3334      	adds	r3, #52	; 0x34
 800d9d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f7fe faef 	bl	800bfbc <ld_word>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d127      	bne.n	800da3a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ec:	3334      	adds	r3, #52	; 0x34
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7fe fafc 	bl	800bfec <ld_dword>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	4a1c      	ldr	r2, [pc, #112]	; (800da68 <find_volume+0x4fc>)
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d11e      	bne.n	800da3a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9fe:	3334      	adds	r3, #52	; 0x34
 800da00:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800da04:	4618      	mov	r0, r3
 800da06:	f7fe faf1 	bl	800bfec <ld_dword>
 800da0a:	4603      	mov	r3, r0
 800da0c:	4a17      	ldr	r2, [pc, #92]	; (800da6c <find_volume+0x500>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d113      	bne.n	800da3a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800da12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da14:	3334      	adds	r3, #52	; 0x34
 800da16:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fe fae6 	bl	800bfec <ld_dword>
 800da20:	4602      	mov	r2, r0
 800da22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da24:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800da26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da28:	3334      	adds	r3, #52	; 0x34
 800da2a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800da2e:	4618      	mov	r0, r3
 800da30:	f7fe fadc 	bl	800bfec <ld_dword>
 800da34:	4602      	mov	r2, r0
 800da36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da38:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800da3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da3c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800da40:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800da42:	4b0b      	ldr	r3, [pc, #44]	; (800da70 <find_volume+0x504>)
 800da44:	881b      	ldrh	r3, [r3, #0]
 800da46:	3301      	adds	r3, #1
 800da48:	b29a      	uxth	r2, r3
 800da4a:	4b09      	ldr	r3, [pc, #36]	; (800da70 <find_volume+0x504>)
 800da4c:	801a      	strh	r2, [r3, #0]
 800da4e:	4b08      	ldr	r3, [pc, #32]	; (800da70 <find_volume+0x504>)
 800da50:	881a      	ldrh	r2, [r3, #0]
 800da52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da54:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800da56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da58:	f7fe fcf8 	bl	800c44c <clear_lock>
#endif
	return FR_OK;
 800da5c:	2300      	movs	r3, #0
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3758      	adds	r7, #88	; 0x58
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	41615252 	.word	0x41615252
 800da6c:	61417272 	.word	0x61417272
 800da70:	2000210c 	.word	0x2000210c

0800da74 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800da7e:	2309      	movs	r3, #9
 800da80:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d01c      	beq.n	800dac2 <validate+0x4e>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d018      	beq.n	800dac2 <validate+0x4e>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d013      	beq.n	800dac2 <validate+0x4e>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	889a      	ldrh	r2, [r3, #4]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	88db      	ldrh	r3, [r3, #6]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d10c      	bne.n	800dac2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	785b      	ldrb	r3, [r3, #1]
 800daae:	4618      	mov	r0, r3
 800dab0:	f7fe f9e6 	bl	800be80 <disk_status>
 800dab4:	4603      	mov	r3, r0
 800dab6:	f003 0301 	and.w	r3, r3, #1
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d101      	bne.n	800dac2 <validate+0x4e>
			res = FR_OK;
 800dabe:	2300      	movs	r3, #0
 800dac0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800dac2:	7bfb      	ldrb	r3, [r7, #15]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d102      	bne.n	800dace <validate+0x5a>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	e000      	b.n	800dad0 <validate+0x5c>
 800dace:	2300      	movs	r3, #0
 800dad0:	683a      	ldr	r2, [r7, #0]
 800dad2:	6013      	str	r3, [r2, #0]
	return res;
 800dad4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3710      	adds	r7, #16
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}
	...

0800dae0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b088      	sub	sp, #32
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	4613      	mov	r3, r2
 800daec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800daf2:	f107 0310 	add.w	r3, r7, #16
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7ff fc9e 	bl	800d438 <get_ldnumber>
 800dafc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800dafe:	69fb      	ldr	r3, [r7, #28]
 800db00:	2b00      	cmp	r3, #0
 800db02:	da01      	bge.n	800db08 <f_mount+0x28>
 800db04:	230b      	movs	r3, #11
 800db06:	e02b      	b.n	800db60 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800db08:	4a17      	ldr	r2, [pc, #92]	; (800db68 <f_mount+0x88>)
 800db0a:	69fb      	ldr	r3, [r7, #28]
 800db0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db10:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d005      	beq.n	800db24 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800db18:	69b8      	ldr	r0, [r7, #24]
 800db1a:	f7fe fc97 	bl	800c44c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	2200      	movs	r2, #0
 800db22:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d002      	beq.n	800db30 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	2200      	movs	r2, #0
 800db2e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800db30:	68fa      	ldr	r2, [r7, #12]
 800db32:	490d      	ldr	r1, [pc, #52]	; (800db68 <f_mount+0x88>)
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d002      	beq.n	800db46 <f_mount+0x66>
 800db40:	79fb      	ldrb	r3, [r7, #7]
 800db42:	2b01      	cmp	r3, #1
 800db44:	d001      	beq.n	800db4a <f_mount+0x6a>
 800db46:	2300      	movs	r3, #0
 800db48:	e00a      	b.n	800db60 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800db4a:	f107 010c 	add.w	r1, r7, #12
 800db4e:	f107 0308 	add.w	r3, r7, #8
 800db52:	2200      	movs	r2, #0
 800db54:	4618      	mov	r0, r3
 800db56:	f7ff fd09 	bl	800d56c <find_volume>
 800db5a:	4603      	mov	r3, r0
 800db5c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800db5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800db60:	4618      	mov	r0, r3
 800db62:	3720      	adds	r7, #32
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}
 800db68:	20002108 	.word	0x20002108

0800db6c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b098      	sub	sp, #96	; 0x60
 800db70:	af00      	add	r7, sp, #0
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	60b9      	str	r1, [r7, #8]
 800db76:	4613      	mov	r3, r2
 800db78:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d101      	bne.n	800db84 <f_open+0x18>
 800db80:	2309      	movs	r3, #9
 800db82:	e1bb      	b.n	800defc <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800db84:	79fb      	ldrb	r3, [r7, #7]
 800db86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db8a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800db8c:	79fa      	ldrb	r2, [r7, #7]
 800db8e:	f107 0110 	add.w	r1, r7, #16
 800db92:	f107 0308 	add.w	r3, r7, #8
 800db96:	4618      	mov	r0, r3
 800db98:	f7ff fce8 	bl	800d56c <find_volume>
 800db9c:	4603      	mov	r3, r0
 800db9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800dba2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	f040 819f 	bne.w	800deea <f_open+0x37e>
		dj.obj.fs = fs;
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800dbb0:	68ba      	ldr	r2, [r7, #8]
 800dbb2:	f107 0314 	add.w	r3, r7, #20
 800dbb6:	4611      	mov	r1, r2
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7ff fbc7 	bl	800d34c <follow_path>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800dbc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d11a      	bne.n	800dc02 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800dbcc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dbd0:	b25b      	sxtb	r3, r3
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	da03      	bge.n	800dbde <f_open+0x72>
				res = FR_INVALID_NAME;
 800dbd6:	2306      	movs	r3, #6
 800dbd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dbdc:	e011      	b.n	800dc02 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dbde:	79fb      	ldrb	r3, [r7, #7]
 800dbe0:	f023 0301 	bic.w	r3, r3, #1
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	bf14      	ite	ne
 800dbe8:	2301      	movne	r3, #1
 800dbea:	2300      	moveq	r3, #0
 800dbec:	b2db      	uxtb	r3, r3
 800dbee:	461a      	mov	r2, r3
 800dbf0:	f107 0314 	add.w	r3, r7, #20
 800dbf4:	4611      	mov	r1, r2
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7fe fae0 	bl	800c1bc <chk_lock>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dc02:	79fb      	ldrb	r3, [r7, #7]
 800dc04:	f003 031c 	and.w	r3, r3, #28
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d07f      	beq.n	800dd0c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800dc0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d017      	beq.n	800dc44 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dc14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc18:	2b04      	cmp	r3, #4
 800dc1a:	d10e      	bne.n	800dc3a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dc1c:	f7fe fb2a 	bl	800c274 <enq_lock>
 800dc20:	4603      	mov	r3, r0
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d006      	beq.n	800dc34 <f_open+0xc8>
 800dc26:	f107 0314 	add.w	r3, r7, #20
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7ff fa92 	bl	800d154 <dir_register>
 800dc30:	4603      	mov	r3, r0
 800dc32:	e000      	b.n	800dc36 <f_open+0xca>
 800dc34:	2312      	movs	r3, #18
 800dc36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dc3a:	79fb      	ldrb	r3, [r7, #7]
 800dc3c:	f043 0308 	orr.w	r3, r3, #8
 800dc40:	71fb      	strb	r3, [r7, #7]
 800dc42:	e010      	b.n	800dc66 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dc44:	7ebb      	ldrb	r3, [r7, #26]
 800dc46:	f003 0311 	and.w	r3, r3, #17
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d003      	beq.n	800dc56 <f_open+0xea>
					res = FR_DENIED;
 800dc4e:	2307      	movs	r3, #7
 800dc50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dc54:	e007      	b.n	800dc66 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dc56:	79fb      	ldrb	r3, [r7, #7]
 800dc58:	f003 0304 	and.w	r3, r3, #4
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d002      	beq.n	800dc66 <f_open+0xfa>
 800dc60:	2308      	movs	r3, #8
 800dc62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dc66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d168      	bne.n	800dd40 <f_open+0x1d4>
 800dc6e:	79fb      	ldrb	r3, [r7, #7]
 800dc70:	f003 0308 	and.w	r3, r3, #8
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d063      	beq.n	800dd40 <f_open+0x1d4>
				dw = GET_FATTIME();
 800dc78:	f7fa fdbe 	bl	80087f8 <get_fattime>
 800dc7c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800dc7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc80:	330e      	adds	r3, #14
 800dc82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7fe f9ef 	bl	800c068 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dc8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc8c:	3316      	adds	r3, #22
 800dc8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7fe f9e9 	bl	800c068 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800dc96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc98:	330b      	adds	r3, #11
 800dc9a:	2220      	movs	r2, #32
 800dc9c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dca2:	4611      	mov	r1, r2
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7ff f9c1 	bl	800d02c <ld_clust>
 800dcaa:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7ff f9d9 	bl	800d06a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dcb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcba:	331c      	adds	r3, #28
 800dcbc:	2100      	movs	r1, #0
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7fe f9d2 	bl	800c068 <st_dword>
					fs->wflag = 1;
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dcca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d037      	beq.n	800dd40 <f_open+0x1d4>
						dw = fs->winsect;
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcd4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800dcd6:	f107 0314 	add.w	r3, r7, #20
 800dcda:	2200      	movs	r2, #0
 800dcdc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7fe fec9 	bl	800ca76 <remove_chain>
 800dce4:	4603      	mov	r3, r0
 800dce6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800dcea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d126      	bne.n	800dd40 <f_open+0x1d4>
							res = move_window(fs, dw);
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7fe fc10 	bl	800c51c <move_window>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd06:	3a01      	subs	r2, #1
 800dd08:	611a      	str	r2, [r3, #16]
 800dd0a:	e019      	b.n	800dd40 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dd0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d115      	bne.n	800dd40 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dd14:	7ebb      	ldrb	r3, [r7, #26]
 800dd16:	f003 0310 	and.w	r3, r3, #16
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d003      	beq.n	800dd26 <f_open+0x1ba>
					res = FR_NO_FILE;
 800dd1e:	2304      	movs	r3, #4
 800dd20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dd24:	e00c      	b.n	800dd40 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dd26:	79fb      	ldrb	r3, [r7, #7]
 800dd28:	f003 0302 	and.w	r3, r3, #2
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d007      	beq.n	800dd40 <f_open+0x1d4>
 800dd30:	7ebb      	ldrb	r3, [r7, #26]
 800dd32:	f003 0301 	and.w	r3, r3, #1
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d002      	beq.n	800dd40 <f_open+0x1d4>
						res = FR_DENIED;
 800dd3a:	2307      	movs	r3, #7
 800dd3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800dd40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d128      	bne.n	800dd9a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dd48:	79fb      	ldrb	r3, [r7, #7]
 800dd4a:	f003 0308 	and.w	r3, r3, #8
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d003      	beq.n	800dd5a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800dd52:	79fb      	ldrb	r3, [r7, #7]
 800dd54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd58:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800dd62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dd68:	79fb      	ldrb	r3, [r7, #7]
 800dd6a:	f023 0301 	bic.w	r3, r3, #1
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	bf14      	ite	ne
 800dd72:	2301      	movne	r3, #1
 800dd74:	2300      	moveq	r3, #0
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	461a      	mov	r2, r3
 800dd7a:	f107 0314 	add.w	r3, r7, #20
 800dd7e:	4611      	mov	r1, r2
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7fe fa99 	bl	800c2b8 <inc_lock>
 800dd86:	4602      	mov	r2, r0
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	691b      	ldr	r3, [r3, #16]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d102      	bne.n	800dd9a <f_open+0x22e>
 800dd94:	2302      	movs	r3, #2
 800dd96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800dd9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	f040 80a3 	bne.w	800deea <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dda8:	4611      	mov	r1, r2
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7ff f93e 	bl	800d02c <ld_clust>
 800ddb0:	4602      	mov	r2, r0
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ddb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddb8:	331c      	adds	r3, #28
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7fe f916 	bl	800bfec <ld_dword>
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2200      	movs	r2, #0
 800ddca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ddcc:	693a      	ldr	r2, [r7, #16]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ddd2:	693b      	ldr	r3, [r7, #16]
 800ddd4:	88da      	ldrh	r2, [r3, #6]
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	79fa      	ldrb	r2, [r7, #7]
 800ddde:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	2200      	movs	r2, #0
 800dde4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2200      	movs	r2, #0
 800ddea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	3330      	adds	r3, #48	; 0x30
 800ddf6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ddfa:	2100      	movs	r1, #0
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7fe f980 	bl	800c102 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800de02:	79fb      	ldrb	r3, [r7, #7]
 800de04:	f003 0320 	and.w	r3, r3, #32
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d06e      	beq.n	800deea <f_open+0x37e>
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d06a      	beq.n	800deea <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	68da      	ldr	r2, [r3, #12]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	895b      	ldrh	r3, [r3, #10]
 800de20:	461a      	mov	r2, r3
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	899b      	ldrh	r3, [r3, #12]
 800de26:	fb03 f302 	mul.w	r3, r3, r2
 800de2a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	689b      	ldr	r3, [r3, #8]
 800de30:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	68db      	ldr	r3, [r3, #12]
 800de36:	657b      	str	r3, [r7, #84]	; 0x54
 800de38:	e016      	b.n	800de68 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800de3e:	4618      	mov	r0, r3
 800de40:	f7fe fc29 	bl	800c696 <get_fat>
 800de44:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800de46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de48:	2b01      	cmp	r3, #1
 800de4a:	d802      	bhi.n	800de52 <f_open+0x2e6>
 800de4c:	2302      	movs	r3, #2
 800de4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800de52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de58:	d102      	bne.n	800de60 <f_open+0x2f4>
 800de5a:	2301      	movs	r3, #1
 800de5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800de60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800de62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de64:	1ad3      	subs	r3, r2, r3
 800de66:	657b      	str	r3, [r7, #84]	; 0x54
 800de68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d103      	bne.n	800de78 <f_open+0x30c>
 800de70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800de72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de74:	429a      	cmp	r2, r3
 800de76:	d8e0      	bhi.n	800de3a <f_open+0x2ce>
				}
				fp->clust = clst;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800de7c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800de7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de82:	2b00      	cmp	r3, #0
 800de84:	d131      	bne.n	800deea <f_open+0x37e>
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	899b      	ldrh	r3, [r3, #12]
 800de8a:	461a      	mov	r2, r3
 800de8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de8e:	fbb3 f1f2 	udiv	r1, r3, r2
 800de92:	fb02 f201 	mul.w	r2, r2, r1
 800de96:	1a9b      	subs	r3, r3, r2
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d026      	beq.n	800deea <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7fe fbd9 	bl	800c658 <clust2sect>
 800dea6:	6478      	str	r0, [r7, #68]	; 0x44
 800dea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d103      	bne.n	800deb6 <f_open+0x34a>
						res = FR_INT_ERR;
 800deae:	2302      	movs	r3, #2
 800deb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800deb4:	e019      	b.n	800deea <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	899b      	ldrh	r3, [r3, #12]
 800deba:	461a      	mov	r2, r3
 800debc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800debe:	fbb3 f2f2 	udiv	r2, r3, r2
 800dec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dec4:	441a      	add	r2, r3
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	7858      	ldrb	r0, [r3, #1]
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	6a1a      	ldr	r2, [r3, #32]
 800ded8:	2301      	movs	r3, #1
 800deda:	f7fe f811 	bl	800bf00 <disk_read>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d002      	beq.n	800deea <f_open+0x37e>
 800dee4:	2301      	movs	r3, #1
 800dee6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800deea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800deee:	2b00      	cmp	r3, #0
 800def0:	d002      	beq.n	800def8 <f_open+0x38c>
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2200      	movs	r2, #0
 800def6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800def8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800defc:	4618      	mov	r0, r3
 800defe:	3760      	adds	r7, #96	; 0x60
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b08e      	sub	sp, #56	; 0x38
 800df08:	af00      	add	r7, sp, #0
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	60b9      	str	r1, [r7, #8]
 800df0e:	607a      	str	r2, [r7, #4]
 800df10:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	2200      	movs	r2, #0
 800df1a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	f107 0214 	add.w	r2, r7, #20
 800df22:	4611      	mov	r1, r2
 800df24:	4618      	mov	r0, r3
 800df26:	f7ff fda5 	bl	800da74 <validate>
 800df2a:	4603      	mov	r3, r0
 800df2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800df30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df34:	2b00      	cmp	r3, #0
 800df36:	d107      	bne.n	800df48 <f_read+0x44>
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	7d5b      	ldrb	r3, [r3, #21]
 800df3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800df40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df44:	2b00      	cmp	r3, #0
 800df46:	d002      	beq.n	800df4e <f_read+0x4a>
 800df48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df4c:	e135      	b.n	800e1ba <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	7d1b      	ldrb	r3, [r3, #20]
 800df52:	f003 0301 	and.w	r3, r3, #1
 800df56:	2b00      	cmp	r3, #0
 800df58:	d101      	bne.n	800df5e <f_read+0x5a>
 800df5a:	2307      	movs	r3, #7
 800df5c:	e12d      	b.n	800e1ba <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	68da      	ldr	r2, [r3, #12]
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	699b      	ldr	r3, [r3, #24]
 800df66:	1ad3      	subs	r3, r2, r3
 800df68:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800df6a:	687a      	ldr	r2, [r7, #4]
 800df6c:	6a3b      	ldr	r3, [r7, #32]
 800df6e:	429a      	cmp	r2, r3
 800df70:	f240 811e 	bls.w	800e1b0 <f_read+0x2ac>
 800df74:	6a3b      	ldr	r3, [r7, #32]
 800df76:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800df78:	e11a      	b.n	800e1b0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	699b      	ldr	r3, [r3, #24]
 800df7e:	697a      	ldr	r2, [r7, #20]
 800df80:	8992      	ldrh	r2, [r2, #12]
 800df82:	fbb3 f1f2 	udiv	r1, r3, r2
 800df86:	fb02 f201 	mul.w	r2, r2, r1
 800df8a:	1a9b      	subs	r3, r3, r2
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	f040 80d5 	bne.w	800e13c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	699b      	ldr	r3, [r3, #24]
 800df96:	697a      	ldr	r2, [r7, #20]
 800df98:	8992      	ldrh	r2, [r2, #12]
 800df9a:	fbb3 f3f2 	udiv	r3, r3, r2
 800df9e:	697a      	ldr	r2, [r7, #20]
 800dfa0:	8952      	ldrh	r2, [r2, #10]
 800dfa2:	3a01      	subs	r2, #1
 800dfa4:	4013      	ands	r3, r2
 800dfa6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d12f      	bne.n	800e00e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	699b      	ldr	r3, [r3, #24]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d103      	bne.n	800dfbe <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	689b      	ldr	r3, [r3, #8]
 800dfba:	633b      	str	r3, [r7, #48]	; 0x30
 800dfbc:	e013      	b.n	800dfe6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d007      	beq.n	800dfd6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	699b      	ldr	r3, [r3, #24]
 800dfca:	4619      	mov	r1, r3
 800dfcc:	68f8      	ldr	r0, [r7, #12]
 800dfce:	f7fe fe4f 	bl	800cc70 <clmt_clust>
 800dfd2:	6338      	str	r0, [r7, #48]	; 0x30
 800dfd4:	e007      	b.n	800dfe6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800dfd6:	68fa      	ldr	r2, [r7, #12]
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	69db      	ldr	r3, [r3, #28]
 800dfdc:	4619      	mov	r1, r3
 800dfde:	4610      	mov	r0, r2
 800dfe0:	f7fe fb59 	bl	800c696 <get_fat>
 800dfe4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800dfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe8:	2b01      	cmp	r3, #1
 800dfea:	d804      	bhi.n	800dff6 <f_read+0xf2>
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	2202      	movs	r2, #2
 800dff0:	755a      	strb	r2, [r3, #21]
 800dff2:	2302      	movs	r3, #2
 800dff4:	e0e1      	b.n	800e1ba <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dffc:	d104      	bne.n	800e008 <f_read+0x104>
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2201      	movs	r2, #1
 800e002:	755a      	strb	r2, [r3, #21]
 800e004:	2301      	movs	r3, #1
 800e006:	e0d8      	b.n	800e1ba <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e00c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e00e:	697a      	ldr	r2, [r7, #20]
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	69db      	ldr	r3, [r3, #28]
 800e014:	4619      	mov	r1, r3
 800e016:	4610      	mov	r0, r2
 800e018:	f7fe fb1e 	bl	800c658 <clust2sect>
 800e01c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e01e:	69bb      	ldr	r3, [r7, #24]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d104      	bne.n	800e02e <f_read+0x12a>
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	2202      	movs	r2, #2
 800e028:	755a      	strb	r2, [r3, #21]
 800e02a:	2302      	movs	r3, #2
 800e02c:	e0c5      	b.n	800e1ba <f_read+0x2b6>
			sect += csect;
 800e02e:	69ba      	ldr	r2, [r7, #24]
 800e030:	69fb      	ldr	r3, [r7, #28]
 800e032:	4413      	add	r3, r2
 800e034:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	899b      	ldrh	r3, [r3, #12]
 800e03a:	461a      	mov	r2, r3
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e042:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e046:	2b00      	cmp	r3, #0
 800e048:	d041      	beq.n	800e0ce <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e04a:	69fa      	ldr	r2, [r7, #28]
 800e04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04e:	4413      	add	r3, r2
 800e050:	697a      	ldr	r2, [r7, #20]
 800e052:	8952      	ldrh	r2, [r2, #10]
 800e054:	4293      	cmp	r3, r2
 800e056:	d905      	bls.n	800e064 <f_read+0x160>
					cc = fs->csize - csect;
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	895b      	ldrh	r3, [r3, #10]
 800e05c:	461a      	mov	r2, r3
 800e05e:	69fb      	ldr	r3, [r7, #28]
 800e060:	1ad3      	subs	r3, r2, r3
 800e062:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	7858      	ldrb	r0, [r3, #1]
 800e068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06a:	69ba      	ldr	r2, [r7, #24]
 800e06c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e06e:	f7fd ff47 	bl	800bf00 <disk_read>
 800e072:	4603      	mov	r3, r0
 800e074:	2b00      	cmp	r3, #0
 800e076:	d004      	beq.n	800e082 <f_read+0x17e>
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2201      	movs	r2, #1
 800e07c:	755a      	strb	r2, [r3, #21]
 800e07e:	2301      	movs	r3, #1
 800e080:	e09b      	b.n	800e1ba <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	7d1b      	ldrb	r3, [r3, #20]
 800e086:	b25b      	sxtb	r3, r3
 800e088:	2b00      	cmp	r3, #0
 800e08a:	da18      	bge.n	800e0be <f_read+0x1ba>
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	6a1a      	ldr	r2, [r3, #32]
 800e090:	69bb      	ldr	r3, [r7, #24]
 800e092:	1ad3      	subs	r3, r2, r3
 800e094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e096:	429a      	cmp	r2, r3
 800e098:	d911      	bls.n	800e0be <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	6a1a      	ldr	r2, [r3, #32]
 800e09e:	69bb      	ldr	r3, [r7, #24]
 800e0a0:	1ad3      	subs	r3, r2, r3
 800e0a2:	697a      	ldr	r2, [r7, #20]
 800e0a4:	8992      	ldrh	r2, [r2, #12]
 800e0a6:	fb02 f303 	mul.w	r3, r2, r3
 800e0aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0ac:	18d0      	adds	r0, r2, r3
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	899b      	ldrh	r3, [r3, #12]
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	f7fe f801 	bl	800c0c0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	899b      	ldrh	r3, [r3, #12]
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c6:	fb02 f303 	mul.w	r3, r2, r3
 800e0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e0cc:	e05c      	b.n	800e188 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	6a1b      	ldr	r3, [r3, #32]
 800e0d2:	69ba      	ldr	r2, [r7, #24]
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d02e      	beq.n	800e136 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	7d1b      	ldrb	r3, [r3, #20]
 800e0dc:	b25b      	sxtb	r3, r3
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	da18      	bge.n	800e114 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	7858      	ldrb	r0, [r3, #1]
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	6a1a      	ldr	r2, [r3, #32]
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	f7fd ff25 	bl	800bf40 <disk_write>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d004      	beq.n	800e106 <f_read+0x202>
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	2201      	movs	r2, #1
 800e100:	755a      	strb	r2, [r3, #21]
 800e102:	2301      	movs	r3, #1
 800e104:	e059      	b.n	800e1ba <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	7d1b      	ldrb	r3, [r3, #20]
 800e10a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e10e:	b2da      	uxtb	r2, r3
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	7858      	ldrb	r0, [r3, #1]
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e11e:	2301      	movs	r3, #1
 800e120:	69ba      	ldr	r2, [r7, #24]
 800e122:	f7fd feed 	bl	800bf00 <disk_read>
 800e126:	4603      	mov	r3, r0
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d004      	beq.n	800e136 <f_read+0x232>
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2201      	movs	r2, #1
 800e130:	755a      	strb	r2, [r3, #21]
 800e132:	2301      	movs	r3, #1
 800e134:	e041      	b.n	800e1ba <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	69ba      	ldr	r2, [r7, #24]
 800e13a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	899b      	ldrh	r3, [r3, #12]
 800e140:	4618      	mov	r0, r3
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	699b      	ldr	r3, [r3, #24]
 800e146:	697a      	ldr	r2, [r7, #20]
 800e148:	8992      	ldrh	r2, [r2, #12]
 800e14a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e14e:	fb02 f201 	mul.w	r2, r2, r1
 800e152:	1a9b      	subs	r3, r3, r2
 800e154:	1ac3      	subs	r3, r0, r3
 800e156:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	429a      	cmp	r2, r3
 800e15e:	d901      	bls.n	800e164 <f_read+0x260>
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	699b      	ldr	r3, [r3, #24]
 800e16e:	697a      	ldr	r2, [r7, #20]
 800e170:	8992      	ldrh	r2, [r2, #12]
 800e172:	fbb3 f0f2 	udiv	r0, r3, r2
 800e176:	fb02 f200 	mul.w	r2, r2, r0
 800e17a:	1a9b      	subs	r3, r3, r2
 800e17c:	440b      	add	r3, r1
 800e17e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e180:	4619      	mov	r1, r3
 800e182:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e184:	f7fd ff9c 	bl	800c0c0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18c:	4413      	add	r3, r2
 800e18e:	627b      	str	r3, [r7, #36]	; 0x24
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	699a      	ldr	r2, [r3, #24]
 800e194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e196:	441a      	add	r2, r3
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	619a      	str	r2, [r3, #24]
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	681a      	ldr	r2, [r3, #0]
 800e1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a2:	441a      	add	r2, r3
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	601a      	str	r2, [r3, #0]
 800e1a8:	687a      	ldr	r2, [r7, #4]
 800e1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ac:	1ad3      	subs	r3, r2, r3
 800e1ae:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	f47f aee1 	bne.w	800df7a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e1b8:	2300      	movs	r3, #0
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3738      	adds	r7, #56	; 0x38
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}

0800e1c2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e1c2:	b580      	push	{r7, lr}
 800e1c4:	b086      	sub	sp, #24
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f107 0208 	add.w	r2, r7, #8
 800e1d0:	4611      	mov	r1, r2
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7ff fc4e 	bl	800da74 <validate>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e1dc:	7dfb      	ldrb	r3, [r7, #23]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d168      	bne.n	800e2b4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	7d1b      	ldrb	r3, [r3, #20]
 800e1e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d062      	beq.n	800e2b4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	7d1b      	ldrb	r3, [r3, #20]
 800e1f2:	b25b      	sxtb	r3, r3
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	da15      	bge.n	800e224 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	7858      	ldrb	r0, [r3, #1]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6a1a      	ldr	r2, [r3, #32]
 800e206:	2301      	movs	r3, #1
 800e208:	f7fd fe9a 	bl	800bf40 <disk_write>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d001      	beq.n	800e216 <f_sync+0x54>
 800e212:	2301      	movs	r3, #1
 800e214:	e04f      	b.n	800e2b6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	7d1b      	ldrb	r3, [r3, #20]
 800e21a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e21e:	b2da      	uxtb	r2, r3
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e224:	f7fa fae8 	bl	80087f8 <get_fattime>
 800e228:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e22a:	68ba      	ldr	r2, [r7, #8]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e230:	4619      	mov	r1, r3
 800e232:	4610      	mov	r0, r2
 800e234:	f7fe f972 	bl	800c51c <move_window>
 800e238:	4603      	mov	r3, r0
 800e23a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e23c:	7dfb      	ldrb	r3, [r7, #23]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d138      	bne.n	800e2b4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e246:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	330b      	adds	r3, #11
 800e24c:	781a      	ldrb	r2, [r3, #0]
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	330b      	adds	r3, #11
 800e252:	f042 0220 	orr.w	r2, r2, #32
 800e256:	b2d2      	uxtb	r2, r2
 800e258:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6818      	ldr	r0, [r3, #0]
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	689b      	ldr	r3, [r3, #8]
 800e262:	461a      	mov	r2, r3
 800e264:	68f9      	ldr	r1, [r7, #12]
 800e266:	f7fe ff00 	bl	800d06a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	f103 021c 	add.w	r2, r3, #28
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	68db      	ldr	r3, [r3, #12]
 800e274:	4619      	mov	r1, r3
 800e276:	4610      	mov	r0, r2
 800e278:	f7fd fef6 	bl	800c068 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	3316      	adds	r3, #22
 800e280:	6939      	ldr	r1, [r7, #16]
 800e282:	4618      	mov	r0, r3
 800e284:	f7fd fef0 	bl	800c068 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	3312      	adds	r3, #18
 800e28c:	2100      	movs	r1, #0
 800e28e:	4618      	mov	r0, r3
 800e290:	f7fd fecf 	bl	800c032 <st_word>
					fs->wflag = 1;
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	2201      	movs	r2, #1
 800e298:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	4618      	mov	r0, r3
 800e29e:	f7fe f96b 	bl	800c578 <sync_fs>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	7d1b      	ldrb	r3, [r3, #20]
 800e2aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2ae:	b2da      	uxtb	r2, r3
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e2b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3718      	adds	r7, #24
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}

0800e2be <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e2be:	b580      	push	{r7, lr}
 800e2c0:	b084      	sub	sp, #16
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f7ff ff7b 	bl	800e1c2 <f_sync>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e2d0:	7bfb      	ldrb	r3, [r7, #15]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d118      	bne.n	800e308 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f107 0208 	add.w	r2, r7, #8
 800e2dc:	4611      	mov	r1, r2
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7ff fbc8 	bl	800da74 <validate>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e2e8:	7bfb      	ldrb	r3, [r7, #15]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d10c      	bne.n	800e308 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	691b      	ldr	r3, [r3, #16]
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f7fe f86e 	bl	800c3d4 <dec_lock>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e2fc:	7bfb      	ldrb	r3, [r7, #15]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d102      	bne.n	800e308 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2200      	movs	r2, #0
 800e306:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e308:	7bfb      	ldrb	r3, [r7, #15]
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3710      	adds	r7, #16
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}

0800e312 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e312:	b580      	push	{r7, lr}
 800e314:	b090      	sub	sp, #64	; 0x40
 800e316:	af00      	add	r7, sp, #0
 800e318:	6078      	str	r0, [r7, #4]
 800e31a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f107 0208 	add.w	r2, r7, #8
 800e322:	4611      	mov	r1, r2
 800e324:	4618      	mov	r0, r3
 800e326:	f7ff fba5 	bl	800da74 <validate>
 800e32a:	4603      	mov	r3, r0
 800e32c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e330:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e334:	2b00      	cmp	r3, #0
 800e336:	d103      	bne.n	800e340 <f_lseek+0x2e>
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	7d5b      	ldrb	r3, [r3, #21]
 800e33c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e340:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e344:	2b00      	cmp	r3, #0
 800e346:	d002      	beq.n	800e34e <f_lseek+0x3c>
 800e348:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e34c:	e201      	b.n	800e752 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e352:	2b00      	cmp	r3, #0
 800e354:	f000 80d9 	beq.w	800e50a <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e35e:	d15a      	bne.n	800e416 <f_lseek+0x104>
			tbl = fp->cltbl;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e364:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e368:	1d1a      	adds	r2, r3, #4
 800e36a:	627a      	str	r2, [r7, #36]	; 0x24
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	617b      	str	r3, [r7, #20]
 800e370:	2302      	movs	r3, #2
 800e372:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	689b      	ldr	r3, [r3, #8]
 800e378:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800e37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d03a      	beq.n	800e3f6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e382:	613b      	str	r3, [r7, #16]
 800e384:	2300      	movs	r3, #0
 800e386:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e38a:	3302      	adds	r3, #2
 800e38c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800e38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e390:	60fb      	str	r3, [r7, #12]
 800e392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e394:	3301      	adds	r3, #1
 800e396:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7fe f97a 	bl	800c696 <get_fat>
 800e3a2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	d804      	bhi.n	800e3b4 <f_lseek+0xa2>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2202      	movs	r2, #2
 800e3ae:	755a      	strb	r2, [r3, #21]
 800e3b0:	2302      	movs	r3, #2
 800e3b2:	e1ce      	b.n	800e752 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ba:	d104      	bne.n	800e3c6 <f_lseek+0xb4>
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2201      	movs	r2, #1
 800e3c0:	755a      	strb	r2, [r3, #21]
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	e1c5      	b.n	800e752 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	d0de      	beq.n	800e38e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e3d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d809      	bhi.n	800e3ec <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3da:	1d1a      	adds	r2, r3, #4
 800e3dc:	627a      	str	r2, [r7, #36]	; 0x24
 800e3de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3e0:	601a      	str	r2, [r3, #0]
 800e3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e4:	1d1a      	adds	r2, r3, #4
 800e3e6:	627a      	str	r2, [r7, #36]	; 0x24
 800e3e8:	693a      	ldr	r2, [r7, #16]
 800e3ea:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	699b      	ldr	r3, [r3, #24]
 800e3f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d3c4      	bcc.n	800e380 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3fc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e3fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e400:	697b      	ldr	r3, [r7, #20]
 800e402:	429a      	cmp	r2, r3
 800e404:	d803      	bhi.n	800e40e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e408:	2200      	movs	r2, #0
 800e40a:	601a      	str	r2, [r3, #0]
 800e40c:	e19f      	b.n	800e74e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e40e:	2311      	movs	r3, #17
 800e410:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e414:	e19b      	b.n	800e74e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	68db      	ldr	r3, [r3, #12]
 800e41a:	683a      	ldr	r2, [r7, #0]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d902      	bls.n	800e426 <f_lseek+0x114>
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	68db      	ldr	r3, [r3, #12]
 800e424:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	683a      	ldr	r2, [r7, #0]
 800e42a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	f000 818d 	beq.w	800e74e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	3b01      	subs	r3, #1
 800e438:	4619      	mov	r1, r3
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f7fe fc18 	bl	800cc70 <clmt_clust>
 800e440:	4602      	mov	r2, r0
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e446:	68ba      	ldr	r2, [r7, #8]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	69db      	ldr	r3, [r3, #28]
 800e44c:	4619      	mov	r1, r3
 800e44e:	4610      	mov	r0, r2
 800e450:	f7fe f902 	bl	800c658 <clust2sect>
 800e454:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e456:	69bb      	ldr	r3, [r7, #24]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d104      	bne.n	800e466 <f_lseek+0x154>
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2202      	movs	r2, #2
 800e460:	755a      	strb	r2, [r3, #21]
 800e462:	2302      	movs	r3, #2
 800e464:	e175      	b.n	800e752 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	3b01      	subs	r3, #1
 800e46a:	68ba      	ldr	r2, [r7, #8]
 800e46c:	8992      	ldrh	r2, [r2, #12]
 800e46e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e472:	68ba      	ldr	r2, [r7, #8]
 800e474:	8952      	ldrh	r2, [r2, #10]
 800e476:	3a01      	subs	r2, #1
 800e478:	4013      	ands	r3, r2
 800e47a:	69ba      	ldr	r2, [r7, #24]
 800e47c:	4413      	add	r3, r2
 800e47e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	699b      	ldr	r3, [r3, #24]
 800e484:	68ba      	ldr	r2, [r7, #8]
 800e486:	8992      	ldrh	r2, [r2, #12]
 800e488:	fbb3 f1f2 	udiv	r1, r3, r2
 800e48c:	fb02 f201 	mul.w	r2, r2, r1
 800e490:	1a9b      	subs	r3, r3, r2
 800e492:	2b00      	cmp	r3, #0
 800e494:	f000 815b 	beq.w	800e74e <f_lseek+0x43c>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6a1b      	ldr	r3, [r3, #32]
 800e49c:	69ba      	ldr	r2, [r7, #24]
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	f000 8155 	beq.w	800e74e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	7d1b      	ldrb	r3, [r3, #20]
 800e4a8:	b25b      	sxtb	r3, r3
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	da18      	bge.n	800e4e0 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	7858      	ldrb	r0, [r3, #1]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6a1a      	ldr	r2, [r3, #32]
 800e4bc:	2301      	movs	r3, #1
 800e4be:	f7fd fd3f 	bl	800bf40 <disk_write>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d004      	beq.n	800e4d2 <f_lseek+0x1c0>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	755a      	strb	r2, [r3, #21]
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	e13f      	b.n	800e752 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	7d1b      	ldrb	r3, [r3, #20]
 800e4d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4da:	b2da      	uxtb	r2, r3
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	7858      	ldrb	r0, [r3, #1]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	69ba      	ldr	r2, [r7, #24]
 800e4ee:	f7fd fd07 	bl	800bf00 <disk_read>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d004      	beq.n	800e502 <f_lseek+0x1f0>
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	755a      	strb	r2, [r3, #21]
 800e4fe:	2301      	movs	r3, #1
 800e500:	e127      	b.n	800e752 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	69ba      	ldr	r2, [r7, #24]
 800e506:	621a      	str	r2, [r3, #32]
 800e508:	e121      	b.n	800e74e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	68db      	ldr	r3, [r3, #12]
 800e50e:	683a      	ldr	r2, [r7, #0]
 800e510:	429a      	cmp	r2, r3
 800e512:	d908      	bls.n	800e526 <f_lseek+0x214>
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	7d1b      	ldrb	r3, [r3, #20]
 800e518:	f003 0302 	and.w	r3, r3, #2
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d102      	bne.n	800e526 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	68db      	ldr	r3, [r3, #12]
 800e524:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	699b      	ldr	r3, [r3, #24]
 800e52a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e52c:	2300      	movs	r3, #0
 800e52e:	637b      	str	r3, [r7, #52]	; 0x34
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e534:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	f000 80b5 	beq.w	800e6a8 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	895b      	ldrh	r3, [r3, #10]
 800e542:	461a      	mov	r2, r3
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	899b      	ldrh	r3, [r3, #12]
 800e548:	fb03 f302 	mul.w	r3, r3, r2
 800e54c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e54e:	6a3b      	ldr	r3, [r7, #32]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d01b      	beq.n	800e58c <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	1e5a      	subs	r2, r3, #1
 800e558:	69fb      	ldr	r3, [r7, #28]
 800e55a:	fbb2 f2f3 	udiv	r2, r2, r3
 800e55e:	6a3b      	ldr	r3, [r7, #32]
 800e560:	1e59      	subs	r1, r3, #1
 800e562:	69fb      	ldr	r3, [r7, #28]
 800e564:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e568:	429a      	cmp	r2, r3
 800e56a:	d30f      	bcc.n	800e58c <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e56c:	6a3b      	ldr	r3, [r7, #32]
 800e56e:	1e5a      	subs	r2, r3, #1
 800e570:	69fb      	ldr	r3, [r7, #28]
 800e572:	425b      	negs	r3, r3
 800e574:	401a      	ands	r2, r3
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	699b      	ldr	r3, [r3, #24]
 800e57e:	683a      	ldr	r2, [r7, #0]
 800e580:	1ad3      	subs	r3, r2, r3
 800e582:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	69db      	ldr	r3, [r3, #28]
 800e588:	63bb      	str	r3, [r7, #56]	; 0x38
 800e58a:	e022      	b.n	800e5d2 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	689b      	ldr	r3, [r3, #8]
 800e590:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e594:	2b00      	cmp	r3, #0
 800e596:	d119      	bne.n	800e5cc <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2100      	movs	r1, #0
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7fe facf 	bl	800cb40 <create_chain>
 800e5a2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a6:	2b01      	cmp	r3, #1
 800e5a8:	d104      	bne.n	800e5b4 <f_lseek+0x2a2>
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2202      	movs	r2, #2
 800e5ae:	755a      	strb	r2, [r3, #21]
 800e5b0:	2302      	movs	r3, #2
 800e5b2:	e0ce      	b.n	800e752 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5ba:	d104      	bne.n	800e5c6 <f_lseek+0x2b4>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2201      	movs	r2, #1
 800e5c0:	755a      	strb	r2, [r3, #21]
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	e0c5      	b.n	800e752 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5ca:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5d0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d067      	beq.n	800e6a8 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800e5d8:	e03a      	b.n	800e650 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800e5da:	683a      	ldr	r2, [r7, #0]
 800e5dc:	69fb      	ldr	r3, [r7, #28]
 800e5de:	1ad3      	subs	r3, r2, r3
 800e5e0:	603b      	str	r3, [r7, #0]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	699a      	ldr	r2, [r3, #24]
 800e5e6:	69fb      	ldr	r3, [r7, #28]
 800e5e8:	441a      	add	r2, r3
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	7d1b      	ldrb	r3, [r3, #20]
 800e5f2:	f003 0302 	and.w	r3, r3, #2
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d00b      	beq.n	800e612 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5fe:	4618      	mov	r0, r3
 800e600:	f7fe fa9e 	bl	800cb40 <create_chain>
 800e604:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d108      	bne.n	800e61e <f_lseek+0x30c>
							ofs = 0; break;
 800e60c:	2300      	movs	r3, #0
 800e60e:	603b      	str	r3, [r7, #0]
 800e610:	e022      	b.n	800e658 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e616:	4618      	mov	r0, r3
 800e618:	f7fe f83d 	bl	800c696 <get_fat>
 800e61c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e620:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e624:	d104      	bne.n	800e630 <f_lseek+0x31e>
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2201      	movs	r2, #1
 800e62a:	755a      	strb	r2, [r3, #21]
 800e62c:	2301      	movs	r3, #1
 800e62e:	e090      	b.n	800e752 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e632:	2b01      	cmp	r3, #1
 800e634:	d904      	bls.n	800e640 <f_lseek+0x32e>
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	699b      	ldr	r3, [r3, #24]
 800e63a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d304      	bcc.n	800e64a <f_lseek+0x338>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2202      	movs	r2, #2
 800e644:	755a      	strb	r2, [r3, #21]
 800e646:	2302      	movs	r3, #2
 800e648:	e083      	b.n	800e752 <f_lseek+0x440>
					fp->clust = clst;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e64e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e650:	683a      	ldr	r2, [r7, #0]
 800e652:	69fb      	ldr	r3, [r7, #28]
 800e654:	429a      	cmp	r2, r3
 800e656:	d8c0      	bhi.n	800e5da <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	699a      	ldr	r2, [r3, #24]
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	441a      	add	r2, r3
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	899b      	ldrh	r3, [r3, #12]
 800e668:	461a      	mov	r2, r3
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e670:	fb02 f201 	mul.w	r2, r2, r1
 800e674:	1a9b      	subs	r3, r3, r2
 800e676:	2b00      	cmp	r3, #0
 800e678:	d016      	beq.n	800e6a8 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e67e:	4618      	mov	r0, r3
 800e680:	f7fd ffea 	bl	800c658 <clust2sect>
 800e684:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d104      	bne.n	800e696 <f_lseek+0x384>
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2202      	movs	r2, #2
 800e690:	755a      	strb	r2, [r3, #21]
 800e692:	2302      	movs	r3, #2
 800e694:	e05d      	b.n	800e752 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	899b      	ldrh	r3, [r3, #12]
 800e69a:	461a      	mov	r2, r3
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e6a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6a4:	4413      	add	r3, r2
 800e6a6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	699a      	ldr	r2, [r3, #24]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	68db      	ldr	r3, [r3, #12]
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d90a      	bls.n	800e6ca <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	699a      	ldr	r2, [r3, #24]
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	7d1b      	ldrb	r3, [r3, #20]
 800e6c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6c4:	b2da      	uxtb	r2, r3
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	699b      	ldr	r3, [r3, #24]
 800e6ce:	68ba      	ldr	r2, [r7, #8]
 800e6d0:	8992      	ldrh	r2, [r2, #12]
 800e6d2:	fbb3 f1f2 	udiv	r1, r3, r2
 800e6d6:	fb02 f201 	mul.w	r2, r2, r1
 800e6da:	1a9b      	subs	r3, r3, r2
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d036      	beq.n	800e74e <f_lseek+0x43c>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6a1b      	ldr	r3, [r3, #32]
 800e6e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	d031      	beq.n	800e74e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	7d1b      	ldrb	r3, [r3, #20]
 800e6ee:	b25b      	sxtb	r3, r3
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	da18      	bge.n	800e726 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	7858      	ldrb	r0, [r3, #1]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6a1a      	ldr	r2, [r3, #32]
 800e702:	2301      	movs	r3, #1
 800e704:	f7fd fc1c 	bl	800bf40 <disk_write>
 800e708:	4603      	mov	r3, r0
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d004      	beq.n	800e718 <f_lseek+0x406>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2201      	movs	r2, #1
 800e712:	755a      	strb	r2, [r3, #21]
 800e714:	2301      	movs	r3, #1
 800e716:	e01c      	b.n	800e752 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	7d1b      	ldrb	r3, [r3, #20]
 800e71c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e720:	b2da      	uxtb	r2, r3
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	7858      	ldrb	r0, [r3, #1]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e730:	2301      	movs	r3, #1
 800e732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e734:	f7fd fbe4 	bl	800bf00 <disk_read>
 800e738:	4603      	mov	r3, r0
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d004      	beq.n	800e748 <f_lseek+0x436>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2201      	movs	r2, #1
 800e742:	755a      	strb	r2, [r3, #21]
 800e744:	2301      	movs	r3, #1
 800e746:	e004      	b.n	800e752 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e74c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e74e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e752:	4618      	mov	r0, r3
 800e754:	3740      	adds	r7, #64	; 0x40
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
	...

0800e75c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e75c:	b480      	push	{r7}
 800e75e:	b087      	sub	sp, #28
 800e760:	af00      	add	r7, sp, #0
 800e762:	60f8      	str	r0, [r7, #12]
 800e764:	60b9      	str	r1, [r7, #8]
 800e766:	4613      	mov	r3, r2
 800e768:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e76a:	2301      	movs	r3, #1
 800e76c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e76e:	2300      	movs	r3, #0
 800e770:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e772:	4b1f      	ldr	r3, [pc, #124]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e774:	7a5b      	ldrb	r3, [r3, #9]
 800e776:	b2db      	uxtb	r3, r3
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d131      	bne.n	800e7e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e77c:	4b1c      	ldr	r3, [pc, #112]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e77e:	7a5b      	ldrb	r3, [r3, #9]
 800e780:	b2db      	uxtb	r3, r3
 800e782:	461a      	mov	r2, r3
 800e784:	4b1a      	ldr	r3, [pc, #104]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e786:	2100      	movs	r1, #0
 800e788:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e78a:	4b19      	ldr	r3, [pc, #100]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e78c:	7a5b      	ldrb	r3, [r3, #9]
 800e78e:	b2db      	uxtb	r3, r3
 800e790:	4a17      	ldr	r2, [pc, #92]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e792:	009b      	lsls	r3, r3, #2
 800e794:	4413      	add	r3, r2
 800e796:	68fa      	ldr	r2, [r7, #12]
 800e798:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e79a:	4b15      	ldr	r3, [pc, #84]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e79c:	7a5b      	ldrb	r3, [r3, #9]
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	461a      	mov	r2, r3
 800e7a2:	4b13      	ldr	r3, [pc, #76]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e7a4:	4413      	add	r3, r2
 800e7a6:	79fa      	ldrb	r2, [r7, #7]
 800e7a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e7aa:	4b11      	ldr	r3, [pc, #68]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e7ac:	7a5b      	ldrb	r3, [r3, #9]
 800e7ae:	b2db      	uxtb	r3, r3
 800e7b0:	1c5a      	adds	r2, r3, #1
 800e7b2:	b2d1      	uxtb	r1, r2
 800e7b4:	4a0e      	ldr	r2, [pc, #56]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e7b6:	7251      	strb	r1, [r2, #9]
 800e7b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e7ba:	7dbb      	ldrb	r3, [r7, #22]
 800e7bc:	3330      	adds	r3, #48	; 0x30
 800e7be:	b2da      	uxtb	r2, r3
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	3301      	adds	r3, #1
 800e7c8:	223a      	movs	r2, #58	; 0x3a
 800e7ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	3302      	adds	r3, #2
 800e7d0:	222f      	movs	r2, #47	; 0x2f
 800e7d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	3303      	adds	r3, #3
 800e7d8:	2200      	movs	r2, #0
 800e7da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e7e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	371c      	adds	r7, #28
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ec:	4770      	bx	lr
 800e7ee:	bf00      	nop
 800e7f0:	20002130 	.word	0x20002130

0800e7f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b082      	sub	sp, #8
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
 800e7fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e7fe:	2200      	movs	r2, #0
 800e800:	6839      	ldr	r1, [r7, #0]
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f7ff ffaa 	bl	800e75c <FATFS_LinkDriverEx>
 800e808:	4603      	mov	r3, r0
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3708      	adds	r7, #8
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}
	...

0800e814 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e818:	2201      	movs	r2, #1
 800e81a:	490e      	ldr	r1, [pc, #56]	; (800e854 <MX_USB_HOST_Init+0x40>)
 800e81c:	480e      	ldr	r0, [pc, #56]	; (800e858 <MX_USB_HOST_Init+0x44>)
 800e81e:	f7fb fe0d 	bl	800a43c <USBH_Init>
 800e822:	4603      	mov	r3, r0
 800e824:	2b00      	cmp	r3, #0
 800e826:	d001      	beq.n	800e82c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e828:	f7f2 fb02 	bl	8000e30 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800e82c:	490b      	ldr	r1, [pc, #44]	; (800e85c <MX_USB_HOST_Init+0x48>)
 800e82e:	480a      	ldr	r0, [pc, #40]	; (800e858 <MX_USB_HOST_Init+0x44>)
 800e830:	f7fb fea0 	bl	800a574 <USBH_RegisterClass>
 800e834:	4603      	mov	r3, r0
 800e836:	2b00      	cmp	r3, #0
 800e838:	d001      	beq.n	800e83e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e83a:	f7f2 faf9 	bl	8000e30 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e83e:	4806      	ldr	r0, [pc, #24]	; (800e858 <MX_USB_HOST_Init+0x44>)
 800e840:	f7fb ff86 	bl	800a750 <USBH_Start>
 800e844:	4603      	mov	r3, r0
 800e846:	2b00      	cmp	r3, #0
 800e848:	d001      	beq.n	800e84e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e84a:	f7f2 faf1 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e84e:	bf00      	nop
 800e850:	bd80      	pop	{r7, pc}
 800e852:	bf00      	nop
 800e854:	0800e875 	.word	0x0800e875
 800e858:	20006488 	.word	0x20006488
 800e85c:	20000024 	.word	0x20000024

0800e860 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800e864:	4802      	ldr	r0, [pc, #8]	; (800e870 <MX_USB_HOST_Process+0x10>)
 800e866:	f7fb ff83 	bl	800a770 <USBH_Process>
}
 800e86a:	bf00      	nop
 800e86c:	bd80      	pop	{r7, pc}
 800e86e:	bf00      	nop
 800e870:	20006488 	.word	0x20006488

0800e874 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e874:	b480      	push	{r7}
 800e876:	b083      	sub	sp, #12
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	460b      	mov	r3, r1
 800e87e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e880:	78fb      	ldrb	r3, [r7, #3]
 800e882:	3b01      	subs	r3, #1
 800e884:	2b04      	cmp	r3, #4
 800e886:	d819      	bhi.n	800e8bc <USBH_UserProcess+0x48>
 800e888:	a201      	add	r2, pc, #4	; (adr r2, 800e890 <USBH_UserProcess+0x1c>)
 800e88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e88e:	bf00      	nop
 800e890:	0800e8bd 	.word	0x0800e8bd
 800e894:	0800e8ad 	.word	0x0800e8ad
 800e898:	0800e8bd 	.word	0x0800e8bd
 800e89c:	0800e8b5 	.word	0x0800e8b5
 800e8a0:	0800e8a5 	.word	0x0800e8a5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e8a4:	4b09      	ldr	r3, [pc, #36]	; (800e8cc <USBH_UserProcess+0x58>)
 800e8a6:	2203      	movs	r2, #3
 800e8a8:	701a      	strb	r2, [r3, #0]
  break;
 800e8aa:	e008      	b.n	800e8be <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e8ac:	4b07      	ldr	r3, [pc, #28]	; (800e8cc <USBH_UserProcess+0x58>)
 800e8ae:	2202      	movs	r2, #2
 800e8b0:	701a      	strb	r2, [r3, #0]
  break;
 800e8b2:	e004      	b.n	800e8be <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e8b4:	4b05      	ldr	r3, [pc, #20]	; (800e8cc <USBH_UserProcess+0x58>)
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	701a      	strb	r2, [r3, #0]
  break;
 800e8ba:	e000      	b.n	800e8be <USBH_UserProcess+0x4a>

  default:
  break;
 800e8bc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e8be:	bf00      	nop
 800e8c0:	370c      	adds	r7, #12
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c8:	4770      	bx	lr
 800e8ca:	bf00      	nop
 800e8cc:	2000213c 	.word	0x2000213c

0800e8d0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b08a      	sub	sp, #40	; 0x28
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e8d8:	f107 0314 	add.w	r3, r7, #20
 800e8dc:	2200      	movs	r2, #0
 800e8de:	601a      	str	r2, [r3, #0]
 800e8e0:	605a      	str	r2, [r3, #4]
 800e8e2:	609a      	str	r2, [r3, #8]
 800e8e4:	60da      	str	r2, [r3, #12]
 800e8e6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e8f0:	d147      	bne.n	800e982 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	613b      	str	r3, [r7, #16]
 800e8f6:	4b25      	ldr	r3, [pc, #148]	; (800e98c <HAL_HCD_MspInit+0xbc>)
 800e8f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8fa:	4a24      	ldr	r2, [pc, #144]	; (800e98c <HAL_HCD_MspInit+0xbc>)
 800e8fc:	f043 0301 	orr.w	r3, r3, #1
 800e900:	6313      	str	r3, [r2, #48]	; 0x30
 800e902:	4b22      	ldr	r3, [pc, #136]	; (800e98c <HAL_HCD_MspInit+0xbc>)
 800e904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e906:	f003 0301 	and.w	r3, r3, #1
 800e90a:	613b      	str	r3, [r7, #16]
 800e90c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e90e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e914:	2300      	movs	r3, #0
 800e916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e918:	2300      	movs	r3, #0
 800e91a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e91c:	f107 0314 	add.w	r3, r7, #20
 800e920:	4619      	mov	r1, r3
 800e922:	481b      	ldr	r0, [pc, #108]	; (800e990 <HAL_HCD_MspInit+0xc0>)
 800e924:	f7f4 fcbe 	bl	80032a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e928:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e92c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e92e:	2302      	movs	r3, #2
 800e930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e932:	2300      	movs	r3, #0
 800e934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e936:	2303      	movs	r3, #3
 800e938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e93a:	230a      	movs	r3, #10
 800e93c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e93e:	f107 0314 	add.w	r3, r7, #20
 800e942:	4619      	mov	r1, r3
 800e944:	4812      	ldr	r0, [pc, #72]	; (800e990 <HAL_HCD_MspInit+0xc0>)
 800e946:	f7f4 fcad 	bl	80032a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e94a:	4b10      	ldr	r3, [pc, #64]	; (800e98c <HAL_HCD_MspInit+0xbc>)
 800e94c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e94e:	4a0f      	ldr	r2, [pc, #60]	; (800e98c <HAL_HCD_MspInit+0xbc>)
 800e950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e954:	6353      	str	r3, [r2, #52]	; 0x34
 800e956:	2300      	movs	r3, #0
 800e958:	60fb      	str	r3, [r7, #12]
 800e95a:	4b0c      	ldr	r3, [pc, #48]	; (800e98c <HAL_HCD_MspInit+0xbc>)
 800e95c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e95e:	4a0b      	ldr	r2, [pc, #44]	; (800e98c <HAL_HCD_MspInit+0xbc>)
 800e960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e964:	6453      	str	r3, [r2, #68]	; 0x44
 800e966:	4b09      	ldr	r3, [pc, #36]	; (800e98c <HAL_HCD_MspInit+0xbc>)
 800e968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e96a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e96e:	60fb      	str	r3, [r7, #12]
 800e970:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e972:	2200      	movs	r2, #0
 800e974:	2100      	movs	r1, #0
 800e976:	2043      	movs	r0, #67	; 0x43
 800e978:	f7f2 ff95 	bl	80018a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e97c:	2043      	movs	r0, #67	; 0x43
 800e97e:	f7f2 ffae 	bl	80018de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e982:	bf00      	nop
 800e984:	3728      	adds	r7, #40	; 0x28
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}
 800e98a:	bf00      	nop
 800e98c:	40023800 	.word	0x40023800
 800e990:	40020000 	.word	0x40020000

0800e994 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b082      	sub	sp, #8
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f7fc fc03 	bl	800b1ae <USBH_LL_IncTimer>
}
 800e9a8:	bf00      	nop
 800e9aa:	3708      	adds	r7, #8
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b082      	sub	sp, #8
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7fc fc3b 	bl	800b23a <USBH_LL_Connect>
}
 800e9c4:	bf00      	nop
 800e9c6:	3708      	adds	r7, #8
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b082      	sub	sp, #8
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7fc fc44 	bl	800b268 <USBH_LL_Disconnect>
}
 800e9e0:	bf00      	nop
 800e9e2:	3708      	adds	r7, #8
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	70fb      	strb	r3, [r7, #3]
 800e9f4:	4613      	mov	r3, r2
 800e9f6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e9f8:	bf00      	nop
 800e9fa:	370c      	adds	r7, #12
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	4770      	bx	lr

0800ea04 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b082      	sub	sp, #8
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7fc fbf5 	bl	800b202 <USBH_LL_PortEnabled>
}
 800ea18:	bf00      	nop
 800ea1a:	3708      	adds	r7, #8
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7fc fbf5 	bl	800b21e <USBH_LL_PortDisabled>
}
 800ea34:	bf00      	nop
 800ea36:	3708      	adds	r7, #8
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b082      	sub	sp, #8
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ea4a:	2b01      	cmp	r3, #1
 800ea4c:	d12a      	bne.n	800eaa4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ea4e:	4a18      	ldr	r2, [pc, #96]	; (800eab0 <USBH_LL_Init+0x74>)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4a15      	ldr	r2, [pc, #84]	; (800eab0 <USBH_LL_Init+0x74>)
 800ea5a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ea5e:	4b14      	ldr	r3, [pc, #80]	; (800eab0 <USBH_LL_Init+0x74>)
 800ea60:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ea64:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ea66:	4b12      	ldr	r3, [pc, #72]	; (800eab0 <USBH_LL_Init+0x74>)
 800ea68:	2208      	movs	r2, #8
 800ea6a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ea6c:	4b10      	ldr	r3, [pc, #64]	; (800eab0 <USBH_LL_Init+0x74>)
 800ea6e:	2201      	movs	r2, #1
 800ea70:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ea72:	4b0f      	ldr	r3, [pc, #60]	; (800eab0 <USBH_LL_Init+0x74>)
 800ea74:	2200      	movs	r2, #0
 800ea76:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ea78:	4b0d      	ldr	r3, [pc, #52]	; (800eab0 <USBH_LL_Init+0x74>)
 800ea7a:	2202      	movs	r2, #2
 800ea7c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ea7e:	4b0c      	ldr	r3, [pc, #48]	; (800eab0 <USBH_LL_Init+0x74>)
 800ea80:	2200      	movs	r2, #0
 800ea82:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ea84:	480a      	ldr	r0, [pc, #40]	; (800eab0 <USBH_LL_Init+0x74>)
 800ea86:	f7f4 fda9 	bl	80035dc <HAL_HCD_Init>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d001      	beq.n	800ea94 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ea90:	f7f2 f9ce 	bl	8000e30 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ea94:	4806      	ldr	r0, [pc, #24]	; (800eab0 <USBH_LL_Init+0x74>)
 800ea96:	f7f5 f98c 	bl	8003db2 <HAL_HCD_GetCurrentFrame>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f7fc fb76 	bl	800b190 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800eaa4:	2300      	movs	r3, #0
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3708      	adds	r7, #8
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}
 800eaae:	bf00      	nop
 800eab0:	20006860 	.word	0x20006860

0800eab4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b084      	sub	sp, #16
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eabc:	2300      	movs	r3, #0
 800eabe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eac0:	2300      	movs	r3, #0
 800eac2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7f5 f8fb 	bl	8003cc6 <HAL_HCD_Start>
 800ead0:	4603      	mov	r3, r0
 800ead2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ead4:	7bfb      	ldrb	r3, [r7, #15]
 800ead6:	4618      	mov	r0, r3
 800ead8:	f000 f982 	bl	800ede0 <USBH_Get_USB_Status>
 800eadc:	4603      	mov	r3, r0
 800eade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eae0:	7bbb      	ldrb	r3, [r7, #14]
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3710      	adds	r7, #16
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}

0800eaea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800eaea:	b580      	push	{r7, lr}
 800eaec:	b084      	sub	sp, #16
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7f5 f903 	bl	8003d0c <HAL_HCD_Stop>
 800eb06:	4603      	mov	r3, r0
 800eb08:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eb0a:	7bfb      	ldrb	r3, [r7, #15]
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f000 f967 	bl	800ede0 <USBH_Get_USB_Status>
 800eb12:	4603      	mov	r3, r0
 800eb14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb16:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3710      	adds	r7, #16
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800eb28:	2301      	movs	r3, #1
 800eb2a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eb32:	4618      	mov	r0, r3
 800eb34:	f7f5 f94b 	bl	8003dce <HAL_HCD_GetCurrentSpeed>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	2b02      	cmp	r3, #2
 800eb3c:	d00c      	beq.n	800eb58 <USBH_LL_GetSpeed+0x38>
 800eb3e:	2b02      	cmp	r3, #2
 800eb40:	d80d      	bhi.n	800eb5e <USBH_LL_GetSpeed+0x3e>
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d002      	beq.n	800eb4c <USBH_LL_GetSpeed+0x2c>
 800eb46:	2b01      	cmp	r3, #1
 800eb48:	d003      	beq.n	800eb52 <USBH_LL_GetSpeed+0x32>
 800eb4a:	e008      	b.n	800eb5e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	73fb      	strb	r3, [r7, #15]
    break;
 800eb50:	e008      	b.n	800eb64 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800eb52:	2301      	movs	r3, #1
 800eb54:	73fb      	strb	r3, [r7, #15]
    break;
 800eb56:	e005      	b.n	800eb64 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800eb58:	2302      	movs	r3, #2
 800eb5a:	73fb      	strb	r3, [r7, #15]
    break;
 800eb5c:	e002      	b.n	800eb64 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800eb5e:	2301      	movs	r3, #1
 800eb60:	73fb      	strb	r3, [r7, #15]
    break;
 800eb62:	bf00      	nop
  }
  return  speed;
 800eb64:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3710      	adds	r7, #16
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}

0800eb6e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800eb6e:	b580      	push	{r7, lr}
 800eb70:	b084      	sub	sp, #16
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb76:	2300      	movs	r3, #0
 800eb78:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eb84:	4618      	mov	r0, r3
 800eb86:	f7f5 f8de 	bl	8003d46 <HAL_HCD_ResetPort>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eb8e:	7bfb      	ldrb	r3, [r7, #15]
 800eb90:	4618      	mov	r0, r3
 800eb92:	f000 f925 	bl	800ede0 <USBH_Get_USB_Status>
 800eb96:	4603      	mov	r3, r0
 800eb98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3710      	adds	r7, #16
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b082      	sub	sp, #8
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	460b      	mov	r3, r1
 800ebae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ebb6:	78fa      	ldrb	r2, [r7, #3]
 800ebb8:	4611      	mov	r1, r2
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f7f5 f8e5 	bl	8003d8a <HAL_HCD_HC_GetXferCount>
 800ebc0:	4603      	mov	r3, r0
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3708      	adds	r7, #8
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}

0800ebca <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ebca:	b590      	push	{r4, r7, lr}
 800ebcc:	b089      	sub	sp, #36	; 0x24
 800ebce:	af04      	add	r7, sp, #16
 800ebd0:	6078      	str	r0, [r7, #4]
 800ebd2:	4608      	mov	r0, r1
 800ebd4:	4611      	mov	r1, r2
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	4603      	mov	r3, r0
 800ebda:	70fb      	strb	r3, [r7, #3]
 800ebdc:	460b      	mov	r3, r1
 800ebde:	70bb      	strb	r3, [r7, #2]
 800ebe0:	4613      	mov	r3, r2
 800ebe2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ebf2:	787c      	ldrb	r4, [r7, #1]
 800ebf4:	78ba      	ldrb	r2, [r7, #2]
 800ebf6:	78f9      	ldrb	r1, [r7, #3]
 800ebf8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ebfa:	9302      	str	r3, [sp, #8]
 800ebfc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ec00:	9301      	str	r3, [sp, #4]
 800ec02:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ec06:	9300      	str	r3, [sp, #0]
 800ec08:	4623      	mov	r3, r4
 800ec0a:	f7f4 fd49 	bl	80036a0 <HAL_HCD_HC_Init>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ec12:	7bfb      	ldrb	r3, [r7, #15]
 800ec14:	4618      	mov	r0, r3
 800ec16:	f000 f8e3 	bl	800ede0 <USBH_Get_USB_Status>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3714      	adds	r7, #20
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd90      	pop	{r4, r7, pc}

0800ec28 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b084      	sub	sp, #16
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	460b      	mov	r3, r1
 800ec32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec34:	2300      	movs	r3, #0
 800ec36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ec38:	2300      	movs	r3, #0
 800ec3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ec42:	78fa      	ldrb	r2, [r7, #3]
 800ec44:	4611      	mov	r1, r2
 800ec46:	4618      	mov	r0, r3
 800ec48:	f7f4 fdb9 	bl	80037be <HAL_HCD_HC_Halt>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ec50:	7bfb      	ldrb	r3, [r7, #15]
 800ec52:	4618      	mov	r0, r3
 800ec54:	f000 f8c4 	bl	800ede0 <USBH_Get_USB_Status>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3710      	adds	r7, #16
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}

0800ec66 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ec66:	b590      	push	{r4, r7, lr}
 800ec68:	b089      	sub	sp, #36	; 0x24
 800ec6a:	af04      	add	r7, sp, #16
 800ec6c:	6078      	str	r0, [r7, #4]
 800ec6e:	4608      	mov	r0, r1
 800ec70:	4611      	mov	r1, r2
 800ec72:	461a      	mov	r2, r3
 800ec74:	4603      	mov	r3, r0
 800ec76:	70fb      	strb	r3, [r7, #3]
 800ec78:	460b      	mov	r3, r1
 800ec7a:	70bb      	strb	r3, [r7, #2]
 800ec7c:	4613      	mov	r3, r2
 800ec7e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec80:	2300      	movs	r3, #0
 800ec82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ec84:	2300      	movs	r3, #0
 800ec86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ec8e:	787c      	ldrb	r4, [r7, #1]
 800ec90:	78ba      	ldrb	r2, [r7, #2]
 800ec92:	78f9      	ldrb	r1, [r7, #3]
 800ec94:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ec98:	9303      	str	r3, [sp, #12]
 800ec9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ec9c:	9302      	str	r3, [sp, #8]
 800ec9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca0:	9301      	str	r3, [sp, #4]
 800eca2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eca6:	9300      	str	r3, [sp, #0]
 800eca8:	4623      	mov	r3, r4
 800ecaa:	f7f4 fdab 	bl	8003804 <HAL_HCD_HC_SubmitRequest>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ecb2:	7bfb      	ldrb	r3, [r7, #15]
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f000 f893 	bl	800ede0 <USBH_Get_USB_Status>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3714      	adds	r7, #20
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd90      	pop	{r4, r7, pc}

0800ecc8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	460b      	mov	r3, r1
 800ecd2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ecda:	78fa      	ldrb	r2, [r7, #3]
 800ecdc:	4611      	mov	r1, r2
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7f5 f83f 	bl	8003d62 <HAL_HCD_HC_GetURBState>
 800ece4:	4603      	mov	r3, r0
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3708      	adds	r7, #8
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}

0800ecee <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ecee:	b580      	push	{r7, lr}
 800ecf0:	b082      	sub	sp, #8
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	6078      	str	r0, [r7, #4]
 800ecf6:	460b      	mov	r3, r1
 800ecf8:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800ecfa:	20c8      	movs	r0, #200	; 0xc8
 800ecfc:	f7f2 fcd4 	bl	80016a8 <HAL_Delay>
  return USBH_OK;
 800ed00:	2300      	movs	r3, #0
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	3708      	adds	r7, #8
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}

0800ed0a <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ed0a:	b480      	push	{r7}
 800ed0c:	b085      	sub	sp, #20
 800ed0e:	af00      	add	r7, sp, #0
 800ed10:	6078      	str	r0, [r7, #4]
 800ed12:	460b      	mov	r3, r1
 800ed14:	70fb      	strb	r3, [r7, #3]
 800ed16:	4613      	mov	r3, r2
 800ed18:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ed20:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ed22:	78fb      	ldrb	r3, [r7, #3]
 800ed24:	68fa      	ldr	r2, [r7, #12]
 800ed26:	212c      	movs	r1, #44	; 0x2c
 800ed28:	fb01 f303 	mul.w	r3, r1, r3
 800ed2c:	4413      	add	r3, r2
 800ed2e:	333b      	adds	r3, #59	; 0x3b
 800ed30:	781b      	ldrb	r3, [r3, #0]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d009      	beq.n	800ed4a <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ed36:	78fb      	ldrb	r3, [r7, #3]
 800ed38:	68fa      	ldr	r2, [r7, #12]
 800ed3a:	212c      	movs	r1, #44	; 0x2c
 800ed3c:	fb01 f303 	mul.w	r3, r1, r3
 800ed40:	4413      	add	r3, r2
 800ed42:	3354      	adds	r3, #84	; 0x54
 800ed44:	78ba      	ldrb	r2, [r7, #2]
 800ed46:	701a      	strb	r2, [r3, #0]
 800ed48:	e008      	b.n	800ed5c <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ed4a:	78fb      	ldrb	r3, [r7, #3]
 800ed4c:	68fa      	ldr	r2, [r7, #12]
 800ed4e:	212c      	movs	r1, #44	; 0x2c
 800ed50:	fb01 f303 	mul.w	r3, r1, r3
 800ed54:	4413      	add	r3, r2
 800ed56:	3355      	adds	r3, #85	; 0x55
 800ed58:	78ba      	ldrb	r2, [r7, #2]
 800ed5a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ed5c:	2300      	movs	r3, #0
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3714      	adds	r7, #20
 800ed62:	46bd      	mov	sp, r7
 800ed64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed68:	4770      	bx	lr

0800ed6a <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ed6a:	b480      	push	{r7}
 800ed6c:	b085      	sub	sp, #20
 800ed6e:	af00      	add	r7, sp, #0
 800ed70:	6078      	str	r0, [r7, #4]
 800ed72:	460b      	mov	r3, r1
 800ed74:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800ed76:	2300      	movs	r3, #0
 800ed78:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ed80:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800ed82:	78fb      	ldrb	r3, [r7, #3]
 800ed84:	68ba      	ldr	r2, [r7, #8]
 800ed86:	212c      	movs	r1, #44	; 0x2c
 800ed88:	fb01 f303 	mul.w	r3, r1, r3
 800ed8c:	4413      	add	r3, r2
 800ed8e:	333b      	adds	r3, #59	; 0x3b
 800ed90:	781b      	ldrb	r3, [r3, #0]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d009      	beq.n	800edaa <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800ed96:	78fb      	ldrb	r3, [r7, #3]
 800ed98:	68ba      	ldr	r2, [r7, #8]
 800ed9a:	212c      	movs	r1, #44	; 0x2c
 800ed9c:	fb01 f303 	mul.w	r3, r1, r3
 800eda0:	4413      	add	r3, r2
 800eda2:	3354      	adds	r3, #84	; 0x54
 800eda4:	781b      	ldrb	r3, [r3, #0]
 800eda6:	73fb      	strb	r3, [r7, #15]
 800eda8:	e008      	b.n	800edbc <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800edaa:	78fb      	ldrb	r3, [r7, #3]
 800edac:	68ba      	ldr	r2, [r7, #8]
 800edae:	212c      	movs	r1, #44	; 0x2c
 800edb0:	fb01 f303 	mul.w	r3, r1, r3
 800edb4:	4413      	add	r3, r2
 800edb6:	3355      	adds	r3, #85	; 0x55
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800edbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3714      	adds	r7, #20
 800edc2:	46bd      	mov	sp, r7
 800edc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc8:	4770      	bx	lr

0800edca <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800edca:	b580      	push	{r7, lr}
 800edcc:	b082      	sub	sp, #8
 800edce:	af00      	add	r7, sp, #0
 800edd0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f7f2 fc68 	bl	80016a8 <HAL_Delay>
}
 800edd8:	bf00      	nop
 800edda:	3708      	adds	r7, #8
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}

0800ede0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b085      	sub	sp, #20
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	4603      	mov	r3, r0
 800ede8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800edea:	2300      	movs	r3, #0
 800edec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800edee:	79fb      	ldrb	r3, [r7, #7]
 800edf0:	2b03      	cmp	r3, #3
 800edf2:	d817      	bhi.n	800ee24 <USBH_Get_USB_Status+0x44>
 800edf4:	a201      	add	r2, pc, #4	; (adr r2, 800edfc <USBH_Get_USB_Status+0x1c>)
 800edf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edfa:	bf00      	nop
 800edfc:	0800ee0d 	.word	0x0800ee0d
 800ee00:	0800ee13 	.word	0x0800ee13
 800ee04:	0800ee19 	.word	0x0800ee19
 800ee08:	0800ee1f 	.word	0x0800ee1f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ee10:	e00b      	b.n	800ee2a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ee12:	2302      	movs	r3, #2
 800ee14:	73fb      	strb	r3, [r7, #15]
    break;
 800ee16:	e008      	b.n	800ee2a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ee1c:	e005      	b.n	800ee2a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ee1e:	2302      	movs	r3, #2
 800ee20:	73fb      	strb	r3, [r7, #15]
    break;
 800ee22:	e002      	b.n	800ee2a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ee24:	2302      	movs	r3, #2
 800ee26:	73fb      	strb	r3, [r7, #15]
    break;
 800ee28:	bf00      	nop
  }
  return usb_status;
 800ee2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3714      	adds	r7, #20
 800ee30:	46bd      	mov	sp, r7
 800ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee36:	4770      	bx	lr

0800ee38 <__errno>:
 800ee38:	4b01      	ldr	r3, [pc, #4]	; (800ee40 <__errno+0x8>)
 800ee3a:	6818      	ldr	r0, [r3, #0]
 800ee3c:	4770      	bx	lr
 800ee3e:	bf00      	nop
 800ee40:	20000044 	.word	0x20000044

0800ee44 <__libc_init_array>:
 800ee44:	b570      	push	{r4, r5, r6, lr}
 800ee46:	4d0d      	ldr	r5, [pc, #52]	; (800ee7c <__libc_init_array+0x38>)
 800ee48:	4c0d      	ldr	r4, [pc, #52]	; (800ee80 <__libc_init_array+0x3c>)
 800ee4a:	1b64      	subs	r4, r4, r5
 800ee4c:	10a4      	asrs	r4, r4, #2
 800ee4e:	2600      	movs	r6, #0
 800ee50:	42a6      	cmp	r6, r4
 800ee52:	d109      	bne.n	800ee68 <__libc_init_array+0x24>
 800ee54:	4d0b      	ldr	r5, [pc, #44]	; (800ee84 <__libc_init_array+0x40>)
 800ee56:	4c0c      	ldr	r4, [pc, #48]	; (800ee88 <__libc_init_array+0x44>)
 800ee58:	f000 fff2 	bl	800fe40 <_init>
 800ee5c:	1b64      	subs	r4, r4, r5
 800ee5e:	10a4      	asrs	r4, r4, #2
 800ee60:	2600      	movs	r6, #0
 800ee62:	42a6      	cmp	r6, r4
 800ee64:	d105      	bne.n	800ee72 <__libc_init_array+0x2e>
 800ee66:	bd70      	pop	{r4, r5, r6, pc}
 800ee68:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee6c:	4798      	blx	r3
 800ee6e:	3601      	adds	r6, #1
 800ee70:	e7ee      	b.n	800ee50 <__libc_init_array+0xc>
 800ee72:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee76:	4798      	blx	r3
 800ee78:	3601      	adds	r6, #1
 800ee7a:	e7f2      	b.n	800ee62 <__libc_init_array+0x1e>
 800ee7c:	08086f98 	.word	0x08086f98
 800ee80:	08086f98 	.word	0x08086f98
 800ee84:	08086f98 	.word	0x08086f98
 800ee88:	08086f9c 	.word	0x08086f9c

0800ee8c <malloc>:
 800ee8c:	4b02      	ldr	r3, [pc, #8]	; (800ee98 <malloc+0xc>)
 800ee8e:	4601      	mov	r1, r0
 800ee90:	6818      	ldr	r0, [r3, #0]
 800ee92:	f000 b871 	b.w	800ef78 <_malloc_r>
 800ee96:	bf00      	nop
 800ee98:	20000044 	.word	0x20000044

0800ee9c <free>:
 800ee9c:	4b02      	ldr	r3, [pc, #8]	; (800eea8 <free+0xc>)
 800ee9e:	4601      	mov	r1, r0
 800eea0:	6818      	ldr	r0, [r3, #0]
 800eea2:	f000 b819 	b.w	800eed8 <_free_r>
 800eea6:	bf00      	nop
 800eea8:	20000044 	.word	0x20000044

0800eeac <memcpy>:
 800eeac:	440a      	add	r2, r1
 800eeae:	4291      	cmp	r1, r2
 800eeb0:	f100 33ff 	add.w	r3, r0, #4294967295
 800eeb4:	d100      	bne.n	800eeb8 <memcpy+0xc>
 800eeb6:	4770      	bx	lr
 800eeb8:	b510      	push	{r4, lr}
 800eeba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eebe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eec2:	4291      	cmp	r1, r2
 800eec4:	d1f9      	bne.n	800eeba <memcpy+0xe>
 800eec6:	bd10      	pop	{r4, pc}

0800eec8 <memset>:
 800eec8:	4402      	add	r2, r0
 800eeca:	4603      	mov	r3, r0
 800eecc:	4293      	cmp	r3, r2
 800eece:	d100      	bne.n	800eed2 <memset+0xa>
 800eed0:	4770      	bx	lr
 800eed2:	f803 1b01 	strb.w	r1, [r3], #1
 800eed6:	e7f9      	b.n	800eecc <memset+0x4>

0800eed8 <_free_r>:
 800eed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eeda:	2900      	cmp	r1, #0
 800eedc:	d048      	beq.n	800ef70 <_free_r+0x98>
 800eede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eee2:	9001      	str	r0, [sp, #4]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	f1a1 0404 	sub.w	r4, r1, #4
 800eeea:	bfb8      	it	lt
 800eeec:	18e4      	addlt	r4, r4, r3
 800eeee:	f000 f9d3 	bl	800f298 <__malloc_lock>
 800eef2:	4a20      	ldr	r2, [pc, #128]	; (800ef74 <_free_r+0x9c>)
 800eef4:	9801      	ldr	r0, [sp, #4]
 800eef6:	6813      	ldr	r3, [r2, #0]
 800eef8:	4615      	mov	r5, r2
 800eefa:	b933      	cbnz	r3, 800ef0a <_free_r+0x32>
 800eefc:	6063      	str	r3, [r4, #4]
 800eefe:	6014      	str	r4, [r2, #0]
 800ef00:	b003      	add	sp, #12
 800ef02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef06:	f000 b9cd 	b.w	800f2a4 <__malloc_unlock>
 800ef0a:	42a3      	cmp	r3, r4
 800ef0c:	d90b      	bls.n	800ef26 <_free_r+0x4e>
 800ef0e:	6821      	ldr	r1, [r4, #0]
 800ef10:	1862      	adds	r2, r4, r1
 800ef12:	4293      	cmp	r3, r2
 800ef14:	bf04      	itt	eq
 800ef16:	681a      	ldreq	r2, [r3, #0]
 800ef18:	685b      	ldreq	r3, [r3, #4]
 800ef1a:	6063      	str	r3, [r4, #4]
 800ef1c:	bf04      	itt	eq
 800ef1e:	1852      	addeq	r2, r2, r1
 800ef20:	6022      	streq	r2, [r4, #0]
 800ef22:	602c      	str	r4, [r5, #0]
 800ef24:	e7ec      	b.n	800ef00 <_free_r+0x28>
 800ef26:	461a      	mov	r2, r3
 800ef28:	685b      	ldr	r3, [r3, #4]
 800ef2a:	b10b      	cbz	r3, 800ef30 <_free_r+0x58>
 800ef2c:	42a3      	cmp	r3, r4
 800ef2e:	d9fa      	bls.n	800ef26 <_free_r+0x4e>
 800ef30:	6811      	ldr	r1, [r2, #0]
 800ef32:	1855      	adds	r5, r2, r1
 800ef34:	42a5      	cmp	r5, r4
 800ef36:	d10b      	bne.n	800ef50 <_free_r+0x78>
 800ef38:	6824      	ldr	r4, [r4, #0]
 800ef3a:	4421      	add	r1, r4
 800ef3c:	1854      	adds	r4, r2, r1
 800ef3e:	42a3      	cmp	r3, r4
 800ef40:	6011      	str	r1, [r2, #0]
 800ef42:	d1dd      	bne.n	800ef00 <_free_r+0x28>
 800ef44:	681c      	ldr	r4, [r3, #0]
 800ef46:	685b      	ldr	r3, [r3, #4]
 800ef48:	6053      	str	r3, [r2, #4]
 800ef4a:	4421      	add	r1, r4
 800ef4c:	6011      	str	r1, [r2, #0]
 800ef4e:	e7d7      	b.n	800ef00 <_free_r+0x28>
 800ef50:	d902      	bls.n	800ef58 <_free_r+0x80>
 800ef52:	230c      	movs	r3, #12
 800ef54:	6003      	str	r3, [r0, #0]
 800ef56:	e7d3      	b.n	800ef00 <_free_r+0x28>
 800ef58:	6825      	ldr	r5, [r4, #0]
 800ef5a:	1961      	adds	r1, r4, r5
 800ef5c:	428b      	cmp	r3, r1
 800ef5e:	bf04      	itt	eq
 800ef60:	6819      	ldreq	r1, [r3, #0]
 800ef62:	685b      	ldreq	r3, [r3, #4]
 800ef64:	6063      	str	r3, [r4, #4]
 800ef66:	bf04      	itt	eq
 800ef68:	1949      	addeq	r1, r1, r5
 800ef6a:	6021      	streq	r1, [r4, #0]
 800ef6c:	6054      	str	r4, [r2, #4]
 800ef6e:	e7c7      	b.n	800ef00 <_free_r+0x28>
 800ef70:	b003      	add	sp, #12
 800ef72:	bd30      	pop	{r4, r5, pc}
 800ef74:	20002140 	.word	0x20002140

0800ef78 <_malloc_r>:
 800ef78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef7a:	1ccd      	adds	r5, r1, #3
 800ef7c:	f025 0503 	bic.w	r5, r5, #3
 800ef80:	3508      	adds	r5, #8
 800ef82:	2d0c      	cmp	r5, #12
 800ef84:	bf38      	it	cc
 800ef86:	250c      	movcc	r5, #12
 800ef88:	2d00      	cmp	r5, #0
 800ef8a:	4606      	mov	r6, r0
 800ef8c:	db01      	blt.n	800ef92 <_malloc_r+0x1a>
 800ef8e:	42a9      	cmp	r1, r5
 800ef90:	d903      	bls.n	800ef9a <_malloc_r+0x22>
 800ef92:	230c      	movs	r3, #12
 800ef94:	6033      	str	r3, [r6, #0]
 800ef96:	2000      	movs	r0, #0
 800ef98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef9a:	f000 f97d 	bl	800f298 <__malloc_lock>
 800ef9e:	4921      	ldr	r1, [pc, #132]	; (800f024 <_malloc_r+0xac>)
 800efa0:	680a      	ldr	r2, [r1, #0]
 800efa2:	4614      	mov	r4, r2
 800efa4:	b99c      	cbnz	r4, 800efce <_malloc_r+0x56>
 800efa6:	4f20      	ldr	r7, [pc, #128]	; (800f028 <_malloc_r+0xb0>)
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	b923      	cbnz	r3, 800efb6 <_malloc_r+0x3e>
 800efac:	4621      	mov	r1, r4
 800efae:	4630      	mov	r0, r6
 800efb0:	f000 f86a 	bl	800f088 <_sbrk_r>
 800efb4:	6038      	str	r0, [r7, #0]
 800efb6:	4629      	mov	r1, r5
 800efb8:	4630      	mov	r0, r6
 800efba:	f000 f865 	bl	800f088 <_sbrk_r>
 800efbe:	1c43      	adds	r3, r0, #1
 800efc0:	d123      	bne.n	800f00a <_malloc_r+0x92>
 800efc2:	230c      	movs	r3, #12
 800efc4:	6033      	str	r3, [r6, #0]
 800efc6:	4630      	mov	r0, r6
 800efc8:	f000 f96c 	bl	800f2a4 <__malloc_unlock>
 800efcc:	e7e3      	b.n	800ef96 <_malloc_r+0x1e>
 800efce:	6823      	ldr	r3, [r4, #0]
 800efd0:	1b5b      	subs	r3, r3, r5
 800efd2:	d417      	bmi.n	800f004 <_malloc_r+0x8c>
 800efd4:	2b0b      	cmp	r3, #11
 800efd6:	d903      	bls.n	800efe0 <_malloc_r+0x68>
 800efd8:	6023      	str	r3, [r4, #0]
 800efda:	441c      	add	r4, r3
 800efdc:	6025      	str	r5, [r4, #0]
 800efde:	e004      	b.n	800efea <_malloc_r+0x72>
 800efe0:	6863      	ldr	r3, [r4, #4]
 800efe2:	42a2      	cmp	r2, r4
 800efe4:	bf0c      	ite	eq
 800efe6:	600b      	streq	r3, [r1, #0]
 800efe8:	6053      	strne	r3, [r2, #4]
 800efea:	4630      	mov	r0, r6
 800efec:	f000 f95a 	bl	800f2a4 <__malloc_unlock>
 800eff0:	f104 000b 	add.w	r0, r4, #11
 800eff4:	1d23      	adds	r3, r4, #4
 800eff6:	f020 0007 	bic.w	r0, r0, #7
 800effa:	1ac2      	subs	r2, r0, r3
 800effc:	d0cc      	beq.n	800ef98 <_malloc_r+0x20>
 800effe:	1a1b      	subs	r3, r3, r0
 800f000:	50a3      	str	r3, [r4, r2]
 800f002:	e7c9      	b.n	800ef98 <_malloc_r+0x20>
 800f004:	4622      	mov	r2, r4
 800f006:	6864      	ldr	r4, [r4, #4]
 800f008:	e7cc      	b.n	800efa4 <_malloc_r+0x2c>
 800f00a:	1cc4      	adds	r4, r0, #3
 800f00c:	f024 0403 	bic.w	r4, r4, #3
 800f010:	42a0      	cmp	r0, r4
 800f012:	d0e3      	beq.n	800efdc <_malloc_r+0x64>
 800f014:	1a21      	subs	r1, r4, r0
 800f016:	4630      	mov	r0, r6
 800f018:	f000 f836 	bl	800f088 <_sbrk_r>
 800f01c:	3001      	adds	r0, #1
 800f01e:	d1dd      	bne.n	800efdc <_malloc_r+0x64>
 800f020:	e7cf      	b.n	800efc2 <_malloc_r+0x4a>
 800f022:	bf00      	nop
 800f024:	20002140 	.word	0x20002140
 800f028:	20002144 	.word	0x20002144

0800f02c <iprintf>:
 800f02c:	b40f      	push	{r0, r1, r2, r3}
 800f02e:	4b0a      	ldr	r3, [pc, #40]	; (800f058 <iprintf+0x2c>)
 800f030:	b513      	push	{r0, r1, r4, lr}
 800f032:	681c      	ldr	r4, [r3, #0]
 800f034:	b124      	cbz	r4, 800f040 <iprintf+0x14>
 800f036:	69a3      	ldr	r3, [r4, #24]
 800f038:	b913      	cbnz	r3, 800f040 <iprintf+0x14>
 800f03a:	4620      	mov	r0, r4
 800f03c:	f000 f88c 	bl	800f158 <__sinit>
 800f040:	ab05      	add	r3, sp, #20
 800f042:	9a04      	ldr	r2, [sp, #16]
 800f044:	68a1      	ldr	r1, [r4, #8]
 800f046:	9301      	str	r3, [sp, #4]
 800f048:	4620      	mov	r0, r4
 800f04a:	f000 f95b 	bl	800f304 <_vfiprintf_r>
 800f04e:	b002      	add	sp, #8
 800f050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f054:	b004      	add	sp, #16
 800f056:	4770      	bx	lr
 800f058:	20000044 	.word	0x20000044

0800f05c <putchar>:
 800f05c:	4b09      	ldr	r3, [pc, #36]	; (800f084 <putchar+0x28>)
 800f05e:	b513      	push	{r0, r1, r4, lr}
 800f060:	681c      	ldr	r4, [r3, #0]
 800f062:	4601      	mov	r1, r0
 800f064:	b134      	cbz	r4, 800f074 <putchar+0x18>
 800f066:	69a3      	ldr	r3, [r4, #24]
 800f068:	b923      	cbnz	r3, 800f074 <putchar+0x18>
 800f06a:	9001      	str	r0, [sp, #4]
 800f06c:	4620      	mov	r0, r4
 800f06e:	f000 f873 	bl	800f158 <__sinit>
 800f072:	9901      	ldr	r1, [sp, #4]
 800f074:	68a2      	ldr	r2, [r4, #8]
 800f076:	4620      	mov	r0, r4
 800f078:	b002      	add	sp, #8
 800f07a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f07e:	f000 bc05 	b.w	800f88c <_putc_r>
 800f082:	bf00      	nop
 800f084:	20000044 	.word	0x20000044

0800f088 <_sbrk_r>:
 800f088:	b538      	push	{r3, r4, r5, lr}
 800f08a:	4d06      	ldr	r5, [pc, #24]	; (800f0a4 <_sbrk_r+0x1c>)
 800f08c:	2300      	movs	r3, #0
 800f08e:	4604      	mov	r4, r0
 800f090:	4608      	mov	r0, r1
 800f092:	602b      	str	r3, [r5, #0]
 800f094:	f7f2 fa24 	bl	80014e0 <_sbrk>
 800f098:	1c43      	adds	r3, r0, #1
 800f09a:	d102      	bne.n	800f0a2 <_sbrk_r+0x1a>
 800f09c:	682b      	ldr	r3, [r5, #0]
 800f09e:	b103      	cbz	r3, 800f0a2 <_sbrk_r+0x1a>
 800f0a0:	6023      	str	r3, [r4, #0]
 800f0a2:	bd38      	pop	{r3, r4, r5, pc}
 800f0a4:	20006b70 	.word	0x20006b70

0800f0a8 <std>:
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	b510      	push	{r4, lr}
 800f0ac:	4604      	mov	r4, r0
 800f0ae:	e9c0 3300 	strd	r3, r3, [r0]
 800f0b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f0b6:	6083      	str	r3, [r0, #8]
 800f0b8:	8181      	strh	r1, [r0, #12]
 800f0ba:	6643      	str	r3, [r0, #100]	; 0x64
 800f0bc:	81c2      	strh	r2, [r0, #14]
 800f0be:	6183      	str	r3, [r0, #24]
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	2208      	movs	r2, #8
 800f0c4:	305c      	adds	r0, #92	; 0x5c
 800f0c6:	f7ff feff 	bl	800eec8 <memset>
 800f0ca:	4b05      	ldr	r3, [pc, #20]	; (800f0e0 <std+0x38>)
 800f0cc:	6263      	str	r3, [r4, #36]	; 0x24
 800f0ce:	4b05      	ldr	r3, [pc, #20]	; (800f0e4 <std+0x3c>)
 800f0d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800f0d2:	4b05      	ldr	r3, [pc, #20]	; (800f0e8 <std+0x40>)
 800f0d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f0d6:	4b05      	ldr	r3, [pc, #20]	; (800f0ec <std+0x44>)
 800f0d8:	6224      	str	r4, [r4, #32]
 800f0da:	6323      	str	r3, [r4, #48]	; 0x30
 800f0dc:	bd10      	pop	{r4, pc}
 800f0de:	bf00      	nop
 800f0e0:	0800f91d 	.word	0x0800f91d
 800f0e4:	0800f93f 	.word	0x0800f93f
 800f0e8:	0800f977 	.word	0x0800f977
 800f0ec:	0800f99b 	.word	0x0800f99b

0800f0f0 <_cleanup_r>:
 800f0f0:	4901      	ldr	r1, [pc, #4]	; (800f0f8 <_cleanup_r+0x8>)
 800f0f2:	f000 b8af 	b.w	800f254 <_fwalk_reent>
 800f0f6:	bf00      	nop
 800f0f8:	0800fc75 	.word	0x0800fc75

0800f0fc <__sfmoreglue>:
 800f0fc:	b570      	push	{r4, r5, r6, lr}
 800f0fe:	1e4a      	subs	r2, r1, #1
 800f100:	2568      	movs	r5, #104	; 0x68
 800f102:	4355      	muls	r5, r2
 800f104:	460e      	mov	r6, r1
 800f106:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f10a:	f7ff ff35 	bl	800ef78 <_malloc_r>
 800f10e:	4604      	mov	r4, r0
 800f110:	b140      	cbz	r0, 800f124 <__sfmoreglue+0x28>
 800f112:	2100      	movs	r1, #0
 800f114:	e9c0 1600 	strd	r1, r6, [r0]
 800f118:	300c      	adds	r0, #12
 800f11a:	60a0      	str	r0, [r4, #8]
 800f11c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f120:	f7ff fed2 	bl	800eec8 <memset>
 800f124:	4620      	mov	r0, r4
 800f126:	bd70      	pop	{r4, r5, r6, pc}

0800f128 <__sfp_lock_acquire>:
 800f128:	4801      	ldr	r0, [pc, #4]	; (800f130 <__sfp_lock_acquire+0x8>)
 800f12a:	f000 b8b3 	b.w	800f294 <__retarget_lock_acquire_recursive>
 800f12e:	bf00      	nop
 800f130:	20006b6c 	.word	0x20006b6c

0800f134 <__sfp_lock_release>:
 800f134:	4801      	ldr	r0, [pc, #4]	; (800f13c <__sfp_lock_release+0x8>)
 800f136:	f000 b8ae 	b.w	800f296 <__retarget_lock_release_recursive>
 800f13a:	bf00      	nop
 800f13c:	20006b6c 	.word	0x20006b6c

0800f140 <__sinit_lock_acquire>:
 800f140:	4801      	ldr	r0, [pc, #4]	; (800f148 <__sinit_lock_acquire+0x8>)
 800f142:	f000 b8a7 	b.w	800f294 <__retarget_lock_acquire_recursive>
 800f146:	bf00      	nop
 800f148:	20006b67 	.word	0x20006b67

0800f14c <__sinit_lock_release>:
 800f14c:	4801      	ldr	r0, [pc, #4]	; (800f154 <__sinit_lock_release+0x8>)
 800f14e:	f000 b8a2 	b.w	800f296 <__retarget_lock_release_recursive>
 800f152:	bf00      	nop
 800f154:	20006b67 	.word	0x20006b67

0800f158 <__sinit>:
 800f158:	b510      	push	{r4, lr}
 800f15a:	4604      	mov	r4, r0
 800f15c:	f7ff fff0 	bl	800f140 <__sinit_lock_acquire>
 800f160:	69a3      	ldr	r3, [r4, #24]
 800f162:	b11b      	cbz	r3, 800f16c <__sinit+0x14>
 800f164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f168:	f7ff bff0 	b.w	800f14c <__sinit_lock_release>
 800f16c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f170:	6523      	str	r3, [r4, #80]	; 0x50
 800f172:	4b13      	ldr	r3, [pc, #76]	; (800f1c0 <__sinit+0x68>)
 800f174:	4a13      	ldr	r2, [pc, #76]	; (800f1c4 <__sinit+0x6c>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	62a2      	str	r2, [r4, #40]	; 0x28
 800f17a:	42a3      	cmp	r3, r4
 800f17c:	bf04      	itt	eq
 800f17e:	2301      	moveq	r3, #1
 800f180:	61a3      	streq	r3, [r4, #24]
 800f182:	4620      	mov	r0, r4
 800f184:	f000 f820 	bl	800f1c8 <__sfp>
 800f188:	6060      	str	r0, [r4, #4]
 800f18a:	4620      	mov	r0, r4
 800f18c:	f000 f81c 	bl	800f1c8 <__sfp>
 800f190:	60a0      	str	r0, [r4, #8]
 800f192:	4620      	mov	r0, r4
 800f194:	f000 f818 	bl	800f1c8 <__sfp>
 800f198:	2200      	movs	r2, #0
 800f19a:	60e0      	str	r0, [r4, #12]
 800f19c:	2104      	movs	r1, #4
 800f19e:	6860      	ldr	r0, [r4, #4]
 800f1a0:	f7ff ff82 	bl	800f0a8 <std>
 800f1a4:	68a0      	ldr	r0, [r4, #8]
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	2109      	movs	r1, #9
 800f1aa:	f7ff ff7d 	bl	800f0a8 <std>
 800f1ae:	68e0      	ldr	r0, [r4, #12]
 800f1b0:	2202      	movs	r2, #2
 800f1b2:	2112      	movs	r1, #18
 800f1b4:	f7ff ff78 	bl	800f0a8 <std>
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	61a3      	str	r3, [r4, #24]
 800f1bc:	e7d2      	b.n	800f164 <__sinit+0xc>
 800f1be:	bf00      	nop
 800f1c0:	08086ef8 	.word	0x08086ef8
 800f1c4:	0800f0f1 	.word	0x0800f0f1

0800f1c8 <__sfp>:
 800f1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ca:	4607      	mov	r7, r0
 800f1cc:	f7ff ffac 	bl	800f128 <__sfp_lock_acquire>
 800f1d0:	4b1e      	ldr	r3, [pc, #120]	; (800f24c <__sfp+0x84>)
 800f1d2:	681e      	ldr	r6, [r3, #0]
 800f1d4:	69b3      	ldr	r3, [r6, #24]
 800f1d6:	b913      	cbnz	r3, 800f1de <__sfp+0x16>
 800f1d8:	4630      	mov	r0, r6
 800f1da:	f7ff ffbd 	bl	800f158 <__sinit>
 800f1de:	3648      	adds	r6, #72	; 0x48
 800f1e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f1e4:	3b01      	subs	r3, #1
 800f1e6:	d503      	bpl.n	800f1f0 <__sfp+0x28>
 800f1e8:	6833      	ldr	r3, [r6, #0]
 800f1ea:	b30b      	cbz	r3, 800f230 <__sfp+0x68>
 800f1ec:	6836      	ldr	r6, [r6, #0]
 800f1ee:	e7f7      	b.n	800f1e0 <__sfp+0x18>
 800f1f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f1f4:	b9d5      	cbnz	r5, 800f22c <__sfp+0x64>
 800f1f6:	4b16      	ldr	r3, [pc, #88]	; (800f250 <__sfp+0x88>)
 800f1f8:	60e3      	str	r3, [r4, #12]
 800f1fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f1fe:	6665      	str	r5, [r4, #100]	; 0x64
 800f200:	f000 f847 	bl	800f292 <__retarget_lock_init_recursive>
 800f204:	f7ff ff96 	bl	800f134 <__sfp_lock_release>
 800f208:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f20c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f210:	6025      	str	r5, [r4, #0]
 800f212:	61a5      	str	r5, [r4, #24]
 800f214:	2208      	movs	r2, #8
 800f216:	4629      	mov	r1, r5
 800f218:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f21c:	f7ff fe54 	bl	800eec8 <memset>
 800f220:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f224:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f228:	4620      	mov	r0, r4
 800f22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f22c:	3468      	adds	r4, #104	; 0x68
 800f22e:	e7d9      	b.n	800f1e4 <__sfp+0x1c>
 800f230:	2104      	movs	r1, #4
 800f232:	4638      	mov	r0, r7
 800f234:	f7ff ff62 	bl	800f0fc <__sfmoreglue>
 800f238:	4604      	mov	r4, r0
 800f23a:	6030      	str	r0, [r6, #0]
 800f23c:	2800      	cmp	r0, #0
 800f23e:	d1d5      	bne.n	800f1ec <__sfp+0x24>
 800f240:	f7ff ff78 	bl	800f134 <__sfp_lock_release>
 800f244:	230c      	movs	r3, #12
 800f246:	603b      	str	r3, [r7, #0]
 800f248:	e7ee      	b.n	800f228 <__sfp+0x60>
 800f24a:	bf00      	nop
 800f24c:	08086ef8 	.word	0x08086ef8
 800f250:	ffff0001 	.word	0xffff0001

0800f254 <_fwalk_reent>:
 800f254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f258:	4606      	mov	r6, r0
 800f25a:	4688      	mov	r8, r1
 800f25c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f260:	2700      	movs	r7, #0
 800f262:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f266:	f1b9 0901 	subs.w	r9, r9, #1
 800f26a:	d505      	bpl.n	800f278 <_fwalk_reent+0x24>
 800f26c:	6824      	ldr	r4, [r4, #0]
 800f26e:	2c00      	cmp	r4, #0
 800f270:	d1f7      	bne.n	800f262 <_fwalk_reent+0xe>
 800f272:	4638      	mov	r0, r7
 800f274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f278:	89ab      	ldrh	r3, [r5, #12]
 800f27a:	2b01      	cmp	r3, #1
 800f27c:	d907      	bls.n	800f28e <_fwalk_reent+0x3a>
 800f27e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f282:	3301      	adds	r3, #1
 800f284:	d003      	beq.n	800f28e <_fwalk_reent+0x3a>
 800f286:	4629      	mov	r1, r5
 800f288:	4630      	mov	r0, r6
 800f28a:	47c0      	blx	r8
 800f28c:	4307      	orrs	r7, r0
 800f28e:	3568      	adds	r5, #104	; 0x68
 800f290:	e7e9      	b.n	800f266 <_fwalk_reent+0x12>

0800f292 <__retarget_lock_init_recursive>:
 800f292:	4770      	bx	lr

0800f294 <__retarget_lock_acquire_recursive>:
 800f294:	4770      	bx	lr

0800f296 <__retarget_lock_release_recursive>:
 800f296:	4770      	bx	lr

0800f298 <__malloc_lock>:
 800f298:	4801      	ldr	r0, [pc, #4]	; (800f2a0 <__malloc_lock+0x8>)
 800f29a:	f7ff bffb 	b.w	800f294 <__retarget_lock_acquire_recursive>
 800f29e:	bf00      	nop
 800f2a0:	20006b68 	.word	0x20006b68

0800f2a4 <__malloc_unlock>:
 800f2a4:	4801      	ldr	r0, [pc, #4]	; (800f2ac <__malloc_unlock+0x8>)
 800f2a6:	f7ff bff6 	b.w	800f296 <__retarget_lock_release_recursive>
 800f2aa:	bf00      	nop
 800f2ac:	20006b68 	.word	0x20006b68

0800f2b0 <__sfputc_r>:
 800f2b0:	6893      	ldr	r3, [r2, #8]
 800f2b2:	3b01      	subs	r3, #1
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	b410      	push	{r4}
 800f2b8:	6093      	str	r3, [r2, #8]
 800f2ba:	da08      	bge.n	800f2ce <__sfputc_r+0x1e>
 800f2bc:	6994      	ldr	r4, [r2, #24]
 800f2be:	42a3      	cmp	r3, r4
 800f2c0:	db01      	blt.n	800f2c6 <__sfputc_r+0x16>
 800f2c2:	290a      	cmp	r1, #10
 800f2c4:	d103      	bne.n	800f2ce <__sfputc_r+0x1e>
 800f2c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2ca:	f000 bb6b 	b.w	800f9a4 <__swbuf_r>
 800f2ce:	6813      	ldr	r3, [r2, #0]
 800f2d0:	1c58      	adds	r0, r3, #1
 800f2d2:	6010      	str	r0, [r2, #0]
 800f2d4:	7019      	strb	r1, [r3, #0]
 800f2d6:	4608      	mov	r0, r1
 800f2d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2dc:	4770      	bx	lr

0800f2de <__sfputs_r>:
 800f2de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2e0:	4606      	mov	r6, r0
 800f2e2:	460f      	mov	r7, r1
 800f2e4:	4614      	mov	r4, r2
 800f2e6:	18d5      	adds	r5, r2, r3
 800f2e8:	42ac      	cmp	r4, r5
 800f2ea:	d101      	bne.n	800f2f0 <__sfputs_r+0x12>
 800f2ec:	2000      	movs	r0, #0
 800f2ee:	e007      	b.n	800f300 <__sfputs_r+0x22>
 800f2f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2f4:	463a      	mov	r2, r7
 800f2f6:	4630      	mov	r0, r6
 800f2f8:	f7ff ffda 	bl	800f2b0 <__sfputc_r>
 800f2fc:	1c43      	adds	r3, r0, #1
 800f2fe:	d1f3      	bne.n	800f2e8 <__sfputs_r+0xa>
 800f300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f304 <_vfiprintf_r>:
 800f304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f308:	460d      	mov	r5, r1
 800f30a:	b09d      	sub	sp, #116	; 0x74
 800f30c:	4614      	mov	r4, r2
 800f30e:	4698      	mov	r8, r3
 800f310:	4606      	mov	r6, r0
 800f312:	b118      	cbz	r0, 800f31c <_vfiprintf_r+0x18>
 800f314:	6983      	ldr	r3, [r0, #24]
 800f316:	b90b      	cbnz	r3, 800f31c <_vfiprintf_r+0x18>
 800f318:	f7ff ff1e 	bl	800f158 <__sinit>
 800f31c:	4b89      	ldr	r3, [pc, #548]	; (800f544 <_vfiprintf_r+0x240>)
 800f31e:	429d      	cmp	r5, r3
 800f320:	d11b      	bne.n	800f35a <_vfiprintf_r+0x56>
 800f322:	6875      	ldr	r5, [r6, #4]
 800f324:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f326:	07d9      	lsls	r1, r3, #31
 800f328:	d405      	bmi.n	800f336 <_vfiprintf_r+0x32>
 800f32a:	89ab      	ldrh	r3, [r5, #12]
 800f32c:	059a      	lsls	r2, r3, #22
 800f32e:	d402      	bmi.n	800f336 <_vfiprintf_r+0x32>
 800f330:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f332:	f7ff ffaf 	bl	800f294 <__retarget_lock_acquire_recursive>
 800f336:	89ab      	ldrh	r3, [r5, #12]
 800f338:	071b      	lsls	r3, r3, #28
 800f33a:	d501      	bpl.n	800f340 <_vfiprintf_r+0x3c>
 800f33c:	692b      	ldr	r3, [r5, #16]
 800f33e:	b9eb      	cbnz	r3, 800f37c <_vfiprintf_r+0x78>
 800f340:	4629      	mov	r1, r5
 800f342:	4630      	mov	r0, r6
 800f344:	f000 fb92 	bl	800fa6c <__swsetup_r>
 800f348:	b1c0      	cbz	r0, 800f37c <_vfiprintf_r+0x78>
 800f34a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f34c:	07dc      	lsls	r4, r3, #31
 800f34e:	d50e      	bpl.n	800f36e <_vfiprintf_r+0x6a>
 800f350:	f04f 30ff 	mov.w	r0, #4294967295
 800f354:	b01d      	add	sp, #116	; 0x74
 800f356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f35a:	4b7b      	ldr	r3, [pc, #492]	; (800f548 <_vfiprintf_r+0x244>)
 800f35c:	429d      	cmp	r5, r3
 800f35e:	d101      	bne.n	800f364 <_vfiprintf_r+0x60>
 800f360:	68b5      	ldr	r5, [r6, #8]
 800f362:	e7df      	b.n	800f324 <_vfiprintf_r+0x20>
 800f364:	4b79      	ldr	r3, [pc, #484]	; (800f54c <_vfiprintf_r+0x248>)
 800f366:	429d      	cmp	r5, r3
 800f368:	bf08      	it	eq
 800f36a:	68f5      	ldreq	r5, [r6, #12]
 800f36c:	e7da      	b.n	800f324 <_vfiprintf_r+0x20>
 800f36e:	89ab      	ldrh	r3, [r5, #12]
 800f370:	0598      	lsls	r0, r3, #22
 800f372:	d4ed      	bmi.n	800f350 <_vfiprintf_r+0x4c>
 800f374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f376:	f7ff ff8e 	bl	800f296 <__retarget_lock_release_recursive>
 800f37a:	e7e9      	b.n	800f350 <_vfiprintf_r+0x4c>
 800f37c:	2300      	movs	r3, #0
 800f37e:	9309      	str	r3, [sp, #36]	; 0x24
 800f380:	2320      	movs	r3, #32
 800f382:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f386:	f8cd 800c 	str.w	r8, [sp, #12]
 800f38a:	2330      	movs	r3, #48	; 0x30
 800f38c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f550 <_vfiprintf_r+0x24c>
 800f390:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f394:	f04f 0901 	mov.w	r9, #1
 800f398:	4623      	mov	r3, r4
 800f39a:	469a      	mov	sl, r3
 800f39c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3a0:	b10a      	cbz	r2, 800f3a6 <_vfiprintf_r+0xa2>
 800f3a2:	2a25      	cmp	r2, #37	; 0x25
 800f3a4:	d1f9      	bne.n	800f39a <_vfiprintf_r+0x96>
 800f3a6:	ebba 0b04 	subs.w	fp, sl, r4
 800f3aa:	d00b      	beq.n	800f3c4 <_vfiprintf_r+0xc0>
 800f3ac:	465b      	mov	r3, fp
 800f3ae:	4622      	mov	r2, r4
 800f3b0:	4629      	mov	r1, r5
 800f3b2:	4630      	mov	r0, r6
 800f3b4:	f7ff ff93 	bl	800f2de <__sfputs_r>
 800f3b8:	3001      	adds	r0, #1
 800f3ba:	f000 80aa 	beq.w	800f512 <_vfiprintf_r+0x20e>
 800f3be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3c0:	445a      	add	r2, fp
 800f3c2:	9209      	str	r2, [sp, #36]	; 0x24
 800f3c4:	f89a 3000 	ldrb.w	r3, [sl]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	f000 80a2 	beq.w	800f512 <_vfiprintf_r+0x20e>
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	f04f 32ff 	mov.w	r2, #4294967295
 800f3d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f3d8:	f10a 0a01 	add.w	sl, sl, #1
 800f3dc:	9304      	str	r3, [sp, #16]
 800f3de:	9307      	str	r3, [sp, #28]
 800f3e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f3e4:	931a      	str	r3, [sp, #104]	; 0x68
 800f3e6:	4654      	mov	r4, sl
 800f3e8:	2205      	movs	r2, #5
 800f3ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3ee:	4858      	ldr	r0, [pc, #352]	; (800f550 <_vfiprintf_r+0x24c>)
 800f3f0:	f7f0 feee 	bl	80001d0 <memchr>
 800f3f4:	9a04      	ldr	r2, [sp, #16]
 800f3f6:	b9d8      	cbnz	r0, 800f430 <_vfiprintf_r+0x12c>
 800f3f8:	06d1      	lsls	r1, r2, #27
 800f3fa:	bf44      	itt	mi
 800f3fc:	2320      	movmi	r3, #32
 800f3fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f402:	0713      	lsls	r3, r2, #28
 800f404:	bf44      	itt	mi
 800f406:	232b      	movmi	r3, #43	; 0x2b
 800f408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f40c:	f89a 3000 	ldrb.w	r3, [sl]
 800f410:	2b2a      	cmp	r3, #42	; 0x2a
 800f412:	d015      	beq.n	800f440 <_vfiprintf_r+0x13c>
 800f414:	9a07      	ldr	r2, [sp, #28]
 800f416:	4654      	mov	r4, sl
 800f418:	2000      	movs	r0, #0
 800f41a:	f04f 0c0a 	mov.w	ip, #10
 800f41e:	4621      	mov	r1, r4
 800f420:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f424:	3b30      	subs	r3, #48	; 0x30
 800f426:	2b09      	cmp	r3, #9
 800f428:	d94e      	bls.n	800f4c8 <_vfiprintf_r+0x1c4>
 800f42a:	b1b0      	cbz	r0, 800f45a <_vfiprintf_r+0x156>
 800f42c:	9207      	str	r2, [sp, #28]
 800f42e:	e014      	b.n	800f45a <_vfiprintf_r+0x156>
 800f430:	eba0 0308 	sub.w	r3, r0, r8
 800f434:	fa09 f303 	lsl.w	r3, r9, r3
 800f438:	4313      	orrs	r3, r2
 800f43a:	9304      	str	r3, [sp, #16]
 800f43c:	46a2      	mov	sl, r4
 800f43e:	e7d2      	b.n	800f3e6 <_vfiprintf_r+0xe2>
 800f440:	9b03      	ldr	r3, [sp, #12]
 800f442:	1d19      	adds	r1, r3, #4
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	9103      	str	r1, [sp, #12]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	bfbb      	ittet	lt
 800f44c:	425b      	neglt	r3, r3
 800f44e:	f042 0202 	orrlt.w	r2, r2, #2
 800f452:	9307      	strge	r3, [sp, #28]
 800f454:	9307      	strlt	r3, [sp, #28]
 800f456:	bfb8      	it	lt
 800f458:	9204      	strlt	r2, [sp, #16]
 800f45a:	7823      	ldrb	r3, [r4, #0]
 800f45c:	2b2e      	cmp	r3, #46	; 0x2e
 800f45e:	d10c      	bne.n	800f47a <_vfiprintf_r+0x176>
 800f460:	7863      	ldrb	r3, [r4, #1]
 800f462:	2b2a      	cmp	r3, #42	; 0x2a
 800f464:	d135      	bne.n	800f4d2 <_vfiprintf_r+0x1ce>
 800f466:	9b03      	ldr	r3, [sp, #12]
 800f468:	1d1a      	adds	r2, r3, #4
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	9203      	str	r2, [sp, #12]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	bfb8      	it	lt
 800f472:	f04f 33ff 	movlt.w	r3, #4294967295
 800f476:	3402      	adds	r4, #2
 800f478:	9305      	str	r3, [sp, #20]
 800f47a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f560 <_vfiprintf_r+0x25c>
 800f47e:	7821      	ldrb	r1, [r4, #0]
 800f480:	2203      	movs	r2, #3
 800f482:	4650      	mov	r0, sl
 800f484:	f7f0 fea4 	bl	80001d0 <memchr>
 800f488:	b140      	cbz	r0, 800f49c <_vfiprintf_r+0x198>
 800f48a:	2340      	movs	r3, #64	; 0x40
 800f48c:	eba0 000a 	sub.w	r0, r0, sl
 800f490:	fa03 f000 	lsl.w	r0, r3, r0
 800f494:	9b04      	ldr	r3, [sp, #16]
 800f496:	4303      	orrs	r3, r0
 800f498:	3401      	adds	r4, #1
 800f49a:	9304      	str	r3, [sp, #16]
 800f49c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4a0:	482c      	ldr	r0, [pc, #176]	; (800f554 <_vfiprintf_r+0x250>)
 800f4a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f4a6:	2206      	movs	r2, #6
 800f4a8:	f7f0 fe92 	bl	80001d0 <memchr>
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	d03f      	beq.n	800f530 <_vfiprintf_r+0x22c>
 800f4b0:	4b29      	ldr	r3, [pc, #164]	; (800f558 <_vfiprintf_r+0x254>)
 800f4b2:	bb1b      	cbnz	r3, 800f4fc <_vfiprintf_r+0x1f8>
 800f4b4:	9b03      	ldr	r3, [sp, #12]
 800f4b6:	3307      	adds	r3, #7
 800f4b8:	f023 0307 	bic.w	r3, r3, #7
 800f4bc:	3308      	adds	r3, #8
 800f4be:	9303      	str	r3, [sp, #12]
 800f4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4c2:	443b      	add	r3, r7
 800f4c4:	9309      	str	r3, [sp, #36]	; 0x24
 800f4c6:	e767      	b.n	800f398 <_vfiprintf_r+0x94>
 800f4c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f4cc:	460c      	mov	r4, r1
 800f4ce:	2001      	movs	r0, #1
 800f4d0:	e7a5      	b.n	800f41e <_vfiprintf_r+0x11a>
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	3401      	adds	r4, #1
 800f4d6:	9305      	str	r3, [sp, #20]
 800f4d8:	4619      	mov	r1, r3
 800f4da:	f04f 0c0a 	mov.w	ip, #10
 800f4de:	4620      	mov	r0, r4
 800f4e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4e4:	3a30      	subs	r2, #48	; 0x30
 800f4e6:	2a09      	cmp	r2, #9
 800f4e8:	d903      	bls.n	800f4f2 <_vfiprintf_r+0x1ee>
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d0c5      	beq.n	800f47a <_vfiprintf_r+0x176>
 800f4ee:	9105      	str	r1, [sp, #20]
 800f4f0:	e7c3      	b.n	800f47a <_vfiprintf_r+0x176>
 800f4f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f4f6:	4604      	mov	r4, r0
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	e7f0      	b.n	800f4de <_vfiprintf_r+0x1da>
 800f4fc:	ab03      	add	r3, sp, #12
 800f4fe:	9300      	str	r3, [sp, #0]
 800f500:	462a      	mov	r2, r5
 800f502:	4b16      	ldr	r3, [pc, #88]	; (800f55c <_vfiprintf_r+0x258>)
 800f504:	a904      	add	r1, sp, #16
 800f506:	4630      	mov	r0, r6
 800f508:	f3af 8000 	nop.w
 800f50c:	4607      	mov	r7, r0
 800f50e:	1c78      	adds	r0, r7, #1
 800f510:	d1d6      	bne.n	800f4c0 <_vfiprintf_r+0x1bc>
 800f512:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f514:	07d9      	lsls	r1, r3, #31
 800f516:	d405      	bmi.n	800f524 <_vfiprintf_r+0x220>
 800f518:	89ab      	ldrh	r3, [r5, #12]
 800f51a:	059a      	lsls	r2, r3, #22
 800f51c:	d402      	bmi.n	800f524 <_vfiprintf_r+0x220>
 800f51e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f520:	f7ff feb9 	bl	800f296 <__retarget_lock_release_recursive>
 800f524:	89ab      	ldrh	r3, [r5, #12]
 800f526:	065b      	lsls	r3, r3, #25
 800f528:	f53f af12 	bmi.w	800f350 <_vfiprintf_r+0x4c>
 800f52c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f52e:	e711      	b.n	800f354 <_vfiprintf_r+0x50>
 800f530:	ab03      	add	r3, sp, #12
 800f532:	9300      	str	r3, [sp, #0]
 800f534:	462a      	mov	r2, r5
 800f536:	4b09      	ldr	r3, [pc, #36]	; (800f55c <_vfiprintf_r+0x258>)
 800f538:	a904      	add	r1, sp, #16
 800f53a:	4630      	mov	r0, r6
 800f53c:	f000 f880 	bl	800f640 <_printf_i>
 800f540:	e7e4      	b.n	800f50c <_vfiprintf_r+0x208>
 800f542:	bf00      	nop
 800f544:	08086f1c 	.word	0x08086f1c
 800f548:	08086f3c 	.word	0x08086f3c
 800f54c:	08086efc 	.word	0x08086efc
 800f550:	08086f5c 	.word	0x08086f5c
 800f554:	08086f66 	.word	0x08086f66
 800f558:	00000000 	.word	0x00000000
 800f55c:	0800f2df 	.word	0x0800f2df
 800f560:	08086f62 	.word	0x08086f62

0800f564 <_printf_common>:
 800f564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f568:	4616      	mov	r6, r2
 800f56a:	4699      	mov	r9, r3
 800f56c:	688a      	ldr	r2, [r1, #8]
 800f56e:	690b      	ldr	r3, [r1, #16]
 800f570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f574:	4293      	cmp	r3, r2
 800f576:	bfb8      	it	lt
 800f578:	4613      	movlt	r3, r2
 800f57a:	6033      	str	r3, [r6, #0]
 800f57c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f580:	4607      	mov	r7, r0
 800f582:	460c      	mov	r4, r1
 800f584:	b10a      	cbz	r2, 800f58a <_printf_common+0x26>
 800f586:	3301      	adds	r3, #1
 800f588:	6033      	str	r3, [r6, #0]
 800f58a:	6823      	ldr	r3, [r4, #0]
 800f58c:	0699      	lsls	r1, r3, #26
 800f58e:	bf42      	ittt	mi
 800f590:	6833      	ldrmi	r3, [r6, #0]
 800f592:	3302      	addmi	r3, #2
 800f594:	6033      	strmi	r3, [r6, #0]
 800f596:	6825      	ldr	r5, [r4, #0]
 800f598:	f015 0506 	ands.w	r5, r5, #6
 800f59c:	d106      	bne.n	800f5ac <_printf_common+0x48>
 800f59e:	f104 0a19 	add.w	sl, r4, #25
 800f5a2:	68e3      	ldr	r3, [r4, #12]
 800f5a4:	6832      	ldr	r2, [r6, #0]
 800f5a6:	1a9b      	subs	r3, r3, r2
 800f5a8:	42ab      	cmp	r3, r5
 800f5aa:	dc26      	bgt.n	800f5fa <_printf_common+0x96>
 800f5ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f5b0:	1e13      	subs	r3, r2, #0
 800f5b2:	6822      	ldr	r2, [r4, #0]
 800f5b4:	bf18      	it	ne
 800f5b6:	2301      	movne	r3, #1
 800f5b8:	0692      	lsls	r2, r2, #26
 800f5ba:	d42b      	bmi.n	800f614 <_printf_common+0xb0>
 800f5bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f5c0:	4649      	mov	r1, r9
 800f5c2:	4638      	mov	r0, r7
 800f5c4:	47c0      	blx	r8
 800f5c6:	3001      	adds	r0, #1
 800f5c8:	d01e      	beq.n	800f608 <_printf_common+0xa4>
 800f5ca:	6823      	ldr	r3, [r4, #0]
 800f5cc:	68e5      	ldr	r5, [r4, #12]
 800f5ce:	6832      	ldr	r2, [r6, #0]
 800f5d0:	f003 0306 	and.w	r3, r3, #6
 800f5d4:	2b04      	cmp	r3, #4
 800f5d6:	bf08      	it	eq
 800f5d8:	1aad      	subeq	r5, r5, r2
 800f5da:	68a3      	ldr	r3, [r4, #8]
 800f5dc:	6922      	ldr	r2, [r4, #16]
 800f5de:	bf0c      	ite	eq
 800f5e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f5e4:	2500      	movne	r5, #0
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	bfc4      	itt	gt
 800f5ea:	1a9b      	subgt	r3, r3, r2
 800f5ec:	18ed      	addgt	r5, r5, r3
 800f5ee:	2600      	movs	r6, #0
 800f5f0:	341a      	adds	r4, #26
 800f5f2:	42b5      	cmp	r5, r6
 800f5f4:	d11a      	bne.n	800f62c <_printf_common+0xc8>
 800f5f6:	2000      	movs	r0, #0
 800f5f8:	e008      	b.n	800f60c <_printf_common+0xa8>
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	4652      	mov	r2, sl
 800f5fe:	4649      	mov	r1, r9
 800f600:	4638      	mov	r0, r7
 800f602:	47c0      	blx	r8
 800f604:	3001      	adds	r0, #1
 800f606:	d103      	bne.n	800f610 <_printf_common+0xac>
 800f608:	f04f 30ff 	mov.w	r0, #4294967295
 800f60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f610:	3501      	adds	r5, #1
 800f612:	e7c6      	b.n	800f5a2 <_printf_common+0x3e>
 800f614:	18e1      	adds	r1, r4, r3
 800f616:	1c5a      	adds	r2, r3, #1
 800f618:	2030      	movs	r0, #48	; 0x30
 800f61a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f61e:	4422      	add	r2, r4
 800f620:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f624:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f628:	3302      	adds	r3, #2
 800f62a:	e7c7      	b.n	800f5bc <_printf_common+0x58>
 800f62c:	2301      	movs	r3, #1
 800f62e:	4622      	mov	r2, r4
 800f630:	4649      	mov	r1, r9
 800f632:	4638      	mov	r0, r7
 800f634:	47c0      	blx	r8
 800f636:	3001      	adds	r0, #1
 800f638:	d0e6      	beq.n	800f608 <_printf_common+0xa4>
 800f63a:	3601      	adds	r6, #1
 800f63c:	e7d9      	b.n	800f5f2 <_printf_common+0x8e>
	...

0800f640 <_printf_i>:
 800f640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f644:	460c      	mov	r4, r1
 800f646:	4691      	mov	r9, r2
 800f648:	7e27      	ldrb	r7, [r4, #24]
 800f64a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f64c:	2f78      	cmp	r7, #120	; 0x78
 800f64e:	4680      	mov	r8, r0
 800f650:	469a      	mov	sl, r3
 800f652:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f656:	d807      	bhi.n	800f668 <_printf_i+0x28>
 800f658:	2f62      	cmp	r7, #98	; 0x62
 800f65a:	d80a      	bhi.n	800f672 <_printf_i+0x32>
 800f65c:	2f00      	cmp	r7, #0
 800f65e:	f000 80d8 	beq.w	800f812 <_printf_i+0x1d2>
 800f662:	2f58      	cmp	r7, #88	; 0x58
 800f664:	f000 80a3 	beq.w	800f7ae <_printf_i+0x16e>
 800f668:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f66c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f670:	e03a      	b.n	800f6e8 <_printf_i+0xa8>
 800f672:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f676:	2b15      	cmp	r3, #21
 800f678:	d8f6      	bhi.n	800f668 <_printf_i+0x28>
 800f67a:	a001      	add	r0, pc, #4	; (adr r0, 800f680 <_printf_i+0x40>)
 800f67c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f680:	0800f6d9 	.word	0x0800f6d9
 800f684:	0800f6ed 	.word	0x0800f6ed
 800f688:	0800f669 	.word	0x0800f669
 800f68c:	0800f669 	.word	0x0800f669
 800f690:	0800f669 	.word	0x0800f669
 800f694:	0800f669 	.word	0x0800f669
 800f698:	0800f6ed 	.word	0x0800f6ed
 800f69c:	0800f669 	.word	0x0800f669
 800f6a0:	0800f669 	.word	0x0800f669
 800f6a4:	0800f669 	.word	0x0800f669
 800f6a8:	0800f669 	.word	0x0800f669
 800f6ac:	0800f7f9 	.word	0x0800f7f9
 800f6b0:	0800f71d 	.word	0x0800f71d
 800f6b4:	0800f7db 	.word	0x0800f7db
 800f6b8:	0800f669 	.word	0x0800f669
 800f6bc:	0800f669 	.word	0x0800f669
 800f6c0:	0800f81b 	.word	0x0800f81b
 800f6c4:	0800f669 	.word	0x0800f669
 800f6c8:	0800f71d 	.word	0x0800f71d
 800f6cc:	0800f669 	.word	0x0800f669
 800f6d0:	0800f669 	.word	0x0800f669
 800f6d4:	0800f7e3 	.word	0x0800f7e3
 800f6d8:	680b      	ldr	r3, [r1, #0]
 800f6da:	1d1a      	adds	r2, r3, #4
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	600a      	str	r2, [r1, #0]
 800f6e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f6e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f6e8:	2301      	movs	r3, #1
 800f6ea:	e0a3      	b.n	800f834 <_printf_i+0x1f4>
 800f6ec:	6825      	ldr	r5, [r4, #0]
 800f6ee:	6808      	ldr	r0, [r1, #0]
 800f6f0:	062e      	lsls	r6, r5, #24
 800f6f2:	f100 0304 	add.w	r3, r0, #4
 800f6f6:	d50a      	bpl.n	800f70e <_printf_i+0xce>
 800f6f8:	6805      	ldr	r5, [r0, #0]
 800f6fa:	600b      	str	r3, [r1, #0]
 800f6fc:	2d00      	cmp	r5, #0
 800f6fe:	da03      	bge.n	800f708 <_printf_i+0xc8>
 800f700:	232d      	movs	r3, #45	; 0x2d
 800f702:	426d      	negs	r5, r5
 800f704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f708:	485e      	ldr	r0, [pc, #376]	; (800f884 <_printf_i+0x244>)
 800f70a:	230a      	movs	r3, #10
 800f70c:	e019      	b.n	800f742 <_printf_i+0x102>
 800f70e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f712:	6805      	ldr	r5, [r0, #0]
 800f714:	600b      	str	r3, [r1, #0]
 800f716:	bf18      	it	ne
 800f718:	b22d      	sxthne	r5, r5
 800f71a:	e7ef      	b.n	800f6fc <_printf_i+0xbc>
 800f71c:	680b      	ldr	r3, [r1, #0]
 800f71e:	6825      	ldr	r5, [r4, #0]
 800f720:	1d18      	adds	r0, r3, #4
 800f722:	6008      	str	r0, [r1, #0]
 800f724:	0628      	lsls	r0, r5, #24
 800f726:	d501      	bpl.n	800f72c <_printf_i+0xec>
 800f728:	681d      	ldr	r5, [r3, #0]
 800f72a:	e002      	b.n	800f732 <_printf_i+0xf2>
 800f72c:	0669      	lsls	r1, r5, #25
 800f72e:	d5fb      	bpl.n	800f728 <_printf_i+0xe8>
 800f730:	881d      	ldrh	r5, [r3, #0]
 800f732:	4854      	ldr	r0, [pc, #336]	; (800f884 <_printf_i+0x244>)
 800f734:	2f6f      	cmp	r7, #111	; 0x6f
 800f736:	bf0c      	ite	eq
 800f738:	2308      	moveq	r3, #8
 800f73a:	230a      	movne	r3, #10
 800f73c:	2100      	movs	r1, #0
 800f73e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f742:	6866      	ldr	r6, [r4, #4]
 800f744:	60a6      	str	r6, [r4, #8]
 800f746:	2e00      	cmp	r6, #0
 800f748:	bfa2      	ittt	ge
 800f74a:	6821      	ldrge	r1, [r4, #0]
 800f74c:	f021 0104 	bicge.w	r1, r1, #4
 800f750:	6021      	strge	r1, [r4, #0]
 800f752:	b90d      	cbnz	r5, 800f758 <_printf_i+0x118>
 800f754:	2e00      	cmp	r6, #0
 800f756:	d04d      	beq.n	800f7f4 <_printf_i+0x1b4>
 800f758:	4616      	mov	r6, r2
 800f75a:	fbb5 f1f3 	udiv	r1, r5, r3
 800f75e:	fb03 5711 	mls	r7, r3, r1, r5
 800f762:	5dc7      	ldrb	r7, [r0, r7]
 800f764:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f768:	462f      	mov	r7, r5
 800f76a:	42bb      	cmp	r3, r7
 800f76c:	460d      	mov	r5, r1
 800f76e:	d9f4      	bls.n	800f75a <_printf_i+0x11a>
 800f770:	2b08      	cmp	r3, #8
 800f772:	d10b      	bne.n	800f78c <_printf_i+0x14c>
 800f774:	6823      	ldr	r3, [r4, #0]
 800f776:	07df      	lsls	r7, r3, #31
 800f778:	d508      	bpl.n	800f78c <_printf_i+0x14c>
 800f77a:	6923      	ldr	r3, [r4, #16]
 800f77c:	6861      	ldr	r1, [r4, #4]
 800f77e:	4299      	cmp	r1, r3
 800f780:	bfde      	ittt	le
 800f782:	2330      	movle	r3, #48	; 0x30
 800f784:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f788:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f78c:	1b92      	subs	r2, r2, r6
 800f78e:	6122      	str	r2, [r4, #16]
 800f790:	f8cd a000 	str.w	sl, [sp]
 800f794:	464b      	mov	r3, r9
 800f796:	aa03      	add	r2, sp, #12
 800f798:	4621      	mov	r1, r4
 800f79a:	4640      	mov	r0, r8
 800f79c:	f7ff fee2 	bl	800f564 <_printf_common>
 800f7a0:	3001      	adds	r0, #1
 800f7a2:	d14c      	bne.n	800f83e <_printf_i+0x1fe>
 800f7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f7a8:	b004      	add	sp, #16
 800f7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7ae:	4835      	ldr	r0, [pc, #212]	; (800f884 <_printf_i+0x244>)
 800f7b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f7b4:	6823      	ldr	r3, [r4, #0]
 800f7b6:	680e      	ldr	r6, [r1, #0]
 800f7b8:	061f      	lsls	r7, r3, #24
 800f7ba:	f856 5b04 	ldr.w	r5, [r6], #4
 800f7be:	600e      	str	r6, [r1, #0]
 800f7c0:	d514      	bpl.n	800f7ec <_printf_i+0x1ac>
 800f7c2:	07d9      	lsls	r1, r3, #31
 800f7c4:	bf44      	itt	mi
 800f7c6:	f043 0320 	orrmi.w	r3, r3, #32
 800f7ca:	6023      	strmi	r3, [r4, #0]
 800f7cc:	b91d      	cbnz	r5, 800f7d6 <_printf_i+0x196>
 800f7ce:	6823      	ldr	r3, [r4, #0]
 800f7d0:	f023 0320 	bic.w	r3, r3, #32
 800f7d4:	6023      	str	r3, [r4, #0]
 800f7d6:	2310      	movs	r3, #16
 800f7d8:	e7b0      	b.n	800f73c <_printf_i+0xfc>
 800f7da:	6823      	ldr	r3, [r4, #0]
 800f7dc:	f043 0320 	orr.w	r3, r3, #32
 800f7e0:	6023      	str	r3, [r4, #0]
 800f7e2:	2378      	movs	r3, #120	; 0x78
 800f7e4:	4828      	ldr	r0, [pc, #160]	; (800f888 <_printf_i+0x248>)
 800f7e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f7ea:	e7e3      	b.n	800f7b4 <_printf_i+0x174>
 800f7ec:	065e      	lsls	r6, r3, #25
 800f7ee:	bf48      	it	mi
 800f7f0:	b2ad      	uxthmi	r5, r5
 800f7f2:	e7e6      	b.n	800f7c2 <_printf_i+0x182>
 800f7f4:	4616      	mov	r6, r2
 800f7f6:	e7bb      	b.n	800f770 <_printf_i+0x130>
 800f7f8:	680b      	ldr	r3, [r1, #0]
 800f7fa:	6826      	ldr	r6, [r4, #0]
 800f7fc:	6960      	ldr	r0, [r4, #20]
 800f7fe:	1d1d      	adds	r5, r3, #4
 800f800:	600d      	str	r5, [r1, #0]
 800f802:	0635      	lsls	r5, r6, #24
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	d501      	bpl.n	800f80c <_printf_i+0x1cc>
 800f808:	6018      	str	r0, [r3, #0]
 800f80a:	e002      	b.n	800f812 <_printf_i+0x1d2>
 800f80c:	0671      	lsls	r1, r6, #25
 800f80e:	d5fb      	bpl.n	800f808 <_printf_i+0x1c8>
 800f810:	8018      	strh	r0, [r3, #0]
 800f812:	2300      	movs	r3, #0
 800f814:	6123      	str	r3, [r4, #16]
 800f816:	4616      	mov	r6, r2
 800f818:	e7ba      	b.n	800f790 <_printf_i+0x150>
 800f81a:	680b      	ldr	r3, [r1, #0]
 800f81c:	1d1a      	adds	r2, r3, #4
 800f81e:	600a      	str	r2, [r1, #0]
 800f820:	681e      	ldr	r6, [r3, #0]
 800f822:	6862      	ldr	r2, [r4, #4]
 800f824:	2100      	movs	r1, #0
 800f826:	4630      	mov	r0, r6
 800f828:	f7f0 fcd2 	bl	80001d0 <memchr>
 800f82c:	b108      	cbz	r0, 800f832 <_printf_i+0x1f2>
 800f82e:	1b80      	subs	r0, r0, r6
 800f830:	6060      	str	r0, [r4, #4]
 800f832:	6863      	ldr	r3, [r4, #4]
 800f834:	6123      	str	r3, [r4, #16]
 800f836:	2300      	movs	r3, #0
 800f838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f83c:	e7a8      	b.n	800f790 <_printf_i+0x150>
 800f83e:	6923      	ldr	r3, [r4, #16]
 800f840:	4632      	mov	r2, r6
 800f842:	4649      	mov	r1, r9
 800f844:	4640      	mov	r0, r8
 800f846:	47d0      	blx	sl
 800f848:	3001      	adds	r0, #1
 800f84a:	d0ab      	beq.n	800f7a4 <_printf_i+0x164>
 800f84c:	6823      	ldr	r3, [r4, #0]
 800f84e:	079b      	lsls	r3, r3, #30
 800f850:	d413      	bmi.n	800f87a <_printf_i+0x23a>
 800f852:	68e0      	ldr	r0, [r4, #12]
 800f854:	9b03      	ldr	r3, [sp, #12]
 800f856:	4298      	cmp	r0, r3
 800f858:	bfb8      	it	lt
 800f85a:	4618      	movlt	r0, r3
 800f85c:	e7a4      	b.n	800f7a8 <_printf_i+0x168>
 800f85e:	2301      	movs	r3, #1
 800f860:	4632      	mov	r2, r6
 800f862:	4649      	mov	r1, r9
 800f864:	4640      	mov	r0, r8
 800f866:	47d0      	blx	sl
 800f868:	3001      	adds	r0, #1
 800f86a:	d09b      	beq.n	800f7a4 <_printf_i+0x164>
 800f86c:	3501      	adds	r5, #1
 800f86e:	68e3      	ldr	r3, [r4, #12]
 800f870:	9903      	ldr	r1, [sp, #12]
 800f872:	1a5b      	subs	r3, r3, r1
 800f874:	42ab      	cmp	r3, r5
 800f876:	dcf2      	bgt.n	800f85e <_printf_i+0x21e>
 800f878:	e7eb      	b.n	800f852 <_printf_i+0x212>
 800f87a:	2500      	movs	r5, #0
 800f87c:	f104 0619 	add.w	r6, r4, #25
 800f880:	e7f5      	b.n	800f86e <_printf_i+0x22e>
 800f882:	bf00      	nop
 800f884:	08086f6d 	.word	0x08086f6d
 800f888:	08086f7e 	.word	0x08086f7e

0800f88c <_putc_r>:
 800f88c:	b570      	push	{r4, r5, r6, lr}
 800f88e:	460d      	mov	r5, r1
 800f890:	4614      	mov	r4, r2
 800f892:	4606      	mov	r6, r0
 800f894:	b118      	cbz	r0, 800f89e <_putc_r+0x12>
 800f896:	6983      	ldr	r3, [r0, #24]
 800f898:	b90b      	cbnz	r3, 800f89e <_putc_r+0x12>
 800f89a:	f7ff fc5d 	bl	800f158 <__sinit>
 800f89e:	4b1c      	ldr	r3, [pc, #112]	; (800f910 <_putc_r+0x84>)
 800f8a0:	429c      	cmp	r4, r3
 800f8a2:	d124      	bne.n	800f8ee <_putc_r+0x62>
 800f8a4:	6874      	ldr	r4, [r6, #4]
 800f8a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f8a8:	07d8      	lsls	r0, r3, #31
 800f8aa:	d405      	bmi.n	800f8b8 <_putc_r+0x2c>
 800f8ac:	89a3      	ldrh	r3, [r4, #12]
 800f8ae:	0599      	lsls	r1, r3, #22
 800f8b0:	d402      	bmi.n	800f8b8 <_putc_r+0x2c>
 800f8b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8b4:	f7ff fcee 	bl	800f294 <__retarget_lock_acquire_recursive>
 800f8b8:	68a3      	ldr	r3, [r4, #8]
 800f8ba:	3b01      	subs	r3, #1
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	60a3      	str	r3, [r4, #8]
 800f8c0:	da05      	bge.n	800f8ce <_putc_r+0x42>
 800f8c2:	69a2      	ldr	r2, [r4, #24]
 800f8c4:	4293      	cmp	r3, r2
 800f8c6:	db1c      	blt.n	800f902 <_putc_r+0x76>
 800f8c8:	b2eb      	uxtb	r3, r5
 800f8ca:	2b0a      	cmp	r3, #10
 800f8cc:	d019      	beq.n	800f902 <_putc_r+0x76>
 800f8ce:	6823      	ldr	r3, [r4, #0]
 800f8d0:	1c5a      	adds	r2, r3, #1
 800f8d2:	6022      	str	r2, [r4, #0]
 800f8d4:	701d      	strb	r5, [r3, #0]
 800f8d6:	b2ed      	uxtb	r5, r5
 800f8d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f8da:	07da      	lsls	r2, r3, #31
 800f8dc:	d405      	bmi.n	800f8ea <_putc_r+0x5e>
 800f8de:	89a3      	ldrh	r3, [r4, #12]
 800f8e0:	059b      	lsls	r3, r3, #22
 800f8e2:	d402      	bmi.n	800f8ea <_putc_r+0x5e>
 800f8e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8e6:	f7ff fcd6 	bl	800f296 <__retarget_lock_release_recursive>
 800f8ea:	4628      	mov	r0, r5
 800f8ec:	bd70      	pop	{r4, r5, r6, pc}
 800f8ee:	4b09      	ldr	r3, [pc, #36]	; (800f914 <_putc_r+0x88>)
 800f8f0:	429c      	cmp	r4, r3
 800f8f2:	d101      	bne.n	800f8f8 <_putc_r+0x6c>
 800f8f4:	68b4      	ldr	r4, [r6, #8]
 800f8f6:	e7d6      	b.n	800f8a6 <_putc_r+0x1a>
 800f8f8:	4b07      	ldr	r3, [pc, #28]	; (800f918 <_putc_r+0x8c>)
 800f8fa:	429c      	cmp	r4, r3
 800f8fc:	bf08      	it	eq
 800f8fe:	68f4      	ldreq	r4, [r6, #12]
 800f900:	e7d1      	b.n	800f8a6 <_putc_r+0x1a>
 800f902:	4629      	mov	r1, r5
 800f904:	4622      	mov	r2, r4
 800f906:	4630      	mov	r0, r6
 800f908:	f000 f84c 	bl	800f9a4 <__swbuf_r>
 800f90c:	4605      	mov	r5, r0
 800f90e:	e7e3      	b.n	800f8d8 <_putc_r+0x4c>
 800f910:	08086f1c 	.word	0x08086f1c
 800f914:	08086f3c 	.word	0x08086f3c
 800f918:	08086efc 	.word	0x08086efc

0800f91c <__sread>:
 800f91c:	b510      	push	{r4, lr}
 800f91e:	460c      	mov	r4, r1
 800f920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f924:	f000 fa58 	bl	800fdd8 <_read_r>
 800f928:	2800      	cmp	r0, #0
 800f92a:	bfab      	itete	ge
 800f92c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f92e:	89a3      	ldrhlt	r3, [r4, #12]
 800f930:	181b      	addge	r3, r3, r0
 800f932:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f936:	bfac      	ite	ge
 800f938:	6563      	strge	r3, [r4, #84]	; 0x54
 800f93a:	81a3      	strhlt	r3, [r4, #12]
 800f93c:	bd10      	pop	{r4, pc}

0800f93e <__swrite>:
 800f93e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f942:	461f      	mov	r7, r3
 800f944:	898b      	ldrh	r3, [r1, #12]
 800f946:	05db      	lsls	r3, r3, #23
 800f948:	4605      	mov	r5, r0
 800f94a:	460c      	mov	r4, r1
 800f94c:	4616      	mov	r6, r2
 800f94e:	d505      	bpl.n	800f95c <__swrite+0x1e>
 800f950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f954:	2302      	movs	r3, #2
 800f956:	2200      	movs	r2, #0
 800f958:	f000 f9c8 	bl	800fcec <_lseek_r>
 800f95c:	89a3      	ldrh	r3, [r4, #12]
 800f95e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f962:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f966:	81a3      	strh	r3, [r4, #12]
 800f968:	4632      	mov	r2, r6
 800f96a:	463b      	mov	r3, r7
 800f96c:	4628      	mov	r0, r5
 800f96e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f972:	f000 b869 	b.w	800fa48 <_write_r>

0800f976 <__sseek>:
 800f976:	b510      	push	{r4, lr}
 800f978:	460c      	mov	r4, r1
 800f97a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f97e:	f000 f9b5 	bl	800fcec <_lseek_r>
 800f982:	1c43      	adds	r3, r0, #1
 800f984:	89a3      	ldrh	r3, [r4, #12]
 800f986:	bf15      	itete	ne
 800f988:	6560      	strne	r0, [r4, #84]	; 0x54
 800f98a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f98e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f992:	81a3      	strheq	r3, [r4, #12]
 800f994:	bf18      	it	ne
 800f996:	81a3      	strhne	r3, [r4, #12]
 800f998:	bd10      	pop	{r4, pc}

0800f99a <__sclose>:
 800f99a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f99e:	f000 b8d3 	b.w	800fb48 <_close_r>
	...

0800f9a4 <__swbuf_r>:
 800f9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9a6:	460e      	mov	r6, r1
 800f9a8:	4614      	mov	r4, r2
 800f9aa:	4605      	mov	r5, r0
 800f9ac:	b118      	cbz	r0, 800f9b6 <__swbuf_r+0x12>
 800f9ae:	6983      	ldr	r3, [r0, #24]
 800f9b0:	b90b      	cbnz	r3, 800f9b6 <__swbuf_r+0x12>
 800f9b2:	f7ff fbd1 	bl	800f158 <__sinit>
 800f9b6:	4b21      	ldr	r3, [pc, #132]	; (800fa3c <__swbuf_r+0x98>)
 800f9b8:	429c      	cmp	r4, r3
 800f9ba:	d12b      	bne.n	800fa14 <__swbuf_r+0x70>
 800f9bc:	686c      	ldr	r4, [r5, #4]
 800f9be:	69a3      	ldr	r3, [r4, #24]
 800f9c0:	60a3      	str	r3, [r4, #8]
 800f9c2:	89a3      	ldrh	r3, [r4, #12]
 800f9c4:	071a      	lsls	r2, r3, #28
 800f9c6:	d52f      	bpl.n	800fa28 <__swbuf_r+0x84>
 800f9c8:	6923      	ldr	r3, [r4, #16]
 800f9ca:	b36b      	cbz	r3, 800fa28 <__swbuf_r+0x84>
 800f9cc:	6923      	ldr	r3, [r4, #16]
 800f9ce:	6820      	ldr	r0, [r4, #0]
 800f9d0:	1ac0      	subs	r0, r0, r3
 800f9d2:	6963      	ldr	r3, [r4, #20]
 800f9d4:	b2f6      	uxtb	r6, r6
 800f9d6:	4283      	cmp	r3, r0
 800f9d8:	4637      	mov	r7, r6
 800f9da:	dc04      	bgt.n	800f9e6 <__swbuf_r+0x42>
 800f9dc:	4621      	mov	r1, r4
 800f9de:	4628      	mov	r0, r5
 800f9e0:	f000 f948 	bl	800fc74 <_fflush_r>
 800f9e4:	bb30      	cbnz	r0, 800fa34 <__swbuf_r+0x90>
 800f9e6:	68a3      	ldr	r3, [r4, #8]
 800f9e8:	3b01      	subs	r3, #1
 800f9ea:	60a3      	str	r3, [r4, #8]
 800f9ec:	6823      	ldr	r3, [r4, #0]
 800f9ee:	1c5a      	adds	r2, r3, #1
 800f9f0:	6022      	str	r2, [r4, #0]
 800f9f2:	701e      	strb	r6, [r3, #0]
 800f9f4:	6963      	ldr	r3, [r4, #20]
 800f9f6:	3001      	adds	r0, #1
 800f9f8:	4283      	cmp	r3, r0
 800f9fa:	d004      	beq.n	800fa06 <__swbuf_r+0x62>
 800f9fc:	89a3      	ldrh	r3, [r4, #12]
 800f9fe:	07db      	lsls	r3, r3, #31
 800fa00:	d506      	bpl.n	800fa10 <__swbuf_r+0x6c>
 800fa02:	2e0a      	cmp	r6, #10
 800fa04:	d104      	bne.n	800fa10 <__swbuf_r+0x6c>
 800fa06:	4621      	mov	r1, r4
 800fa08:	4628      	mov	r0, r5
 800fa0a:	f000 f933 	bl	800fc74 <_fflush_r>
 800fa0e:	b988      	cbnz	r0, 800fa34 <__swbuf_r+0x90>
 800fa10:	4638      	mov	r0, r7
 800fa12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa14:	4b0a      	ldr	r3, [pc, #40]	; (800fa40 <__swbuf_r+0x9c>)
 800fa16:	429c      	cmp	r4, r3
 800fa18:	d101      	bne.n	800fa1e <__swbuf_r+0x7a>
 800fa1a:	68ac      	ldr	r4, [r5, #8]
 800fa1c:	e7cf      	b.n	800f9be <__swbuf_r+0x1a>
 800fa1e:	4b09      	ldr	r3, [pc, #36]	; (800fa44 <__swbuf_r+0xa0>)
 800fa20:	429c      	cmp	r4, r3
 800fa22:	bf08      	it	eq
 800fa24:	68ec      	ldreq	r4, [r5, #12]
 800fa26:	e7ca      	b.n	800f9be <__swbuf_r+0x1a>
 800fa28:	4621      	mov	r1, r4
 800fa2a:	4628      	mov	r0, r5
 800fa2c:	f000 f81e 	bl	800fa6c <__swsetup_r>
 800fa30:	2800      	cmp	r0, #0
 800fa32:	d0cb      	beq.n	800f9cc <__swbuf_r+0x28>
 800fa34:	f04f 37ff 	mov.w	r7, #4294967295
 800fa38:	e7ea      	b.n	800fa10 <__swbuf_r+0x6c>
 800fa3a:	bf00      	nop
 800fa3c:	08086f1c 	.word	0x08086f1c
 800fa40:	08086f3c 	.word	0x08086f3c
 800fa44:	08086efc 	.word	0x08086efc

0800fa48 <_write_r>:
 800fa48:	b538      	push	{r3, r4, r5, lr}
 800fa4a:	4d07      	ldr	r5, [pc, #28]	; (800fa68 <_write_r+0x20>)
 800fa4c:	4604      	mov	r4, r0
 800fa4e:	4608      	mov	r0, r1
 800fa50:	4611      	mov	r1, r2
 800fa52:	2200      	movs	r2, #0
 800fa54:	602a      	str	r2, [r5, #0]
 800fa56:	461a      	mov	r2, r3
 800fa58:	f7f1 fcf1 	bl	800143e <_write>
 800fa5c:	1c43      	adds	r3, r0, #1
 800fa5e:	d102      	bne.n	800fa66 <_write_r+0x1e>
 800fa60:	682b      	ldr	r3, [r5, #0]
 800fa62:	b103      	cbz	r3, 800fa66 <_write_r+0x1e>
 800fa64:	6023      	str	r3, [r4, #0]
 800fa66:	bd38      	pop	{r3, r4, r5, pc}
 800fa68:	20006b70 	.word	0x20006b70

0800fa6c <__swsetup_r>:
 800fa6c:	4b32      	ldr	r3, [pc, #200]	; (800fb38 <__swsetup_r+0xcc>)
 800fa6e:	b570      	push	{r4, r5, r6, lr}
 800fa70:	681d      	ldr	r5, [r3, #0]
 800fa72:	4606      	mov	r6, r0
 800fa74:	460c      	mov	r4, r1
 800fa76:	b125      	cbz	r5, 800fa82 <__swsetup_r+0x16>
 800fa78:	69ab      	ldr	r3, [r5, #24]
 800fa7a:	b913      	cbnz	r3, 800fa82 <__swsetup_r+0x16>
 800fa7c:	4628      	mov	r0, r5
 800fa7e:	f7ff fb6b 	bl	800f158 <__sinit>
 800fa82:	4b2e      	ldr	r3, [pc, #184]	; (800fb3c <__swsetup_r+0xd0>)
 800fa84:	429c      	cmp	r4, r3
 800fa86:	d10f      	bne.n	800faa8 <__swsetup_r+0x3c>
 800fa88:	686c      	ldr	r4, [r5, #4]
 800fa8a:	89a3      	ldrh	r3, [r4, #12]
 800fa8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa90:	0719      	lsls	r1, r3, #28
 800fa92:	d42c      	bmi.n	800faee <__swsetup_r+0x82>
 800fa94:	06dd      	lsls	r5, r3, #27
 800fa96:	d411      	bmi.n	800fabc <__swsetup_r+0x50>
 800fa98:	2309      	movs	r3, #9
 800fa9a:	6033      	str	r3, [r6, #0]
 800fa9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800faa0:	81a3      	strh	r3, [r4, #12]
 800faa2:	f04f 30ff 	mov.w	r0, #4294967295
 800faa6:	e03e      	b.n	800fb26 <__swsetup_r+0xba>
 800faa8:	4b25      	ldr	r3, [pc, #148]	; (800fb40 <__swsetup_r+0xd4>)
 800faaa:	429c      	cmp	r4, r3
 800faac:	d101      	bne.n	800fab2 <__swsetup_r+0x46>
 800faae:	68ac      	ldr	r4, [r5, #8]
 800fab0:	e7eb      	b.n	800fa8a <__swsetup_r+0x1e>
 800fab2:	4b24      	ldr	r3, [pc, #144]	; (800fb44 <__swsetup_r+0xd8>)
 800fab4:	429c      	cmp	r4, r3
 800fab6:	bf08      	it	eq
 800fab8:	68ec      	ldreq	r4, [r5, #12]
 800faba:	e7e6      	b.n	800fa8a <__swsetup_r+0x1e>
 800fabc:	0758      	lsls	r0, r3, #29
 800fabe:	d512      	bpl.n	800fae6 <__swsetup_r+0x7a>
 800fac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fac2:	b141      	cbz	r1, 800fad6 <__swsetup_r+0x6a>
 800fac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fac8:	4299      	cmp	r1, r3
 800faca:	d002      	beq.n	800fad2 <__swsetup_r+0x66>
 800facc:	4630      	mov	r0, r6
 800face:	f7ff fa03 	bl	800eed8 <_free_r>
 800fad2:	2300      	movs	r3, #0
 800fad4:	6363      	str	r3, [r4, #52]	; 0x34
 800fad6:	89a3      	ldrh	r3, [r4, #12]
 800fad8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fadc:	81a3      	strh	r3, [r4, #12]
 800fade:	2300      	movs	r3, #0
 800fae0:	6063      	str	r3, [r4, #4]
 800fae2:	6923      	ldr	r3, [r4, #16]
 800fae4:	6023      	str	r3, [r4, #0]
 800fae6:	89a3      	ldrh	r3, [r4, #12]
 800fae8:	f043 0308 	orr.w	r3, r3, #8
 800faec:	81a3      	strh	r3, [r4, #12]
 800faee:	6923      	ldr	r3, [r4, #16]
 800faf0:	b94b      	cbnz	r3, 800fb06 <__swsetup_r+0x9a>
 800faf2:	89a3      	ldrh	r3, [r4, #12]
 800faf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800faf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fafc:	d003      	beq.n	800fb06 <__swsetup_r+0x9a>
 800fafe:	4621      	mov	r1, r4
 800fb00:	4630      	mov	r0, r6
 800fb02:	f000 f929 	bl	800fd58 <__smakebuf_r>
 800fb06:	89a0      	ldrh	r0, [r4, #12]
 800fb08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fb0c:	f010 0301 	ands.w	r3, r0, #1
 800fb10:	d00a      	beq.n	800fb28 <__swsetup_r+0xbc>
 800fb12:	2300      	movs	r3, #0
 800fb14:	60a3      	str	r3, [r4, #8]
 800fb16:	6963      	ldr	r3, [r4, #20]
 800fb18:	425b      	negs	r3, r3
 800fb1a:	61a3      	str	r3, [r4, #24]
 800fb1c:	6923      	ldr	r3, [r4, #16]
 800fb1e:	b943      	cbnz	r3, 800fb32 <__swsetup_r+0xc6>
 800fb20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fb24:	d1ba      	bne.n	800fa9c <__swsetup_r+0x30>
 800fb26:	bd70      	pop	{r4, r5, r6, pc}
 800fb28:	0781      	lsls	r1, r0, #30
 800fb2a:	bf58      	it	pl
 800fb2c:	6963      	ldrpl	r3, [r4, #20]
 800fb2e:	60a3      	str	r3, [r4, #8]
 800fb30:	e7f4      	b.n	800fb1c <__swsetup_r+0xb0>
 800fb32:	2000      	movs	r0, #0
 800fb34:	e7f7      	b.n	800fb26 <__swsetup_r+0xba>
 800fb36:	bf00      	nop
 800fb38:	20000044 	.word	0x20000044
 800fb3c:	08086f1c 	.word	0x08086f1c
 800fb40:	08086f3c 	.word	0x08086f3c
 800fb44:	08086efc 	.word	0x08086efc

0800fb48 <_close_r>:
 800fb48:	b538      	push	{r3, r4, r5, lr}
 800fb4a:	4d06      	ldr	r5, [pc, #24]	; (800fb64 <_close_r+0x1c>)
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	4604      	mov	r4, r0
 800fb50:	4608      	mov	r0, r1
 800fb52:	602b      	str	r3, [r5, #0]
 800fb54:	f7f1 fc8f 	bl	8001476 <_close>
 800fb58:	1c43      	adds	r3, r0, #1
 800fb5a:	d102      	bne.n	800fb62 <_close_r+0x1a>
 800fb5c:	682b      	ldr	r3, [r5, #0]
 800fb5e:	b103      	cbz	r3, 800fb62 <_close_r+0x1a>
 800fb60:	6023      	str	r3, [r4, #0]
 800fb62:	bd38      	pop	{r3, r4, r5, pc}
 800fb64:	20006b70 	.word	0x20006b70

0800fb68 <__sflush_r>:
 800fb68:	898a      	ldrh	r2, [r1, #12]
 800fb6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb6e:	4605      	mov	r5, r0
 800fb70:	0710      	lsls	r0, r2, #28
 800fb72:	460c      	mov	r4, r1
 800fb74:	d458      	bmi.n	800fc28 <__sflush_r+0xc0>
 800fb76:	684b      	ldr	r3, [r1, #4]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	dc05      	bgt.n	800fb88 <__sflush_r+0x20>
 800fb7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	dc02      	bgt.n	800fb88 <__sflush_r+0x20>
 800fb82:	2000      	movs	r0, #0
 800fb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb8a:	2e00      	cmp	r6, #0
 800fb8c:	d0f9      	beq.n	800fb82 <__sflush_r+0x1a>
 800fb8e:	2300      	movs	r3, #0
 800fb90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fb94:	682f      	ldr	r7, [r5, #0]
 800fb96:	602b      	str	r3, [r5, #0]
 800fb98:	d032      	beq.n	800fc00 <__sflush_r+0x98>
 800fb9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fb9c:	89a3      	ldrh	r3, [r4, #12]
 800fb9e:	075a      	lsls	r2, r3, #29
 800fba0:	d505      	bpl.n	800fbae <__sflush_r+0x46>
 800fba2:	6863      	ldr	r3, [r4, #4]
 800fba4:	1ac0      	subs	r0, r0, r3
 800fba6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fba8:	b10b      	cbz	r3, 800fbae <__sflush_r+0x46>
 800fbaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fbac:	1ac0      	subs	r0, r0, r3
 800fbae:	2300      	movs	r3, #0
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fbb4:	6a21      	ldr	r1, [r4, #32]
 800fbb6:	4628      	mov	r0, r5
 800fbb8:	47b0      	blx	r6
 800fbba:	1c43      	adds	r3, r0, #1
 800fbbc:	89a3      	ldrh	r3, [r4, #12]
 800fbbe:	d106      	bne.n	800fbce <__sflush_r+0x66>
 800fbc0:	6829      	ldr	r1, [r5, #0]
 800fbc2:	291d      	cmp	r1, #29
 800fbc4:	d82c      	bhi.n	800fc20 <__sflush_r+0xb8>
 800fbc6:	4a2a      	ldr	r2, [pc, #168]	; (800fc70 <__sflush_r+0x108>)
 800fbc8:	40ca      	lsrs	r2, r1
 800fbca:	07d6      	lsls	r6, r2, #31
 800fbcc:	d528      	bpl.n	800fc20 <__sflush_r+0xb8>
 800fbce:	2200      	movs	r2, #0
 800fbd0:	6062      	str	r2, [r4, #4]
 800fbd2:	04d9      	lsls	r1, r3, #19
 800fbd4:	6922      	ldr	r2, [r4, #16]
 800fbd6:	6022      	str	r2, [r4, #0]
 800fbd8:	d504      	bpl.n	800fbe4 <__sflush_r+0x7c>
 800fbda:	1c42      	adds	r2, r0, #1
 800fbdc:	d101      	bne.n	800fbe2 <__sflush_r+0x7a>
 800fbde:	682b      	ldr	r3, [r5, #0]
 800fbe0:	b903      	cbnz	r3, 800fbe4 <__sflush_r+0x7c>
 800fbe2:	6560      	str	r0, [r4, #84]	; 0x54
 800fbe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fbe6:	602f      	str	r7, [r5, #0]
 800fbe8:	2900      	cmp	r1, #0
 800fbea:	d0ca      	beq.n	800fb82 <__sflush_r+0x1a>
 800fbec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fbf0:	4299      	cmp	r1, r3
 800fbf2:	d002      	beq.n	800fbfa <__sflush_r+0x92>
 800fbf4:	4628      	mov	r0, r5
 800fbf6:	f7ff f96f 	bl	800eed8 <_free_r>
 800fbfa:	2000      	movs	r0, #0
 800fbfc:	6360      	str	r0, [r4, #52]	; 0x34
 800fbfe:	e7c1      	b.n	800fb84 <__sflush_r+0x1c>
 800fc00:	6a21      	ldr	r1, [r4, #32]
 800fc02:	2301      	movs	r3, #1
 800fc04:	4628      	mov	r0, r5
 800fc06:	47b0      	blx	r6
 800fc08:	1c41      	adds	r1, r0, #1
 800fc0a:	d1c7      	bne.n	800fb9c <__sflush_r+0x34>
 800fc0c:	682b      	ldr	r3, [r5, #0]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d0c4      	beq.n	800fb9c <__sflush_r+0x34>
 800fc12:	2b1d      	cmp	r3, #29
 800fc14:	d001      	beq.n	800fc1a <__sflush_r+0xb2>
 800fc16:	2b16      	cmp	r3, #22
 800fc18:	d101      	bne.n	800fc1e <__sflush_r+0xb6>
 800fc1a:	602f      	str	r7, [r5, #0]
 800fc1c:	e7b1      	b.n	800fb82 <__sflush_r+0x1a>
 800fc1e:	89a3      	ldrh	r3, [r4, #12]
 800fc20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc24:	81a3      	strh	r3, [r4, #12]
 800fc26:	e7ad      	b.n	800fb84 <__sflush_r+0x1c>
 800fc28:	690f      	ldr	r7, [r1, #16]
 800fc2a:	2f00      	cmp	r7, #0
 800fc2c:	d0a9      	beq.n	800fb82 <__sflush_r+0x1a>
 800fc2e:	0793      	lsls	r3, r2, #30
 800fc30:	680e      	ldr	r6, [r1, #0]
 800fc32:	bf08      	it	eq
 800fc34:	694b      	ldreq	r3, [r1, #20]
 800fc36:	600f      	str	r7, [r1, #0]
 800fc38:	bf18      	it	ne
 800fc3a:	2300      	movne	r3, #0
 800fc3c:	eba6 0807 	sub.w	r8, r6, r7
 800fc40:	608b      	str	r3, [r1, #8]
 800fc42:	f1b8 0f00 	cmp.w	r8, #0
 800fc46:	dd9c      	ble.n	800fb82 <__sflush_r+0x1a>
 800fc48:	6a21      	ldr	r1, [r4, #32]
 800fc4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fc4c:	4643      	mov	r3, r8
 800fc4e:	463a      	mov	r2, r7
 800fc50:	4628      	mov	r0, r5
 800fc52:	47b0      	blx	r6
 800fc54:	2800      	cmp	r0, #0
 800fc56:	dc06      	bgt.n	800fc66 <__sflush_r+0xfe>
 800fc58:	89a3      	ldrh	r3, [r4, #12]
 800fc5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc5e:	81a3      	strh	r3, [r4, #12]
 800fc60:	f04f 30ff 	mov.w	r0, #4294967295
 800fc64:	e78e      	b.n	800fb84 <__sflush_r+0x1c>
 800fc66:	4407      	add	r7, r0
 800fc68:	eba8 0800 	sub.w	r8, r8, r0
 800fc6c:	e7e9      	b.n	800fc42 <__sflush_r+0xda>
 800fc6e:	bf00      	nop
 800fc70:	20400001 	.word	0x20400001

0800fc74 <_fflush_r>:
 800fc74:	b538      	push	{r3, r4, r5, lr}
 800fc76:	690b      	ldr	r3, [r1, #16]
 800fc78:	4605      	mov	r5, r0
 800fc7a:	460c      	mov	r4, r1
 800fc7c:	b913      	cbnz	r3, 800fc84 <_fflush_r+0x10>
 800fc7e:	2500      	movs	r5, #0
 800fc80:	4628      	mov	r0, r5
 800fc82:	bd38      	pop	{r3, r4, r5, pc}
 800fc84:	b118      	cbz	r0, 800fc8e <_fflush_r+0x1a>
 800fc86:	6983      	ldr	r3, [r0, #24]
 800fc88:	b90b      	cbnz	r3, 800fc8e <_fflush_r+0x1a>
 800fc8a:	f7ff fa65 	bl	800f158 <__sinit>
 800fc8e:	4b14      	ldr	r3, [pc, #80]	; (800fce0 <_fflush_r+0x6c>)
 800fc90:	429c      	cmp	r4, r3
 800fc92:	d11b      	bne.n	800fccc <_fflush_r+0x58>
 800fc94:	686c      	ldr	r4, [r5, #4]
 800fc96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d0ef      	beq.n	800fc7e <_fflush_r+0xa>
 800fc9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fca0:	07d0      	lsls	r0, r2, #31
 800fca2:	d404      	bmi.n	800fcae <_fflush_r+0x3a>
 800fca4:	0599      	lsls	r1, r3, #22
 800fca6:	d402      	bmi.n	800fcae <_fflush_r+0x3a>
 800fca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcaa:	f7ff faf3 	bl	800f294 <__retarget_lock_acquire_recursive>
 800fcae:	4628      	mov	r0, r5
 800fcb0:	4621      	mov	r1, r4
 800fcb2:	f7ff ff59 	bl	800fb68 <__sflush_r>
 800fcb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fcb8:	07da      	lsls	r2, r3, #31
 800fcba:	4605      	mov	r5, r0
 800fcbc:	d4e0      	bmi.n	800fc80 <_fflush_r+0xc>
 800fcbe:	89a3      	ldrh	r3, [r4, #12]
 800fcc0:	059b      	lsls	r3, r3, #22
 800fcc2:	d4dd      	bmi.n	800fc80 <_fflush_r+0xc>
 800fcc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcc6:	f7ff fae6 	bl	800f296 <__retarget_lock_release_recursive>
 800fcca:	e7d9      	b.n	800fc80 <_fflush_r+0xc>
 800fccc:	4b05      	ldr	r3, [pc, #20]	; (800fce4 <_fflush_r+0x70>)
 800fcce:	429c      	cmp	r4, r3
 800fcd0:	d101      	bne.n	800fcd6 <_fflush_r+0x62>
 800fcd2:	68ac      	ldr	r4, [r5, #8]
 800fcd4:	e7df      	b.n	800fc96 <_fflush_r+0x22>
 800fcd6:	4b04      	ldr	r3, [pc, #16]	; (800fce8 <_fflush_r+0x74>)
 800fcd8:	429c      	cmp	r4, r3
 800fcda:	bf08      	it	eq
 800fcdc:	68ec      	ldreq	r4, [r5, #12]
 800fcde:	e7da      	b.n	800fc96 <_fflush_r+0x22>
 800fce0:	08086f1c 	.word	0x08086f1c
 800fce4:	08086f3c 	.word	0x08086f3c
 800fce8:	08086efc 	.word	0x08086efc

0800fcec <_lseek_r>:
 800fcec:	b538      	push	{r3, r4, r5, lr}
 800fcee:	4d07      	ldr	r5, [pc, #28]	; (800fd0c <_lseek_r+0x20>)
 800fcf0:	4604      	mov	r4, r0
 800fcf2:	4608      	mov	r0, r1
 800fcf4:	4611      	mov	r1, r2
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	602a      	str	r2, [r5, #0]
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	f7f1 fbe2 	bl	80014c4 <_lseek>
 800fd00:	1c43      	adds	r3, r0, #1
 800fd02:	d102      	bne.n	800fd0a <_lseek_r+0x1e>
 800fd04:	682b      	ldr	r3, [r5, #0]
 800fd06:	b103      	cbz	r3, 800fd0a <_lseek_r+0x1e>
 800fd08:	6023      	str	r3, [r4, #0]
 800fd0a:	bd38      	pop	{r3, r4, r5, pc}
 800fd0c:	20006b70 	.word	0x20006b70

0800fd10 <__swhatbuf_r>:
 800fd10:	b570      	push	{r4, r5, r6, lr}
 800fd12:	460e      	mov	r6, r1
 800fd14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd18:	2900      	cmp	r1, #0
 800fd1a:	b096      	sub	sp, #88	; 0x58
 800fd1c:	4614      	mov	r4, r2
 800fd1e:	461d      	mov	r5, r3
 800fd20:	da07      	bge.n	800fd32 <__swhatbuf_r+0x22>
 800fd22:	2300      	movs	r3, #0
 800fd24:	602b      	str	r3, [r5, #0]
 800fd26:	89b3      	ldrh	r3, [r6, #12]
 800fd28:	061a      	lsls	r2, r3, #24
 800fd2a:	d410      	bmi.n	800fd4e <__swhatbuf_r+0x3e>
 800fd2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fd30:	e00e      	b.n	800fd50 <__swhatbuf_r+0x40>
 800fd32:	466a      	mov	r2, sp
 800fd34:	f000 f862 	bl	800fdfc <_fstat_r>
 800fd38:	2800      	cmp	r0, #0
 800fd3a:	dbf2      	blt.n	800fd22 <__swhatbuf_r+0x12>
 800fd3c:	9a01      	ldr	r2, [sp, #4]
 800fd3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fd42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fd46:	425a      	negs	r2, r3
 800fd48:	415a      	adcs	r2, r3
 800fd4a:	602a      	str	r2, [r5, #0]
 800fd4c:	e7ee      	b.n	800fd2c <__swhatbuf_r+0x1c>
 800fd4e:	2340      	movs	r3, #64	; 0x40
 800fd50:	2000      	movs	r0, #0
 800fd52:	6023      	str	r3, [r4, #0]
 800fd54:	b016      	add	sp, #88	; 0x58
 800fd56:	bd70      	pop	{r4, r5, r6, pc}

0800fd58 <__smakebuf_r>:
 800fd58:	898b      	ldrh	r3, [r1, #12]
 800fd5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fd5c:	079d      	lsls	r5, r3, #30
 800fd5e:	4606      	mov	r6, r0
 800fd60:	460c      	mov	r4, r1
 800fd62:	d507      	bpl.n	800fd74 <__smakebuf_r+0x1c>
 800fd64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fd68:	6023      	str	r3, [r4, #0]
 800fd6a:	6123      	str	r3, [r4, #16]
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	6163      	str	r3, [r4, #20]
 800fd70:	b002      	add	sp, #8
 800fd72:	bd70      	pop	{r4, r5, r6, pc}
 800fd74:	ab01      	add	r3, sp, #4
 800fd76:	466a      	mov	r2, sp
 800fd78:	f7ff ffca 	bl	800fd10 <__swhatbuf_r>
 800fd7c:	9900      	ldr	r1, [sp, #0]
 800fd7e:	4605      	mov	r5, r0
 800fd80:	4630      	mov	r0, r6
 800fd82:	f7ff f8f9 	bl	800ef78 <_malloc_r>
 800fd86:	b948      	cbnz	r0, 800fd9c <__smakebuf_r+0x44>
 800fd88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd8c:	059a      	lsls	r2, r3, #22
 800fd8e:	d4ef      	bmi.n	800fd70 <__smakebuf_r+0x18>
 800fd90:	f023 0303 	bic.w	r3, r3, #3
 800fd94:	f043 0302 	orr.w	r3, r3, #2
 800fd98:	81a3      	strh	r3, [r4, #12]
 800fd9a:	e7e3      	b.n	800fd64 <__smakebuf_r+0xc>
 800fd9c:	4b0d      	ldr	r3, [pc, #52]	; (800fdd4 <__smakebuf_r+0x7c>)
 800fd9e:	62b3      	str	r3, [r6, #40]	; 0x28
 800fda0:	89a3      	ldrh	r3, [r4, #12]
 800fda2:	6020      	str	r0, [r4, #0]
 800fda4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fda8:	81a3      	strh	r3, [r4, #12]
 800fdaa:	9b00      	ldr	r3, [sp, #0]
 800fdac:	6163      	str	r3, [r4, #20]
 800fdae:	9b01      	ldr	r3, [sp, #4]
 800fdb0:	6120      	str	r0, [r4, #16]
 800fdb2:	b15b      	cbz	r3, 800fdcc <__smakebuf_r+0x74>
 800fdb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdb8:	4630      	mov	r0, r6
 800fdba:	f000 f831 	bl	800fe20 <_isatty_r>
 800fdbe:	b128      	cbz	r0, 800fdcc <__smakebuf_r+0x74>
 800fdc0:	89a3      	ldrh	r3, [r4, #12]
 800fdc2:	f023 0303 	bic.w	r3, r3, #3
 800fdc6:	f043 0301 	orr.w	r3, r3, #1
 800fdca:	81a3      	strh	r3, [r4, #12]
 800fdcc:	89a0      	ldrh	r0, [r4, #12]
 800fdce:	4305      	orrs	r5, r0
 800fdd0:	81a5      	strh	r5, [r4, #12]
 800fdd2:	e7cd      	b.n	800fd70 <__smakebuf_r+0x18>
 800fdd4:	0800f0f1 	.word	0x0800f0f1

0800fdd8 <_read_r>:
 800fdd8:	b538      	push	{r3, r4, r5, lr}
 800fdda:	4d07      	ldr	r5, [pc, #28]	; (800fdf8 <_read_r+0x20>)
 800fddc:	4604      	mov	r4, r0
 800fdde:	4608      	mov	r0, r1
 800fde0:	4611      	mov	r1, r2
 800fde2:	2200      	movs	r2, #0
 800fde4:	602a      	str	r2, [r5, #0]
 800fde6:	461a      	mov	r2, r3
 800fde8:	f7f1 fb0c 	bl	8001404 <_read>
 800fdec:	1c43      	adds	r3, r0, #1
 800fdee:	d102      	bne.n	800fdf6 <_read_r+0x1e>
 800fdf0:	682b      	ldr	r3, [r5, #0]
 800fdf2:	b103      	cbz	r3, 800fdf6 <_read_r+0x1e>
 800fdf4:	6023      	str	r3, [r4, #0]
 800fdf6:	bd38      	pop	{r3, r4, r5, pc}
 800fdf8:	20006b70 	.word	0x20006b70

0800fdfc <_fstat_r>:
 800fdfc:	b538      	push	{r3, r4, r5, lr}
 800fdfe:	4d07      	ldr	r5, [pc, #28]	; (800fe1c <_fstat_r+0x20>)
 800fe00:	2300      	movs	r3, #0
 800fe02:	4604      	mov	r4, r0
 800fe04:	4608      	mov	r0, r1
 800fe06:	4611      	mov	r1, r2
 800fe08:	602b      	str	r3, [r5, #0]
 800fe0a:	f7f1 fb40 	bl	800148e <_fstat>
 800fe0e:	1c43      	adds	r3, r0, #1
 800fe10:	d102      	bne.n	800fe18 <_fstat_r+0x1c>
 800fe12:	682b      	ldr	r3, [r5, #0]
 800fe14:	b103      	cbz	r3, 800fe18 <_fstat_r+0x1c>
 800fe16:	6023      	str	r3, [r4, #0]
 800fe18:	bd38      	pop	{r3, r4, r5, pc}
 800fe1a:	bf00      	nop
 800fe1c:	20006b70 	.word	0x20006b70

0800fe20 <_isatty_r>:
 800fe20:	b538      	push	{r3, r4, r5, lr}
 800fe22:	4d06      	ldr	r5, [pc, #24]	; (800fe3c <_isatty_r+0x1c>)
 800fe24:	2300      	movs	r3, #0
 800fe26:	4604      	mov	r4, r0
 800fe28:	4608      	mov	r0, r1
 800fe2a:	602b      	str	r3, [r5, #0]
 800fe2c:	f7f1 fb3f 	bl	80014ae <_isatty>
 800fe30:	1c43      	adds	r3, r0, #1
 800fe32:	d102      	bne.n	800fe3a <_isatty_r+0x1a>
 800fe34:	682b      	ldr	r3, [r5, #0]
 800fe36:	b103      	cbz	r3, 800fe3a <_isatty_r+0x1a>
 800fe38:	6023      	str	r3, [r4, #0]
 800fe3a:	bd38      	pop	{r3, r4, r5, pc}
 800fe3c:	20006b70 	.word	0x20006b70

0800fe40 <_init>:
 800fe40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe42:	bf00      	nop
 800fe44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe46:	bc08      	pop	{r3}
 800fe48:	469e      	mov	lr, r3
 800fe4a:	4770      	bx	lr

0800fe4c <_fini>:
 800fe4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe4e:	bf00      	nop
 800fe50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe52:	bc08      	pop	{r3}
 800fe54:	469e      	mov	lr, r3
 800fe56:	4770      	bx	lr
