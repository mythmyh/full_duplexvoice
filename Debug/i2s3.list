
i2s3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00077138  0800fdf4  0800fdf4  0001fdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08086f2c  08086f2c  000a009c  2**0
                  CONTENTS
  4 .ARM          00000008  08086f2c  08086f2c  00096f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08086f34  08086f34  000a009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08086f34  08086f34  00096f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08086f38  08086f38  00096f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08086f3c  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000a009c  2**0
                  CONTENTS
 10 .bss          00005a9c  2000009c  2000009c  000a009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005b38  20005b38  000a009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000a009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e227  00000000  00000000  000a00cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a34  00000000  00000000  000ce2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b8  00000000  00000000  000d3d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014e8  00000000  00000000  000d53e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b6e  00000000  00000000  000d68c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000238a7  00000000  00000000  000fe436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cecb2  00000000  00000000  00121cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001f098f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065b8  00000000  00000000  001f09e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fddc 	.word	0x0800fddc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	0800fddc 	.word	0x0800fddc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <WM8978_Register_Wirter>:
static void DMAEx_XferM1CpltCallback(struct __DMA_HandleTypeDef *hdma);
static void DMAEx_XferErrorCallback(struct __DMA_HandleTypeDef *hdma);
HAL_StatusTypeDef HAL_I2S_Transmit_DMAEx(I2S_HandleTypeDef *hi2s,
		uint16_t *FirstBuffer, uint16_t *SecondBuffer, uint16_t Size);

HAL_StatusTypeDef WM8978_Register_Wirter(uint8_t reg_addr, uint16_t data) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af02      	add	r7, sp, #8
 800056e:	4603      	mov	r3, r0
 8000570:	460a      	mov	r2, r1
 8000572:	71fb      	strb	r3, [r7, #7]
 8000574:	4613      	mov	r3, r2
 8000576:	80bb      	strh	r3, [r7, #4]
	uint8_t pData[10] = { 0 };
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	809a      	strh	r2, [r3, #4]

	pData[0] = (reg_addr << 1) | ((data >> 8) & 0x01);
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	b25a      	sxtb	r2, r3
 800058c:	88bb      	ldrh	r3, [r7, #4]
 800058e:	0a1b      	lsrs	r3, r3, #8
 8000590:	b29b      	uxth	r3, r3
 8000592:	b25b      	sxtb	r3, r3
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	b25b      	sxtb	r3, r3
 800059a:	4313      	orrs	r3, r2
 800059c:	b25b      	sxtb	r3, r3
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	733b      	strb	r3, [r7, #12]
	pData[1] = data & 0xFF;
 80005a2:	88bb      	ldrh	r3, [r7, #4]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(&USEI2C, WM8978_WIRTE_ADDRESS, pData, 2,
 80005a8:	f107 020c 	add.w	r2, r7, #12
 80005ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2302      	movs	r3, #2
 80005b4:	2134      	movs	r1, #52	; 0x34
 80005b6:	4804      	ldr	r0, [pc, #16]	; (80005c8 <WM8978_Register_Wirter+0x60>)
 80005b8:	f004 fe92 	bl	80052e0 <HAL_I2C_Master_Transmit>
 80005bc:	4603      	mov	r3, r0
			1000);
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3718      	adds	r7, #24
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200021bc 	.word	0x200021bc

080005cc <WAV_FileInit>:

void WAV_FileInit(void) {
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
	DataLength = sizeof(data) - 0x2c;
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <WAV_FileInit+0x1c>)
 80005d2:	4a06      	ldr	r2, [pc, #24]	; (80005ec <WAV_FileInit+0x20>)
 80005d4:	601a      	str	r2, [r3, #0]
	DataAddress = (uint8_t*) (data + 0x2c);
 80005d6:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <WAV_FileInit+0x24>)
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <WAV_FileInit+0x28>)
 80005da:	601a      	str	r2, [r3, #0]
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	200010b8 	.word	0x200010b8
 80005ec:	00076926 	.word	0x00076926
 80005f0:	08010538 	.word	0x08010538
 80005f4:	200010bc 	.word	0x200010bc

080005f8 <WAV_FileRead2>:
uint32_t WAV_FileRead2(uint8_t *buf, uint32_t size) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
	bw = 0;
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <WAV_FileRead2+0x70>)
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
	f_read(&file, buf, size, (void*)&bw); //16bit音频,直接读取数据
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <WAV_FileRead2+0x70>)
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	6879      	ldr	r1, [r7, #4]
 800060e:	4817      	ldr	r0, [pc, #92]	; (800066c <WAV_FileRead2+0x74>)
 8000610:	f00d fc46 	bl	800dea0 <f_read>
	//printf("aaaa %d\n",bw);

	if (bw < BUFFER_SIZE) //不够数据了,补充0
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <WAV_FileRead2+0x70>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800061c:	d21e      	bcs.n	800065c <WAV_FileRead2+0x64>
	{
		for (i = bw; i < BUFFER_SIZE - bw; i++)
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <WAV_FileRead2+0x70>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <WAV_FileRead2+0x78>)
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	e00b      	b.n	8000642 <WAV_FileRead2+0x4a>
			buf[i] = 0;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <WAV_FileRead2+0x78>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	461a      	mov	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
		for (i = bw; i < BUFFER_SIZE - bw; i++)
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <WAV_FileRead2+0x78>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <WAV_FileRead2+0x78>)
 8000640:	6013      	str	r3, [r2, #0]
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <WAV_FileRead2+0x70>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800064a:	4a09      	ldr	r2, [pc, #36]	; (8000670 <WAV_FileRead2+0x78>)
 800064c:	6812      	ldr	r2, [r2, #0]
 800064e:	4293      	cmp	r3, r2
 8000650:	d8eb      	bhi.n	800062a <WAV_FileRead2+0x32>

		f_close(&file);
 8000652:	4806      	ldr	r0, [pc, #24]	; (800066c <WAV_FileRead2+0x74>)
 8000654:	f00d fe01 	bl	800e25a <f_close>

		return 0;
 8000658:	2300      	movs	r3, #0
 800065a:	e000      	b.n	800065e <WAV_FileRead2+0x66>

	}

	return 1;
 800065c:	2301      	movs	r3, #1
}
 800065e:	4618      	mov	r0, r3
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20002160 	.word	0x20002160
 800066c:	200022b8 	.word	0x200022b8
 8000670:	2000215c 	.word	0x2000215c

08000674 <HAL_I2S_Transmit_DMAEx>:

	return Playing_End;
}

HAL_StatusTypeDef HAL_I2S_Transmit_DMAEx(I2S_HandleTypeDef *hi2s,
		uint16_t *FirstBuffer, uint16_t *SecondBuffer, uint16_t Size) {
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b089      	sub	sp, #36	; 0x24
 8000678:	af02      	add	r7, sp, #8
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	807b      	strh	r3, [r7, #2]
	uint32_t tmpreg_cfgr;
	if ((FirstBuffer == NULL) || (SecondBuffer == NULL) || (Size == 0U)) {
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d005      	beq.n	8000694 <HAL_I2S_Transmit_DMAEx+0x20>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d002      	beq.n	8000694 <HAL_I2S_Transmit_DMAEx+0x20>
 800068e:	887b      	ldrh	r3, [r7, #2]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d101      	bne.n	8000698 <HAL_I2S_Transmit_DMAEx+0x24>
		return HAL_ERROR;
 8000694:	2301      	movs	r3, #1
 8000696:	e09c      	b.n	80007d2 <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Process Locked */
	__HAL_LOCK(hi2s);
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d101      	bne.n	80006a8 <HAL_I2S_Transmit_DMAEx+0x34>
 80006a4:	2302      	movs	r3, #2
 80006a6:	e094      	b.n	80007d2 <HAL_I2S_Transmit_DMAEx+0x15e>
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	2201      	movs	r2, #1
 80006ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (hi2s->State != HAL_I2S_STATE_READY) {
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d005      	beq.n	80006c8 <HAL_I2S_Transmit_DMAEx+0x54>
		__HAL_UNLOCK(hi2s);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2200      	movs	r2, #0
 80006c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_BUSY;
 80006c4:	2302      	movs	r3, #2
 80006c6:	e084      	b.n	80007d2 <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Set state and reset error code */
	hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2203      	movs	r2, #3
 80006cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	2200      	movs	r2, #0
 80006d4:	645a      	str	r2, [r3, #68]	; 0x44
	hi2s->pTxBuffPtr = FirstBuffer;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	68ba      	ldr	r2, [r7, #8]
 80006da:	625a      	str	r2, [r3, #36]	; 0x24

	tmpreg_cfgr = hi2s->Instance->I2SCFGR
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	617b      	str	r3, [r7, #20]
			& (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);

	if ((tmpreg_cfgr == I2S_DATAFORMAT_24B)
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d002      	beq.n	80006f4 <HAL_I2S_Transmit_DMAEx+0x80>
			|| (tmpreg_cfgr == I2S_DATAFORMAT_32B)) {
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	2b05      	cmp	r3, #5
 80006f2:	d10a      	bne.n	800070a <HAL_I2S_Transmit_DMAEx+0x96>
		hi2s->TxXferSize = (Size << 1U);
 80006f4:	887b      	ldrh	r3, [r7, #2]
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = (Size << 1U);
 80006fe:	887b      	ldrh	r3, [r7, #2]
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	b29a      	uxth	r2, r3
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000708:	e005      	b.n	8000716 <HAL_I2S_Transmit_DMAEx+0xa2>
	} else {
		hi2s->TxXferSize = Size;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	887a      	ldrh	r2, [r7, #2]
 800070e:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = Size;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	887a      	ldrh	r2, [r7, #2]
 8000714:	855a      	strh	r2, [r3, #42]	; 0x2a
	}

	/* Set the I2S Tx DMA Half transfer complete callback */
	hi2s->hdmatx->XferHalfCpltCallback = NULL;
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800071a:	2200      	movs	r2, #0
 800071c:	641a      	str	r2, [r3, #64]	; 0x40
	hi2s->hdmatx->XferM1HalfCpltCallback = NULL;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000722:	2200      	movs	r2, #0
 8000724:	649a      	str	r2, [r3, #72]	; 0x48

	/* Set the I2S Tx DMA transfer complete callback */
	hi2s->hdmatx->XferCpltCallback = DMAEx_XferCpltCallback;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800072a:	4a2c      	ldr	r2, [pc, #176]	; (80007dc <HAL_I2S_Transmit_DMAEx+0x168>)
 800072c:	63da      	str	r2, [r3, #60]	; 0x3c
	hi2s->hdmatx->XferM1CpltCallback = DMAEx_XferM1CpltCallback;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000732:	4a2b      	ldr	r2, [pc, #172]	; (80007e0 <HAL_I2S_Transmit_DMAEx+0x16c>)
 8000734:	645a      	str	r2, [r3, #68]	; 0x44

	/* Set the DMA error callback */
	hi2s->hdmatx->XferErrorCallback = DMAEx_XferErrorCallback;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800073a:	4a2a      	ldr	r2, [pc, #168]	; (80007e4 <HAL_I2S_Transmit_DMAEx+0x170>)
 800073c:	64da      	str	r2, [r3, #76]	; 0x4c

	/* Set the DMA abort callback */
	hi2s->hdmatx->XferAbortCallback = NULL;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000742:	2200      	movs	r2, #0
 8000744:	651a      	str	r2, [r3, #80]	; 0x50

	/* Enable the Tx DMA Stream/Channel */
	if (HAL_OK
			!= HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx,
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800074a:	68b9      	ldr	r1, [r7, #8]
					(uint32_t) FirstBuffer, (uint32_t) &hi2s->Instance->DR,
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	330c      	adds	r3, #12
			!= HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx,
 8000752:	461c      	mov	r4, r3
 8000754:	687a      	ldr	r2, [r7, #4]
					(uint32_t) SecondBuffer, hi2s->TxXferSize)) {
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800075a:	b29b      	uxth	r3, r3
			!= HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx,
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	4613      	mov	r3, r2
 8000760:	4622      	mov	r2, r4
 8000762:	f001 fbff 	bl	8001f64 <HAL_DMAEx_MultiBufferStart_IT>
 8000766:	4603      	mov	r3, r0
	if (HAL_OK
 8000768:	2b00      	cmp	r3, #0
 800076a:	d00f      	beq.n	800078c <HAL_I2S_Transmit_DMAEx+0x118>
		/* Update SPI error code */
		SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000770:	f043 0208 	orr.w	r2, r3, #8
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	645a      	str	r2, [r3, #68]	; 0x44
		hi2s->State = HAL_I2S_STATE_READY;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2201      	movs	r2, #1
 800077c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		__HAL_UNLOCK(hi2s);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2200      	movs	r2, #0
 8000784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_ERROR;
 8000788:	2301      	movs	r3, #1
 800078a:	e022      	b.n	80007d2 <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Check if the I2S is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE)) {
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000796:	2b00      	cmp	r3, #0
 8000798:	d107      	bne.n	80007aa <HAL_I2S_Transmit_DMAEx+0x136>
		/* Enable I2S peripheral */
		__HAL_I2S_ENABLE(hi2s);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	69da      	ldr	r2, [r3, #28]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80007a8:	61da      	str	r2, [r3, #28]
	}

	/* Check if the I2S Tx request is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN)) {
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	f003 0302 	and.w	r3, r3, #2
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d107      	bne.n	80007c8 <HAL_I2S_Transmit_DMAEx+0x154>
		/* Enable Tx DMA Request */
		SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	685a      	ldr	r2, [r3, #4]
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f042 0202 	orr.w	r2, r2, #2
 80007c6:	605a      	str	r2, [r3, #4]
	}

	__HAL_UNLOCK(hi2s);
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	return HAL_OK;
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	371c      	adds	r7, #28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd90      	pop	{r4, r7, pc}
 80007da:	bf00      	nop
 80007dc:	080007e9 	.word	0x080007e9
 80007e0:	08000811 	.word	0x08000811
 80007e4:	08000839 	.word	0x08000839

080007e8 <DMAEx_XferCpltCallback>:

static void DMAEx_XferCpltCallback(struct __DMA_HandleTypeDef *hdma) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	//if (DMA1_Stream3->CR & (1 << 19)) {

	//if(DMA1_Stream4->CR&(1<<19)){
	if (WAV_FileRead2((uint8_t*) I2S_Buf0, sizeof(I2S_Buf0)) == 0) {
 80007f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <DMAEx_XferCpltCallback+0x24>)
 80007f6:	f7ff feff 	bl	80005f8 <WAV_FileRead2>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d101      	bne.n	8000804 <DMAEx_XferCpltCallback+0x1c>
		Audio_Player_Stop();
 8000800:	f000 f878 	bl	80008f4 <Audio_Player_Stop>
	}

	//}

}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000b8 	.word	0x200000b8

08000810 <DMAEx_XferM1CpltCallback>:

static void DMAEx_XferM1CpltCallback(struct __DMA_HandleTypeDef *hdma) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

	if (WAV_FileRead2((uint8_t*) I2S_Buf1, sizeof(I2S_Buf1)) == 0) {
 8000818:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800081c:	4805      	ldr	r0, [pc, #20]	; (8000834 <DMAEx_XferM1CpltCallback+0x24>)
 800081e:	f7ff feeb 	bl	80005f8 <WAV_FileRead2>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d101      	bne.n	800082c <DMAEx_XferM1CpltCallback+0x1c>
		Audio_Player_Stop();
 8000828:	f000 f864 	bl	80008f4 <Audio_Player_Stop>
	}

}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200008b8 	.word	0x200008b8

08000838 <DMAEx_XferErrorCallback>:

static void DMAEx_XferErrorCallback(struct __DMA_HandleTypeDef *hdma) {
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]

}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <Audio_Player_Init>:

void Audio_Player_Init(void) {
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
//	WM8978_Register_Wirter(54, 50);
//	WM8978_Register_Wirter(55, 50 | (1 << 8));



	WM8978_Register_Wirter(0, 0);
 8000850:	2100      	movs	r1, #0
 8000852:	2000      	movs	r0, #0
 8000854:	f7ff fe88 	bl	8000568 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(1, 0x0F);
 8000858:	210f      	movs	r1, #15
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fe84 	bl	8000568 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(2, 0x180);	// ģ��Ŵ���ʹ�ܣ�?? ʹ��������뻺����??
 8000860:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000864:	2002      	movs	r0, #2
 8000866:	f7ff fe7f 	bl	8000568 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(3, 0x7F);
 800086a:	217f      	movs	r1, #127	; 0x7f
 800086c:	2003      	movs	r0, #3
 800086e:	f7ff fe7b 	bl	8000568 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(4, 0x10);
 8000872:	2110      	movs	r1, #16
 8000874:	2004      	movs	r0, #4
 8000876:	f7ff fe77 	bl	8000568 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(6, 0);
 800087a:	2100      	movs	r1, #0
 800087c:	2006      	movs	r0, #6
 800087e:	f7ff fe73 	bl	8000568 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(10, 0x08);
 8000882:	2108      	movs	r1, #8
 8000884:	200a      	movs	r0, #10
 8000886:	f7ff fe6f 	bl	8000568 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(43, 0x10);
 800088a:	2110      	movs	r1, #16
 800088c:	202b      	movs	r0, #43	; 0x2b
 800088e:	f7ff fe6b 	bl	8000568 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(52,40);		// 设置LOUT2左声道音�????
 8000892:	2128      	movs	r1, #40	; 0x28
 8000894:	2034      	movs	r0, #52	; 0x34
 8000896:	f7ff fe67 	bl	8000568 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(53,40|(1<<8));
 800089a:	f44f 7194 	mov.w	r1, #296	; 0x128
 800089e:	2035      	movs	r0, #53	; 0x35
 80008a0:	f7ff fe62 	bl	8000568 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(54, 50);
 80008a4:	2132      	movs	r1, #50	; 0x32
 80008a6:	2036      	movs	r0, #54	; 0x36
 80008a8:	f7ff fe5e 	bl	8000568 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(55, 50 | (1 << 8));
 80008ac:	f44f 7199 	mov.w	r1, #306	; 0x132
 80008b0:	2037      	movs	r0, #55	; 0x37
 80008b2:	f7ff fe59 	bl	8000568 <WM8978_Register_Wirter>

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <Audio_Player_Start>:
	WM8978_Register_Wirter(53, num | (1 << 8));
	WM8978_Register_Wirter(54, num);
	WM8978_Register_Wirter(55, num | (1 << 8));
}

void Audio_Player_Start() {
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	WAV_FileRead2((uint8_t*) I2S_Buf0, sizeof(I2S_Buf0));
 80008c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008c4:	4808      	ldr	r0, [pc, #32]	; (80008e8 <Audio_Player_Start+0x2c>)
 80008c6:	f7ff fe97 	bl	80005f8 <WAV_FileRead2>
	WAV_FileRead2((uint8_t*) I2S_Buf1, sizeof(I2S_Buf1));
 80008ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ce:	4807      	ldr	r0, [pc, #28]	; (80008ec <Audio_Player_Start+0x30>)
 80008d0:	f7ff fe92 	bl	80005f8 <WAV_FileRead2>
	HAL_I2S_Transmit_DMAEx(&USEI2S, I2S_Buf0, I2S_Buf1, BUFFER_SIZE);
 80008d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d8:	4a04      	ldr	r2, [pc, #16]	; (80008ec <Audio_Player_Start+0x30>)
 80008da:	4903      	ldr	r1, [pc, #12]	; (80008e8 <Audio_Player_Start+0x2c>)
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <Audio_Player_Start+0x34>)
 80008de:	f7ff fec9 	bl	8000674 <HAL_I2S_Transmit_DMAEx>
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200000b8 	.word	0x200000b8
 80008ec:	200008b8 	.word	0x200008b8
 80008f0:	20003394 	.word	0x20003394

080008f4 <Audio_Player_Stop>:

void Audio_Player_Resume(void) {
	HAL_I2S_DMAResume(&USEI2S);
}

void Audio_Player_Stop(void) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	WAV_FileInit();
 80008f8:	f7ff fe68 	bl	80005cc <WAV_FileInit>
	HAL_I2S_DMAStop(&USEI2S);
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <Audio_Player_Stop+0x14>)
 80008fe:	f005 f937 	bl	8005b70 <HAL_I2S_DMAStop>
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20003394 	.word	0x20003394

0800090c <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart5, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000914:	1d39      	adds	r1, r7, #4
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
 800091a:	2201      	movs	r2, #1
 800091c:	4803      	ldr	r0, [pc, #12]	; (800092c <__io_putchar+0x20>)
 800091e:	f006 fca6 	bl	800726e <HAL_UART_Transmit>
  return ch;
 8000922:	687b      	ldr	r3, [r7, #4]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20002274 	.word	0x20002274

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000934:	f000 fe14 	bl	8001560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000938:	f000 f858 	bl	80009ec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800093c:	f000 f8c0 	bl	8000ac0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000940:	f000 f9e4 	bl	8000d0c <MX_GPIO_Init>
  MX_DMA_Init();
 8000944:	f000 f9ba 	bl	8000cbc <MX_DMA_Init>
  MX_I2S3_Init();
 8000948:	f000 f960 	bl	8000c0c <MX_I2S3_Init>
  MX_I2C1_Init();
 800094c:	f000 f8d4 	bl	8000af8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000950:	f000 f900 	bl	8000b54 <MX_I2C2_Init>
  MX_I2S2_Init();
 8000954:	f000 f92c 	bl	8000bb0 <MX_I2S2_Init>
  MX_FATFS_Init();
 8000958:	f007 ff0a 	bl	8008770 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 800095c:	f00d ff28 	bl	800e7b0 <MX_USB_HOST_Init>
  MX_UART5_Init();
 8000960:	f000 f982 	bl	8000c68 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  Audio_Player_Init();
 8000964:	f7ff ff72 	bl	800084c <Audio_Player_Init>
  //ETX_MSC_ProcessUsbDevice();

  while( Appli_state !=APPLICATION_READY){
 8000968:	e001      	b.n	800096e <main+0x3e>
	    MX_USB_HOST_Process();
 800096a:	f00d ff47 	bl	800e7fc <MX_USB_HOST_Process>
  while( Appli_state !=APPLICATION_READY){
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <main+0x9c>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b02      	cmp	r3, #2
 8000974:	d1f9      	bne.n	800096a <main+0x3a>
  }
  res = f_mount( &UsbDiskFatFs, (TCHAR const*)UsbDiskPath, 0 );
 8000976:	2200      	movs	r2, #0
 8000978:	4915      	ldr	r1, [pc, #84]	; (80009d0 <main+0xa0>)
 800097a:	4816      	ldr	r0, [pc, #88]	; (80009d4 <main+0xa4>)
 800097c:	f00d f87e 	bl	800da7c <f_mount>
 8000980:	4603      	mov	r3, r0
 8000982:	461a      	mov	r2, r3
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <main+0xa8>)
 8000986:	701a      	strb	r2, [r3, #0]

  printf("mount %d\n",res);
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <main+0xa8>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4619      	mov	r1, r3
 800098e:	4813      	ldr	r0, [pc, #76]	; (80009dc <main+0xac>)
 8000990:	f00e fb1a 	bl	800efc8 <iprintf>
  res = f_open( &file, file_name, FA_READ );
 8000994:	2201      	movs	r2, #1
 8000996:	4912      	ldr	r1, [pc, #72]	; (80009e0 <main+0xb0>)
 8000998:	4812      	ldr	r0, [pc, #72]	; (80009e4 <main+0xb4>)
 800099a:	f00d f8b5 	bl	800db08 <f_open>
 800099e:	4603      	mov	r3, r0
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <main+0xa8>)
 80009a4:	701a      	strb	r2, [r3, #0]
  f_lseek(&file,44);
 80009a6:	212c      	movs	r1, #44	; 0x2c
 80009a8:	480e      	ldr	r0, [pc, #56]	; (80009e4 <main+0xb4>)
 80009aa:	f00d fc80 	bl	800e2ae <f_lseek>
  printf("open %d\n",res);
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <main+0xa8>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	4619      	mov	r1, r3
 80009b4:	480c      	ldr	r0, [pc, #48]	; (80009e8 <main+0xb8>)
 80009b6:	f00e fb07 	bl	800efc8 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80009ba:	f00d ff1f 	bl	800e7fc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	  Audio_Player_Start();
 80009be:	f7ff ff7d 	bl	80008bc <Audio_Player_Start>
	  HAL_Delay(50000);
 80009c2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80009c6:	f000 fe3d 	bl	8001644 <HAL_Delay>
    MX_USB_HOST_Process();
 80009ca:	e7f6      	b.n	80009ba <main+0x8a>
 80009cc:	20002130 	.word	0x20002130
 80009d0:	200020f4 	.word	0x200020f4
 80009d4:	200010c0 	.word	0x200010c0
 80009d8:	200032e8 	.word	0x200032e8
 80009dc:	0800fe78 	.word	0x0800fe78
 80009e0:	20000000 	.word	0x20000000
 80009e4:	200022b8 	.word	0x200022b8
 80009e8:	0800fe84 	.word	0x0800fe84

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b094      	sub	sp, #80	; 0x50
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	f107 0320 	add.w	r3, r7, #32
 80009f6:	2230      	movs	r2, #48	; 0x30
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f00e fa32 	bl	800ee64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <SystemClock_Config+0xcc>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	4a27      	ldr	r2, [pc, #156]	; (8000ab8 <SystemClock_Config+0xcc>)
 8000a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a20:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <SystemClock_Config+0xcc>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	4b22      	ldr	r3, [pc, #136]	; (8000abc <SystemClock_Config+0xd0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a21      	ldr	r2, [pc, #132]	; (8000abc <SystemClock_Config+0xd0>)
 8000a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3a:	6013      	str	r3, [r2, #0]
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <SystemClock_Config+0xd0>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a52:	2302      	movs	r3, #2
 8000a54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a60:	23a8      	movs	r3, #168	; 0xa8
 8000a62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a68:	2307      	movs	r3, #7
 8000a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6c:	f107 0320 	add.w	r3, r7, #32
 8000a70:	4618      	mov	r0, r3
 8000a72:	f005 fdfb 	bl	800666c <HAL_RCC_OscConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a7c:	f000 f9a6 	bl	8000dcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a80:	230f      	movs	r3, #15
 8000a82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a84:	2302      	movs	r3, #2
 8000a86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	2105      	movs	r1, #5
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f006 f85c 	bl	8006b5c <HAL_RCC_ClockConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000aaa:	f000 f98f 	bl	8000dcc <Error_Handler>
  }
}
 8000aae:	bf00      	nop
 8000ab0:	3750      	adds	r7, #80	; 0x50
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40007000 	.word	0x40007000

08000ac0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ad6:	23c0      	movs	r3, #192	; 0xc0
 8000ad8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ade:	463b      	mov	r3, r7
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f006 fa37 	bl	8006f54 <HAL_RCCEx_PeriphCLKConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000aec:	f000 f96e 	bl	8000dcc <Error_Handler>
  }
}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000afe:	4a13      	ldr	r2, [pc, #76]	; (8000b4c <MX_I2C1_Init+0x54>)
 8000b00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b04:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <MX_I2C1_Init+0x58>)
 8000b06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b36:	f004 fa8f 	bl	8005058 <HAL_I2C_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b40:	f000 f944 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20002168 	.word	0x20002168
 8000b4c:	40005400 	.word	0x40005400
 8000b50:	000186a0 	.word	0x000186a0

08000b54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_I2C2_Init+0x50>)
 8000b5a:	4a13      	ldr	r2, [pc, #76]	; (8000ba8 <MX_I2C2_Init+0x54>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_I2C2_Init+0x50>)
 8000b60:	4a12      	ldr	r2, [pc, #72]	; (8000bac <MX_I2C2_Init+0x58>)
 8000b62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_I2C2_Init+0x50>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_I2C2_Init+0x50>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_I2C2_Init+0x50>)
 8000b72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b76:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <MX_I2C2_Init+0x50>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_I2C2_Init+0x50>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <MX_I2C2_Init+0x50>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_I2C2_Init+0x50>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_I2C2_Init+0x50>)
 8000b92:	f004 fa61 	bl	8005058 <HAL_I2C_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b9c:	f000 f916 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200021bc 	.word	0x200021bc
 8000ba8:	40005800 	.word	0x40005800
 8000bac:	000186a0 	.word	0x000186a0

08000bb0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MX_I2S2_Init+0x54>)
 8000bb6:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <MX_I2S2_Init+0x58>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <MX_I2S2_Init+0x54>)
 8000bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <MX_I2S2_Init+0x54>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <MX_I2S2_Init+0x54>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <MX_I2S2_Init+0x54>)
 8000bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd4:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <MX_I2S2_Init+0x54>)
 8000bd8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000bdc:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_I2S2_Init+0x54>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <MX_I2S2_Init+0x54>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_I2S2_Init+0x54>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000bf0:	4804      	ldr	r0, [pc, #16]	; (8000c04 <MX_I2S2_Init+0x54>)
 8000bf2:	f004 fe7d 	bl	80058f0 <HAL_I2S_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000bfc:	f000 f8e6 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	2000334c 	.word	0x2000334c
 8000c08:	40003800 	.word	0x40003800

08000c0c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <MX_I2S3_Init+0x54>)
 8000c12:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <MX_I2S3_Init+0x58>)
 8000c14:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <MX_I2S3_Init+0x54>)
 8000c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c1c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <MX_I2S3_Init+0x54>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <MX_I2S3_Init+0x54>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <MX_I2S3_Init+0x54>)
 8000c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c30:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <MX_I2S3_Init+0x54>)
 8000c34:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000c38:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <MX_I2S3_Init+0x54>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <MX_I2S3_Init+0x54>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <MX_I2S3_Init+0x54>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000c4c:	4804      	ldr	r0, [pc, #16]	; (8000c60 <MX_I2S3_Init+0x54>)
 8000c4e:	f004 fe4f 	bl	80058f0 <HAL_I2S_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000c58:	f000 f8b8 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20003394 	.word	0x20003394
 8000c64:	40003c00 	.word	0x40003c00

08000c68 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_UART5_Init+0x4c>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <MX_UART5_Init+0x50>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <MX_UART5_Init+0x4c>)
 8000c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c78:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_UART5_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_UART5_Init+0x4c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_UART5_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_UART5_Init+0x4c>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_UART5_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_UART5_Init+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_UART5_Init+0x4c>)
 8000ca0:	f006 fa98 	bl	80071d4 <HAL_UART_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000caa:	f000 f88f 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20002274 	.word	0x20002274
 8000cb8:	40005000 	.word	0x40005000

08000cbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <MX_DMA_Init+0x4c>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <MX_DMA_Init+0x4c>)
 8000ccc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <MX_DMA_Init+0x4c>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	200f      	movs	r0, #15
 8000ce4:	f000 fdad 	bl	8001842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000ce8:	200f      	movs	r0, #15
 8000cea:	f000 fdc6 	bl	800187a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 2, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	2010      	movs	r0, #16
 8000cf4:	f000 fda5 	bl	8001842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000cf8:	2010      	movs	r0, #16
 8000cfa:	f000 fdbe 	bl	800187a <HAL_NVIC_EnableIRQ>

}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023800 	.word	0x40023800

08000d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b087      	sub	sp, #28
 8000d10:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <MX_GPIO_Init+0xbc>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a2b      	ldr	r2, [pc, #172]	; (8000dc8 <MX_GPIO_Init+0xbc>)
 8000d1c:	f043 0320 	orr.w	r3, r3, #32
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b29      	ldr	r3, [pc, #164]	; (8000dc8 <MX_GPIO_Init+0xbc>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0320 	and.w	r3, r3, #32
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <MX_GPIO_Init+0xbc>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a24      	ldr	r2, [pc, #144]	; (8000dc8 <MX_GPIO_Init+0xbc>)
 8000d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <MX_GPIO_Init+0xbc>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <MX_GPIO_Init+0xbc>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a1d      	ldr	r2, [pc, #116]	; (8000dc8 <MX_GPIO_Init+0xbc>)
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <MX_GPIO_Init+0xbc>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0304 	and.w	r3, r3, #4
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <MX_GPIO_Init+0xbc>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a16      	ldr	r2, [pc, #88]	; (8000dc8 <MX_GPIO_Init+0xbc>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_GPIO_Init+0xbc>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <MX_GPIO_Init+0xbc>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a0f      	ldr	r2, [pc, #60]	; (8000dc8 <MX_GPIO_Init+0xbc>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <MX_GPIO_Init+0xbc>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_GPIO_Init+0xbc>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <MX_GPIO_Init+0xbc>)
 8000da8:	f043 0308 	orr.w	r3, r3, #8
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_GPIO_Init+0xbc>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]

}
 8000dba:	bf00      	nop
 8000dbc:	371c      	adds	r7, #28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800

08000dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd0:	b672      	cpsid	i
}
 8000dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <Error_Handler+0x8>
	...

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <HAL_MspInit+0x4c>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a0f      	ldr	r2, [pc, #60]	; (8000e24 <HAL_MspInit+0x4c>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <HAL_MspInit+0x4c>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	603b      	str	r3, [r7, #0]
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_MspInit+0x4c>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <HAL_MspInit+0x4c>)
 8000e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e08:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_MspInit+0x4c>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40023800 	.word	0x40023800

08000e28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	; 0x30
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a32      	ldr	r2, [pc, #200]	; (8000f10 <HAL_I2C_MspInit+0xe8>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d12c      	bne.n	8000ea4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
 8000e4e:	4b31      	ldr	r3, [pc, #196]	; (8000f14 <HAL_I2C_MspInit+0xec>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a30      	ldr	r2, [pc, #192]	; (8000f14 <HAL_I2C_MspInit+0xec>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b2e      	ldr	r3, [pc, #184]	; (8000f14 <HAL_I2C_MspInit+0xec>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	61bb      	str	r3, [r7, #24]
 8000e64:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e66:	23c0      	movs	r3, #192	; 0xc0
 8000e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e6a:	2312      	movs	r3, #18
 8000e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e76:	2304      	movs	r3, #4
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7a:	f107 031c 	add.w	r3, r7, #28
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4825      	ldr	r0, [pc, #148]	; (8000f18 <HAL_I2C_MspInit+0xf0>)
 8000e82:	f002 f9dd 	bl	8003240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <HAL_I2C_MspInit+0xec>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a21      	ldr	r2, [pc, #132]	; (8000f14 <HAL_I2C_MspInit+0xec>)
 8000e90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <HAL_I2C_MspInit+0xec>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ea2:	e030      	b.n	8000f06 <HAL_I2C_MspInit+0xde>
  else if(hi2c->Instance==I2C2)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a1c      	ldr	r2, [pc, #112]	; (8000f1c <HAL_I2C_MspInit+0xf4>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d12b      	bne.n	8000f06 <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <HAL_I2C_MspInit+0xec>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a17      	ldr	r2, [pc, #92]	; (8000f14 <HAL_I2C_MspInit+0xec>)
 8000eb8:	f043 0320 	orr.w	r3, r3, #32
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <HAL_I2C_MspInit+0xec>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0320 	and.w	r3, r3, #32
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ece:	2312      	movs	r3, #18
 8000ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000eda:	2304      	movs	r3, #4
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480e      	ldr	r0, [pc, #56]	; (8000f20 <HAL_I2C_MspInit+0xf8>)
 8000ee6:	f002 f9ab 	bl	8003240 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <HAL_I2C_MspInit+0xec>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <HAL_I2C_MspInit+0xec>)
 8000ef4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_I2C_MspInit+0xec>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
}
 8000f06:	bf00      	nop
 8000f08:	3730      	adds	r7, #48	; 0x30
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40005400 	.word	0x40005400
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020400 	.word	0x40020400
 8000f1c:	40005800 	.word	0x40005800
 8000f20:	40021400 	.word	0x40021400

08000f24 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08e      	sub	sp, #56	; 0x38
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a4b      	ldr	r2, [pc, #300]	; (8001070 <HAL_I2S_MspInit+0x14c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	f040 80a0 	bne.w	8001088 <HAL_I2S_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
 8000f4c:	4b49      	ldr	r3, [pc, #292]	; (8001074 <HAL_I2S_MspInit+0x150>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	4a48      	ldr	r2, [pc, #288]	; (8001074 <HAL_I2S_MspInit+0x150>)
 8000f52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f56:	6413      	str	r3, [r2, #64]	; 0x40
 8000f58:	4b46      	ldr	r3, [pc, #280]	; (8001074 <HAL_I2S_MspInit+0x150>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f60:	623b      	str	r3, [r7, #32]
 8000f62:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
 8000f68:	4b42      	ldr	r3, [pc, #264]	; (8001074 <HAL_I2S_MspInit+0x150>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	4a41      	ldr	r2, [pc, #260]	; (8001074 <HAL_I2S_MspInit+0x150>)
 8000f6e:	f043 0304 	orr.w	r3, r3, #4
 8000f72:	6313      	str	r3, [r2, #48]	; 0x30
 8000f74:	4b3f      	ldr	r3, [pc, #252]	; (8001074 <HAL_I2S_MspInit+0x150>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
 8000f84:	4b3b      	ldr	r3, [pc, #236]	; (8001074 <HAL_I2S_MspInit+0x150>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	4a3a      	ldr	r2, [pc, #232]	; (8001074 <HAL_I2S_MspInit+0x150>)
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f90:	4b38      	ldr	r3, [pc, #224]	; (8001074 <HAL_I2S_MspInit+0x150>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	61bb      	str	r3, [r7, #24]
 8000f9a:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000fac:	2306      	movs	r3, #6
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4830      	ldr	r0, [pc, #192]	; (8001078 <HAL_I2S_MspInit+0x154>)
 8000fb8:	f002 f942 	bl	8003240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000fbc:	2348      	movs	r3, #72	; 0x48
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fcc:	2305      	movs	r3, #5
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4828      	ldr	r0, [pc, #160]	; (8001078 <HAL_I2S_MspInit+0x154>)
 8000fd8:	f002 f932 	bl	8003240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000fdc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fee:	2305      	movs	r3, #5
 8000ff0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4820      	ldr	r0, [pc, #128]	; (800107c <HAL_I2S_MspInit+0x158>)
 8000ffa:	f002 f921 	bl	8003240 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000ffe:	4b20      	ldr	r3, [pc, #128]	; (8001080 <HAL_I2S_MspInit+0x15c>)
 8001000:	4a20      	ldr	r2, [pc, #128]	; (8001084 <HAL_I2S_MspInit+0x160>)
 8001002:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001004:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <HAL_I2S_MspInit+0x15c>)
 8001006:	2200      	movs	r2, #0
 8001008:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <HAL_I2S_MspInit+0x15c>)
 800100c:	2240      	movs	r2, #64	; 0x40
 800100e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001010:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <HAL_I2S_MspInit+0x15c>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <HAL_I2S_MspInit+0x15c>)
 8001018:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800101c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <HAL_I2S_MspInit+0x15c>)
 8001020:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001024:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <HAL_I2S_MspInit+0x15c>)
 8001028:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800102c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <HAL_I2S_MspInit+0x15c>)
 8001030:	2200      	movs	r2, #0
 8001032:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_I2S_MspInit+0x15c>)
 8001036:	2200      	movs	r2, #0
 8001038:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <HAL_I2S_MspInit+0x15c>)
 800103c:	2204      	movs	r2, #4
 800103e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <HAL_I2S_MspInit+0x15c>)
 8001042:	2203      	movs	r2, #3
 8001044:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_I2S_MspInit+0x15c>)
 8001048:	2200      	movs	r2, #0
 800104a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_I2S_MspInit+0x15c>)
 800104e:	2200      	movs	r2, #0
 8001050:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001052:	480b      	ldr	r0, [pc, #44]	; (8001080 <HAL_I2S_MspInit+0x15c>)
 8001054:	f000 fc2c 	bl	80018b0 <HAL_DMA_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 800105e:	f7ff feb5 	bl	8000dcc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a06      	ldr	r2, [pc, #24]	; (8001080 <HAL_I2S_MspInit+0x15c>)
 8001066:	639a      	str	r2, [r3, #56]	; 0x38
 8001068:	4a05      	ldr	r2, [pc, #20]	; (8001080 <HAL_I2S_MspInit+0x15c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800106e:	e0ca      	b.n	8001206 <HAL_I2S_MspInit+0x2e2>
 8001070:	40003800 	.word	0x40003800
 8001074:	40023800 	.word	0x40023800
 8001078:	40020800 	.word	0x40020800
 800107c:	40020400 	.word	0x40020400
 8001080:	200032ec 	.word	0x200032ec
 8001084:	40026070 	.word	0x40026070
  else if(hi2s->Instance==SPI3)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a60      	ldr	r2, [pc, #384]	; (8001210 <HAL_I2S_MspInit+0x2ec>)
 800108e:	4293      	cmp	r3, r2
 8001090:	f040 80b9 	bne.w	8001206 <HAL_I2S_MspInit+0x2e2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	4b5e      	ldr	r3, [pc, #376]	; (8001214 <HAL_I2S_MspInit+0x2f0>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	4a5d      	ldr	r2, [pc, #372]	; (8001214 <HAL_I2S_MspInit+0x2f0>)
 800109e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010a2:	6413      	str	r3, [r2, #64]	; 0x40
 80010a4:	4b5b      	ldr	r3, [pc, #364]	; (8001214 <HAL_I2S_MspInit+0x2f0>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	4b57      	ldr	r3, [pc, #348]	; (8001214 <HAL_I2S_MspInit+0x2f0>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	4a56      	ldr	r2, [pc, #344]	; (8001214 <HAL_I2S_MspInit+0x2f0>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6313      	str	r3, [r2, #48]	; 0x30
 80010c0:	4b54      	ldr	r3, [pc, #336]	; (8001214 <HAL_I2S_MspInit+0x2f0>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	4b50      	ldr	r3, [pc, #320]	; (8001214 <HAL_I2S_MspInit+0x2f0>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d4:	4a4f      	ldr	r2, [pc, #316]	; (8001214 <HAL_I2S_MspInit+0x2f0>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6313      	str	r3, [r2, #48]	; 0x30
 80010dc:	4b4d      	ldr	r3, [pc, #308]	; (8001214 <HAL_I2S_MspInit+0x2f0>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	4b49      	ldr	r3, [pc, #292]	; (8001214 <HAL_I2S_MspInit+0x2f0>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f0:	4a48      	ldr	r2, [pc, #288]	; (8001214 <HAL_I2S_MspInit+0x2f0>)
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	6313      	str	r3, [r2, #48]	; 0x30
 80010f8:	4b46      	ldr	r3, [pc, #280]	; (8001214 <HAL_I2S_MspInit+0x2f0>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001104:	2310      	movs	r3, #16
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001114:	2306      	movs	r3, #6
 8001116:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111c:	4619      	mov	r1, r3
 800111e:	483e      	ldr	r0, [pc, #248]	; (8001218 <HAL_I2S_MspInit+0x2f4>)
 8001120:	f002 f88e 	bl	8003240 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001134:	2306      	movs	r3, #6
 8001136:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	4619      	mov	r1, r3
 800113e:	4837      	ldr	r0, [pc, #220]	; (800121c <HAL_I2S_MspInit+0x2f8>)
 8001140:	f002 f87e 	bl	8003240 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001144:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8001156:	2305      	movs	r3, #5
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115e:	4619      	mov	r1, r3
 8001160:	482e      	ldr	r0, [pc, #184]	; (800121c <HAL_I2S_MspInit+0x2f8>)
 8001162:	f002 f86d 	bl	8003240 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001166:	2328      	movs	r3, #40	; 0x28
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001176:	2306      	movs	r3, #6
 8001178:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117e:	4619      	mov	r1, r3
 8001180:	4827      	ldr	r0, [pc, #156]	; (8001220 <HAL_I2S_MspInit+0x2fc>)
 8001182:	f002 f85d 	bl	8003240 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001186:	4b27      	ldr	r3, [pc, #156]	; (8001224 <HAL_I2S_MspInit+0x300>)
 8001188:	4a27      	ldr	r2, [pc, #156]	; (8001228 <HAL_I2S_MspInit+0x304>)
 800118a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <HAL_I2S_MspInit+0x300>)
 800118e:	2200      	movs	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001192:	4b24      	ldr	r3, [pc, #144]	; (8001224 <HAL_I2S_MspInit+0x300>)
 8001194:	2240      	movs	r2, #64	; 0x40
 8001196:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001198:	4b22      	ldr	r3, [pc, #136]	; (8001224 <HAL_I2S_MspInit+0x300>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800119e:	4b21      	ldr	r3, [pc, #132]	; (8001224 <HAL_I2S_MspInit+0x300>)
 80011a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a4:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011a6:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <HAL_I2S_MspInit+0x300>)
 80011a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011ac:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011ae:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <HAL_I2S_MspInit+0x300>)
 80011b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011b4:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80011b6:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_I2S_MspInit+0x300>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <HAL_I2S_MspInit+0x300>)
 80011be:	2200      	movs	r2, #0
 80011c0:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_I2S_MspInit+0x300>)
 80011c4:	2204      	movs	r2, #4
 80011c6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <HAL_I2S_MspInit+0x300>)
 80011ca:	2203      	movs	r2, #3
 80011cc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_I2S_MspInit+0x300>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <HAL_I2S_MspInit+0x300>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80011da:	4812      	ldr	r0, [pc, #72]	; (8001224 <HAL_I2S_MspInit+0x300>)
 80011dc:	f000 fb68 	bl	80018b0 <HAL_DMA_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_I2S_MspInit+0x2c6>
      Error_Handler();
 80011e6:	f7ff fdf1 	bl	8000dcc <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a0d      	ldr	r2, [pc, #52]	; (8001224 <HAL_I2S_MspInit+0x300>)
 80011ee:	639a      	str	r2, [r3, #56]	; 0x38
 80011f0:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <HAL_I2S_MspInit+0x300>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	2033      	movs	r0, #51	; 0x33
 80011fc:	f000 fb21 	bl	8001842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001200:	2033      	movs	r0, #51	; 0x33
 8001202:	f000 fb3a 	bl	800187a <HAL_NVIC_EnableIRQ>
}
 8001206:	bf00      	nop
 8001208:	3738      	adds	r7, #56	; 0x38
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40003c00 	.word	0x40003c00
 8001214:	40023800 	.word	0x40023800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020800 	.word	0x40020800
 8001220:	40020400 	.word	0x40020400
 8001224:	20002214 	.word	0x20002214
 8001228:	40026088 	.word	0x40026088

0800122c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a28      	ldr	r2, [pc, #160]	; (80012ec <HAL_UART_MspInit+0xc0>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d14a      	bne.n	80012e4 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <HAL_UART_MspInit+0xc4>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	4a26      	ldr	r2, [pc, #152]	; (80012f0 <HAL_UART_MspInit+0xc4>)
 8001258:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800125c:	6413      	str	r3, [r2, #64]	; 0x40
 800125e:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <HAL_UART_MspInit+0xc4>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <HAL_UART_MspInit+0xc4>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a1f      	ldr	r2, [pc, #124]	; (80012f0 <HAL_UART_MspInit+0xc4>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <HAL_UART_MspInit+0xc4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <HAL_UART_MspInit+0xc4>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a18      	ldr	r2, [pc, #96]	; (80012f0 <HAL_UART_MspInit+0xc4>)
 8001290:	f043 0308 	orr.w	r3, r3, #8
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <HAL_UART_MspInit+0xc4>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80012b4:	2308      	movs	r3, #8
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	480d      	ldr	r0, [pc, #52]	; (80012f4 <HAL_UART_MspInit+0xc8>)
 80012c0:	f001 ffbe 	bl	8003240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012c4:	2304      	movs	r3, #4
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80012d4:	2308      	movs	r3, #8
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <HAL_UART_MspInit+0xcc>)
 80012e0:	f001 ffae 	bl	8003240 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80012e4:	bf00      	nop
 80012e6:	3728      	adds	r7, #40	; 0x28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40005000 	.word	0x40005000
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020800 	.word	0x40020800
 80012f8:	40020c00 	.word	0x40020c00

080012fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <NMI_Handler+0x4>

08001302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <HardFault_Handler+0x4>

08001308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <MemManage_Handler+0x4>

0800130e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <BusFault_Handler+0x4>

08001314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <UsageFault_Handler+0x4>

0800131a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001348:	f000 f95c 	bl	8001604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}

08001350 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <DMA1_Stream4_IRQHandler+0x10>)
 8001356:	f000 fbc9 	bl	8001aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200032ec 	.word	0x200032ec

08001364 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <DMA1_Stream5_IRQHandler+0x10>)
 800136a:	f000 fbbf 	bl	8001aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20002214 	.word	0x20002214

08001378 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <SPI3_IRQHandler+0x10>)
 800137e:	f004 fdd1 	bl	8005f24 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20003394 	.word	0x20003394

0800138c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <OTG_FS_IRQHandler+0x10>)
 8001392:	f002 fb5b 	bl	8003a4c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20005824 	.word	0x20005824

080013a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	e00a      	b.n	80013c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013b2:	f3af 8000 	nop.w
 80013b6:	4601      	mov	r1, r0
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	60ba      	str	r2, [r7, #8]
 80013be:	b2ca      	uxtb	r2, r1
 80013c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	dbf0      	blt.n	80013b2 <_read+0x12>
	}

return len;
 80013d0:	687b      	ldr	r3, [r7, #4]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	e009      	b.n	8001400 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	60ba      	str	r2, [r7, #8]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fa89 	bl	800090c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	3301      	adds	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	429a      	cmp	r2, r3
 8001406:	dbf1      	blt.n	80013ec <_write+0x12>
	}
	return len;
 8001408:	687b      	ldr	r3, [r7, #4]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <_close>:

int _close(int file)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
	return -1;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800143a:	605a      	str	r2, [r3, #4]
	return 0;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <_isatty>:

int _isatty(int file)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
	return 1;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
	return 0;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001484:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <_sbrk+0x5c>)
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <_sbrk+0x60>)
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <_sbrk+0x64>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <_sbrk+0x64>)
 800149a:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <_sbrk+0x68>)
 800149c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <_sbrk+0x64>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d207      	bcs.n	80014bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014ac:	f00d fc92 	bl	800edd4 <__errno>
 80014b0:	4603      	mov	r3, r0
 80014b2:	220c      	movs	r2, #12
 80014b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ba:	e009      	b.n	80014d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <_sbrk+0x64>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <_sbrk+0x64>)
 80014cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ce:	68fb      	ldr	r3, [r7, #12]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20020000 	.word	0x20020000
 80014dc:	00000400 	.word	0x00000400
 80014e0:	200020f8 	.word	0x200020f8
 80014e4:	20005b38 	.word	0x20005b38

080014e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <SystemInit+0x20>)
 80014ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <SystemInit+0x20>)
 80014f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800150c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001544 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001510:	480d      	ldr	r0, [pc, #52]	; (8001548 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001512:	490e      	ldr	r1, [pc, #56]	; (800154c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001514:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001528:	4c0b      	ldr	r4, [pc, #44]	; (8001558 <LoopFillZerobss+0x26>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001536:	f7ff ffd7 	bl	80014e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800153a:	f00d fc51 	bl	800ede0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153e:	f7ff f9f7 	bl	8000930 <main>
  bx  lr    
 8001542:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001544:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800154c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001550:	08086f3c 	.word	0x08086f3c
  ldr r2, =_sbss
 8001554:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001558:	20005b38 	.word	0x20005b38

0800155c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC_IRQHandler>
	...

08001560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <HAL_Init+0x40>)
 800156a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800156e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <HAL_Init+0x40>)
 8001576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800157a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_Init+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <HAL_Init+0x40>)
 8001582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001586:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001588:	2003      	movs	r0, #3
 800158a:	f000 f94f 	bl	800182c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158e:	200f      	movs	r0, #15
 8001590:	f000 f808 	bl	80015a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001594:	f7ff fc20 	bl	8000dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023c00 	.word	0x40023c00

080015a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_InitTick+0x54>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_InitTick+0x58>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f967 	bl	8001896 <HAL_SYSTICK_Config>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00e      	b.n	80015f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b0f      	cmp	r3, #15
 80015d6:	d80a      	bhi.n	80015ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d8:	2200      	movs	r2, #0
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	f000 f92f 	bl	8001842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <HAL_InitTick+0x5c>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	2000000c 	.word	0x2000000c
 80015fc:	20000014 	.word	0x20000014
 8001600:	20000010 	.word	0x20000010

08001604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_IncTick+0x20>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_IncTick+0x24>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4413      	add	r3, r2
 8001614:	4a04      	ldr	r2, [pc, #16]	; (8001628 <HAL_IncTick+0x24>)
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20000014 	.word	0x20000014
 8001628:	200033dc 	.word	0x200033dc

0800162c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return uwTick;
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <HAL_GetTick+0x14>)
 8001632:	681b      	ldr	r3, [r3, #0]
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	200033dc 	.word	0x200033dc

08001644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800164c:	f7ff ffee 	bl	800162c <HAL_GetTick>
 8001650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165c:	d005      	beq.n	800166a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_Delay+0x44>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800166a:	bf00      	nop
 800166c:	f7ff ffde 	bl	800162c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	429a      	cmp	r2, r3
 800167a:	d8f7      	bhi.n	800166c <HAL_Delay+0x28>
  {
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000014 	.word	0x20000014

0800168c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a8:	4013      	ands	r3, r2
 80016aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016be:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	60d3      	str	r3, [r2, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <__NVIC_GetPriorityGrouping+0x18>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	f003 0307 	and.w	r3, r3, #7
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	db0b      	blt.n	800171a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	f003 021f 	and.w	r2, r3, #31
 8001708:	4907      	ldr	r1, [pc, #28]	; (8001728 <__NVIC_EnableIRQ+0x38>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	095b      	lsrs	r3, r3, #5
 8001710:	2001      	movs	r0, #1
 8001712:	fa00 f202 	lsl.w	r2, r0, r2
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000e100 	.word	0xe000e100

0800172c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173c:	2b00      	cmp	r3, #0
 800173e:	db0a      	blt.n	8001756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	490c      	ldr	r1, [pc, #48]	; (8001778 <__NVIC_SetPriority+0x4c>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	0112      	lsls	r2, r2, #4
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	440b      	add	r3, r1
 8001750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001754:	e00a      	b.n	800176c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4908      	ldr	r1, [pc, #32]	; (800177c <__NVIC_SetPriority+0x50>)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	3b04      	subs	r3, #4
 8001764:	0112      	lsls	r2, r2, #4
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	440b      	add	r3, r1
 800176a:	761a      	strb	r2, [r3, #24]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f1c3 0307 	rsb	r3, r3, #7
 800179a:	2b04      	cmp	r3, #4
 800179c:	bf28      	it	cs
 800179e:	2304      	movcs	r3, #4
 80017a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3304      	adds	r3, #4
 80017a6:	2b06      	cmp	r3, #6
 80017a8:	d902      	bls.n	80017b0 <NVIC_EncodePriority+0x30>
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3b03      	subs	r3, #3
 80017ae:	e000      	b.n	80017b2 <NVIC_EncodePriority+0x32>
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43da      	mvns	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	43d9      	mvns	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	4313      	orrs	r3, r2
         );
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3724      	adds	r7, #36	; 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f8:	d301      	bcc.n	80017fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00f      	b.n	800181e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <SysTick_Config+0x40>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001806:	210f      	movs	r1, #15
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f7ff ff8e 	bl	800172c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <SysTick_Config+0x40>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001816:	4b04      	ldr	r3, [pc, #16]	; (8001828 <SysTick_Config+0x40>)
 8001818:	2207      	movs	r2, #7
 800181a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	e000e010 	.word	0xe000e010

0800182c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ff29 	bl	800168c <__NVIC_SetPriorityGrouping>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001854:	f7ff ff3e 	bl	80016d4 <__NVIC_GetPriorityGrouping>
 8001858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	6978      	ldr	r0, [r7, #20]
 8001860:	f7ff ff8e 	bl	8001780 <NVIC_EncodePriority>
 8001864:	4602      	mov	r2, r0
 8001866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff5d 	bl	800172c <__NVIC_SetPriority>
}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff31 	bl	80016f0 <__NVIC_EnableIRQ>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffa2 	bl	80017e8 <SysTick_Config>
 80018a4:	4603      	mov	r3, r0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018bc:	f7ff feb6 	bl	800162c <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e099      	b.n	8001a00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2202      	movs	r2, #2
 80018d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0201 	bic.w	r2, r2, #1
 80018ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018ec:	e00f      	b.n	800190e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018ee:	f7ff fe9d 	bl	800162c <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b05      	cmp	r3, #5
 80018fa:	d908      	bls.n	800190e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2220      	movs	r2, #32
 8001900:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2203      	movs	r2, #3
 8001906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e078      	b.n	8001a00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1e8      	bne.n	80018ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	4b38      	ldr	r3, [pc, #224]	; (8001a08 <HAL_DMA_Init+0x158>)
 8001928:	4013      	ands	r3, r2
 800192a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800193a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001946:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001952:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4313      	orrs	r3, r2
 800195e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	2b04      	cmp	r3, #4
 8001966:	d107      	bne.n	8001978 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	4313      	orrs	r3, r2
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4313      	orrs	r3, r2
 8001976:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f023 0307 	bic.w	r3, r3, #7
 800198e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	4313      	orrs	r3, r2
 8001998:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d117      	bne.n	80019d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00e      	beq.n	80019d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 fa59 	bl	8001e6c <DMA_CheckFifoParam>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d008      	beq.n	80019d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2240      	movs	r2, #64	; 0x40
 80019c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019ce:	2301      	movs	r3, #1
 80019d0:	e016      	b.n	8001a00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 fa10 	bl	8001e00 <DMA_CalcBaseAndBitshift>
 80019e0:	4603      	mov	r3, r0
 80019e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e8:	223f      	movs	r2, #63	; 0x3f
 80019ea:	409a      	lsls	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	f010803f 	.word	0xf010803f

08001a0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a1a:	f7ff fe07 	bl	800162c <HAL_GetTick>
 8001a1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d008      	beq.n	8001a3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2280      	movs	r2, #128	; 0x80
 8001a30:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e052      	b.n	8001ae4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0216 	bic.w	r2, r2, #22
 8001a4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695a      	ldr	r2, [r3, #20]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d103      	bne.n	8001a6e <HAL_DMA_Abort+0x62>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d007      	beq.n	8001a7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0208 	bic.w	r2, r2, #8
 8001a7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0201 	bic.w	r2, r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a8e:	e013      	b.n	8001ab8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a90:	f7ff fdcc 	bl	800162c <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b05      	cmp	r3, #5
 8001a9c:	d90c      	bls.n	8001ab8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e015      	b.n	8001ae4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1e4      	bne.n	8001a90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aca:	223f      	movs	r2, #63	; 0x3f
 8001acc:	409a      	lsls	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001af8:	4b92      	ldr	r3, [pc, #584]	; (8001d44 <HAL_DMA_IRQHandler+0x258>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a92      	ldr	r2, [pc, #584]	; (8001d48 <HAL_DMA_IRQHandler+0x25c>)
 8001afe:	fba2 2303 	umull	r2, r3, r2, r3
 8001b02:	0a9b      	lsrs	r3, r3, #10
 8001b04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b16:	2208      	movs	r2, #8
 8001b18:	409a      	lsls	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d01a      	beq.n	8001b58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d013      	beq.n	8001b58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0204 	bic.w	r2, r2, #4
 8001b3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b44:	2208      	movs	r2, #8
 8001b46:	409a      	lsls	r2, r3
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b50:	f043 0201 	orr.w	r2, r3, #1
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4013      	ands	r3, r2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d012      	beq.n	8001b8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00b      	beq.n	8001b8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	409a      	lsls	r2, r3
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b86:	f043 0202 	orr.w	r2, r3, #2
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b92:	2204      	movs	r2, #4
 8001b94:	409a      	lsls	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d012      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00b      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bbc:	f043 0204 	orr.w	r2, r3, #4
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc8:	2210      	movs	r2, #16
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d043      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d03c      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be6:	2210      	movs	r2, #16
 8001be8:	409a      	lsls	r2, r3
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d018      	beq.n	8001c2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d108      	bne.n	8001c1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d024      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	4798      	blx	r3
 8001c1a:	e01f      	b.n	8001c5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d01b      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	4798      	blx	r3
 8001c2c:	e016      	b.n	8001c5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d107      	bne.n	8001c4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0208 	bic.w	r2, r2, #8
 8001c4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c60:	2220      	movs	r2, #32
 8001c62:	409a      	lsls	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 808e 	beq.w	8001d8a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0310 	and.w	r3, r3, #16
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 8086 	beq.w	8001d8a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c82:	2220      	movs	r2, #32
 8001c84:	409a      	lsls	r2, r3
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b05      	cmp	r3, #5
 8001c94:	d136      	bne.n	8001d04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0216 	bic.w	r2, r2, #22
 8001ca4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	695a      	ldr	r2, [r3, #20]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d103      	bne.n	8001cc6 <HAL_DMA_IRQHandler+0x1da>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d007      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0208 	bic.w	r2, r2, #8
 8001cd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cda:	223f      	movs	r2, #63	; 0x3f
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d07d      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	4798      	blx	r3
        }
        return;
 8001d02:	e078      	b.n	8001df6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d01c      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d108      	bne.n	8001d32 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d030      	beq.n	8001d8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	4798      	blx	r3
 8001d30:	e02b      	b.n	8001d8a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d027      	beq.n	8001d8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	4798      	blx	r3
 8001d42:	e022      	b.n	8001d8a <HAL_DMA_IRQHandler+0x29e>
 8001d44:	2000000c 	.word	0x2000000c
 8001d48:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10f      	bne.n	8001d7a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0210 	bic.w	r2, r2, #16
 8001d68:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d032      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d022      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2205      	movs	r2, #5
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0201 	bic.w	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	3301      	adds	r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d307      	bcc.n	8001dd2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1f2      	bne.n	8001db6 <HAL_DMA_IRQHandler+0x2ca>
 8001dd0:	e000      	b.n	8001dd4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001dd2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	4798      	blx	r3
 8001df4:	e000      	b.n	8001df8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001df6:	bf00      	nop
    }
  }
}
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop

08001e00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	3b10      	subs	r3, #16
 8001e10:	4a14      	ldr	r2, [pc, #80]	; (8001e64 <DMA_CalcBaseAndBitshift+0x64>)
 8001e12:	fba2 2303 	umull	r2, r3, r2, r3
 8001e16:	091b      	lsrs	r3, r3, #4
 8001e18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e1a:	4a13      	ldr	r2, [pc, #76]	; (8001e68 <DMA_CalcBaseAndBitshift+0x68>)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4413      	add	r3, r2
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d909      	bls.n	8001e42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e36:	f023 0303 	bic.w	r3, r3, #3
 8001e3a:	1d1a      	adds	r2, r3, #4
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	659a      	str	r2, [r3, #88]	; 0x58
 8001e40:	e007      	b.n	8001e52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e4a:	f023 0303 	bic.w	r3, r3, #3
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	aaaaaaab 	.word	0xaaaaaaab
 8001e68:	08086e78 	.word	0x08086e78

08001e6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d11f      	bne.n	8001ec6 <DMA_CheckFifoParam+0x5a>
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d856      	bhi.n	8001f3a <DMA_CheckFifoParam+0xce>
 8001e8c:	a201      	add	r2, pc, #4	; (adr r2, 8001e94 <DMA_CheckFifoParam+0x28>)
 8001e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e92:	bf00      	nop
 8001e94:	08001ea5 	.word	0x08001ea5
 8001e98:	08001eb7 	.word	0x08001eb7
 8001e9c:	08001ea5 	.word	0x08001ea5
 8001ea0:	08001f3b 	.word	0x08001f3b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d046      	beq.n	8001f3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eb4:	e043      	b.n	8001f3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ebe:	d140      	bne.n	8001f42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ec4:	e03d      	b.n	8001f42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ece:	d121      	bne.n	8001f14 <DMA_CheckFifoParam+0xa8>
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d837      	bhi.n	8001f46 <DMA_CheckFifoParam+0xda>
 8001ed6:	a201      	add	r2, pc, #4	; (adr r2, 8001edc <DMA_CheckFifoParam+0x70>)
 8001ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001edc:	08001eed 	.word	0x08001eed
 8001ee0:	08001ef3 	.word	0x08001ef3
 8001ee4:	08001eed 	.word	0x08001eed
 8001ee8:	08001f05 	.word	0x08001f05
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
      break;
 8001ef0:	e030      	b.n	8001f54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d025      	beq.n	8001f4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f02:	e022      	b.n	8001f4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f0c:	d11f      	bne.n	8001f4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f12:	e01c      	b.n	8001f4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d903      	bls.n	8001f22 <DMA_CheckFifoParam+0xb6>
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d003      	beq.n	8001f28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f20:	e018      	b.n	8001f54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	73fb      	strb	r3, [r7, #15]
      break;
 8001f26:	e015      	b.n	8001f54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00e      	beq.n	8001f52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	73fb      	strb	r3, [r7, #15]
      break;
 8001f38:	e00b      	b.n	8001f52 <DMA_CheckFifoParam+0xe6>
      break;
 8001f3a:	bf00      	nop
 8001f3c:	e00a      	b.n	8001f54 <DMA_CheckFifoParam+0xe8>
      break;
 8001f3e:	bf00      	nop
 8001f40:	e008      	b.n	8001f54 <DMA_CheckFifoParam+0xe8>
      break;
 8001f42:	bf00      	nop
 8001f44:	e006      	b.n	8001f54 <DMA_CheckFifoParam+0xe8>
      break;
 8001f46:	bf00      	nop
 8001f48:	e004      	b.n	8001f54 <DMA_CheckFifoParam+0xe8>
      break;
 8001f4a:	bf00      	nop
 8001f4c:	e002      	b.n	8001f54 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f4e:	bf00      	nop
 8001f50:	e000      	b.n	8001f54 <DMA_CheckFifoParam+0xe8>
      break;
 8001f52:	bf00      	nop
    }
  } 
  
  return status; 
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop

08001f64 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b80      	cmp	r3, #128	; 0x80
 8001f7c:	d106      	bne.n	8001f8c <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	f001 b913 	b.w	80031b2 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d007      	beq.n	8001fa4 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d105      	bne.n	8001fb0 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2240      	movs	r2, #64	; 0x40
 8001fa8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	f001 b901 	b.w	80031b2 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d102      	bne.n	8001fc0 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	f001 b8f9 	b.w	80031b2 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	f041 80e7 	bne.w	80031a4 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ff2:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f001 f8f6 	bl	80031f4 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	461a      	mov	r2, r3
 800200e:	4b99      	ldr	r3, [pc, #612]	; (8002274 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002010:	429a      	cmp	r2, r3
 8002012:	d960      	bls.n	80020d6 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a97      	ldr	r2, [pc, #604]	; (8002278 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d057      	beq.n	80020ce <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a96      	ldr	r2, [pc, #600]	; (800227c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d050      	beq.n	80020ca <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a94      	ldr	r2, [pc, #592]	; (8002280 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d049      	beq.n	80020c6 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a93      	ldr	r2, [pc, #588]	; (8002284 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d042      	beq.n	80020c2 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a91      	ldr	r2, [pc, #580]	; (8002288 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d03a      	beq.n	80020bc <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a90      	ldr	r2, [pc, #576]	; (800228c <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d032      	beq.n	80020b6 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a8e      	ldr	r2, [pc, #568]	; (8002290 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d02a      	beq.n	80020b0 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a8d      	ldr	r2, [pc, #564]	; (8002294 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d022      	beq.n	80020aa <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a8b      	ldr	r2, [pc, #556]	; (8002298 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d01a      	beq.n	80020a4 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a8a      	ldr	r2, [pc, #552]	; (800229c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d012      	beq.n	800209e <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a88      	ldr	r2, [pc, #544]	; (80022a0 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d00a      	beq.n	8002098 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a87      	ldr	r2, [pc, #540]	; (80022a4 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d102      	bne.n	8002092 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 800208c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002090:	e01e      	b.n	80020d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002092:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002096:	e01b      	b.n	80020d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002098:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800209c:	e018      	b.n	80020d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800209e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020a2:	e015      	b.n	80020d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80020a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020a8:	e012      	b.n	80020d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80020aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020ae:	e00f      	b.n	80020d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80020b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020b4:	e00c      	b.n	80020d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80020b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020ba:	e009      	b.n	80020d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80020bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020c0:	e006      	b.n	80020d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80020c2:	2320      	movs	r3, #32
 80020c4:	e004      	b.n	80020d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80020c6:	2320      	movs	r3, #32
 80020c8:	e002      	b.n	80020d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80020ca:	2320      	movs	r3, #32
 80020cc:	e000      	b.n	80020d0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80020ce:	2320      	movs	r3, #32
 80020d0:	4a75      	ldr	r2, [pc, #468]	; (80022a8 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 80020d2:	60d3      	str	r3, [r2, #12]
 80020d4:	e150      	b.n	8002378 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	4b73      	ldr	r3, [pc, #460]	; (80022ac <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 80020de:	429a      	cmp	r2, r3
 80020e0:	d960      	bls.n	80021a4 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a64      	ldr	r2, [pc, #400]	; (8002278 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d057      	beq.n	800219c <HAL_DMAEx_MultiBufferStart_IT+0x238>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a62      	ldr	r2, [pc, #392]	; (800227c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d050      	beq.n	8002198 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a61      	ldr	r2, [pc, #388]	; (8002280 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d049      	beq.n	8002194 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a5f      	ldr	r2, [pc, #380]	; (8002284 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d042      	beq.n	8002190 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a5e      	ldr	r2, [pc, #376]	; (8002288 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d03a      	beq.n	800218a <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a5c      	ldr	r2, [pc, #368]	; (800228c <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d032      	beq.n	8002184 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a5b      	ldr	r2, [pc, #364]	; (8002290 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d02a      	beq.n	800217e <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a59      	ldr	r2, [pc, #356]	; (8002294 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d022      	beq.n	8002178 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a58      	ldr	r2, [pc, #352]	; (8002298 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d01a      	beq.n	8002172 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a56      	ldr	r2, [pc, #344]	; (800229c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d012      	beq.n	800216c <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a55      	ldr	r2, [pc, #340]	; (80022a0 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d00a      	beq.n	8002166 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a53      	ldr	r2, [pc, #332]	; (80022a4 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d102      	bne.n	8002160 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800215a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800215e:	e01e      	b.n	800219e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002160:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002164:	e01b      	b.n	800219e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002166:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800216a:	e018      	b.n	800219e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800216c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002170:	e015      	b.n	800219e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002172:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002176:	e012      	b.n	800219e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002178:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800217c:	e00f      	b.n	800219e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800217e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002182:	e00c      	b.n	800219e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002184:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002188:	e009      	b.n	800219e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800218a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800218e:	e006      	b.n	800219e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002190:	2320      	movs	r3, #32
 8002192:	e004      	b.n	800219e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002194:	2320      	movs	r3, #32
 8002196:	e002      	b.n	800219e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002198:	2320      	movs	r3, #32
 800219a:	e000      	b.n	800219e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800219c:	2320      	movs	r3, #32
 800219e:	4a42      	ldr	r2, [pc, #264]	; (80022a8 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 80021a0:	6093      	str	r3, [r2, #8]
 80021a2:	e0e9      	b.n	8002378 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 80021ac:	429a      	cmp	r2, r3
 80021ae:	f240 8083 	bls.w	80022b8 <HAL_DMAEx_MultiBufferStart_IT+0x354>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a30      	ldr	r2, [pc, #192]	; (8002278 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d057      	beq.n	800226c <HAL_DMAEx_MultiBufferStart_IT+0x308>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a2e      	ldr	r2, [pc, #184]	; (800227c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d050      	beq.n	8002268 <HAL_DMAEx_MultiBufferStart_IT+0x304>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a2d      	ldr	r2, [pc, #180]	; (8002280 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d049      	beq.n	8002264 <HAL_DMAEx_MultiBufferStart_IT+0x300>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a2b      	ldr	r2, [pc, #172]	; (8002284 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d042      	beq.n	8002260 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a2a      	ldr	r2, [pc, #168]	; (8002288 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d03a      	beq.n	800225a <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a28      	ldr	r2, [pc, #160]	; (800228c <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d032      	beq.n	8002254 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a27      	ldr	r2, [pc, #156]	; (8002290 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d02a      	beq.n	800224e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a25      	ldr	r2, [pc, #148]	; (8002294 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d022      	beq.n	8002248 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a24      	ldr	r2, [pc, #144]	; (8002298 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d01a      	beq.n	8002242 <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a22      	ldr	r2, [pc, #136]	; (800229c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d012      	beq.n	800223c <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a21      	ldr	r2, [pc, #132]	; (80022a0 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d00a      	beq.n	8002236 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a1f      	ldr	r2, [pc, #124]	; (80022a4 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d102      	bne.n	8002230 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 800222a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800222e:	e01e      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002230:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002234:	e01b      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002236:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800223a:	e018      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800223c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002240:	e015      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002242:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002246:	e012      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002248:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800224c:	e00f      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800224e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002252:	e00c      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002254:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002258:	e009      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800225a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800225e:	e006      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002260:	2320      	movs	r3, #32
 8002262:	e004      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002264:	2320      	movs	r3, #32
 8002266:	e002      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002268:	2320      	movs	r3, #32
 800226a:	e000      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800226c:	2320      	movs	r3, #32
 800226e:	4a11      	ldr	r2, [pc, #68]	; (80022b4 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8002270:	60d3      	str	r3, [r2, #12]
 8002272:	e081      	b.n	8002378 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002274:	40026458 	.word	0x40026458
 8002278:	40026010 	.word	0x40026010
 800227c:	40026410 	.word	0x40026410
 8002280:	40026070 	.word	0x40026070
 8002284:	40026470 	.word	0x40026470
 8002288:	40026028 	.word	0x40026028
 800228c:	40026428 	.word	0x40026428
 8002290:	40026088 	.word	0x40026088
 8002294:	40026488 	.word	0x40026488
 8002298:	40026040 	.word	0x40026040
 800229c:	40026440 	.word	0x40026440
 80022a0:	400260a0 	.word	0x400260a0
 80022a4:	400264a0 	.word	0x400264a0
 80022a8:	40026400 	.word	0x40026400
 80022ac:	400260b8 	.word	0x400260b8
 80022b0:	40026058 	.word	0x40026058
 80022b4:	40026000 	.word	0x40026000
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a96      	ldr	r2, [pc, #600]	; (8002518 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d057      	beq.n	8002372 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a95      	ldr	r2, [pc, #596]	; (800251c <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d050      	beq.n	800236e <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a93      	ldr	r2, [pc, #588]	; (8002520 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d049      	beq.n	800236a <HAL_DMAEx_MultiBufferStart_IT+0x406>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a92      	ldr	r2, [pc, #584]	; (8002524 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d042      	beq.n	8002366 <HAL_DMAEx_MultiBufferStart_IT+0x402>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a90      	ldr	r2, [pc, #576]	; (8002528 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d03a      	beq.n	8002360 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a8f      	ldr	r2, [pc, #572]	; (800252c <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d032      	beq.n	800235a <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a8d      	ldr	r2, [pc, #564]	; (8002530 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d02a      	beq.n	8002354 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a8c      	ldr	r2, [pc, #560]	; (8002534 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d022      	beq.n	800234e <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a8a      	ldr	r2, [pc, #552]	; (8002538 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d01a      	beq.n	8002348 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a89      	ldr	r2, [pc, #548]	; (800253c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d012      	beq.n	8002342 <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a87      	ldr	r2, [pc, #540]	; (8002540 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00a      	beq.n	800233c <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a86      	ldr	r2, [pc, #536]	; (8002544 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d102      	bne.n	8002336 <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8002330:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002334:	e01e      	b.n	8002374 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002336:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800233a:	e01b      	b.n	8002374 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800233c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002340:	e018      	b.n	8002374 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002342:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002346:	e015      	b.n	8002374 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002348:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800234c:	e012      	b.n	8002374 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800234e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002352:	e00f      	b.n	8002374 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002354:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002358:	e00c      	b.n	8002374 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800235a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800235e:	e009      	b.n	8002374 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002360:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002364:	e006      	b.n	8002374 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002366:	2320      	movs	r3, #32
 8002368:	e004      	b.n	8002374 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800236a:	2320      	movs	r3, #32
 800236c:	e002      	b.n	8002374 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800236e:	2320      	movs	r3, #32
 8002370:	e000      	b.n	8002374 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002372:	2320      	movs	r3, #32
 8002374:	4a74      	ldr	r2, [pc, #464]	; (8002548 <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 8002376:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	4b73      	ldr	r3, [pc, #460]	; (800254c <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 8002380:	429a      	cmp	r2, r3
 8002382:	d960      	bls.n	8002446 <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a63      	ldr	r2, [pc, #396]	; (8002518 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d057      	beq.n	800243e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a62      	ldr	r2, [pc, #392]	; (800251c <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d050      	beq.n	800243a <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a60      	ldr	r2, [pc, #384]	; (8002520 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d049      	beq.n	8002436 <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a5f      	ldr	r2, [pc, #380]	; (8002524 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d042      	beq.n	8002432 <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a5d      	ldr	r2, [pc, #372]	; (8002528 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d03a      	beq.n	800242c <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a5c      	ldr	r2, [pc, #368]	; (800252c <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d032      	beq.n	8002426 <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a5a      	ldr	r2, [pc, #360]	; (8002530 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d02a      	beq.n	8002420 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a59      	ldr	r2, [pc, #356]	; (8002534 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d022      	beq.n	800241a <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a57      	ldr	r2, [pc, #348]	; (8002538 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d01a      	beq.n	8002414 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a56      	ldr	r2, [pc, #344]	; (800253c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d012      	beq.n	800240e <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a54      	ldr	r2, [pc, #336]	; (8002540 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00a      	beq.n	8002408 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a53      	ldr	r2, [pc, #332]	; (8002544 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d102      	bne.n	8002402 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 80023fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002400:	e01e      	b.n	8002440 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002402:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002406:	e01b      	b.n	8002440 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002408:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800240c:	e018      	b.n	8002440 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800240e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002412:	e015      	b.n	8002440 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002414:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002418:	e012      	b.n	8002440 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800241a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800241e:	e00f      	b.n	8002440 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002424:	e00c      	b.n	8002440 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800242a:	e009      	b.n	8002440 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800242c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002430:	e006      	b.n	8002440 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002432:	2310      	movs	r3, #16
 8002434:	e004      	b.n	8002440 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002436:	2310      	movs	r3, #16
 8002438:	e002      	b.n	8002440 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800243a:	2310      	movs	r3, #16
 800243c:	e000      	b.n	8002440 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800243e:	2310      	movs	r3, #16
 8002440:	4a43      	ldr	r2, [pc, #268]	; (8002550 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8002442:	60d3      	str	r3, [r2, #12]
 8002444:	e14f      	b.n	80026e6 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	4b41      	ldr	r3, [pc, #260]	; (8002554 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 800244e:	429a      	cmp	r2, r3
 8002450:	f240 8082 	bls.w	8002558 <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a2f      	ldr	r2, [pc, #188]	; (8002518 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d057      	beq.n	800250e <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a2e      	ldr	r2, [pc, #184]	; (800251c <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d050      	beq.n	800250a <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a2c      	ldr	r2, [pc, #176]	; (8002520 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d049      	beq.n	8002506 <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a2b      	ldr	r2, [pc, #172]	; (8002524 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d042      	beq.n	8002502 <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a29      	ldr	r2, [pc, #164]	; (8002528 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d03a      	beq.n	80024fc <HAL_DMAEx_MultiBufferStart_IT+0x598>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a28      	ldr	r2, [pc, #160]	; (800252c <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d032      	beq.n	80024f6 <HAL_DMAEx_MultiBufferStart_IT+0x592>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a26      	ldr	r2, [pc, #152]	; (8002530 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d02a      	beq.n	80024f0 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a25      	ldr	r2, [pc, #148]	; (8002534 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d022      	beq.n	80024ea <HAL_DMAEx_MultiBufferStart_IT+0x586>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a23      	ldr	r2, [pc, #140]	; (8002538 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d01a      	beq.n	80024e4 <HAL_DMAEx_MultiBufferStart_IT+0x580>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a22      	ldr	r2, [pc, #136]	; (800253c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d012      	beq.n	80024de <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a20      	ldr	r2, [pc, #128]	; (8002540 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00a      	beq.n	80024d8 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a1f      	ldr	r2, [pc, #124]	; (8002544 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d102      	bne.n	80024d2 <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 80024cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024d0:	e01e      	b.n	8002510 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80024d6:	e01b      	b.n	8002510 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024dc:	e018      	b.n	8002510 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024e2:	e015      	b.n	8002510 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024e8:	e012      	b.n	8002510 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024ee:	e00f      	b.n	8002510 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024f4:	e00c      	b.n	8002510 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024fa:	e009      	b.n	8002510 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80024fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002500:	e006      	b.n	8002510 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002502:	2310      	movs	r3, #16
 8002504:	e004      	b.n	8002510 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002506:	2310      	movs	r3, #16
 8002508:	e002      	b.n	8002510 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800250a:	2310      	movs	r3, #16
 800250c:	e000      	b.n	8002510 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800250e:	2310      	movs	r3, #16
 8002510:	4a0f      	ldr	r2, [pc, #60]	; (8002550 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8002512:	6093      	str	r3, [r2, #8]
 8002514:	e0e7      	b.n	80026e6 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002516:	bf00      	nop
 8002518:	40026010 	.word	0x40026010
 800251c:	40026410 	.word	0x40026410
 8002520:	40026070 	.word	0x40026070
 8002524:	40026470 	.word	0x40026470
 8002528:	40026028 	.word	0x40026028
 800252c:	40026428 	.word	0x40026428
 8002530:	40026088 	.word	0x40026088
 8002534:	40026488 	.word	0x40026488
 8002538:	40026040 	.word	0x40026040
 800253c:	40026440 	.word	0x40026440
 8002540:	400260a0 	.word	0x400260a0
 8002544:	400264a0 	.word	0x400264a0
 8002548:	40026000 	.word	0x40026000
 800254c:	40026458 	.word	0x40026458
 8002550:	40026400 	.word	0x40026400
 8002554:	400260b8 	.word	0x400260b8
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	4b96      	ldr	r3, [pc, #600]	; (80027b8 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002560:	429a      	cmp	r2, r3
 8002562:	d960      	bls.n	8002626 <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a94      	ldr	r2, [pc, #592]	; (80027bc <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d057      	beq.n	800261e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a93      	ldr	r2, [pc, #588]	; (80027c0 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d050      	beq.n	800261a <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a91      	ldr	r2, [pc, #580]	; (80027c4 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d049      	beq.n	8002616 <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a90      	ldr	r2, [pc, #576]	; (80027c8 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d042      	beq.n	8002612 <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a8e      	ldr	r2, [pc, #568]	; (80027cc <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d03a      	beq.n	800260c <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a8d      	ldr	r2, [pc, #564]	; (80027d0 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d032      	beq.n	8002606 <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a8b      	ldr	r2, [pc, #556]	; (80027d4 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d02a      	beq.n	8002600 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a8a      	ldr	r2, [pc, #552]	; (80027d8 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d022      	beq.n	80025fa <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a88      	ldr	r2, [pc, #544]	; (80027dc <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d01a      	beq.n	80025f4 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a87      	ldr	r2, [pc, #540]	; (80027e0 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d012      	beq.n	80025ee <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a85      	ldr	r2, [pc, #532]	; (80027e4 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00a      	beq.n	80025e8 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a84      	ldr	r2, [pc, #528]	; (80027e8 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d102      	bne.n	80025e2 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 80025dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025e0:	e01e      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80025e6:	e01b      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025ec:	e018      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025f2:	e015      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025f8:	e012      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80025fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025fe:	e00f      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002604:	e00c      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800260a:	e009      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800260c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002610:	e006      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002612:	2310      	movs	r3, #16
 8002614:	e004      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002616:	2310      	movs	r3, #16
 8002618:	e002      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800261a:	2310      	movs	r3, #16
 800261c:	e000      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800261e:	2310      	movs	r3, #16
 8002620:	4a72      	ldr	r2, [pc, #456]	; (80027ec <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8002622:	60d3      	str	r3, [r2, #12]
 8002624:	e05f      	b.n	80026e6 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a64      	ldr	r2, [pc, #400]	; (80027bc <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d057      	beq.n	80026e0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a62      	ldr	r2, [pc, #392]	; (80027c0 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d050      	beq.n	80026dc <HAL_DMAEx_MultiBufferStart_IT+0x778>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a61      	ldr	r2, [pc, #388]	; (80027c4 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d049      	beq.n	80026d8 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a5f      	ldr	r2, [pc, #380]	; (80027c8 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d042      	beq.n	80026d4 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a5e      	ldr	r2, [pc, #376]	; (80027cc <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d03a      	beq.n	80026ce <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a5c      	ldr	r2, [pc, #368]	; (80027d0 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d032      	beq.n	80026c8 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a5b      	ldr	r2, [pc, #364]	; (80027d4 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d02a      	beq.n	80026c2 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a59      	ldr	r2, [pc, #356]	; (80027d8 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d022      	beq.n	80026bc <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a58      	ldr	r2, [pc, #352]	; (80027dc <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d01a      	beq.n	80026b6 <HAL_DMAEx_MultiBufferStart_IT+0x752>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a56      	ldr	r2, [pc, #344]	; (80027e0 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d012      	beq.n	80026b0 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a55      	ldr	r2, [pc, #340]	; (80027e4 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d00a      	beq.n	80026aa <HAL_DMAEx_MultiBufferStart_IT+0x746>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a53      	ldr	r2, [pc, #332]	; (80027e8 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d102      	bne.n	80026a4 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 800269e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026a2:	e01e      	b.n	80026e2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80026a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026a8:	e01b      	b.n	80026e2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80026aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026ae:	e018      	b.n	80026e2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80026b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026b4:	e015      	b.n	80026e2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80026b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026ba:	e012      	b.n	80026e2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80026bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026c0:	e00f      	b.n	80026e2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80026c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026c6:	e00c      	b.n	80026e2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80026c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026cc:	e009      	b.n	80026e2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80026ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d2:	e006      	b.n	80026e2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80026d4:	2310      	movs	r3, #16
 80026d6:	e004      	b.n	80026e2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80026d8:	2310      	movs	r3, #16
 80026da:	e002      	b.n	80026e2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80026dc:	2310      	movs	r3, #16
 80026de:	e000      	b.n	80026e2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80026e0:	2310      	movs	r3, #16
 80026e2:	4a42      	ldr	r2, [pc, #264]	; (80027ec <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 80026e4:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	4b40      	ldr	r3, [pc, #256]	; (80027f0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 80026ee:	429a      	cmp	r2, r3
 80026f0:	f240 8082 	bls.w	80027f8 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a30      	ldr	r2, [pc, #192]	; (80027bc <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d057      	beq.n	80027ae <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a2f      	ldr	r2, [pc, #188]	; (80027c0 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d050      	beq.n	80027aa <HAL_DMAEx_MultiBufferStart_IT+0x846>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a2d      	ldr	r2, [pc, #180]	; (80027c4 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d049      	beq.n	80027a6 <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a2c      	ldr	r2, [pc, #176]	; (80027c8 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d042      	beq.n	80027a2 <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a2a      	ldr	r2, [pc, #168]	; (80027cc <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d03a      	beq.n	800279c <HAL_DMAEx_MultiBufferStart_IT+0x838>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a29      	ldr	r2, [pc, #164]	; (80027d0 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d032      	beq.n	8002796 <HAL_DMAEx_MultiBufferStart_IT+0x832>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a27      	ldr	r2, [pc, #156]	; (80027d4 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d02a      	beq.n	8002790 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a26      	ldr	r2, [pc, #152]	; (80027d8 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d022      	beq.n	800278a <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a24      	ldr	r2, [pc, #144]	; (80027dc <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d01a      	beq.n	8002784 <HAL_DMAEx_MultiBufferStart_IT+0x820>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a23      	ldr	r2, [pc, #140]	; (80027e0 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d012      	beq.n	800277e <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a21      	ldr	r2, [pc, #132]	; (80027e4 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00a      	beq.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a20      	ldr	r2, [pc, #128]	; (80027e8 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d102      	bne.n	8002772 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 800276c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002770:	e01e      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002772:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002776:	e01b      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002778:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800277c:	e018      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800277e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002782:	e015      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002784:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002788:	e012      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800278a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800278e:	e00f      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002794:	e00c      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002796:	f44f 7300 	mov.w	r3, #512	; 0x200
 800279a:	e009      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800279c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027a0:	e006      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80027a2:	2308      	movs	r3, #8
 80027a4:	e004      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80027a6:	2308      	movs	r3, #8
 80027a8:	e002      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80027aa:	2308      	movs	r3, #8
 80027ac:	e000      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80027ae:	2308      	movs	r3, #8
 80027b0:	4a10      	ldr	r2, [pc, #64]	; (80027f4 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 80027b2:	60d3      	str	r3, [r2, #12]
 80027b4:	e16f      	b.n	8002a96 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80027b6:	bf00      	nop
 80027b8:	40026058 	.word	0x40026058
 80027bc:	40026010 	.word	0x40026010
 80027c0:	40026410 	.word	0x40026410
 80027c4:	40026070 	.word	0x40026070
 80027c8:	40026470 	.word	0x40026470
 80027cc:	40026028 	.word	0x40026028
 80027d0:	40026428 	.word	0x40026428
 80027d4:	40026088 	.word	0x40026088
 80027d8:	40026488 	.word	0x40026488
 80027dc:	40026040 	.word	0x40026040
 80027e0:	40026440 	.word	0x40026440
 80027e4:	400260a0 	.word	0x400260a0
 80027e8:	400264a0 	.word	0x400264a0
 80027ec:	40026000 	.word	0x40026000
 80027f0:	40026458 	.word	0x40026458
 80027f4:	40026400 	.word	0x40026400
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b94      	ldr	r3, [pc, #592]	; (8002a50 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002800:	429a      	cmp	r2, r3
 8002802:	d960      	bls.n	80028c6 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a92      	ldr	r2, [pc, #584]	; (8002a54 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d057      	beq.n	80028be <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a91      	ldr	r2, [pc, #580]	; (8002a58 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d050      	beq.n	80028ba <HAL_DMAEx_MultiBufferStart_IT+0x956>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a8f      	ldr	r2, [pc, #572]	; (8002a5c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d049      	beq.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x952>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a8e      	ldr	r2, [pc, #568]	; (8002a60 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d042      	beq.n	80028b2 <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a8c      	ldr	r2, [pc, #560]	; (8002a64 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d03a      	beq.n	80028ac <HAL_DMAEx_MultiBufferStart_IT+0x948>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a8b      	ldr	r2, [pc, #556]	; (8002a68 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d032      	beq.n	80028a6 <HAL_DMAEx_MultiBufferStart_IT+0x942>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a89      	ldr	r2, [pc, #548]	; (8002a6c <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d02a      	beq.n	80028a0 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a88      	ldr	r2, [pc, #544]	; (8002a70 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d022      	beq.n	800289a <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a86      	ldr	r2, [pc, #536]	; (8002a74 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d01a      	beq.n	8002894 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a85      	ldr	r2, [pc, #532]	; (8002a78 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d012      	beq.n	800288e <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a83      	ldr	r2, [pc, #524]	; (8002a7c <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00a      	beq.n	8002888 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a82      	ldr	r2, [pc, #520]	; (8002a80 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d102      	bne.n	8002882 <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 800287c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002880:	e01e      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002882:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002886:	e01b      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002888:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800288c:	e018      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800288e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002892:	e015      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002894:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002898:	e012      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800289a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800289e:	e00f      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80028a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028a4:	e00c      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80028a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028aa:	e009      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80028ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028b0:	e006      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80028b2:	2308      	movs	r3, #8
 80028b4:	e004      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80028b6:	2308      	movs	r3, #8
 80028b8:	e002      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80028ba:	2308      	movs	r3, #8
 80028bc:	e000      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80028be:	2308      	movs	r3, #8
 80028c0:	4a70      	ldr	r2, [pc, #448]	; (8002a84 <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 80028c2:	6093      	str	r3, [r2, #8]
 80028c4:	e0e7      	b.n	8002a96 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	4b6e      	ldr	r3, [pc, #440]	; (8002a88 <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d960      	bls.n	8002994 <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a5f      	ldr	r2, [pc, #380]	; (8002a54 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d057      	beq.n	800298c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a5d      	ldr	r2, [pc, #372]	; (8002a58 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d050      	beq.n	8002988 <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a5c      	ldr	r2, [pc, #368]	; (8002a5c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d049      	beq.n	8002984 <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a5a      	ldr	r2, [pc, #360]	; (8002a60 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d042      	beq.n	8002980 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a59      	ldr	r2, [pc, #356]	; (8002a64 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d03a      	beq.n	800297a <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a57      	ldr	r2, [pc, #348]	; (8002a68 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d032      	beq.n	8002974 <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a56      	ldr	r2, [pc, #344]	; (8002a6c <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d02a      	beq.n	800296e <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a54      	ldr	r2, [pc, #336]	; (8002a70 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d022      	beq.n	8002968 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a53      	ldr	r2, [pc, #332]	; (8002a74 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d01a      	beq.n	8002962 <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a51      	ldr	r2, [pc, #324]	; (8002a78 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d012      	beq.n	800295c <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a50      	ldr	r2, [pc, #320]	; (8002a7c <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00a      	beq.n	8002956 <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a4e      	ldr	r2, [pc, #312]	; (8002a80 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d102      	bne.n	8002950 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 800294a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800294e:	e01e      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002950:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002954:	e01b      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002956:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800295a:	e018      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800295c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002960:	e015      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002962:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002966:	e012      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800296c:	e00f      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800296e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002972:	e00c      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002974:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002978:	e009      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800297a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800297e:	e006      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002980:	2308      	movs	r3, #8
 8002982:	e004      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002984:	2308      	movs	r3, #8
 8002986:	e002      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002988:	2308      	movs	r3, #8
 800298a:	e000      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800298c:	2308      	movs	r3, #8
 800298e:	4a3f      	ldr	r2, [pc, #252]	; (8002a8c <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 8002990:	60d3      	str	r3, [r2, #12]
 8002992:	e080      	b.n	8002a96 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a2e      	ldr	r2, [pc, #184]	; (8002a54 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d078      	beq.n	8002a90 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a2d      	ldr	r2, [pc, #180]	; (8002a58 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d050      	beq.n	8002a4a <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a2b      	ldr	r2, [pc, #172]	; (8002a5c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d049      	beq.n	8002a46 <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a2a      	ldr	r2, [pc, #168]	; (8002a60 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d042      	beq.n	8002a42 <HAL_DMAEx_MultiBufferStart_IT+0xade>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a28      	ldr	r2, [pc, #160]	; (8002a64 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d03a      	beq.n	8002a3c <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a27      	ldr	r2, [pc, #156]	; (8002a68 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d032      	beq.n	8002a36 <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a25      	ldr	r2, [pc, #148]	; (8002a6c <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d02a      	beq.n	8002a30 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a24      	ldr	r2, [pc, #144]	; (8002a70 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d022      	beq.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a22      	ldr	r2, [pc, #136]	; (8002a74 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d01a      	beq.n	8002a24 <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a21      	ldr	r2, [pc, #132]	; (8002a78 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d012      	beq.n	8002a1e <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a1f      	ldr	r2, [pc, #124]	; (8002a7c <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00a      	beq.n	8002a18 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1e      	ldr	r2, [pc, #120]	; (8002a80 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d102      	bne.n	8002a12 <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 8002a0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a10:	e03f      	b.n	8002a92 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a16:	e03c      	b.n	8002a92 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a1c:	e039      	b.n	8002a92 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a1e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a22:	e036      	b.n	8002a92 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a24:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a28:	e033      	b.n	8002a92 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a2e:	e030      	b.n	8002a92 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a34:	e02d      	b.n	8002a92 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a3a:	e02a      	b.n	8002a92 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a40:	e027      	b.n	8002a92 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a42:	2308      	movs	r3, #8
 8002a44:	e025      	b.n	8002a92 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a46:	2308      	movs	r3, #8
 8002a48:	e023      	b.n	8002a92 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a4a:	2308      	movs	r3, #8
 8002a4c:	e021      	b.n	8002a92 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002a4e:	bf00      	nop
 8002a50:	400260b8 	.word	0x400260b8
 8002a54:	40026010 	.word	0x40026010
 8002a58:	40026410 	.word	0x40026410
 8002a5c:	40026070 	.word	0x40026070
 8002a60:	40026470 	.word	0x40026470
 8002a64:	40026028 	.word	0x40026028
 8002a68:	40026428 	.word	0x40026428
 8002a6c:	40026088 	.word	0x40026088
 8002a70:	40026488 	.word	0x40026488
 8002a74:	40026040 	.word	0x40026040
 8002a78:	40026440 	.word	0x40026440
 8002a7c:	400260a0 	.word	0x400260a0
 8002a80:	400264a0 	.word	0x400264a0
 8002a84:	40026400 	.word	0x40026400
 8002a88:	40026058 	.word	0x40026058
 8002a8c:	40026000 	.word	0x40026000
 8002a90:	2308      	movs	r3, #8
 8002a92:	4a9a      	ldr	r2, [pc, #616]	; (8002cfc <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8002a94:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4b98      	ldr	r3, [pc, #608]	; (8002d00 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d960      	bls.n	8002b64 <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a97      	ldr	r2, [pc, #604]	; (8002d04 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d057      	beq.n	8002b5c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a95      	ldr	r2, [pc, #596]	; (8002d08 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d050      	beq.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a94      	ldr	r2, [pc, #592]	; (8002d0c <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d049      	beq.n	8002b54 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a92      	ldr	r2, [pc, #584]	; (8002d10 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d042      	beq.n	8002b50 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a91      	ldr	r2, [pc, #580]	; (8002d14 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d03a      	beq.n	8002b4a <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a8f      	ldr	r2, [pc, #572]	; (8002d18 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d032      	beq.n	8002b44 <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a8e      	ldr	r2, [pc, #568]	; (8002d1c <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d02a      	beq.n	8002b3e <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a8c      	ldr	r2, [pc, #560]	; (8002d20 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d022      	beq.n	8002b38 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a8b      	ldr	r2, [pc, #556]	; (8002d24 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d01a      	beq.n	8002b32 <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a89      	ldr	r2, [pc, #548]	; (8002d28 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d012      	beq.n	8002b2c <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a88      	ldr	r2, [pc, #544]	; (8002d2c <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00a      	beq.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a86      	ldr	r2, [pc, #536]	; (8002d30 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d102      	bne.n	8002b20 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 8002b1a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b1e:	e01e      	b.n	8002b5e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b24:	e01b      	b.n	8002b5e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b26:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b2a:	e018      	b.n	8002b5e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b30:	e015      	b.n	8002b5e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b36:	e012      	b.n	8002b5e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b3c:	e00f      	b.n	8002b5e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b42:	e00c      	b.n	8002b5e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b48:	e009      	b.n	8002b5e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b4e:	e006      	b.n	8002b5e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b50:	2304      	movs	r3, #4
 8002b52:	e004      	b.n	8002b5e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b54:	2304      	movs	r3, #4
 8002b56:	e002      	b.n	8002b5e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b58:	2304      	movs	r3, #4
 8002b5a:	e000      	b.n	8002b5e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	4a75      	ldr	r2, [pc, #468]	; (8002d34 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8002b60:	60d3      	str	r3, [r2, #12]
 8002b62:	e151      	b.n	8002e08 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4b73      	ldr	r3, [pc, #460]	; (8002d38 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d960      	bls.n	8002c32 <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a63      	ldr	r2, [pc, #396]	; (8002d04 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d057      	beq.n	8002c2a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a62      	ldr	r2, [pc, #392]	; (8002d08 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d050      	beq.n	8002c26 <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a60      	ldr	r2, [pc, #384]	; (8002d0c <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d049      	beq.n	8002c22 <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a5f      	ldr	r2, [pc, #380]	; (8002d10 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d042      	beq.n	8002c1e <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a5d      	ldr	r2, [pc, #372]	; (8002d14 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d03a      	beq.n	8002c18 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a5c      	ldr	r2, [pc, #368]	; (8002d18 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d032      	beq.n	8002c12 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a5a      	ldr	r2, [pc, #360]	; (8002d1c <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d02a      	beq.n	8002c0c <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a59      	ldr	r2, [pc, #356]	; (8002d20 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d022      	beq.n	8002c06 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a57      	ldr	r2, [pc, #348]	; (8002d24 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01a      	beq.n	8002c00 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a56      	ldr	r2, [pc, #344]	; (8002d28 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d012      	beq.n	8002bfa <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a54      	ldr	r2, [pc, #336]	; (8002d2c <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a53      	ldr	r2, [pc, #332]	; (8002d30 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d102      	bne.n	8002bee <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 8002be8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bec:	e01e      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002bee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bf2:	e01b      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002bf4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bf8:	e018      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002bfa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bfe:	e015      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002c00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c04:	e012      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002c06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c0a:	e00f      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c10:	e00c      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c16:	e009      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c1c:	e006      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002c1e:	2304      	movs	r3, #4
 8002c20:	e004      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002c22:	2304      	movs	r3, #4
 8002c24:	e002      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002c26:	2304      	movs	r3, #4
 8002c28:	e000      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	4a41      	ldr	r2, [pc, #260]	; (8002d34 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8002c2e:	6093      	str	r3, [r2, #8]
 8002c30:	e0ea      	b.n	8002e08 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	4b40      	ldr	r3, [pc, #256]	; (8002d3c <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	f240 8084 	bls.w	8002d48 <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a2f      	ldr	r2, [pc, #188]	; (8002d04 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d07a      	beq.n	8002d40 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a2e      	ldr	r2, [pc, #184]	; (8002d08 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d050      	beq.n	8002cf6 <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a2c      	ldr	r2, [pc, #176]	; (8002d0c <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d049      	beq.n	8002cf2 <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a2b      	ldr	r2, [pc, #172]	; (8002d10 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d042      	beq.n	8002cee <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a29      	ldr	r2, [pc, #164]	; (8002d14 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d03a      	beq.n	8002ce8 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a28      	ldr	r2, [pc, #160]	; (8002d18 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d032      	beq.n	8002ce2 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a26      	ldr	r2, [pc, #152]	; (8002d1c <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d02a      	beq.n	8002cdc <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a25      	ldr	r2, [pc, #148]	; (8002d20 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d022      	beq.n	8002cd6 <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a23      	ldr	r2, [pc, #140]	; (8002d24 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d01a      	beq.n	8002cd0 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a22      	ldr	r2, [pc, #136]	; (8002d28 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d012      	beq.n	8002cca <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a20      	ldr	r2, [pc, #128]	; (8002d2c <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d00a      	beq.n	8002cc4 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a1f      	ldr	r2, [pc, #124]	; (8002d30 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d102      	bne.n	8002cbe <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8002cb8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cbc:	e041      	b.n	8002d42 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002cbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cc2:	e03e      	b.n	8002d42 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002cc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cc8:	e03b      	b.n	8002d42 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002cca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cce:	e038      	b.n	8002d42 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002cd0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cd4:	e035      	b.n	8002d42 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cda:	e032      	b.n	8002d42 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002cdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ce0:	e02f      	b.n	8002d42 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002ce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ce6:	e02c      	b.n	8002d42 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002ce8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cec:	e029      	b.n	8002d42 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002cee:	2304      	movs	r3, #4
 8002cf0:	e027      	b.n	8002d42 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002cf2:	2304      	movs	r3, #4
 8002cf4:	e025      	b.n	8002d42 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	e023      	b.n	8002d42 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002cfa:	bf00      	nop
 8002cfc:	40026000 	.word	0x40026000
 8002d00:	40026458 	.word	0x40026458
 8002d04:	40026010 	.word	0x40026010
 8002d08:	40026410 	.word	0x40026410
 8002d0c:	40026070 	.word	0x40026070
 8002d10:	40026470 	.word	0x40026470
 8002d14:	40026028 	.word	0x40026028
 8002d18:	40026428 	.word	0x40026428
 8002d1c:	40026088 	.word	0x40026088
 8002d20:	40026488 	.word	0x40026488
 8002d24:	40026040 	.word	0x40026040
 8002d28:	40026440 	.word	0x40026440
 8002d2c:	400260a0 	.word	0x400260a0
 8002d30:	400264a0 	.word	0x400264a0
 8002d34:	40026400 	.word	0x40026400
 8002d38:	400260b8 	.word	0x400260b8
 8002d3c:	40026058 	.word	0x40026058
 8002d40:	2304      	movs	r3, #4
 8002d42:	4a94      	ldr	r2, [pc, #592]	; (8002f94 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002d44:	60d3      	str	r3, [r2, #12]
 8002d46:	e05f      	b.n	8002e08 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a92      	ldr	r2, [pc, #584]	; (8002f98 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d057      	beq.n	8002e02 <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a91      	ldr	r2, [pc, #580]	; (8002f9c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d050      	beq.n	8002dfe <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a8f      	ldr	r2, [pc, #572]	; (8002fa0 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d049      	beq.n	8002dfa <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a8e      	ldr	r2, [pc, #568]	; (8002fa4 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d042      	beq.n	8002df6 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a8c      	ldr	r2, [pc, #560]	; (8002fa8 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d03a      	beq.n	8002df0 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a8b      	ldr	r2, [pc, #556]	; (8002fac <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d032      	beq.n	8002dea <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a89      	ldr	r2, [pc, #548]	; (8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d02a      	beq.n	8002de4 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a88      	ldr	r2, [pc, #544]	; (8002fb4 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d022      	beq.n	8002dde <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a86      	ldr	r2, [pc, #536]	; (8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d01a      	beq.n	8002dd8 <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a85      	ldr	r2, [pc, #532]	; (8002fbc <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d012      	beq.n	8002dd2 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a83      	ldr	r2, [pc, #524]	; (8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00a      	beq.n	8002dcc <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a82      	ldr	r2, [pc, #520]	; (8002fc4 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d102      	bne.n	8002dc6 <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 8002dc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002dc4:	e01e      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002dc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dca:	e01b      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002dcc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002dd0:	e018      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002dd2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002dd6:	e015      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002dd8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ddc:	e012      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002dde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002de2:	e00f      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002de8:	e00c      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dee:	e009      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002df4:	e006      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002df6:	2304      	movs	r3, #4
 8002df8:	e004      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002dfa:	2304      	movs	r3, #4
 8002dfc:	e002      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002dfe:	2304      	movs	r3, #4
 8002e00:	e000      	b.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002e02:	2304      	movs	r3, #4
 8002e04:	4a63      	ldr	r2, [pc, #396]	; (8002f94 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002e06:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4b6e      	ldr	r3, [pc, #440]	; (8002fc8 <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d95c      	bls.n	8002ece <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a5f      	ldr	r2, [pc, #380]	; (8002f98 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d053      	beq.n	8002ec6 <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a5e      	ldr	r2, [pc, #376]	; (8002f9c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d04c      	beq.n	8002ec2 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a5c      	ldr	r2, [pc, #368]	; (8002fa0 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d045      	beq.n	8002ebe <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a5b      	ldr	r2, [pc, #364]	; (8002fa4 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d03e      	beq.n	8002eba <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a59      	ldr	r2, [pc, #356]	; (8002fa8 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d037      	beq.n	8002eb6 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a58      	ldr	r2, [pc, #352]	; (8002fac <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d030      	beq.n	8002eb2 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a56      	ldr	r2, [pc, #344]	; (8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d029      	beq.n	8002eae <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a55      	ldr	r2, [pc, #340]	; (8002fb4 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d022      	beq.n	8002eaa <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a53      	ldr	r2, [pc, #332]	; (8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d01a      	beq.n	8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a52      	ldr	r2, [pc, #328]	; (8002fbc <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d012      	beq.n	8002e9e <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a50      	ldr	r2, [pc, #320]	; (8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00a      	beq.n	8002e98 <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a4f      	ldr	r2, [pc, #316]	; (8002fc4 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d102      	bne.n	8002e92 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8002e8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e90:	e01a      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e96:	e017      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e9c:	e014      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002e9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ea2:	e011      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002ea4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ea8:	e00e      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002eaa:	2340      	movs	r3, #64	; 0x40
 8002eac:	e00c      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002eae:	2340      	movs	r3, #64	; 0x40
 8002eb0:	e00a      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002eb2:	2340      	movs	r3, #64	; 0x40
 8002eb4:	e008      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002eb6:	2340      	movs	r3, #64	; 0x40
 8002eb8:	e006      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e004      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e002      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	4a40      	ldr	r2, [pc, #256]	; (8002fcc <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8002eca:	60d3      	str	r3, [r2, #12]
 8002ecc:	e141      	b.n	8003152 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	4b3e      	ldr	r3, [pc, #248]	; (8002fd0 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d97c      	bls.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a2e      	ldr	r2, [pc, #184]	; (8002f98 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d053      	beq.n	8002f8c <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a2c      	ldr	r2, [pc, #176]	; (8002f9c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d04c      	beq.n	8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a2b      	ldr	r2, [pc, #172]	; (8002fa0 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d045      	beq.n	8002f84 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a29      	ldr	r2, [pc, #164]	; (8002fa4 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d03e      	beq.n	8002f80 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a28      	ldr	r2, [pc, #160]	; (8002fa8 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d037      	beq.n	8002f7c <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a26      	ldr	r2, [pc, #152]	; (8002fac <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d030      	beq.n	8002f78 <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a25      	ldr	r2, [pc, #148]	; (8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d029      	beq.n	8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a23      	ldr	r2, [pc, #140]	; (8002fb4 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d022      	beq.n	8002f70 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a22      	ldr	r2, [pc, #136]	; (8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d01a      	beq.n	8002f6a <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a20      	ldr	r2, [pc, #128]	; (8002fbc <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d012      	beq.n	8002f64 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a1f      	ldr	r2, [pc, #124]	; (8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d00a      	beq.n	8002f5e <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a1d      	ldr	r2, [pc, #116]	; (8002fc4 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d102      	bne.n	8002f58 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8002f52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f56:	e01a      	b.n	8002f8e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f5c:	e017      	b.n	8002f8e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f62:	e014      	b.n	8002f8e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f68:	e011      	b.n	8002f8e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f6e:	e00e      	b.n	8002f8e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f70:	2340      	movs	r3, #64	; 0x40
 8002f72:	e00c      	b.n	8002f8e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f74:	2340      	movs	r3, #64	; 0x40
 8002f76:	e00a      	b.n	8002f8e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f78:	2340      	movs	r3, #64	; 0x40
 8002f7a:	e008      	b.n	8002f8e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f7c:	2340      	movs	r3, #64	; 0x40
 8002f7e:	e006      	b.n	8002f8e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e004      	b.n	8002f8e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f84:	2301      	movs	r3, #1
 8002f86:	e002      	b.n	8002f8e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	4a0f      	ldr	r2, [pc, #60]	; (8002fcc <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8002f90:	6093      	str	r3, [r2, #8]
 8002f92:	e0de      	b.n	8003152 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8002f94:	40026000 	.word	0x40026000
 8002f98:	40026010 	.word	0x40026010
 8002f9c:	40026410 	.word	0x40026410
 8002fa0:	40026070 	.word	0x40026070
 8002fa4:	40026470 	.word	0x40026470
 8002fa8:	40026028 	.word	0x40026028
 8002fac:	40026428 	.word	0x40026428
 8002fb0:	40026088 	.word	0x40026088
 8002fb4:	40026488 	.word	0x40026488
 8002fb8:	40026040 	.word	0x40026040
 8002fbc:	40026440 	.word	0x40026440
 8002fc0:	400260a0 	.word	0x400260a0
 8002fc4:	400264a0 	.word	0x400264a0
 8002fc8:	40026458 	.word	0x40026458
 8002fcc:	40026400 	.word	0x40026400
 8002fd0:	400260b8 	.word	0x400260b8
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4b78      	ldr	r3, [pc, #480]	; (80031bc <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d95c      	bls.n	800309a <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a76      	ldr	r2, [pc, #472]	; (80031c0 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d053      	beq.n	8003092 <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a75      	ldr	r2, [pc, #468]	; (80031c4 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d04c      	beq.n	800308e <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a73      	ldr	r2, [pc, #460]	; (80031c8 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d045      	beq.n	800308a <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a72      	ldr	r2, [pc, #456]	; (80031cc <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d03e      	beq.n	8003086 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a70      	ldr	r2, [pc, #448]	; (80031d0 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d037      	beq.n	8003082 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a6f      	ldr	r2, [pc, #444]	; (80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d030      	beq.n	800307e <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a6d      	ldr	r2, [pc, #436]	; (80031d8 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d029      	beq.n	800307a <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a6c      	ldr	r2, [pc, #432]	; (80031dc <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d022      	beq.n	8003076 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a6a      	ldr	r2, [pc, #424]	; (80031e0 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01a      	beq.n	8003070 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a69      	ldr	r2, [pc, #420]	; (80031e4 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d012      	beq.n	800306a <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a67      	ldr	r2, [pc, #412]	; (80031e8 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00a      	beq.n	8003064 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a66      	ldr	r2, [pc, #408]	; (80031ec <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d102      	bne.n	800305e <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8003058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800305c:	e01a      	b.n	8003094 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800305e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003062:	e017      	b.n	8003094 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003064:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003068:	e014      	b.n	8003094 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800306a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800306e:	e011      	b.n	8003094 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003070:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003074:	e00e      	b.n	8003094 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003076:	2340      	movs	r3, #64	; 0x40
 8003078:	e00c      	b.n	8003094 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800307a:	2340      	movs	r3, #64	; 0x40
 800307c:	e00a      	b.n	8003094 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800307e:	2340      	movs	r3, #64	; 0x40
 8003080:	e008      	b.n	8003094 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003082:	2340      	movs	r3, #64	; 0x40
 8003084:	e006      	b.n	8003094 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003086:	2301      	movs	r3, #1
 8003088:	e004      	b.n	8003094 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800308a:	2301      	movs	r3, #1
 800308c:	e002      	b.n	8003094 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003092:	2301      	movs	r3, #1
 8003094:	4a56      	ldr	r2, [pc, #344]	; (80031f0 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003096:	60d3      	str	r3, [r2, #12]
 8003098:	e05b      	b.n	8003152 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a48      	ldr	r2, [pc, #288]	; (80031c0 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d053      	beq.n	800314c <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a46      	ldr	r2, [pc, #280]	; (80031c4 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d04c      	beq.n	8003148 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a45      	ldr	r2, [pc, #276]	; (80031c8 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d045      	beq.n	8003144 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a43      	ldr	r2, [pc, #268]	; (80031cc <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d03e      	beq.n	8003140 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a42      	ldr	r2, [pc, #264]	; (80031d0 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d037      	beq.n	800313c <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a40      	ldr	r2, [pc, #256]	; (80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d030      	beq.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a3f      	ldr	r2, [pc, #252]	; (80031d8 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d029      	beq.n	8003134 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a3d      	ldr	r2, [pc, #244]	; (80031dc <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d022      	beq.n	8003130 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a3c      	ldr	r2, [pc, #240]	; (80031e0 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d01a      	beq.n	800312a <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a3a      	ldr	r2, [pc, #232]	; (80031e4 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d012      	beq.n	8003124 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a39      	ldr	r2, [pc, #228]	; (80031e8 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d00a      	beq.n	800311e <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a37      	ldr	r2, [pc, #220]	; (80031ec <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d102      	bne.n	8003118 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8003112:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003116:	e01a      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003118:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800311c:	e017      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800311e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003122:	e014      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003124:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003128:	e011      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800312a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800312e:	e00e      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003130:	2340      	movs	r3, #64	; 0x40
 8003132:	e00c      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003134:	2340      	movs	r3, #64	; 0x40
 8003136:	e00a      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003138:	2340      	movs	r3, #64	; 0x40
 800313a:	e008      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800313c:	2340      	movs	r3, #64	; 0x40
 800313e:	e006      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003140:	2301      	movs	r3, #1
 8003142:	e004      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003144:	2301      	movs	r3, #1
 8003146:	e002      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800314c:	2301      	movs	r3, #1
 800314e:	4a28      	ldr	r2, [pc, #160]	; (80031f0 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003150:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0216 	orr.w	r2, r2, #22
 8003160:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003170:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f042 0208 	orr.w	r2, r2, #8
 8003190:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f042 0201 	orr.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	e005      	b.n	80031b0 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031ac:	2302      	movs	r3, #2
 80031ae:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80031b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40026058 	.word	0x40026058
 80031c0:	40026010 	.word	0x40026010
 80031c4:	40026410 	.word	0x40026410
 80031c8:	40026070 	.word	0x40026070
 80031cc:	40026470 	.word	0x40026470
 80031d0:	40026028 	.word	0x40026028
 80031d4:	40026428 	.word	0x40026428
 80031d8:	40026088 	.word	0x40026088
 80031dc:	40026488 	.word	0x40026488
 80031e0:	40026040 	.word	0x40026040
 80031e4:	40026440 	.word	0x40026440
 80031e8:	400260a0 	.word	0x400260a0
 80031ec:	400264a0 	.word	0x400264a0
 80031f0:	40026000 	.word	0x40026000

080031f4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b40      	cmp	r3, #64	; 0x40
 8003210:	d108      	bne.n	8003224 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003222:	e007      	b.n	8003234 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	60da      	str	r2, [r3, #12]
}
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003240:	b480      	push	{r7}
 8003242:	b089      	sub	sp, #36	; 0x24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800324e:	2300      	movs	r3, #0
 8003250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003252:	2300      	movs	r3, #0
 8003254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003256:	2300      	movs	r3, #0
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	e16b      	b.n	8003534 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800325c:	2201      	movs	r2, #1
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	4013      	ands	r3, r2
 800326e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	429a      	cmp	r2, r3
 8003276:	f040 815a 	bne.w	800352e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	2b01      	cmp	r3, #1
 8003284:	d005      	beq.n	8003292 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800328e:	2b02      	cmp	r3, #2
 8003290:	d130      	bne.n	80032f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	2203      	movs	r2, #3
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032c8:	2201      	movs	r2, #1
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4013      	ands	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	091b      	lsrs	r3, r3, #4
 80032de:	f003 0201 	and.w	r2, r3, #1
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 0303 	and.w	r3, r3, #3
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d017      	beq.n	8003330 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	2203      	movs	r2, #3
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d123      	bne.n	8003384 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	08da      	lsrs	r2, r3, #3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3208      	adds	r2, #8
 8003344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	220f      	movs	r2, #15
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4313      	orrs	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	08da      	lsrs	r2, r3, #3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3208      	adds	r2, #8
 800337e:	69b9      	ldr	r1, [r7, #24]
 8003380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	2203      	movs	r2, #3
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 0203 	and.w	r2, r3, #3
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80b4 	beq.w	800352e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	4b60      	ldr	r3, [pc, #384]	; (800354c <HAL_GPIO_Init+0x30c>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	4a5f      	ldr	r2, [pc, #380]	; (800354c <HAL_GPIO_Init+0x30c>)
 80033d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033d4:	6453      	str	r3, [r2, #68]	; 0x44
 80033d6:	4b5d      	ldr	r3, [pc, #372]	; (800354c <HAL_GPIO_Init+0x30c>)
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033e2:	4a5b      	ldr	r2, [pc, #364]	; (8003550 <HAL_GPIO_Init+0x310>)
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	089b      	lsrs	r3, r3, #2
 80033e8:	3302      	adds	r3, #2
 80033ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	220f      	movs	r2, #15
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a52      	ldr	r2, [pc, #328]	; (8003554 <HAL_GPIO_Init+0x314>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d02b      	beq.n	8003466 <HAL_GPIO_Init+0x226>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a51      	ldr	r2, [pc, #324]	; (8003558 <HAL_GPIO_Init+0x318>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d025      	beq.n	8003462 <HAL_GPIO_Init+0x222>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a50      	ldr	r2, [pc, #320]	; (800355c <HAL_GPIO_Init+0x31c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d01f      	beq.n	800345e <HAL_GPIO_Init+0x21e>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a4f      	ldr	r2, [pc, #316]	; (8003560 <HAL_GPIO_Init+0x320>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d019      	beq.n	800345a <HAL_GPIO_Init+0x21a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a4e      	ldr	r2, [pc, #312]	; (8003564 <HAL_GPIO_Init+0x324>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d013      	beq.n	8003456 <HAL_GPIO_Init+0x216>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a4d      	ldr	r2, [pc, #308]	; (8003568 <HAL_GPIO_Init+0x328>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d00d      	beq.n	8003452 <HAL_GPIO_Init+0x212>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a4c      	ldr	r2, [pc, #304]	; (800356c <HAL_GPIO_Init+0x32c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d007      	beq.n	800344e <HAL_GPIO_Init+0x20e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a4b      	ldr	r2, [pc, #300]	; (8003570 <HAL_GPIO_Init+0x330>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d101      	bne.n	800344a <HAL_GPIO_Init+0x20a>
 8003446:	2307      	movs	r3, #7
 8003448:	e00e      	b.n	8003468 <HAL_GPIO_Init+0x228>
 800344a:	2308      	movs	r3, #8
 800344c:	e00c      	b.n	8003468 <HAL_GPIO_Init+0x228>
 800344e:	2306      	movs	r3, #6
 8003450:	e00a      	b.n	8003468 <HAL_GPIO_Init+0x228>
 8003452:	2305      	movs	r3, #5
 8003454:	e008      	b.n	8003468 <HAL_GPIO_Init+0x228>
 8003456:	2304      	movs	r3, #4
 8003458:	e006      	b.n	8003468 <HAL_GPIO_Init+0x228>
 800345a:	2303      	movs	r3, #3
 800345c:	e004      	b.n	8003468 <HAL_GPIO_Init+0x228>
 800345e:	2302      	movs	r3, #2
 8003460:	e002      	b.n	8003468 <HAL_GPIO_Init+0x228>
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <HAL_GPIO_Init+0x228>
 8003466:	2300      	movs	r3, #0
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	f002 0203 	and.w	r2, r2, #3
 800346e:	0092      	lsls	r2, r2, #2
 8003470:	4093      	lsls	r3, r2
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4313      	orrs	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003478:	4935      	ldr	r1, [pc, #212]	; (8003550 <HAL_GPIO_Init+0x310>)
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	089b      	lsrs	r3, r3, #2
 800347e:	3302      	adds	r3, #2
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003486:	4b3b      	ldr	r3, [pc, #236]	; (8003574 <HAL_GPIO_Init+0x334>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	43db      	mvns	r3, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4013      	ands	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034aa:	4a32      	ldr	r2, [pc, #200]	; (8003574 <HAL_GPIO_Init+0x334>)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034b0:	4b30      	ldr	r3, [pc, #192]	; (8003574 <HAL_GPIO_Init+0x334>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	43db      	mvns	r3, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4013      	ands	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034d4:	4a27      	ldr	r2, [pc, #156]	; (8003574 <HAL_GPIO_Init+0x334>)
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034da:	4b26      	ldr	r3, [pc, #152]	; (8003574 <HAL_GPIO_Init+0x334>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	43db      	mvns	r3, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4013      	ands	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034fe:	4a1d      	ldr	r2, [pc, #116]	; (8003574 <HAL_GPIO_Init+0x334>)
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003504:	4b1b      	ldr	r3, [pc, #108]	; (8003574 <HAL_GPIO_Init+0x334>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003528:	4a12      	ldr	r2, [pc, #72]	; (8003574 <HAL_GPIO_Init+0x334>)
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3301      	adds	r3, #1
 8003532:	61fb      	str	r3, [r7, #28]
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	2b0f      	cmp	r3, #15
 8003538:	f67f ae90 	bls.w	800325c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800353c:	bf00      	nop
 800353e:	bf00      	nop
 8003540:	3724      	adds	r7, #36	; 0x24
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40023800 	.word	0x40023800
 8003550:	40013800 	.word	0x40013800
 8003554:	40020000 	.word	0x40020000
 8003558:	40020400 	.word	0x40020400
 800355c:	40020800 	.word	0x40020800
 8003560:	40020c00 	.word	0x40020c00
 8003564:	40021000 	.word	0x40021000
 8003568:	40021400 	.word	0x40021400
 800356c:	40021800 	.word	0x40021800
 8003570:	40021c00 	.word	0x40021c00
 8003574:	40013c00 	.word	0x40013c00

08003578 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800357a:	b08f      	sub	sp, #60	; 0x3c
 800357c:	af0a      	add	r7, sp, #40	; 0x28
 800357e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e054      	b.n	8003634 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d106      	bne.n	80035aa <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f00b f961 	bl	800e86c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2203      	movs	r2, #3
 80035ae:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d102      	bne.n	80035c4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f004 f98b 	bl	80078e4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	687e      	ldr	r6, [r7, #4]
 80035d6:	466d      	mov	r5, sp
 80035d8:	f106 0410 	add.w	r4, r6, #16
 80035dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80035ec:	1d33      	adds	r3, r6, #4
 80035ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035f0:	6838      	ldr	r0, [r7, #0]
 80035f2:	f004 f905 	bl	8007800 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2101      	movs	r1, #1
 80035fc:	4618      	mov	r0, r3
 80035fe:	f004 f982 	bl	8007906 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	687e      	ldr	r6, [r7, #4]
 800360a:	466d      	mov	r5, sp
 800360c:	f106 0410 	add.w	r4, r6, #16
 8003610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003612:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003616:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003618:	e894 0003 	ldmia.w	r4, {r0, r1}
 800361c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003620:	1d33      	adds	r3, r6, #4
 8003622:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003624:	6838      	ldr	r0, [r7, #0]
 8003626:	f004 fae9 	bl	8007bfc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800363c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800363c:	b590      	push	{r4, r7, lr}
 800363e:	b089      	sub	sp, #36	; 0x24
 8003640:	af04      	add	r7, sp, #16
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	4608      	mov	r0, r1
 8003646:	4611      	mov	r1, r2
 8003648:	461a      	mov	r2, r3
 800364a:	4603      	mov	r3, r0
 800364c:	70fb      	strb	r3, [r7, #3]
 800364e:	460b      	mov	r3, r1
 8003650:	70bb      	strb	r3, [r7, #2]
 8003652:	4613      	mov	r3, r2
 8003654:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <HAL_HCD_HC_Init+0x28>
 8003660:	2302      	movs	r3, #2
 8003662:	e076      	b.n	8003752 <HAL_HCD_HC_Init+0x116>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800366c:	78fb      	ldrb	r3, [r7, #3]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	212c      	movs	r1, #44	; 0x2c
 8003672:	fb01 f303 	mul.w	r3, r1, r3
 8003676:	4413      	add	r3, r2
 8003678:	333d      	adds	r3, #61	; 0x3d
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800367e:	78fb      	ldrb	r3, [r7, #3]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	212c      	movs	r1, #44	; 0x2c
 8003684:	fb01 f303 	mul.w	r3, r1, r3
 8003688:	4413      	add	r3, r2
 800368a:	3338      	adds	r3, #56	; 0x38
 800368c:	787a      	ldrb	r2, [r7, #1]
 800368e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	212c      	movs	r1, #44	; 0x2c
 8003696:	fb01 f303 	mul.w	r3, r1, r3
 800369a:	4413      	add	r3, r2
 800369c:	3340      	adds	r3, #64	; 0x40
 800369e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80036a0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80036a2:	78fb      	ldrb	r3, [r7, #3]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	212c      	movs	r1, #44	; 0x2c
 80036a8:	fb01 f303 	mul.w	r3, r1, r3
 80036ac:	4413      	add	r3, r2
 80036ae:	3339      	adds	r3, #57	; 0x39
 80036b0:	78fa      	ldrb	r2, [r7, #3]
 80036b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	212c      	movs	r1, #44	; 0x2c
 80036ba:	fb01 f303 	mul.w	r3, r1, r3
 80036be:	4413      	add	r3, r2
 80036c0:	333f      	adds	r3, #63	; 0x3f
 80036c2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80036c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	78ba      	ldrb	r2, [r7, #2]
 80036cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036d0:	b2d0      	uxtb	r0, r2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	212c      	movs	r1, #44	; 0x2c
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	4413      	add	r3, r2
 80036dc:	333a      	adds	r3, #58	; 0x3a
 80036de:	4602      	mov	r2, r0
 80036e0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80036e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	da09      	bge.n	80036fe <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80036ea:	78fb      	ldrb	r3, [r7, #3]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	212c      	movs	r1, #44	; 0x2c
 80036f0:	fb01 f303 	mul.w	r3, r1, r3
 80036f4:	4413      	add	r3, r2
 80036f6:	333b      	adds	r3, #59	; 0x3b
 80036f8:	2201      	movs	r2, #1
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	e008      	b.n	8003710 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80036fe:	78fb      	ldrb	r3, [r7, #3]
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	212c      	movs	r1, #44	; 0x2c
 8003704:	fb01 f303 	mul.w	r3, r1, r3
 8003708:	4413      	add	r3, r2
 800370a:	333b      	adds	r3, #59	; 0x3b
 800370c:	2200      	movs	r2, #0
 800370e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	212c      	movs	r1, #44	; 0x2c
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	4413      	add	r3, r2
 800371c:	333c      	adds	r3, #60	; 0x3c
 800371e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003722:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	787c      	ldrb	r4, [r7, #1]
 800372a:	78ba      	ldrb	r2, [r7, #2]
 800372c:	78f9      	ldrb	r1, [r7, #3]
 800372e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003730:	9302      	str	r3, [sp, #8]
 8003732:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003736:	9301      	str	r3, [sp, #4]
 8003738:	f897 3020 	ldrb.w	r3, [r7, #32]
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	4623      	mov	r3, r4
 8003740:	f004 fbd6 	bl	8007ef0 <USB_HC_Init>
 8003744:	4603      	mov	r3, r0
 8003746:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003750:	7bfb      	ldrb	r3, [r7, #15]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	bd90      	pop	{r4, r7, pc}

0800375a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	460b      	mov	r3, r1
 8003764:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_HCD_HC_Halt+0x1e>
 8003774:	2302      	movs	r3, #2
 8003776:	e00f      	b.n	8003798 <HAL_HCD_HC_Halt+0x3e>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	78fa      	ldrb	r2, [r7, #3]
 8003786:	4611      	mov	r1, r2
 8003788:	4618      	mov	r0, r3
 800378a:	f004 fe12 	bl	80083b2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003796:	7bfb      	ldrb	r3, [r7, #15]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	4608      	mov	r0, r1
 80037aa:	4611      	mov	r1, r2
 80037ac:	461a      	mov	r2, r3
 80037ae:	4603      	mov	r3, r0
 80037b0:	70fb      	strb	r3, [r7, #3]
 80037b2:	460b      	mov	r3, r1
 80037b4:	70bb      	strb	r3, [r7, #2]
 80037b6:	4613      	mov	r3, r2
 80037b8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	212c      	movs	r1, #44	; 0x2c
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	4413      	add	r3, r2
 80037c6:	333b      	adds	r3, #59	; 0x3b
 80037c8:	78ba      	ldrb	r2, [r7, #2]
 80037ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	212c      	movs	r1, #44	; 0x2c
 80037d2:	fb01 f303 	mul.w	r3, r1, r3
 80037d6:	4413      	add	r3, r2
 80037d8:	333f      	adds	r3, #63	; 0x3f
 80037da:	787a      	ldrb	r2, [r7, #1]
 80037dc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80037de:	7c3b      	ldrb	r3, [r7, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d112      	bne.n	800380a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	212c      	movs	r1, #44	; 0x2c
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	4413      	add	r3, r2
 80037f0:	3342      	adds	r3, #66	; 0x42
 80037f2:	2203      	movs	r2, #3
 80037f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80037f6:	78fb      	ldrb	r3, [r7, #3]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	212c      	movs	r1, #44	; 0x2c
 80037fc:	fb01 f303 	mul.w	r3, r1, r3
 8003800:	4413      	add	r3, r2
 8003802:	333d      	adds	r3, #61	; 0x3d
 8003804:	7f3a      	ldrb	r2, [r7, #28]
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	e008      	b.n	800381c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	212c      	movs	r1, #44	; 0x2c
 8003810:	fb01 f303 	mul.w	r3, r1, r3
 8003814:	4413      	add	r3, r2
 8003816:	3342      	adds	r3, #66	; 0x42
 8003818:	2202      	movs	r2, #2
 800381a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800381c:	787b      	ldrb	r3, [r7, #1]
 800381e:	2b03      	cmp	r3, #3
 8003820:	f200 80c6 	bhi.w	80039b0 <HAL_HCD_HC_SubmitRequest+0x210>
 8003824:	a201      	add	r2, pc, #4	; (adr r2, 800382c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382a:	bf00      	nop
 800382c:	0800383d 	.word	0x0800383d
 8003830:	0800399d 	.word	0x0800399d
 8003834:	080038a1 	.word	0x080038a1
 8003838:	0800391f 	.word	0x0800391f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800383c:	7c3b      	ldrb	r3, [r7, #16]
 800383e:	2b01      	cmp	r3, #1
 8003840:	f040 80b8 	bne.w	80039b4 <HAL_HCD_HC_SubmitRequest+0x214>
 8003844:	78bb      	ldrb	r3, [r7, #2]
 8003846:	2b00      	cmp	r3, #0
 8003848:	f040 80b4 	bne.w	80039b4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800384c:	8b3b      	ldrh	r3, [r7, #24]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d108      	bne.n	8003864 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	212c      	movs	r1, #44	; 0x2c
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	4413      	add	r3, r2
 800385e:	3355      	adds	r3, #85	; 0x55
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	212c      	movs	r1, #44	; 0x2c
 800386a:	fb01 f303 	mul.w	r3, r1, r3
 800386e:	4413      	add	r3, r2
 8003870:	3355      	adds	r3, #85	; 0x55
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d109      	bne.n	800388c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	212c      	movs	r1, #44	; 0x2c
 800387e:	fb01 f303 	mul.w	r3, r1, r3
 8003882:	4413      	add	r3, r2
 8003884:	3342      	adds	r3, #66	; 0x42
 8003886:	2200      	movs	r2, #0
 8003888:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800388a:	e093      	b.n	80039b4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	212c      	movs	r1, #44	; 0x2c
 8003892:	fb01 f303 	mul.w	r3, r1, r3
 8003896:	4413      	add	r3, r2
 8003898:	3342      	adds	r3, #66	; 0x42
 800389a:	2202      	movs	r2, #2
 800389c:	701a      	strb	r2, [r3, #0]
      break;
 800389e:	e089      	b.n	80039b4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80038a0:	78bb      	ldrb	r3, [r7, #2]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d11d      	bne.n	80038e2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038a6:	78fb      	ldrb	r3, [r7, #3]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	212c      	movs	r1, #44	; 0x2c
 80038ac:	fb01 f303 	mul.w	r3, r1, r3
 80038b0:	4413      	add	r3, r2
 80038b2:	3355      	adds	r3, #85	; 0x55
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038ba:	78fb      	ldrb	r3, [r7, #3]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	212c      	movs	r1, #44	; 0x2c
 80038c0:	fb01 f303 	mul.w	r3, r1, r3
 80038c4:	4413      	add	r3, r2
 80038c6:	3342      	adds	r3, #66	; 0x42
 80038c8:	2200      	movs	r2, #0
 80038ca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80038cc:	e073      	b.n	80039b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038ce:	78fb      	ldrb	r3, [r7, #3]
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	212c      	movs	r1, #44	; 0x2c
 80038d4:	fb01 f303 	mul.w	r3, r1, r3
 80038d8:	4413      	add	r3, r2
 80038da:	3342      	adds	r3, #66	; 0x42
 80038dc:	2202      	movs	r2, #2
 80038de:	701a      	strb	r2, [r3, #0]
      break;
 80038e0:	e069      	b.n	80039b6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	212c      	movs	r1, #44	; 0x2c
 80038e8:	fb01 f303 	mul.w	r3, r1, r3
 80038ec:	4413      	add	r3, r2
 80038ee:	3354      	adds	r3, #84	; 0x54
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	212c      	movs	r1, #44	; 0x2c
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	4413      	add	r3, r2
 8003902:	3342      	adds	r3, #66	; 0x42
 8003904:	2200      	movs	r2, #0
 8003906:	701a      	strb	r2, [r3, #0]
      break;
 8003908:	e055      	b.n	80039b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	212c      	movs	r1, #44	; 0x2c
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	4413      	add	r3, r2
 8003916:	3342      	adds	r3, #66	; 0x42
 8003918:	2202      	movs	r2, #2
 800391a:	701a      	strb	r2, [r3, #0]
      break;
 800391c:	e04b      	b.n	80039b6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800391e:	78bb      	ldrb	r3, [r7, #2]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d11d      	bne.n	8003960 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	212c      	movs	r1, #44	; 0x2c
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	4413      	add	r3, r2
 8003930:	3355      	adds	r3, #85	; 0x55
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d109      	bne.n	800394c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003938:	78fb      	ldrb	r3, [r7, #3]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	212c      	movs	r1, #44	; 0x2c
 800393e:	fb01 f303 	mul.w	r3, r1, r3
 8003942:	4413      	add	r3, r2
 8003944:	3342      	adds	r3, #66	; 0x42
 8003946:	2200      	movs	r2, #0
 8003948:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800394a:	e034      	b.n	80039b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	212c      	movs	r1, #44	; 0x2c
 8003952:	fb01 f303 	mul.w	r3, r1, r3
 8003956:	4413      	add	r3, r2
 8003958:	3342      	adds	r3, #66	; 0x42
 800395a:	2202      	movs	r2, #2
 800395c:	701a      	strb	r2, [r3, #0]
      break;
 800395e:	e02a      	b.n	80039b6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	212c      	movs	r1, #44	; 0x2c
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	4413      	add	r3, r2
 800396c:	3354      	adds	r3, #84	; 0x54
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d109      	bne.n	8003988 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	212c      	movs	r1, #44	; 0x2c
 800397a:	fb01 f303 	mul.w	r3, r1, r3
 800397e:	4413      	add	r3, r2
 8003980:	3342      	adds	r3, #66	; 0x42
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
      break;
 8003986:	e016      	b.n	80039b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	212c      	movs	r1, #44	; 0x2c
 800398e:	fb01 f303 	mul.w	r3, r1, r3
 8003992:	4413      	add	r3, r2
 8003994:	3342      	adds	r3, #66	; 0x42
 8003996:	2202      	movs	r2, #2
 8003998:	701a      	strb	r2, [r3, #0]
      break;
 800399a:	e00c      	b.n	80039b6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	212c      	movs	r1, #44	; 0x2c
 80039a2:	fb01 f303 	mul.w	r3, r1, r3
 80039a6:	4413      	add	r3, r2
 80039a8:	3342      	adds	r3, #66	; 0x42
 80039aa:	2200      	movs	r2, #0
 80039ac:	701a      	strb	r2, [r3, #0]
      break;
 80039ae:	e002      	b.n	80039b6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80039b0:	bf00      	nop
 80039b2:	e000      	b.n	80039b6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80039b4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80039b6:	78fb      	ldrb	r3, [r7, #3]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	212c      	movs	r1, #44	; 0x2c
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	3344      	adds	r3, #68	; 0x44
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	8b3a      	ldrh	r2, [r7, #24]
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	202c      	movs	r0, #44	; 0x2c
 80039d0:	fb00 f303 	mul.w	r3, r0, r3
 80039d4:	440b      	add	r3, r1
 80039d6:	334c      	adds	r3, #76	; 0x4c
 80039d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80039da:	78fb      	ldrb	r3, [r7, #3]
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	212c      	movs	r1, #44	; 0x2c
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	4413      	add	r3, r2
 80039e6:	3360      	adds	r3, #96	; 0x60
 80039e8:	2200      	movs	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	212c      	movs	r1, #44	; 0x2c
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	3350      	adds	r3, #80	; 0x50
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	212c      	movs	r1, #44	; 0x2c
 8003a04:	fb01 f303 	mul.w	r3, r1, r3
 8003a08:	4413      	add	r3, r2
 8003a0a:	3339      	adds	r3, #57	; 0x39
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	212c      	movs	r1, #44	; 0x2c
 8003a16:	fb01 f303 	mul.w	r3, r1, r3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3361      	adds	r3, #97	; 0x61
 8003a1e:	2200      	movs	r2, #0
 8003a20:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	78fb      	ldrb	r3, [r7, #3]
 8003a28:	222c      	movs	r2, #44	; 0x2c
 8003a2a:	fb02 f303 	mul.w	r3, r2, r3
 8003a2e:	3338      	adds	r3, #56	; 0x38
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	18d1      	adds	r1, r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	f004 fb66 	bl	800810c <USB_HC_StartXfer>
 8003a40:	4603      	mov	r3, r0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop

08003a4c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f004 f889 	bl	8007b7a <USB_GetMode>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	f040 80f6 	bne.w	8003c5c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f004 f86d 	bl	8007b54 <USB_ReadInterrupts>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80ec 	beq.w	8003c5a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f004 f864 	bl	8007b54 <USB_ReadInterrupts>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a96:	d104      	bne.n	8003aa2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003aa0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f004 f854 	bl	8007b54 <USB_ReadInterrupts>
 8003aac:	4603      	mov	r3, r0
 8003aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ab6:	d104      	bne.n	8003ac2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ac0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f004 f844 	bl	8007b54 <USB_ReadInterrupts>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ad2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ad6:	d104      	bne.n	8003ae2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003ae0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f004 f834 	bl	8007b54 <USB_ReadInterrupts>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d103      	bne.n	8003afe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2202      	movs	r2, #2
 8003afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f004 f826 	bl	8007b54 <USB_ReadInterrupts>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b12:	d11c      	bne.n	8003b4e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003b1c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10f      	bne.n	8003b4e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003b2e:	2110      	movs	r1, #16
 8003b30:	6938      	ldr	r0, [r7, #16]
 8003b32:	f003 ff35 	bl	80079a0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003b36:	6938      	ldr	r0, [r7, #16]
 8003b38:	f003 ff56 	bl	80079e8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2101      	movs	r1, #1
 8003b42:	4618      	mov	r0, r3
 8003b44:	f004 f90e 	bl	8007d64 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f00a ff0d 	bl	800e968 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f003 fffe 	bl	8007b54 <USB_ReadInterrupts>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b62:	d102      	bne.n	8003b6a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f001 fa03 	bl	8004f70 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f003 fff0 	bl	8007b54 <USB_ReadInterrupts>
 8003b74:	4603      	mov	r3, r0
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d106      	bne.n	8003b8c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f00a fed6 	bl	800e930 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2208      	movs	r2, #8
 8003b8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f003 ffdf 	bl	8007b54 <USB_ReadInterrupts>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d101      	bne.n	8003ba4 <HAL_HCD_IRQHandler+0x158>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <HAL_HCD_IRQHandler+0x15a>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d012      	beq.n	8003bd0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	699a      	ldr	r2, [r3, #24]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0210 	bic.w	r2, r2, #16
 8003bb8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f001 f906 	bl	8004dcc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	699a      	ldr	r2, [r3, #24]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0210 	orr.w	r2, r2, #16
 8003bce:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f003 ffbd 	bl	8007b54 <USB_ReadInterrupts>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003be4:	d13a      	bne.n	8003c5c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f004 fbd0 	bl	8008390 <USB_HC_ReadInterrupt>
 8003bf0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	e025      	b.n	8003c44 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	fa22 f303 	lsr.w	r3, r2, r3
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d018      	beq.n	8003c3e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c22:	d106      	bne.n	8003c32 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	4619      	mov	r1, r3
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f8ab 	bl	8003d86 <HCD_HC_IN_IRQHandler>
 8003c30:	e005      	b.n	8003c3e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	4619      	mov	r1, r3
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fcc6 	bl	80045ca <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	3301      	adds	r3, #1
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d3d4      	bcc.n	8003bf8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c56:	615a      	str	r2, [r3, #20]
 8003c58:	e000      	b.n	8003c5c <HAL_HCD_IRQHandler+0x210>
      return;
 8003c5a:	bf00      	nop
    }
  }
}
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b082      	sub	sp, #8
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_HCD_Start+0x16>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e013      	b.n	8003ca0 <HAL_HCD_Start+0x3e>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2101      	movs	r1, #1
 8003c86:	4618      	mov	r0, r3
 8003c88:	f004 f8d0 	bl	8007e2c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f003 fe16 	bl	80078c2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_HCD_Stop+0x16>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e00d      	b.n	8003cda <HAL_HCD_Stop+0x32>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f004 fcca 	bl	8008664 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f004 f872 	bl	8007dd8 <USB_ResetPort>
 8003cf4:	4603      	mov	r3, r0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	460b      	mov	r3, r1
 8003d08:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003d0a:	78fb      	ldrb	r3, [r7, #3]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	212c      	movs	r1, #44	; 0x2c
 8003d10:	fb01 f303 	mul.w	r3, r1, r3
 8003d14:	4413      	add	r3, r2
 8003d16:	3360      	adds	r3, #96	; 0x60
 8003d18:	781b      	ldrb	r3, [r3, #0]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003d32:	78fb      	ldrb	r3, [r7, #3]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	212c      	movs	r1, #44	; 0x2c
 8003d38:	fb01 f303 	mul.w	r3, r1, r3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	3350      	adds	r3, #80	; 0x50
 8003d40:	681b      	ldr	r3, [r3, #0]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b082      	sub	sp, #8
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f004 f8b6 	bl	8007ecc <USB_GetCurrentFrame>
 8003d60:	4603      	mov	r3, r0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f004 f891 	bl	8007e9e <USB_GetHostSpeed>
 8003d7c:	4603      	mov	r3, r0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b086      	sub	sp, #24
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d119      	bne.n	8003dea <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	0151      	lsls	r1, r2, #5
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	440a      	add	r2, r1
 8003dde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003de2:	f043 0302 	orr.w	r3, r3, #2
 8003de6:	60d3      	str	r3, [r2, #12]
 8003de8:	e101      	b.n	8003fee <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e00:	d12b      	bne.n	8003e5a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e14:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	212c      	movs	r1, #44	; 0x2c
 8003e1c:	fb01 f303 	mul.w	r3, r1, r3
 8003e20:	4413      	add	r3, r2
 8003e22:	3361      	adds	r3, #97	; 0x61
 8003e24:	2207      	movs	r2, #7
 8003e26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	0151      	lsls	r1, r2, #5
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	440a      	add	r2, r1
 8003e3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e42:	f043 0302 	orr.w	r3, r3, #2
 8003e46:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	4611      	mov	r1, r2
 8003e52:	4618      	mov	r0, r3
 8003e54:	f004 faad 	bl	80083b2 <USB_HC_Halt>
 8003e58:	e0c9      	b.n	8003fee <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	015a      	lsls	r2, r3, #5
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	4413      	add	r3, r2
 8003e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	d109      	bne.n	8003e84 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2320      	movs	r3, #32
 8003e80:	6093      	str	r3, [r2, #8]
 8003e82:	e0b4      	b.n	8003fee <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d133      	bne.n	8003f02 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	0151      	lsls	r1, r2, #5
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	440a      	add	r2, r1
 8003eb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003eb4:	f043 0302 	orr.w	r3, r3, #2
 8003eb8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	212c      	movs	r1, #44	; 0x2c
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	3361      	adds	r3, #97	; 0x61
 8003ec8:	2205      	movs	r2, #5
 8003eca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed8:	461a      	mov	r2, r3
 8003eda:	2310      	movs	r3, #16
 8003edc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eea:	461a      	mov	r2, r3
 8003eec:	2308      	movs	r3, #8
 8003eee:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	4611      	mov	r1, r2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f004 fa59 	bl	80083b2 <USB_HC_Halt>
 8003f00:	e075      	b.n	8003fee <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f18:	d134      	bne.n	8003f84 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	0151      	lsls	r1, r2, #5
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	440a      	add	r2, r1
 8003f30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f34:	f043 0302 	orr.w	r3, r3, #2
 8003f38:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	212c      	movs	r1, #44	; 0x2c
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	4413      	add	r3, r2
 8003f46:	3361      	adds	r3, #97	; 0x61
 8003f48:	2208      	movs	r2, #8
 8003f4a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f58:	461a      	mov	r2, r3
 8003f5a:	2310      	movs	r3, #16
 8003f5c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f70:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f004 fa18 	bl	80083b2 <USB_HC_Halt>
 8003f82:	e034      	b.n	8003fee <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f96:	2b80      	cmp	r3, #128	; 0x80
 8003f98:	d129      	bne.n	8003fee <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	0151      	lsls	r1, r2, #5
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	440a      	add	r2, r1
 8003fb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fb4:	f043 0302 	orr.w	r3, r3, #2
 8003fb8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	212c      	movs	r1, #44	; 0x2c
 8003fc0:	fb01 f303 	mul.w	r3, r1, r3
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3361      	adds	r3, #97	; 0x61
 8003fc8:	2206      	movs	r2, #6
 8003fca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f004 f9eb 	bl	80083b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe8:	461a      	mov	r2, r3
 8003fea:	2380      	movs	r3, #128	; 0x80
 8003fec:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004004:	d122      	bne.n	800404c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	4413      	add	r3, r2
 800400e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	0151      	lsls	r1, r2, #5
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	440a      	add	r2, r1
 800401c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004020:	f043 0302 	orr.w	r3, r3, #2
 8004024:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	4611      	mov	r1, r2
 8004030:	4618      	mov	r0, r3
 8004032:	f004 f9be 	bl	80083b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	4413      	add	r3, r2
 800403e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004042:	461a      	mov	r2, r3
 8004044:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004048:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800404a:	e2ba      	b.n	80045c2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	4413      	add	r3, r2
 8004054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b01      	cmp	r3, #1
 8004060:	f040 811b 	bne.w	800429a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d019      	beq.n	80040a0 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	212c      	movs	r1, #44	; 0x2c
 8004072:	fb01 f303 	mul.w	r3, r1, r3
 8004076:	4413      	add	r3, r2
 8004078:	3348      	adds	r3, #72	; 0x48
 800407a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	0159      	lsls	r1, r3, #5
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	440b      	add	r3, r1
 8004084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800408e:	1ad2      	subs	r2, r2, r3
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	202c      	movs	r0, #44	; 0x2c
 8004096:	fb00 f303 	mul.w	r3, r0, r3
 800409a:	440b      	add	r3, r1
 800409c:	3350      	adds	r3, #80	; 0x50
 800409e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	212c      	movs	r1, #44	; 0x2c
 80040a6:	fb01 f303 	mul.w	r3, r1, r3
 80040aa:	4413      	add	r3, r2
 80040ac:	3361      	adds	r3, #97	; 0x61
 80040ae:	2201      	movs	r2, #1
 80040b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	212c      	movs	r1, #44	; 0x2c
 80040b8:	fb01 f303 	mul.w	r3, r1, r3
 80040bc:	4413      	add	r3, r2
 80040be:	335c      	adds	r3, #92	; 0x5c
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d0:	461a      	mov	r2, r3
 80040d2:	2301      	movs	r3, #1
 80040d4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	212c      	movs	r1, #44	; 0x2c
 80040dc:	fb01 f303 	mul.w	r3, r1, r3
 80040e0:	4413      	add	r3, r2
 80040e2:	333f      	adds	r3, #63	; 0x3f
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	212c      	movs	r1, #44	; 0x2c
 80040f0:	fb01 f303 	mul.w	r3, r1, r3
 80040f4:	4413      	add	r3, r2
 80040f6:	333f      	adds	r3, #63	; 0x3f
 80040f8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d121      	bne.n	8004142 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4413      	add	r3, r2
 8004106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	0151      	lsls	r1, r2, #5
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	440a      	add	r2, r1
 8004114:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004118:	f043 0302 	orr.w	r3, r3, #2
 800411c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	4611      	mov	r1, r2
 8004128:	4618      	mov	r0, r3
 800412a:	f004 f942 	bl	80083b2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	4413      	add	r3, r2
 8004136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413a:	461a      	mov	r2, r3
 800413c:	2310      	movs	r3, #16
 800413e:	6093      	str	r3, [r2, #8]
 8004140:	e066      	b.n	8004210 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	212c      	movs	r1, #44	; 0x2c
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	4413      	add	r3, r2
 800414e:	333f      	adds	r3, #63	; 0x3f
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b03      	cmp	r3, #3
 8004154:	d127      	bne.n	80041a6 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4413      	add	r3, r2
 800415e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	0151      	lsls	r1, r2, #5
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	440a      	add	r2, r1
 800416c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004170:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004174:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	212c      	movs	r1, #44	; 0x2c
 800417c:	fb01 f303 	mul.w	r3, r1, r3
 8004180:	4413      	add	r3, r2
 8004182:	3360      	adds	r3, #96	; 0x60
 8004184:	2201      	movs	r2, #1
 8004186:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	b2d9      	uxtb	r1, r3
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	202c      	movs	r0, #44	; 0x2c
 8004192:	fb00 f303 	mul.w	r3, r0, r3
 8004196:	4413      	add	r3, r2
 8004198:	3360      	adds	r3, #96	; 0x60
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f00a fbf0 	bl	800e984 <HAL_HCD_HC_NotifyURBChange_Callback>
 80041a4:	e034      	b.n	8004210 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	212c      	movs	r1, #44	; 0x2c
 80041ac:	fb01 f303 	mul.w	r3, r1, r3
 80041b0:	4413      	add	r3, r2
 80041b2:	333f      	adds	r3, #63	; 0x3f
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d12a      	bne.n	8004210 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	212c      	movs	r1, #44	; 0x2c
 80041c0:	fb01 f303 	mul.w	r3, r1, r3
 80041c4:	4413      	add	r3, r2
 80041c6:	3360      	adds	r3, #96	; 0x60
 80041c8:	2201      	movs	r2, #1
 80041ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	212c      	movs	r1, #44	; 0x2c
 80041d2:	fb01 f303 	mul.w	r3, r1, r3
 80041d6:	4413      	add	r3, r2
 80041d8:	3354      	adds	r3, #84	; 0x54
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	f083 0301 	eor.w	r3, r3, #1
 80041e0:	b2d8      	uxtb	r0, r3
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	212c      	movs	r1, #44	; 0x2c
 80041e8:	fb01 f303 	mul.w	r3, r1, r3
 80041ec:	4413      	add	r3, r2
 80041ee:	3354      	adds	r3, #84	; 0x54
 80041f0:	4602      	mov	r2, r0
 80041f2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	b2d9      	uxtb	r1, r3
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	202c      	movs	r0, #44	; 0x2c
 80041fe:	fb00 f303 	mul.w	r3, r0, r3
 8004202:	4413      	add	r3, r2
 8004204:	3360      	adds	r3, #96	; 0x60
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f00a fbba 	bl	800e984 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d12b      	bne.n	8004270 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	212c      	movs	r1, #44	; 0x2c
 800421e:	fb01 f303 	mul.w	r3, r1, r3
 8004222:	4413      	add	r3, r2
 8004224:	3348      	adds	r3, #72	; 0x48
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	202c      	movs	r0, #44	; 0x2c
 800422e:	fb00 f202 	mul.w	r2, r0, r2
 8004232:	440a      	add	r2, r1
 8004234:	3240      	adds	r2, #64	; 0x40
 8004236:	8812      	ldrh	r2, [r2, #0]
 8004238:	fbb3 f3f2 	udiv	r3, r3, r2
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 81be 	beq.w	80045c2 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	212c      	movs	r1, #44	; 0x2c
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	4413      	add	r3, r2
 8004252:	3354      	adds	r3, #84	; 0x54
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	f083 0301 	eor.w	r3, r3, #1
 800425a:	b2d8      	uxtb	r0, r3
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	212c      	movs	r1, #44	; 0x2c
 8004262:	fb01 f303 	mul.w	r3, r1, r3
 8004266:	4413      	add	r3, r2
 8004268:	3354      	adds	r3, #84	; 0x54
 800426a:	4602      	mov	r2, r0
 800426c:	701a      	strb	r2, [r3, #0]
}
 800426e:	e1a8      	b.n	80045c2 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	212c      	movs	r1, #44	; 0x2c
 8004276:	fb01 f303 	mul.w	r3, r1, r3
 800427a:	4413      	add	r3, r2
 800427c:	3354      	adds	r3, #84	; 0x54
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	f083 0301 	eor.w	r3, r3, #1
 8004284:	b2d8      	uxtb	r0, r3
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	212c      	movs	r1, #44	; 0x2c
 800428c:	fb01 f303 	mul.w	r3, r1, r3
 8004290:	4413      	add	r3, r2
 8004292:	3354      	adds	r3, #84	; 0x54
 8004294:	4602      	mov	r2, r0
 8004296:	701a      	strb	r2, [r3, #0]
}
 8004298:	e193      	b.n	80045c2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	f040 8106 	bne.w	80044be <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	0151      	lsls	r1, r2, #5
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	440a      	add	r2, r1
 80042c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042cc:	f023 0302 	bic.w	r3, r3, #2
 80042d0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	212c      	movs	r1, #44	; 0x2c
 80042d8:	fb01 f303 	mul.w	r3, r1, r3
 80042dc:	4413      	add	r3, r2
 80042de:	3361      	adds	r3, #97	; 0x61
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d109      	bne.n	80042fa <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	212c      	movs	r1, #44	; 0x2c
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	4413      	add	r3, r2
 80042f2:	3360      	adds	r3, #96	; 0x60
 80042f4:	2201      	movs	r2, #1
 80042f6:	701a      	strb	r2, [r3, #0]
 80042f8:	e0c9      	b.n	800448e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	212c      	movs	r1, #44	; 0x2c
 8004300:	fb01 f303 	mul.w	r3, r1, r3
 8004304:	4413      	add	r3, r2
 8004306:	3361      	adds	r3, #97	; 0x61
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b05      	cmp	r3, #5
 800430c:	d109      	bne.n	8004322 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	212c      	movs	r1, #44	; 0x2c
 8004314:	fb01 f303 	mul.w	r3, r1, r3
 8004318:	4413      	add	r3, r2
 800431a:	3360      	adds	r3, #96	; 0x60
 800431c:	2205      	movs	r2, #5
 800431e:	701a      	strb	r2, [r3, #0]
 8004320:	e0b5      	b.n	800448e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	212c      	movs	r1, #44	; 0x2c
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	4413      	add	r3, r2
 800432e:	3361      	adds	r3, #97	; 0x61
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b06      	cmp	r3, #6
 8004334:	d009      	beq.n	800434a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	212c      	movs	r1, #44	; 0x2c
 800433c:	fb01 f303 	mul.w	r3, r1, r3
 8004340:	4413      	add	r3, r2
 8004342:	3361      	adds	r3, #97	; 0x61
 8004344:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004346:	2b08      	cmp	r3, #8
 8004348:	d150      	bne.n	80043ec <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	212c      	movs	r1, #44	; 0x2c
 8004350:	fb01 f303 	mul.w	r3, r1, r3
 8004354:	4413      	add	r3, r2
 8004356:	335c      	adds	r3, #92	; 0x5c
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	202c      	movs	r0, #44	; 0x2c
 8004362:	fb00 f303 	mul.w	r3, r0, r3
 8004366:	440b      	add	r3, r1
 8004368:	335c      	adds	r3, #92	; 0x5c
 800436a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	212c      	movs	r1, #44	; 0x2c
 8004372:	fb01 f303 	mul.w	r3, r1, r3
 8004376:	4413      	add	r3, r2
 8004378:	335c      	adds	r3, #92	; 0x5c
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d912      	bls.n	80043a6 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	212c      	movs	r1, #44	; 0x2c
 8004386:	fb01 f303 	mul.w	r3, r1, r3
 800438a:	4413      	add	r3, r2
 800438c:	335c      	adds	r3, #92	; 0x5c
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	212c      	movs	r1, #44	; 0x2c
 8004398:	fb01 f303 	mul.w	r3, r1, r3
 800439c:	4413      	add	r3, r2
 800439e:	3360      	adds	r3, #96	; 0x60
 80043a0:	2204      	movs	r2, #4
 80043a2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80043a4:	e073      	b.n	800448e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	212c      	movs	r1, #44	; 0x2c
 80043ac:	fb01 f303 	mul.w	r3, r1, r3
 80043b0:	4413      	add	r3, r2
 80043b2:	3360      	adds	r3, #96	; 0x60
 80043b4:	2202      	movs	r2, #2
 80043b6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043ce:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043d6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e4:	461a      	mov	r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80043ea:	e050      	b.n	800448e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	212c      	movs	r1, #44	; 0x2c
 80043f2:	fb01 f303 	mul.w	r3, r1, r3
 80043f6:	4413      	add	r3, r2
 80043f8:	3361      	adds	r3, #97	; 0x61
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d122      	bne.n	8004446 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	212c      	movs	r1, #44	; 0x2c
 8004406:	fb01 f303 	mul.w	r3, r1, r3
 800440a:	4413      	add	r3, r2
 800440c:	3360      	adds	r3, #96	; 0x60
 800440e:	2202      	movs	r2, #2
 8004410:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	4413      	add	r3, r2
 800441a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004428:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004430:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4413      	add	r3, r2
 800443a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800443e:	461a      	mov	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	e023      	b.n	800448e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	212c      	movs	r1, #44	; 0x2c
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	4413      	add	r3, r2
 8004452:	3361      	adds	r3, #97	; 0x61
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b07      	cmp	r3, #7
 8004458:	d119      	bne.n	800448e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	212c      	movs	r1, #44	; 0x2c
 8004460:	fb01 f303 	mul.w	r3, r1, r3
 8004464:	4413      	add	r3, r2
 8004466:	335c      	adds	r3, #92	; 0x5c
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	202c      	movs	r0, #44	; 0x2c
 8004472:	fb00 f303 	mul.w	r3, r0, r3
 8004476:	440b      	add	r3, r1
 8004478:	335c      	adds	r3, #92	; 0x5c
 800447a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	212c      	movs	r1, #44	; 0x2c
 8004482:	fb01 f303 	mul.w	r3, r1, r3
 8004486:	4413      	add	r3, r2
 8004488:	3360      	adds	r3, #96	; 0x60
 800448a:	2204      	movs	r2, #4
 800448c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	4413      	add	r3, r2
 8004496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800449a:	461a      	mov	r2, r3
 800449c:	2302      	movs	r3, #2
 800449e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	b2d9      	uxtb	r1, r3
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	202c      	movs	r0, #44	; 0x2c
 80044aa:	fb00 f303 	mul.w	r3, r0, r3
 80044ae:	4413      	add	r3, r2
 80044b0:	3360      	adds	r3, #96	; 0x60
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	461a      	mov	r2, r3
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f00a fa64 	bl	800e984 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80044bc:	e081      	b.n	80045c2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 0310 	and.w	r3, r3, #16
 80044d0:	2b10      	cmp	r3, #16
 80044d2:	d176      	bne.n	80045c2 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	212c      	movs	r1, #44	; 0x2c
 80044da:	fb01 f303 	mul.w	r3, r1, r3
 80044de:	4413      	add	r3, r2
 80044e0:	333f      	adds	r3, #63	; 0x3f
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d121      	bne.n	800452c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	212c      	movs	r1, #44	; 0x2c
 80044ee:	fb01 f303 	mul.w	r3, r1, r3
 80044f2:	4413      	add	r3, r2
 80044f4:	335c      	adds	r3, #92	; 0x5c
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	4413      	add	r3, r2
 8004502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	0151      	lsls	r1, r2, #5
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	440a      	add	r2, r1
 8004510:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004514:	f043 0302 	orr.w	r3, r3, #2
 8004518:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	4611      	mov	r1, r2
 8004524:	4618      	mov	r0, r3
 8004526:	f003 ff44 	bl	80083b2 <USB_HC_Halt>
 800452a:	e041      	b.n	80045b0 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	212c      	movs	r1, #44	; 0x2c
 8004532:	fb01 f303 	mul.w	r3, r1, r3
 8004536:	4413      	add	r3, r2
 8004538:	333f      	adds	r3, #63	; 0x3f
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d009      	beq.n	8004554 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	212c      	movs	r1, #44	; 0x2c
 8004546:	fb01 f303 	mul.w	r3, r1, r3
 800454a:	4413      	add	r3, r2
 800454c:	333f      	adds	r3, #63	; 0x3f
 800454e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004550:	2b02      	cmp	r3, #2
 8004552:	d12d      	bne.n	80045b0 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	212c      	movs	r1, #44	; 0x2c
 800455a:	fb01 f303 	mul.w	r3, r1, r3
 800455e:	4413      	add	r3, r2
 8004560:	335c      	adds	r3, #92	; 0x5c
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d120      	bne.n	80045b0 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	212c      	movs	r1, #44	; 0x2c
 8004574:	fb01 f303 	mul.w	r3, r1, r3
 8004578:	4413      	add	r3, r2
 800457a:	3361      	adds	r3, #97	; 0x61
 800457c:	2203      	movs	r2, #3
 800457e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	4413      	add	r3, r2
 8004588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	0151      	lsls	r1, r2, #5
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	440a      	add	r2, r1
 8004596:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800459a:	f043 0302 	orr.w	r3, r3, #2
 800459e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	4611      	mov	r1, r2
 80045aa:	4618      	mov	r0, r3
 80045ac:	f003 ff01 	bl	80083b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045bc:	461a      	mov	r2, r3
 80045be:	2310      	movs	r3, #16
 80045c0:	6093      	str	r3, [r2, #8]
}
 80045c2:	bf00      	nop
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b088      	sub	sp, #32
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	460b      	mov	r3, r1
 80045d4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 0304 	and.w	r3, r3, #4
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d119      	bne.n	800462e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	4413      	add	r3, r2
 8004602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004606:	461a      	mov	r2, r3
 8004608:	2304      	movs	r3, #4
 800460a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	4413      	add	r3, r2
 8004614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	0151      	lsls	r1, r2, #5
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	440a      	add	r2, r1
 8004622:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004626:	f043 0302 	orr.w	r3, r3, #2
 800462a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800462c:	e3ca      	b.n	8004dc4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	4413      	add	r3, r2
 8004636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 0320 	and.w	r3, r3, #32
 8004640:	2b20      	cmp	r3, #32
 8004642:	d13e      	bne.n	80046c2 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	4413      	add	r3, r2
 800464c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004650:	461a      	mov	r2, r3
 8004652:	2320      	movs	r3, #32
 8004654:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	212c      	movs	r1, #44	; 0x2c
 800465c:	fb01 f303 	mul.w	r3, r1, r3
 8004660:	4413      	add	r3, r2
 8004662:	333d      	adds	r3, #61	; 0x3d
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	2b01      	cmp	r3, #1
 8004668:	f040 83ac 	bne.w	8004dc4 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	212c      	movs	r1, #44	; 0x2c
 8004672:	fb01 f303 	mul.w	r3, r1, r3
 8004676:	4413      	add	r3, r2
 8004678:	333d      	adds	r3, #61	; 0x3d
 800467a:	2200      	movs	r2, #0
 800467c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	212c      	movs	r1, #44	; 0x2c
 8004684:	fb01 f303 	mul.w	r3, r1, r3
 8004688:	4413      	add	r3, r2
 800468a:	3360      	adds	r3, #96	; 0x60
 800468c:	2202      	movs	r2, #2
 800468e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	4413      	add	r3, r2
 8004698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	0151      	lsls	r1, r2, #5
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	440a      	add	r2, r1
 80046a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046aa:	f043 0302 	orr.w	r3, r3, #2
 80046ae:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	b2d2      	uxtb	r2, r2
 80046b8:	4611      	mov	r1, r2
 80046ba:	4618      	mov	r0, r3
 80046bc:	f003 fe79 	bl	80083b2 <USB_HC_Halt>
}
 80046c0:	e380      	b.n	8004dc4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046d8:	d122      	bne.n	8004720 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	0151      	lsls	r1, r2, #5
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	440a      	add	r2, r1
 80046f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046f4:	f043 0302 	orr.w	r3, r3, #2
 80046f8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	4611      	mov	r1, r2
 8004704:	4618      	mov	r0, r3
 8004706:	f003 fe54 	bl	80083b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	4413      	add	r3, r2
 8004712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004716:	461a      	mov	r2, r3
 8004718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800471c:	6093      	str	r3, [r2, #8]
}
 800471e:	e351      	b.n	8004dc4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	4413      	add	r3, r2
 8004728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b01      	cmp	r3, #1
 8004734:	d150      	bne.n	80047d8 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	212c      	movs	r1, #44	; 0x2c
 800473c:	fb01 f303 	mul.w	r3, r1, r3
 8004740:	4413      	add	r3, r2
 8004742:	335c      	adds	r3, #92	; 0x5c
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	4413      	add	r3, r2
 8004750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475a:	2b40      	cmp	r3, #64	; 0x40
 800475c:	d111      	bne.n	8004782 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	212c      	movs	r1, #44	; 0x2c
 8004764:	fb01 f303 	mul.w	r3, r1, r3
 8004768:	4413      	add	r3, r2
 800476a:	333d      	adds	r3, #61	; 0x3d
 800476c:	2201      	movs	r2, #1
 800476e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	4413      	add	r3, r2
 8004778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800477c:	461a      	mov	r2, r3
 800477e:	2340      	movs	r3, #64	; 0x40
 8004780:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	4413      	add	r3, r2
 800478a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	0151      	lsls	r1, r2, #5
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	440a      	add	r2, r1
 8004798:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800479c:	f043 0302 	orr.w	r3, r3, #2
 80047a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	4611      	mov	r1, r2
 80047ac:	4618      	mov	r0, r3
 80047ae:	f003 fe00 	bl	80083b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047be:	461a      	mov	r2, r3
 80047c0:	2301      	movs	r3, #1
 80047c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	212c      	movs	r1, #44	; 0x2c
 80047ca:	fb01 f303 	mul.w	r3, r1, r3
 80047ce:	4413      	add	r3, r2
 80047d0:	3361      	adds	r3, #97	; 0x61
 80047d2:	2201      	movs	r2, #1
 80047d4:	701a      	strb	r2, [r3, #0]
}
 80047d6:	e2f5      	b.n	8004dc4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ea:	2b40      	cmp	r3, #64	; 0x40
 80047ec:	d13c      	bne.n	8004868 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	212c      	movs	r1, #44	; 0x2c
 80047f4:	fb01 f303 	mul.w	r3, r1, r3
 80047f8:	4413      	add	r3, r2
 80047fa:	3361      	adds	r3, #97	; 0x61
 80047fc:	2204      	movs	r2, #4
 80047fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	212c      	movs	r1, #44	; 0x2c
 8004806:	fb01 f303 	mul.w	r3, r1, r3
 800480a:	4413      	add	r3, r2
 800480c:	333d      	adds	r3, #61	; 0x3d
 800480e:	2201      	movs	r2, #1
 8004810:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	212c      	movs	r1, #44	; 0x2c
 8004818:	fb01 f303 	mul.w	r3, r1, r3
 800481c:	4413      	add	r3, r2
 800481e:	335c      	adds	r3, #92	; 0x5c
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	4413      	add	r3, r2
 800482c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	0151      	lsls	r1, r2, #5
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	440a      	add	r2, r1
 800483a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800483e:	f043 0302 	orr.w	r3, r3, #2
 8004842:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	4611      	mov	r1, r2
 800484e:	4618      	mov	r0, r3
 8004850:	f003 fdaf 	bl	80083b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	4413      	add	r3, r2
 800485c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004860:	461a      	mov	r2, r3
 8004862:	2340      	movs	r3, #64	; 0x40
 8004864:	6093      	str	r3, [r2, #8]
}
 8004866:	e2ad      	b.n	8004dc4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	4413      	add	r3, r2
 8004870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b08      	cmp	r3, #8
 800487c:	d12a      	bne.n	80048d4 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	4413      	add	r3, r2
 8004886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488a:	461a      	mov	r2, r3
 800488c:	2308      	movs	r3, #8
 800488e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	4413      	add	r3, r2
 8004898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	0151      	lsls	r1, r2, #5
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	440a      	add	r2, r1
 80048a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048aa:	f043 0302 	orr.w	r3, r3, #2
 80048ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	4611      	mov	r1, r2
 80048ba:	4618      	mov	r0, r3
 80048bc:	f003 fd79 	bl	80083b2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	212c      	movs	r1, #44	; 0x2c
 80048c6:	fb01 f303 	mul.w	r3, r1, r3
 80048ca:	4413      	add	r3, r2
 80048cc:	3361      	adds	r3, #97	; 0x61
 80048ce:	2205      	movs	r2, #5
 80048d0:	701a      	strb	r2, [r3, #0]
}
 80048d2:	e277      	b.n	8004dc4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 0310 	and.w	r3, r3, #16
 80048e6:	2b10      	cmp	r3, #16
 80048e8:	d150      	bne.n	800498c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	212c      	movs	r1, #44	; 0x2c
 80048f0:	fb01 f303 	mul.w	r3, r1, r3
 80048f4:	4413      	add	r3, r2
 80048f6:	335c      	adds	r3, #92	; 0x5c
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	212c      	movs	r1, #44	; 0x2c
 8004902:	fb01 f303 	mul.w	r3, r1, r3
 8004906:	4413      	add	r3, r2
 8004908:	3361      	adds	r3, #97	; 0x61
 800490a:	2203      	movs	r2, #3
 800490c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	212c      	movs	r1, #44	; 0x2c
 8004914:	fb01 f303 	mul.w	r3, r1, r3
 8004918:	4413      	add	r3, r2
 800491a:	333d      	adds	r3, #61	; 0x3d
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d112      	bne.n	8004948 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	212c      	movs	r1, #44	; 0x2c
 8004928:	fb01 f303 	mul.w	r3, r1, r3
 800492c:	4413      	add	r3, r2
 800492e:	333c      	adds	r3, #60	; 0x3c
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d108      	bne.n	8004948 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	212c      	movs	r1, #44	; 0x2c
 800493c:	fb01 f303 	mul.w	r3, r1, r3
 8004940:	4413      	add	r3, r2
 8004942:	333d      	adds	r3, #61	; 0x3d
 8004944:	2201      	movs	r2, #1
 8004946:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	4413      	add	r3, r2
 8004950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	0151      	lsls	r1, r2, #5
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	440a      	add	r2, r1
 800495e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004962:	f043 0302 	orr.w	r3, r3, #2
 8004966:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	4611      	mov	r1, r2
 8004972:	4618      	mov	r0, r3
 8004974:	f003 fd1d 	bl	80083b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	4413      	add	r3, r2
 8004980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004984:	461a      	mov	r2, r3
 8004986:	2310      	movs	r3, #16
 8004988:	6093      	str	r3, [r2, #8]
}
 800498a:	e21b      	b.n	8004dc4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	4413      	add	r3, r2
 8004994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499e:	2b80      	cmp	r3, #128	; 0x80
 80049a0:	d174      	bne.n	8004a8c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d121      	bne.n	80049ee <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	212c      	movs	r1, #44	; 0x2c
 80049b0:	fb01 f303 	mul.w	r3, r1, r3
 80049b4:	4413      	add	r3, r2
 80049b6:	3361      	adds	r3, #97	; 0x61
 80049b8:	2206      	movs	r2, #6
 80049ba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	0151      	lsls	r1, r2, #5
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	440a      	add	r2, r1
 80049d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049d6:	f043 0302 	orr.w	r3, r3, #2
 80049da:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	4611      	mov	r1, r2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f003 fce3 	bl	80083b2 <USB_HC_Halt>
 80049ec:	e044      	b.n	8004a78 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	212c      	movs	r1, #44	; 0x2c
 80049f4:	fb01 f303 	mul.w	r3, r1, r3
 80049f8:	4413      	add	r3, r2
 80049fa:	335c      	adds	r3, #92	; 0x5c
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	202c      	movs	r0, #44	; 0x2c
 8004a06:	fb00 f303 	mul.w	r3, r0, r3
 8004a0a:	440b      	add	r3, r1
 8004a0c:	335c      	adds	r3, #92	; 0x5c
 8004a0e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	212c      	movs	r1, #44	; 0x2c
 8004a16:	fb01 f303 	mul.w	r3, r1, r3
 8004a1a:	4413      	add	r3, r2
 8004a1c:	335c      	adds	r3, #92	; 0x5c
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d920      	bls.n	8004a66 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	212c      	movs	r1, #44	; 0x2c
 8004a2a:	fb01 f303 	mul.w	r3, r1, r3
 8004a2e:	4413      	add	r3, r2
 8004a30:	335c      	adds	r3, #92	; 0x5c
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	212c      	movs	r1, #44	; 0x2c
 8004a3c:	fb01 f303 	mul.w	r3, r1, r3
 8004a40:	4413      	add	r3, r2
 8004a42:	3360      	adds	r3, #96	; 0x60
 8004a44:	2204      	movs	r2, #4
 8004a46:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	b2d9      	uxtb	r1, r3
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	202c      	movs	r0, #44	; 0x2c
 8004a52:	fb00 f303 	mul.w	r3, r0, r3
 8004a56:	4413      	add	r3, r2
 8004a58:	3360      	adds	r3, #96	; 0x60
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f009 ff90 	bl	800e984 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004a64:	e008      	b.n	8004a78 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	212c      	movs	r1, #44	; 0x2c
 8004a6c:	fb01 f303 	mul.w	r3, r1, r3
 8004a70:	4413      	add	r3, r2
 8004a72:	3360      	adds	r3, #96	; 0x60
 8004a74:	2202      	movs	r2, #2
 8004a76:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a84:	461a      	mov	r2, r3
 8004a86:	2380      	movs	r3, #128	; 0x80
 8004a88:	6093      	str	r3, [r2, #8]
}
 8004a8a:	e19b      	b.n	8004dc4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa2:	d134      	bne.n	8004b0e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	0151      	lsls	r1, r2, #5
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	440a      	add	r2, r1
 8004aba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004abe:	f043 0302 	orr.w	r3, r3, #2
 8004ac2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	4611      	mov	r1, r2
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f003 fc6f 	bl	80083b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	2310      	movs	r3, #16
 8004ae4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af2:	461a      	mov	r2, r3
 8004af4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004af8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	212c      	movs	r1, #44	; 0x2c
 8004b00:	fb01 f303 	mul.w	r3, r1, r3
 8004b04:	4413      	add	r3, r2
 8004b06:	3361      	adds	r3, #97	; 0x61
 8004b08:	2208      	movs	r2, #8
 8004b0a:	701a      	strb	r2, [r3, #0]
}
 8004b0c:	e15a      	b.n	8004dc4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	f040 814f 	bne.w	8004dc4 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	0151      	lsls	r1, r2, #5
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	440a      	add	r2, r1
 8004b3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b40:	f023 0302 	bic.w	r3, r3, #2
 8004b44:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	212c      	movs	r1, #44	; 0x2c
 8004b4c:	fb01 f303 	mul.w	r3, r1, r3
 8004b50:	4413      	add	r3, r2
 8004b52:	3361      	adds	r3, #97	; 0x61
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d17d      	bne.n	8004c56 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	212c      	movs	r1, #44	; 0x2c
 8004b60:	fb01 f303 	mul.w	r3, r1, r3
 8004b64:	4413      	add	r3, r2
 8004b66:	3360      	adds	r3, #96	; 0x60
 8004b68:	2201      	movs	r2, #1
 8004b6a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	212c      	movs	r1, #44	; 0x2c
 8004b72:	fb01 f303 	mul.w	r3, r1, r3
 8004b76:	4413      	add	r3, r2
 8004b78:	333f      	adds	r3, #63	; 0x3f
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d00a      	beq.n	8004b96 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	212c      	movs	r1, #44	; 0x2c
 8004b86:	fb01 f303 	mul.w	r3, r1, r3
 8004b8a:	4413      	add	r3, r2
 8004b8c:	333f      	adds	r3, #63	; 0x3f
 8004b8e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	f040 8100 	bne.w	8004d96 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d113      	bne.n	8004bc6 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	212c      	movs	r1, #44	; 0x2c
 8004ba4:	fb01 f303 	mul.w	r3, r1, r3
 8004ba8:	4413      	add	r3, r2
 8004baa:	3355      	adds	r3, #85	; 0x55
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	f083 0301 	eor.w	r3, r3, #1
 8004bb2:	b2d8      	uxtb	r0, r3
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	212c      	movs	r1, #44	; 0x2c
 8004bba:	fb01 f303 	mul.w	r3, r1, r3
 8004bbe:	4413      	add	r3, r2
 8004bc0:	3355      	adds	r3, #85	; 0x55
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	f040 80e3 	bne.w	8004d96 <HCD_HC_OUT_IRQHandler+0x7cc>
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	212c      	movs	r1, #44	; 0x2c
 8004bd6:	fb01 f303 	mul.w	r3, r1, r3
 8004bda:	4413      	add	r3, r2
 8004bdc:	334c      	adds	r3, #76	; 0x4c
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 80d8 	beq.w	8004d96 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	212c      	movs	r1, #44	; 0x2c
 8004bec:	fb01 f303 	mul.w	r3, r1, r3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	334c      	adds	r3, #76	; 0x4c
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	202c      	movs	r0, #44	; 0x2c
 8004bfc:	fb00 f202 	mul.w	r2, r0, r2
 8004c00:	440a      	add	r2, r1
 8004c02:	3240      	adds	r2, #64	; 0x40
 8004c04:	8812      	ldrh	r2, [r2, #0]
 8004c06:	4413      	add	r3, r2
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	202c      	movs	r0, #44	; 0x2c
 8004c10:	fb00 f202 	mul.w	r2, r0, r2
 8004c14:	440a      	add	r2, r1
 8004c16:	3240      	adds	r2, #64	; 0x40
 8004c18:	8812      	ldrh	r2, [r2, #0]
 8004c1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 80b5 	beq.w	8004d96 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	212c      	movs	r1, #44	; 0x2c
 8004c32:	fb01 f303 	mul.w	r3, r1, r3
 8004c36:	4413      	add	r3, r2
 8004c38:	3355      	adds	r3, #85	; 0x55
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	f083 0301 	eor.w	r3, r3, #1
 8004c40:	b2d8      	uxtb	r0, r3
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	212c      	movs	r1, #44	; 0x2c
 8004c48:	fb01 f303 	mul.w	r3, r1, r3
 8004c4c:	4413      	add	r3, r2
 8004c4e:	3355      	adds	r3, #85	; 0x55
 8004c50:	4602      	mov	r2, r0
 8004c52:	701a      	strb	r2, [r3, #0]
 8004c54:	e09f      	b.n	8004d96 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	212c      	movs	r1, #44	; 0x2c
 8004c5c:	fb01 f303 	mul.w	r3, r1, r3
 8004c60:	4413      	add	r3, r2
 8004c62:	3361      	adds	r3, #97	; 0x61
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b03      	cmp	r3, #3
 8004c68:	d109      	bne.n	8004c7e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	212c      	movs	r1, #44	; 0x2c
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	4413      	add	r3, r2
 8004c76:	3360      	adds	r3, #96	; 0x60
 8004c78:	2202      	movs	r2, #2
 8004c7a:	701a      	strb	r2, [r3, #0]
 8004c7c:	e08b      	b.n	8004d96 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	212c      	movs	r1, #44	; 0x2c
 8004c84:	fb01 f303 	mul.w	r3, r1, r3
 8004c88:	4413      	add	r3, r2
 8004c8a:	3361      	adds	r3, #97	; 0x61
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d109      	bne.n	8004ca6 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	212c      	movs	r1, #44	; 0x2c
 8004c98:	fb01 f303 	mul.w	r3, r1, r3
 8004c9c:	4413      	add	r3, r2
 8004c9e:	3360      	adds	r3, #96	; 0x60
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	701a      	strb	r2, [r3, #0]
 8004ca4:	e077      	b.n	8004d96 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	212c      	movs	r1, #44	; 0x2c
 8004cac:	fb01 f303 	mul.w	r3, r1, r3
 8004cb0:	4413      	add	r3, r2
 8004cb2:	3361      	adds	r3, #97	; 0x61
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b05      	cmp	r3, #5
 8004cb8:	d109      	bne.n	8004cce <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	212c      	movs	r1, #44	; 0x2c
 8004cc0:	fb01 f303 	mul.w	r3, r1, r3
 8004cc4:	4413      	add	r3, r2
 8004cc6:	3360      	adds	r3, #96	; 0x60
 8004cc8:	2205      	movs	r2, #5
 8004cca:	701a      	strb	r2, [r3, #0]
 8004ccc:	e063      	b.n	8004d96 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	212c      	movs	r1, #44	; 0x2c
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	4413      	add	r3, r2
 8004cda:	3361      	adds	r3, #97	; 0x61
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b06      	cmp	r3, #6
 8004ce0:	d009      	beq.n	8004cf6 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	212c      	movs	r1, #44	; 0x2c
 8004ce8:	fb01 f303 	mul.w	r3, r1, r3
 8004cec:	4413      	add	r3, r2
 8004cee:	3361      	adds	r3, #97	; 0x61
 8004cf0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004cf2:	2b08      	cmp	r3, #8
 8004cf4:	d14f      	bne.n	8004d96 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	212c      	movs	r1, #44	; 0x2c
 8004cfc:	fb01 f303 	mul.w	r3, r1, r3
 8004d00:	4413      	add	r3, r2
 8004d02:	335c      	adds	r3, #92	; 0x5c
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	202c      	movs	r0, #44	; 0x2c
 8004d0e:	fb00 f303 	mul.w	r3, r0, r3
 8004d12:	440b      	add	r3, r1
 8004d14:	335c      	adds	r3, #92	; 0x5c
 8004d16:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	212c      	movs	r1, #44	; 0x2c
 8004d1e:	fb01 f303 	mul.w	r3, r1, r3
 8004d22:	4413      	add	r3, r2
 8004d24:	335c      	adds	r3, #92	; 0x5c
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d912      	bls.n	8004d52 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	212c      	movs	r1, #44	; 0x2c
 8004d32:	fb01 f303 	mul.w	r3, r1, r3
 8004d36:	4413      	add	r3, r2
 8004d38:	335c      	adds	r3, #92	; 0x5c
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	212c      	movs	r1, #44	; 0x2c
 8004d44:	fb01 f303 	mul.w	r3, r1, r3
 8004d48:	4413      	add	r3, r2
 8004d4a:	3360      	adds	r3, #96	; 0x60
 8004d4c:	2204      	movs	r2, #4
 8004d4e:	701a      	strb	r2, [r3, #0]
 8004d50:	e021      	b.n	8004d96 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	212c      	movs	r1, #44	; 0x2c
 8004d58:	fb01 f303 	mul.w	r3, r1, r3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3360      	adds	r3, #96	; 0x60
 8004d60:	2202      	movs	r2, #2
 8004d62:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d7a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d82:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d90:	461a      	mov	r2, r3
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da2:	461a      	mov	r2, r3
 8004da4:	2302      	movs	r3, #2
 8004da6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	b2d9      	uxtb	r1, r3
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	202c      	movs	r0, #44	; 0x2c
 8004db2:	fb00 f303 	mul.w	r3, r0, r3
 8004db6:	4413      	add	r3, r2
 8004db8:	3360      	adds	r3, #96	; 0x60
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f009 fde0 	bl	800e984 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004dc4:	bf00      	nop
 8004dc6:	3720      	adds	r7, #32
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08a      	sub	sp, #40	; 0x28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	f003 030f 	and.w	r3, r3, #15
 8004dec:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	0c5b      	lsrs	r3, r3, #17
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	091b      	lsrs	r3, r3, #4
 8004dfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e00:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d004      	beq.n	8004e12 <HCD_RXQLVL_IRQHandler+0x46>
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2b05      	cmp	r3, #5
 8004e0c:	f000 80a9 	beq.w	8004f62 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004e10:	e0aa      	b.n	8004f68 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 80a6 	beq.w	8004f66 <HCD_RXQLVL_IRQHandler+0x19a>
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	212c      	movs	r1, #44	; 0x2c
 8004e20:	fb01 f303 	mul.w	r3, r1, r3
 8004e24:	4413      	add	r3, r2
 8004e26:	3344      	adds	r3, #68	; 0x44
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 809b 	beq.w	8004f66 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	212c      	movs	r1, #44	; 0x2c
 8004e36:	fb01 f303 	mul.w	r3, r1, r3
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3350      	adds	r3, #80	; 0x50
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	441a      	add	r2, r3
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	202c      	movs	r0, #44	; 0x2c
 8004e4a:	fb00 f303 	mul.w	r3, r0, r3
 8004e4e:	440b      	add	r3, r1
 8004e50:	334c      	adds	r3, #76	; 0x4c
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d87a      	bhi.n	8004f4e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6818      	ldr	r0, [r3, #0]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	212c      	movs	r1, #44	; 0x2c
 8004e62:	fb01 f303 	mul.w	r3, r1, r3
 8004e66:	4413      	add	r3, r2
 8004e68:	3344      	adds	r3, #68	; 0x44
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	b292      	uxth	r2, r2
 8004e70:	4619      	mov	r1, r3
 8004e72:	f002 fe17 	bl	8007aa4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	212c      	movs	r1, #44	; 0x2c
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	4413      	add	r3, r2
 8004e82:	3344      	adds	r3, #68	; 0x44
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	441a      	add	r2, r3
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	202c      	movs	r0, #44	; 0x2c
 8004e90:	fb00 f303 	mul.w	r3, r0, r3
 8004e94:	440b      	add	r3, r1
 8004e96:	3344      	adds	r3, #68	; 0x44
 8004e98:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	212c      	movs	r1, #44	; 0x2c
 8004ea0:	fb01 f303 	mul.w	r3, r1, r3
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3350      	adds	r3, #80	; 0x50
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	441a      	add	r2, r3
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	202c      	movs	r0, #44	; 0x2c
 8004eb4:	fb00 f303 	mul.w	r3, r0, r3
 8004eb8:	440b      	add	r3, r1
 8004eba:	3350      	adds	r3, #80	; 0x50
 8004ebc:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	0cdb      	lsrs	r3, r3, #19
 8004ece:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ed2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	212c      	movs	r1, #44	; 0x2c
 8004eda:	fb01 f303 	mul.w	r3, r1, r3
 8004ede:	4413      	add	r3, r2
 8004ee0:	3340      	adds	r3, #64	; 0x40
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d13c      	bne.n	8004f66 <HCD_RXQLVL_IRQHandler+0x19a>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d039      	beq.n	8004f66 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f08:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f10:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f1e:	461a      	mov	r2, r3
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	212c      	movs	r1, #44	; 0x2c
 8004f2a:	fb01 f303 	mul.w	r3, r1, r3
 8004f2e:	4413      	add	r3, r2
 8004f30:	3354      	adds	r3, #84	; 0x54
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	f083 0301 	eor.w	r3, r3, #1
 8004f38:	b2d8      	uxtb	r0, r3
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	212c      	movs	r1, #44	; 0x2c
 8004f40:	fb01 f303 	mul.w	r3, r1, r3
 8004f44:	4413      	add	r3, r2
 8004f46:	3354      	adds	r3, #84	; 0x54
 8004f48:	4602      	mov	r2, r0
 8004f4a:	701a      	strb	r2, [r3, #0]
      break;
 8004f4c:	e00b      	b.n	8004f66 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	212c      	movs	r1, #44	; 0x2c
 8004f54:	fb01 f303 	mul.w	r3, r1, r3
 8004f58:	4413      	add	r3, r2
 8004f5a:	3360      	adds	r3, #96	; 0x60
 8004f5c:	2204      	movs	r2, #4
 8004f5e:	701a      	strb	r2, [r3, #0]
      break;
 8004f60:	e001      	b.n	8004f66 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004f62:	bf00      	nop
 8004f64:	e000      	b.n	8004f68 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004f66:	bf00      	nop
  }
}
 8004f68:	bf00      	nop
 8004f6a:	3728      	adds	r7, #40	; 0x28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004f9c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d10b      	bne.n	8004fc0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d102      	bne.n	8004fb8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f009 fcca 	bl	800e94c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f043 0302 	orr.w	r3, r3, #2
 8004fbe:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f003 0308 	and.w	r3, r3, #8
 8004fc6:	2b08      	cmp	r3, #8
 8004fc8:	d132      	bne.n	8005030 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f043 0308 	orr.w	r3, r3, #8
 8004fd0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b04      	cmp	r3, #4
 8004fda:	d126      	bne.n	800502a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d113      	bne.n	800500c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004fea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fee:	d106      	bne.n	8004ffe <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2102      	movs	r1, #2
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f002 feb4 	bl	8007d64 <USB_InitFSLSPClkSel>
 8004ffc:	e011      	b.n	8005022 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2101      	movs	r1, #1
 8005004:	4618      	mov	r0, r3
 8005006:	f002 fead 	bl	8007d64 <USB_InitFSLSPClkSel>
 800500a:	e00a      	b.n	8005022 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d106      	bne.n	8005022 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800501a:	461a      	mov	r2, r3
 800501c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005020:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f009 fcbc 	bl	800e9a0 <HAL_HCD_PortEnabled_Callback>
 8005028:	e002      	b.n	8005030 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f009 fcc6 	bl	800e9bc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	2b20      	cmp	r3, #32
 8005038:	d103      	bne.n	8005042 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f043 0320 	orr.w	r3, r3, #32
 8005040:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005048:	461a      	mov	r2, r3
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	6013      	str	r3, [r2, #0]
}
 800504e:	bf00      	nop
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e12b      	b.n	80052c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d106      	bne.n	8005084 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7fb fed2 	bl	8000e28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2224      	movs	r2, #36	; 0x24
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0201 	bic.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050bc:	f001 ff22 	bl	8006f04 <HAL_RCC_GetPCLK1Freq>
 80050c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	4a81      	ldr	r2, [pc, #516]	; (80052cc <HAL_I2C_Init+0x274>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d807      	bhi.n	80050dc <HAL_I2C_Init+0x84>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4a80      	ldr	r2, [pc, #512]	; (80052d0 <HAL_I2C_Init+0x278>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	bf94      	ite	ls
 80050d4:	2301      	movls	r3, #1
 80050d6:	2300      	movhi	r3, #0
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	e006      	b.n	80050ea <HAL_I2C_Init+0x92>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4a7d      	ldr	r2, [pc, #500]	; (80052d4 <HAL_I2C_Init+0x27c>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	bf94      	ite	ls
 80050e4:	2301      	movls	r3, #1
 80050e6:	2300      	movhi	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e0e7      	b.n	80052c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4a78      	ldr	r2, [pc, #480]	; (80052d8 <HAL_I2C_Init+0x280>)
 80050f6:	fba2 2303 	umull	r2, r3, r2, r3
 80050fa:	0c9b      	lsrs	r3, r3, #18
 80050fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	430a      	orrs	r2, r1
 8005110:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	4a6a      	ldr	r2, [pc, #424]	; (80052cc <HAL_I2C_Init+0x274>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d802      	bhi.n	800512c <HAL_I2C_Init+0xd4>
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	3301      	adds	r3, #1
 800512a:	e009      	b.n	8005140 <HAL_I2C_Init+0xe8>
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005132:	fb02 f303 	mul.w	r3, r2, r3
 8005136:	4a69      	ldr	r2, [pc, #420]	; (80052dc <HAL_I2C_Init+0x284>)
 8005138:	fba2 2303 	umull	r2, r3, r2, r3
 800513c:	099b      	lsrs	r3, r3, #6
 800513e:	3301      	adds	r3, #1
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6812      	ldr	r2, [r2, #0]
 8005144:	430b      	orrs	r3, r1
 8005146:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005152:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	495c      	ldr	r1, [pc, #368]	; (80052cc <HAL_I2C_Init+0x274>)
 800515c:	428b      	cmp	r3, r1
 800515e:	d819      	bhi.n	8005194 <HAL_I2C_Init+0x13c>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	1e59      	subs	r1, r3, #1
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	fbb1 f3f3 	udiv	r3, r1, r3
 800516e:	1c59      	adds	r1, r3, #1
 8005170:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005174:	400b      	ands	r3, r1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <HAL_I2C_Init+0x138>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	1e59      	subs	r1, r3, #1
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	fbb1 f3f3 	udiv	r3, r1, r3
 8005188:	3301      	adds	r3, #1
 800518a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800518e:	e051      	b.n	8005234 <HAL_I2C_Init+0x1dc>
 8005190:	2304      	movs	r3, #4
 8005192:	e04f      	b.n	8005234 <HAL_I2C_Init+0x1dc>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d111      	bne.n	80051c0 <HAL_I2C_Init+0x168>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	1e58      	subs	r0, r3, #1
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6859      	ldr	r1, [r3, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	440b      	add	r3, r1
 80051aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ae:	3301      	adds	r3, #1
 80051b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	bf0c      	ite	eq
 80051b8:	2301      	moveq	r3, #1
 80051ba:	2300      	movne	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	e012      	b.n	80051e6 <HAL_I2C_Init+0x18e>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	1e58      	subs	r0, r3, #1
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6859      	ldr	r1, [r3, #4]
 80051c8:	460b      	mov	r3, r1
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	440b      	add	r3, r1
 80051ce:	0099      	lsls	r1, r3, #2
 80051d0:	440b      	add	r3, r1
 80051d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80051d6:	3301      	adds	r3, #1
 80051d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051dc:	2b00      	cmp	r3, #0
 80051de:	bf0c      	ite	eq
 80051e0:	2301      	moveq	r3, #1
 80051e2:	2300      	movne	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <HAL_I2C_Init+0x196>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e022      	b.n	8005234 <HAL_I2C_Init+0x1dc>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10e      	bne.n	8005214 <HAL_I2C_Init+0x1bc>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	1e58      	subs	r0, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6859      	ldr	r1, [r3, #4]
 80051fe:	460b      	mov	r3, r1
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	440b      	add	r3, r1
 8005204:	fbb0 f3f3 	udiv	r3, r0, r3
 8005208:	3301      	adds	r3, #1
 800520a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800520e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005212:	e00f      	b.n	8005234 <HAL_I2C_Init+0x1dc>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	1e58      	subs	r0, r3, #1
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6859      	ldr	r1, [r3, #4]
 800521c:	460b      	mov	r3, r1
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	440b      	add	r3, r1
 8005222:	0099      	lsls	r1, r3, #2
 8005224:	440b      	add	r3, r1
 8005226:	fbb0 f3f3 	udiv	r3, r0, r3
 800522a:	3301      	adds	r3, #1
 800522c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005230:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005234:	6879      	ldr	r1, [r7, #4]
 8005236:	6809      	ldr	r1, [r1, #0]
 8005238:	4313      	orrs	r3, r2
 800523a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69da      	ldr	r2, [r3, #28]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005262:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6911      	ldr	r1, [r2, #16]
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	68d2      	ldr	r2, [r2, #12]
 800526e:	4311      	orrs	r1, r2
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	430b      	orrs	r3, r1
 8005276:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	695a      	ldr	r2, [r3, #20]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	000186a0 	.word	0x000186a0
 80052d0:	001e847f 	.word	0x001e847f
 80052d4:	003d08ff 	.word	0x003d08ff
 80052d8:	431bde83 	.word	0x431bde83
 80052dc:	10624dd3 	.word	0x10624dd3

080052e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b088      	sub	sp, #32
 80052e4:	af02      	add	r7, sp, #8
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	607a      	str	r2, [r7, #4]
 80052ea:	461a      	mov	r2, r3
 80052ec:	460b      	mov	r3, r1
 80052ee:	817b      	strh	r3, [r7, #10]
 80052f0:	4613      	mov	r3, r2
 80052f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052f4:	f7fc f99a 	bl	800162c <HAL_GetTick>
 80052f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b20      	cmp	r3, #32
 8005304:	f040 80e0 	bne.w	80054c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	2319      	movs	r3, #25
 800530e:	2201      	movs	r2, #1
 8005310:	4970      	ldr	r1, [pc, #448]	; (80054d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 f964 	bl	80055e0 <I2C_WaitOnFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800531e:	2302      	movs	r3, #2
 8005320:	e0d3      	b.n	80054ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005328:	2b01      	cmp	r3, #1
 800532a:	d101      	bne.n	8005330 <HAL_I2C_Master_Transmit+0x50>
 800532c:	2302      	movs	r3, #2
 800532e:	e0cc      	b.n	80054ca <HAL_I2C_Master_Transmit+0x1ea>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b01      	cmp	r3, #1
 8005344:	d007      	beq.n	8005356 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f042 0201 	orr.w	r2, r2, #1
 8005354:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005364:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2221      	movs	r2, #33	; 0x21
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2210      	movs	r2, #16
 8005372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	893a      	ldrh	r2, [r7, #8]
 8005386:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4a50      	ldr	r2, [pc, #320]	; (80054d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8005396:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005398:	8979      	ldrh	r1, [r7, #10]
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	6a3a      	ldr	r2, [r7, #32]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 f89c 	bl	80054dc <I2C_MasterRequestWrite>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e08d      	b.n	80054ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ae:	2300      	movs	r3, #0
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	613b      	str	r3, [r7, #16]
 80053c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80053c4:	e066      	b.n	8005494 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	6a39      	ldr	r1, [r7, #32]
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 f9de 	bl	800578c <I2C_WaitOnTXEFlagUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00d      	beq.n	80053f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d107      	bne.n	80053ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e06b      	b.n	80054ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	781a      	ldrb	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541a:	3b01      	subs	r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b04      	cmp	r3, #4
 800542e:	d11b      	bne.n	8005468 <HAL_I2C_Master_Transmit+0x188>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005434:	2b00      	cmp	r3, #0
 8005436:	d017      	beq.n	8005468 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	781a      	ldrb	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005452:	b29b      	uxth	r3, r3
 8005454:	3b01      	subs	r3, #1
 8005456:	b29a      	uxth	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005460:	3b01      	subs	r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	6a39      	ldr	r1, [r7, #32]
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 f9ce 	bl	800580e <I2C_WaitOnBTFFlagUntilTimeout>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00d      	beq.n	8005494 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	2b04      	cmp	r3, #4
 800547e:	d107      	bne.n	8005490 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800548e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e01a      	b.n	80054ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005498:	2b00      	cmp	r3, #0
 800549a:	d194      	bne.n	80053c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	e000      	b.n	80054ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80054c8:	2302      	movs	r3, #2
  }
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	00100002 	.word	0x00100002
 80054d8:	ffff0000 	.word	0xffff0000

080054dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af02      	add	r7, sp, #8
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	607a      	str	r2, [r7, #4]
 80054e6:	603b      	str	r3, [r7, #0]
 80054e8:	460b      	mov	r3, r1
 80054ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	d006      	beq.n	8005506 <I2C_MasterRequestWrite+0x2a>
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d003      	beq.n	8005506 <I2C_MasterRequestWrite+0x2a>
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005504:	d108      	bne.n	8005518 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	e00b      	b.n	8005530 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	2b12      	cmp	r3, #18
 800551e:	d107      	bne.n	8005530 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800552e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 f84f 	bl	80055e0 <I2C_WaitOnFlagUntilTimeout>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00d      	beq.n	8005564 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005556:	d103      	bne.n	8005560 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800555e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e035      	b.n	80055d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800556c:	d108      	bne.n	8005580 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800556e:	897b      	ldrh	r3, [r7, #10]
 8005570:	b2db      	uxtb	r3, r3
 8005572:	461a      	mov	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800557c:	611a      	str	r2, [r3, #16]
 800557e:	e01b      	b.n	80055b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005580:	897b      	ldrh	r3, [r7, #10]
 8005582:	11db      	asrs	r3, r3, #7
 8005584:	b2db      	uxtb	r3, r3
 8005586:	f003 0306 	and.w	r3, r3, #6
 800558a:	b2db      	uxtb	r3, r3
 800558c:	f063 030f 	orn	r3, r3, #15
 8005590:	b2da      	uxtb	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	490e      	ldr	r1, [pc, #56]	; (80055d8 <I2C_MasterRequestWrite+0xfc>)
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 f875 	bl	800568e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e010      	b.n	80055d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80055ae:	897b      	ldrh	r3, [r7, #10]
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	4907      	ldr	r1, [pc, #28]	; (80055dc <I2C_MasterRequestWrite+0x100>)
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 f865 	bl	800568e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e000      	b.n	80055d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	00010008 	.word	0x00010008
 80055dc:	00010002 	.word	0x00010002

080055e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	603b      	str	r3, [r7, #0]
 80055ec:	4613      	mov	r3, r2
 80055ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055f0:	e025      	b.n	800563e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f8:	d021      	beq.n	800563e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055fa:	f7fc f817 	bl	800162c <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	429a      	cmp	r2, r3
 8005608:	d302      	bcc.n	8005610 <I2C_WaitOnFlagUntilTimeout+0x30>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d116      	bne.n	800563e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2220      	movs	r2, #32
 800561a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	f043 0220 	orr.w	r2, r3, #32
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e023      	b.n	8005686 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	0c1b      	lsrs	r3, r3, #16
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b01      	cmp	r3, #1
 8005646:	d10d      	bne.n	8005664 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	43da      	mvns	r2, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	4013      	ands	r3, r2
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	bf0c      	ite	eq
 800565a:	2301      	moveq	r3, #1
 800565c:	2300      	movne	r3, #0
 800565e:	b2db      	uxtb	r3, r3
 8005660:	461a      	mov	r2, r3
 8005662:	e00c      	b.n	800567e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	43da      	mvns	r2, r3
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4013      	ands	r3, r2
 8005670:	b29b      	uxth	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	bf0c      	ite	eq
 8005676:	2301      	moveq	r3, #1
 8005678:	2300      	movne	r3, #0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	461a      	mov	r2, r3
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	429a      	cmp	r2, r3
 8005682:	d0b6      	beq.n	80055f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b084      	sub	sp, #16
 8005692:	af00      	add	r7, sp, #0
 8005694:	60f8      	str	r0, [r7, #12]
 8005696:	60b9      	str	r1, [r7, #8]
 8005698:	607a      	str	r2, [r7, #4]
 800569a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800569c:	e051      	b.n	8005742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ac:	d123      	bne.n	80056f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	f043 0204 	orr.w	r2, r3, #4
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e046      	b.n	8005784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fc:	d021      	beq.n	8005742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056fe:	f7fb ff95 	bl	800162c <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	429a      	cmp	r2, r3
 800570c:	d302      	bcc.n	8005714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d116      	bne.n	8005742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2220      	movs	r2, #32
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	f043 0220 	orr.w	r2, r3, #32
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e020      	b.n	8005784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	0c1b      	lsrs	r3, r3, #16
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b01      	cmp	r3, #1
 800574a:	d10c      	bne.n	8005766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	43da      	mvns	r2, r3
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4013      	ands	r3, r2
 8005758:	b29b      	uxth	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	bf14      	ite	ne
 800575e:	2301      	movne	r3, #1
 8005760:	2300      	moveq	r3, #0
 8005762:	b2db      	uxtb	r3, r3
 8005764:	e00b      	b.n	800577e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	43da      	mvns	r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	4013      	ands	r3, r2
 8005772:	b29b      	uxth	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	bf14      	ite	ne
 8005778:	2301      	movne	r3, #1
 800577a:	2300      	moveq	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d18d      	bne.n	800569e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005798:	e02d      	b.n	80057f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 f878 	bl	8005890 <I2C_IsAcknowledgeFailed>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e02d      	b.n	8005806 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b0:	d021      	beq.n	80057f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b2:	f7fb ff3b 	bl	800162c <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d302      	bcc.n	80057c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d116      	bne.n	80057f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	f043 0220 	orr.w	r2, r3, #32
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e007      	b.n	8005806 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005800:	2b80      	cmp	r3, #128	; 0x80
 8005802:	d1ca      	bne.n	800579a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	60f8      	str	r0, [r7, #12]
 8005816:	60b9      	str	r1, [r7, #8]
 8005818:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800581a:	e02d      	b.n	8005878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 f837 	bl	8005890 <I2C_IsAcknowledgeFailed>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e02d      	b.n	8005888 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005832:	d021      	beq.n	8005878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005834:	f7fb fefa 	bl	800162c <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	429a      	cmp	r2, r3
 8005842:	d302      	bcc.n	800584a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d116      	bne.n	8005878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	f043 0220 	orr.w	r2, r3, #32
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e007      	b.n	8005888 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	2b04      	cmp	r3, #4
 8005884:	d1ca      	bne.n	800581c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a6:	d11b      	bne.n	80058e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058cc:	f043 0204 	orr.w	r2, r3, #4
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e000      	b.n	80058e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
	...

080058f0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b088      	sub	sp, #32
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e128      	b.n	8005b54 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d109      	bne.n	8005922 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a90      	ldr	r2, [pc, #576]	; (8005b5c <HAL_I2S_Init+0x26c>)
 800591a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7fb fb01 	bl	8000f24 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2202      	movs	r2, #2
 8005926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6812      	ldr	r2, [r2, #0]
 8005934:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005938:	f023 030f 	bic.w	r3, r3, #15
 800593c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2202      	movs	r2, #2
 8005944:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d060      	beq.n	8005a10 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d102      	bne.n	800595c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005956:	2310      	movs	r3, #16
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	e001      	b.n	8005960 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800595c:	2320      	movs	r3, #32
 800595e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	2b20      	cmp	r3, #32
 8005966:	d802      	bhi.n	800596e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800596e:	2001      	movs	r0, #1
 8005970:	f001 fbd2 	bl	8007118 <HAL_RCCEx_GetPeriphCLKFreq>
 8005974:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800597e:	d125      	bne.n	80059cc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d010      	beq.n	80059aa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	461a      	mov	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a4:	3305      	adds	r3, #5
 80059a6:	613b      	str	r3, [r7, #16]
 80059a8:	e01f      	b.n	80059ea <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80059b4:	4613      	mov	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	461a      	mov	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c6:	3305      	adds	r3, #5
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	e00e      	b.n	80059ea <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80059d4:	4613      	mov	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	005b      	lsls	r3, r3, #1
 80059dc:	461a      	mov	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e6:	3305      	adds	r3, #5
 80059e8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	4a5c      	ldr	r2, [pc, #368]	; (8005b60 <HAL_I2S_Init+0x270>)
 80059ee:	fba2 2303 	umull	r2, r3, r2, r3
 80059f2:	08db      	lsrs	r3, r3, #3
 80059f4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	085b      	lsrs	r3, r3, #1
 8005a06:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	021b      	lsls	r3, r3, #8
 8005a0c:	61bb      	str	r3, [r7, #24]
 8005a0e:	e003      	b.n	8005a18 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005a10:	2302      	movs	r3, #2
 8005a12:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d902      	bls.n	8005a24 <HAL_I2S_Init+0x134>
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	2bff      	cmp	r3, #255	; 0xff
 8005a22:	d907      	bls.n	8005a34 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a28:	f043 0210 	orr.w	r2, r3, #16
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e08f      	b.n	8005b54 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691a      	ldr	r2, [r3, #16]
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	ea42 0103 	orr.w	r1, r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005a52:	f023 030f 	bic.w	r3, r3, #15
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6851      	ldr	r1, [r2, #4]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	6892      	ldr	r2, [r2, #8]
 8005a5e:	4311      	orrs	r1, r2
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	68d2      	ldr	r2, [r2, #12]
 8005a64:	4311      	orrs	r1, r2
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	6992      	ldr	r2, [r2, #24]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a76:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d161      	bne.n	8005b44 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a38      	ldr	r2, [pc, #224]	; (8005b64 <HAL_I2S_Init+0x274>)
 8005a84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a37      	ldr	r2, [pc, #220]	; (8005b68 <HAL_I2S_Init+0x278>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d101      	bne.n	8005a94 <HAL_I2S_Init+0x1a4>
 8005a90:	4b36      	ldr	r3, [pc, #216]	; (8005b6c <HAL_I2S_Init+0x27c>)
 8005a92:	e001      	b.n	8005a98 <HAL_I2S_Init+0x1a8>
 8005a94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	6812      	ldr	r2, [r2, #0]
 8005a9e:	4932      	ldr	r1, [pc, #200]	; (8005b68 <HAL_I2S_Init+0x278>)
 8005aa0:	428a      	cmp	r2, r1
 8005aa2:	d101      	bne.n	8005aa8 <HAL_I2S_Init+0x1b8>
 8005aa4:	4a31      	ldr	r2, [pc, #196]	; (8005b6c <HAL_I2S_Init+0x27c>)
 8005aa6:	e001      	b.n	8005aac <HAL_I2S_Init+0x1bc>
 8005aa8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005aac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005ab0:	f023 030f 	bic.w	r3, r3, #15
 8005ab4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a2b      	ldr	r2, [pc, #172]	; (8005b68 <HAL_I2S_Init+0x278>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d101      	bne.n	8005ac4 <HAL_I2S_Init+0x1d4>
 8005ac0:	4b2a      	ldr	r3, [pc, #168]	; (8005b6c <HAL_I2S_Init+0x27c>)
 8005ac2:	e001      	b.n	8005ac8 <HAL_I2S_Init+0x1d8>
 8005ac4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ac8:	2202      	movs	r2, #2
 8005aca:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a25      	ldr	r2, [pc, #148]	; (8005b68 <HAL_I2S_Init+0x278>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d101      	bne.n	8005ada <HAL_I2S_Init+0x1ea>
 8005ad6:	4b25      	ldr	r3, [pc, #148]	; (8005b6c <HAL_I2S_Init+0x27c>)
 8005ad8:	e001      	b.n	8005ade <HAL_I2S_Init+0x1ee>
 8005ada:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aea:	d003      	beq.n	8005af4 <HAL_I2S_Init+0x204>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d103      	bne.n	8005afc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005af8:	613b      	str	r3, [r7, #16]
 8005afa:	e001      	b.n	8005b00 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005afc:	2300      	movs	r3, #0
 8005afe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b14:	4313      	orrs	r3, r2
 8005b16:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	897b      	ldrh	r3, [r7, #10]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b2c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a0d      	ldr	r2, [pc, #52]	; (8005b68 <HAL_I2S_Init+0x278>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d101      	bne.n	8005b3c <HAL_I2S_Init+0x24c>
 8005b38:	4b0c      	ldr	r3, [pc, #48]	; (8005b6c <HAL_I2S_Init+0x27c>)
 8005b3a:	e001      	b.n	8005b40 <HAL_I2S_Init+0x250>
 8005b3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b40:	897a      	ldrh	r2, [r7, #10]
 8005b42:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3720      	adds	r7, #32
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	08006033 	.word	0x08006033
 8005b60:	cccccccd 	.word	0xcccccccd
 8005b64:	080061b9 	.word	0x080061b9
 8005b68:	40003800 	.word	0x40003800
 8005b6c:	40003400 	.word	0x40003400

08005b70 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b088      	sub	sp, #32
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b84:	d004      	beq.n	8005b90 <HAL_I2S_DMAStop+0x20>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f040 80d1 	bne.w	8005d32 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00f      	beq.n	8005bb8 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fb ff35 	bl	8001a0c <HAL_DMA_Abort>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d007      	beq.n	8005bb8 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bac:	f043 0208 	orr.w	r2, r3, #8
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005bb8:	2364      	movs	r3, #100	; 0x64
 8005bba:	2201      	movs	r2, #1
 8005bbc:	2102      	movs	r1, #2
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fac1 	bl	8006146 <I2S_WaitFlagStateUntilTimeout>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00b      	beq.n	8005be2 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bce:	f043 0201 	orr.w	r2, r3, #1
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005be2:	2364      	movs	r3, #100	; 0x64
 8005be4:	2200      	movs	r2, #0
 8005be6:	2180      	movs	r1, #128	; 0x80
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 faac 	bl	8006146 <I2S_WaitFlagStateUntilTimeout>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00b      	beq.n	8005c0c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf8:	f043 0201 	orr.w	r2, r3, #1
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	69da      	ldr	r2, [r3, #28]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c1a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	617b      	str	r3, [r7, #20]
 8005c28:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0202 	bic.w	r2, r2, #2
 8005c38:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b05      	cmp	r3, #5
 8005c44:	f040 8165 	bne.w	8005f12 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00f      	beq.n	8005c70 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fb fed9 	bl	8001a0c <HAL_DMA_Abort>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d007      	beq.n	8005c70 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c64:	f043 0208 	orr.w	r2, r3, #8
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a8a      	ldr	r2, [pc, #552]	; (8005ea0 <HAL_I2S_DMAStop+0x330>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d101      	bne.n	8005c7e <HAL_I2S_DMAStop+0x10e>
 8005c7a:	4b8a      	ldr	r3, [pc, #552]	; (8005ea4 <HAL_I2S_DMAStop+0x334>)
 8005c7c:	e001      	b.n	8005c82 <HAL_I2S_DMAStop+0x112>
 8005c7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c82:	69da      	ldr	r2, [r3, #28]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4985      	ldr	r1, [pc, #532]	; (8005ea0 <HAL_I2S_DMAStop+0x330>)
 8005c8a:	428b      	cmp	r3, r1
 8005c8c:	d101      	bne.n	8005c92 <HAL_I2S_DMAStop+0x122>
 8005c8e:	4b85      	ldr	r3, [pc, #532]	; (8005ea4 <HAL_I2S_DMAStop+0x334>)
 8005c90:	e001      	b.n	8005c96 <HAL_I2S_DMAStop+0x126>
 8005c92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c9a:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	613b      	str	r3, [r7, #16]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a7e      	ldr	r2, [pc, #504]	; (8005ea0 <HAL_I2S_DMAStop+0x330>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d101      	bne.n	8005cae <HAL_I2S_DMAStop+0x13e>
 8005caa:	4b7e      	ldr	r3, [pc, #504]	; (8005ea4 <HAL_I2S_DMAStop+0x334>)
 8005cac:	e001      	b.n	8005cb2 <HAL_I2S_DMAStop+0x142>
 8005cae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	613b      	str	r3, [r7, #16]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a79      	ldr	r2, [pc, #484]	; (8005ea0 <HAL_I2S_DMAStop+0x330>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d101      	bne.n	8005cc4 <HAL_I2S_DMAStop+0x154>
 8005cc0:	4b78      	ldr	r3, [pc, #480]	; (8005ea4 <HAL_I2S_DMAStop+0x334>)
 8005cc2:	e001      	b.n	8005cc8 <HAL_I2S_DMAStop+0x158>
 8005cc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	613b      	str	r3, [r7, #16]
 8005ccc:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a73      	ldr	r2, [pc, #460]	; (8005ea0 <HAL_I2S_DMAStop+0x330>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d101      	bne.n	8005cdc <HAL_I2S_DMAStop+0x16c>
 8005cd8:	4b72      	ldr	r3, [pc, #456]	; (8005ea4 <HAL_I2S_DMAStop+0x334>)
 8005cda:	e001      	b.n	8005ce0 <HAL_I2S_DMAStop+0x170>
 8005cdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	496e      	ldr	r1, [pc, #440]	; (8005ea0 <HAL_I2S_DMAStop+0x330>)
 8005ce8:	428b      	cmp	r3, r1
 8005cea:	d101      	bne.n	8005cf0 <HAL_I2S_DMAStop+0x180>
 8005cec:	4b6d      	ldr	r3, [pc, #436]	; (8005ea4 <HAL_I2S_DMAStop+0x334>)
 8005cee:	e001      	b.n	8005cf4 <HAL_I2S_DMAStop+0x184>
 8005cf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cf4:	f022 0201 	bic.w	r2, r2, #1
 8005cf8:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10c      	bne.n	8005d1c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005d1a:	e0fa      	b.n	8005f12 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a5f      	ldr	r2, [pc, #380]	; (8005ea0 <HAL_I2S_DMAStop+0x330>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d101      	bne.n	8005d2a <HAL_I2S_DMAStop+0x1ba>
 8005d26:	4b5f      	ldr	r3, [pc, #380]	; (8005ea4 <HAL_I2S_DMAStop+0x334>)
 8005d28:	e001      	b.n	8005d2e <HAL_I2S_DMAStop+0x1be>
 8005d2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d2e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005d30:	e0ef      	b.n	8005f12 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d3a:	d005      	beq.n	8005d48 <HAL_I2S_DMAStop+0x1d8>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d44:	f040 80e5 	bne.w	8005f12 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00f      	beq.n	8005d70 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fb fe59 	bl	8001a0c <HAL_DMA_Abort>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d007      	beq.n	8005d70 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d64:	f043 0208 	orr.w	r2, r3, #8
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b05      	cmp	r3, #5
 8005d7a:	f040 809a 	bne.w	8005eb2 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00f      	beq.n	8005da6 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fb fe3e 	bl	8001a0c <HAL_DMA_Abort>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d007      	beq.n	8005da6 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9a:	f043 0208 	orr.w	r2, r3, #8
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8005da6:	f7fb fc41 	bl	800162c <HAL_GetTick>
 8005daa:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005dac:	e012      	b.n	8005dd4 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005dae:	f7fb fc3d 	bl	800162c <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b64      	cmp	r3, #100	; 0x64
 8005dba:	d90b      	bls.n	8005dd4 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc0:	f043 0201 	orr.w	r2, r3, #1
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a31      	ldr	r2, [pc, #196]	; (8005ea0 <HAL_I2S_DMAStop+0x330>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d101      	bne.n	8005de2 <HAL_I2S_DMAStop+0x272>
 8005dde:	4b31      	ldr	r3, [pc, #196]	; (8005ea4 <HAL_I2S_DMAStop+0x334>)
 8005de0:	e001      	b.n	8005de6 <HAL_I2S_DMAStop+0x276>
 8005de2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d1de      	bne.n	8005dae <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005df0:	e012      	b.n	8005e18 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005df2:	f7fb fc1b 	bl	800162c <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b64      	cmp	r3, #100	; 0x64
 8005dfe:	d90b      	bls.n	8005e18 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e04:	f043 0201 	orr.w	r2, r3, #1
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a20      	ldr	r2, [pc, #128]	; (8005ea0 <HAL_I2S_DMAStop+0x330>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d101      	bne.n	8005e26 <HAL_I2S_DMAStop+0x2b6>
 8005e22:	4b20      	ldr	r3, [pc, #128]	; (8005ea4 <HAL_I2S_DMAStop+0x334>)
 8005e24:	e001      	b.n	8005e2a <HAL_I2S_DMAStop+0x2ba>
 8005e26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e30:	2b80      	cmp	r3, #128	; 0x80
 8005e32:	d0de      	beq.n	8005df2 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a19      	ldr	r2, [pc, #100]	; (8005ea0 <HAL_I2S_DMAStop+0x330>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d101      	bne.n	8005e42 <HAL_I2S_DMAStop+0x2d2>
 8005e3e:	4b19      	ldr	r3, [pc, #100]	; (8005ea4 <HAL_I2S_DMAStop+0x334>)
 8005e40:	e001      	b.n	8005e46 <HAL_I2S_DMAStop+0x2d6>
 8005e42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e46:	69da      	ldr	r2, [r3, #28]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4914      	ldr	r1, [pc, #80]	; (8005ea0 <HAL_I2S_DMAStop+0x330>)
 8005e4e:	428b      	cmp	r3, r1
 8005e50:	d101      	bne.n	8005e56 <HAL_I2S_DMAStop+0x2e6>
 8005e52:	4b14      	ldr	r3, [pc, #80]	; (8005ea4 <HAL_I2S_DMAStop+0x334>)
 8005e54:	e001      	b.n	8005e5a <HAL_I2S_DMAStop+0x2ea>
 8005e56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e5e:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8005e60:	2300      	movs	r3, #0
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a0d      	ldr	r2, [pc, #52]	; (8005ea0 <HAL_I2S_DMAStop+0x330>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d101      	bne.n	8005e72 <HAL_I2S_DMAStop+0x302>
 8005e6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ea4 <HAL_I2S_DMAStop+0x334>)
 8005e70:	e001      	b.n	8005e76 <HAL_I2S_DMAStop+0x306>
 8005e72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a07      	ldr	r2, [pc, #28]	; (8005ea0 <HAL_I2S_DMAStop+0x330>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d101      	bne.n	8005e8a <HAL_I2S_DMAStop+0x31a>
 8005e86:	4b07      	ldr	r3, [pc, #28]	; (8005ea4 <HAL_I2S_DMAStop+0x334>)
 8005e88:	e001      	b.n	8005e8e <HAL_I2S_DMAStop+0x31e>
 8005e8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4902      	ldr	r1, [pc, #8]	; (8005ea0 <HAL_I2S_DMAStop+0x330>)
 8005e96:	428b      	cmp	r3, r1
 8005e98:	d106      	bne.n	8005ea8 <HAL_I2S_DMAStop+0x338>
 8005e9a:	4b02      	ldr	r3, [pc, #8]	; (8005ea4 <HAL_I2S_DMAStop+0x334>)
 8005e9c:	e006      	b.n	8005eac <HAL_I2S_DMAStop+0x33c>
 8005e9e:	bf00      	nop
 8005ea0:	40003800 	.word	0x40003800
 8005ea4:	40003400 	.word	0x40003400
 8005ea8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005eac:	f022 0202 	bic.w	r2, r2, #2
 8005eb0:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69da      	ldr	r2, [r3, #28]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec0:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60bb      	str	r3, [r7, #8]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	60bb      	str	r3, [r7, #8]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	60bb      	str	r3, [r7, #8]
 8005ed6:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0201 	bic.w	r2, r2, #1
 8005ee6:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ef0:	d10c      	bne.n	8005f0c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	77fb      	strb	r3, [r7, #31]
 8005f0a:	e002      	b.n	8005f12 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8005f1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3720      	adds	r7, #32
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	4798      	blx	r3
}
 8005f34:	bf00      	nop
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	881a      	ldrh	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f90:	1c9a      	adds	r2, r3, #2
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10e      	bne.n	8005fcc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fbc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff ffb8 	bl	8005f3c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005fcc:	bf00      	nop
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe6:	b292      	uxth	r2, r2
 8005fe8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fee:	1c9a      	adds	r2, r3, #2
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006006:	b29b      	uxth	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d10e      	bne.n	800602a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800601a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff ff93 	bl	8005f50 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800602a:	bf00      	nop
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b086      	sub	sp, #24
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b04      	cmp	r3, #4
 800604c:	d13a      	bne.n	80060c4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b01      	cmp	r3, #1
 8006056:	d109      	bne.n	800606c <I2S_IRQHandler+0x3a>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006062:	2b40      	cmp	r3, #64	; 0x40
 8006064:	d102      	bne.n	800606c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7ff ffb4 	bl	8005fd4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006072:	2b40      	cmp	r3, #64	; 0x40
 8006074:	d126      	bne.n	80060c4 <I2S_IRQHandler+0x92>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f003 0320 	and.w	r3, r3, #32
 8006080:	2b20      	cmp	r3, #32
 8006082:	d11f      	bne.n	80060c4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006092:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006094:	2300      	movs	r3, #0
 8006096:	613b      	str	r3, [r7, #16]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	613b      	str	r3, [r7, #16]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	613b      	str	r3, [r7, #16]
 80060a8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b6:	f043 0202 	orr.w	r2, r3, #2
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff ff50 	bl	8005f64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b03      	cmp	r3, #3
 80060ce:	d136      	bne.n	800613e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d109      	bne.n	80060ee <I2S_IRQHandler+0xbc>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e4:	2b80      	cmp	r3, #128	; 0x80
 80060e6:	d102      	bne.n	80060ee <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7ff ff45 	bl	8005f78 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	d122      	bne.n	800613e <I2S_IRQHandler+0x10c>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f003 0320 	and.w	r3, r3, #32
 8006102:	2b20      	cmp	r3, #32
 8006104:	d11b      	bne.n	800613e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006114:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006116:	2300      	movs	r3, #0
 8006118:	60fb      	str	r3, [r7, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006130:	f043 0204 	orr.w	r2, r3, #4
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7ff ff13 	bl	8005f64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800613e:	bf00      	nop
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b086      	sub	sp, #24
 800614a:	af00      	add	r7, sp, #0
 800614c:	60f8      	str	r0, [r7, #12]
 800614e:	60b9      	str	r1, [r7, #8]
 8006150:	603b      	str	r3, [r7, #0]
 8006152:	4613      	mov	r3, r2
 8006154:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006156:	f7fb fa69 	bl	800162c <HAL_GetTick>
 800615a:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800615c:	e018      	b.n	8006190 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006164:	d014      	beq.n	8006190 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006166:	f7fb fa61 	bl	800162c <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	429a      	cmp	r2, r3
 8006174:	d902      	bls.n	800617c <I2S_WaitFlagStateUntilTimeout+0x36>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d109      	bne.n	8006190 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e00f      	b.n	80061b0 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689a      	ldr	r2, [r3, #8]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	4013      	ands	r3, r2
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	429a      	cmp	r2, r3
 800619e:	bf0c      	ite	eq
 80061a0:	2301      	moveq	r3, #1
 80061a2:	2300      	movne	r3, #0
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	461a      	mov	r2, r3
 80061a8:	79fb      	ldrb	r3, [r7, #7]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d1d7      	bne.n	800615e <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3718      	adds	r7, #24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4aa2      	ldr	r2, [pc, #648]	; (8006458 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d101      	bne.n	80061d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80061d2:	4ba2      	ldr	r3, [pc, #648]	; (800645c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80061d4:	e001      	b.n	80061da <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80061d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a9b      	ldr	r2, [pc, #620]	; (8006458 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d101      	bne.n	80061f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80061f0:	4b9a      	ldr	r3, [pc, #616]	; (800645c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80061f2:	e001      	b.n	80061f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80061f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006204:	d004      	beq.n	8006210 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	f040 8099 	bne.w	8006342 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b02      	cmp	r3, #2
 8006218:	d107      	bne.n	800622a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f925 	bl	8006474 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b01      	cmp	r3, #1
 8006232:	d107      	bne.n	8006244 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d002      	beq.n	8006244 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f9c8 	bl	80065d4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624a:	2b40      	cmp	r3, #64	; 0x40
 800624c:	d13a      	bne.n	80062c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f003 0320 	and.w	r3, r3, #32
 8006254:	2b00      	cmp	r3, #0
 8006256:	d035      	beq.n	80062c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a7e      	ldr	r2, [pc, #504]	; (8006458 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d101      	bne.n	8006266 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006262:	4b7e      	ldr	r3, [pc, #504]	; (800645c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006264:	e001      	b.n	800626a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006266:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4979      	ldr	r1, [pc, #484]	; (8006458 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006272:	428b      	cmp	r3, r1
 8006274:	d101      	bne.n	800627a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006276:	4b79      	ldr	r3, [pc, #484]	; (800645c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006278:	e001      	b.n	800627e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800627a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800627e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006282:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006292:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b6:	f043 0202 	orr.w	r2, r3, #2
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff fe50 	bl	8005f64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	f003 0308 	and.w	r3, r3, #8
 80062ca:	2b08      	cmp	r3, #8
 80062cc:	f040 80be 	bne.w	800644c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f000 80b8 	beq.w	800644c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062ea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a59      	ldr	r2, [pc, #356]	; (8006458 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d101      	bne.n	80062fa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80062f6:	4b59      	ldr	r3, [pc, #356]	; (800645c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80062f8:	e001      	b.n	80062fe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80062fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4954      	ldr	r1, [pc, #336]	; (8006458 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006306:	428b      	cmp	r3, r1
 8006308:	d101      	bne.n	800630e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800630a:	4b54      	ldr	r3, [pc, #336]	; (800645c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800630c:	e001      	b.n	8006312 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800630e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006312:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006316:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006318:	2300      	movs	r3, #0
 800631a:	60bb      	str	r3, [r7, #8]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	60bb      	str	r3, [r7, #8]
 8006324:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006332:	f043 0204 	orr.w	r2, r3, #4
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff fe12 	bl	8005f64 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006340:	e084      	b.n	800644c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b02      	cmp	r3, #2
 800634a:	d107      	bne.n	800635c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006352:	2b00      	cmp	r3, #0
 8006354:	d002      	beq.n	800635c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f8be 	bl	80064d8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b01      	cmp	r3, #1
 8006364:	d107      	bne.n	8006376 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f8fd 	bl	8006570 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637c:	2b40      	cmp	r3, #64	; 0x40
 800637e:	d12f      	bne.n	80063e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f003 0320 	and.w	r3, r3, #32
 8006386:	2b00      	cmp	r3, #0
 8006388:	d02a      	beq.n	80063e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006398:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a2e      	ldr	r2, [pc, #184]	; (8006458 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d101      	bne.n	80063a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80063a4:	4b2d      	ldr	r3, [pc, #180]	; (800645c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80063a6:	e001      	b.n	80063ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80063a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4929      	ldr	r1, [pc, #164]	; (8006458 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80063b4:	428b      	cmp	r3, r1
 80063b6:	d101      	bne.n	80063bc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80063b8:	4b28      	ldr	r3, [pc, #160]	; (800645c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80063ba:	e001      	b.n	80063c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80063bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80063c4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d2:	f043 0202 	orr.w	r2, r3, #2
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7ff fdc2 	bl	8005f64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d131      	bne.n	800644e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d02c      	beq.n	800644e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a17      	ldr	r2, [pc, #92]	; (8006458 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d101      	bne.n	8006402 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80063fe:	4b17      	ldr	r3, [pc, #92]	; (800645c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006400:	e001      	b.n	8006406 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006402:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4912      	ldr	r1, [pc, #72]	; (8006458 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800640e:	428b      	cmp	r3, r1
 8006410:	d101      	bne.n	8006416 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006412:	4b12      	ldr	r3, [pc, #72]	; (800645c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006414:	e001      	b.n	800641a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8006416:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800641a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800641e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800642e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643c:	f043 0204 	orr.w	r2, r3, #4
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7ff fd8d 	bl	8005f64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800644a:	e000      	b.n	800644e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800644c:	bf00      	nop
}
 800644e:	bf00      	nop
 8006450:	3720      	adds	r7, #32
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	40003800 	.word	0x40003800
 800645c:	40003400 	.word	0x40003400

08006460 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	1c99      	adds	r1, r3, #2
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	6251      	str	r1, [r2, #36]	; 0x24
 8006486:	881a      	ldrh	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006492:	b29b      	uxth	r3, r3
 8006494:	3b01      	subs	r3, #1
 8006496:	b29a      	uxth	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d113      	bne.n	80064ce <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80064b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d106      	bne.n	80064ce <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff ffc9 	bl	8006460 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064ce:	bf00      	nop
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	1c99      	adds	r1, r3, #2
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	6251      	str	r1, [r2, #36]	; 0x24
 80064ea:	8819      	ldrh	r1, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a1d      	ldr	r2, [pc, #116]	; (8006568 <I2SEx_TxISR_I2SExt+0x90>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d101      	bne.n	80064fa <I2SEx_TxISR_I2SExt+0x22>
 80064f6:	4b1d      	ldr	r3, [pc, #116]	; (800656c <I2SEx_TxISR_I2SExt+0x94>)
 80064f8:	e001      	b.n	80064fe <I2SEx_TxISR_I2SExt+0x26>
 80064fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064fe:	460a      	mov	r2, r1
 8006500:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006506:	b29b      	uxth	r3, r3
 8006508:	3b01      	subs	r3, #1
 800650a:	b29a      	uxth	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006514:	b29b      	uxth	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d121      	bne.n	800655e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a12      	ldr	r2, [pc, #72]	; (8006568 <I2SEx_TxISR_I2SExt+0x90>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d101      	bne.n	8006528 <I2SEx_TxISR_I2SExt+0x50>
 8006524:	4b11      	ldr	r3, [pc, #68]	; (800656c <I2SEx_TxISR_I2SExt+0x94>)
 8006526:	e001      	b.n	800652c <I2SEx_TxISR_I2SExt+0x54>
 8006528:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	490d      	ldr	r1, [pc, #52]	; (8006568 <I2SEx_TxISR_I2SExt+0x90>)
 8006534:	428b      	cmp	r3, r1
 8006536:	d101      	bne.n	800653c <I2SEx_TxISR_I2SExt+0x64>
 8006538:	4b0c      	ldr	r3, [pc, #48]	; (800656c <I2SEx_TxISR_I2SExt+0x94>)
 800653a:	e001      	b.n	8006540 <I2SEx_TxISR_I2SExt+0x68>
 800653c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006540:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006544:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800654a:	b29b      	uxth	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	d106      	bne.n	800655e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff ff81 	bl	8006460 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800655e:	bf00      	nop
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	40003800 	.word	0x40003800
 800656c:	40003400 	.word	0x40003400

08006570 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68d8      	ldr	r0, [r3, #12]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006582:	1c99      	adds	r1, r3, #2
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006588:	b282      	uxth	r2, r0
 800658a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006590:	b29b      	uxth	r3, r3
 8006592:	3b01      	subs	r3, #1
 8006594:	b29a      	uxth	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800659e:	b29b      	uxth	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d113      	bne.n	80065cc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065b2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d106      	bne.n	80065cc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7ff ff4a 	bl	8006460 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065cc:	bf00      	nop
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a20      	ldr	r2, [pc, #128]	; (8006664 <I2SEx_RxISR_I2SExt+0x90>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d101      	bne.n	80065ea <I2SEx_RxISR_I2SExt+0x16>
 80065e6:	4b20      	ldr	r3, [pc, #128]	; (8006668 <I2SEx_RxISR_I2SExt+0x94>)
 80065e8:	e001      	b.n	80065ee <I2SEx_RxISR_I2SExt+0x1a>
 80065ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065ee:	68d8      	ldr	r0, [r3, #12]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	1c99      	adds	r1, r3, #2
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80065fa:	b282      	uxth	r2, r0
 80065fc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006602:	b29b      	uxth	r3, r3
 8006604:	3b01      	subs	r3, #1
 8006606:	b29a      	uxth	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d121      	bne.n	800665a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a12      	ldr	r2, [pc, #72]	; (8006664 <I2SEx_RxISR_I2SExt+0x90>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d101      	bne.n	8006624 <I2SEx_RxISR_I2SExt+0x50>
 8006620:	4b11      	ldr	r3, [pc, #68]	; (8006668 <I2SEx_RxISR_I2SExt+0x94>)
 8006622:	e001      	b.n	8006628 <I2SEx_RxISR_I2SExt+0x54>
 8006624:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	490d      	ldr	r1, [pc, #52]	; (8006664 <I2SEx_RxISR_I2SExt+0x90>)
 8006630:	428b      	cmp	r3, r1
 8006632:	d101      	bne.n	8006638 <I2SEx_RxISR_I2SExt+0x64>
 8006634:	4b0c      	ldr	r3, [pc, #48]	; (8006668 <I2SEx_RxISR_I2SExt+0x94>)
 8006636:	e001      	b.n	800663c <I2SEx_RxISR_I2SExt+0x68>
 8006638:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800663c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006640:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006646:	b29b      	uxth	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	d106      	bne.n	800665a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7ff ff03 	bl	8006460 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800665a:	bf00      	nop
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	40003800 	.word	0x40003800
 8006668:	40003400 	.word	0x40003400

0800666c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e264      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d075      	beq.n	8006776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800668a:	4ba3      	ldr	r3, [pc, #652]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 030c 	and.w	r3, r3, #12
 8006692:	2b04      	cmp	r3, #4
 8006694:	d00c      	beq.n	80066b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006696:	4ba0      	ldr	r3, [pc, #640]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800669e:	2b08      	cmp	r3, #8
 80066a0:	d112      	bne.n	80066c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066a2:	4b9d      	ldr	r3, [pc, #628]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066ae:	d10b      	bne.n	80066c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066b0:	4b99      	ldr	r3, [pc, #612]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d05b      	beq.n	8006774 <HAL_RCC_OscConfig+0x108>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d157      	bne.n	8006774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e23f      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d0:	d106      	bne.n	80066e0 <HAL_RCC_OscConfig+0x74>
 80066d2:	4b91      	ldr	r3, [pc, #580]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a90      	ldr	r2, [pc, #576]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80066d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	e01d      	b.n	800671c <HAL_RCC_OscConfig+0xb0>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066e8:	d10c      	bne.n	8006704 <HAL_RCC_OscConfig+0x98>
 80066ea:	4b8b      	ldr	r3, [pc, #556]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a8a      	ldr	r2, [pc, #552]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80066f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066f4:	6013      	str	r3, [r2, #0]
 80066f6:	4b88      	ldr	r3, [pc, #544]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a87      	ldr	r2, [pc, #540]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80066fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	e00b      	b.n	800671c <HAL_RCC_OscConfig+0xb0>
 8006704:	4b84      	ldr	r3, [pc, #528]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a83      	ldr	r2, [pc, #524]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 800670a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	4b81      	ldr	r3, [pc, #516]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a80      	ldr	r2, [pc, #512]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 8006716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800671a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d013      	beq.n	800674c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006724:	f7fa ff82 	bl	800162c <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800672c:	f7fa ff7e 	bl	800162c <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b64      	cmp	r3, #100	; 0x64
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e204      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800673e:	4b76      	ldr	r3, [pc, #472]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d0f0      	beq.n	800672c <HAL_RCC_OscConfig+0xc0>
 800674a:	e014      	b.n	8006776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800674c:	f7fa ff6e 	bl	800162c <HAL_GetTick>
 8006750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006752:	e008      	b.n	8006766 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006754:	f7fa ff6a 	bl	800162c <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b64      	cmp	r3, #100	; 0x64
 8006760:	d901      	bls.n	8006766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e1f0      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006766:	4b6c      	ldr	r3, [pc, #432]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1f0      	bne.n	8006754 <HAL_RCC_OscConfig+0xe8>
 8006772:	e000      	b.n	8006776 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d063      	beq.n	800684a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006782:	4b65      	ldr	r3, [pc, #404]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f003 030c 	and.w	r3, r3, #12
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00b      	beq.n	80067a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800678e:	4b62      	ldr	r3, [pc, #392]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006796:	2b08      	cmp	r3, #8
 8006798:	d11c      	bne.n	80067d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800679a:	4b5f      	ldr	r3, [pc, #380]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d116      	bne.n	80067d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067a6:	4b5c      	ldr	r3, [pc, #368]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d005      	beq.n	80067be <HAL_RCC_OscConfig+0x152>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d001      	beq.n	80067be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e1c4      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067be:	4b56      	ldr	r3, [pc, #344]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	4952      	ldr	r1, [pc, #328]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067d2:	e03a      	b.n	800684a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d020      	beq.n	800681e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067dc:	4b4f      	ldr	r3, [pc, #316]	; (800691c <HAL_RCC_OscConfig+0x2b0>)
 80067de:	2201      	movs	r2, #1
 80067e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e2:	f7fa ff23 	bl	800162c <HAL_GetTick>
 80067e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067e8:	e008      	b.n	80067fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067ea:	f7fa ff1f 	bl	800162c <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e1a5      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067fc:	4b46      	ldr	r3, [pc, #280]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0f0      	beq.n	80067ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006808:	4b43      	ldr	r3, [pc, #268]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	4940      	ldr	r1, [pc, #256]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 8006818:	4313      	orrs	r3, r2
 800681a:	600b      	str	r3, [r1, #0]
 800681c:	e015      	b.n	800684a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800681e:	4b3f      	ldr	r3, [pc, #252]	; (800691c <HAL_RCC_OscConfig+0x2b0>)
 8006820:	2200      	movs	r2, #0
 8006822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006824:	f7fa ff02 	bl	800162c <HAL_GetTick>
 8006828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800682a:	e008      	b.n	800683e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800682c:	f7fa fefe 	bl	800162c <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e184      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800683e:	4b36      	ldr	r3, [pc, #216]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1f0      	bne.n	800682c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0308 	and.w	r3, r3, #8
 8006852:	2b00      	cmp	r3, #0
 8006854:	d030      	beq.n	80068b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d016      	beq.n	800688c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800685e:	4b30      	ldr	r3, [pc, #192]	; (8006920 <HAL_RCC_OscConfig+0x2b4>)
 8006860:	2201      	movs	r2, #1
 8006862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006864:	f7fa fee2 	bl	800162c <HAL_GetTick>
 8006868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800686a:	e008      	b.n	800687e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800686c:	f7fa fede 	bl	800162c <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e164      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800687e:	4b26      	ldr	r3, [pc, #152]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 8006880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0f0      	beq.n	800686c <HAL_RCC_OscConfig+0x200>
 800688a:	e015      	b.n	80068b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800688c:	4b24      	ldr	r3, [pc, #144]	; (8006920 <HAL_RCC_OscConfig+0x2b4>)
 800688e:	2200      	movs	r2, #0
 8006890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006892:	f7fa fecb 	bl	800162c <HAL_GetTick>
 8006896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006898:	e008      	b.n	80068ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800689a:	f7fa fec7 	bl	800162c <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d901      	bls.n	80068ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e14d      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068ac:	4b1a      	ldr	r3, [pc, #104]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80068ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b0:	f003 0302 	and.w	r3, r3, #2
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1f0      	bne.n	800689a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0304 	and.w	r3, r3, #4
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 80a0 	beq.w	8006a06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068c6:	2300      	movs	r3, #0
 80068c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068ca:	4b13      	ldr	r3, [pc, #76]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10f      	bne.n	80068f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068d6:	2300      	movs	r3, #0
 80068d8:	60bb      	str	r3, [r7, #8]
 80068da:	4b0f      	ldr	r3, [pc, #60]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	4a0e      	ldr	r2, [pc, #56]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80068e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068e4:	6413      	str	r3, [r2, #64]	; 0x40
 80068e6:	4b0c      	ldr	r3, [pc, #48]	; (8006918 <HAL_RCC_OscConfig+0x2ac>)
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ee:	60bb      	str	r3, [r7, #8]
 80068f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068f2:	2301      	movs	r3, #1
 80068f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068f6:	4b0b      	ldr	r3, [pc, #44]	; (8006924 <HAL_RCC_OscConfig+0x2b8>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d121      	bne.n	8006946 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006902:	4b08      	ldr	r3, [pc, #32]	; (8006924 <HAL_RCC_OscConfig+0x2b8>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a07      	ldr	r2, [pc, #28]	; (8006924 <HAL_RCC_OscConfig+0x2b8>)
 8006908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800690c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800690e:	f7fa fe8d 	bl	800162c <HAL_GetTick>
 8006912:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006914:	e011      	b.n	800693a <HAL_RCC_OscConfig+0x2ce>
 8006916:	bf00      	nop
 8006918:	40023800 	.word	0x40023800
 800691c:	42470000 	.word	0x42470000
 8006920:	42470e80 	.word	0x42470e80
 8006924:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006928:	f7fa fe80 	bl	800162c <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b02      	cmp	r3, #2
 8006934:	d901      	bls.n	800693a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e106      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800693a:	4b85      	ldr	r3, [pc, #532]	; (8006b50 <HAL_RCC_OscConfig+0x4e4>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0f0      	beq.n	8006928 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d106      	bne.n	800695c <HAL_RCC_OscConfig+0x2f0>
 800694e:	4b81      	ldr	r3, [pc, #516]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006952:	4a80      	ldr	r2, [pc, #512]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006954:	f043 0301 	orr.w	r3, r3, #1
 8006958:	6713      	str	r3, [r2, #112]	; 0x70
 800695a:	e01c      	b.n	8006996 <HAL_RCC_OscConfig+0x32a>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	2b05      	cmp	r3, #5
 8006962:	d10c      	bne.n	800697e <HAL_RCC_OscConfig+0x312>
 8006964:	4b7b      	ldr	r3, [pc, #492]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006968:	4a7a      	ldr	r2, [pc, #488]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 800696a:	f043 0304 	orr.w	r3, r3, #4
 800696e:	6713      	str	r3, [r2, #112]	; 0x70
 8006970:	4b78      	ldr	r3, [pc, #480]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006974:	4a77      	ldr	r2, [pc, #476]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006976:	f043 0301 	orr.w	r3, r3, #1
 800697a:	6713      	str	r3, [r2, #112]	; 0x70
 800697c:	e00b      	b.n	8006996 <HAL_RCC_OscConfig+0x32a>
 800697e:	4b75      	ldr	r3, [pc, #468]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006982:	4a74      	ldr	r2, [pc, #464]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006984:	f023 0301 	bic.w	r3, r3, #1
 8006988:	6713      	str	r3, [r2, #112]	; 0x70
 800698a:	4b72      	ldr	r3, [pc, #456]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 800698c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698e:	4a71      	ldr	r2, [pc, #452]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006990:	f023 0304 	bic.w	r3, r3, #4
 8006994:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d015      	beq.n	80069ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800699e:	f7fa fe45 	bl	800162c <HAL_GetTick>
 80069a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069a4:	e00a      	b.n	80069bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069a6:	f7fa fe41 	bl	800162c <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d901      	bls.n	80069bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e0c5      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069bc:	4b65      	ldr	r3, [pc, #404]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 80069be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0ee      	beq.n	80069a6 <HAL_RCC_OscConfig+0x33a>
 80069c8:	e014      	b.n	80069f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069ca:	f7fa fe2f 	bl	800162c <HAL_GetTick>
 80069ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069d0:	e00a      	b.n	80069e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069d2:	f7fa fe2b 	bl	800162c <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d901      	bls.n	80069e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e0af      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069e8:	4b5a      	ldr	r3, [pc, #360]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 80069ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1ee      	bne.n	80069d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069f4:	7dfb      	ldrb	r3, [r7, #23]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d105      	bne.n	8006a06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069fa:	4b56      	ldr	r3, [pc, #344]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	4a55      	ldr	r2, [pc, #340]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 809b 	beq.w	8006b46 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a10:	4b50      	ldr	r3, [pc, #320]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f003 030c 	and.w	r3, r3, #12
 8006a18:	2b08      	cmp	r3, #8
 8006a1a:	d05c      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d141      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a24:	4b4c      	ldr	r3, [pc, #304]	; (8006b58 <HAL_RCC_OscConfig+0x4ec>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a2a:	f7fa fdff 	bl	800162c <HAL_GetTick>
 8006a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a30:	e008      	b.n	8006a44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a32:	f7fa fdfb 	bl	800162c <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d901      	bls.n	8006a44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e081      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a44:	4b43      	ldr	r3, [pc, #268]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1f0      	bne.n	8006a32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	69da      	ldr	r2, [r3, #28]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	019b      	lsls	r3, r3, #6
 8006a60:	431a      	orrs	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a66:	085b      	lsrs	r3, r3, #1
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	041b      	lsls	r3, r3, #16
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a72:	061b      	lsls	r3, r3, #24
 8006a74:	4937      	ldr	r1, [pc, #220]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a7a:	4b37      	ldr	r3, [pc, #220]	; (8006b58 <HAL_RCC_OscConfig+0x4ec>)
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a80:	f7fa fdd4 	bl	800162c <HAL_GetTick>
 8006a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a86:	e008      	b.n	8006a9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a88:	f7fa fdd0 	bl	800162c <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e056      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a9a:	4b2e      	ldr	r3, [pc, #184]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0f0      	beq.n	8006a88 <HAL_RCC_OscConfig+0x41c>
 8006aa6:	e04e      	b.n	8006b46 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aa8:	4b2b      	ldr	r3, [pc, #172]	; (8006b58 <HAL_RCC_OscConfig+0x4ec>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aae:	f7fa fdbd 	bl	800162c <HAL_GetTick>
 8006ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ab4:	e008      	b.n	8006ac8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ab6:	f7fa fdb9 	bl	800162c <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d901      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e03f      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ac8:	4b22      	ldr	r3, [pc, #136]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1f0      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x44a>
 8006ad4:	e037      	b.n	8006b46 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d101      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e032      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ae2:	4b1c      	ldr	r3, [pc, #112]	; (8006b54 <HAL_RCC_OscConfig+0x4e8>)
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d028      	beq.n	8006b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d121      	bne.n	8006b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d11a      	bne.n	8006b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b12:	4013      	ands	r3, r2
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b18:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d111      	bne.n	8006b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b28:	085b      	lsrs	r3, r3, #1
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d107      	bne.n	8006b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d001      	beq.n	8006b46 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e000      	b.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3718      	adds	r7, #24
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	40007000 	.word	0x40007000
 8006b54:	40023800 	.word	0x40023800
 8006b58:	42470060 	.word	0x42470060

08006b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e0cc      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b70:	4b68      	ldr	r3, [pc, #416]	; (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0307 	and.w	r3, r3, #7
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d90c      	bls.n	8006b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b7e:	4b65      	ldr	r3, [pc, #404]	; (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b86:	4b63      	ldr	r3, [pc, #396]	; (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0307 	and.w	r3, r3, #7
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d001      	beq.n	8006b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e0b8      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d020      	beq.n	8006be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bb0:	4b59      	ldr	r3, [pc, #356]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	4a58      	ldr	r2, [pc, #352]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006bba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0308 	and.w	r3, r3, #8
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d005      	beq.n	8006bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bc8:	4b53      	ldr	r3, [pc, #332]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	4a52      	ldr	r2, [pc, #328]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bd4:	4b50      	ldr	r3, [pc, #320]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	494d      	ldr	r1, [pc, #308]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d044      	beq.n	8006c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d107      	bne.n	8006c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bfa:	4b47      	ldr	r3, [pc, #284]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d119      	bne.n	8006c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e07f      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d003      	beq.n	8006c1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d107      	bne.n	8006c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c1a:	4b3f      	ldr	r3, [pc, #252]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d109      	bne.n	8006c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e06f      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c2a:	4b3b      	ldr	r3, [pc, #236]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e067      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c3a:	4b37      	ldr	r3, [pc, #220]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f023 0203 	bic.w	r2, r3, #3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	4934      	ldr	r1, [pc, #208]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c4c:	f7fa fcee 	bl	800162c <HAL_GetTick>
 8006c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c52:	e00a      	b.n	8006c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c54:	f7fa fcea 	bl	800162c <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e04f      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c6a:	4b2b      	ldr	r3, [pc, #172]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f003 020c 	and.w	r2, r3, #12
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d1eb      	bne.n	8006c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c7c:	4b25      	ldr	r3, [pc, #148]	; (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0307 	and.w	r3, r3, #7
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d20c      	bcs.n	8006ca4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c8a:	4b22      	ldr	r3, [pc, #136]	; (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	b2d2      	uxtb	r2, r2
 8006c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c92:	4b20      	ldr	r3, [pc, #128]	; (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d001      	beq.n	8006ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e032      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d008      	beq.n	8006cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cb0:	4b19      	ldr	r3, [pc, #100]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	4916      	ldr	r1, [pc, #88]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0308 	and.w	r3, r3, #8
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d009      	beq.n	8006ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cce:	4b12      	ldr	r3, [pc, #72]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	490e      	ldr	r1, [pc, #56]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ce2:	f000 f821 	bl	8006d28 <HAL_RCC_GetSysClockFreq>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	4b0b      	ldr	r3, [pc, #44]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	091b      	lsrs	r3, r3, #4
 8006cee:	f003 030f 	and.w	r3, r3, #15
 8006cf2:	490a      	ldr	r1, [pc, #40]	; (8006d1c <HAL_RCC_ClockConfig+0x1c0>)
 8006cf4:	5ccb      	ldrb	r3, [r1, r3]
 8006cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cfa:	4a09      	ldr	r2, [pc, #36]	; (8006d20 <HAL_RCC_ClockConfig+0x1c4>)
 8006cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006cfe:	4b09      	ldr	r3, [pc, #36]	; (8006d24 <HAL_RCC_ClockConfig+0x1c8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fa fc4e 	bl	80015a4 <HAL_InitTick>

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	40023c00 	.word	0x40023c00
 8006d18:	40023800 	.word	0x40023800
 8006d1c:	08086e60 	.word	0x08086e60
 8006d20:	2000000c 	.word	0x2000000c
 8006d24:	20000010 	.word	0x20000010

08006d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006d2c:	b084      	sub	sp, #16
 8006d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	607b      	str	r3, [r7, #4]
 8006d34:	2300      	movs	r3, #0
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	2300      	movs	r3, #0
 8006d3a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d40:	4b67      	ldr	r3, [pc, #412]	; (8006ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f003 030c 	and.w	r3, r3, #12
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	d00d      	beq.n	8006d68 <HAL_RCC_GetSysClockFreq+0x40>
 8006d4c:	2b08      	cmp	r3, #8
 8006d4e:	f200 80bd 	bhi.w	8006ecc <HAL_RCC_GetSysClockFreq+0x1a4>
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <HAL_RCC_GetSysClockFreq+0x34>
 8006d56:	2b04      	cmp	r3, #4
 8006d58:	d003      	beq.n	8006d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8006d5a:	e0b7      	b.n	8006ecc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d5c:	4b61      	ldr	r3, [pc, #388]	; (8006ee4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006d5e:	60bb      	str	r3, [r7, #8]
       break;
 8006d60:	e0b7      	b.n	8006ed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d62:	4b61      	ldr	r3, [pc, #388]	; (8006ee8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006d64:	60bb      	str	r3, [r7, #8]
      break;
 8006d66:	e0b4      	b.n	8006ed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d68:	4b5d      	ldr	r3, [pc, #372]	; (8006ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d72:	4b5b      	ldr	r3, [pc, #364]	; (8006ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d04d      	beq.n	8006e1a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d7e:	4b58      	ldr	r3, [pc, #352]	; (8006ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	099b      	lsrs	r3, r3, #6
 8006d84:	461a      	mov	r2, r3
 8006d86:	f04f 0300 	mov.w	r3, #0
 8006d8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006d8e:	f04f 0100 	mov.w	r1, #0
 8006d92:	ea02 0800 	and.w	r8, r2, r0
 8006d96:	ea03 0901 	and.w	r9, r3, r1
 8006d9a:	4640      	mov	r0, r8
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	f04f 0200 	mov.w	r2, #0
 8006da2:	f04f 0300 	mov.w	r3, #0
 8006da6:	014b      	lsls	r3, r1, #5
 8006da8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006dac:	0142      	lsls	r2, r0, #5
 8006dae:	4610      	mov	r0, r2
 8006db0:	4619      	mov	r1, r3
 8006db2:	ebb0 0008 	subs.w	r0, r0, r8
 8006db6:	eb61 0109 	sbc.w	r1, r1, r9
 8006dba:	f04f 0200 	mov.w	r2, #0
 8006dbe:	f04f 0300 	mov.w	r3, #0
 8006dc2:	018b      	lsls	r3, r1, #6
 8006dc4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006dc8:	0182      	lsls	r2, r0, #6
 8006dca:	1a12      	subs	r2, r2, r0
 8006dcc:	eb63 0301 	sbc.w	r3, r3, r1
 8006dd0:	f04f 0000 	mov.w	r0, #0
 8006dd4:	f04f 0100 	mov.w	r1, #0
 8006dd8:	00d9      	lsls	r1, r3, #3
 8006dda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006dde:	00d0      	lsls	r0, r2, #3
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	eb12 0208 	adds.w	r2, r2, r8
 8006de8:	eb43 0309 	adc.w	r3, r3, r9
 8006dec:	f04f 0000 	mov.w	r0, #0
 8006df0:	f04f 0100 	mov.w	r1, #0
 8006df4:	0259      	lsls	r1, r3, #9
 8006df6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006dfa:	0250      	lsls	r0, r2, #9
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	460b      	mov	r3, r1
 8006e00:	4610      	mov	r0, r2
 8006e02:	4619      	mov	r1, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	461a      	mov	r2, r3
 8006e08:	f04f 0300 	mov.w	r3, #0
 8006e0c:	f7f9 fa30 	bl	8000270 <__aeabi_uldivmod>
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	4613      	mov	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	e04a      	b.n	8006eb0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e1a:	4b31      	ldr	r3, [pc, #196]	; (8006ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	099b      	lsrs	r3, r3, #6
 8006e20:	461a      	mov	r2, r3
 8006e22:	f04f 0300 	mov.w	r3, #0
 8006e26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006e2a:	f04f 0100 	mov.w	r1, #0
 8006e2e:	ea02 0400 	and.w	r4, r2, r0
 8006e32:	ea03 0501 	and.w	r5, r3, r1
 8006e36:	4620      	mov	r0, r4
 8006e38:	4629      	mov	r1, r5
 8006e3a:	f04f 0200 	mov.w	r2, #0
 8006e3e:	f04f 0300 	mov.w	r3, #0
 8006e42:	014b      	lsls	r3, r1, #5
 8006e44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006e48:	0142      	lsls	r2, r0, #5
 8006e4a:	4610      	mov	r0, r2
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	1b00      	subs	r0, r0, r4
 8006e50:	eb61 0105 	sbc.w	r1, r1, r5
 8006e54:	f04f 0200 	mov.w	r2, #0
 8006e58:	f04f 0300 	mov.w	r3, #0
 8006e5c:	018b      	lsls	r3, r1, #6
 8006e5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006e62:	0182      	lsls	r2, r0, #6
 8006e64:	1a12      	subs	r2, r2, r0
 8006e66:	eb63 0301 	sbc.w	r3, r3, r1
 8006e6a:	f04f 0000 	mov.w	r0, #0
 8006e6e:	f04f 0100 	mov.w	r1, #0
 8006e72:	00d9      	lsls	r1, r3, #3
 8006e74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e78:	00d0      	lsls	r0, r2, #3
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	1912      	adds	r2, r2, r4
 8006e80:	eb45 0303 	adc.w	r3, r5, r3
 8006e84:	f04f 0000 	mov.w	r0, #0
 8006e88:	f04f 0100 	mov.w	r1, #0
 8006e8c:	0299      	lsls	r1, r3, #10
 8006e8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006e92:	0290      	lsls	r0, r2, #10
 8006e94:	4602      	mov	r2, r0
 8006e96:	460b      	mov	r3, r1
 8006e98:	4610      	mov	r0, r2
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f04f 0300 	mov.w	r3, #0
 8006ea4:	f7f9 f9e4 	bl	8000270 <__aeabi_uldivmod>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4613      	mov	r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006eb0:	4b0b      	ldr	r3, [pc, #44]	; (8006ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	0c1b      	lsrs	r3, r3, #16
 8006eb6:	f003 0303 	and.w	r3, r3, #3
 8006eba:	3301      	adds	r3, #1
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec8:	60bb      	str	r3, [r7, #8]
      break;
 8006eca:	e002      	b.n	8006ed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ecc:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006ece:	60bb      	str	r3, [r7, #8]
      break;
 8006ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ed2:	68bb      	ldr	r3, [r7, #8]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006ede:	bf00      	nop
 8006ee0:	40023800 	.word	0x40023800
 8006ee4:	00f42400 	.word	0x00f42400
 8006ee8:	007a1200 	.word	0x007a1200

08006eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eec:	b480      	push	{r7}
 8006eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ef0:	4b03      	ldr	r3, [pc, #12]	; (8006f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	2000000c 	.word	0x2000000c

08006f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f08:	f7ff fff0 	bl	8006eec <HAL_RCC_GetHCLKFreq>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	0a9b      	lsrs	r3, r3, #10
 8006f14:	f003 0307 	and.w	r3, r3, #7
 8006f18:	4903      	ldr	r1, [pc, #12]	; (8006f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f1a:	5ccb      	ldrb	r3, [r1, r3]
 8006f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	40023800 	.word	0x40023800
 8006f28:	08086e70 	.word	0x08086e70

08006f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f30:	f7ff ffdc 	bl	8006eec <HAL_RCC_GetHCLKFreq>
 8006f34:	4602      	mov	r2, r0
 8006f36:	4b05      	ldr	r3, [pc, #20]	; (8006f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	0b5b      	lsrs	r3, r3, #13
 8006f3c:	f003 0307 	and.w	r3, r3, #7
 8006f40:	4903      	ldr	r1, [pc, #12]	; (8006f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f42:	5ccb      	ldrb	r3, [r1, r3]
 8006f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	08086e70 	.word	0x08086e70

08006f54 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d105      	bne.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d035      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f7c:	4b62      	ldr	r3, [pc, #392]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f82:	f7fa fb53 	bl	800162c <HAL_GetTick>
 8006f86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f88:	e008      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f8a:	f7fa fb4f 	bl	800162c <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d901      	bls.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e0b0      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f9c:	4b5b      	ldr	r3, [pc, #364]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1f0      	bne.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	019a      	lsls	r2, r3, #6
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	071b      	lsls	r3, r3, #28
 8006fb4:	4955      	ldr	r1, [pc, #340]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006fbc:	4b52      	ldr	r3, [pc, #328]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fc2:	f7fa fb33 	bl	800162c <HAL_GetTick>
 8006fc6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fc8:	e008      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006fca:	f7fa fb2f 	bl	800162c <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d901      	bls.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e090      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fdc:	4b4b      	ldr	r3, [pc, #300]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d0f0      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 8083 	beq.w	80070fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	4b44      	ldr	r3, [pc, #272]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	4a43      	ldr	r2, [pc, #268]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007004:	6413      	str	r3, [r2, #64]	; 0x40
 8007006:	4b41      	ldr	r3, [pc, #260]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800700e:	60fb      	str	r3, [r7, #12]
 8007010:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007012:	4b3f      	ldr	r3, [pc, #252]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a3e      	ldr	r2, [pc, #248]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800701c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800701e:	f7fa fb05 	bl	800162c <HAL_GetTick>
 8007022:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007024:	e008      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007026:	f7fa fb01 	bl	800162c <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	2b02      	cmp	r3, #2
 8007032:	d901      	bls.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e062      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007038:	4b35      	ldr	r3, [pc, #212]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007040:	2b00      	cmp	r3, #0
 8007042:	d0f0      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007044:	4b31      	ldr	r3, [pc, #196]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007048:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800704c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d02f      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	429a      	cmp	r2, r3
 8007060:	d028      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007062:	4b2a      	ldr	r3, [pc, #168]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800706a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800706c:	4b29      	ldr	r3, [pc, #164]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800706e:	2201      	movs	r2, #1
 8007070:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007072:	4b28      	ldr	r3, [pc, #160]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007074:	2200      	movs	r2, #0
 8007076:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007078:	4a24      	ldr	r2, [pc, #144]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800707e:	4b23      	ldr	r3, [pc, #140]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b01      	cmp	r3, #1
 8007088:	d114      	bne.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800708a:	f7fa facf 	bl	800162c <HAL_GetTick>
 800708e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007090:	e00a      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007092:	f7fa facb 	bl	800162c <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	f241 3288 	movw	r2, #5000	; 0x1388
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d901      	bls.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e02a      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070a8:	4b18      	ldr	r3, [pc, #96]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d0ee      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070c0:	d10d      	bne.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80070c2:	4b12      	ldr	r3, [pc, #72]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80070d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070d6:	490d      	ldr	r1, [pc, #52]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	608b      	str	r3, [r1, #8]
 80070dc:	e005      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 80070de:	4b0b      	ldr	r3, [pc, #44]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	4a0a      	ldr	r2, [pc, #40]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070e4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80070e8:	6093      	str	r3, [r2, #8]
 80070ea:	4b08      	ldr	r3, [pc, #32]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070f6:	4905      	ldr	r1, [pc, #20]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	42470068 	.word	0x42470068
 800710c:	40023800 	.word	0x40023800
 8007110:	40007000 	.word	0x40007000
 8007114:	42470e40 	.word	0x42470e40

08007118 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007118:	b480      	push	{r7}
 800711a:	b087      	sub	sp, #28
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007120:	2300      	movs	r3, #0
 8007122:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d13e      	bne.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007136:	4b23      	ldr	r3, [pc, #140]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d005      	beq.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d12f      	bne.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800714c:	4b1e      	ldr	r3, [pc, #120]	; (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800714e:	617b      	str	r3, [r7, #20]
          break;
 8007150:	e02f      	b.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007152:	4b1c      	ldr	r3, [pc, #112]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800715a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800715e:	d108      	bne.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007160:	4b18      	ldr	r3, [pc, #96]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007168:	4a18      	ldr	r2, [pc, #96]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800716a:	fbb2 f3f3 	udiv	r3, r2, r3
 800716e:	613b      	str	r3, [r7, #16]
 8007170:	e007      	b.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007172:	4b14      	ldr	r3, [pc, #80]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800717a:	4a15      	ldr	r2, [pc, #84]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800717c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007180:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007182:	4b10      	ldr	r3, [pc, #64]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007188:	099b      	lsrs	r3, r3, #6
 800718a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	fb02 f303 	mul.w	r3, r2, r3
 8007194:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007196:	4b0b      	ldr	r3, [pc, #44]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800719c:	0f1b      	lsrs	r3, r3, #28
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a8:	617b      	str	r3, [r7, #20]
          break;
 80071aa:	e002      	b.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	617b      	str	r3, [r7, #20]
          break;
 80071b0:	bf00      	nop
        }
      }
      break;
 80071b2:	bf00      	nop
    }
  }
  return frequency;
 80071b4:	697b      	ldr	r3, [r7, #20]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	371c      	adds	r7, #28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	40023800 	.word	0x40023800
 80071c8:	00bb8000 	.word	0x00bb8000
 80071cc:	007a1200 	.word	0x007a1200
 80071d0:	00f42400 	.word	0x00f42400

080071d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e03f      	b.n	8007266 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d106      	bne.n	8007200 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7fa f816 	bl	800122c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2224      	movs	r2, #36	; 0x24
 8007204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007216:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f929 	bl	8007470 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	691a      	ldr	r2, [r3, #16]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800722c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	695a      	ldr	r2, [r3, #20]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800723c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68da      	ldr	r2, [r3, #12]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800724c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2220      	movs	r2, #32
 8007258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2220      	movs	r2, #32
 8007260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b08a      	sub	sp, #40	; 0x28
 8007272:	af02      	add	r7, sp, #8
 8007274:	60f8      	str	r0, [r7, #12]
 8007276:	60b9      	str	r1, [r7, #8]
 8007278:	603b      	str	r3, [r7, #0]
 800727a:	4613      	mov	r3, r2
 800727c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800727e:	2300      	movs	r3, #0
 8007280:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b20      	cmp	r3, #32
 800728c:	d17c      	bne.n	8007388 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d002      	beq.n	800729a <HAL_UART_Transmit+0x2c>
 8007294:	88fb      	ldrh	r3, [r7, #6]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e075      	b.n	800738a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d101      	bne.n	80072ac <HAL_UART_Transmit+0x3e>
 80072a8:	2302      	movs	r3, #2
 80072aa:	e06e      	b.n	800738a <HAL_UART_Transmit+0x11c>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2221      	movs	r2, #33	; 0x21
 80072be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072c2:	f7fa f9b3 	bl	800162c <HAL_GetTick>
 80072c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	88fa      	ldrh	r2, [r7, #6]
 80072cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	88fa      	ldrh	r2, [r7, #6]
 80072d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072dc:	d108      	bne.n	80072f0 <HAL_UART_Transmit+0x82>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d104      	bne.n	80072f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80072e6:	2300      	movs	r3, #0
 80072e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	61bb      	str	r3, [r7, #24]
 80072ee:	e003      	b.n	80072f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072f4:	2300      	movs	r3, #0
 80072f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007300:	e02a      	b.n	8007358 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2200      	movs	r2, #0
 800730a:	2180      	movs	r1, #128	; 0x80
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 f840 	bl	8007392 <UART_WaitOnFlagUntilTimeout>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007318:	2303      	movs	r3, #3
 800731a:	e036      	b.n	800738a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10b      	bne.n	800733a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	461a      	mov	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007330:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	3302      	adds	r3, #2
 8007336:	61bb      	str	r3, [r7, #24]
 8007338:	e007      	b.n	800734a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	781a      	ldrb	r2, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	3301      	adds	r3, #1
 8007348:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800734e:	b29b      	uxth	r3, r3
 8007350:	3b01      	subs	r3, #1
 8007352:	b29a      	uxth	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800735c:	b29b      	uxth	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1cf      	bne.n	8007302 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2200      	movs	r2, #0
 800736a:	2140      	movs	r1, #64	; 0x40
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 f810 	bl	8007392 <UART_WaitOnFlagUntilTimeout>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e006      	b.n	800738a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2220      	movs	r2, #32
 8007380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007384:	2300      	movs	r3, #0
 8007386:	e000      	b.n	800738a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007388:	2302      	movs	r3, #2
  }
}
 800738a:	4618      	mov	r0, r3
 800738c:	3720      	adds	r7, #32
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b090      	sub	sp, #64	; 0x40
 8007396:	af00      	add	r7, sp, #0
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	60b9      	str	r1, [r7, #8]
 800739c:	603b      	str	r3, [r7, #0]
 800739e:	4613      	mov	r3, r2
 80073a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073a2:	e050      	b.n	8007446 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073aa:	d04c      	beq.n	8007446 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80073ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d007      	beq.n	80073c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80073b2:	f7fa f93b 	bl	800162c <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073be:	429a      	cmp	r2, r3
 80073c0:	d241      	bcs.n	8007446 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	330c      	adds	r3, #12
 80073c8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073cc:	e853 3f00 	ldrex	r3, [r3]
 80073d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	330c      	adds	r3, #12
 80073e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073e2:	637a      	str	r2, [r7, #52]	; 0x34
 80073e4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073ea:	e841 2300 	strex	r3, r2, [r1]
 80073ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1e5      	bne.n	80073c2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3314      	adds	r3, #20
 80073fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	613b      	str	r3, [r7, #16]
   return(result);
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	f023 0301 	bic.w	r3, r3, #1
 800740c:	63bb      	str	r3, [r7, #56]	; 0x38
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3314      	adds	r3, #20
 8007414:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007416:	623a      	str	r2, [r7, #32]
 8007418:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741a:	69f9      	ldr	r1, [r7, #28]
 800741c:	6a3a      	ldr	r2, [r7, #32]
 800741e:	e841 2300 	strex	r3, r2, [r1]
 8007422:	61bb      	str	r3, [r7, #24]
   return(result);
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1e5      	bne.n	80073f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2220      	movs	r2, #32
 800742e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2220      	movs	r2, #32
 8007436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e00f      	b.n	8007466 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	4013      	ands	r3, r2
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	429a      	cmp	r2, r3
 8007454:	bf0c      	ite	eq
 8007456:	2301      	moveq	r3, #1
 8007458:	2300      	movne	r3, #0
 800745a:	b2db      	uxtb	r3, r3
 800745c:	461a      	mov	r2, r3
 800745e:	79fb      	ldrb	r3, [r7, #7]
 8007460:	429a      	cmp	r2, r3
 8007462:	d09f      	beq.n	80073a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3740      	adds	r7, #64	; 0x40
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
	...

08007470 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007474:	b09f      	sub	sp, #124	; 0x7c
 8007476:	af00      	add	r7, sp, #0
 8007478:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800747a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007486:	68d9      	ldr	r1, [r3, #12]
 8007488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	ea40 0301 	orr.w	r3, r0, r1
 8007490:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007494:	689a      	ldr	r2, [r3, #8]
 8007496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	431a      	orrs	r2, r3
 800749c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	431a      	orrs	r2, r3
 80074a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074a4:	69db      	ldr	r3, [r3, #28]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80074aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80074b4:	f021 010c 	bic.w	r1, r1, #12
 80074b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074be:	430b      	orrs	r3, r1
 80074c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80074cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ce:	6999      	ldr	r1, [r3, #24]
 80074d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	ea40 0301 	orr.w	r3, r0, r1
 80074d8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	4bc5      	ldr	r3, [pc, #788]	; (80077f4 <UART_SetConfig+0x384>)
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d004      	beq.n	80074ee <UART_SetConfig+0x7e>
 80074e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	4bc3      	ldr	r3, [pc, #780]	; (80077f8 <UART_SetConfig+0x388>)
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d103      	bne.n	80074f6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80074ee:	f7ff fd1d 	bl	8006f2c <HAL_RCC_GetPCLK2Freq>
 80074f2:	6778      	str	r0, [r7, #116]	; 0x74
 80074f4:	e002      	b.n	80074fc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074f6:	f7ff fd05 	bl	8006f04 <HAL_RCC_GetPCLK1Freq>
 80074fa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074fe:	69db      	ldr	r3, [r3, #28]
 8007500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007504:	f040 80b6 	bne.w	8007674 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007508:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800750a:	461c      	mov	r4, r3
 800750c:	f04f 0500 	mov.w	r5, #0
 8007510:	4622      	mov	r2, r4
 8007512:	462b      	mov	r3, r5
 8007514:	1891      	adds	r1, r2, r2
 8007516:	6439      	str	r1, [r7, #64]	; 0x40
 8007518:	415b      	adcs	r3, r3
 800751a:	647b      	str	r3, [r7, #68]	; 0x44
 800751c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007520:	1912      	adds	r2, r2, r4
 8007522:	eb45 0303 	adc.w	r3, r5, r3
 8007526:	f04f 0000 	mov.w	r0, #0
 800752a:	f04f 0100 	mov.w	r1, #0
 800752e:	00d9      	lsls	r1, r3, #3
 8007530:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007534:	00d0      	lsls	r0, r2, #3
 8007536:	4602      	mov	r2, r0
 8007538:	460b      	mov	r3, r1
 800753a:	1911      	adds	r1, r2, r4
 800753c:	6639      	str	r1, [r7, #96]	; 0x60
 800753e:	416b      	adcs	r3, r5
 8007540:	667b      	str	r3, [r7, #100]	; 0x64
 8007542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	461a      	mov	r2, r3
 8007548:	f04f 0300 	mov.w	r3, #0
 800754c:	1891      	adds	r1, r2, r2
 800754e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007550:	415b      	adcs	r3, r3
 8007552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007554:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007558:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800755c:	f7f8 fe88 	bl	8000270 <__aeabi_uldivmod>
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	4ba5      	ldr	r3, [pc, #660]	; (80077fc <UART_SetConfig+0x38c>)
 8007566:	fba3 2302 	umull	r2, r3, r3, r2
 800756a:	095b      	lsrs	r3, r3, #5
 800756c:	011e      	lsls	r6, r3, #4
 800756e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007570:	461c      	mov	r4, r3
 8007572:	f04f 0500 	mov.w	r5, #0
 8007576:	4622      	mov	r2, r4
 8007578:	462b      	mov	r3, r5
 800757a:	1891      	adds	r1, r2, r2
 800757c:	6339      	str	r1, [r7, #48]	; 0x30
 800757e:	415b      	adcs	r3, r3
 8007580:	637b      	str	r3, [r7, #52]	; 0x34
 8007582:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007586:	1912      	adds	r2, r2, r4
 8007588:	eb45 0303 	adc.w	r3, r5, r3
 800758c:	f04f 0000 	mov.w	r0, #0
 8007590:	f04f 0100 	mov.w	r1, #0
 8007594:	00d9      	lsls	r1, r3, #3
 8007596:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800759a:	00d0      	lsls	r0, r2, #3
 800759c:	4602      	mov	r2, r0
 800759e:	460b      	mov	r3, r1
 80075a0:	1911      	adds	r1, r2, r4
 80075a2:	65b9      	str	r1, [r7, #88]	; 0x58
 80075a4:	416b      	adcs	r3, r5
 80075a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	461a      	mov	r2, r3
 80075ae:	f04f 0300 	mov.w	r3, #0
 80075b2:	1891      	adds	r1, r2, r2
 80075b4:	62b9      	str	r1, [r7, #40]	; 0x28
 80075b6:	415b      	adcs	r3, r3
 80075b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075be:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80075c2:	f7f8 fe55 	bl	8000270 <__aeabi_uldivmod>
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	4b8c      	ldr	r3, [pc, #560]	; (80077fc <UART_SetConfig+0x38c>)
 80075cc:	fba3 1302 	umull	r1, r3, r3, r2
 80075d0:	095b      	lsrs	r3, r3, #5
 80075d2:	2164      	movs	r1, #100	; 0x64
 80075d4:	fb01 f303 	mul.w	r3, r1, r3
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	00db      	lsls	r3, r3, #3
 80075dc:	3332      	adds	r3, #50	; 0x32
 80075de:	4a87      	ldr	r2, [pc, #540]	; (80077fc <UART_SetConfig+0x38c>)
 80075e0:	fba2 2303 	umull	r2, r3, r2, r3
 80075e4:	095b      	lsrs	r3, r3, #5
 80075e6:	005b      	lsls	r3, r3, #1
 80075e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80075ec:	441e      	add	r6, r3
 80075ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075f0:	4618      	mov	r0, r3
 80075f2:	f04f 0100 	mov.w	r1, #0
 80075f6:	4602      	mov	r2, r0
 80075f8:	460b      	mov	r3, r1
 80075fa:	1894      	adds	r4, r2, r2
 80075fc:	623c      	str	r4, [r7, #32]
 80075fe:	415b      	adcs	r3, r3
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
 8007602:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007606:	1812      	adds	r2, r2, r0
 8007608:	eb41 0303 	adc.w	r3, r1, r3
 800760c:	f04f 0400 	mov.w	r4, #0
 8007610:	f04f 0500 	mov.w	r5, #0
 8007614:	00dd      	lsls	r5, r3, #3
 8007616:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800761a:	00d4      	lsls	r4, r2, #3
 800761c:	4622      	mov	r2, r4
 800761e:	462b      	mov	r3, r5
 8007620:	1814      	adds	r4, r2, r0
 8007622:	653c      	str	r4, [r7, #80]	; 0x50
 8007624:	414b      	adcs	r3, r1
 8007626:	657b      	str	r3, [r7, #84]	; 0x54
 8007628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	461a      	mov	r2, r3
 800762e:	f04f 0300 	mov.w	r3, #0
 8007632:	1891      	adds	r1, r2, r2
 8007634:	61b9      	str	r1, [r7, #24]
 8007636:	415b      	adcs	r3, r3
 8007638:	61fb      	str	r3, [r7, #28]
 800763a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800763e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007642:	f7f8 fe15 	bl	8000270 <__aeabi_uldivmod>
 8007646:	4602      	mov	r2, r0
 8007648:	460b      	mov	r3, r1
 800764a:	4b6c      	ldr	r3, [pc, #432]	; (80077fc <UART_SetConfig+0x38c>)
 800764c:	fba3 1302 	umull	r1, r3, r3, r2
 8007650:	095b      	lsrs	r3, r3, #5
 8007652:	2164      	movs	r1, #100	; 0x64
 8007654:	fb01 f303 	mul.w	r3, r1, r3
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	3332      	adds	r3, #50	; 0x32
 800765e:	4a67      	ldr	r2, [pc, #412]	; (80077fc <UART_SetConfig+0x38c>)
 8007660:	fba2 2303 	umull	r2, r3, r2, r3
 8007664:	095b      	lsrs	r3, r3, #5
 8007666:	f003 0207 	and.w	r2, r3, #7
 800766a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4432      	add	r2, r6
 8007670:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007672:	e0b9      	b.n	80077e8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007674:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007676:	461c      	mov	r4, r3
 8007678:	f04f 0500 	mov.w	r5, #0
 800767c:	4622      	mov	r2, r4
 800767e:	462b      	mov	r3, r5
 8007680:	1891      	adds	r1, r2, r2
 8007682:	6139      	str	r1, [r7, #16]
 8007684:	415b      	adcs	r3, r3
 8007686:	617b      	str	r3, [r7, #20]
 8007688:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800768c:	1912      	adds	r2, r2, r4
 800768e:	eb45 0303 	adc.w	r3, r5, r3
 8007692:	f04f 0000 	mov.w	r0, #0
 8007696:	f04f 0100 	mov.w	r1, #0
 800769a:	00d9      	lsls	r1, r3, #3
 800769c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80076a0:	00d0      	lsls	r0, r2, #3
 80076a2:	4602      	mov	r2, r0
 80076a4:	460b      	mov	r3, r1
 80076a6:	eb12 0804 	adds.w	r8, r2, r4
 80076aa:	eb43 0905 	adc.w	r9, r3, r5
 80076ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f04f 0100 	mov.w	r1, #0
 80076b8:	f04f 0200 	mov.w	r2, #0
 80076bc:	f04f 0300 	mov.w	r3, #0
 80076c0:	008b      	lsls	r3, r1, #2
 80076c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80076c6:	0082      	lsls	r2, r0, #2
 80076c8:	4640      	mov	r0, r8
 80076ca:	4649      	mov	r1, r9
 80076cc:	f7f8 fdd0 	bl	8000270 <__aeabi_uldivmod>
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	4b49      	ldr	r3, [pc, #292]	; (80077fc <UART_SetConfig+0x38c>)
 80076d6:	fba3 2302 	umull	r2, r3, r3, r2
 80076da:	095b      	lsrs	r3, r3, #5
 80076dc:	011e      	lsls	r6, r3, #4
 80076de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076e0:	4618      	mov	r0, r3
 80076e2:	f04f 0100 	mov.w	r1, #0
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	1894      	adds	r4, r2, r2
 80076ec:	60bc      	str	r4, [r7, #8]
 80076ee:	415b      	adcs	r3, r3
 80076f0:	60fb      	str	r3, [r7, #12]
 80076f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076f6:	1812      	adds	r2, r2, r0
 80076f8:	eb41 0303 	adc.w	r3, r1, r3
 80076fc:	f04f 0400 	mov.w	r4, #0
 8007700:	f04f 0500 	mov.w	r5, #0
 8007704:	00dd      	lsls	r5, r3, #3
 8007706:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800770a:	00d4      	lsls	r4, r2, #3
 800770c:	4622      	mov	r2, r4
 800770e:	462b      	mov	r3, r5
 8007710:	1814      	adds	r4, r2, r0
 8007712:	64bc      	str	r4, [r7, #72]	; 0x48
 8007714:	414b      	adcs	r3, r1
 8007716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	4618      	mov	r0, r3
 800771e:	f04f 0100 	mov.w	r1, #0
 8007722:	f04f 0200 	mov.w	r2, #0
 8007726:	f04f 0300 	mov.w	r3, #0
 800772a:	008b      	lsls	r3, r1, #2
 800772c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007730:	0082      	lsls	r2, r0, #2
 8007732:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007736:	f7f8 fd9b 	bl	8000270 <__aeabi_uldivmod>
 800773a:	4602      	mov	r2, r0
 800773c:	460b      	mov	r3, r1
 800773e:	4b2f      	ldr	r3, [pc, #188]	; (80077fc <UART_SetConfig+0x38c>)
 8007740:	fba3 1302 	umull	r1, r3, r3, r2
 8007744:	095b      	lsrs	r3, r3, #5
 8007746:	2164      	movs	r1, #100	; 0x64
 8007748:	fb01 f303 	mul.w	r3, r1, r3
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	011b      	lsls	r3, r3, #4
 8007750:	3332      	adds	r3, #50	; 0x32
 8007752:	4a2a      	ldr	r2, [pc, #168]	; (80077fc <UART_SetConfig+0x38c>)
 8007754:	fba2 2303 	umull	r2, r3, r2, r3
 8007758:	095b      	lsrs	r3, r3, #5
 800775a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800775e:	441e      	add	r6, r3
 8007760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007762:	4618      	mov	r0, r3
 8007764:	f04f 0100 	mov.w	r1, #0
 8007768:	4602      	mov	r2, r0
 800776a:	460b      	mov	r3, r1
 800776c:	1894      	adds	r4, r2, r2
 800776e:	603c      	str	r4, [r7, #0]
 8007770:	415b      	adcs	r3, r3
 8007772:	607b      	str	r3, [r7, #4]
 8007774:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007778:	1812      	adds	r2, r2, r0
 800777a:	eb41 0303 	adc.w	r3, r1, r3
 800777e:	f04f 0400 	mov.w	r4, #0
 8007782:	f04f 0500 	mov.w	r5, #0
 8007786:	00dd      	lsls	r5, r3, #3
 8007788:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800778c:	00d4      	lsls	r4, r2, #3
 800778e:	4622      	mov	r2, r4
 8007790:	462b      	mov	r3, r5
 8007792:	eb12 0a00 	adds.w	sl, r2, r0
 8007796:	eb43 0b01 	adc.w	fp, r3, r1
 800779a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	4618      	mov	r0, r3
 80077a0:	f04f 0100 	mov.w	r1, #0
 80077a4:	f04f 0200 	mov.w	r2, #0
 80077a8:	f04f 0300 	mov.w	r3, #0
 80077ac:	008b      	lsls	r3, r1, #2
 80077ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80077b2:	0082      	lsls	r2, r0, #2
 80077b4:	4650      	mov	r0, sl
 80077b6:	4659      	mov	r1, fp
 80077b8:	f7f8 fd5a 	bl	8000270 <__aeabi_uldivmod>
 80077bc:	4602      	mov	r2, r0
 80077be:	460b      	mov	r3, r1
 80077c0:	4b0e      	ldr	r3, [pc, #56]	; (80077fc <UART_SetConfig+0x38c>)
 80077c2:	fba3 1302 	umull	r1, r3, r3, r2
 80077c6:	095b      	lsrs	r3, r3, #5
 80077c8:	2164      	movs	r1, #100	; 0x64
 80077ca:	fb01 f303 	mul.w	r3, r1, r3
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	011b      	lsls	r3, r3, #4
 80077d2:	3332      	adds	r3, #50	; 0x32
 80077d4:	4a09      	ldr	r2, [pc, #36]	; (80077fc <UART_SetConfig+0x38c>)
 80077d6:	fba2 2303 	umull	r2, r3, r2, r3
 80077da:	095b      	lsrs	r3, r3, #5
 80077dc:	f003 020f 	and.w	r2, r3, #15
 80077e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4432      	add	r2, r6
 80077e6:	609a      	str	r2, [r3, #8]
}
 80077e8:	bf00      	nop
 80077ea:	377c      	adds	r7, #124	; 0x7c
 80077ec:	46bd      	mov	sp, r7
 80077ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f2:	bf00      	nop
 80077f4:	40011000 	.word	0x40011000
 80077f8:	40011400 	.word	0x40011400
 80077fc:	51eb851f 	.word	0x51eb851f

08007800 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007800:	b084      	sub	sp, #16
 8007802:	b580      	push	{r7, lr}
 8007804:	b084      	sub	sp, #16
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	f107 001c 	add.w	r0, r7, #28
 800780e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007814:	2b01      	cmp	r3, #1
 8007816:	d122      	bne.n	800785e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800782c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007842:	2b01      	cmp	r3, #1
 8007844:	d105      	bne.n	8007852 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f9a0 	bl	8007b98 <USB_CoreReset>
 8007858:	4603      	mov	r3, r0
 800785a:	73fb      	strb	r3, [r7, #15]
 800785c:	e01a      	b.n	8007894 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f994 	bl	8007b98 <USB_CoreReset>
 8007870:	4603      	mov	r3, r0
 8007872:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007876:	2b00      	cmp	r3, #0
 8007878:	d106      	bne.n	8007888 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	639a      	str	r2, [r3, #56]	; 0x38
 8007886:	e005      	b.n	8007894 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007896:	2b01      	cmp	r3, #1
 8007898:	d10b      	bne.n	80078b2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	f043 0206 	orr.w	r2, r3, #6
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f043 0220 	orr.w	r2, r3, #32
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078be:	b004      	add	sp, #16
 80078c0:	4770      	bx	lr

080078c2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f043 0201 	orr.w	r2, r3, #1
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	f023 0201 	bic.w	r2, r3, #1
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b084      	sub	sp, #16
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	460b      	mov	r3, r1
 8007910:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007912:	2300      	movs	r3, #0
 8007914:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007922:	78fb      	ldrb	r3, [r7, #3]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d115      	bne.n	8007954 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007934:	2001      	movs	r0, #1
 8007936:	f7f9 fe85 	bl	8001644 <HAL_Delay>
      ms++;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	3301      	adds	r3, #1
 800793e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f91a 	bl	8007b7a <USB_GetMode>
 8007946:	4603      	mov	r3, r0
 8007948:	2b01      	cmp	r3, #1
 800794a:	d01e      	beq.n	800798a <USB_SetCurrentMode+0x84>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2b31      	cmp	r3, #49	; 0x31
 8007950:	d9f0      	bls.n	8007934 <USB_SetCurrentMode+0x2e>
 8007952:	e01a      	b.n	800798a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007954:	78fb      	ldrb	r3, [r7, #3]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d115      	bne.n	8007986 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007966:	2001      	movs	r0, #1
 8007968:	f7f9 fe6c 	bl	8001644 <HAL_Delay>
      ms++;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	3301      	adds	r3, #1
 8007970:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f901 	bl	8007b7a <USB_GetMode>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d005      	beq.n	800798a <USB_SetCurrentMode+0x84>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2b31      	cmp	r3, #49	; 0x31
 8007982:	d9f0      	bls.n	8007966 <USB_SetCurrentMode+0x60>
 8007984:	e001      	b.n	800798a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e005      	b.n	8007996 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2b32      	cmp	r3, #50	; 0x32
 800798e:	d101      	bne.n	8007994 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e000      	b.n	8007996 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
	...

080079a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80079aa:	2300      	movs	r3, #0
 80079ac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	019b      	lsls	r3, r3, #6
 80079b2:	f043 0220 	orr.w	r2, r3, #32
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	3301      	adds	r3, #1
 80079be:	60fb      	str	r3, [r7, #12]
 80079c0:	4a08      	ldr	r2, [pc, #32]	; (80079e4 <USB_FlushTxFifo+0x44>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d901      	bls.n	80079ca <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e006      	b.n	80079d8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	f003 0320 	and.w	r3, r3, #32
 80079d2:	2b20      	cmp	r3, #32
 80079d4:	d0f1      	beq.n	80079ba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	00030d40 	.word	0x00030d40

080079e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079f0:	2300      	movs	r3, #0
 80079f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2210      	movs	r2, #16
 80079f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	3301      	adds	r3, #1
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	4a08      	ldr	r2, [pc, #32]	; (8007a24 <USB_FlushRxFifo+0x3c>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d901      	bls.n	8007a0a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e006      	b.n	8007a18 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	f003 0310 	and.w	r3, r3, #16
 8007a12:	2b10      	cmp	r3, #16
 8007a14:	d0f1      	beq.n	80079fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	00030d40 	.word	0x00030d40

08007a28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b089      	sub	sp, #36	; 0x24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	4611      	mov	r1, r2
 8007a34:	461a      	mov	r2, r3
 8007a36:	460b      	mov	r3, r1
 8007a38:	71fb      	strb	r3, [r7, #7]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007a46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d123      	bne.n	8007a96 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a4e:	88bb      	ldrh	r3, [r7, #4]
 8007a50:	3303      	adds	r3, #3
 8007a52:	089b      	lsrs	r3, r3, #2
 8007a54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a56:	2300      	movs	r3, #0
 8007a58:	61bb      	str	r3, [r7, #24]
 8007a5a:	e018      	b.n	8007a8e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a5c:	79fb      	ldrb	r3, [r7, #7]
 8007a5e:	031a      	lsls	r2, r3, #12
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a68:	461a      	mov	r2, r3
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	3301      	adds	r3, #1
 8007a74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	3301      	adds	r3, #1
 8007a86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	61bb      	str	r3, [r7, #24]
 8007a8e:	69ba      	ldr	r2, [r7, #24]
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d3e2      	bcc.n	8007a5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3724      	adds	r7, #36	; 0x24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b08b      	sub	sp, #44	; 0x2c
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007aba:	88fb      	ldrh	r3, [r7, #6]
 8007abc:	089b      	lsrs	r3, r3, #2
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007ac2:	88fb      	ldrh	r3, [r7, #6]
 8007ac4:	f003 0303 	and.w	r3, r3, #3
 8007ac8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007aca:	2300      	movs	r3, #0
 8007acc:	623b      	str	r3, [r7, #32]
 8007ace:	e014      	b.n	8007afa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	601a      	str	r2, [r3, #0]
    pDest++;
 8007adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ade:	3301      	adds	r3, #1
 8007ae0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	3301      	adds	r3, #1
 8007aec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af0:	3301      	adds	r3, #1
 8007af2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	3301      	adds	r3, #1
 8007af8:	623b      	str	r3, [r7, #32]
 8007afa:	6a3a      	ldr	r2, [r7, #32]
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d3e6      	bcc.n	8007ad0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007b02:	8bfb      	ldrh	r3, [r7, #30]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d01e      	beq.n	8007b46 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b12:	461a      	mov	r2, r3
 8007b14:	f107 0310 	add.w	r3, r7, #16
 8007b18:	6812      	ldr	r2, [r2, #0]
 8007b1a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	00db      	lsls	r3, r3, #3
 8007b24:	fa22 f303 	lsr.w	r3, r2, r3
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	701a      	strb	r2, [r3, #0]
      i++;
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	3301      	adds	r3, #1
 8007b32:	623b      	str	r3, [r7, #32]
      pDest++;
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	3301      	adds	r3, #1
 8007b38:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007b3a:	8bfb      	ldrh	r3, [r7, #30]
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007b40:	8bfb      	ldrh	r3, [r7, #30]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1ea      	bne.n	8007b1c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	372c      	adds	r7, #44	; 0x2c
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	4013      	ands	r3, r2
 8007b6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3714      	adds	r7, #20
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	f003 0301 	and.w	r3, r3, #1
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	370c      	adds	r7, #12
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
	...

08007b98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	60fb      	str	r3, [r7, #12]
 8007baa:	4a13      	ldr	r2, [pc, #76]	; (8007bf8 <USB_CoreReset+0x60>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d901      	bls.n	8007bb4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e01a      	b.n	8007bea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	daf3      	bge.n	8007ba4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	f043 0201 	orr.w	r2, r3, #1
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	60fb      	str	r3, [r7, #12]
 8007bd2:	4a09      	ldr	r2, [pc, #36]	; (8007bf8 <USB_CoreReset+0x60>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d901      	bls.n	8007bdc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e006      	b.n	8007bea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	f003 0301 	and.w	r3, r3, #1
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d0f1      	beq.n	8007bcc <USB_CoreReset+0x34>

  return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3714      	adds	r7, #20
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	00030d40 	.word	0x00030d40

08007bfc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bfc:	b084      	sub	sp, #16
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	f107 001c 	add.w	r0, r7, #28
 8007c0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c18:	461a      	mov	r2, r3
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d018      	beq.n	8007c80 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d10a      	bne.n	8007c6a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c62:	f043 0304 	orr.w	r3, r3, #4
 8007c66:	6013      	str	r3, [r2, #0]
 8007c68:	e014      	b.n	8007c94 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c78:	f023 0304 	bic.w	r3, r3, #4
 8007c7c:	6013      	str	r3, [r2, #0]
 8007c7e:	e009      	b.n	8007c94 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c8e:	f023 0304 	bic.w	r3, r3, #4
 8007c92:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007c94:	2110      	movs	r1, #16
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7ff fe82 	bl	80079a0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f7ff fea3 	bl	80079e8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60fb      	str	r3, [r7, #12]
 8007ca6:	e015      	b.n	8007cd4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	015a      	lsls	r2, r3, #5
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cba:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cc8:	461a      	mov	r2, r3
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d3e5      	bcc.n	8007ca8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00b      	beq.n	8007d0e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cfc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a13      	ldr	r2, [pc, #76]	; (8007d50 <USB_HostInit+0x154>)
 8007d02:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a13      	ldr	r2, [pc, #76]	; (8007d54 <USB_HostInit+0x158>)
 8007d08:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007d0c:	e009      	b.n	8007d22 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2280      	movs	r2, #128	; 0x80
 8007d12:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a10      	ldr	r2, [pc, #64]	; (8007d58 <USB_HostInit+0x15c>)
 8007d18:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a0f      	ldr	r2, [pc, #60]	; (8007d5c <USB_HostInit+0x160>)
 8007d1e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d105      	bne.n	8007d34 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	f043 0210 	orr.w	r2, r3, #16
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	699a      	ldr	r2, [r3, #24]
 8007d38:	4b09      	ldr	r3, [pc, #36]	; (8007d60 <USB_HostInit+0x164>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d4c:	b004      	add	sp, #16
 8007d4e:	4770      	bx	lr
 8007d50:	01000200 	.word	0x01000200
 8007d54:	00e00300 	.word	0x00e00300
 8007d58:	00600080 	.word	0x00600080
 8007d5c:	004000e0 	.word	0x004000e0
 8007d60:	a3200008 	.word	0xa3200008

08007d64 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d82:	f023 0303 	bic.w	r3, r3, #3
 8007d86:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	f003 0303 	and.w	r3, r3, #3
 8007d96:	68f9      	ldr	r1, [r7, #12]
 8007d98:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007da0:	78fb      	ldrb	r3, [r7, #3]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d107      	bne.n	8007db6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dac:	461a      	mov	r2, r3
 8007dae:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007db2:	6053      	str	r3, [r2, #4]
 8007db4:	e009      	b.n	8007dca <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007db6:	78fb      	ldrb	r3, [r7, #3]
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d106      	bne.n	8007dca <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	f241 7370 	movw	r3, #6000	; 0x1770
 8007dc8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3714      	adds	r7, #20
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007de4:	2300      	movs	r3, #0
 8007de6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007df8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e06:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007e08:	2064      	movs	r0, #100	; 0x64
 8007e0a:	f7f9 fc1b 	bl	8001644 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e1a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007e1c:	200a      	movs	r0, #10
 8007e1e:	f7f9 fc11 	bl	8001644 <HAL_Delay>

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	460b      	mov	r3, r1
 8007e36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007e50:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d109      	bne.n	8007e70 <USB_DriveVbus+0x44>
 8007e5c:	78fb      	ldrb	r3, [r7, #3]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d106      	bne.n	8007e70 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e6e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e7a:	d109      	bne.n	8007e90 <USB_DriveVbus+0x64>
 8007e7c:	78fb      	ldrb	r3, [r7, #3]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d106      	bne.n	8007e90 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e8e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b085      	sub	sp, #20
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	0c5b      	lsrs	r3, r3, #17
 8007ebc:	f003 0303 	and.w	r3, r3, #3
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	b29b      	uxth	r3, r3
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3714      	adds	r7, #20
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
	...

08007ef0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b088      	sub	sp, #32
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	4608      	mov	r0, r1
 8007efa:	4611      	mov	r1, r2
 8007efc:	461a      	mov	r2, r3
 8007efe:	4603      	mov	r3, r0
 8007f00:	70fb      	strb	r3, [r7, #3]
 8007f02:	460b      	mov	r3, r1
 8007f04:	70bb      	strb	r3, [r7, #2]
 8007f06:	4613      	mov	r3, r2
 8007f08:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007f12:	78fb      	ldrb	r3, [r7, #3]
 8007f14:	015a      	lsls	r2, r3, #5
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	4413      	add	r3, r2
 8007f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f1e:	461a      	mov	r2, r3
 8007f20:	f04f 33ff 	mov.w	r3, #4294967295
 8007f24:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007f26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	d87e      	bhi.n	800802c <USB_HC_Init+0x13c>
 8007f2e:	a201      	add	r2, pc, #4	; (adr r2, 8007f34 <USB_HC_Init+0x44>)
 8007f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f34:	08007f45 	.word	0x08007f45
 8007f38:	08007fef 	.word	0x08007fef
 8007f3c:	08007f45 	.word	0x08007f45
 8007f40:	08007fb1 	.word	0x08007fb1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007f44:	78fb      	ldrb	r3, [r7, #3]
 8007f46:	015a      	lsls	r2, r3, #5
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f50:	461a      	mov	r2, r3
 8007f52:	f240 439d 	movw	r3, #1181	; 0x49d
 8007f56:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007f58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	da10      	bge.n	8007f82 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007f60:	78fb      	ldrb	r3, [r7, #3]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	78fa      	ldrb	r2, [r7, #3]
 8007f70:	0151      	lsls	r1, r2, #5
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	440a      	add	r2, r1
 8007f76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f7e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007f80:	e057      	b.n	8008032 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d051      	beq.n	8008032 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007f8e:	78fb      	ldrb	r3, [r7, #3]
 8007f90:	015a      	lsls	r2, r3, #5
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	4413      	add	r3, r2
 8007f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	78fa      	ldrb	r2, [r7, #3]
 8007f9e:	0151      	lsls	r1, r2, #5
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	440a      	add	r2, r1
 8007fa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fa8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007fac:	60d3      	str	r3, [r2, #12]
      break;
 8007fae:	e040      	b.n	8008032 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007fb0:	78fb      	ldrb	r3, [r7, #3]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	f240 639d 	movw	r3, #1693	; 0x69d
 8007fc2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007fc4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	da34      	bge.n	8008036 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007fcc:	78fb      	ldrb	r3, [r7, #3]
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	78fa      	ldrb	r2, [r7, #3]
 8007fdc:	0151      	lsls	r1, r2, #5
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	440a      	add	r2, r1
 8007fe2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fea:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007fec:	e023      	b.n	8008036 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007fee:	78fb      	ldrb	r3, [r7, #3]
 8007ff0:	015a      	lsls	r2, r3, #5
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	f240 2325 	movw	r3, #549	; 0x225
 8008000:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008002:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008006:	2b00      	cmp	r3, #0
 8008008:	da17      	bge.n	800803a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800800a:	78fb      	ldrb	r3, [r7, #3]
 800800c:	015a      	lsls	r2, r3, #5
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	4413      	add	r3, r2
 8008012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	78fa      	ldrb	r2, [r7, #3]
 800801a:	0151      	lsls	r1, r2, #5
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	440a      	add	r2, r1
 8008020:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008024:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008028:	60d3      	str	r3, [r2, #12]
      }
      break;
 800802a:	e006      	b.n	800803a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	77fb      	strb	r3, [r7, #31]
      break;
 8008030:	e004      	b.n	800803c <USB_HC_Init+0x14c>
      break;
 8008032:	bf00      	nop
 8008034:	e002      	b.n	800803c <USB_HC_Init+0x14c>
      break;
 8008036:	bf00      	nop
 8008038:	e000      	b.n	800803c <USB_HC_Init+0x14c>
      break;
 800803a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008042:	699a      	ldr	r2, [r3, #24]
 8008044:	78fb      	ldrb	r3, [r7, #3]
 8008046:	f003 030f 	and.w	r3, r3, #15
 800804a:	2101      	movs	r1, #1
 800804c:	fa01 f303 	lsl.w	r3, r1, r3
 8008050:	6939      	ldr	r1, [r7, #16]
 8008052:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008056:	4313      	orrs	r3, r2
 8008058:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008066:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800806a:	2b00      	cmp	r3, #0
 800806c:	da03      	bge.n	8008076 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800806e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008072:	61bb      	str	r3, [r7, #24]
 8008074:	e001      	b.n	800807a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008076:	2300      	movs	r3, #0
 8008078:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7ff ff0f 	bl	8007e9e <USB_GetHostSpeed>
 8008080:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008082:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008086:	2b02      	cmp	r3, #2
 8008088:	d106      	bne.n	8008098 <USB_HC_Init+0x1a8>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b02      	cmp	r3, #2
 800808e:	d003      	beq.n	8008098 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008094:	617b      	str	r3, [r7, #20]
 8008096:	e001      	b.n	800809c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008098:	2300      	movs	r3, #0
 800809a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800809c:	787b      	ldrb	r3, [r7, #1]
 800809e:	059b      	lsls	r3, r3, #22
 80080a0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80080a4:	78bb      	ldrb	r3, [r7, #2]
 80080a6:	02db      	lsls	r3, r3, #11
 80080a8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80080ac:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80080ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80080b2:	049b      	lsls	r3, r3, #18
 80080b4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80080b8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80080ba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80080bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80080c0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80080c6:	78fb      	ldrb	r3, [r7, #3]
 80080c8:	0159      	lsls	r1, r3, #5
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	440b      	add	r3, r1
 80080ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080d2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80080d8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80080da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d10f      	bne.n	8008102 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80080e2:	78fb      	ldrb	r3, [r7, #3]
 80080e4:	015a      	lsls	r2, r3, #5
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	4413      	add	r3, r2
 80080ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	78fa      	ldrb	r2, [r7, #3]
 80080f2:	0151      	lsls	r1, r2, #5
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	440a      	add	r2, r1
 80080f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008100:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008102:	7ffb      	ldrb	r3, [r7, #31]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3720      	adds	r7, #32
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b08c      	sub	sp, #48	; 0x30
 8008110:	af02      	add	r7, sp, #8
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	4613      	mov	r3, r2
 8008118:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	785b      	ldrb	r3, [r3, #1]
 8008122:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008124:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008128:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800812e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008132:	2b00      	cmp	r3, #0
 8008134:	d02d      	beq.n	8008192 <USB_HC_StartXfer+0x86>
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	791b      	ldrb	r3, [r3, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d129      	bne.n	8008192 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800813e:	79fb      	ldrb	r3, [r7, #7]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d117      	bne.n	8008174 <USB_HC_StartXfer+0x68>
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	79db      	ldrb	r3, [r3, #7]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d003      	beq.n	8008154 <USB_HC_StartXfer+0x48>
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	79db      	ldrb	r3, [r3, #7]
 8008150:	2b02      	cmp	r3, #2
 8008152:	d10f      	bne.n	8008174 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	015a      	lsls	r2, r3, #5
 8008158:	6a3b      	ldr	r3, [r7, #32]
 800815a:	4413      	add	r3, r2
 800815c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	69fa      	ldr	r2, [r7, #28]
 8008164:	0151      	lsls	r1, r2, #5
 8008166:	6a3a      	ldr	r2, [r7, #32]
 8008168:	440a      	add	r2, r1
 800816a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800816e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008172:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008174:	79fb      	ldrb	r3, [r7, #7]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10b      	bne.n	8008192 <USB_HC_StartXfer+0x86>
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	795b      	ldrb	r3, [r3, #5]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d107      	bne.n	8008192 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	785b      	ldrb	r3, [r3, #1]
 8008186:	4619      	mov	r1, r3
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 fa2f 	bl	80085ec <USB_DoPing>
      return HAL_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	e0f8      	b.n	8008384 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d018      	beq.n	80081cc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	8912      	ldrh	r2, [r2, #8]
 80081a2:	4413      	add	r3, r2
 80081a4:	3b01      	subs	r3, #1
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	8912      	ldrh	r2, [r2, #8]
 80081aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80081ae:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80081b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80081b2:	8b7b      	ldrh	r3, [r7, #26]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d90b      	bls.n	80081d0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80081b8:	8b7b      	ldrh	r3, [r7, #26]
 80081ba:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80081bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	8912      	ldrh	r2, [r2, #8]
 80081c2:	fb02 f203 	mul.w	r2, r2, r3
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	611a      	str	r2, [r3, #16]
 80081ca:	e001      	b.n	80081d0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80081cc:	2301      	movs	r3, #1
 80081ce:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	78db      	ldrb	r3, [r3, #3]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d007      	beq.n	80081e8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80081d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	8912      	ldrh	r2, [r2, #8]
 80081de:	fb02 f203 	mul.w	r2, r2, r3
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	611a      	str	r2, [r3, #16]
 80081e6:	e003      	b.n	80081f0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	695a      	ldr	r2, [r3, #20]
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80081f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081fa:	04d9      	lsls	r1, r3, #19
 80081fc:	4b63      	ldr	r3, [pc, #396]	; (800838c <USB_HC_StartXfer+0x280>)
 80081fe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008200:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	7a9b      	ldrb	r3, [r3, #10]
 8008206:	075b      	lsls	r3, r3, #29
 8008208:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800820c:	69f9      	ldr	r1, [r7, #28]
 800820e:	0148      	lsls	r0, r1, #5
 8008210:	6a39      	ldr	r1, [r7, #32]
 8008212:	4401      	add	r1, r0
 8008214:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008218:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800821a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800821c:	79fb      	ldrb	r3, [r7, #7]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d009      	beq.n	8008236 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	68d9      	ldr	r1, [r3, #12]
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	015a      	lsls	r2, r3, #5
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	4413      	add	r3, r2
 800822e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008232:	460a      	mov	r2, r1
 8008234:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	bf0c      	ite	eq
 8008246:	2301      	moveq	r3, #1
 8008248:	2300      	movne	r3, #0
 800824a:	b2db      	uxtb	r3, r3
 800824c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	015a      	lsls	r2, r3, #5
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	4413      	add	r3, r2
 8008256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	69fa      	ldr	r2, [r7, #28]
 800825e:	0151      	lsls	r1, r2, #5
 8008260:	6a3a      	ldr	r2, [r7, #32]
 8008262:	440a      	add	r2, r1
 8008264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008268:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800826c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	015a      	lsls	r2, r3, #5
 8008272:	6a3b      	ldr	r3, [r7, #32]
 8008274:	4413      	add	r3, r2
 8008276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	7e7b      	ldrb	r3, [r7, #25]
 800827e:	075b      	lsls	r3, r3, #29
 8008280:	69f9      	ldr	r1, [r7, #28]
 8008282:	0148      	lsls	r0, r1, #5
 8008284:	6a39      	ldr	r1, [r7, #32]
 8008286:	4401      	add	r1, r0
 8008288:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800828c:	4313      	orrs	r3, r2
 800828e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	6a3b      	ldr	r3, [r7, #32]
 8008296:	4413      	add	r3, r2
 8008298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80082a6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	78db      	ldrb	r3, [r3, #3]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d004      	beq.n	80082ba <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082b6:	613b      	str	r3, [r7, #16]
 80082b8:	e003      	b.n	80082c2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80082c0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082c8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	015a      	lsls	r2, r3, #5
 80082ce:	6a3b      	ldr	r3, [r7, #32]
 80082d0:	4413      	add	r3, r2
 80082d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082d6:	461a      	mov	r2, r3
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80082dc:	79fb      	ldrb	r3, [r7, #7]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	e04e      	b.n	8008384 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	78db      	ldrb	r3, [r3, #3]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d149      	bne.n	8008382 <USB_HC_StartXfer+0x276>
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d045      	beq.n	8008382 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	79db      	ldrb	r3, [r3, #7]
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d830      	bhi.n	8008360 <USB_HC_StartXfer+0x254>
 80082fe:	a201      	add	r2, pc, #4	; (adr r2, 8008304 <USB_HC_StartXfer+0x1f8>)
 8008300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008304:	08008315 	.word	0x08008315
 8008308:	08008339 	.word	0x08008339
 800830c:	08008315 	.word	0x08008315
 8008310:	08008339 	.word	0x08008339
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	695b      	ldr	r3, [r3, #20]
 8008318:	3303      	adds	r3, #3
 800831a:	089b      	lsrs	r3, r3, #2
 800831c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800831e:	8afa      	ldrh	r2, [r7, #22]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008324:	b29b      	uxth	r3, r3
 8008326:	429a      	cmp	r2, r3
 8008328:	d91c      	bls.n	8008364 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	f043 0220 	orr.w	r2, r3, #32
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	619a      	str	r2, [r3, #24]
        }
        break;
 8008336:	e015      	b.n	8008364 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	695b      	ldr	r3, [r3, #20]
 800833c:	3303      	adds	r3, #3
 800833e:	089b      	lsrs	r3, r3, #2
 8008340:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008342:	8afa      	ldrh	r2, [r7, #22]
 8008344:	6a3b      	ldr	r3, [r7, #32]
 8008346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	b29b      	uxth	r3, r3
 800834e:	429a      	cmp	r2, r3
 8008350:	d90a      	bls.n	8008368 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	619a      	str	r2, [r3, #24]
        }
        break;
 800835e:	e003      	b.n	8008368 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008360:	bf00      	nop
 8008362:	e002      	b.n	800836a <USB_HC_StartXfer+0x25e>
        break;
 8008364:	bf00      	nop
 8008366:	e000      	b.n	800836a <USB_HC_StartXfer+0x25e>
        break;
 8008368:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	68d9      	ldr	r1, [r3, #12]
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	785a      	ldrb	r2, [r3, #1]
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	b29b      	uxth	r3, r3
 8008378:	2000      	movs	r0, #0
 800837a:	9000      	str	r0, [sp, #0]
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f7ff fb53 	bl	8007a28 <USB_WritePacket>
  }

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3728      	adds	r7, #40	; 0x28
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	1ff80000 	.word	0x1ff80000

08008390 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	b29b      	uxth	r3, r3
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b089      	sub	sp, #36	; 0x24
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	460b      	mov	r3, r1
 80083bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80083c2:	78fb      	ldrb	r3, [r7, #3]
 80083c4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80083c6:	2300      	movs	r3, #0
 80083c8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	015a      	lsls	r2, r3, #5
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	4413      	add	r3, r2
 80083d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	0c9b      	lsrs	r3, r3, #18
 80083da:	f003 0303 	and.w	r3, r3, #3
 80083de:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	015a      	lsls	r2, r3, #5
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	4413      	add	r3, r2
 80083e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	0fdb      	lsrs	r3, r3, #31
 80083f0:	f003 0301 	and.w	r3, r3, #1
 80083f4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f003 0320 	and.w	r3, r3, #32
 80083fe:	2b20      	cmp	r3, #32
 8008400:	d104      	bne.n	800840c <USB_HC_Halt+0x5a>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008408:	2300      	movs	r3, #0
 800840a:	e0e8      	b.n	80085de <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d002      	beq.n	8008418 <USB_HC_Halt+0x66>
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	2b02      	cmp	r3, #2
 8008416:	d173      	bne.n	8008500 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	4413      	add	r3, r2
 8008420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	0151      	lsls	r1, r2, #5
 800842a:	69ba      	ldr	r2, [r7, #24]
 800842c:	440a      	add	r2, r1
 800842e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008432:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008436:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	f003 0320 	and.w	r3, r3, #32
 8008440:	2b00      	cmp	r3, #0
 8008442:	f040 80cb 	bne.w	80085dc <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d143      	bne.n	80084da <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	015a      	lsls	r2, r3, #5
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	4413      	add	r3, r2
 800845a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	697a      	ldr	r2, [r7, #20]
 8008462:	0151      	lsls	r1, r2, #5
 8008464:	69ba      	ldr	r2, [r7, #24]
 8008466:	440a      	add	r2, r1
 8008468:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800846c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008470:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	015a      	lsls	r2, r3, #5
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	4413      	add	r3, r2
 800847a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	0151      	lsls	r1, r2, #5
 8008484:	69ba      	ldr	r2, [r7, #24]
 8008486:	440a      	add	r2, r1
 8008488:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800848c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008490:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	015a      	lsls	r2, r3, #5
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	4413      	add	r3, r2
 800849a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	697a      	ldr	r2, [r7, #20]
 80084a2:	0151      	lsls	r1, r2, #5
 80084a4:	69ba      	ldr	r2, [r7, #24]
 80084a6:	440a      	add	r2, r1
 80084a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084b0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	3301      	adds	r3, #1
 80084b6:	61fb      	str	r3, [r7, #28]
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084be:	d81d      	bhi.n	80084fc <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084d6:	d0ec      	beq.n	80084b2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80084d8:	e080      	b.n	80085dc <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	015a      	lsls	r2, r3, #5
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	4413      	add	r3, r2
 80084e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	0151      	lsls	r1, r2, #5
 80084ec:	69ba      	ldr	r2, [r7, #24]
 80084ee:	440a      	add	r2, r1
 80084f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084f8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80084fa:	e06f      	b.n	80085dc <USB_HC_Halt+0x22a>
            break;
 80084fc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80084fe:	e06d      	b.n	80085dc <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	4413      	add	r3, r2
 8008508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	697a      	ldr	r2, [r7, #20]
 8008510:	0151      	lsls	r1, r2, #5
 8008512:	69ba      	ldr	r2, [r7, #24]
 8008514:	440a      	add	r2, r1
 8008516:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800851a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800851e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800852c:	2b00      	cmp	r3, #0
 800852e:	d143      	bne.n	80085b8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	015a      	lsls	r2, r3, #5
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	4413      	add	r3, r2
 8008538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	0151      	lsls	r1, r2, #5
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	440a      	add	r2, r1
 8008546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800854a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800854e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	4413      	add	r3, r2
 8008558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	0151      	lsls	r1, r2, #5
 8008562:	69ba      	ldr	r2, [r7, #24]
 8008564:	440a      	add	r2, r1
 8008566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800856a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800856e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	4413      	add	r3, r2
 8008578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	0151      	lsls	r1, r2, #5
 8008582:	69ba      	ldr	r2, [r7, #24]
 8008584:	440a      	add	r2, r1
 8008586:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800858a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800858e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	3301      	adds	r3, #1
 8008594:	61fb      	str	r3, [r7, #28]
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800859c:	d81d      	bhi.n	80085da <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085b4:	d0ec      	beq.n	8008590 <USB_HC_Halt+0x1de>
 80085b6:	e011      	b.n	80085dc <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	015a      	lsls	r2, r3, #5
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	4413      	add	r3, r2
 80085c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	0151      	lsls	r1, r2, #5
 80085ca:	69ba      	ldr	r2, [r7, #24]
 80085cc:	440a      	add	r2, r1
 80085ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085d6:	6013      	str	r3, [r2, #0]
 80085d8:	e000      	b.n	80085dc <USB_HC_Halt+0x22a>
          break;
 80085da:	bf00      	nop
    }
  }

  return HAL_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3724      	adds	r7, #36	; 0x24
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
	...

080085ec <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b087      	sub	sp, #28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	460b      	mov	r3, r1
 80085f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80085fc:	78fb      	ldrb	r3, [r7, #3]
 80085fe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008600:	2301      	movs	r3, #1
 8008602:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	04da      	lsls	r2, r3, #19
 8008608:	4b15      	ldr	r3, [pc, #84]	; (8008660 <USB_DoPing+0x74>)
 800860a:	4013      	ands	r3, r2
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	0151      	lsls	r1, r2, #5
 8008610:	697a      	ldr	r2, [r7, #20]
 8008612:	440a      	add	r2, r1
 8008614:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008618:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800861c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	015a      	lsls	r2, r3, #5
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	4413      	add	r3, r2
 8008626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008634:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800863c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	015a      	lsls	r2, r3, #5
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	4413      	add	r3, r2
 8008646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800864a:	461a      	mov	r2, r3
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	371c      	adds	r7, #28
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	1ff80000 	.word	0x1ff80000

08008664 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008670:	2300      	movs	r3, #0
 8008672:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7ff f935 	bl	80078e4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800867a:	2110      	movs	r1, #16
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f7ff f98f 	bl	80079a0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7ff f9b0 	bl	80079e8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008688:	2300      	movs	r3, #0
 800868a:	613b      	str	r3, [r7, #16]
 800868c:	e01f      	b.n	80086ce <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	015a      	lsls	r2, r3, #5
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	4413      	add	r3, r2
 8008696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086a4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086ac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086b4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	015a      	lsls	r2, r3, #5
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	4413      	add	r3, r2
 80086be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086c2:	461a      	mov	r2, r3
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	3301      	adds	r3, #1
 80086cc:	613b      	str	r3, [r7, #16]
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	2b0f      	cmp	r3, #15
 80086d2:	d9dc      	bls.n	800868e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80086d4:	2300      	movs	r3, #0
 80086d6:	613b      	str	r3, [r7, #16]
 80086d8:	e034      	b.n	8008744 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	015a      	lsls	r2, r3, #5
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	4413      	add	r3, r2
 80086e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086f0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086f8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008700:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	015a      	lsls	r2, r3, #5
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	4413      	add	r3, r2
 800870a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800870e:	461a      	mov	r2, r3
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	3301      	adds	r3, #1
 8008718:	617b      	str	r3, [r7, #20]
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008720:	d80c      	bhi.n	800873c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	015a      	lsls	r2, r3, #5
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	4413      	add	r3, r2
 800872a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008738:	d0ec      	beq.n	8008714 <USB_StopHost+0xb0>
 800873a:	e000      	b.n	800873e <USB_StopHost+0xda>
        break;
 800873c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	3301      	adds	r3, #1
 8008742:	613b      	str	r3, [r7, #16]
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	2b0f      	cmp	r3, #15
 8008748:	d9c7      	bls.n	80086da <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008750:	461a      	mov	r2, r3
 8008752:	f04f 33ff 	mov.w	r3, #4294967295
 8008756:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f04f 32ff 	mov.w	r2, #4294967295
 800875e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7ff f8ae 	bl	80078c2 <USB_EnableGlobalInt>

  return HAL_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008774:	4904      	ldr	r1, [pc, #16]	; (8008788 <MX_FATFS_Init+0x18>)
 8008776:	4805      	ldr	r0, [pc, #20]	; (800878c <MX_FATFS_Init+0x1c>)
 8008778:	f006 f80a 	bl	800e790 <FATFS_LinkDriver>
 800877c:	4603      	mov	r3, r0
 800877e:	461a      	mov	r2, r3
 8008780:	4b03      	ldr	r3, [pc, #12]	; (8008790 <MX_FATFS_Init+0x20>)
 8008782:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008784:	bf00      	nop
 8008786:	bd80      	pop	{r7, pc}
 8008788:	200033e0 	.word	0x200033e0
 800878c:	08086e80 	.word	0x08086e80
 8008790:	20005448 	.word	0x20005448

08008794 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008794:	b480      	push	{r7}
 8008796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008798:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800879a:	4618      	mov	r0, r3
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	4603      	mov	r3, r0
 80087c4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80087ca:	79fb      	ldrb	r3, [r7, #7]
 80087cc:	4619      	mov	r1, r3
 80087ce:	4808      	ldr	r0, [pc, #32]	; (80087f0 <USBH_status+0x34>)
 80087d0:	f000 ff98 	bl	8009704 <USBH_MSC_UnitIsReady>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d002      	beq.n	80087e0 <USBH_status+0x24>
  {
    res = RES_OK;
 80087da:	2300      	movs	r3, #0
 80087dc:	73fb      	strb	r3, [r7, #15]
 80087de:	e001      	b.n	80087e4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	2000544c 	.word	0x2000544c

080087f4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b094      	sub	sp, #80	; 0x50
 80087f8:	af02      	add	r7, sp, #8
 80087fa:	60b9      	str	r1, [r7, #8]
 80087fc:	607a      	str	r2, [r7, #4]
 80087fe:	603b      	str	r3, [r7, #0]
 8008800:	4603      	mov	r3, r0
 8008802:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800880a:	7bf9      	ldrb	r1, [r7, #15]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	4818      	ldr	r0, [pc, #96]	; (8008878 <USBH_read+0x84>)
 8008816:	f000 ffbf 	bl	8009798 <USBH_MSC_Read>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d103      	bne.n	8008828 <USBH_read+0x34>
  {
    res = RES_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008826:	e020      	b.n	800886a <USBH_read+0x76>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008828:	f107 0210 	add.w	r2, r7, #16
 800882c:	7bfb      	ldrb	r3, [r7, #15]
 800882e:	4619      	mov	r1, r3
 8008830:	4811      	ldr	r0, [pc, #68]	; (8008878 <USBH_read+0x84>)
 8008832:	f000 ff8d 	bl	8009750 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008836:	7f7b      	ldrb	r3, [r7, #29]
 8008838:	2b3a      	cmp	r3, #58	; 0x3a
 800883a:	d005      	beq.n	8008848 <USBH_read+0x54>
 800883c:	2b3a      	cmp	r3, #58	; 0x3a
 800883e:	dc10      	bgt.n	8008862 <USBH_read+0x6e>
 8008840:	2b04      	cmp	r3, #4
 8008842:	d001      	beq.n	8008848 <USBH_read+0x54>
 8008844:	2b28      	cmp	r3, #40	; 0x28
 8008846:	d10c      	bne.n	8008862 <USBH_read+0x6e>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
 8008848:	480c      	ldr	r0, [pc, #48]	; (800887c <USBH_read+0x88>)
 800884a:	f006 fbbd 	bl	800efc8 <iprintf>
 800884e:	480c      	ldr	r0, [pc, #48]	; (8008880 <USBH_read+0x8c>)
 8008850:	f006 fbba 	bl	800efc8 <iprintf>
 8008854:	200a      	movs	r0, #10
 8008856:	f006 fbcf 	bl	800eff8 <putchar>
      res = RES_NOTRDY;
 800885a:	2303      	movs	r3, #3
 800885c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008860:	e003      	b.n	800886a <USBH_read+0x76>

    default:
      res = RES_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008868:	bf00      	nop
    }
  }

  return res;
 800886a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800886e:	4618      	mov	r0, r3
 8008870:	3748      	adds	r7, #72	; 0x48
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	2000544c 	.word	0x2000544c
 800887c:	0800fe90 	.word	0x0800fe90
 8008880:	0800fe98 	.word	0x0800fe98

08008884 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b094      	sub	sp, #80	; 0x50
 8008888:	af02      	add	r7, sp, #8
 800888a:	60b9      	str	r1, [r7, #8]
 800888c:	607a      	str	r2, [r7, #4]
 800888e:	603b      	str	r3, [r7, #0]
 8008890:	4603      	mov	r3, r0
 8008892:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800889a:	7bf9      	ldrb	r1, [r7, #15]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	4820      	ldr	r0, [pc, #128]	; (8008928 <USBH_write+0xa4>)
 80088a6:	f000 ffe0 	bl	800986a <USBH_MSC_Write>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d103      	bne.n	80088b8 <USBH_write+0x34>
  {
    res = RES_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80088b6:	e031      	b.n	800891c <USBH_write+0x98>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80088b8:	f107 0210 	add.w	r2, r7, #16
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	4619      	mov	r1, r3
 80088c0:	4819      	ldr	r0, [pc, #100]	; (8008928 <USBH_write+0xa4>)
 80088c2:	f000 ff45 	bl	8009750 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80088c6:	7f7b      	ldrb	r3, [r7, #29]
 80088c8:	2b3a      	cmp	r3, #58	; 0x3a
 80088ca:	d016      	beq.n	80088fa <USBH_write+0x76>
 80088cc:	2b3a      	cmp	r3, #58	; 0x3a
 80088ce:	dc21      	bgt.n	8008914 <USBH_write+0x90>
 80088d0:	2b28      	cmp	r3, #40	; 0x28
 80088d2:	d012      	beq.n	80088fa <USBH_write+0x76>
 80088d4:	2b28      	cmp	r3, #40	; 0x28
 80088d6:	dc1d      	bgt.n	8008914 <USBH_write+0x90>
 80088d8:	2b04      	cmp	r3, #4
 80088da:	d00e      	beq.n	80088fa <USBH_write+0x76>
 80088dc:	2b27      	cmp	r3, #39	; 0x27
 80088de:	d119      	bne.n	8008914 <USBH_write+0x90>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
 80088e0:	4812      	ldr	r0, [pc, #72]	; (800892c <USBH_write+0xa8>)
 80088e2:	f006 fb71 	bl	800efc8 <iprintf>
 80088e6:	4812      	ldr	r0, [pc, #72]	; (8008930 <USBH_write+0xac>)
 80088e8:	f006 fb6e 	bl	800efc8 <iprintf>
 80088ec:	200a      	movs	r0, #10
 80088ee:	f006 fb83 	bl	800eff8 <putchar>
      res = RES_WRPRT;
 80088f2:	2302      	movs	r3, #2
 80088f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80088f8:	e010      	b.n	800891c <USBH_write+0x98>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
 80088fa:	480c      	ldr	r0, [pc, #48]	; (800892c <USBH_write+0xa8>)
 80088fc:	f006 fb64 	bl	800efc8 <iprintf>
 8008900:	480c      	ldr	r0, [pc, #48]	; (8008934 <USBH_write+0xb0>)
 8008902:	f006 fb61 	bl	800efc8 <iprintf>
 8008906:	200a      	movs	r0, #10
 8008908:	f006 fb76 	bl	800eff8 <putchar>
      res = RES_NOTRDY;
 800890c:	2303      	movs	r3, #3
 800890e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008912:	e003      	b.n	800891c <USBH_write+0x98>

    default:
      res = RES_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800891a:	bf00      	nop
    }
  }

  return res;
 800891c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008920:	4618      	mov	r0, r3
 8008922:	3748      	adds	r7, #72	; 0x48
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	2000544c 	.word	0x2000544c
 800892c:	0800fe90 	.word	0x0800fe90
 8008930:	0800feb0 	.word	0x0800feb0
 8008934:	0800fe98 	.word	0x0800fe98

08008938 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b090      	sub	sp, #64	; 0x40
 800893c:	af00      	add	r7, sp, #0
 800893e:	4603      	mov	r3, r0
 8008940:	603a      	str	r2, [r7, #0]
 8008942:	71fb      	strb	r3, [r7, #7]
 8008944:	460b      	mov	r3, r1
 8008946:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800894e:	79bb      	ldrb	r3, [r7, #6]
 8008950:	2b03      	cmp	r3, #3
 8008952:	d852      	bhi.n	80089fa <USBH_ioctl+0xc2>
 8008954:	a201      	add	r2, pc, #4	; (adr r2, 800895c <USBH_ioctl+0x24>)
 8008956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895a:	bf00      	nop
 800895c:	0800896d 	.word	0x0800896d
 8008960:	08008975 	.word	0x08008975
 8008964:	0800899f 	.word	0x0800899f
 8008968:	080089cb 	.word	0x080089cb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008972:	e045      	b.n	8008a00 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008974:	f107 0208 	add.w	r2, r7, #8
 8008978:	79fb      	ldrb	r3, [r7, #7]
 800897a:	4619      	mov	r1, r3
 800897c:	4823      	ldr	r0, [pc, #140]	; (8008a0c <USBH_ioctl+0xd4>)
 800897e:	f000 fee7 	bl	8009750 <USBH_MSC_GetLUNInfo>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d106      	bne.n	8008996 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008994:	e034      	b.n	8008a00 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800899c:	e030      	b.n	8008a00 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800899e:	f107 0208 	add.w	r2, r7, #8
 80089a2:	79fb      	ldrb	r3, [r7, #7]
 80089a4:	4619      	mov	r1, r3
 80089a6:	4819      	ldr	r0, [pc, #100]	; (8008a0c <USBH_ioctl+0xd4>)
 80089a8:	f000 fed2 	bl	8009750 <USBH_MSC_GetLUNInfo>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d107      	bne.n	80089c2 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80089b2:	8a3b      	ldrh	r3, [r7, #16]
 80089b4:	461a      	mov	r2, r3
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80089c0:	e01e      	b.n	8008a00 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80089c8:	e01a      	b.n	8008a00 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80089ca:	f107 0208 	add.w	r2, r7, #8
 80089ce:	79fb      	ldrb	r3, [r7, #7]
 80089d0:	4619      	mov	r1, r3
 80089d2:	480e      	ldr	r0, [pc, #56]	; (8008a0c <USBH_ioctl+0xd4>)
 80089d4:	f000 febc 	bl	8009750 <USBH_MSC_GetLUNInfo>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d109      	bne.n	80089f2 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80089de:	8a3b      	ldrh	r3, [r7, #16]
 80089e0:	0a5b      	lsrs	r3, r3, #9
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	461a      	mov	r2, r3
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80089ea:	2300      	movs	r3, #0
 80089ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80089f0:	e006      	b.n	8008a00 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80089f8:	e002      	b.n	8008a00 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80089fa:	2304      	movs	r3, #4
 80089fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008a00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3740      	adds	r7, #64	; 0x40
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	2000544c 	.word	0x2000544c

08008a10 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008a10:	b590      	push	{r4, r7, lr}
 8008a12:	b089      	sub	sp, #36	; 0x24
 8008a14:	af04      	add	r7, sp, #16
 8008a16:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a1e:	7919      	ldrb	r1, [r3, #4]
 8008a20:	2350      	movs	r3, #80	; 0x50
 8008a22:	2206      	movs	r2, #6
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f001 fe1b 	bl	800a660 <USBH_FindInterface>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
 8008a30:	2bff      	cmp	r3, #255	; 0xff
 8008a32:	d002      	beq.n	8008a3a <USBH_MSC_InterfaceInit+0x2a>
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d90f      	bls.n	8008a5a <USBH_MSC_InterfaceInit+0x4a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 8008a3a:	4886      	ldr	r0, [pc, #536]	; (8008c54 <USBH_MSC_InterfaceInit+0x244>)
 8008a3c:	f006 fac4 	bl	800efc8 <iprintf>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	4883      	ldr	r0, [pc, #524]	; (8008c58 <USBH_MSC_InterfaceInit+0x248>)
 8008a4c:	f006 fabc 	bl	800efc8 <iprintf>
 8008a50:	200a      	movs	r0, #10
 8008a52:	f006 fad1 	bl	800eff8 <putchar>
    return USBH_FAIL;
 8008a56:	2302      	movs	r3, #2
 8008a58:	e0f8      	b.n	8008c4c <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f001 fd96 	bl	800a590 <USBH_SelectInterface>
 8008a64:	4603      	mov	r3, r0
 8008a66:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <USBH_MSC_InterfaceInit+0x62>
  {
    return USBH_FAIL;
 8008a6e:	2302      	movs	r3, #2
 8008a70:	e0ec      	b.n	8008c4c <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008a78:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008a7c:	f006 f9d4 	bl	800ee28 <malloc>
 8008a80:	4603      	mov	r3, r0
 8008a82:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a8a:	69db      	ldr	r3, [r3, #28]
 8008a8c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10a      	bne.n	8008aaa <USBH_MSC_InterfaceInit+0x9a>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
 8008a94:	486f      	ldr	r0, [pc, #444]	; (8008c54 <USBH_MSC_InterfaceInit+0x244>)
 8008a96:	f006 fa97 	bl	800efc8 <iprintf>
 8008a9a:	4870      	ldr	r0, [pc, #448]	; (8008c5c <USBH_MSC_InterfaceInit+0x24c>)
 8008a9c:	f006 fa94 	bl	800efc8 <iprintf>
 8008aa0:	200a      	movs	r0, #10
 8008aa2:	f006 faa9 	bl	800eff8 <putchar>
    return USBH_FAIL;
 8008aa6:	2302      	movs	r3, #2
 8008aa8:	e0d0      	b.n	8008c4c <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008aaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008aae:	2100      	movs	r1, #0
 8008ab0:	68b8      	ldr	r0, [r7, #8]
 8008ab2:	f006 f9d7 	bl	800ee64 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	211a      	movs	r1, #26
 8008abc:	fb01 f303 	mul.w	r3, r1, r3
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	b25b      	sxtb	r3, r3
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	da16      	bge.n	8008afc <USBH_MSC_InterfaceInit+0xec>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	211a      	movs	r1, #26
 8008ad4:	fb01 f303 	mul.w	r3, r1, r3
 8008ad8:	4413      	add	r3, r2
 8008ada:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ade:	781a      	ldrb	r2, [r3, #0]
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	211a      	movs	r1, #26
 8008aea:	fb01 f303 	mul.w	r3, r1, r3
 8008aee:	4413      	add	r3, r2
 8008af0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008af4:	881a      	ldrh	r2, [r3, #0]
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	815a      	strh	r2, [r3, #10]
 8008afa:	e015      	b.n	8008b28 <USBH_MSC_InterfaceInit+0x118>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	211a      	movs	r1, #26
 8008b02:	fb01 f303 	mul.w	r3, r1, r3
 8008b06:	4413      	add	r3, r2
 8008b08:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b0c:	781a      	ldrb	r2, [r3, #0]
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	211a      	movs	r1, #26
 8008b18:	fb01 f303 	mul.w	r3, r1, r3
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008b22:	881a      	ldrh	r2, [r3, #0]
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008b28:	7bfb      	ldrb	r3, [r7, #15]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	211a      	movs	r1, #26
 8008b2e:	fb01 f303 	mul.w	r3, r1, r3
 8008b32:	4413      	add	r3, r2
 8008b34:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	b25b      	sxtb	r3, r3
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	da16      	bge.n	8008b6e <USBH_MSC_InterfaceInit+0x15e>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	211a      	movs	r1, #26
 8008b46:	fb01 f303 	mul.w	r3, r1, r3
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b50:	781a      	ldrb	r2, [r3, #0]
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008b56:	7bfb      	ldrb	r3, [r7, #15]
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	211a      	movs	r1, #26
 8008b5c:	fb01 f303 	mul.w	r3, r1, r3
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008b66:	881a      	ldrh	r2, [r3, #0]
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	815a      	strh	r2, [r3, #10]
 8008b6c:	e015      	b.n	8008b9a <USBH_MSC_InterfaceInit+0x18a>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	211a      	movs	r1, #26
 8008b74:	fb01 f303 	mul.w	r3, r1, r3
 8008b78:	4413      	add	r3, r2
 8008b7a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b7e:	781a      	ldrb	r2, [r3, #0]
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	211a      	movs	r1, #26
 8008b8a:	fb01 f303 	mul.w	r3, r1, r3
 8008b8e:	4413      	add	r3, r2
 8008b90:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008b94:	881a      	ldrh	r2, [r3, #0]
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	799b      	ldrb	r3, [r3, #6]
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f003 f8cf 	bl	800bd56 <USBH_AllocPipe>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	461a      	mov	r2, r3
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	79db      	ldrb	r3, [r3, #7]
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f003 f8c5 	bl	800bd56 <USBH_AllocPipe>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	461a      	mov	r2, r3
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 feed 	bl	80099b4 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	7959      	ldrb	r1, [r3, #5]
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	7998      	ldrb	r0, [r3, #6]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	8912      	ldrh	r2, [r2, #8]
 8008bf2:	9202      	str	r2, [sp, #8]
 8008bf4:	2202      	movs	r2, #2
 8008bf6:	9201      	str	r2, [sp, #4]
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	4623      	mov	r3, r4
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f003 f87a 	bl	800bcf8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	7919      	ldrb	r1, [r3, #4]
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	79d8      	ldrb	r0, [r3, #7]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	8952      	ldrh	r2, [r2, #10]
 8008c1c:	9202      	str	r2, [sp, #8]
 8008c1e:	2202      	movs	r2, #2
 8008c20:	9201      	str	r2, [sp, #4]
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	4623      	mov	r3, r4
 8008c26:	4602      	mov	r2, r0
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f003 f865 	bl	800bcf8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	791b      	ldrb	r3, [r3, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f006 f835 	bl	800eca6 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	795b      	ldrb	r3, [r3, #5]
 8008c40:	2200      	movs	r2, #0
 8008c42:	4619      	mov	r1, r3
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f006 f82e 	bl	800eca6 <USBH_LL_SetToggle>

  return USBH_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3714      	adds	r7, #20
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd90      	pop	{r4, r7, pc}
 8008c54:	0800fed4 	.word	0x0800fed4
 8008c58:	0800fee0 	.word	0x0800fee0
 8008c5c:	0800ff08 	.word	0x0800ff08

08008c60 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c6e:	69db      	ldr	r3, [r3, #28]
 8008c70:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	795b      	ldrb	r3, [r3, #5]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00e      	beq.n	8008c98 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	795b      	ldrb	r3, [r3, #5]
 8008c7e:	4619      	mov	r1, r3
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f003 f858 	bl	800bd36 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	795b      	ldrb	r3, [r3, #5]
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f003 f883 	bl	800bd98 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	791b      	ldrb	r3, [r3, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00e      	beq.n	8008cbe <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	791b      	ldrb	r3, [r3, #4]
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f003 f845 	bl	800bd36 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	791b      	ldrb	r3, [r3, #4]
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f003 f870 	bl	800bd98 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cc4:	69db      	ldr	r3, [r3, #28]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00b      	beq.n	8008ce2 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cd0:	69db      	ldr	r3, [r3, #28]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f006 f8b0 	bl	800ee38 <free>
    phost->pActiveClass->pData = 0U;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cde:	2200      	movs	r2, #0
 8008ce0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cfa:	69db      	ldr	r3, [r3, #28]
 8008cfc:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	7b9b      	ldrb	r3, [r3, #14]
 8008d06:	2b03      	cmp	r3, #3
 8008d08:	d04a      	beq.n	8008da0 <USBH_MSC_ClassRequest+0xb4>
 8008d0a:	2b03      	cmp	r3, #3
 8008d0c:	dc54      	bgt.n	8008db8 <USBH_MSC_ClassRequest+0xcc>
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <USBH_MSC_ClassRequest+0x2a>
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d150      	bne.n	8008db8 <USBH_MSC_ClassRequest+0xcc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	4619      	mov	r1, r3
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fe2b 	bl	8009976 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008d20:	4603      	mov	r3, r0
 8008d22:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008d24:	7bfb      	ldrb	r3, [r7, #15]
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	d104      	bne.n	8008d34 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d140      	bne.n	8008dbc <USBH_MSC_ClassRequest+0xd0>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d804      	bhi.n	8008d4c <USBH_MSC_ClassRequest+0x60>
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	3301      	adds	r3, #1
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	e000      	b.n	8008d4e <USBH_MSC_ClassRequest+0x62>
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	4619      	mov	r1, r3
 8008d58:	481c      	ldr	r0, [pc, #112]	; (8008dcc <USBH_MSC_ClassRequest+0xe0>)
 8008d5a:	f006 f935 	bl	800efc8 <iprintf>
 8008d5e:	200a      	movs	r0, #10
 8008d60:	f006 f94a 	bl	800eff8 <putchar>

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008d64:	2300      	movs	r3, #0
 8008d66:	73bb      	strb	r3, [r7, #14]
 8008d68:	e014      	b.n	8008d94 <USBH_MSC_ClassRequest+0xa8>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008d6a:	7bbb      	ldrb	r3, [r7, #14]
 8008d6c:	68ba      	ldr	r2, [r7, #8]
 8008d6e:	2134      	movs	r1, #52	; 0x34
 8008d70:	fb01 f303 	mul.w	r3, r1, r3
 8008d74:	4413      	add	r3, r2
 8008d76:	3392      	adds	r3, #146	; 0x92
 8008d78:	2202      	movs	r2, #2
 8008d7a:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008d7c:	7bbb      	ldrb	r3, [r7, #14]
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	2134      	movs	r1, #52	; 0x34
 8008d82:	fb01 f303 	mul.w	r3, r1, r3
 8008d86:	4413      	add	r3, r2
 8008d88:	33c1      	adds	r3, #193	; 0xc1
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008d8e:	7bbb      	ldrb	r3, [r7, #14]
 8008d90:	3301      	adds	r3, #1
 8008d92:	73bb      	strb	r3, [r7, #14]
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	7bba      	ldrb	r2, [r7, #14]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d3e5      	bcc.n	8008d6a <USBH_MSC_ClassRequest+0x7e>
        }
      }
      break;
 8008d9e:	e00d      	b.n	8008dbc <USBH_MSC_ClassRequest+0xd0>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008da0:	2100      	movs	r1, #0
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f002 fb69 	bl	800b47a <USBH_ClrFeature>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d108      	bne.n	8008dc0 <USBH_MSC_ClassRequest+0xd4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	7bda      	ldrb	r2, [r3, #15]
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	739a      	strb	r2, [r3, #14]
      }
      break;
 8008db6:	e003      	b.n	8008dc0 <USBH_MSC_ClassRequest+0xd4>

    default:
      break;
 8008db8:	bf00      	nop
 8008dba:	e002      	b.n	8008dc2 <USBH_MSC_ClassRequest+0xd6>
      break;
 8008dbc:	bf00      	nop
 8008dbe:	e000      	b.n	8008dc2 <USBH_MSC_ClassRequest+0xd6>
      break;
 8008dc0:	bf00      	nop
  }

  return status;
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	0800ff30 	.word	0x0800ff30

08008dd0 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dde:	69db      	ldr	r3, [r3, #28]
 8008de0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008de2:	2301      	movs	r3, #1
 8008de4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008de6:	2301      	movs	r3, #1
 8008de8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008dea:	2301      	movs	r3, #1
 8008dec:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	7b1b      	ldrb	r3, [r3, #12]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d003      	beq.n	8008dfe <USBH_MSC_Process+0x2e>
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	f000 8355 	beq.w	80094a6 <USBH_MSC_Process+0x6d6>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008dfc:	e356      	b.n	80094ac <USBH_MSC_Process+0x6dc>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	f080 8333 	bcs.w	8009476 <USBH_MSC_Process+0x6a6>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e16:	4619      	mov	r1, r3
 8008e18:	693a      	ldr	r2, [r7, #16]
 8008e1a:	2334      	movs	r3, #52	; 0x34
 8008e1c:	fb03 f301 	mul.w	r3, r3, r1
 8008e20:	4413      	add	r3, r2
 8008e22:	3391      	adds	r3, #145	; 0x91
 8008e24:	2201      	movs	r2, #1
 8008e26:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e2e:	4619      	mov	r1, r3
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	2334      	movs	r3, #52	; 0x34
 8008e34:	fb03 f301 	mul.w	r3, r3, r1
 8008e38:	4413      	add	r3, r2
 8008e3a:	3390      	adds	r3, #144	; 0x90
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	2b08      	cmp	r3, #8
 8008e40:	f200 8327 	bhi.w	8009492 <USBH_MSC_Process+0x6c2>
 8008e44:	a201      	add	r2, pc, #4	; (adr r2, 8008e4c <USBH_MSC_Process+0x7c>)
 8008e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e4a:	bf00      	nop
 8008e4c:	08008e71 	.word	0x08008e71
 8008e50:	08009493 	.word	0x08009493
 8008e54:	08008fb9 	.word	0x08008fb9
 8008e58:	0800916d 	.word	0x0800916d
 8008e5c:	08008eab 	.word	0x08008eab
 8008e60:	080092d9 	.word	0x080092d9
 8008e64:	08009493 	.word	0x08009493
 8008e68:	08009493 	.word	0x08009493
 8008e6c:	08009465 	.word	0x08009465
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e76:	4619      	mov	r1, r3
 8008e78:	48b6      	ldr	r0, [pc, #728]	; (8009154 <USBH_MSC_Process+0x384>)
 8008e7a:	f006 f8a5 	bl	800efc8 <iprintf>
 8008e7e:	200a      	movs	r0, #10
 8008e80:	f006 f8ba 	bl	800eff8 <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	693a      	ldr	r2, [r7, #16]
 8008e8e:	2334      	movs	r3, #52	; 0x34
 8008e90:	fb03 f301 	mul.w	r3, r3, r1
 8008e94:	4413      	add	r3, r2
 8008e96:	3390      	adds	r3, #144	; 0x90
 8008e98:	2204      	movs	r2, #4
 8008e9a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008ea8:	e2fc      	b.n	80094a4 <USBH_MSC_Process+0x6d4>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008eb0:	b2d9      	uxtb	r1, r3
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008eb8:	461a      	mov	r2, r3
 8008eba:	2334      	movs	r3, #52	; 0x34
 8008ebc:	fb03 f302 	mul.w	r3, r3, r2
 8008ec0:	3398      	adds	r3, #152	; 0x98
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	3307      	adds	r3, #7
 8008ec8:	461a      	mov	r2, r3
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f001 f890 	bl	8009ff0 <USBH_MSC_SCSI_Inquiry>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d141      	bne.n	8008f5e <USBH_MSC_Process+0x18e>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	2334      	movs	r3, #52	; 0x34
 8008ee4:	fb03 f302 	mul.w	r3, r3, r2
 8008ee8:	3398      	adds	r3, #152	; 0x98
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	4413      	add	r3, r2
 8008eee:	330a      	adds	r3, #10
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	4899      	ldr	r0, [pc, #612]	; (8009158 <USBH_MSC_Process+0x388>)
 8008ef4:	f006 f868 	bl	800efc8 <iprintf>
 8008ef8:	200a      	movs	r0, #10
 8008efa:	f006 f87d 	bl	800eff8 <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f04:	461a      	mov	r2, r3
 8008f06:	2334      	movs	r3, #52	; 0x34
 8008f08:	fb03 f302 	mul.w	r3, r3, r2
 8008f0c:	33a0      	adds	r3, #160	; 0xa0
 8008f0e:	693a      	ldr	r2, [r7, #16]
 8008f10:	4413      	add	r3, r2
 8008f12:	330b      	adds	r3, #11
 8008f14:	4619      	mov	r1, r3
 8008f16:	4891      	ldr	r0, [pc, #580]	; (800915c <USBH_MSC_Process+0x38c>)
 8008f18:	f006 f856 	bl	800efc8 <iprintf>
 8008f1c:	200a      	movs	r0, #10
 8008f1e:	f006 f86b 	bl	800eff8 <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f28:	461a      	mov	r2, r3
 8008f2a:	2334      	movs	r3, #52	; 0x34
 8008f2c:	fb03 f302 	mul.w	r3, r3, r2
 8008f30:	33b0      	adds	r3, #176	; 0xb0
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	4413      	add	r3, r2
 8008f36:	330c      	adds	r3, #12
 8008f38:	4619      	mov	r1, r3
 8008f3a:	4889      	ldr	r0, [pc, #548]	; (8009160 <USBH_MSC_Process+0x390>)
 8008f3c:	f006 f844 	bl	800efc8 <iprintf>
 8008f40:	200a      	movs	r0, #10
 8008f42:	f006 f859 	bl	800eff8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	2334      	movs	r3, #52	; 0x34
 8008f52:	fb03 f301 	mul.w	r3, r3, r1
 8008f56:	4413      	add	r3, r2
 8008f58:	3390      	adds	r3, #144	; 0x90
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008f5e:	7bfb      	ldrb	r3, [r7, #15]
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d10c      	bne.n	8008f7e <USBH_MSC_Process+0x1ae>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	2334      	movs	r3, #52	; 0x34
 8008f70:	fb03 f301 	mul.w	r3, r3, r1
 8008f74:	4413      	add	r3, r2
 8008f76:	3390      	adds	r3, #144	; 0x90
 8008f78:	2205      	movs	r2, #5
 8008f7a:	701a      	strb	r2, [r3, #0]
            break;
 8008f7c:	e28b      	b.n	8009496 <USBH_MSC_Process+0x6c6>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
 8008f80:	2b04      	cmp	r3, #4
 8008f82:	f040 8288 	bne.w	8009496 <USBH_MSC_Process+0x6c6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	2334      	movs	r3, #52	; 0x34
 8008f92:	fb03 f301 	mul.w	r3, r3, r1
 8008f96:	4413      	add	r3, r2
 8008f98:	3390      	adds	r3, #144	; 0x90
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	693a      	ldr	r2, [r7, #16]
 8008fa8:	2334      	movs	r3, #52	; 0x34
 8008faa:	fb03 f301 	mul.w	r3, r3, r1
 8008fae:	4413      	add	r3, r2
 8008fb0:	3391      	adds	r3, #145	; 0x91
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	701a      	strb	r2, [r3, #0]
            break;
 8008fb6:	e26e      	b.n	8009496 <USBH_MSC_Process+0x6c6>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 ff56 	bl	8009e74 <USBH_MSC_SCSI_TestUnitReady>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008fcc:	7bbb      	ldrb	r3, [r7, #14]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d14f      	bne.n	8009072 <USBH_MSC_Process+0x2a2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fd8:	4619      	mov	r1, r3
 8008fda:	693a      	ldr	r2, [r7, #16]
 8008fdc:	2334      	movs	r3, #52	; 0x34
 8008fde:	fb03 f301 	mul.w	r3, r3, r1
 8008fe2:	4413      	add	r3, r2
 8008fe4:	3392      	adds	r3, #146	; 0x92
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d012      	beq.n	8009012 <USBH_MSC_Process+0x242>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	693a      	ldr	r2, [r7, #16]
 8008ff6:	2334      	movs	r3, #52	; 0x34
 8008ff8:	fb03 f301 	mul.w	r3, r3, r1
 8008ffc:	4413      	add	r3, r2
 8008ffe:	33c1      	adds	r3, #193	; 0xc1
 8009000:	2201      	movs	r2, #1
 8009002:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device ready");
 8009004:	4857      	ldr	r0, [pc, #348]	; (8009164 <USBH_MSC_Process+0x394>)
 8009006:	f005 ffdf 	bl	800efc8 <iprintf>
 800900a:	200a      	movs	r0, #10
 800900c:	f005 fff4 	bl	800eff8 <putchar>
 8009010:	e00b      	b.n	800902a <USBH_MSC_Process+0x25a>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009018:	4619      	mov	r1, r3
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	2334      	movs	r3, #52	; 0x34
 800901e:	fb03 f301 	mul.w	r3, r3, r1
 8009022:	4413      	add	r3, r2
 8009024:	33c1      	adds	r3, #193	; 0xc1
 8009026:	2200      	movs	r2, #0
 8009028:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009030:	4619      	mov	r1, r3
 8009032:	693a      	ldr	r2, [r7, #16]
 8009034:	2334      	movs	r3, #52	; 0x34
 8009036:	fb03 f301 	mul.w	r3, r3, r1
 800903a:	4413      	add	r3, r2
 800903c:	3390      	adds	r3, #144	; 0x90
 800903e:	2203      	movs	r2, #3
 8009040:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009048:	4619      	mov	r1, r3
 800904a:	693a      	ldr	r2, [r7, #16]
 800904c:	2334      	movs	r3, #52	; 0x34
 800904e:	fb03 f301 	mul.w	r3, r3, r1
 8009052:	4413      	add	r3, r2
 8009054:	3391      	adds	r3, #145	; 0x91
 8009056:	2200      	movs	r2, #0
 8009058:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009060:	4619      	mov	r1, r3
 8009062:	693a      	ldr	r2, [r7, #16]
 8009064:	2334      	movs	r3, #52	; 0x34
 8009066:	fb03 f301 	mul.w	r3, r3, r1
 800906a:	4413      	add	r3, r2
 800906c:	3392      	adds	r3, #146	; 0x92
 800906e:	2200      	movs	r2, #0
 8009070:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	2b02      	cmp	r3, #2
 8009076:	d150      	bne.n	800911a <USBH_MSC_Process+0x34a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800907e:	4619      	mov	r1, r3
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	2334      	movs	r3, #52	; 0x34
 8009084:	fb03 f301 	mul.w	r3, r3, r1
 8009088:	4413      	add	r3, r2
 800908a:	3392      	adds	r3, #146	; 0x92
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	2b02      	cmp	r3, #2
 8009090:	d012      	beq.n	80090b8 <USBH_MSC_Process+0x2e8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009098:	4619      	mov	r1, r3
 800909a:	693a      	ldr	r2, [r7, #16]
 800909c:	2334      	movs	r3, #52	; 0x34
 800909e:	fb03 f301 	mul.w	r3, r3, r1
 80090a2:	4413      	add	r3, r2
 80090a4:	33c1      	adds	r3, #193	; 0xc1
 80090a6:	2201      	movs	r2, #1
 80090a8:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device NOT ready");
 80090aa:	482f      	ldr	r0, [pc, #188]	; (8009168 <USBH_MSC_Process+0x398>)
 80090ac:	f005 ff8c 	bl	800efc8 <iprintf>
 80090b0:	200a      	movs	r0, #10
 80090b2:	f005 ffa1 	bl	800eff8 <putchar>
 80090b6:	e00b      	b.n	80090d0 <USBH_MSC_Process+0x300>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090be:	4619      	mov	r1, r3
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	2334      	movs	r3, #52	; 0x34
 80090c4:	fb03 f301 	mul.w	r3, r3, r1
 80090c8:	4413      	add	r3, r2
 80090ca:	33c1      	adds	r3, #193	; 0xc1
 80090cc:	2200      	movs	r2, #0
 80090ce:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090d6:	4619      	mov	r1, r3
 80090d8:	693a      	ldr	r2, [r7, #16]
 80090da:	2334      	movs	r3, #52	; 0x34
 80090dc:	fb03 f301 	mul.w	r3, r3, r1
 80090e0:	4413      	add	r3, r2
 80090e2:	3390      	adds	r3, #144	; 0x90
 80090e4:	2205      	movs	r2, #5
 80090e6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090ee:	4619      	mov	r1, r3
 80090f0:	693a      	ldr	r2, [r7, #16]
 80090f2:	2334      	movs	r3, #52	; 0x34
 80090f4:	fb03 f301 	mul.w	r3, r3, r1
 80090f8:	4413      	add	r3, r2
 80090fa:	3391      	adds	r3, #145	; 0x91
 80090fc:	2201      	movs	r2, #1
 80090fe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009106:	4619      	mov	r1, r3
 8009108:	693a      	ldr	r2, [r7, #16]
 800910a:	2334      	movs	r3, #52	; 0x34
 800910c:	fb03 f301 	mul.w	r3, r3, r1
 8009110:	4413      	add	r3, r2
 8009112:	3392      	adds	r3, #146	; 0x92
 8009114:	2202      	movs	r2, #2
 8009116:	701a      	strb	r2, [r3, #0]
            break;
 8009118:	e1bf      	b.n	800949a <USBH_MSC_Process+0x6ca>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800911a:	7bbb      	ldrb	r3, [r7, #14]
 800911c:	2b04      	cmp	r3, #4
 800911e:	f040 81bc 	bne.w	800949a <USBH_MSC_Process+0x6ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009128:	4619      	mov	r1, r3
 800912a:	693a      	ldr	r2, [r7, #16]
 800912c:	2334      	movs	r3, #52	; 0x34
 800912e:	fb03 f301 	mul.w	r3, r3, r1
 8009132:	4413      	add	r3, r2
 8009134:	3390      	adds	r3, #144	; 0x90
 8009136:	2201      	movs	r2, #1
 8009138:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009140:	4619      	mov	r1, r3
 8009142:	693a      	ldr	r2, [r7, #16]
 8009144:	2334      	movs	r3, #52	; 0x34
 8009146:	fb03 f301 	mul.w	r3, r3, r1
 800914a:	4413      	add	r3, r2
 800914c:	3391      	adds	r3, #145	; 0x91
 800914e:	2202      	movs	r2, #2
 8009150:	701a      	strb	r2, [r3, #0]
            break;
 8009152:	e1a2      	b.n	800949a <USBH_MSC_Process+0x6ca>
 8009154:	0800ff4c 	.word	0x0800ff4c
 8009158:	0800ff58 	.word	0x0800ff58
 800915c:	0800ff70 	.word	0x0800ff70
 8009160:	0800ff88 	.word	0x0800ff88
 8009164:	0800ffa0 	.word	0x0800ffa0
 8009168:	0800ffb4 	.word	0x0800ffb4
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009172:	b2d9      	uxtb	r1, r3
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800917a:	461a      	mov	r2, r3
 800917c:	2334      	movs	r3, #52	; 0x34
 800917e:	fb03 f302 	mul.w	r3, r3, r2
 8009182:	3390      	adds	r3, #144	; 0x90
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	4413      	add	r3, r2
 8009188:	3304      	adds	r3, #4
 800918a:	461a      	mov	r2, r3
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 feb4 	bl	8009efa <USBH_MSC_SCSI_ReadCapacity>
 8009192:	4603      	mov	r3, r0
 8009194:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009196:	7bfb      	ldrb	r3, [r7, #15]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d170      	bne.n	800927e <USBH_MSC_Process+0x4ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091a2:	4619      	mov	r1, r3
 80091a4:	693a      	ldr	r2, [r7, #16]
 80091a6:	2334      	movs	r3, #52	; 0x34
 80091a8:	fb03 f301 	mul.w	r3, r3, r1
 80091ac:	4413      	add	r3, r2
 80091ae:	33c1      	adds	r3, #193	; 0xc1
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d142      	bne.n	800923c <USBH_MSC_Process+0x46c>
                USBH_UsrLog("MSC Device capacity : %lu Bytes", \
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091bc:	4619      	mov	r1, r3
 80091be:	693a      	ldr	r2, [r7, #16]
 80091c0:	2334      	movs	r3, #52	; 0x34
 80091c2:	fb03 f301 	mul.w	r3, r3, r1
 80091c6:	4413      	add	r3, r2
 80091c8:	3394      	adds	r3, #148	; 0x94
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 80091d2:	4610      	mov	r0, r2
 80091d4:	6939      	ldr	r1, [r7, #16]
 80091d6:	2234      	movs	r2, #52	; 0x34
 80091d8:	fb02 f200 	mul.w	r2, r2, r0
 80091dc:	440a      	add	r2, r1
 80091de:	3298      	adds	r2, #152	; 0x98
 80091e0:	8812      	ldrh	r2, [r2, #0]
 80091e2:	fb02 f303 	mul.w	r3, r2, r3
 80091e6:	4619      	mov	r1, r3
 80091e8:	48b3      	ldr	r0, [pc, #716]	; (80094b8 <USBH_MSC_Process+0x6e8>)
 80091ea:	f005 feed 	bl	800efc8 <iprintf>
 80091ee:	200a      	movs	r0, #10
 80091f0:	f005 ff02 	bl	800eff8 <putchar>
                USBH_UsrLog("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091fa:	4619      	mov	r1, r3
 80091fc:	693a      	ldr	r2, [r7, #16]
 80091fe:	2334      	movs	r3, #52	; 0x34
 8009200:	fb03 f301 	mul.w	r3, r3, r1
 8009204:	4413      	add	r3, r2
 8009206:	3394      	adds	r3, #148	; 0x94
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4619      	mov	r1, r3
 800920c:	48ab      	ldr	r0, [pc, #684]	; (80094bc <USBH_MSC_Process+0x6ec>)
 800920e:	f005 fedb 	bl	800efc8 <iprintf>
 8009212:	200a      	movs	r0, #10
 8009214:	f005 fef0 	bl	800eff8 <putchar>
                USBH_UsrLog("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800921e:	4619      	mov	r1, r3
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	2334      	movs	r3, #52	; 0x34
 8009224:	fb03 f301 	mul.w	r3, r3, r1
 8009228:	4413      	add	r3, r2
 800922a:	3398      	adds	r3, #152	; 0x98
 800922c:	881b      	ldrh	r3, [r3, #0]
 800922e:	4619      	mov	r1, r3
 8009230:	48a3      	ldr	r0, [pc, #652]	; (80094c0 <USBH_MSC_Process+0x6f0>)
 8009232:	f005 fec9 	bl	800efc8 <iprintf>
 8009236:	200a      	movs	r0, #10
 8009238:	f005 fede 	bl	800eff8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009242:	4619      	mov	r1, r3
 8009244:	693a      	ldr	r2, [r7, #16]
 8009246:	2334      	movs	r3, #52	; 0x34
 8009248:	fb03 f301 	mul.w	r3, r3, r1
 800924c:	4413      	add	r3, r2
 800924e:	3390      	adds	r3, #144	; 0x90
 8009250:	2201      	movs	r2, #1
 8009252:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800925a:	4619      	mov	r1, r3
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	2334      	movs	r3, #52	; 0x34
 8009260:	fb03 f301 	mul.w	r3, r3, r1
 8009264:	4413      	add	r3, r2
 8009266:	3391      	adds	r3, #145	; 0x91
 8009268:	2200      	movs	r2, #0
 800926a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009272:	3301      	adds	r3, #1
 8009274:	b29a      	uxth	r2, r3
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800927c:	e10f      	b.n	800949e <USBH_MSC_Process+0x6ce>
            else if (scsi_status == USBH_FAIL)
 800927e:	7bfb      	ldrb	r3, [r7, #15]
 8009280:	2b02      	cmp	r3, #2
 8009282:	d10c      	bne.n	800929e <USBH_MSC_Process+0x4ce>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800928a:	4619      	mov	r1, r3
 800928c:	693a      	ldr	r2, [r7, #16]
 800928e:	2334      	movs	r3, #52	; 0x34
 8009290:	fb03 f301 	mul.w	r3, r3, r1
 8009294:	4413      	add	r3, r2
 8009296:	3390      	adds	r3, #144	; 0x90
 8009298:	2205      	movs	r2, #5
 800929a:	701a      	strb	r2, [r3, #0]
            break;
 800929c:	e0ff      	b.n	800949e <USBH_MSC_Process+0x6ce>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800929e:	7bfb      	ldrb	r3, [r7, #15]
 80092a0:	2b04      	cmp	r3, #4
 80092a2:	f040 80fc 	bne.w	800949e <USBH_MSC_Process+0x6ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092ac:	4619      	mov	r1, r3
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	2334      	movs	r3, #52	; 0x34
 80092b2:	fb03 f301 	mul.w	r3, r3, r1
 80092b6:	4413      	add	r3, r2
 80092b8:	3390      	adds	r3, #144	; 0x90
 80092ba:	2201      	movs	r2, #1
 80092bc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092c4:	4619      	mov	r1, r3
 80092c6:	693a      	ldr	r2, [r7, #16]
 80092c8:	2334      	movs	r3, #52	; 0x34
 80092ca:	fb03 f301 	mul.w	r3, r3, r1
 80092ce:	4413      	add	r3, r2
 80092d0:	3391      	adds	r3, #145	; 0x91
 80092d2:	2202      	movs	r2, #2
 80092d4:	701a      	strb	r2, [r3, #0]
            break;
 80092d6:	e0e2      	b.n	800949e <USBH_MSC_Process+0x6ce>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092de:	b2d9      	uxtb	r1, r3
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092e6:	461a      	mov	r2, r3
 80092e8:	2334      	movs	r3, #52	; 0x34
 80092ea:	fb03 f302 	mul.w	r3, r3, r2
 80092ee:	3398      	adds	r3, #152	; 0x98
 80092f0:	693a      	ldr	r2, [r7, #16]
 80092f2:	4413      	add	r3, r2
 80092f4:	3304      	adds	r3, #4
 80092f6:	461a      	mov	r2, r3
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 ff1e 	bl	800a13a <USBH_MSC_SCSI_RequestSense>
 80092fe:	4603      	mov	r3, r0
 8009300:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009302:	7bfb      	ldrb	r3, [r7, #15]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d17b      	bne.n	8009400 <USBH_MSC_Process+0x630>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800930e:	4619      	mov	r1, r3
 8009310:	693a      	ldr	r2, [r7, #16]
 8009312:	2334      	movs	r3, #52	; 0x34
 8009314:	fb03 f301 	mul.w	r3, r3, r1
 8009318:	4413      	add	r3, r2
 800931a:	339c      	adds	r3, #156	; 0x9c
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	2b06      	cmp	r3, #6
 8009320:	d00c      	beq.n	800933c <USBH_MSC_Process+0x56c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009328:	4619      	mov	r1, r3
 800932a:	693a      	ldr	r2, [r7, #16]
 800932c:	2334      	movs	r3, #52	; 0x34
 800932e:	fb03 f301 	mul.w	r3, r3, r1
 8009332:	4413      	add	r3, r2
 8009334:	339c      	adds	r3, #156	; 0x9c
 8009336:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009338:	2b02      	cmp	r3, #2
 800933a:	d117      	bne.n	800936c <USBH_MSC_Process+0x59c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	f242 720f 	movw	r2, #9999	; 0x270f
 800934e:	4293      	cmp	r3, r2
 8009350:	d80c      	bhi.n	800936c <USBH_MSC_Process+0x59c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009358:	4619      	mov	r1, r3
 800935a:	693a      	ldr	r2, [r7, #16]
 800935c:	2334      	movs	r3, #52	; 0x34
 800935e:	fb03 f301 	mul.w	r3, r3, r1
 8009362:	4413      	add	r3, r2
 8009364:	3390      	adds	r3, #144	; 0x90
 8009366:	2202      	movs	r2, #2
 8009368:	701a      	strb	r2, [r3, #0]
                  break;
 800936a:	e09b      	b.n	80094a4 <USBH_MSC_Process+0x6d4>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009372:	4619      	mov	r1, r3
 8009374:	693a      	ldr	r2, [r7, #16]
 8009376:	2334      	movs	r3, #52	; 0x34
 8009378:	fb03 f301 	mul.w	r3, r3, r1
 800937c:	4413      	add	r3, r2
 800937e:	339c      	adds	r3, #156	; 0x9c
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	4619      	mov	r1, r3
 8009384:	484f      	ldr	r0, [pc, #316]	; (80094c4 <USBH_MSC_Process+0x6f4>)
 8009386:	f005 fe1f 	bl	800efc8 <iprintf>
 800938a:	200a      	movs	r0, #10
 800938c:	f005 fe34 	bl	800eff8 <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009396:	4619      	mov	r1, r3
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	2334      	movs	r3, #52	; 0x34
 800939c:	fb03 f301 	mul.w	r3, r3, r1
 80093a0:	4413      	add	r3, r2
 80093a2:	339d      	adds	r3, #157	; 0x9d
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	4619      	mov	r1, r3
 80093a8:	4847      	ldr	r0, [pc, #284]	; (80094c8 <USBH_MSC_Process+0x6f8>)
 80093aa:	f005 fe0d 	bl	800efc8 <iprintf>
 80093ae:	200a      	movs	r0, #10
 80093b0:	f005 fe22 	bl	800eff8 <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093ba:	4619      	mov	r1, r3
 80093bc:	693a      	ldr	r2, [r7, #16]
 80093be:	2334      	movs	r3, #52	; 0x34
 80093c0:	fb03 f301 	mul.w	r3, r3, r1
 80093c4:	4413      	add	r3, r2
 80093c6:	339e      	adds	r3, #158	; 0x9e
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	4619      	mov	r1, r3
 80093cc:	483f      	ldr	r0, [pc, #252]	; (80094cc <USBH_MSC_Process+0x6fc>)
 80093ce:	f005 fdfb 	bl	800efc8 <iprintf>
 80093d2:	200a      	movs	r0, #10
 80093d4:	f005 fe10 	bl	800eff8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093de:	4619      	mov	r1, r3
 80093e0:	693a      	ldr	r2, [r7, #16]
 80093e2:	2334      	movs	r3, #52	; 0x34
 80093e4:	fb03 f301 	mul.w	r3, r3, r1
 80093e8:	4413      	add	r3, r2
 80093ea:	3390      	adds	r3, #144	; 0x90
 80093ec:	2201      	movs	r2, #1
 80093ee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093f6:	3301      	adds	r3, #1
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8009400:	7bfb      	ldrb	r3, [r7, #15]
 8009402:	2b02      	cmp	r3, #2
 8009404:	d112      	bne.n	800942c <USBH_MSC_Process+0x65c>
              USBH_UsrLog("MSC Device NOT ready");
 8009406:	4832      	ldr	r0, [pc, #200]	; (80094d0 <USBH_MSC_Process+0x700>)
 8009408:	f005 fdde 	bl	800efc8 <iprintf>
 800940c:	200a      	movs	r0, #10
 800940e:	f005 fdf3 	bl	800eff8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009418:	4619      	mov	r1, r3
 800941a:	693a      	ldr	r2, [r7, #16]
 800941c:	2334      	movs	r3, #52	; 0x34
 800941e:	fb03 f301 	mul.w	r3, r3, r1
 8009422:	4413      	add	r3, r2
 8009424:	3390      	adds	r3, #144	; 0x90
 8009426:	2208      	movs	r2, #8
 8009428:	701a      	strb	r2, [r3, #0]
            break;
 800942a:	e03a      	b.n	80094a2 <USBH_MSC_Process+0x6d2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800942c:	7bfb      	ldrb	r3, [r7, #15]
 800942e:	2b04      	cmp	r3, #4
 8009430:	d137      	bne.n	80094a2 <USBH_MSC_Process+0x6d2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009438:	4619      	mov	r1, r3
 800943a:	693a      	ldr	r2, [r7, #16]
 800943c:	2334      	movs	r3, #52	; 0x34
 800943e:	fb03 f301 	mul.w	r3, r3, r1
 8009442:	4413      	add	r3, r2
 8009444:	3390      	adds	r3, #144	; 0x90
 8009446:	2201      	movs	r2, #1
 8009448:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009450:	4619      	mov	r1, r3
 8009452:	693a      	ldr	r2, [r7, #16]
 8009454:	2334      	movs	r3, #52	; 0x34
 8009456:	fb03 f301 	mul.w	r3, r3, r1
 800945a:	4413      	add	r3, r2
 800945c:	3391      	adds	r3, #145	; 0x91
 800945e:	2202      	movs	r2, #2
 8009460:	701a      	strb	r2, [r3, #0]
            break;
 8009462:	e01e      	b.n	80094a2 <USBH_MSC_Process+0x6d2>
            MSC_Handle->current_lun++;
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800946a:	3301      	adds	r3, #1
 800946c:	b29a      	uxth	r2, r3
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009474:	e016      	b.n	80094a4 <USBH_MSC_Process+0x6d4>
        MSC_Handle->current_lun = 0U;
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	2200      	movs	r2, #0
 800947a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	2201      	movs	r2, #1
 8009482:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800948a:	2102      	movs	r1, #2
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	4798      	blx	r3
      break;
 8009490:	e00c      	b.n	80094ac <USBH_MSC_Process+0x6dc>
            break;
 8009492:	bf00      	nop
 8009494:	e00a      	b.n	80094ac <USBH_MSC_Process+0x6dc>
            break;
 8009496:	bf00      	nop
 8009498:	e008      	b.n	80094ac <USBH_MSC_Process+0x6dc>
            break;
 800949a:	bf00      	nop
 800949c:	e006      	b.n	80094ac <USBH_MSC_Process+0x6dc>
            break;
 800949e:	bf00      	nop
 80094a0:	e004      	b.n	80094ac <USBH_MSC_Process+0x6dc>
            break;
 80094a2:	bf00      	nop
      break;
 80094a4:	e002      	b.n	80094ac <USBH_MSC_Process+0x6dc>
      error = USBH_OK;
 80094a6:	2300      	movs	r3, #0
 80094a8:	75fb      	strb	r3, [r7, #23]
      break;
 80094aa:	bf00      	nop
  }
  return error;
 80094ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3718      	adds	r7, #24
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	0800ffcc 	.word	0x0800ffcc
 80094bc:	0800ffec 	.word	0x0800ffec
 80094c0:	08010000 	.word	0x08010000
 80094c4:	08010014 	.word	0x08010014
 80094c8:	08010024 	.word	0x08010024
 80094cc:	08010040 	.word	0x08010040
 80094d0:	0800ffb4 	.word	0x0800ffb4

080094d4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
	...

080094ec <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b088      	sub	sp, #32
 80094f0:	af02      	add	r7, sp, #8
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	460b      	mov	r3, r1
 80094f6:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094fe:	69db      	ldr	r3, [r3, #28]
 8009500:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009502:	2301      	movs	r3, #1
 8009504:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8009506:	2301      	movs	r3, #1
 8009508:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800950a:	78fb      	ldrb	r3, [r7, #3]
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	2134      	movs	r1, #52	; 0x34
 8009510:	fb01 f303 	mul.w	r3, r1, r3
 8009514:	4413      	add	r3, r2
 8009516:	3390      	adds	r3, #144	; 0x90
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	2b07      	cmp	r3, #7
 800951c:	d03d      	beq.n	800959a <USBH_MSC_RdWrProcess+0xae>
 800951e:	2b07      	cmp	r3, #7
 8009520:	f300 80dc 	bgt.w	80096dc <USBH_MSC_RdWrProcess+0x1f0>
 8009524:	2b05      	cmp	r3, #5
 8009526:	d06d      	beq.n	8009604 <USBH_MSC_RdWrProcess+0x118>
 8009528:	2b06      	cmp	r3, #6
 800952a:	f040 80d7 	bne.w	80096dc <USBH_MSC_RdWrProcess+0x1f0>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800952e:	78f9      	ldrb	r1, [r7, #3]
 8009530:	2300      	movs	r3, #0
 8009532:	9300      	str	r3, [sp, #0]
 8009534:	2300      	movs	r3, #0
 8009536:	2200      	movs	r2, #0
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fee2 	bl	800a302 <USBH_MSC_SCSI_Read>
 800953e:	4603      	mov	r3, r0
 8009540:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009542:	7bfb      	ldrb	r3, [r7, #15]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d10b      	bne.n	8009560 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009548:	78fb      	ldrb	r3, [r7, #3]
 800954a:	693a      	ldr	r2, [r7, #16]
 800954c:	2134      	movs	r1, #52	; 0x34
 800954e:	fb01 f303 	mul.w	r3, r1, r3
 8009552:	4413      	add	r3, r2
 8009554:	3390      	adds	r3, #144	; 0x90
 8009556:	2201      	movs	r2, #1
 8009558:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800955e:	e0bf      	b.n	80096e0 <USBH_MSC_RdWrProcess+0x1f4>
      else if (scsi_status == USBH_FAIL)
 8009560:	7bfb      	ldrb	r3, [r7, #15]
 8009562:	2b02      	cmp	r3, #2
 8009564:	d109      	bne.n	800957a <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009566:	78fb      	ldrb	r3, [r7, #3]
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	2134      	movs	r1, #52	; 0x34
 800956c:	fb01 f303 	mul.w	r3, r1, r3
 8009570:	4413      	add	r3, r2
 8009572:	3390      	adds	r3, #144	; 0x90
 8009574:	2205      	movs	r2, #5
 8009576:	701a      	strb	r2, [r3, #0]
      break;
 8009578:	e0b2      	b.n	80096e0 <USBH_MSC_RdWrProcess+0x1f4>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800957a:	7bfb      	ldrb	r3, [r7, #15]
 800957c:	2b04      	cmp	r3, #4
 800957e:	f040 80af 	bne.w	80096e0 <USBH_MSC_RdWrProcess+0x1f4>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009582:	78fb      	ldrb	r3, [r7, #3]
 8009584:	693a      	ldr	r2, [r7, #16]
 8009586:	2134      	movs	r1, #52	; 0x34
 8009588:	fb01 f303 	mul.w	r3, r1, r3
 800958c:	4413      	add	r3, r2
 800958e:	3390      	adds	r3, #144	; 0x90
 8009590:	2208      	movs	r2, #8
 8009592:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009594:	2302      	movs	r3, #2
 8009596:	75fb      	strb	r3, [r7, #23]
      break;
 8009598:	e0a2      	b.n	80096e0 <USBH_MSC_RdWrProcess+0x1f4>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800959a:	78f9      	ldrb	r1, [r7, #3]
 800959c:	2300      	movs	r3, #0
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	2300      	movs	r3, #0
 80095a2:	2200      	movs	r2, #0
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 fe41 	bl	800a22c <USBH_MSC_SCSI_Write>
 80095aa:	4603      	mov	r3, r0
 80095ac:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80095ae:	7bfb      	ldrb	r3, [r7, #15]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10b      	bne.n	80095cc <USBH_MSC_RdWrProcess+0xe0>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80095b4:	78fb      	ldrb	r3, [r7, #3]
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	2134      	movs	r1, #52	; 0x34
 80095ba:	fb01 f303 	mul.w	r3, r1, r3
 80095be:	4413      	add	r3, r2
 80095c0:	3390      	adds	r3, #144	; 0x90
 80095c2:	2201      	movs	r2, #1
 80095c4:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80095ca:	e08b      	b.n	80096e4 <USBH_MSC_RdWrProcess+0x1f8>
      else if (scsi_status == USBH_FAIL)
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	d109      	bne.n	80095e6 <USBH_MSC_RdWrProcess+0xfa>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80095d2:	78fb      	ldrb	r3, [r7, #3]
 80095d4:	693a      	ldr	r2, [r7, #16]
 80095d6:	2134      	movs	r1, #52	; 0x34
 80095d8:	fb01 f303 	mul.w	r3, r1, r3
 80095dc:	4413      	add	r3, r2
 80095de:	3390      	adds	r3, #144	; 0x90
 80095e0:	2205      	movs	r2, #5
 80095e2:	701a      	strb	r2, [r3, #0]
      break;
 80095e4:	e07e      	b.n	80096e4 <USBH_MSC_RdWrProcess+0x1f8>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80095e6:	7bfb      	ldrb	r3, [r7, #15]
 80095e8:	2b04      	cmp	r3, #4
 80095ea:	d17b      	bne.n	80096e4 <USBH_MSC_RdWrProcess+0x1f8>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80095ec:	78fb      	ldrb	r3, [r7, #3]
 80095ee:	693a      	ldr	r2, [r7, #16]
 80095f0:	2134      	movs	r1, #52	; 0x34
 80095f2:	fb01 f303 	mul.w	r3, r1, r3
 80095f6:	4413      	add	r3, r2
 80095f8:	3390      	adds	r3, #144	; 0x90
 80095fa:	2208      	movs	r2, #8
 80095fc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80095fe:	2302      	movs	r3, #2
 8009600:	75fb      	strb	r3, [r7, #23]
      break;
 8009602:	e06f      	b.n	80096e4 <USBH_MSC_RdWrProcess+0x1f8>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8009604:	78fb      	ldrb	r3, [r7, #3]
 8009606:	2234      	movs	r2, #52	; 0x34
 8009608:	fb02 f303 	mul.w	r3, r2, r3
 800960c:	3398      	adds	r3, #152	; 0x98
 800960e:	693a      	ldr	r2, [r7, #16]
 8009610:	4413      	add	r3, r2
 8009612:	1d1a      	adds	r2, r3, #4
 8009614:	78fb      	ldrb	r3, [r7, #3]
 8009616:	4619      	mov	r1, r3
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 fd8e 	bl	800a13a <USBH_MSC_SCSI_RequestSense>
 800961e:	4603      	mov	r3, r0
 8009620:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d140      	bne.n	80096aa <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 8009628:	78fb      	ldrb	r3, [r7, #3]
 800962a:	693a      	ldr	r2, [r7, #16]
 800962c:	2134      	movs	r1, #52	; 0x34
 800962e:	fb01 f303 	mul.w	r3, r1, r3
 8009632:	4413      	add	r3, r2
 8009634:	339c      	adds	r3, #156	; 0x9c
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	4619      	mov	r1, r3
 800963a:	482e      	ldr	r0, [pc, #184]	; (80096f4 <USBH_MSC_RdWrProcess+0x208>)
 800963c:	f005 fcc4 	bl	800efc8 <iprintf>
 8009640:	200a      	movs	r0, #10
 8009642:	f005 fcd9 	bl	800eff8 <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
 8009646:	78fb      	ldrb	r3, [r7, #3]
 8009648:	693a      	ldr	r2, [r7, #16]
 800964a:	2134      	movs	r1, #52	; 0x34
 800964c:	fb01 f303 	mul.w	r3, r1, r3
 8009650:	4413      	add	r3, r2
 8009652:	339d      	adds	r3, #157	; 0x9d
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	4619      	mov	r1, r3
 8009658:	4827      	ldr	r0, [pc, #156]	; (80096f8 <USBH_MSC_RdWrProcess+0x20c>)
 800965a:	f005 fcb5 	bl	800efc8 <iprintf>
 800965e:	200a      	movs	r0, #10
 8009660:	f005 fcca 	bl	800eff8 <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
 8009664:	78fb      	ldrb	r3, [r7, #3]
 8009666:	693a      	ldr	r2, [r7, #16]
 8009668:	2134      	movs	r1, #52	; 0x34
 800966a:	fb01 f303 	mul.w	r3, r1, r3
 800966e:	4413      	add	r3, r2
 8009670:	339e      	adds	r3, #158	; 0x9e
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	4619      	mov	r1, r3
 8009676:	4821      	ldr	r0, [pc, #132]	; (80096fc <USBH_MSC_RdWrProcess+0x210>)
 8009678:	f005 fca6 	bl	800efc8 <iprintf>
 800967c:	200a      	movs	r0, #10
 800967e:	f005 fcbb 	bl	800eff8 <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009682:	78fb      	ldrb	r3, [r7, #3]
 8009684:	693a      	ldr	r2, [r7, #16]
 8009686:	2134      	movs	r1, #52	; 0x34
 8009688:	fb01 f303 	mul.w	r3, r1, r3
 800968c:	4413      	add	r3, r2
 800968e:	3390      	adds	r3, #144	; 0x90
 8009690:	2201      	movs	r2, #1
 8009692:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009694:	78fb      	ldrb	r3, [r7, #3]
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	2134      	movs	r1, #52	; 0x34
 800969a:	fb01 f303 	mul.w	r3, r1, r3
 800969e:	4413      	add	r3, r2
 80096a0:	3391      	adds	r3, #145	; 0x91
 80096a2:	2202      	movs	r2, #2
 80096a4:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80096a6:	2302      	movs	r3, #2
 80096a8:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d106      	bne.n	80096be <USBH_MSC_RdWrProcess+0x1d2>
      {
        USBH_UsrLog("MSC Device NOT ready");
 80096b0:	4813      	ldr	r0, [pc, #76]	; (8009700 <USBH_MSC_RdWrProcess+0x214>)
 80096b2:	f005 fc89 	bl	800efc8 <iprintf>
 80096b6:	200a      	movs	r0, #10
 80096b8:	f005 fc9e 	bl	800eff8 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80096bc:	e014      	b.n	80096e8 <USBH_MSC_RdWrProcess+0x1fc>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80096be:	7bfb      	ldrb	r3, [r7, #15]
 80096c0:	2b04      	cmp	r3, #4
 80096c2:	d111      	bne.n	80096e8 <USBH_MSC_RdWrProcess+0x1fc>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80096c4:	78fb      	ldrb	r3, [r7, #3]
 80096c6:	693a      	ldr	r2, [r7, #16]
 80096c8:	2134      	movs	r1, #52	; 0x34
 80096ca:	fb01 f303 	mul.w	r3, r1, r3
 80096ce:	4413      	add	r3, r2
 80096d0:	3390      	adds	r3, #144	; 0x90
 80096d2:	2208      	movs	r2, #8
 80096d4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80096d6:	2302      	movs	r3, #2
 80096d8:	75fb      	strb	r3, [r7, #23]
      break;
 80096da:	e005      	b.n	80096e8 <USBH_MSC_RdWrProcess+0x1fc>

    default:
      break;
 80096dc:	bf00      	nop
 80096de:	e004      	b.n	80096ea <USBH_MSC_RdWrProcess+0x1fe>
      break;
 80096e0:	bf00      	nop
 80096e2:	e002      	b.n	80096ea <USBH_MSC_RdWrProcess+0x1fe>
      break;
 80096e4:	bf00      	nop
 80096e6:	e000      	b.n	80096ea <USBH_MSC_RdWrProcess+0x1fe>
      break;
 80096e8:	bf00      	nop

  }
  return error;
 80096ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3718      	adds	r7, #24
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	08010014 	.word	0x08010014
 80096f8:	08010024 	.word	0x08010024
 80096fc:	08010040 	.word	0x08010040
 8009700:	0800ffb4 	.word	0x0800ffb4

08009704 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	460b      	mov	r3, r1
 800970e:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009716:	69db      	ldr	r3, [r3, #28]
 8009718:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	b2db      	uxtb	r3, r3
 8009720:	2b0b      	cmp	r3, #11
 8009722:	d10c      	bne.n	800973e <USBH_MSC_UnitIsReady+0x3a>
 8009724:	78fb      	ldrb	r3, [r7, #3]
 8009726:	68ba      	ldr	r2, [r7, #8]
 8009728:	2134      	movs	r1, #52	; 0x34
 800972a:	fb01 f303 	mul.w	r3, r1, r3
 800972e:	4413      	add	r3, r2
 8009730:	3391      	adds	r3, #145	; 0x91
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d102      	bne.n	800973e <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8009738:	2301      	movs	r3, #1
 800973a:	73fb      	strb	r3, [r7, #15]
 800973c:	e001      	b.n	8009742 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800973e:	2300      	movs	r3, #0
 8009740:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009742:	7bfb      	ldrb	r3, [r7, #15]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3714      	adds	r7, #20
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	460b      	mov	r3, r1
 800975a:	607a      	str	r2, [r7, #4]
 800975c:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009764:	69db      	ldr	r3, [r3, #28]
 8009766:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	b2db      	uxtb	r3, r3
 800976e:	2b0b      	cmp	r3, #11
 8009770:	d10d      	bne.n	800978e <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8009772:	7afb      	ldrb	r3, [r7, #11]
 8009774:	2234      	movs	r2, #52	; 0x34
 8009776:	fb02 f303 	mul.w	r3, r2, r3
 800977a:	3390      	adds	r3, #144	; 0x90
 800977c:	697a      	ldr	r2, [r7, #20]
 800977e:	4413      	add	r3, r2
 8009780:	2234      	movs	r2, #52	; 0x34
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f005 fb5f 	bl	800ee48 <memcpy>
    return USBH_OK;
 800978a:	2300      	movs	r3, #0
 800978c:	e000      	b.n	8009790 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800978e:	2302      	movs	r3, #2
  }
}
 8009790:	4618      	mov	r0, r3
 8009792:	3718      	adds	r7, #24
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b088      	sub	sp, #32
 800979c:	af02      	add	r7, sp, #8
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	607a      	str	r2, [r7, #4]
 80097a2:	603b      	str	r3, [r7, #0]
 80097a4:	460b      	mov	r3, r1
 80097a6:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097ae:	69db      	ldr	r3, [r3, #28]
 80097b0:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00e      	beq.n	80097dc <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80097c4:	2b0b      	cmp	r3, #11
 80097c6:	d109      	bne.n	80097dc <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80097c8:	7afb      	ldrb	r3, [r7, #11]
 80097ca:	697a      	ldr	r2, [r7, #20]
 80097cc:	2134      	movs	r1, #52	; 0x34
 80097ce:	fb01 f303 	mul.w	r3, r1, r3
 80097d2:	4413      	add	r3, r2
 80097d4:	3390      	adds	r3, #144	; 0x90
 80097d6:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d001      	beq.n	80097e0 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80097dc:	2302      	movs	r3, #2
 80097de:	e040      	b.n	8009862 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	2206      	movs	r2, #6
 80097e4:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80097e6:	7afb      	ldrb	r3, [r7, #11]
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	2134      	movs	r1, #52	; 0x34
 80097ec:	fb01 f303 	mul.w	r3, r1, r3
 80097f0:	4413      	add	r3, r2
 80097f2:	3390      	adds	r3, #144	; 0x90
 80097f4:	2206      	movs	r2, #6
 80097f6:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80097f8:	7afb      	ldrb	r3, [r7, #11]
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009802:	7af9      	ldrb	r1, [r7, #11]
 8009804:	6a3b      	ldr	r3, [r7, #32]
 8009806:	9300      	str	r3, [sp, #0]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f000 fd78 	bl	800a302 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009818:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800981a:	e016      	b.n	800984a <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	1ad2      	subs	r2, r2, r3
 8009826:	6a3b      	ldr	r3, [r7, #32]
 8009828:	f242 7110 	movw	r1, #10000	; 0x2710
 800982c:	fb01 f303 	mul.w	r3, r1, r3
 8009830:	429a      	cmp	r2, r3
 8009832:	d805      	bhi.n	8009840 <USBH_MSC_Read+0xa8>
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b00      	cmp	r3, #0
 800983e:	d104      	bne.n	800984a <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	2201      	movs	r2, #1
 8009844:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009846:	2302      	movs	r3, #2
 8009848:	e00b      	b.n	8009862 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800984a:	7afb      	ldrb	r3, [r7, #11]
 800984c:	4619      	mov	r1, r3
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f7ff fe4c 	bl	80094ec <USBH_MSC_RdWrProcess>
 8009854:	4603      	mov	r3, r0
 8009856:	2b01      	cmp	r3, #1
 8009858:	d0e0      	beq.n	800981c <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	2201      	movs	r2, #1
 800985e:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3718      	adds	r7, #24
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b088      	sub	sp, #32
 800986e:	af02      	add	r7, sp, #8
 8009870:	60f8      	str	r0, [r7, #12]
 8009872:	607a      	str	r2, [r7, #4]
 8009874:	603b      	str	r3, [r7, #0]
 8009876:	460b      	mov	r3, r1
 8009878:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009880:	69db      	ldr	r3, [r3, #28]
 8009882:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800988a:	b2db      	uxtb	r3, r3
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00e      	beq.n	80098ae <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009896:	2b0b      	cmp	r3, #11
 8009898:	d109      	bne.n	80098ae <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800989a:	7afb      	ldrb	r3, [r7, #11]
 800989c:	697a      	ldr	r2, [r7, #20]
 800989e:	2134      	movs	r1, #52	; 0x34
 80098a0:	fb01 f303 	mul.w	r3, r1, r3
 80098a4:	4413      	add	r3, r2
 80098a6:	3390      	adds	r3, #144	; 0x90
 80098a8:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d001      	beq.n	80098b2 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80098ae:	2302      	movs	r3, #2
 80098b0:	e040      	b.n	8009934 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	2207      	movs	r2, #7
 80098b6:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80098b8:	7afb      	ldrb	r3, [r7, #11]
 80098ba:	697a      	ldr	r2, [r7, #20]
 80098bc:	2134      	movs	r1, #52	; 0x34
 80098be:	fb01 f303 	mul.w	r3, r1, r3
 80098c2:	4413      	add	r3, r2
 80098c4:	3390      	adds	r3, #144	; 0x90
 80098c6:	2207      	movs	r2, #7
 80098c8:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80098ca:	7afb      	ldrb	r3, [r7, #11]
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80098d4:	7af9      	ldrb	r1, [r7, #11]
 80098d6:	6a3b      	ldr	r3, [r7, #32]
 80098d8:	9300      	str	r3, [sp, #0]
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f000 fca4 	bl	800a22c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80098ea:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80098ec:	e016      	b.n	800991c <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	1ad2      	subs	r2, r2, r3
 80098f8:	6a3b      	ldr	r3, [r7, #32]
 80098fa:	f242 7110 	movw	r1, #10000	; 0x2710
 80098fe:	fb01 f303 	mul.w	r3, r1, r3
 8009902:	429a      	cmp	r2, r3
 8009904:	d805      	bhi.n	8009912 <USBH_MSC_Write+0xa8>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800990c:	b2db      	uxtb	r3, r3
 800990e:	2b00      	cmp	r3, #0
 8009910:	d104      	bne.n	800991c <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	2201      	movs	r2, #1
 8009916:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009918:	2302      	movs	r3, #2
 800991a:	e00b      	b.n	8009934 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800991c:	7afb      	ldrb	r3, [r7, #11]
 800991e:	4619      	mov	r1, r3
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f7ff fde3 	bl	80094ec <USBH_MSC_RdWrProcess>
 8009926:	4603      	mov	r3, r0
 8009928:	2b01      	cmp	r3, #1
 800992a:	d0e0      	beq.n	80098ee <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	2201      	movs	r2, #1
 8009930:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3718      	adds	r7, #24
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2221      	movs	r2, #33	; 0x21
 8009948:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	22ff      	movs	r2, #255	; 0xff
 800994e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8009962:	2200      	movs	r2, #0
 8009964:	2100      	movs	r1, #0
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f001 ff67 	bl	800b83a <USBH_CtlReq>
 800996c:	4603      	mov	r3, r0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b082      	sub	sp, #8
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	22a1      	movs	r2, #161	; 0xa1
 8009984:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	22fe      	movs	r2, #254	; 0xfe
 800998a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800999e:	2201      	movs	r2, #1
 80099a0:	6839      	ldr	r1, [r7, #0]
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f001 ff49 	bl	800b83a <USBH_CtlReq>
 80099a8:	4603      	mov	r3, r0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
	...

080099b4 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099c2:	69db      	ldr	r3, [r3, #28]
 80099c4:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	4a09      	ldr	r2, [pc, #36]	; (80099f0 <USBH_MSC_BOT_Init+0x3c>)
 80099ca:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	4a09      	ldr	r2, [pc, #36]	; (80099f4 <USBH_MSC_BOT_Init+0x40>)
 80099d0:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr
 80099f0:	43425355 	.word	0x43425355
 80099f4:	20304050 	.word	0x20304050

080099f8 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b088      	sub	sp, #32
 80099fc:	af02      	add	r7, sp, #8
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009a04:	2301      	movs	r3, #1
 8009a06:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009a10:	2300      	movs	r3, #0
 8009a12:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a1a:	69db      	ldr	r3, [r3, #28]
 8009a1c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	2b0a      	cmp	r3, #10
 8009a2c:	f200 819e 	bhi.w	8009d6c <USBH_MSC_BOT_Process+0x374>
 8009a30:	a201      	add	r2, pc, #4	; (adr r2, 8009a38 <USBH_MSC_BOT_Process+0x40>)
 8009a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a36:	bf00      	nop
 8009a38:	08009a65 	.word	0x08009a65
 8009a3c:	08009a8d 	.word	0x08009a8d
 8009a40:	08009af7 	.word	0x08009af7
 8009a44:	08009b15 	.word	0x08009b15
 8009a48:	08009b99 	.word	0x08009b99
 8009a4c:	08009bbb 	.word	0x08009bbb
 8009a50:	08009c53 	.word	0x08009c53
 8009a54:	08009c6f 	.word	0x08009c6f
 8009a58:	08009cc1 	.word	0x08009cc1
 8009a5c:	08009cf1 	.word	0x08009cf1
 8009a60:	08009d53 	.word	0x08009d53
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	78fa      	ldrb	r2, [r7, #3]
 8009a68:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	2202      	movs	r2, #2
 8009a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	795b      	ldrb	r3, [r3, #5]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	9200      	str	r2, [sp, #0]
 8009a82:	221f      	movs	r2, #31
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f002 f8f4 	bl	800bc72 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009a8a:	e17e      	b.n	8009d8a <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	795b      	ldrb	r3, [r3, #5]
 8009a90:	4619      	mov	r1, r3
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f005 f8e6 	bl	800ec64 <USBH_LL_GetURBState>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009a9c:	7d3b      	ldrb	r3, [r7, #20]
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d118      	bne.n	8009ad4 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00f      	beq.n	8009aca <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009ab0:	b25b      	sxtb	r3, r3
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	da04      	bge.n	8009ac0 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	2203      	movs	r2, #3
 8009aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009abe:	e157      	b.n	8009d70 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	2205      	movs	r2, #5
 8009ac4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ac8:	e152      	b.n	8009d70 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	2207      	movs	r2, #7
 8009ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ad2:	e14d      	b.n	8009d70 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ad4:	7d3b      	ldrb	r3, [r7, #20]
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d104      	bne.n	8009ae4 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	2201      	movs	r2, #1
 8009ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ae2:	e145      	b.n	8009d70 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009ae4:	7d3b      	ldrb	r3, [r7, #20]
 8009ae6:	2b05      	cmp	r3, #5
 8009ae8:	f040 8142 	bne.w	8009d70 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	220a      	movs	r2, #10
 8009af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009af4:	e13c      	b.n	8009d70 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	895a      	ldrh	r2, [r3, #10]
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	791b      	ldrb	r3, [r3, #4]
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f002 f8d9 	bl	800bcbc <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	2204      	movs	r2, #4
 8009b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009b12:	e13a      	b.n	8009d8a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	791b      	ldrb	r3, [r3, #4]
 8009b18:	4619      	mov	r1, r3
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f005 f8a2 	bl	800ec64 <USBH_LL_GetURBState>
 8009b20:	4603      	mov	r3, r0
 8009b22:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009b24:	7d3b      	ldrb	r3, [r7, #20]
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d12d      	bne.n	8009b86 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b2e:	693a      	ldr	r2, [r7, #16]
 8009b30:	8952      	ldrh	r2, [r2, #10]
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d910      	bls.n	8009b58 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b3c:	693a      	ldr	r2, [r7, #16]
 8009b3e:	8952      	ldrh	r2, [r2, #10]
 8009b40:	441a      	add	r2, r3
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b4c:	693a      	ldr	r2, [r7, #16]
 8009b4e:	8952      	ldrh	r2, [r2, #10]
 8009b50:	1a9a      	subs	r2, r3, r2
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	65da      	str	r2, [r3, #92]	; 0x5c
 8009b56:	e002      	b.n	8009b5e <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00a      	beq.n	8009b7c <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	895a      	ldrh	r2, [r3, #10]
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	791b      	ldrb	r3, [r3, #4]
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f002 f8a1 	bl	800bcbc <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009b7a:	e0fb      	b.n	8009d74 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	2207      	movs	r2, #7
 8009b80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b84:	e0f6      	b.n	8009d74 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8009b86:	7d3b      	ldrb	r3, [r7, #20]
 8009b88:	2b05      	cmp	r3, #5
 8009b8a:	f040 80f3 	bne.w	8009d74 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	2209      	movs	r2, #9
 8009b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b96:	e0ed      	b.n	8009d74 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	891a      	ldrh	r2, [r3, #8]
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	795b      	ldrb	r3, [r3, #5]
 8009ba6:	2001      	movs	r0, #1
 8009ba8:	9000      	str	r0, [sp, #0]
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f002 f861 	bl	800bc72 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	2206      	movs	r2, #6
 8009bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009bb8:	e0e7      	b.n	8009d8a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	795b      	ldrb	r3, [r3, #5]
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f005 f84f 	bl	800ec64 <USBH_LL_GetURBState>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009bca:	7d3b      	ldrb	r3, [r7, #20]
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d12f      	bne.n	8009c30 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	8912      	ldrh	r2, [r2, #8]
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d910      	bls.n	8009bfe <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009be2:	693a      	ldr	r2, [r7, #16]
 8009be4:	8912      	ldrh	r2, [r2, #8]
 8009be6:	441a      	add	r2, r3
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bf2:	693a      	ldr	r2, [r7, #16]
 8009bf4:	8912      	ldrh	r2, [r2, #8]
 8009bf6:	1a9a      	subs	r2, r3, r2
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	65da      	str	r2, [r3, #92]	; 0x5c
 8009bfc:	e002      	b.n	8009c04 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	2200      	movs	r2, #0
 8009c02:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00c      	beq.n	8009c26 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	891a      	ldrh	r2, [r3, #8]
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	795b      	ldrb	r3, [r3, #5]
 8009c1a:	2001      	movs	r0, #1
 8009c1c:	9000      	str	r0, [sp, #0]
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f002 f827 	bl	800bc72 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009c24:	e0a8      	b.n	8009d78 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	2207      	movs	r2, #7
 8009c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c2e:	e0a3      	b.n	8009d78 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009c30:	7d3b      	ldrb	r3, [r7, #20]
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d104      	bne.n	8009c40 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	2205      	movs	r2, #5
 8009c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c3e:	e09b      	b.n	8009d78 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009c40:	7d3b      	ldrb	r3, [r7, #20]
 8009c42:	2b05      	cmp	r3, #5
 8009c44:	f040 8098 	bne.w	8009d78 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	220a      	movs	r2, #10
 8009c4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c50:	e092      	b.n	8009d78 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	791b      	ldrb	r3, [r3, #4]
 8009c5c:	220d      	movs	r2, #13
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f002 f82c 	bl	800bcbc <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	2208      	movs	r2, #8
 8009c68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c6c:	e08d      	b.n	8009d8a <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	791b      	ldrb	r3, [r3, #4]
 8009c72:	4619      	mov	r1, r3
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f004 fff5 	bl	800ec64 <USBH_LL_GetURBState>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009c7e:	7d3b      	ldrb	r3, [r7, #20]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d115      	bne.n	8009cb0 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 f8a9 	bl	8009dec <USBH_MSC_DecodeCSW>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009c9e:	7d7b      	ldrb	r3, [r7, #21]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d102      	bne.n	8009caa <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009ca8:	e068      	b.n	8009d7c <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8009caa:	2302      	movs	r3, #2
 8009cac:	75fb      	strb	r3, [r7, #23]
      break;
 8009cae:	e065      	b.n	8009d7c <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009cb0:	7d3b      	ldrb	r3, [r7, #20]
 8009cb2:	2b05      	cmp	r3, #5
 8009cb4:	d162      	bne.n	8009d7c <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	2209      	movs	r2, #9
 8009cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009cbe:	e05d      	b.n	8009d7c <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009cc0:	78fb      	ldrb	r3, [r7, #3]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f864 	bl	8009d94 <USBH_MSC_BOT_Abort>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009cd0:	7dbb      	ldrb	r3, [r7, #22]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d104      	bne.n	8009ce0 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	2207      	movs	r2, #7
 8009cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009cde:	e04f      	b.n	8009d80 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009ce0:	7dbb      	ldrb	r3, [r7, #22]
 8009ce2:	2b04      	cmp	r3, #4
 8009ce4:	d14c      	bne.n	8009d80 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	220b      	movs	r2, #11
 8009cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009cee:	e047      	b.n	8009d80 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009cf0:	78fb      	ldrb	r3, [r7, #3]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 f84c 	bl	8009d94 <USBH_MSC_BOT_Abort>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009d00:	7dbb      	ldrb	r3, [r7, #22]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d11d      	bne.n	8009d42 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	795b      	ldrb	r3, [r3, #5]
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f004 fffa 	bl	800ed06 <USBH_LL_GetToggle>
 8009d12:	4603      	mov	r3, r0
 8009d14:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	7959      	ldrb	r1, [r3, #5]
 8009d1a:	7bfb      	ldrb	r3, [r7, #15]
 8009d1c:	f1c3 0301 	rsb	r3, r3, #1
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	461a      	mov	r2, r3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f004 ffbe 	bl	800eca6 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	791b      	ldrb	r3, [r3, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	4619      	mov	r1, r3
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f004 ffb7 	bl	800eca6 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	2209      	movs	r2, #9
 8009d3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009d40:	e020      	b.n	8009d84 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8009d42:	7dbb      	ldrb	r3, [r7, #22]
 8009d44:	2b04      	cmp	r3, #4
 8009d46:	d11d      	bne.n	8009d84 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	220b      	movs	r2, #11
 8009d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009d50:	e018      	b.n	8009d84 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7ff fdf2 	bl	800993c <USBH_MSC_BOT_REQ_Reset>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009d5c:	7dfb      	ldrb	r3, [r7, #23]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d112      	bne.n	8009d88 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009d6a:	e00d      	b.n	8009d88 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009d6c:	bf00      	nop
 8009d6e:	e00c      	b.n	8009d8a <USBH_MSC_BOT_Process+0x392>
      break;
 8009d70:	bf00      	nop
 8009d72:	e00a      	b.n	8009d8a <USBH_MSC_BOT_Process+0x392>
      break;
 8009d74:	bf00      	nop
 8009d76:	e008      	b.n	8009d8a <USBH_MSC_BOT_Process+0x392>
      break;
 8009d78:	bf00      	nop
 8009d7a:	e006      	b.n	8009d8a <USBH_MSC_BOT_Process+0x392>
      break;
 8009d7c:	bf00      	nop
 8009d7e:	e004      	b.n	8009d8a <USBH_MSC_BOT_Process+0x392>
      break;
 8009d80:	bf00      	nop
 8009d82:	e002      	b.n	8009d8a <USBH_MSC_BOT_Process+0x392>
      break;
 8009d84:	bf00      	nop
 8009d86:	e000      	b.n	8009d8a <USBH_MSC_BOT_Process+0x392>
      break;
 8009d88:	bf00      	nop
  }
  return status;
 8009d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3718      	adds	r7, #24
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	70fb      	strb	r3, [r7, #3]
 8009da0:	4613      	mov	r3, r2
 8009da2:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009da4:	2302      	movs	r3, #2
 8009da6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dae:	69db      	ldr	r3, [r3, #28]
 8009db0:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009db2:	78bb      	ldrb	r3, [r7, #2]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d002      	beq.n	8009dbe <USBH_MSC_BOT_Abort+0x2a>
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d009      	beq.n	8009dd0 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009dbc:	e011      	b.n	8009de2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	79db      	ldrb	r3, [r3, #7]
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f001 fb58 	bl	800b47a <USBH_ClrFeature>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8009dce:	e008      	b.n	8009de2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	799b      	ldrb	r3, [r3, #6]
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f001 fb4f 	bl	800b47a <USBH_ClrFeature>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	73fb      	strb	r3, [r7, #15]
      break;
 8009de0:	bf00      	nop
  }
  return status;
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dfa:	69db      	ldr	r3, [r3, #28]
 8009dfc:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	791b      	ldrb	r3, [r3, #4]
 8009e06:	4619      	mov	r1, r3
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f004 fe99 	bl	800eb40 <USBH_LL_GetLastXferSize>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b0d      	cmp	r3, #13
 8009e12:	d002      	beq.n	8009e1a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009e14:	2302      	movs	r3, #2
 8009e16:	73fb      	strb	r3, [r7, #15]
 8009e18:	e024      	b.n	8009e64 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e1e:	4a14      	ldr	r2, [pc, #80]	; (8009e70 <USBH_MSC_DecodeCSW+0x84>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d11d      	bne.n	8009e60 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d119      	bne.n	8009e64 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d102      	bne.n	8009e40 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	73fb      	strb	r3, [r7, #15]
 8009e3e:	e011      	b.n	8009e64 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d102      	bne.n	8009e50 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	73fb      	strb	r3, [r7, #15]
 8009e4e:	e009      	b.n	8009e64 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	d104      	bne.n	8009e64 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009e5a:	2302      	movs	r3, #2
 8009e5c:	73fb      	strb	r3, [r7, #15]
 8009e5e:	e001      	b.n	8009e64 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009e60:	2302      	movs	r3, #2
 8009e62:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	53425355 	.word	0x53425355

08009e74 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009e80:	2302      	movs	r3, #2
 8009e82:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e8a:	69db      	ldr	r3, [r3, #28]
 8009e8c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d002      	beq.n	8009e9e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d021      	beq.n	8009ee0 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009e9c:	e028      	b.n	8009ef0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	220a      	movs	r2, #10
 8009eb0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	3363      	adds	r3, #99	; 0x63
 8009eb8:	2210      	movs	r2, #16
 8009eba:	2100      	movs	r1, #0
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f004 ffd1 	bl	800ee64 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	2202      	movs	r2, #2
 8009ed6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009eda:	2301      	movs	r3, #1
 8009edc:	73fb      	strb	r3, [r7, #15]
      break;
 8009ede:	e007      	b.n	8009ef0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009ee0:	78fb      	ldrb	r3, [r7, #3]
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f7ff fd87 	bl	80099f8 <USBH_MSC_BOT_Process>
 8009eea:	4603      	mov	r3, r0
 8009eec:	73fb      	strb	r3, [r7, #15]
      break;
 8009eee:	bf00      	nop
  }

  return error;
 8009ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b086      	sub	sp, #24
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	60f8      	str	r0, [r7, #12]
 8009f02:	460b      	mov	r3, r1
 8009f04:	607a      	str	r2, [r7, #4]
 8009f06:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f12:	69db      	ldr	r3, [r3, #28]
 8009f14:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d002      	beq.n	8009f26 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009f20:	2b02      	cmp	r3, #2
 8009f22:	d027      	beq.n	8009f74 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009f24:	e05f      	b.n	8009fe6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	2208      	movs	r2, #8
 8009f2a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	2280      	movs	r2, #128	; 0x80
 8009f30:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	220a      	movs	r2, #10
 8009f38:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	3363      	adds	r3, #99	; 0x63
 8009f40:	2210      	movs	r2, #16
 8009f42:	2100      	movs	r1, #0
 8009f44:	4618      	mov	r0, r3
 8009f46:	f004 ff8d 	bl	800ee64 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	2225      	movs	r2, #37	; 0x25
 8009f4e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	2202      	movs	r2, #2
 8009f5e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	f103 0210 	add.w	r2, r3, #16
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	75fb      	strb	r3, [r7, #23]
      break;
 8009f72:	e038      	b.n	8009fe6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009f74:	7afb      	ldrb	r3, [r7, #11]
 8009f76:	4619      	mov	r1, r3
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f7ff fd3d 	bl	80099f8 <USBH_MSC_BOT_Process>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009f82:	7dfb      	ldrb	r3, [r7, #23]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d12d      	bne.n	8009fe4 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f8e:	3303      	adds	r3, #3
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	461a      	mov	r2, r3
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f9a:	3302      	adds	r3, #2
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	021b      	lsls	r3, r3, #8
 8009fa0:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fa8:	3301      	adds	r3, #1
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009fae:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	061b      	lsls	r3, r3, #24
 8009fba:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fc6:	3307      	adds	r3, #7
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fd2:	3306      	adds	r3, #6
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	021b      	lsls	r3, r3, #8
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	809a      	strh	r2, [r3, #4]
      break;
 8009fe4:	bf00      	nop
  }

  return error;
 8009fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3718      	adds	r7, #24
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b086      	sub	sp, #24
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	607a      	str	r2, [r7, #4]
 8009ffc:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009ffe:	2302      	movs	r3, #2
 800a000:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a008:	69db      	ldr	r3, [r3, #28]
 800a00a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a012:	2b01      	cmp	r3, #1
 800a014:	d002      	beq.n	800a01c <USBH_MSC_SCSI_Inquiry+0x2c>
 800a016:	2b02      	cmp	r3, #2
 800a018:	d03d      	beq.n	800a096 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a01a:	e089      	b.n	800a130 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	2224      	movs	r2, #36	; 0x24
 800a020:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	2280      	movs	r2, #128	; 0x80
 800a026:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	220a      	movs	r2, #10
 800a02e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	3363      	adds	r3, #99	; 0x63
 800a036:	220a      	movs	r2, #10
 800a038:	2100      	movs	r1, #0
 800a03a:	4618      	mov	r0, r3
 800a03c:	f004 ff12 	bl	800ee64 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	2212      	movs	r2, #18
 800a044:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a048:	7afb      	ldrb	r3, [r7, #11]
 800a04a:	015b      	lsls	r3, r3, #5
 800a04c:	b2da      	uxtb	r2, r3
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	2200      	movs	r2, #0
 800a058:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	2200      	movs	r2, #0
 800a060:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	2224      	movs	r2, #36	; 0x24
 800a068:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	2202      	movs	r2, #2
 800a080:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	f103 0210 	add.w	r2, r3, #16
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a090:	2301      	movs	r3, #1
 800a092:	75fb      	strb	r3, [r7, #23]
      break;
 800a094:	e04c      	b.n	800a130 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a096:	7afb      	ldrb	r3, [r7, #11]
 800a098:	4619      	mov	r1, r3
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	f7ff fcac 	bl	80099f8 <USBH_MSC_BOT_Process>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a0a4:	7dfb      	ldrb	r3, [r7, #23]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d141      	bne.n	800a12e <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a0aa:	2222      	movs	r2, #34	; 0x22
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f004 fed8 	bl	800ee64 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	f003 031f 	and.w	r3, r3, #31
 800a0c0:	b2da      	uxtb	r2, r3
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	095b      	lsrs	r3, r3, #5
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0dc:	3301      	adds	r3, #1
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	b25b      	sxtb	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	da03      	bge.n	800a0ee <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	709a      	strb	r2, [r3, #2]
 800a0ec:	e002      	b.n	800a0f4 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	1cd8      	adds	r0, r3, #3
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0fe:	3308      	adds	r3, #8
 800a100:	2208      	movs	r2, #8
 800a102:	4619      	mov	r1, r3
 800a104:	f004 fea0 	bl	800ee48 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f103 000c 	add.w	r0, r3, #12
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a114:	3310      	adds	r3, #16
 800a116:	2210      	movs	r2, #16
 800a118:	4619      	mov	r1, r3
 800a11a:	f004 fe95 	bl	800ee48 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	331d      	adds	r3, #29
 800a122:	693a      	ldr	r2, [r7, #16]
 800a124:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a128:	3220      	adds	r2, #32
 800a12a:	6812      	ldr	r2, [r2, #0]
 800a12c:	601a      	str	r2, [r3, #0]
      break;
 800a12e:	bf00      	nop
  }

  return error;
 800a130:	7dfb      	ldrb	r3, [r7, #23]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3718      	adds	r7, #24
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b086      	sub	sp, #24
 800a13e:	af00      	add	r7, sp, #0
 800a140:	60f8      	str	r0, [r7, #12]
 800a142:	460b      	mov	r3, r1
 800a144:	607a      	str	r2, [r7, #4]
 800a146:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a148:	2302      	movs	r3, #2
 800a14a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a152:	69db      	ldr	r3, [r3, #28]
 800a154:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d002      	beq.n	800a166 <USBH_MSC_SCSI_RequestSense+0x2c>
 800a160:	2b02      	cmp	r3, #2
 800a162:	d03d      	beq.n	800a1e0 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a164:	e05d      	b.n	800a222 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	220e      	movs	r2, #14
 800a16a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	2280      	movs	r2, #128	; 0x80
 800a170:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	220a      	movs	r2, #10
 800a178:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	3363      	adds	r3, #99	; 0x63
 800a180:	2210      	movs	r2, #16
 800a182:	2100      	movs	r1, #0
 800a184:	4618      	mov	r0, r3
 800a186:	f004 fe6d 	bl	800ee64 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	2203      	movs	r2, #3
 800a18e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a192:	7afb      	ldrb	r3, [r7, #11]
 800a194:	015b      	lsls	r3, r3, #5
 800a196:	b2da      	uxtb	r2, r3
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	220e      	movs	r2, #14
 800a1b2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	2202      	movs	r2, #2
 800a1ca:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	f103 0210 	add.w	r2, r3, #16
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	75fb      	strb	r3, [r7, #23]
      break;
 800a1de:	e020      	b.n	800a222 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a1e0:	7afb      	ldrb	r3, [r7, #11]
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f7ff fc07 	bl	80099f8 <USBH_MSC_BOT_Process>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a1ee:	7dfb      	ldrb	r3, [r7, #23]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d115      	bne.n	800a220 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1fa:	3302      	adds	r3, #2
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	f003 030f 	and.w	r3, r3, #15
 800a202:	b2da      	uxtb	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a20e:	7b1a      	ldrb	r2, [r3, #12]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a21a:	7b5a      	ldrb	r2, [r3, #13]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	709a      	strb	r2, [r3, #2]
      break;
 800a220:	bf00      	nop
  }

  return error;
 800a222:	7dfb      	ldrb	r3, [r7, #23]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3718      	adds	r7, #24
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	607a      	str	r2, [r7, #4]
 800a236:	603b      	str	r3, [r7, #0]
 800a238:	460b      	mov	r3, r1
 800a23a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a23c:	2302      	movs	r3, #2
 800a23e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a246:	69db      	ldr	r3, [r3, #28]
 800a248:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a250:	2b01      	cmp	r3, #1
 800a252:	d002      	beq.n	800a25a <USBH_MSC_SCSI_Write+0x2e>
 800a254:	2b02      	cmp	r3, #2
 800a256:	d047      	beq.n	800a2e8 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a258:	e04e      	b.n	800a2f8 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a260:	461a      	mov	r2, r3
 800a262:	6a3b      	ldr	r3, [r7, #32]
 800a264:	fb03 f202 	mul.w	r2, r3, r2
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	220a      	movs	r2, #10
 800a278:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	3363      	adds	r3, #99	; 0x63
 800a280:	2210      	movs	r2, #16
 800a282:	2100      	movs	r1, #0
 800a284:	4618      	mov	r0, r3
 800a286:	f004 fded 	bl	800ee64 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	222a      	movs	r2, #42	; 0x2a
 800a28e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a292:	79fa      	ldrb	r2, [r7, #7]
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a29a:	79ba      	ldrb	r2, [r7, #6]
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a2a2:	797a      	ldrb	r2, [r7, #5]
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a2aa:	1d3b      	adds	r3, r7, #4
 800a2ac:	781a      	ldrb	r2, [r3, #0]
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a2b4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a2be:	f107 0320 	add.w	r3, r7, #32
 800a2c2:	781a      	ldrb	r2, [r3, #0]
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	2202      	movs	r2, #2
 800a2d6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	683a      	ldr	r2, [r7, #0]
 800a2de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	75fb      	strb	r3, [r7, #23]
      break;
 800a2e6:	e007      	b.n	800a2f8 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a2e8:	7afb      	ldrb	r3, [r7, #11]
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f7ff fb83 	bl	80099f8 <USBH_MSC_BOT_Process>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	75fb      	strb	r3, [r7, #23]
      break;
 800a2f6:	bf00      	nop
  }

  return error;
 800a2f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3718      	adds	r7, #24
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b086      	sub	sp, #24
 800a306:	af00      	add	r7, sp, #0
 800a308:	60f8      	str	r0, [r7, #12]
 800a30a:	607a      	str	r2, [r7, #4]
 800a30c:	603b      	str	r3, [r7, #0]
 800a30e:	460b      	mov	r3, r1
 800a310:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a312:	2302      	movs	r3, #2
 800a314:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a31c:	69db      	ldr	r3, [r3, #28]
 800a31e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a326:	2b01      	cmp	r3, #1
 800a328:	d002      	beq.n	800a330 <USBH_MSC_SCSI_Read+0x2e>
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d047      	beq.n	800a3be <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a32e:	e04e      	b.n	800a3ce <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a336:	461a      	mov	r2, r3
 800a338:	6a3b      	ldr	r3, [r7, #32]
 800a33a:	fb03 f202 	mul.w	r2, r3, r2
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	2280      	movs	r2, #128	; 0x80
 800a346:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	220a      	movs	r2, #10
 800a34e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	3363      	adds	r3, #99	; 0x63
 800a356:	2210      	movs	r2, #16
 800a358:	2100      	movs	r1, #0
 800a35a:	4618      	mov	r0, r3
 800a35c:	f004 fd82 	bl	800ee64 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	2228      	movs	r2, #40	; 0x28
 800a364:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a368:	79fa      	ldrb	r2, [r7, #7]
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a370:	79ba      	ldrb	r2, [r7, #6]
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a378:	797a      	ldrb	r2, [r7, #5]
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a380:	1d3b      	adds	r3, r7, #4
 800a382:	781a      	ldrb	r2, [r3, #0]
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a38a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a394:	f107 0320 	add.w	r3, r7, #32
 800a398:	781a      	ldrb	r2, [r3, #0]
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	2202      	movs	r2, #2
 800a3ac:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	75fb      	strb	r3, [r7, #23]
      break;
 800a3bc:	e007      	b.n	800a3ce <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a3be:	7afb      	ldrb	r3, [r7, #11]
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f7ff fb18 	bl	80099f8 <USBH_MSC_BOT_Process>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	75fb      	strb	r3, [r7, #23]
      break;
 800a3cc:	bf00      	nop
  }

  return error;
 800a3ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3718      	adds	r7, #24
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10a      	bne.n	800a402 <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800a3ec:	481c      	ldr	r0, [pc, #112]	; (800a460 <USBH_Init+0x88>)
 800a3ee:	f004 fdeb 	bl	800efc8 <iprintf>
 800a3f2:	481c      	ldr	r0, [pc, #112]	; (800a464 <USBH_Init+0x8c>)
 800a3f4:	f004 fde8 	bl	800efc8 <iprintf>
 800a3f8:	200a      	movs	r0, #10
 800a3fa:	f004 fdfd 	bl	800eff8 <putchar>
    return USBH_FAIL;
 800a3fe:	2302      	movs	r3, #2
 800a400:	e029      	b.n	800a456 <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	79fa      	ldrb	r2, [r7, #7]
 800a406:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2200      	movs	r2, #0
 800a416:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f000 f824 	bl	800a468 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d003      	beq.n	800a44e <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	68ba      	ldr	r2, [r7, #8]
 800a44a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	f004 fac2 	bl	800e9d8 <USBH_LL_Init>

  return USBH_OK;
 800a454:	2300      	movs	r3, #0
}
 800a456:	4618      	mov	r0, r3
 800a458:	3710      	adds	r7, #16
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	08010064 	.word	0x08010064
 800a464:	0801006c 	.word	0x0801006c

0800a468 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a468:	b480      	push	{r7}
 800a46a:	b085      	sub	sp, #20
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a470:	2300      	movs	r3, #0
 800a472:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a474:	2300      	movs	r3, #0
 800a476:	60fb      	str	r3, [r7, #12]
 800a478:	e009      	b.n	800a48e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	33e0      	adds	r3, #224	; 0xe0
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	4413      	add	r3, r2
 800a484:	2200      	movs	r2, #0
 800a486:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	3301      	adds	r3, #1
 800a48c:	60fb      	str	r3, [r7, #12]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2b0e      	cmp	r3, #14
 800a492:	d9f2      	bls.n	800a47a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a494:	2300      	movs	r3, #0
 800a496:	60fb      	str	r3, [r7, #12]
 800a498:	e009      	b.n	800a4ae <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	4413      	add	r3, r2
 800a4a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	60fb      	str	r3, [r7, #12]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4b4:	d3f1      	bcc.n	800a49a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2240      	movs	r2, #64	; 0x40
 800a4da:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3714      	adds	r7, #20
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a51a:	2300      	movs	r3, #0
 800a51c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d01f      	beq.n	800a564 <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d10e      	bne.n	800a54c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a534:	1c59      	adds	r1, r3, #1
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	33de      	adds	r3, #222	; 0xde
 800a540:	6839      	ldr	r1, [r7, #0]
 800a542:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a546:	2300      	movs	r3, #0
 800a548:	73fb      	strb	r3, [r7, #15]
 800a54a:	e016      	b.n	800a57a <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800a54c:	480d      	ldr	r0, [pc, #52]	; (800a584 <USBH_RegisterClass+0x74>)
 800a54e:	f004 fd3b 	bl	800efc8 <iprintf>
 800a552:	480d      	ldr	r0, [pc, #52]	; (800a588 <USBH_RegisterClass+0x78>)
 800a554:	f004 fd38 	bl	800efc8 <iprintf>
 800a558:	200a      	movs	r0, #10
 800a55a:	f004 fd4d 	bl	800eff8 <putchar>
      status = USBH_FAIL;
 800a55e:	2302      	movs	r3, #2
 800a560:	73fb      	strb	r3, [r7, #15]
 800a562:	e00a      	b.n	800a57a <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800a564:	4807      	ldr	r0, [pc, #28]	; (800a584 <USBH_RegisterClass+0x74>)
 800a566:	f004 fd2f 	bl	800efc8 <iprintf>
 800a56a:	4808      	ldr	r0, [pc, #32]	; (800a58c <USBH_RegisterClass+0x7c>)
 800a56c:	f004 fd2c 	bl	800efc8 <iprintf>
 800a570:	200a      	movs	r0, #10
 800a572:	f004 fd41 	bl	800eff8 <putchar>
    status = USBH_FAIL;
 800a576:	2302      	movs	r3, #2
 800a578:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a57a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	08010064 	.word	0x08010064
 800a588:	08010080 	.word	0x08010080
 800a58c:	0801009c 	.word	0x0801009c

0800a590 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	460b      	mov	r3, r1
 800a59a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a59c:	2300      	movs	r3, #0
 800a59e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a5a6:	78fa      	ldrb	r2, [r7, #3]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d23c      	bcs.n	800a626 <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	78fa      	ldrb	r2, [r7, #3]
 800a5b0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800a5b4:	78fb      	ldrb	r3, [r7, #3]
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	4823      	ldr	r0, [pc, #140]	; (800a648 <USBH_SelectInterface+0xb8>)
 800a5ba:	f004 fd05 	bl	800efc8 <iprintf>
 800a5be:	200a      	movs	r0, #10
 800a5c0:	f004 fd1a 	bl	800eff8 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800a5c4:	78fb      	ldrb	r3, [r7, #3]
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	211a      	movs	r1, #26
 800a5ca:	fb01 f303 	mul.w	r3, r1, r3
 800a5ce:	4413      	add	r3, r2
 800a5d0:	f203 3347 	addw	r3, r3, #839	; 0x347
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	481c      	ldr	r0, [pc, #112]	; (800a64c <USBH_SelectInterface+0xbc>)
 800a5da:	f004 fcf5 	bl	800efc8 <iprintf>
 800a5de:	200a      	movs	r0, #10
 800a5e0:	f004 fd0a 	bl	800eff8 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800a5e4:	78fb      	ldrb	r3, [r7, #3]
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	211a      	movs	r1, #26
 800a5ea:	fb01 f303 	mul.w	r3, r1, r3
 800a5ee:	4413      	add	r3, r2
 800a5f0:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	4815      	ldr	r0, [pc, #84]	; (800a650 <USBH_SelectInterface+0xc0>)
 800a5fa:	f004 fce5 	bl	800efc8 <iprintf>
 800a5fe:	200a      	movs	r0, #10
 800a600:	f004 fcfa 	bl	800eff8 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800a604:	78fb      	ldrb	r3, [r7, #3]
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	211a      	movs	r1, #26
 800a60a:	fb01 f303 	mul.w	r3, r1, r3
 800a60e:	4413      	add	r3, r2
 800a610:	f203 3349 	addw	r3, r3, #841	; 0x349
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	4619      	mov	r1, r3
 800a618:	480e      	ldr	r0, [pc, #56]	; (800a654 <USBH_SelectInterface+0xc4>)
 800a61a:	f004 fcd5 	bl	800efc8 <iprintf>
 800a61e:	200a      	movs	r0, #10
 800a620:	f004 fcea 	bl	800eff8 <putchar>
 800a624:	e00a      	b.n	800a63c <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800a626:	480c      	ldr	r0, [pc, #48]	; (800a658 <USBH_SelectInterface+0xc8>)
 800a628:	f004 fcce 	bl	800efc8 <iprintf>
 800a62c:	480b      	ldr	r0, [pc, #44]	; (800a65c <USBH_SelectInterface+0xcc>)
 800a62e:	f004 fccb 	bl	800efc8 <iprintf>
 800a632:	200a      	movs	r0, #10
 800a634:	f004 fce0 	bl	800eff8 <putchar>
    status = USBH_FAIL;
 800a638:	2302      	movs	r3, #2
 800a63a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a63c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	080100b4 	.word	0x080100b4
 800a64c:	080100d4 	.word	0x080100d4
 800a650:	080100e4 	.word	0x080100e4
 800a654:	080100f4 	.word	0x080100f4
 800a658:	08010064 	.word	0x08010064
 800a65c:	08010104 	.word	0x08010104

0800a660 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a660:	b480      	push	{r7}
 800a662:	b087      	sub	sp, #28
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	4608      	mov	r0, r1
 800a66a:	4611      	mov	r1, r2
 800a66c:	461a      	mov	r2, r3
 800a66e:	4603      	mov	r3, r0
 800a670:	70fb      	strb	r3, [r7, #3]
 800a672:	460b      	mov	r3, r1
 800a674:	70bb      	strb	r3, [r7, #2]
 800a676:	4613      	mov	r3, r2
 800a678:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a67a:	2300      	movs	r3, #0
 800a67c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a67e:	2300      	movs	r3, #0
 800a680:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a688:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a68a:	e025      	b.n	800a6d8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a68c:	7dfb      	ldrb	r3, [r7, #23]
 800a68e:	221a      	movs	r2, #26
 800a690:	fb02 f303 	mul.w	r3, r2, r3
 800a694:	3308      	adds	r3, #8
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	4413      	add	r3, r2
 800a69a:	3302      	adds	r3, #2
 800a69c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	795b      	ldrb	r3, [r3, #5]
 800a6a2:	78fa      	ldrb	r2, [r7, #3]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d002      	beq.n	800a6ae <USBH_FindInterface+0x4e>
 800a6a8:	78fb      	ldrb	r3, [r7, #3]
 800a6aa:	2bff      	cmp	r3, #255	; 0xff
 800a6ac:	d111      	bne.n	800a6d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a6b2:	78ba      	ldrb	r2, [r7, #2]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d002      	beq.n	800a6be <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a6b8:	78bb      	ldrb	r3, [r7, #2]
 800a6ba:	2bff      	cmp	r3, #255	; 0xff
 800a6bc:	d109      	bne.n	800a6d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a6c2:	787a      	ldrb	r2, [r7, #1]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d002      	beq.n	800a6ce <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a6c8:	787b      	ldrb	r3, [r7, #1]
 800a6ca:	2bff      	cmp	r3, #255	; 0xff
 800a6cc:	d101      	bne.n	800a6d2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a6ce:	7dfb      	ldrb	r3, [r7, #23]
 800a6d0:	e006      	b.n	800a6e0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a6d2:	7dfb      	ldrb	r3, [r7, #23]
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a6d8:	7dfb      	ldrb	r3, [r7, #23]
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d9d6      	bls.n	800a68c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a6de:	23ff      	movs	r3, #255	; 0xff
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	371c      	adds	r7, #28
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f004 f9ab 	bl	800ea50 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a6fa:	2101      	movs	r1, #1
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f004 fac4 	bl	800ec8a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3708      	adds	r7, #8
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b088      	sub	sp, #32
 800a710:	af04      	add	r7, sp, #16
 800a712:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a714:	2302      	movs	r3, #2
 800a716:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a718:	2300      	movs	r3, #0
 800a71a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a722:	b2db      	uxtb	r3, r3
 800a724:	2b01      	cmp	r3, #1
 800a726:	d102      	bne.n	800a72e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2203      	movs	r2, #3
 800a72c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	b2db      	uxtb	r3, r3
 800a734:	2b0b      	cmp	r3, #11
 800a736:	f200 822b 	bhi.w	800ab90 <USBH_Process+0x484>
 800a73a:	a201      	add	r2, pc, #4	; (adr r2, 800a740 <USBH_Process+0x34>)
 800a73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a740:	0800a771 	.word	0x0800a771
 800a744:	0800a7af 	.word	0x0800a7af
 800a748:	0800a82f 	.word	0x0800a82f
 800a74c:	0800ab1f 	.word	0x0800ab1f
 800a750:	0800ab91 	.word	0x0800ab91
 800a754:	0800a8d3 	.word	0x0800a8d3
 800a758:	0800aaa1 	.word	0x0800aaa1
 800a75c:	0800a921 	.word	0x0800a921
 800a760:	0800a941 	.word	0x0800a941
 800a764:	0800a96d 	.word	0x0800a96d
 800a768:	0800a9a7 	.word	0x0800a9a7
 800a76c:	0800ab07 	.word	0x0800ab07
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a776:	b2db      	uxtb	r3, r3
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f000 820b 	beq.w	800ab94 <USBH_Process+0x488>
      {
        USBH_UsrLog("USB Device Connected");
 800a77e:	48b9      	ldr	r0, [pc, #740]	; (800aa64 <USBH_Process+0x358>)
 800a780:	f004 fc22 	bl	800efc8 <iprintf>
 800a784:	200a      	movs	r0, #10
 800a786:	f004 fc37 	bl	800eff8 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2201      	movs	r2, #1
 800a78e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a790:	20c8      	movs	r0, #200	; 0xc8
 800a792:	f004 fae8 	bl	800ed66 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f004 f9b7 	bl	800eb0a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a7ac:	e1f2      	b.n	800ab94 <USBH_Process+0x488>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d10d      	bne.n	800a7d4 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800a7b8:	48ab      	ldr	r0, [pc, #684]	; (800aa68 <USBH_Process+0x35c>)
 800a7ba:	f004 fc05 	bl	800efc8 <iprintf>
 800a7be:	200a      	movs	r0, #10
 800a7c0:	f004 fc1a 	bl	800eff8 <putchar>
        phost->device.RstCnt = 0U;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2202      	movs	r2, #2
 800a7d0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a7d2:	e1ec      	b.n	800abae <USBH_Process+0x4a2>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a7da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7de:	d91a      	bls.n	800a816 <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	b2da      	uxtb	r2, r3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a7f6:	2b03      	cmp	r3, #3
 800a7f8:	d909      	bls.n	800a80e <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800a7fa:	489c      	ldr	r0, [pc, #624]	; (800aa6c <USBH_Process+0x360>)
 800a7fc:	f004 fbe4 	bl	800efc8 <iprintf>
 800a800:	200a      	movs	r0, #10
 800a802:	f004 fbf9 	bl	800eff8 <putchar>
            phost->gState = HOST_ABORT_STATE;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	220d      	movs	r2, #13
 800a80a:	701a      	strb	r2, [r3, #0]
      break;
 800a80c:	e1cf      	b.n	800abae <USBH_Process+0x4a2>
            phost->gState = HOST_IDLE;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	701a      	strb	r2, [r3, #0]
      break;
 800a814:	e1cb      	b.n	800abae <USBH_Process+0x4a2>
          phost->Timeout += 10U;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a81c:	f103 020a 	add.w	r2, r3, #10
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a826:	200a      	movs	r0, #10
 800a828:	f004 fa9d 	bl	800ed66 <USBH_Delay>
      break;
 800a82c:	e1bf      	b.n	800abae <USBH_Process+0x4a2>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a834:	2b00      	cmp	r3, #0
 800a836:	d005      	beq.n	800a844 <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a83e:	2104      	movs	r1, #4
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a844:	2064      	movs	r0, #100	; 0x64
 800a846:	f004 fa8e 	bl	800ed66 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f004 f936 	bl	800eabc <USBH_LL_GetSpeed>
 800a850:	4603      	mov	r3, r0
 800a852:	461a      	mov	r2, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2205      	movs	r2, #5
 800a85e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a860:	2100      	movs	r1, #0
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f001 fa77 	bl	800bd56 <USBH_AllocPipe>
 800a868:	4603      	mov	r3, r0
 800a86a:	461a      	mov	r2, r3
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a870:	2180      	movs	r1, #128	; 0x80
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f001 fa6f 	bl	800bd56 <USBH_AllocPipe>
 800a878:	4603      	mov	r3, r0
 800a87a:	461a      	mov	r2, r3
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	7919      	ldrb	r1, [r3, #4]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a894:	b292      	uxth	r2, r2
 800a896:	9202      	str	r2, [sp, #8]
 800a898:	2200      	movs	r2, #0
 800a89a:	9201      	str	r2, [sp, #4]
 800a89c:	9300      	str	r3, [sp, #0]
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2280      	movs	r2, #128	; 0x80
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f001 fa28 	bl	800bcf8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	7959      	ldrb	r1, [r3, #5]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a8bc:	b292      	uxth	r2, r2
 800a8be:	9202      	str	r2, [sp, #8]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	9201      	str	r2, [sp, #4]
 800a8c4:	9300      	str	r3, [sp, #0]
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f001 fa14 	bl	800bcf8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a8d0:	e16d      	b.n	800abae <USBH_Process+0x4a2>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f97a 	bl	800abcc <USBH_HandleEnum>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a8dc:	7bbb      	ldrb	r3, [r7, #14]
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f040 8159 	bne.w	800ab98 <USBH_Process+0x48c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800a8e6:	4862      	ldr	r0, [pc, #392]	; (800aa70 <USBH_Process+0x364>)
 800a8e8:	f004 fb6e 	bl	800efc8 <iprintf>
 800a8ec:	200a      	movs	r0, #10
 800a8ee:	f004 fb83 	bl	800eff8 <putchar>

        phost->device.current_interface = 0U;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a900:	2b01      	cmp	r3, #1
 800a902:	d109      	bne.n	800a918 <USBH_Process+0x20c>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800a904:	485b      	ldr	r0, [pc, #364]	; (800aa74 <USBH_Process+0x368>)
 800a906:	f004 fb5f 	bl	800efc8 <iprintf>
 800a90a:	200a      	movs	r0, #10
 800a90c:	f004 fb74 	bl	800eff8 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2208      	movs	r2, #8
 800a914:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a916:	e13f      	b.n	800ab98 <USBH_Process+0x48c>
          phost->gState = HOST_INPUT;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2207      	movs	r2, #7
 800a91c:	701a      	strb	r2, [r3, #0]
      break;
 800a91e:	e13b      	b.n	800ab98 <USBH_Process+0x48c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a926:	2b00      	cmp	r3, #0
 800a928:	f000 8138 	beq.w	800ab9c <USBH_Process+0x490>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a932:	2101      	movs	r1, #1
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2208      	movs	r2, #8
 800a93c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a93e:	e12d      	b.n	800ab9c <USBH_Process+0x490>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a946:	b29b      	uxth	r3, r3
 800a948:	4619      	mov	r1, r3
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 fd4e 	bl	800b3ec <USBH_SetCfg>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	f040 8124 	bne.w	800aba0 <USBH_Process+0x494>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2209      	movs	r2, #9
 800a95c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800a95e:	4846      	ldr	r0, [pc, #280]	; (800aa78 <USBH_Process+0x36c>)
 800a960:	f004 fb32 	bl	800efc8 <iprintf>
 800a964:	200a      	movs	r0, #10
 800a966:	f004 fb47 	bl	800eff8 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a96a:	e119      	b.n	800aba0 <USBH_Process+0x494>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a972:	f003 0320 	and.w	r3, r3, #32
 800a976:	2b00      	cmp	r3, #0
 800a978:	d011      	beq.n	800a99e <USBH_Process+0x292>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a97a:	2101      	movs	r1, #1
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 fd58 	bl	800b432 <USBH_SetFeature>
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	f040 810d 	bne.w	800aba4 <USBH_Process+0x498>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800a98a:	483c      	ldr	r0, [pc, #240]	; (800aa7c <USBH_Process+0x370>)
 800a98c:	f004 fb1c 	bl	800efc8 <iprintf>
 800a990:	200a      	movs	r0, #10
 800a992:	f004 fb31 	bl	800eff8 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	220a      	movs	r2, #10
 800a99a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a99c:	e102      	b.n	800aba4 <USBH_Process+0x498>
        phost->gState = HOST_CHECK_CLASS;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	220a      	movs	r2, #10
 800a9a2:	701a      	strb	r2, [r3, #0]
      break;
 800a9a4:	e0fe      	b.n	800aba4 <USBH_Process+0x498>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d106      	bne.n	800a9be <USBH_Process+0x2b2>
      {
        USBH_UsrLog("No Class has been registered.");
 800a9b0:	4833      	ldr	r0, [pc, #204]	; (800aa80 <USBH_Process+0x374>)
 800a9b2:	f004 fb09 	bl	800efc8 <iprintf>
 800a9b6:	200a      	movs	r0, #10
 800a9b8:	f004 fb1e 	bl	800eff8 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a9bc:	e0f7      	b.n	800abae <USBH_Process+0x4a2>
        phost->pActiveClass = NULL;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	73fb      	strb	r3, [r7, #15]
 800a9ca:	e016      	b.n	800a9fa <USBH_Process+0x2ee>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a9cc:	7bfa      	ldrb	r2, [r7, #15]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	32de      	adds	r2, #222	; 0xde
 800a9d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9d6:	791a      	ldrb	r2, [r3, #4]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d108      	bne.n	800a9f4 <USBH_Process+0x2e8>
            phost->pActiveClass = phost->pClass[idx];
 800a9e2:	7bfa      	ldrb	r2, [r7, #15]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	32de      	adds	r2, #222	; 0xde
 800a9e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a9f2:	e005      	b.n	800aa00 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	73fb      	strb	r3, [r7, #15]
 800a9fa:	7bfb      	ldrb	r3, [r7, #15]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d0e5      	beq.n	800a9cc <USBH_Process+0x2c0>
        if (phost->pActiveClass != NULL)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d040      	beq.n	800aa8c <USBH_Process+0x380>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	4798      	blx	r3
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d114      	bne.n	800aa46 <USBH_Process+0x33a>
            phost->gState = HOST_CLASS_REQUEST;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2206      	movs	r2, #6
 800aa20:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	4815      	ldr	r0, [pc, #84]	; (800aa84 <USBH_Process+0x378>)
 800aa2e:	f004 facb 	bl	800efc8 <iprintf>
 800aa32:	200a      	movs	r0, #10
 800aa34:	f004 fae0 	bl	800eff8 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa3e:	2103      	movs	r1, #3
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	4798      	blx	r3
      break;
 800aa44:	e0b3      	b.n	800abae <USBH_Process+0x4a2>
            phost->gState = HOST_ABORT_STATE;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	220d      	movs	r2, #13
 800aa4a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4619      	mov	r1, r3
 800aa56:	480c      	ldr	r0, [pc, #48]	; (800aa88 <USBH_Process+0x37c>)
 800aa58:	f004 fab6 	bl	800efc8 <iprintf>
 800aa5c:	200a      	movs	r0, #10
 800aa5e:	f004 facb 	bl	800eff8 <putchar>
      break;
 800aa62:	e0a4      	b.n	800abae <USBH_Process+0x4a2>
 800aa64:	08010124 	.word	0x08010124
 800aa68:	0801013c 	.word	0x0801013c
 800aa6c:	08010158 	.word	0x08010158
 800aa70:	08010184 	.word	0x08010184
 800aa74:	08010198 	.word	0x08010198
 800aa78:	080101c0 	.word	0x080101c0
 800aa7c:	080101dc 	.word	0x080101dc
 800aa80:	080101fc 	.word	0x080101fc
 800aa84:	0801021c 	.word	0x0801021c
 800aa88:	08010230 	.word	0x08010230
          phost->gState = HOST_ABORT_STATE;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	220d      	movs	r2, #13
 800aa90:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800aa92:	4849      	ldr	r0, [pc, #292]	; (800abb8 <USBH_Process+0x4ac>)
 800aa94:	f004 fa98 	bl	800efc8 <iprintf>
 800aa98:	200a      	movs	r0, #10
 800aa9a:	f004 faad 	bl	800eff8 <putchar>
      break;
 800aa9e:	e086      	b.n	800abae <USBH_Process+0x4a2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d020      	beq.n	800aaec <USBH_Process+0x3e0>
      {
        status = phost->pActiveClass->Requests(phost);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	4798      	blx	r3
 800aab6:	4603      	mov	r3, r0
 800aab8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800aaba:	7bbb      	ldrb	r3, [r7, #14]
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d103      	bne.n	800aaca <USBH_Process+0x3be>
        {
          phost->gState = HOST_CLASS;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	220b      	movs	r2, #11
 800aac6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aac8:	e06e      	b.n	800aba8 <USBH_Process+0x49c>
        else if (status == USBH_FAIL)
 800aaca:	7bbb      	ldrb	r3, [r7, #14]
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	2b02      	cmp	r3, #2
 800aad0:	d16a      	bne.n	800aba8 <USBH_Process+0x49c>
          phost->gState = HOST_ABORT_STATE;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	220d      	movs	r2, #13
 800aad6:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800aad8:	4838      	ldr	r0, [pc, #224]	; (800abbc <USBH_Process+0x4b0>)
 800aada:	f004 fa75 	bl	800efc8 <iprintf>
 800aade:	4838      	ldr	r0, [pc, #224]	; (800abc0 <USBH_Process+0x4b4>)
 800aae0:	f004 fa72 	bl	800efc8 <iprintf>
 800aae4:	200a      	movs	r0, #10
 800aae6:	f004 fa87 	bl	800eff8 <putchar>
      break;
 800aaea:	e05d      	b.n	800aba8 <USBH_Process+0x49c>
        phost->gState = HOST_ABORT_STATE;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	220d      	movs	r2, #13
 800aaf0:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800aaf2:	4832      	ldr	r0, [pc, #200]	; (800abbc <USBH_Process+0x4b0>)
 800aaf4:	f004 fa68 	bl	800efc8 <iprintf>
 800aaf8:	4832      	ldr	r0, [pc, #200]	; (800abc4 <USBH_Process+0x4b8>)
 800aafa:	f004 fa65 	bl	800efc8 <iprintf>
 800aafe:	200a      	movs	r0, #10
 800ab00:	f004 fa7a 	bl	800eff8 <putchar>
      break;
 800ab04:	e050      	b.n	800aba8 <USBH_Process+0x49c>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d04d      	beq.n	800abac <USBH_Process+0x4a0>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab16:	695b      	ldr	r3, [r3, #20]
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	4798      	blx	r3
      }
      break;
 800ab1c:	e046      	b.n	800abac <USBH_Process+0x4a0>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2200      	movs	r2, #0
 800ab22:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f7ff fc9e 	bl	800a468 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d009      	beq.n	800ab4a <USBH_Process+0x43e>
      {
        phost->pActiveClass->DeInit(phost);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab3c:	68db      	ldr	r3, [r3, #12]
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d005      	beq.n	800ab60 <USBH_Process+0x454>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab5a:	2105      	movs	r1, #5
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800ab60:	4819      	ldr	r0, [pc, #100]	; (800abc8 <USBH_Process+0x4bc>)
 800ab62:	f004 fa31 	bl	800efc8 <iprintf>
 800ab66:	200a      	movs	r0, #10
 800ab68:	f004 fa46 	bl	800eff8 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d107      	bne.n	800ab88 <USBH_Process+0x47c>
      {
        phost->device.is_ReEnumerated = 0U;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f7ff fdb3 	bl	800a6ec <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ab86:	e012      	b.n	800abae <USBH_Process+0x4a2>
        USBH_LL_Start(phost);
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f003 ff61 	bl	800ea50 <USBH_LL_Start>
      break;
 800ab8e:	e00e      	b.n	800abae <USBH_Process+0x4a2>

    case HOST_ABORT_STATE:
    default :
      break;
 800ab90:	bf00      	nop
 800ab92:	e00c      	b.n	800abae <USBH_Process+0x4a2>
      break;
 800ab94:	bf00      	nop
 800ab96:	e00a      	b.n	800abae <USBH_Process+0x4a2>
      break;
 800ab98:	bf00      	nop
 800ab9a:	e008      	b.n	800abae <USBH_Process+0x4a2>
    break;
 800ab9c:	bf00      	nop
 800ab9e:	e006      	b.n	800abae <USBH_Process+0x4a2>
      break;
 800aba0:	bf00      	nop
 800aba2:	e004      	b.n	800abae <USBH_Process+0x4a2>
      break;
 800aba4:	bf00      	nop
 800aba6:	e002      	b.n	800abae <USBH_Process+0x4a2>
      break;
 800aba8:	bf00      	nop
 800abaa:	e000      	b.n	800abae <USBH_Process+0x4a2>
      break;
 800abac:	bf00      	nop
  }
  return USBH_OK;
 800abae:	2300      	movs	r3, #0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3710      	adds	r7, #16
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	08010250 	.word	0x08010250
 800abbc:	08010064 	.word	0x08010064
 800abc0:	08010278 	.word	0x08010278
 800abc4:	080102a0 	.word	0x080102a0
 800abc8:	080102b8 	.word	0x080102b8

0800abcc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b088      	sub	sp, #32
 800abd0:	af04      	add	r7, sp, #16
 800abd2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800abd4:	2301      	movs	r3, #1
 800abd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800abd8:	2301      	movs	r3, #1
 800abda:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	785b      	ldrb	r3, [r3, #1]
 800abe0:	2b07      	cmp	r3, #7
 800abe2:	f200 8280 	bhi.w	800b0e6 <USBH_HandleEnum+0x51a>
 800abe6:	a201      	add	r2, pc, #4	; (adr r2, 800abec <USBH_HandleEnum+0x20>)
 800abe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abec:	0800ac0d 	.word	0x0800ac0d
 800abf0:	0800ace9 	.word	0x0800ace9
 800abf4:	0800ad99 	.word	0x0800ad99
 800abf8:	0800ae59 	.word	0x0800ae59
 800abfc:	0800aee1 	.word	0x0800aee1
 800ac00:	0800af95 	.word	0x0800af95
 800ac04:	0800b009 	.word	0x0800b009
 800ac08:	0800b07b 	.word	0x0800b07b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ac0c:	2108      	movs	r1, #8
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 fb1c 	bl	800b24c <USBH_Get_DevDesc>
 800ac14:	4603      	mov	r3, r0
 800ac16:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac18:	7bbb      	ldrb	r3, [r7, #14]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d130      	bne.n	800ac80 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	7919      	ldrb	r1, [r3, #4]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ac42:	b292      	uxth	r2, r2
 800ac44:	9202      	str	r2, [sp, #8]
 800ac46:	2200      	movs	r2, #0
 800ac48:	9201      	str	r2, [sp, #4]
 800ac4a:	9300      	str	r3, [sp, #0]
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2280      	movs	r2, #128	; 0x80
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f001 f851 	bl	800bcf8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	7959      	ldrb	r1, [r3, #5]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac6a:	b292      	uxth	r2, r2
 800ac6c:	9202      	str	r2, [sp, #8]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	9201      	str	r2, [sp, #4]
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	4603      	mov	r3, r0
 800ac76:	2200      	movs	r2, #0
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f001 f83d 	bl	800bcf8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ac7e:	e234      	b.n	800b0ea <USBH_HandleEnum+0x51e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac80:	7bbb      	ldrb	r3, [r7, #14]
 800ac82:	2b03      	cmp	r3, #3
 800ac84:	f040 8231 	bne.w	800b0ea <USBH_HandleEnum+0x51e>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800ac88:	48b9      	ldr	r0, [pc, #740]	; (800af70 <USBH_HandleEnum+0x3a4>)
 800ac8a:	f004 f99d 	bl	800efc8 <iprintf>
 800ac8e:	48b9      	ldr	r0, [pc, #740]	; (800af74 <USBH_HandleEnum+0x3a8>)
 800ac90:	f004 f99a 	bl	800efc8 <iprintf>
 800ac94:	200a      	movs	r0, #10
 800ac96:	f004 f9af 	bl	800eff8 <putchar>
        phost->device.EnumCnt++;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aca0:	3301      	adds	r3, #1
 800aca2:	b2da      	uxtb	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800acb0:	2b03      	cmp	r3, #3
 800acb2:	d909      	bls.n	800acc8 <USBH_HandleEnum+0xfc>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800acb4:	48b0      	ldr	r0, [pc, #704]	; (800af78 <USBH_HandleEnum+0x3ac>)
 800acb6:	f004 f987 	bl	800efc8 <iprintf>
 800acba:	200a      	movs	r0, #10
 800acbc:	f004 f99c 	bl	800eff8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	220d      	movs	r2, #13
 800acc4:	701a      	strb	r2, [r3, #0]
      break;
 800acc6:	e210      	b.n	800b0ea <USBH_HandleEnum+0x51e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	795b      	ldrb	r3, [r3, #5]
 800accc:	4619      	mov	r1, r3
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f001 f862 	bl	800bd98 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	791b      	ldrb	r3, [r3, #4]
 800acd8:	4619      	mov	r1, r3
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f001 f85c 	bl	800bd98 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	701a      	strb	r2, [r3, #0]
      break;
 800ace6:	e200      	b.n	800b0ea <USBH_HandleEnum+0x51e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ace8:	2112      	movs	r1, #18
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 faae 	bl	800b24c <USBH_Get_DevDesc>
 800acf0:	4603      	mov	r3, r0
 800acf2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800acf4:	7bbb      	ldrb	r3, [r7, #14]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d117      	bne.n	800ad2a <USBH_HandleEnum+0x15e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 800ad00:	4619      	mov	r1, r3
 800ad02:	489e      	ldr	r0, [pc, #632]	; (800af7c <USBH_HandleEnum+0x3b0>)
 800ad04:	f004 f960 	bl	800efc8 <iprintf>
 800ad08:	200a      	movs	r0, #10
 800ad0a:	f004 f975 	bl	800eff8 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
 800ad14:	4619      	mov	r1, r3
 800ad16:	489a      	ldr	r0, [pc, #616]	; (800af80 <USBH_HandleEnum+0x3b4>)
 800ad18:	f004 f956 	bl	800efc8 <iprintf>
 800ad1c:	200a      	movs	r0, #10
 800ad1e:	f004 f96b 	bl	800eff8 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2202      	movs	r2, #2
 800ad26:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ad28:	e1e1      	b.n	800b0ee <USBH_HandleEnum+0x522>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad2a:	7bbb      	ldrb	r3, [r7, #14]
 800ad2c:	2b03      	cmp	r3, #3
 800ad2e:	f040 81de 	bne.w	800b0ee <USBH_HandleEnum+0x522>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800ad32:	488f      	ldr	r0, [pc, #572]	; (800af70 <USBH_HandleEnum+0x3a4>)
 800ad34:	f004 f948 	bl	800efc8 <iprintf>
 800ad38:	4892      	ldr	r0, [pc, #584]	; (800af84 <USBH_HandleEnum+0x3b8>)
 800ad3a:	f004 f945 	bl	800efc8 <iprintf>
 800ad3e:	200a      	movs	r0, #10
 800ad40:	f004 f95a 	bl	800eff8 <putchar>
        phost->device.EnumCnt++;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	b2da      	uxtb	r2, r3
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad5a:	2b03      	cmp	r3, #3
 800ad5c:	d909      	bls.n	800ad72 <USBH_HandleEnum+0x1a6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800ad5e:	4886      	ldr	r0, [pc, #536]	; (800af78 <USBH_HandleEnum+0x3ac>)
 800ad60:	f004 f932 	bl	800efc8 <iprintf>
 800ad64:	200a      	movs	r0, #10
 800ad66:	f004 f947 	bl	800eff8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	220d      	movs	r2, #13
 800ad6e:	701a      	strb	r2, [r3, #0]
      break;
 800ad70:	e1bd      	b.n	800b0ee <USBH_HandleEnum+0x522>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	795b      	ldrb	r3, [r3, #5]
 800ad76:	4619      	mov	r1, r3
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f001 f80d 	bl	800bd98 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	791b      	ldrb	r3, [r3, #4]
 800ad82:	4619      	mov	r1, r3
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f001 f807 	bl	800bd98 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	701a      	strb	r2, [r3, #0]
      break;
 800ad96:	e1aa      	b.n	800b0ee <USBH_HandleEnum+0x522>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ad98:	2101      	movs	r1, #1
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 fb02 	bl	800b3a4 <USBH_SetAddress>
 800ada0:	4603      	mov	r3, r0
 800ada2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ada4:	7bbb      	ldrb	r3, [r7, #14]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d13c      	bne.n	800ae24 <USBH_HandleEnum+0x258>
      {
        USBH_Delay(2U);
 800adaa:	2002      	movs	r0, #2
 800adac:	f003 ffdb 	bl	800ed66 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2201      	movs	r2, #1
 800adb4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 800adbe:	4619      	mov	r1, r3
 800adc0:	4871      	ldr	r0, [pc, #452]	; (800af88 <USBH_HandleEnum+0x3bc>)
 800adc2:	f004 f901 	bl	800efc8 <iprintf>
 800adc6:	200a      	movs	r0, #10
 800adc8:	f004 f916 	bl	800eff8 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2203      	movs	r2, #3
 800add0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	7919      	ldrb	r1, [r3, #4]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ade6:	b292      	uxth	r2, r2
 800ade8:	9202      	str	r2, [sp, #8]
 800adea:	2200      	movs	r2, #0
 800adec:	9201      	str	r2, [sp, #4]
 800adee:	9300      	str	r3, [sp, #0]
 800adf0:	4603      	mov	r3, r0
 800adf2:	2280      	movs	r2, #128	; 0x80
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 ff7f 	bl	800bcf8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	7959      	ldrb	r1, [r3, #5]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ae0e:	b292      	uxth	r2, r2
 800ae10:	9202      	str	r2, [sp, #8]
 800ae12:	2200      	movs	r2, #0
 800ae14:	9201      	str	r2, [sp, #4]
 800ae16:	9300      	str	r3, [sp, #0]
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 ff6b 	bl	800bcf8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ae22:	e166      	b.n	800b0f2 <USBH_HandleEnum+0x526>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae24:	7bbb      	ldrb	r3, [r7, #14]
 800ae26:	2b03      	cmp	r3, #3
 800ae28:	f040 8163 	bne.w	800b0f2 <USBH_HandleEnum+0x526>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800ae2c:	4850      	ldr	r0, [pc, #320]	; (800af70 <USBH_HandleEnum+0x3a4>)
 800ae2e:	f004 f8cb 	bl	800efc8 <iprintf>
 800ae32:	4856      	ldr	r0, [pc, #344]	; (800af8c <USBH_HandleEnum+0x3c0>)
 800ae34:	f004 f8c8 	bl	800efc8 <iprintf>
 800ae38:	200a      	movs	r0, #10
 800ae3a:	f004 f8dd 	bl	800eff8 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800ae3e:	484e      	ldr	r0, [pc, #312]	; (800af78 <USBH_HandleEnum+0x3ac>)
 800ae40:	f004 f8c2 	bl	800efc8 <iprintf>
 800ae44:	200a      	movs	r0, #10
 800ae46:	f004 f8d7 	bl	800eff8 <putchar>
        phost->gState = HOST_ABORT_STATE;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	220d      	movs	r2, #13
 800ae4e:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	705a      	strb	r2, [r3, #1]
      break;
 800ae56:	e14c      	b.n	800b0f2 <USBH_HandleEnum+0x526>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ae58:	2109      	movs	r1, #9
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 fa1e 	bl	800b29c <USBH_Get_CfgDesc>
 800ae60:	4603      	mov	r3, r0
 800ae62:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae64:	7bbb      	ldrb	r3, [r7, #14]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d103      	bne.n	800ae72 <USBH_HandleEnum+0x2a6>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2204      	movs	r2, #4
 800ae6e:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ae70:	e141      	b.n	800b0f6 <USBH_HandleEnum+0x52a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae72:	7bbb      	ldrb	r3, [r7, #14]
 800ae74:	2b03      	cmp	r3, #3
 800ae76:	f040 813e 	bne.w	800b0f6 <USBH_HandleEnum+0x52a>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800ae7a:	483d      	ldr	r0, [pc, #244]	; (800af70 <USBH_HandleEnum+0x3a4>)
 800ae7c:	f004 f8a4 	bl	800efc8 <iprintf>
 800ae80:	4843      	ldr	r0, [pc, #268]	; (800af90 <USBH_HandleEnum+0x3c4>)
 800ae82:	f004 f8a1 	bl	800efc8 <iprintf>
 800ae86:	200a      	movs	r0, #10
 800ae88:	f004 f8b6 	bl	800eff8 <putchar>
        phost->device.EnumCnt++;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae92:	3301      	adds	r3, #1
 800ae94:	b2da      	uxtb	r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aea2:	2b03      	cmp	r3, #3
 800aea4:	d909      	bls.n	800aeba <USBH_HandleEnum+0x2ee>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800aea6:	4834      	ldr	r0, [pc, #208]	; (800af78 <USBH_HandleEnum+0x3ac>)
 800aea8:	f004 f88e 	bl	800efc8 <iprintf>
 800aeac:	200a      	movs	r0, #10
 800aeae:	f004 f8a3 	bl	800eff8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	220d      	movs	r2, #13
 800aeb6:	701a      	strb	r2, [r3, #0]
      break;
 800aeb8:	e11d      	b.n	800b0f6 <USBH_HandleEnum+0x52a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	795b      	ldrb	r3, [r3, #5]
 800aebe:	4619      	mov	r1, r3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 ff69 	bl	800bd98 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	791b      	ldrb	r3, [r3, #4]
 800aeca:	4619      	mov	r1, r3
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 ff63 	bl	800bd98 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	701a      	strb	r2, [r3, #0]
      break;
 800aede:	e10a      	b.n	800b0f6 <USBH_HandleEnum+0x52a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800aee6:	4619      	mov	r1, r3
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 f9d7 	bl	800b29c <USBH_Get_CfgDesc>
 800aeee:	4603      	mov	r3, r0
 800aef0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aef2:	7bbb      	ldrb	r3, [r7, #14]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d103      	bne.n	800af00 <USBH_HandleEnum+0x334>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2205      	movs	r2, #5
 800aefc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aefe:	e0fc      	b.n	800b0fa <USBH_HandleEnum+0x52e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af00:	7bbb      	ldrb	r3, [r7, #14]
 800af02:	2b03      	cmp	r3, #3
 800af04:	f040 80f9 	bne.w	800b0fa <USBH_HandleEnum+0x52e>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800af08:	4819      	ldr	r0, [pc, #100]	; (800af70 <USBH_HandleEnum+0x3a4>)
 800af0a:	f004 f85d 	bl	800efc8 <iprintf>
 800af0e:	4820      	ldr	r0, [pc, #128]	; (800af90 <USBH_HandleEnum+0x3c4>)
 800af10:	f004 f85a 	bl	800efc8 <iprintf>
 800af14:	200a      	movs	r0, #10
 800af16:	f004 f86f 	bl	800eff8 <putchar>
        phost->device.EnumCnt++;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af20:	3301      	adds	r3, #1
 800af22:	b2da      	uxtb	r2, r3
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af30:	2b03      	cmp	r3, #3
 800af32:	d909      	bls.n	800af48 <USBH_HandleEnum+0x37c>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800af34:	4810      	ldr	r0, [pc, #64]	; (800af78 <USBH_HandleEnum+0x3ac>)
 800af36:	f004 f847 	bl	800efc8 <iprintf>
 800af3a:	200a      	movs	r0, #10
 800af3c:	f004 f85c 	bl	800eff8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	220d      	movs	r2, #13
 800af44:	701a      	strb	r2, [r3, #0]
      break;
 800af46:	e0d8      	b.n	800b0fa <USBH_HandleEnum+0x52e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	795b      	ldrb	r3, [r3, #5]
 800af4c:	4619      	mov	r1, r3
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 ff22 	bl	800bd98 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	791b      	ldrb	r3, [r3, #4]
 800af58:	4619      	mov	r1, r3
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 ff1c 	bl	800bd98 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2200      	movs	r2, #0
 800af64:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2200      	movs	r2, #0
 800af6a:	701a      	strb	r2, [r3, #0]
      break;
 800af6c:	e0c5      	b.n	800b0fa <USBH_HandleEnum+0x52e>
 800af6e:	bf00      	nop
 800af70:	08010064 	.word	0x08010064
 800af74:	080102d0 	.word	0x080102d0
 800af78:	08010304 	.word	0x08010304
 800af7c:	08010344 	.word	0x08010344
 800af80:	08010350 	.word	0x08010350
 800af84:	0801035c 	.word	0x0801035c
 800af88:	08010398 	.word	0x08010398
 800af8c:	080103b0 	.word	0x080103b0
 800af90:	080103e4 	.word	0x080103e4

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d02a      	beq.n	800aff4 <USBH_HandleEnum+0x428>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800afaa:	23ff      	movs	r3, #255	; 0xff
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 f999 	bl	800b2e4 <USBH_Get_StringDesc>
 800afb2:	4603      	mov	r3, r0
 800afb4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800afb6:	7bbb      	ldrb	r3, [r7, #14]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d10d      	bne.n	800afd8 <USBH_HandleEnum+0x40c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800afc2:	4619      	mov	r1, r3
 800afc4:	4853      	ldr	r0, [pc, #332]	; (800b114 <USBH_HandleEnum+0x548>)
 800afc6:	f003 ffff 	bl	800efc8 <iprintf>
 800afca:	200a      	movs	r0, #10
 800afcc:	f004 f814 	bl	800eff8 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2206      	movs	r2, #6
 800afd4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800afd6:	e092      	b.n	800b0fe <USBH_HandleEnum+0x532>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800afd8:	7bbb      	ldrb	r3, [r7, #14]
 800afda:	2b03      	cmp	r3, #3
 800afdc:	f040 808f 	bne.w	800b0fe <USBH_HandleEnum+0x532>
          USBH_UsrLog("Manufacturer : N/A");
 800afe0:	484d      	ldr	r0, [pc, #308]	; (800b118 <USBH_HandleEnum+0x54c>)
 800afe2:	f003 fff1 	bl	800efc8 <iprintf>
 800afe6:	200a      	movs	r0, #10
 800afe8:	f004 f806 	bl	800eff8 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2206      	movs	r2, #6
 800aff0:	705a      	strb	r2, [r3, #1]
      break;
 800aff2:	e084      	b.n	800b0fe <USBH_HandleEnum+0x532>
        USBH_UsrLog("Manufacturer : N/A");
 800aff4:	4848      	ldr	r0, [pc, #288]	; (800b118 <USBH_HandleEnum+0x54c>)
 800aff6:	f003 ffe7 	bl	800efc8 <iprintf>
 800affa:	200a      	movs	r0, #10
 800affc:	f003 fffc 	bl	800eff8 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2206      	movs	r2, #6
 800b004:	705a      	strb	r2, [r3, #1]
      break;
 800b006:	e07a      	b.n	800b0fe <USBH_HandleEnum+0x532>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d029      	beq.n	800b066 <USBH_HandleEnum+0x49a>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b01e:	23ff      	movs	r3, #255	; 0xff
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 f95f 	bl	800b2e4 <USBH_Get_StringDesc>
 800b026:	4603      	mov	r3, r0
 800b028:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b02a:	7bbb      	ldrb	r3, [r7, #14]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d10d      	bne.n	800b04c <USBH_HandleEnum+0x480>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b036:	4619      	mov	r1, r3
 800b038:	4838      	ldr	r0, [pc, #224]	; (800b11c <USBH_HandleEnum+0x550>)
 800b03a:	f003 ffc5 	bl	800efc8 <iprintf>
 800b03e:	200a      	movs	r0, #10
 800b040:	f003 ffda 	bl	800eff8 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2207      	movs	r2, #7
 800b048:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b04a:	e05a      	b.n	800b102 <USBH_HandleEnum+0x536>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b04c:	7bbb      	ldrb	r3, [r7, #14]
 800b04e:	2b03      	cmp	r3, #3
 800b050:	d157      	bne.n	800b102 <USBH_HandleEnum+0x536>
          USBH_UsrLog("Product : N/A");
 800b052:	4833      	ldr	r0, [pc, #204]	; (800b120 <USBH_HandleEnum+0x554>)
 800b054:	f003 ffb8 	bl	800efc8 <iprintf>
 800b058:	200a      	movs	r0, #10
 800b05a:	f003 ffcd 	bl	800eff8 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2207      	movs	r2, #7
 800b062:	705a      	strb	r2, [r3, #1]
      break;
 800b064:	e04d      	b.n	800b102 <USBH_HandleEnum+0x536>
        USBH_UsrLog("Product : N/A");
 800b066:	482e      	ldr	r0, [pc, #184]	; (800b120 <USBH_HandleEnum+0x554>)
 800b068:	f003 ffae 	bl	800efc8 <iprintf>
 800b06c:	200a      	movs	r0, #10
 800b06e:	f003 ffc3 	bl	800eff8 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2207      	movs	r2, #7
 800b076:	705a      	strb	r2, [r3, #1]
      break;
 800b078:	e043      	b.n	800b102 <USBH_HandleEnum+0x536>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b080:	2b00      	cmp	r3, #0
 800b082:	d027      	beq.n	800b0d4 <USBH_HandleEnum+0x508>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b090:	23ff      	movs	r3, #255	; 0xff
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 f926 	bl	800b2e4 <USBH_Get_StringDesc>
 800b098:	4603      	mov	r3, r0
 800b09a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b09c:	7bbb      	ldrb	r3, [r7, #14]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d10c      	bne.n	800b0bc <USBH_HandleEnum+0x4f0>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	481e      	ldr	r0, [pc, #120]	; (800b124 <USBH_HandleEnum+0x558>)
 800b0ac:	f003 ff8c 	bl	800efc8 <iprintf>
 800b0b0:	200a      	movs	r0, #10
 800b0b2:	f003 ffa1 	bl	800eff8 <putchar>
          Status = USBH_OK;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b0ba:	e024      	b.n	800b106 <USBH_HandleEnum+0x53a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0bc:	7bbb      	ldrb	r3, [r7, #14]
 800b0be:	2b03      	cmp	r3, #3
 800b0c0:	d121      	bne.n	800b106 <USBH_HandleEnum+0x53a>
          USBH_UsrLog("Serial Number : N/A");
 800b0c2:	4819      	ldr	r0, [pc, #100]	; (800b128 <USBH_HandleEnum+0x55c>)
 800b0c4:	f003 ff80 	bl	800efc8 <iprintf>
 800b0c8:	200a      	movs	r0, #10
 800b0ca:	f003 ff95 	bl	800eff8 <putchar>
          Status = USBH_OK;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	73fb      	strb	r3, [r7, #15]
      break;
 800b0d2:	e018      	b.n	800b106 <USBH_HandleEnum+0x53a>
        USBH_UsrLog("Serial Number : N/A");
 800b0d4:	4814      	ldr	r0, [pc, #80]	; (800b128 <USBH_HandleEnum+0x55c>)
 800b0d6:	f003 ff77 	bl	800efc8 <iprintf>
 800b0da:	200a      	movs	r0, #10
 800b0dc:	f003 ff8c 	bl	800eff8 <putchar>
        Status = USBH_OK;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	73fb      	strb	r3, [r7, #15]
      break;
 800b0e4:	e00f      	b.n	800b106 <USBH_HandleEnum+0x53a>

    default:
      break;
 800b0e6:	bf00      	nop
 800b0e8:	e00e      	b.n	800b108 <USBH_HandleEnum+0x53c>
      break;
 800b0ea:	bf00      	nop
 800b0ec:	e00c      	b.n	800b108 <USBH_HandleEnum+0x53c>
      break;
 800b0ee:	bf00      	nop
 800b0f0:	e00a      	b.n	800b108 <USBH_HandleEnum+0x53c>
      break;
 800b0f2:	bf00      	nop
 800b0f4:	e008      	b.n	800b108 <USBH_HandleEnum+0x53c>
      break;
 800b0f6:	bf00      	nop
 800b0f8:	e006      	b.n	800b108 <USBH_HandleEnum+0x53c>
      break;
 800b0fa:	bf00      	nop
 800b0fc:	e004      	b.n	800b108 <USBH_HandleEnum+0x53c>
      break;
 800b0fe:	bf00      	nop
 800b100:	e002      	b.n	800b108 <USBH_HandleEnum+0x53c>
      break;
 800b102:	bf00      	nop
 800b104:	e000      	b.n	800b108 <USBH_HandleEnum+0x53c>
      break;
 800b106:	bf00      	nop
  }
  return Status;
 800b108:	7bfb      	ldrb	r3, [r7, #15]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3710      	adds	r7, #16
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	08010428 	.word	0x08010428
 800b118:	0801043c 	.word	0x0801043c
 800b11c:	08010450 	.word	0x08010450
 800b120:	08010460 	.word	0x08010460
 800b124:	08010470 	.word	0x08010470
 800b128:	08010484 	.word	0x08010484

0800b12c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	683a      	ldr	r2, [r7, #0]
 800b13a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b13e:	bf00      	nop
 800b140:	370c      	adds	r7, #12
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr

0800b14a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b082      	sub	sp, #8
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b158:	1c5a      	adds	r2, r3, #1
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 f804 	bl	800b16e <USBH_HandleSof>
}
 800b166:	bf00      	nop
 800b168:	3708      	adds	r7, #8
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b16e:	b580      	push	{r7, lr}
 800b170:	b082      	sub	sp, #8
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	2b0b      	cmp	r3, #11
 800b17e:	d10a      	bne.n	800b196 <USBH_HandleSof+0x28>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b186:	2b00      	cmp	r3, #0
 800b188:	d005      	beq.n	800b196 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b190:	699b      	ldr	r3, [r3, #24]
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	4798      	blx	r3
  }
}
 800b196:	bf00      	nop
 800b198:	3708      	adds	r7, #8
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b19e:	b480      	push	{r7}
 800b1a0:	b083      	sub	sp, #12
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b1ae:	bf00      	nop
}
 800b1b0:	370c      	adds	r7, #12
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr

0800b1ba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b1ba:	b480      	push	{r7}
 800b1bc:	b083      	sub	sp, #12
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b1ca:	bf00      	nop
}
 800b1cc:	370c      	adds	r7, #12
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr

0800b1d6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b1d6:	b480      	push	{r7}
 800b1d8:	b083      	sub	sp, #12
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b1f6:	2300      	movs	r3, #0
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b082      	sub	sp, #8
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f003 fc2e 	bl	800ea86 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	791b      	ldrb	r3, [r3, #4]
 800b22e:	4619      	mov	r1, r3
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 fdb1 	bl	800bd98 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	795b      	ldrb	r3, [r3, #5]
 800b23a:	4619      	mov	r1, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 fdab 	bl	800bd98 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b242:	2300      	movs	r3, #0
}
 800b244:	4618      	mov	r0, r3
 800b246:	3708      	adds	r7, #8
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b086      	sub	sp, #24
 800b250:	af02      	add	r7, sp, #8
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	460b      	mov	r3, r1
 800b256:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b25e:	78fb      	ldrb	r3, [r7, #3]
 800b260:	b29b      	uxth	r3, r3
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	4613      	mov	r3, r2
 800b266:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b26a:	2100      	movs	r1, #0
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 f864 	bl	800b33a <USBH_GetDescriptor>
 800b272:	4603      	mov	r3, r0
 800b274:	73fb      	strb	r3, [r7, #15]
 800b276:	7bfb      	ldrb	r3, [r7, #15]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d10a      	bne.n	800b292 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b288:	78fa      	ldrb	r2, [r7, #3]
 800b28a:	b292      	uxth	r2, r2
 800b28c:	4619      	mov	r1, r3
 800b28e:	f000 f918 	bl	800b4c2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b292:	7bfb      	ldrb	r3, [r7, #15]
}
 800b294:	4618      	mov	r0, r3
 800b296:	3710      	adds	r7, #16
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b086      	sub	sp, #24
 800b2a0:	af02      	add	r7, sp, #8
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	331c      	adds	r3, #28
 800b2ac:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b2ae:	887b      	ldrh	r3, [r7, #2]
 800b2b0:	9300      	str	r3, [sp, #0]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 f83d 	bl	800b33a <USBH_GetDescriptor>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	72fb      	strb	r3, [r7, #11]
 800b2c4:	7afb      	ldrb	r3, [r7, #11]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d107      	bne.n	800b2da <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b2d0:	887a      	ldrh	r2, [r7, #2]
 800b2d2:	68f9      	ldr	r1, [r7, #12]
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f000 f964 	bl	800b5a2 <USBH_ParseCfgDesc>
  }

  return status;
 800b2da:	7afb      	ldrb	r3, [r7, #11]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b088      	sub	sp, #32
 800b2e8:	af02      	add	r7, sp, #8
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	607a      	str	r2, [r7, #4]
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	72fb      	strb	r3, [r7, #11]
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b2f8:	7afb      	ldrb	r3, [r7, #11]
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b300:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b308:	893b      	ldrh	r3, [r7, #8]
 800b30a:	9300      	str	r3, [sp, #0]
 800b30c:	460b      	mov	r3, r1
 800b30e:	2100      	movs	r1, #0
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f000 f812 	bl	800b33a <USBH_GetDescriptor>
 800b316:	4603      	mov	r3, r0
 800b318:	75fb      	strb	r3, [r7, #23]
 800b31a:	7dfb      	ldrb	r3, [r7, #23]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d107      	bne.n	800b330 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b326:	893a      	ldrh	r2, [r7, #8]
 800b328:	6879      	ldr	r1, [r7, #4]
 800b32a:	4618      	mov	r0, r3
 800b32c:	f000 fa37 	bl	800b79e <USBH_ParseStringDesc>
  }

  return status;
 800b330:	7dfb      	ldrb	r3, [r7, #23]
}
 800b332:	4618      	mov	r0, r3
 800b334:	3718      	adds	r7, #24
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b084      	sub	sp, #16
 800b33e:	af00      	add	r7, sp, #0
 800b340:	60f8      	str	r0, [r7, #12]
 800b342:	607b      	str	r3, [r7, #4]
 800b344:	460b      	mov	r3, r1
 800b346:	72fb      	strb	r3, [r7, #11]
 800b348:	4613      	mov	r3, r2
 800b34a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	789b      	ldrb	r3, [r3, #2]
 800b350:	2b01      	cmp	r3, #1
 800b352:	d11c      	bne.n	800b38e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b354:	7afb      	ldrb	r3, [r7, #11]
 800b356:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b35a:	b2da      	uxtb	r2, r3
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2206      	movs	r2, #6
 800b364:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	893a      	ldrh	r2, [r7, #8]
 800b36a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b36c:	893b      	ldrh	r3, [r7, #8]
 800b36e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b376:	d104      	bne.n	800b382 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f240 4209 	movw	r2, #1033	; 0x409
 800b37e:	829a      	strh	r2, [r3, #20]
 800b380:	e002      	b.n	800b388 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2200      	movs	r2, #0
 800b386:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	8b3a      	ldrh	r2, [r7, #24]
 800b38c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b38e:	8b3b      	ldrh	r3, [r7, #24]
 800b390:	461a      	mov	r2, r3
 800b392:	6879      	ldr	r1, [r7, #4]
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f000 fa50 	bl	800b83a <USBH_CtlReq>
 800b39a:	4603      	mov	r3, r0
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	789b      	ldrb	r3, [r3, #2]
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d10f      	bne.n	800b3d8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2205      	movs	r2, #5
 800b3c2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b3c4:	78fb      	ldrb	r3, [r7, #3]
 800b3c6:	b29a      	uxth	r2, r3
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b3d8:	2200      	movs	r2, #0
 800b3da:	2100      	movs	r1, #0
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 fa2c 	bl	800b83a <USBH_CtlReq>
 800b3e2:	4603      	mov	r3, r0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3708      	adds	r7, #8
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	789b      	ldrb	r3, [r3, #2]
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d10e      	bne.n	800b41e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2209      	movs	r2, #9
 800b40a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	887a      	ldrh	r2, [r7, #2]
 800b410:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b41e:	2200      	movs	r2, #0
 800b420:	2100      	movs	r1, #0
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 fa09 	bl	800b83a <USBH_CtlReq>
 800b428:	4603      	mov	r3, r0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3708      	adds	r7, #8
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b082      	sub	sp, #8
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
 800b43a:	460b      	mov	r3, r1
 800b43c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	789b      	ldrb	r3, [r3, #2]
 800b442:	2b01      	cmp	r3, #1
 800b444:	d10f      	bne.n	800b466 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2200      	movs	r2, #0
 800b44a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2203      	movs	r2, #3
 800b450:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b452:	78fb      	ldrb	r3, [r7, #3]
 800b454:	b29a      	uxth	r2, r3
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2200      	movs	r2, #0
 800b45e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2200      	movs	r2, #0
 800b464:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b466:	2200      	movs	r2, #0
 800b468:	2100      	movs	r1, #0
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 f9e5 	bl	800b83a <USBH_CtlReq>
 800b470:	4603      	mov	r3, r0
}
 800b472:	4618      	mov	r0, r3
 800b474:	3708      	adds	r7, #8
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}

0800b47a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b082      	sub	sp, #8
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
 800b482:	460b      	mov	r3, r1
 800b484:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	789b      	ldrb	r3, [r3, #2]
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d10f      	bne.n	800b4ae <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2202      	movs	r2, #2
 800b492:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2201      	movs	r2, #1
 800b498:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2200      	movs	r2, #0
 800b49e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b4a0:	78fb      	ldrb	r3, [r7, #3]
 800b4a2:	b29a      	uxth	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	2100      	movs	r1, #0
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 f9c1 	bl	800b83a <USBH_CtlReq>
 800b4b8:	4603      	mov	r3, r0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3708      	adds	r7, #8
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}

0800b4c2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b4c2:	b480      	push	{r7}
 800b4c4:	b085      	sub	sp, #20
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	60f8      	str	r0, [r7, #12]
 800b4ca:	60b9      	str	r1, [r7, #8]
 800b4cc:	4613      	mov	r3, r2
 800b4ce:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	781a      	ldrb	r2, [r3, #0]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	785a      	ldrb	r2, [r3, #1]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	3302      	adds	r3, #2
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	b29a      	uxth	r2, r3
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	3303      	adds	r3, #3
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	021b      	lsls	r3, r3, #8
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	791a      	ldrb	r2, [r3, #4]
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	795a      	ldrb	r2, [r3, #5]
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	799a      	ldrb	r2, [r3, #6]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	79da      	ldrb	r2, [r3, #7]
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b51c:	88fb      	ldrh	r3, [r7, #6]
 800b51e:	2b08      	cmp	r3, #8
 800b520:	d939      	bls.n	800b596 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	3308      	adds	r3, #8
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	b29a      	uxth	r2, r3
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	3309      	adds	r3, #9
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	b29b      	uxth	r3, r3
 800b532:	021b      	lsls	r3, r3, #8
 800b534:	b29b      	uxth	r3, r3
 800b536:	4313      	orrs	r3, r2
 800b538:	b29a      	uxth	r2, r3
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	330a      	adds	r3, #10
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	b29a      	uxth	r2, r3
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	330b      	adds	r3, #11
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	021b      	lsls	r3, r3, #8
 800b550:	b29b      	uxth	r3, r3
 800b552:	4313      	orrs	r3, r2
 800b554:	b29a      	uxth	r2, r3
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	330c      	adds	r3, #12
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	b29a      	uxth	r2, r3
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	330d      	adds	r3, #13
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	b29b      	uxth	r3, r3
 800b56a:	021b      	lsls	r3, r3, #8
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	4313      	orrs	r3, r2
 800b570:	b29a      	uxth	r2, r3
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	7b9a      	ldrb	r2, [r3, #14]
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	7bda      	ldrb	r2, [r3, #15]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	7c1a      	ldrb	r2, [r3, #16]
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	7c5a      	ldrb	r2, [r3, #17]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	745a      	strb	r2, [r3, #17]
  }
}
 800b596:	bf00      	nop
 800b598:	3714      	adds	r7, #20
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr

0800b5a2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b08a      	sub	sp, #40	; 0x28
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	60f8      	str	r0, [r7, #12]
 800b5aa:	60b9      	str	r1, [r7, #8]
 800b5ac:	4613      	mov	r3, r2
 800b5ae:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	781a      	ldrb	r2, [r3, #0]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	785a      	ldrb	r2, [r3, #1]
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	3302      	adds	r3, #2
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	b29a      	uxth	r2, r3
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	3303      	adds	r3, #3
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	021b      	lsls	r3, r3, #8
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	b29a      	uxth	r2, r3
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	791a      	ldrb	r2, [r3, #4]
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	795a      	ldrb	r2, [r3, #5]
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	799a      	ldrb	r2, [r3, #6]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	79da      	ldrb	r2, [r3, #7]
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	7a1a      	ldrb	r2, [r3, #8]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b618:	88fb      	ldrh	r3, [r7, #6]
 800b61a:	2b09      	cmp	r3, #9
 800b61c:	d95f      	bls.n	800b6de <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b61e:	2309      	movs	r3, #9
 800b620:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b622:	2300      	movs	r3, #0
 800b624:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b626:	e051      	b.n	800b6cc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b628:	f107 0316 	add.w	r3, r7, #22
 800b62c:	4619      	mov	r1, r3
 800b62e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b630:	f000 f8e8 	bl	800b804 <USBH_GetNextDesc>
 800b634:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b638:	785b      	ldrb	r3, [r3, #1]
 800b63a:	2b04      	cmp	r3, #4
 800b63c:	d146      	bne.n	800b6cc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b63e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b642:	221a      	movs	r2, #26
 800b644:	fb02 f303 	mul.w	r3, r2, r3
 800b648:	3308      	adds	r3, #8
 800b64a:	68fa      	ldr	r2, [r7, #12]
 800b64c:	4413      	add	r3, r2
 800b64e:	3302      	adds	r3, #2
 800b650:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b652:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b654:	69f8      	ldr	r0, [r7, #28]
 800b656:	f000 f846 	bl	800b6e6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b65a:	2300      	movs	r3, #0
 800b65c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b660:	2300      	movs	r3, #0
 800b662:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b664:	e022      	b.n	800b6ac <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b666:	f107 0316 	add.w	r3, r7, #22
 800b66a:	4619      	mov	r1, r3
 800b66c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b66e:	f000 f8c9 	bl	800b804 <USBH_GetNextDesc>
 800b672:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b676:	785b      	ldrb	r3, [r3, #1]
 800b678:	2b05      	cmp	r3, #5
 800b67a:	d117      	bne.n	800b6ac <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b67c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b680:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b684:	3201      	adds	r2, #1
 800b686:	00d2      	lsls	r2, r2, #3
 800b688:	211a      	movs	r1, #26
 800b68a:	fb01 f303 	mul.w	r3, r1, r3
 800b68e:	4413      	add	r3, r2
 800b690:	3308      	adds	r3, #8
 800b692:	68fa      	ldr	r2, [r7, #12]
 800b694:	4413      	add	r3, r2
 800b696:	3304      	adds	r3, #4
 800b698:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b69a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b69c:	69b8      	ldr	r0, [r7, #24]
 800b69e:	f000 f851 	bl	800b744 <USBH_ParseEPDesc>
            ep_ix++;
 800b6a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	791b      	ldrb	r3, [r3, #4]
 800b6b0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d204      	bcs.n	800b6c2 <USBH_ParseCfgDesc+0x120>
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	885a      	ldrh	r2, [r3, #2]
 800b6bc:	8afb      	ldrh	r3, [r7, #22]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d8d1      	bhi.n	800b666 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b6c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b6cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d804      	bhi.n	800b6de <USBH_ParseCfgDesc+0x13c>
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	885a      	ldrh	r2, [r3, #2]
 800b6d8:	8afb      	ldrh	r3, [r7, #22]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d8a4      	bhi.n	800b628 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b6de:	bf00      	nop
 800b6e0:	3728      	adds	r7, #40	; 0x28
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}

0800b6e6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b083      	sub	sp, #12
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
 800b6ee:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	781a      	ldrb	r2, [r3, #0]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	785a      	ldrb	r2, [r3, #1]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	789a      	ldrb	r2, [r3, #2]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	78da      	ldrb	r2, [r3, #3]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	791a      	ldrb	r2, [r3, #4]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	795a      	ldrb	r2, [r3, #5]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	799a      	ldrb	r2, [r3, #6]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	79da      	ldrb	r2, [r3, #7]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	7a1a      	ldrb	r2, [r3, #8]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	721a      	strb	r2, [r3, #8]
}
 800b738:	bf00      	nop
 800b73a:	370c      	adds	r7, #12
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	781a      	ldrb	r2, [r3, #0]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	785a      	ldrb	r2, [r3, #1]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	789a      	ldrb	r2, [r3, #2]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	78da      	ldrb	r2, [r3, #3]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	3304      	adds	r3, #4
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	b29a      	uxth	r2, r3
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	3305      	adds	r3, #5
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	021b      	lsls	r3, r3, #8
 800b780:	b29b      	uxth	r3, r3
 800b782:	4313      	orrs	r3, r2
 800b784:	b29a      	uxth	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	799a      	ldrb	r2, [r3, #6]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	719a      	strb	r2, [r3, #6]
}
 800b792:	bf00      	nop
 800b794:	370c      	adds	r7, #12
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr

0800b79e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b79e:	b480      	push	{r7}
 800b7a0:	b087      	sub	sp, #28
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	60f8      	str	r0, [r7, #12]
 800b7a6:	60b9      	str	r1, [r7, #8]
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	2b03      	cmp	r3, #3
 800b7b4:	d120      	bne.n	800b7f8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	1e9a      	subs	r2, r3, #2
 800b7bc:	88fb      	ldrh	r3, [r7, #6]
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	bf28      	it	cs
 800b7c2:	4613      	movcs	r3, r2
 800b7c4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	3302      	adds	r3, #2
 800b7ca:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	82fb      	strh	r3, [r7, #22]
 800b7d0:	e00b      	b.n	800b7ea <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b7d2:	8afb      	ldrh	r3, [r7, #22]
 800b7d4:	68fa      	ldr	r2, [r7, #12]
 800b7d6:	4413      	add	r3, r2
 800b7d8:	781a      	ldrb	r2, [r3, #0]
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b7e4:	8afb      	ldrh	r3, [r7, #22]
 800b7e6:	3302      	adds	r3, #2
 800b7e8:	82fb      	strh	r3, [r7, #22]
 800b7ea:	8afa      	ldrh	r2, [r7, #22]
 800b7ec:	8abb      	ldrh	r3, [r7, #20]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d3ef      	bcc.n	800b7d2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	701a      	strb	r2, [r3, #0]
  }
}
 800b7f8:	bf00      	nop
 800b7fa:	371c      	adds	r7, #28
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b804:	b480      	push	{r7}
 800b806:	b085      	sub	sp, #20
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	881a      	ldrh	r2, [r3, #0]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	b29b      	uxth	r3, r3
 800b818:	4413      	add	r3, r2
 800b81a:	b29a      	uxth	r2, r3
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	4413      	add	r3, r2
 800b82a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b82c:	68fb      	ldr	r3, [r7, #12]
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3714      	adds	r7, #20
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr

0800b83a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b086      	sub	sp, #24
 800b83e:	af00      	add	r7, sp, #0
 800b840:	60f8      	str	r0, [r7, #12]
 800b842:	60b9      	str	r1, [r7, #8]
 800b844:	4613      	mov	r3, r2
 800b846:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b848:	2301      	movs	r3, #1
 800b84a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	789b      	ldrb	r3, [r3, #2]
 800b850:	2b01      	cmp	r3, #1
 800b852:	d002      	beq.n	800b85a <USBH_CtlReq+0x20>
 800b854:	2b02      	cmp	r3, #2
 800b856:	d00f      	beq.n	800b878 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b858:	e027      	b.n	800b8aa <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	68ba      	ldr	r2, [r7, #8]
 800b85e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	88fa      	ldrh	r2, [r7, #6]
 800b864:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2201      	movs	r2, #1
 800b86a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2202      	movs	r2, #2
 800b870:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b872:	2301      	movs	r3, #1
 800b874:	75fb      	strb	r3, [r7, #23]
      break;
 800b876:	e018      	b.n	800b8aa <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f000 f81b 	bl	800b8b4 <USBH_HandleControl>
 800b87e:	4603      	mov	r3, r0
 800b880:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b882:	7dfb      	ldrb	r3, [r7, #23]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d002      	beq.n	800b88e <USBH_CtlReq+0x54>
 800b888:	7dfb      	ldrb	r3, [r7, #23]
 800b88a:	2b03      	cmp	r3, #3
 800b88c:	d106      	bne.n	800b89c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2201      	movs	r2, #1
 800b892:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2200      	movs	r2, #0
 800b898:	761a      	strb	r2, [r3, #24]
      break;
 800b89a:	e005      	b.n	800b8a8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b89c:	7dfb      	ldrb	r3, [r7, #23]
 800b89e:	2b02      	cmp	r3, #2
 800b8a0:	d102      	bne.n	800b8a8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	709a      	strb	r2, [r3, #2]
      break;
 800b8a8:	bf00      	nop
  }
  return status;
 800b8aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3718      	adds	r7, #24
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b086      	sub	sp, #24
 800b8b8:	af02      	add	r7, sp, #8
 800b8ba:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	7e1b      	ldrb	r3, [r3, #24]
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	2b0a      	cmp	r3, #10
 800b8cc:	f200 815f 	bhi.w	800bb8e <USBH_HandleControl+0x2da>
 800b8d0:	a201      	add	r2, pc, #4	; (adr r2, 800b8d8 <USBH_HandleControl+0x24>)
 800b8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d6:	bf00      	nop
 800b8d8:	0800b905 	.word	0x0800b905
 800b8dc:	0800b91f 	.word	0x0800b91f
 800b8e0:	0800b989 	.word	0x0800b989
 800b8e4:	0800b9af 	.word	0x0800b9af
 800b8e8:	0800b9e7 	.word	0x0800b9e7
 800b8ec:	0800ba11 	.word	0x0800ba11
 800b8f0:	0800ba63 	.word	0x0800ba63
 800b8f4:	0800ba85 	.word	0x0800ba85
 800b8f8:	0800bac1 	.word	0x0800bac1
 800b8fc:	0800bae7 	.word	0x0800bae7
 800b900:	0800bb25 	.word	0x0800bb25
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f103 0110 	add.w	r1, r3, #16
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	795b      	ldrb	r3, [r3, #5]
 800b90e:	461a      	mov	r2, r3
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 f951 	bl	800bbb8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2202      	movs	r2, #2
 800b91a:	761a      	strb	r2, [r3, #24]
      break;
 800b91c:	e142      	b.n	800bba4 <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	795b      	ldrb	r3, [r3, #5]
 800b922:	4619      	mov	r1, r3
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f003 f99d 	bl	800ec64 <USBH_LL_GetURBState>
 800b92a:	4603      	mov	r3, r0
 800b92c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b92e:	7bbb      	ldrb	r3, [r7, #14]
 800b930:	2b01      	cmp	r3, #1
 800b932:	d11e      	bne.n	800b972 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	7c1b      	ldrb	r3, [r3, #16]
 800b938:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b93c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	8adb      	ldrh	r3, [r3, #22]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00a      	beq.n	800b95c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b946:	7b7b      	ldrb	r3, [r7, #13]
 800b948:	2b80      	cmp	r3, #128	; 0x80
 800b94a:	d103      	bne.n	800b954 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2203      	movs	r2, #3
 800b950:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b952:	e11e      	b.n	800bb92 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2205      	movs	r2, #5
 800b958:	761a      	strb	r2, [r3, #24]
      break;
 800b95a:	e11a      	b.n	800bb92 <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 800b95c:	7b7b      	ldrb	r3, [r7, #13]
 800b95e:	2b80      	cmp	r3, #128	; 0x80
 800b960:	d103      	bne.n	800b96a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2209      	movs	r2, #9
 800b966:	761a      	strb	r2, [r3, #24]
      break;
 800b968:	e113      	b.n	800bb92 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2207      	movs	r2, #7
 800b96e:	761a      	strb	r2, [r3, #24]
      break;
 800b970:	e10f      	b.n	800bb92 <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b972:	7bbb      	ldrb	r3, [r7, #14]
 800b974:	2b04      	cmp	r3, #4
 800b976:	d003      	beq.n	800b980 <USBH_HandleControl+0xcc>
 800b978:	7bbb      	ldrb	r3, [r7, #14]
 800b97a:	2b02      	cmp	r3, #2
 800b97c:	f040 8109 	bne.w	800bb92 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	220b      	movs	r2, #11
 800b984:	761a      	strb	r2, [r3, #24]
      break;
 800b986:	e104      	b.n	800bb92 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b98e:	b29a      	uxth	r2, r3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6899      	ldr	r1, [r3, #8]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	899a      	ldrh	r2, [r3, #12]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	791b      	ldrb	r3, [r3, #4]
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f000 f948 	bl	800bc36 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2204      	movs	r2, #4
 800b9aa:	761a      	strb	r2, [r3, #24]
      break;
 800b9ac:	e0fa      	b.n	800bba4 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	791b      	ldrb	r3, [r3, #4]
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f003 f955 	bl	800ec64 <USBH_LL_GetURBState>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b9be:	7bbb      	ldrb	r3, [r7, #14]
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d102      	bne.n	800b9ca <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2209      	movs	r2, #9
 800b9c8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b9ca:	7bbb      	ldrb	r3, [r7, #14]
 800b9cc:	2b05      	cmp	r3, #5
 800b9ce:	d102      	bne.n	800b9d6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b9d0:	2303      	movs	r3, #3
 800b9d2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b9d4:	e0df      	b.n	800bb96 <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800b9d6:	7bbb      	ldrb	r3, [r7, #14]
 800b9d8:	2b04      	cmp	r3, #4
 800b9da:	f040 80dc 	bne.w	800bb96 <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	220b      	movs	r2, #11
 800b9e2:	761a      	strb	r2, [r3, #24]
      break;
 800b9e4:	e0d7      	b.n	800bb96 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6899      	ldr	r1, [r3, #8]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	899a      	ldrh	r2, [r3, #12]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	795b      	ldrb	r3, [r3, #5]
 800b9f2:	2001      	movs	r0, #1
 800b9f4:	9000      	str	r0, [sp, #0]
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 f8f8 	bl	800bbec <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ba02:	b29a      	uxth	r2, r3
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2206      	movs	r2, #6
 800ba0c:	761a      	strb	r2, [r3, #24]
      break;
 800ba0e:	e0c9      	b.n	800bba4 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	795b      	ldrb	r3, [r3, #5]
 800ba14:	4619      	mov	r1, r3
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f003 f924 	bl	800ec64 <USBH_LL_GetURBState>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ba20:	7bbb      	ldrb	r3, [r7, #14]
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d103      	bne.n	800ba2e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2207      	movs	r2, #7
 800ba2a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ba2c:	e0b5      	b.n	800bb9a <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 800ba2e:	7bbb      	ldrb	r3, [r7, #14]
 800ba30:	2b05      	cmp	r3, #5
 800ba32:	d105      	bne.n	800ba40 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	220c      	movs	r2, #12
 800ba38:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ba3a:	2303      	movs	r3, #3
 800ba3c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba3e:	e0ac      	b.n	800bb9a <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ba40:	7bbb      	ldrb	r3, [r7, #14]
 800ba42:	2b02      	cmp	r3, #2
 800ba44:	d103      	bne.n	800ba4e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2205      	movs	r2, #5
 800ba4a:	761a      	strb	r2, [r3, #24]
      break;
 800ba4c:	e0a5      	b.n	800bb9a <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 800ba4e:	7bbb      	ldrb	r3, [r7, #14]
 800ba50:	2b04      	cmp	r3, #4
 800ba52:	f040 80a2 	bne.w	800bb9a <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	220b      	movs	r2, #11
 800ba5a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ba5c:	2302      	movs	r3, #2
 800ba5e:	73fb      	strb	r3, [r7, #15]
      break;
 800ba60:	e09b      	b.n	800bb9a <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	791b      	ldrb	r3, [r3, #4]
 800ba66:	2200      	movs	r2, #0
 800ba68:	2100      	movs	r1, #0
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 f8e3 	bl	800bc36 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ba76:	b29a      	uxth	r2, r3
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2208      	movs	r2, #8
 800ba80:	761a      	strb	r2, [r3, #24]

      break;
 800ba82:	e08f      	b.n	800bba4 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	791b      	ldrb	r3, [r3, #4]
 800ba88:	4619      	mov	r1, r3
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f003 f8ea 	bl	800ec64 <USBH_LL_GetURBState>
 800ba90:	4603      	mov	r3, r0
 800ba92:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ba94:	7bbb      	ldrb	r3, [r7, #14]
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d105      	bne.n	800baa6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	220d      	movs	r2, #13
 800ba9e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800baa0:	2300      	movs	r3, #0
 800baa2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800baa4:	e07b      	b.n	800bb9e <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 800baa6:	7bbb      	ldrb	r3, [r7, #14]
 800baa8:	2b04      	cmp	r3, #4
 800baaa:	d103      	bne.n	800bab4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	220b      	movs	r2, #11
 800bab0:	761a      	strb	r2, [r3, #24]
      break;
 800bab2:	e074      	b.n	800bb9e <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 800bab4:	7bbb      	ldrb	r3, [r7, #14]
 800bab6:	2b05      	cmp	r3, #5
 800bab8:	d171      	bne.n	800bb9e <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 800baba:	2303      	movs	r3, #3
 800babc:	73fb      	strb	r3, [r7, #15]
      break;
 800babe:	e06e      	b.n	800bb9e <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	795b      	ldrb	r3, [r3, #5]
 800bac4:	2201      	movs	r2, #1
 800bac6:	9200      	str	r2, [sp, #0]
 800bac8:	2200      	movs	r2, #0
 800baca:	2100      	movs	r1, #0
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 f88d 	bl	800bbec <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bad8:	b29a      	uxth	r2, r3
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	220a      	movs	r2, #10
 800bae2:	761a      	strb	r2, [r3, #24]
      break;
 800bae4:	e05e      	b.n	800bba4 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	795b      	ldrb	r3, [r3, #5]
 800baea:	4619      	mov	r1, r3
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f003 f8b9 	bl	800ec64 <USBH_LL_GetURBState>
 800baf2:	4603      	mov	r3, r0
 800baf4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800baf6:	7bbb      	ldrb	r3, [r7, #14]
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d105      	bne.n	800bb08 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bafc:	2300      	movs	r3, #0
 800bafe:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	220d      	movs	r2, #13
 800bb04:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bb06:	e04c      	b.n	800bba2 <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bb08:	7bbb      	ldrb	r3, [r7, #14]
 800bb0a:	2b02      	cmp	r3, #2
 800bb0c:	d103      	bne.n	800bb16 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2209      	movs	r2, #9
 800bb12:	761a      	strb	r2, [r3, #24]
      break;
 800bb14:	e045      	b.n	800bba2 <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800bb16:	7bbb      	ldrb	r3, [r7, #14]
 800bb18:	2b04      	cmp	r3, #4
 800bb1a:	d142      	bne.n	800bba2 <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	220b      	movs	r2, #11
 800bb20:	761a      	strb	r2, [r3, #24]
      break;
 800bb22:	e03e      	b.n	800bba2 <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	7e5b      	ldrb	r3, [r3, #25]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	b2da      	uxtb	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	765a      	strb	r2, [r3, #25]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	7e5b      	ldrb	r3, [r3, #25]
 800bb34:	2b02      	cmp	r3, #2
 800bb36:	d806      	bhi.n	800bb46 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2201      	movs	r2, #1
 800bb42:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bb44:	e02e      	b.n	800bba4 <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bb4c:	2106      	movs	r1, #6
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2200      	movs	r2, #0
 800bb56:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800bb58:	4815      	ldr	r0, [pc, #84]	; (800bbb0 <USBH_HandleControl+0x2fc>)
 800bb5a:	f003 fa35 	bl	800efc8 <iprintf>
 800bb5e:	4815      	ldr	r0, [pc, #84]	; (800bbb4 <USBH_HandleControl+0x300>)
 800bb60:	f003 fa32 	bl	800efc8 <iprintf>
 800bb64:	200a      	movs	r0, #10
 800bb66:	f003 fa47 	bl	800eff8 <putchar>
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	795b      	ldrb	r3, [r3, #5]
 800bb6e:	4619      	mov	r1, r3
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 f911 	bl	800bd98 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	791b      	ldrb	r3, [r3, #4]
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f000 f90b 	bl	800bd98 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2200      	movs	r2, #0
 800bb86:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bb88:	2302      	movs	r3, #2
 800bb8a:	73fb      	strb	r3, [r7, #15]
      break;
 800bb8c:	e00a      	b.n	800bba4 <USBH_HandleControl+0x2f0>

    default:
      break;
 800bb8e:	bf00      	nop
 800bb90:	e008      	b.n	800bba4 <USBH_HandleControl+0x2f0>
      break;
 800bb92:	bf00      	nop
 800bb94:	e006      	b.n	800bba4 <USBH_HandleControl+0x2f0>
      break;
 800bb96:	bf00      	nop
 800bb98:	e004      	b.n	800bba4 <USBH_HandleControl+0x2f0>
      break;
 800bb9a:	bf00      	nop
 800bb9c:	e002      	b.n	800bba4 <USBH_HandleControl+0x2f0>
      break;
 800bb9e:	bf00      	nop
 800bba0:	e000      	b.n	800bba4 <USBH_HandleControl+0x2f0>
      break;
 800bba2:	bf00      	nop
  }

  return status;
 800bba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3710      	adds	r7, #16
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	08010498 	.word	0x08010498
 800bbb4:	080104a0 	.word	0x080104a0

0800bbb8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b088      	sub	sp, #32
 800bbbc:	af04      	add	r7, sp, #16
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	60b9      	str	r1, [r7, #8]
 800bbc2:	4613      	mov	r3, r2
 800bbc4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bbc6:	79f9      	ldrb	r1, [r7, #7]
 800bbc8:	2300      	movs	r3, #0
 800bbca:	9303      	str	r3, [sp, #12]
 800bbcc:	2308      	movs	r3, #8
 800bbce:	9302      	str	r3, [sp, #8]
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	9301      	str	r3, [sp, #4]
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	9300      	str	r3, [sp, #0]
 800bbd8:	2300      	movs	r3, #0
 800bbda:	2200      	movs	r2, #0
 800bbdc:	68f8      	ldr	r0, [r7, #12]
 800bbde:	f003 f810 	bl	800ec02 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800bbe2:	2300      	movs	r3, #0
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3710      	adds	r7, #16
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b088      	sub	sp, #32
 800bbf0:	af04      	add	r7, sp, #16
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	60b9      	str	r1, [r7, #8]
 800bbf6:	4611      	mov	r1, r2
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	80fb      	strh	r3, [r7, #6]
 800bbfe:	4613      	mov	r3, r2
 800bc00:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d001      	beq.n	800bc10 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc10:	7979      	ldrb	r1, [r7, #5]
 800bc12:	7e3b      	ldrb	r3, [r7, #24]
 800bc14:	9303      	str	r3, [sp, #12]
 800bc16:	88fb      	ldrh	r3, [r7, #6]
 800bc18:	9302      	str	r3, [sp, #8]
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	9301      	str	r3, [sp, #4]
 800bc1e:	2301      	movs	r3, #1
 800bc20:	9300      	str	r3, [sp, #0]
 800bc22:	2300      	movs	r3, #0
 800bc24:	2200      	movs	r2, #0
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f002 ffeb 	bl	800ec02 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bc2c:	2300      	movs	r3, #0
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3710      	adds	r7, #16
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bc36:	b580      	push	{r7, lr}
 800bc38:	b088      	sub	sp, #32
 800bc3a:	af04      	add	r7, sp, #16
 800bc3c:	60f8      	str	r0, [r7, #12]
 800bc3e:	60b9      	str	r1, [r7, #8]
 800bc40:	4611      	mov	r1, r2
 800bc42:	461a      	mov	r2, r3
 800bc44:	460b      	mov	r3, r1
 800bc46:	80fb      	strh	r3, [r7, #6]
 800bc48:	4613      	mov	r3, r2
 800bc4a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc4c:	7979      	ldrb	r1, [r7, #5]
 800bc4e:	2300      	movs	r3, #0
 800bc50:	9303      	str	r3, [sp, #12]
 800bc52:	88fb      	ldrh	r3, [r7, #6]
 800bc54:	9302      	str	r3, [sp, #8]
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	9301      	str	r3, [sp, #4]
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	2300      	movs	r3, #0
 800bc60:	2201      	movs	r2, #1
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	f002 ffcd 	bl	800ec02 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bc68:	2300      	movs	r3, #0

}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3710      	adds	r7, #16
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b088      	sub	sp, #32
 800bc76:	af04      	add	r7, sp, #16
 800bc78:	60f8      	str	r0, [r7, #12]
 800bc7a:	60b9      	str	r1, [r7, #8]
 800bc7c:	4611      	mov	r1, r2
 800bc7e:	461a      	mov	r2, r3
 800bc80:	460b      	mov	r3, r1
 800bc82:	80fb      	strh	r3, [r7, #6]
 800bc84:	4613      	mov	r3, r2
 800bc86:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d001      	beq.n	800bc96 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bc92:	2300      	movs	r3, #0
 800bc94:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc96:	7979      	ldrb	r1, [r7, #5]
 800bc98:	7e3b      	ldrb	r3, [r7, #24]
 800bc9a:	9303      	str	r3, [sp, #12]
 800bc9c:	88fb      	ldrh	r3, [r7, #6]
 800bc9e:	9302      	str	r3, [sp, #8]
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	9301      	str	r3, [sp, #4]
 800bca4:	2301      	movs	r3, #1
 800bca6:	9300      	str	r3, [sp, #0]
 800bca8:	2302      	movs	r3, #2
 800bcaa:	2200      	movs	r2, #0
 800bcac:	68f8      	ldr	r0, [r7, #12]
 800bcae:	f002 ffa8 	bl	800ec02 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bcb2:	2300      	movs	r3, #0
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3710      	adds	r7, #16
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b088      	sub	sp, #32
 800bcc0:	af04      	add	r7, sp, #16
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	4611      	mov	r1, r2
 800bcc8:	461a      	mov	r2, r3
 800bcca:	460b      	mov	r3, r1
 800bccc:	80fb      	strh	r3, [r7, #6]
 800bcce:	4613      	mov	r3, r2
 800bcd0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bcd2:	7979      	ldrb	r1, [r7, #5]
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	9303      	str	r3, [sp, #12]
 800bcd8:	88fb      	ldrh	r3, [r7, #6]
 800bcda:	9302      	str	r3, [sp, #8]
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	9301      	str	r3, [sp, #4]
 800bce0:	2301      	movs	r3, #1
 800bce2:	9300      	str	r3, [sp, #0]
 800bce4:	2302      	movs	r3, #2
 800bce6:	2201      	movs	r2, #1
 800bce8:	68f8      	ldr	r0, [r7, #12]
 800bcea:	f002 ff8a 	bl	800ec02 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bcee:	2300      	movs	r3, #0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3710      	adds	r7, #16
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af04      	add	r7, sp, #16
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	4608      	mov	r0, r1
 800bd02:	4611      	mov	r1, r2
 800bd04:	461a      	mov	r2, r3
 800bd06:	4603      	mov	r3, r0
 800bd08:	70fb      	strb	r3, [r7, #3]
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	70bb      	strb	r3, [r7, #2]
 800bd0e:	4613      	mov	r3, r2
 800bd10:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bd12:	7878      	ldrb	r0, [r7, #1]
 800bd14:	78ba      	ldrb	r2, [r7, #2]
 800bd16:	78f9      	ldrb	r1, [r7, #3]
 800bd18:	8b3b      	ldrh	r3, [r7, #24]
 800bd1a:	9302      	str	r3, [sp, #8]
 800bd1c:	7d3b      	ldrb	r3, [r7, #20]
 800bd1e:	9301      	str	r3, [sp, #4]
 800bd20:	7c3b      	ldrb	r3, [r7, #16]
 800bd22:	9300      	str	r3, [sp, #0]
 800bd24:	4603      	mov	r3, r0
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f002 ff1d 	bl	800eb66 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3708      	adds	r7, #8
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bd36:	b580      	push	{r7, lr}
 800bd38:	b082      	sub	sp, #8
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
 800bd3e:	460b      	mov	r3, r1
 800bd40:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bd42:	78fb      	ldrb	r3, [r7, #3]
 800bd44:	4619      	mov	r1, r3
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f002 ff3c 	bl	800ebc4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bd4c:	2300      	movs	r3, #0
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3708      	adds	r7, #8
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b084      	sub	sp, #16
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
 800bd5e:	460b      	mov	r3, r1
 800bd60:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 f836 	bl	800bdd4 <USBH_GetFreePipe>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bd6c:	89fb      	ldrh	r3, [r7, #14]
 800bd6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d00a      	beq.n	800bd8c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800bd76:	78fa      	ldrb	r2, [r7, #3]
 800bd78:	89fb      	ldrh	r3, [r7, #14]
 800bd7a:	f003 030f 	and.w	r3, r3, #15
 800bd7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bd82:	6879      	ldr	r1, [r7, #4]
 800bd84:	33e0      	adds	r3, #224	; 0xe0
 800bd86:	009b      	lsls	r3, r3, #2
 800bd88:	440b      	add	r3, r1
 800bd8a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bd8c:	89fb      	ldrh	r3, [r7, #14]
 800bd8e:	b2db      	uxtb	r3, r3
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3710      	adds	r7, #16
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	460b      	mov	r3, r1
 800bda2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800bda4:	78fb      	ldrb	r3, [r7, #3]
 800bda6:	2b0a      	cmp	r3, #10
 800bda8:	d80d      	bhi.n	800bdc6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bdaa:	78fb      	ldrb	r3, [r7, #3]
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	33e0      	adds	r3, #224	; 0xe0
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	4413      	add	r3, r2
 800bdb4:	685a      	ldr	r2, [r3, #4]
 800bdb6:	78fb      	ldrb	r3, [r7, #3]
 800bdb8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bdbc:	6879      	ldr	r1, [r7, #4]
 800bdbe:	33e0      	adds	r3, #224	; 0xe0
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	440b      	add	r3, r1
 800bdc4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bdc6:	2300      	movs	r3, #0
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	370c      	adds	r7, #12
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bddc:	2300      	movs	r3, #0
 800bdde:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800bde0:	2300      	movs	r3, #0
 800bde2:	73fb      	strb	r3, [r7, #15]
 800bde4:	e00f      	b.n	800be06 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bde6:	7bfb      	ldrb	r3, [r7, #15]
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	33e0      	adds	r3, #224	; 0xe0
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	4413      	add	r3, r2
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d102      	bne.n	800be00 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bdfa:	7bfb      	ldrb	r3, [r7, #15]
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	e007      	b.n	800be10 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800be00:	7bfb      	ldrb	r3, [r7, #15]
 800be02:	3301      	adds	r3, #1
 800be04:	73fb      	strb	r3, [r7, #15]
 800be06:	7bfb      	ldrb	r3, [r7, #15]
 800be08:	2b0a      	cmp	r3, #10
 800be0a:	d9ec      	bls.n	800bde6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800be0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800be10:	4618      	mov	r0, r3
 800be12:	3714      	adds	r7, #20
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	4603      	mov	r3, r0
 800be24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800be26:	79fb      	ldrb	r3, [r7, #7]
 800be28:	4a08      	ldr	r2, [pc, #32]	; (800be4c <disk_status+0x30>)
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	4413      	add	r3, r2
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	79fa      	ldrb	r2, [r7, #7]
 800be34:	4905      	ldr	r1, [pc, #20]	; (800be4c <disk_status+0x30>)
 800be36:	440a      	add	r2, r1
 800be38:	7a12      	ldrb	r2, [r2, #8]
 800be3a:	4610      	mov	r0, r2
 800be3c:	4798      	blx	r3
 800be3e:	4603      	mov	r3, r0
 800be40:	73fb      	strb	r3, [r7, #15]
  return stat;
 800be42:	7bfb      	ldrb	r3, [r7, #15]
}
 800be44:	4618      	mov	r0, r3
 800be46:	3710      	adds	r7, #16
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}
 800be4c:	20002124 	.word	0x20002124

0800be50 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	4603      	mov	r3, r0
 800be58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800be5a:	2300      	movs	r3, #0
 800be5c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800be5e:	79fb      	ldrb	r3, [r7, #7]
 800be60:	4a0d      	ldr	r2, [pc, #52]	; (800be98 <disk_initialize+0x48>)
 800be62:	5cd3      	ldrb	r3, [r2, r3]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d111      	bne.n	800be8c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800be68:	79fb      	ldrb	r3, [r7, #7]
 800be6a:	4a0b      	ldr	r2, [pc, #44]	; (800be98 <disk_initialize+0x48>)
 800be6c:	2101      	movs	r1, #1
 800be6e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800be70:	79fb      	ldrb	r3, [r7, #7]
 800be72:	4a09      	ldr	r2, [pc, #36]	; (800be98 <disk_initialize+0x48>)
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	4413      	add	r3, r2
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	79fa      	ldrb	r2, [r7, #7]
 800be7e:	4906      	ldr	r1, [pc, #24]	; (800be98 <disk_initialize+0x48>)
 800be80:	440a      	add	r2, r1
 800be82:	7a12      	ldrb	r2, [r2, #8]
 800be84:	4610      	mov	r0, r2
 800be86:	4798      	blx	r3
 800be88:	4603      	mov	r3, r0
 800be8a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800be8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	20002124 	.word	0x20002124

0800be9c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800be9c:	b590      	push	{r4, r7, lr}
 800be9e:	b087      	sub	sp, #28
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	60b9      	str	r1, [r7, #8]
 800bea4:	607a      	str	r2, [r7, #4]
 800bea6:	603b      	str	r3, [r7, #0]
 800bea8:	4603      	mov	r3, r0
 800beaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800beac:	7bfb      	ldrb	r3, [r7, #15]
 800beae:	4a0a      	ldr	r2, [pc, #40]	; (800bed8 <disk_read+0x3c>)
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	4413      	add	r3, r2
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	689c      	ldr	r4, [r3, #8]
 800beb8:	7bfb      	ldrb	r3, [r7, #15]
 800beba:	4a07      	ldr	r2, [pc, #28]	; (800bed8 <disk_read+0x3c>)
 800bebc:	4413      	add	r3, r2
 800bebe:	7a18      	ldrb	r0, [r3, #8]
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	68b9      	ldr	r1, [r7, #8]
 800bec6:	47a0      	blx	r4
 800bec8:	4603      	mov	r3, r0
 800beca:	75fb      	strb	r3, [r7, #23]
  return res;
 800becc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bece:	4618      	mov	r0, r3
 800bed0:	371c      	adds	r7, #28
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd90      	pop	{r4, r7, pc}
 800bed6:	bf00      	nop
 800bed8:	20002124 	.word	0x20002124

0800bedc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bedc:	b590      	push	{r4, r7, lr}
 800bede:	b087      	sub	sp, #28
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	60b9      	str	r1, [r7, #8]
 800bee4:	607a      	str	r2, [r7, #4]
 800bee6:	603b      	str	r3, [r7, #0]
 800bee8:	4603      	mov	r3, r0
 800beea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800beec:	7bfb      	ldrb	r3, [r7, #15]
 800beee:	4a0a      	ldr	r2, [pc, #40]	; (800bf18 <disk_write+0x3c>)
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	4413      	add	r3, r2
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	68dc      	ldr	r4, [r3, #12]
 800bef8:	7bfb      	ldrb	r3, [r7, #15]
 800befa:	4a07      	ldr	r2, [pc, #28]	; (800bf18 <disk_write+0x3c>)
 800befc:	4413      	add	r3, r2
 800befe:	7a18      	ldrb	r0, [r3, #8]
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	68b9      	ldr	r1, [r7, #8]
 800bf06:	47a0      	blx	r4
 800bf08:	4603      	mov	r3, r0
 800bf0a:	75fb      	strb	r3, [r7, #23]
  return res;
 800bf0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	371c      	adds	r7, #28
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd90      	pop	{r4, r7, pc}
 800bf16:	bf00      	nop
 800bf18:	20002124 	.word	0x20002124

0800bf1c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	4603      	mov	r3, r0
 800bf24:	603a      	str	r2, [r7, #0]
 800bf26:	71fb      	strb	r3, [r7, #7]
 800bf28:	460b      	mov	r3, r1
 800bf2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bf2c:	79fb      	ldrb	r3, [r7, #7]
 800bf2e:	4a09      	ldr	r2, [pc, #36]	; (800bf54 <disk_ioctl+0x38>)
 800bf30:	009b      	lsls	r3, r3, #2
 800bf32:	4413      	add	r3, r2
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	691b      	ldr	r3, [r3, #16]
 800bf38:	79fa      	ldrb	r2, [r7, #7]
 800bf3a:	4906      	ldr	r1, [pc, #24]	; (800bf54 <disk_ioctl+0x38>)
 800bf3c:	440a      	add	r2, r1
 800bf3e:	7a10      	ldrb	r0, [r2, #8]
 800bf40:	79b9      	ldrb	r1, [r7, #6]
 800bf42:	683a      	ldr	r2, [r7, #0]
 800bf44:	4798      	blx	r3
 800bf46:	4603      	mov	r3, r0
 800bf48:	73fb      	strb	r3, [r7, #15]
  return res;
 800bf4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3710      	adds	r7, #16
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	20002124 	.word	0x20002124

0800bf58 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	3301      	adds	r3, #1
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bf68:	89fb      	ldrh	r3, [r7, #14]
 800bf6a:	021b      	lsls	r3, r3, #8
 800bf6c:	b21a      	sxth	r2, r3
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	b21b      	sxth	r3, r3
 800bf74:	4313      	orrs	r3, r2
 800bf76:	b21b      	sxth	r3, r3
 800bf78:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bf7a:	89fb      	ldrh	r3, [r7, #14]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3714      	adds	r7, #20
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr

0800bf88 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b085      	sub	sp, #20
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	3303      	adds	r3, #3
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	021b      	lsls	r3, r3, #8
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	3202      	adds	r2, #2
 800bfa0:	7812      	ldrb	r2, [r2, #0]
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	021b      	lsls	r3, r3, #8
 800bfaa:	687a      	ldr	r2, [r7, #4]
 800bfac:	3201      	adds	r2, #1
 800bfae:	7812      	ldrb	r2, [r2, #0]
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	021b      	lsls	r3, r3, #8
 800bfb8:	687a      	ldr	r2, [r7, #4]
 800bfba:	7812      	ldrb	r2, [r2, #0]
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	60fb      	str	r3, [r7, #12]
	return rv;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3714      	adds	r7, #20
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr

0800bfce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bfce:	b480      	push	{r7}
 800bfd0:	b083      	sub	sp, #12
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
 800bfd6:	460b      	mov	r3, r1
 800bfd8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	1c5a      	adds	r2, r3, #1
 800bfde:	607a      	str	r2, [r7, #4]
 800bfe0:	887a      	ldrh	r2, [r7, #2]
 800bfe2:	b2d2      	uxtb	r2, r2
 800bfe4:	701a      	strb	r2, [r3, #0]
 800bfe6:	887b      	ldrh	r3, [r7, #2]
 800bfe8:	0a1b      	lsrs	r3, r3, #8
 800bfea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	1c5a      	adds	r2, r3, #1
 800bff0:	607a      	str	r2, [r7, #4]
 800bff2:	887a      	ldrh	r2, [r7, #2]
 800bff4:	b2d2      	uxtb	r2, r2
 800bff6:	701a      	strb	r2, [r3, #0]
}
 800bff8:	bf00      	nop
 800bffa:	370c      	adds	r7, #12
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr

0800c004 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c004:	b480      	push	{r7}
 800c006:	b083      	sub	sp, #12
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	1c5a      	adds	r2, r3, #1
 800c012:	607a      	str	r2, [r7, #4]
 800c014:	683a      	ldr	r2, [r7, #0]
 800c016:	b2d2      	uxtb	r2, r2
 800c018:	701a      	strb	r2, [r3, #0]
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	0a1b      	lsrs	r3, r3, #8
 800c01e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	1c5a      	adds	r2, r3, #1
 800c024:	607a      	str	r2, [r7, #4]
 800c026:	683a      	ldr	r2, [r7, #0]
 800c028:	b2d2      	uxtb	r2, r2
 800c02a:	701a      	strb	r2, [r3, #0]
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	0a1b      	lsrs	r3, r3, #8
 800c030:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	1c5a      	adds	r2, r3, #1
 800c036:	607a      	str	r2, [r7, #4]
 800c038:	683a      	ldr	r2, [r7, #0]
 800c03a:	b2d2      	uxtb	r2, r2
 800c03c:	701a      	strb	r2, [r3, #0]
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	0a1b      	lsrs	r3, r3, #8
 800c042:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	1c5a      	adds	r2, r3, #1
 800c048:	607a      	str	r2, [r7, #4]
 800c04a:	683a      	ldr	r2, [r7, #0]
 800c04c:	b2d2      	uxtb	r2, r2
 800c04e:	701a      	strb	r2, [r3, #0]
}
 800c050:	bf00      	nop
 800c052:	370c      	adds	r7, #12
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr

0800c05c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c05c:	b480      	push	{r7}
 800c05e:	b087      	sub	sp, #28
 800c060:	af00      	add	r7, sp, #0
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d00d      	beq.n	800c092 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c076:	693a      	ldr	r2, [r7, #16]
 800c078:	1c53      	adds	r3, r2, #1
 800c07a:	613b      	str	r3, [r7, #16]
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	1c59      	adds	r1, r3, #1
 800c080:	6179      	str	r1, [r7, #20]
 800c082:	7812      	ldrb	r2, [r2, #0]
 800c084:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	3b01      	subs	r3, #1
 800c08a:	607b      	str	r3, [r7, #4]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d1f1      	bne.n	800c076 <mem_cpy+0x1a>
	}
}
 800c092:	bf00      	nop
 800c094:	371c      	adds	r7, #28
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr

0800c09e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c09e:	b480      	push	{r7}
 800c0a0:	b087      	sub	sp, #28
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	60f8      	str	r0, [r7, #12]
 800c0a6:	60b9      	str	r1, [r7, #8]
 800c0a8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	1c5a      	adds	r2, r3, #1
 800c0b2:	617a      	str	r2, [r7, #20]
 800c0b4:	68ba      	ldr	r2, [r7, #8]
 800c0b6:	b2d2      	uxtb	r2, r2
 800c0b8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	3b01      	subs	r3, #1
 800c0be:	607b      	str	r3, [r7, #4]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d1f3      	bne.n	800c0ae <mem_set+0x10>
}
 800c0c6:	bf00      	nop
 800c0c8:	bf00      	nop
 800c0ca:	371c      	adds	r7, #28
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr

0800c0d4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c0d4:	b480      	push	{r7}
 800c0d6:	b089      	sub	sp, #36	; 0x24
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	61fb      	str	r3, [r7, #28]
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	1c5a      	adds	r2, r3, #1
 800c0f0:	61fa      	str	r2, [r7, #28]
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	69bb      	ldr	r3, [r7, #24]
 800c0f8:	1c5a      	adds	r2, r3, #1
 800c0fa:	61ba      	str	r2, [r7, #24]
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	1acb      	subs	r3, r1, r3
 800c100:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	3b01      	subs	r3, #1
 800c106:	607b      	str	r3, [r7, #4]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d002      	beq.n	800c114 <mem_cmp+0x40>
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d0eb      	beq.n	800c0ec <mem_cmp+0x18>

	return r;
 800c114:	697b      	ldr	r3, [r7, #20]
}
 800c116:	4618      	mov	r0, r3
 800c118:	3724      	adds	r7, #36	; 0x24
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr

0800c122 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c122:	b480      	push	{r7}
 800c124:	b083      	sub	sp, #12
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
 800c12a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c12c:	e002      	b.n	800c134 <chk_chr+0x12>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	3301      	adds	r3, #1
 800c132:	607b      	str	r3, [r7, #4]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d005      	beq.n	800c148 <chk_chr+0x26>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	781b      	ldrb	r3, [r3, #0]
 800c140:	461a      	mov	r2, r3
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	4293      	cmp	r3, r2
 800c146:	d1f2      	bne.n	800c12e <chk_chr+0xc>
	return *str;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	781b      	ldrb	r3, [r3, #0]
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	370c      	adds	r7, #12
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr

0800c158 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c158:	b480      	push	{r7}
 800c15a:	b085      	sub	sp, #20
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c162:	2300      	movs	r3, #0
 800c164:	60bb      	str	r3, [r7, #8]
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	60fb      	str	r3, [r7, #12]
 800c16a:	e029      	b.n	800c1c0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c16c:	4a27      	ldr	r2, [pc, #156]	; (800c20c <chk_lock+0xb4>)
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	011b      	lsls	r3, r3, #4
 800c172:	4413      	add	r3, r2
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d01d      	beq.n	800c1b6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c17a:	4a24      	ldr	r2, [pc, #144]	; (800c20c <chk_lock+0xb4>)
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	011b      	lsls	r3, r3, #4
 800c180:	4413      	add	r3, r2
 800c182:	681a      	ldr	r2, [r3, #0]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d116      	bne.n	800c1ba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c18c:	4a1f      	ldr	r2, [pc, #124]	; (800c20c <chk_lock+0xb4>)
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	011b      	lsls	r3, r3, #4
 800c192:	4413      	add	r3, r2
 800c194:	3304      	adds	r3, #4
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d10c      	bne.n	800c1ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c1a0:	4a1a      	ldr	r2, [pc, #104]	; (800c20c <chk_lock+0xb4>)
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	011b      	lsls	r3, r3, #4
 800c1a6:	4413      	add	r3, r2
 800c1a8:	3308      	adds	r3, #8
 800c1aa:	681a      	ldr	r2, [r3, #0]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d102      	bne.n	800c1ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c1b4:	e007      	b.n	800c1c6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	3301      	adds	r3, #1
 800c1be:	60fb      	str	r3, [r7, #12]
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d9d2      	bls.n	800c16c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2b02      	cmp	r3, #2
 800c1ca:	d109      	bne.n	800c1e0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d102      	bne.n	800c1d8 <chk_lock+0x80>
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	2b02      	cmp	r3, #2
 800c1d6:	d101      	bne.n	800c1dc <chk_lock+0x84>
 800c1d8:	2300      	movs	r3, #0
 800c1da:	e010      	b.n	800c1fe <chk_lock+0xa6>
 800c1dc:	2312      	movs	r3, #18
 800c1de:	e00e      	b.n	800c1fe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d108      	bne.n	800c1f8 <chk_lock+0xa0>
 800c1e6:	4a09      	ldr	r2, [pc, #36]	; (800c20c <chk_lock+0xb4>)
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	011b      	lsls	r3, r3, #4
 800c1ec:	4413      	add	r3, r2
 800c1ee:	330c      	adds	r3, #12
 800c1f0:	881b      	ldrh	r3, [r3, #0]
 800c1f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1f6:	d101      	bne.n	800c1fc <chk_lock+0xa4>
 800c1f8:	2310      	movs	r3, #16
 800c1fa:	e000      	b.n	800c1fe <chk_lock+0xa6>
 800c1fc:	2300      	movs	r3, #0
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3714      	adds	r7, #20
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop
 800c20c:	20002104 	.word	0x20002104

0800c210 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c210:	b480      	push	{r7}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c216:	2300      	movs	r3, #0
 800c218:	607b      	str	r3, [r7, #4]
 800c21a:	e002      	b.n	800c222 <enq_lock+0x12>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	3301      	adds	r3, #1
 800c220:	607b      	str	r3, [r7, #4]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2b01      	cmp	r3, #1
 800c226:	d806      	bhi.n	800c236 <enq_lock+0x26>
 800c228:	4a09      	ldr	r2, [pc, #36]	; (800c250 <enq_lock+0x40>)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	011b      	lsls	r3, r3, #4
 800c22e:	4413      	add	r3, r2
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d1f2      	bne.n	800c21c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2b02      	cmp	r3, #2
 800c23a:	bf14      	ite	ne
 800c23c:	2301      	movne	r3, #1
 800c23e:	2300      	moveq	r3, #0
 800c240:	b2db      	uxtb	r3, r3
}
 800c242:	4618      	mov	r0, r3
 800c244:	370c      	adds	r7, #12
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop
 800c250:	20002104 	.word	0x20002104

0800c254 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c254:	b480      	push	{r7}
 800c256:	b085      	sub	sp, #20
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c25e:	2300      	movs	r3, #0
 800c260:	60fb      	str	r3, [r7, #12]
 800c262:	e01f      	b.n	800c2a4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c264:	4a41      	ldr	r2, [pc, #260]	; (800c36c <inc_lock+0x118>)
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	011b      	lsls	r3, r3, #4
 800c26a:	4413      	add	r3, r2
 800c26c:	681a      	ldr	r2, [r3, #0]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	429a      	cmp	r2, r3
 800c274:	d113      	bne.n	800c29e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c276:	4a3d      	ldr	r2, [pc, #244]	; (800c36c <inc_lock+0x118>)
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	011b      	lsls	r3, r3, #4
 800c27c:	4413      	add	r3, r2
 800c27e:	3304      	adds	r3, #4
 800c280:	681a      	ldr	r2, [r3, #0]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c286:	429a      	cmp	r2, r3
 800c288:	d109      	bne.n	800c29e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c28a:	4a38      	ldr	r2, [pc, #224]	; (800c36c <inc_lock+0x118>)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	011b      	lsls	r3, r3, #4
 800c290:	4413      	add	r3, r2
 800c292:	3308      	adds	r3, #8
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d006      	beq.n	800c2ac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	60fb      	str	r3, [r7, #12]
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d9dc      	bls.n	800c264 <inc_lock+0x10>
 800c2aa:	e000      	b.n	800c2ae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c2ac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2b02      	cmp	r3, #2
 800c2b2:	d132      	bne.n	800c31a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	60fb      	str	r3, [r7, #12]
 800c2b8:	e002      	b.n	800c2c0 <inc_lock+0x6c>
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	60fb      	str	r3, [r7, #12]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d806      	bhi.n	800c2d4 <inc_lock+0x80>
 800c2c6:	4a29      	ldr	r2, [pc, #164]	; (800c36c <inc_lock+0x118>)
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	011b      	lsls	r3, r3, #4
 800c2cc:	4413      	add	r3, r2
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d1f2      	bne.n	800c2ba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2b02      	cmp	r3, #2
 800c2d8:	d101      	bne.n	800c2de <inc_lock+0x8a>
 800c2da:	2300      	movs	r3, #0
 800c2dc:	e040      	b.n	800c360 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	4922      	ldr	r1, [pc, #136]	; (800c36c <inc_lock+0x118>)
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	011b      	lsls	r3, r3, #4
 800c2e8:	440b      	add	r3, r1
 800c2ea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	689a      	ldr	r2, [r3, #8]
 800c2f0:	491e      	ldr	r1, [pc, #120]	; (800c36c <inc_lock+0x118>)
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	011b      	lsls	r3, r3, #4
 800c2f6:	440b      	add	r3, r1
 800c2f8:	3304      	adds	r3, #4
 800c2fa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	695a      	ldr	r2, [r3, #20]
 800c300:	491a      	ldr	r1, [pc, #104]	; (800c36c <inc_lock+0x118>)
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	011b      	lsls	r3, r3, #4
 800c306:	440b      	add	r3, r1
 800c308:	3308      	adds	r3, #8
 800c30a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c30c:	4a17      	ldr	r2, [pc, #92]	; (800c36c <inc_lock+0x118>)
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	011b      	lsls	r3, r3, #4
 800c312:	4413      	add	r3, r2
 800c314:	330c      	adds	r3, #12
 800c316:	2200      	movs	r2, #0
 800c318:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d009      	beq.n	800c334 <inc_lock+0xe0>
 800c320:	4a12      	ldr	r2, [pc, #72]	; (800c36c <inc_lock+0x118>)
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	011b      	lsls	r3, r3, #4
 800c326:	4413      	add	r3, r2
 800c328:	330c      	adds	r3, #12
 800c32a:	881b      	ldrh	r3, [r3, #0]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d001      	beq.n	800c334 <inc_lock+0xe0>
 800c330:	2300      	movs	r3, #0
 800c332:	e015      	b.n	800c360 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d108      	bne.n	800c34c <inc_lock+0xf8>
 800c33a:	4a0c      	ldr	r2, [pc, #48]	; (800c36c <inc_lock+0x118>)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	011b      	lsls	r3, r3, #4
 800c340:	4413      	add	r3, r2
 800c342:	330c      	adds	r3, #12
 800c344:	881b      	ldrh	r3, [r3, #0]
 800c346:	3301      	adds	r3, #1
 800c348:	b29a      	uxth	r2, r3
 800c34a:	e001      	b.n	800c350 <inc_lock+0xfc>
 800c34c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c350:	4906      	ldr	r1, [pc, #24]	; (800c36c <inc_lock+0x118>)
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	011b      	lsls	r3, r3, #4
 800c356:	440b      	add	r3, r1
 800c358:	330c      	adds	r3, #12
 800c35a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	3301      	adds	r3, #1
}
 800c360:	4618      	mov	r0, r3
 800c362:	3714      	adds	r7, #20
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr
 800c36c:	20002104 	.word	0x20002104

0800c370 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c370:	b480      	push	{r7}
 800c372:	b085      	sub	sp, #20
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	3b01      	subs	r3, #1
 800c37c:	607b      	str	r3, [r7, #4]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2b01      	cmp	r3, #1
 800c382:	d825      	bhi.n	800c3d0 <dec_lock+0x60>
		n = Files[i].ctr;
 800c384:	4a17      	ldr	r2, [pc, #92]	; (800c3e4 <dec_lock+0x74>)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	011b      	lsls	r3, r3, #4
 800c38a:	4413      	add	r3, r2
 800c38c:	330c      	adds	r3, #12
 800c38e:	881b      	ldrh	r3, [r3, #0]
 800c390:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c392:	89fb      	ldrh	r3, [r7, #14]
 800c394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c398:	d101      	bne.n	800c39e <dec_lock+0x2e>
 800c39a:	2300      	movs	r3, #0
 800c39c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c39e:	89fb      	ldrh	r3, [r7, #14]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d002      	beq.n	800c3aa <dec_lock+0x3a>
 800c3a4:	89fb      	ldrh	r3, [r7, #14]
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c3aa:	4a0e      	ldr	r2, [pc, #56]	; (800c3e4 <dec_lock+0x74>)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	011b      	lsls	r3, r3, #4
 800c3b0:	4413      	add	r3, r2
 800c3b2:	330c      	adds	r3, #12
 800c3b4:	89fa      	ldrh	r2, [r7, #14]
 800c3b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c3b8:	89fb      	ldrh	r3, [r7, #14]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d105      	bne.n	800c3ca <dec_lock+0x5a>
 800c3be:	4a09      	ldr	r2, [pc, #36]	; (800c3e4 <dec_lock+0x74>)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	011b      	lsls	r3, r3, #4
 800c3c4:	4413      	add	r3, r2
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	737b      	strb	r3, [r7, #13]
 800c3ce:	e001      	b.n	800c3d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c3d0:	2302      	movs	r3, #2
 800c3d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c3d4:	7b7b      	ldrb	r3, [r7, #13]
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3714      	adds	r7, #20
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop
 800c3e4:	20002104 	.word	0x20002104

0800c3e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b085      	sub	sp, #20
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	60fb      	str	r3, [r7, #12]
 800c3f4:	e010      	b.n	800c418 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c3f6:	4a0d      	ldr	r2, [pc, #52]	; (800c42c <clear_lock+0x44>)
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	011b      	lsls	r3, r3, #4
 800c3fc:	4413      	add	r3, r2
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	429a      	cmp	r2, r3
 800c404:	d105      	bne.n	800c412 <clear_lock+0x2a>
 800c406:	4a09      	ldr	r2, [pc, #36]	; (800c42c <clear_lock+0x44>)
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	011b      	lsls	r3, r3, #4
 800c40c:	4413      	add	r3, r2
 800c40e:	2200      	movs	r2, #0
 800c410:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	3301      	adds	r3, #1
 800c416:	60fb      	str	r3, [r7, #12]
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d9eb      	bls.n	800c3f6 <clear_lock+0xe>
	}
}
 800c41e:	bf00      	nop
 800c420:	bf00      	nop
 800c422:	3714      	adds	r7, #20
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr
 800c42c:	20002104 	.word	0x20002104

0800c430 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b086      	sub	sp, #24
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c438:	2300      	movs	r3, #0
 800c43a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	78db      	ldrb	r3, [r3, #3]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d034      	beq.n	800c4ae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c448:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	7858      	ldrb	r0, [r3, #1]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c454:	2301      	movs	r3, #1
 800c456:	697a      	ldr	r2, [r7, #20]
 800c458:	f7ff fd40 	bl	800bedc <disk_write>
 800c45c:	4603      	mov	r3, r0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d002      	beq.n	800c468 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c462:	2301      	movs	r3, #1
 800c464:	73fb      	strb	r3, [r7, #15]
 800c466:	e022      	b.n	800c4ae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2200      	movs	r2, #0
 800c46c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c472:	697a      	ldr	r2, [r7, #20]
 800c474:	1ad2      	subs	r2, r2, r3
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	69db      	ldr	r3, [r3, #28]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d217      	bcs.n	800c4ae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	789b      	ldrb	r3, [r3, #2]
 800c482:	613b      	str	r3, [r7, #16]
 800c484:	e010      	b.n	800c4a8 <sync_window+0x78>
					wsect += fs->fsize;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	69db      	ldr	r3, [r3, #28]
 800c48a:	697a      	ldr	r2, [r7, #20]
 800c48c:	4413      	add	r3, r2
 800c48e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	7858      	ldrb	r0, [r3, #1]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c49a:	2301      	movs	r3, #1
 800c49c:	697a      	ldr	r2, [r7, #20]
 800c49e:	f7ff fd1d 	bl	800bedc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	3b01      	subs	r3, #1
 800c4a6:	613b      	str	r3, [r7, #16]
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	2b01      	cmp	r3, #1
 800c4ac:	d8eb      	bhi.n	800c486 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c4ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3718      	adds	r7, #24
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4ca:	683a      	ldr	r2, [r7, #0]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d01b      	beq.n	800c508 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f7ff ffad 	bl	800c430 <sync_window>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c4da:	7bfb      	ldrb	r3, [r7, #15]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d113      	bne.n	800c508 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	7858      	ldrb	r0, [r3, #1]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	683a      	ldr	r2, [r7, #0]
 800c4ee:	f7ff fcd5 	bl	800be9c <disk_read>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d004      	beq.n	800c502 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c4fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c4fe:	2301      	movs	r3, #1
 800c500:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	683a      	ldr	r2, [r7, #0]
 800c506:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c508:	7bfb      	ldrb	r3, [r7, #15]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3710      	adds	r7, #16
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
	...

0800c514 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f7ff ff87 	bl	800c430 <sync_window>
 800c522:	4603      	mov	r3, r0
 800c524:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c526:	7bfb      	ldrb	r3, [r7, #15]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d159      	bne.n	800c5e0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	2b03      	cmp	r3, #3
 800c532:	d149      	bne.n	800c5c8 <sync_fs+0xb4>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	791b      	ldrb	r3, [r3, #4]
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d145      	bne.n	800c5c8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	899b      	ldrh	r3, [r3, #12]
 800c546:	461a      	mov	r2, r3
 800c548:	2100      	movs	r1, #0
 800c54a:	f7ff fda8 	bl	800c09e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	3334      	adds	r3, #52	; 0x34
 800c552:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c556:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7ff fd37 	bl	800bfce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	3334      	adds	r3, #52	; 0x34
 800c564:	4921      	ldr	r1, [pc, #132]	; (800c5ec <sync_fs+0xd8>)
 800c566:	4618      	mov	r0, r3
 800c568:	f7ff fd4c 	bl	800c004 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	3334      	adds	r3, #52	; 0x34
 800c570:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c574:	491e      	ldr	r1, [pc, #120]	; (800c5f0 <sync_fs+0xdc>)
 800c576:	4618      	mov	r0, r3
 800c578:	f7ff fd44 	bl	800c004 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	3334      	adds	r3, #52	; 0x34
 800c580:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	695b      	ldr	r3, [r3, #20]
 800c588:	4619      	mov	r1, r3
 800c58a:	4610      	mov	r0, r2
 800c58c:	f7ff fd3a 	bl	800c004 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	3334      	adds	r3, #52	; 0x34
 800c594:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	691b      	ldr	r3, [r3, #16]
 800c59c:	4619      	mov	r1, r3
 800c59e:	4610      	mov	r0, r2
 800c5a0:	f7ff fd30 	bl	800c004 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6a1b      	ldr	r3, [r3, #32]
 800c5a8:	1c5a      	adds	r2, r3, #1
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	7858      	ldrb	r0, [r3, #1]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5bc:	2301      	movs	r3, #1
 800c5be:	f7ff fc8d 	bl	800bedc <disk_write>
			fs->fsi_flag = 0;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	785b      	ldrb	r3, [r3, #1]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	2100      	movs	r1, #0
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f7ff fca3 	bl	800bf1c <disk_ioctl>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d001      	beq.n	800c5e0 <sync_fs+0xcc>
 800c5dc:	2301      	movs	r3, #1
 800c5de:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	41615252 	.word	0x41615252
 800c5f0:	61417272 	.word	0x61417272

0800c5f4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	3b02      	subs	r3, #2
 800c602:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	699b      	ldr	r3, [r3, #24]
 800c608:	3b02      	subs	r3, #2
 800c60a:	683a      	ldr	r2, [r7, #0]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d301      	bcc.n	800c614 <clust2sect+0x20>
 800c610:	2300      	movs	r3, #0
 800c612:	e008      	b.n	800c626 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	895b      	ldrh	r3, [r3, #10]
 800c618:	461a      	mov	r2, r3
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	fb03 f202 	mul.w	r2, r3, r2
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c624:	4413      	add	r3, r2
}
 800c626:	4618      	mov	r0, r3
 800c628:	370c      	adds	r7, #12
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr

0800c632 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c632:	b580      	push	{r7, lr}
 800c634:	b086      	sub	sp, #24
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
 800c63a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	2b01      	cmp	r3, #1
 800c646:	d904      	bls.n	800c652 <get_fat+0x20>
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	699b      	ldr	r3, [r3, #24]
 800c64c:	683a      	ldr	r2, [r7, #0]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d302      	bcc.n	800c658 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c652:	2301      	movs	r3, #1
 800c654:	617b      	str	r3, [r7, #20]
 800c656:	e0bb      	b.n	800c7d0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c658:	f04f 33ff 	mov.w	r3, #4294967295
 800c65c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	2b03      	cmp	r3, #3
 800c664:	f000 8083 	beq.w	800c76e <get_fat+0x13c>
 800c668:	2b03      	cmp	r3, #3
 800c66a:	f300 80a7 	bgt.w	800c7bc <get_fat+0x18a>
 800c66e:	2b01      	cmp	r3, #1
 800c670:	d002      	beq.n	800c678 <get_fat+0x46>
 800c672:	2b02      	cmp	r3, #2
 800c674:	d056      	beq.n	800c724 <get_fat+0xf2>
 800c676:	e0a1      	b.n	800c7bc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	60fb      	str	r3, [r7, #12]
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	085b      	lsrs	r3, r3, #1
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	4413      	add	r3, r2
 800c684:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	899b      	ldrh	r3, [r3, #12]
 800c68e:	4619      	mov	r1, r3
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	fbb3 f3f1 	udiv	r3, r3, r1
 800c696:	4413      	add	r3, r2
 800c698:	4619      	mov	r1, r3
 800c69a:	6938      	ldr	r0, [r7, #16]
 800c69c:	f7ff ff0c 	bl	800c4b8 <move_window>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	f040 808d 	bne.w	800c7c2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	1c5a      	adds	r2, r3, #1
 800c6ac:	60fa      	str	r2, [r7, #12]
 800c6ae:	693a      	ldr	r2, [r7, #16]
 800c6b0:	8992      	ldrh	r2, [r2, #12]
 800c6b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c6b6:	fb02 f201 	mul.w	r2, r2, r1
 800c6ba:	1a9b      	subs	r3, r3, r2
 800c6bc:	693a      	ldr	r2, [r7, #16]
 800c6be:	4413      	add	r3, r2
 800c6c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c6c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	899b      	ldrh	r3, [r3, #12]
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800c6d6:	4413      	add	r3, r2
 800c6d8:	4619      	mov	r1, r3
 800c6da:	6938      	ldr	r0, [r7, #16]
 800c6dc:	f7ff feec 	bl	800c4b8 <move_window>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d16f      	bne.n	800c7c6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	899b      	ldrh	r3, [r3, #12]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	fbb3 f1f2 	udiv	r1, r3, r2
 800c6f2:	fb02 f201 	mul.w	r2, r2, r1
 800c6f6:	1a9b      	subs	r3, r3, r2
 800c6f8:	693a      	ldr	r2, [r7, #16]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c700:	021b      	lsls	r3, r3, #8
 800c702:	461a      	mov	r2, r3
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	4313      	orrs	r3, r2
 800c708:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	f003 0301 	and.w	r3, r3, #1
 800c710:	2b00      	cmp	r3, #0
 800c712:	d002      	beq.n	800c71a <get_fat+0xe8>
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	091b      	lsrs	r3, r3, #4
 800c718:	e002      	b.n	800c720 <get_fat+0xee>
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c720:	617b      	str	r3, [r7, #20]
			break;
 800c722:	e055      	b.n	800c7d0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	899b      	ldrh	r3, [r3, #12]
 800c72c:	085b      	lsrs	r3, r3, #1
 800c72e:	b29b      	uxth	r3, r3
 800c730:	4619      	mov	r1, r3
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	fbb3 f3f1 	udiv	r3, r3, r1
 800c738:	4413      	add	r3, r2
 800c73a:	4619      	mov	r1, r3
 800c73c:	6938      	ldr	r0, [r7, #16]
 800c73e:	f7ff febb 	bl	800c4b8 <move_window>
 800c742:	4603      	mov	r3, r0
 800c744:	2b00      	cmp	r3, #0
 800c746:	d140      	bne.n	800c7ca <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	005b      	lsls	r3, r3, #1
 800c752:	693a      	ldr	r2, [r7, #16]
 800c754:	8992      	ldrh	r2, [r2, #12]
 800c756:	fbb3 f0f2 	udiv	r0, r3, r2
 800c75a:	fb02 f200 	mul.w	r2, r2, r0
 800c75e:	1a9b      	subs	r3, r3, r2
 800c760:	440b      	add	r3, r1
 800c762:	4618      	mov	r0, r3
 800c764:	f7ff fbf8 	bl	800bf58 <ld_word>
 800c768:	4603      	mov	r3, r0
 800c76a:	617b      	str	r3, [r7, #20]
			break;
 800c76c:	e030      	b.n	800c7d0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	899b      	ldrh	r3, [r3, #12]
 800c776:	089b      	lsrs	r3, r3, #2
 800c778:	b29b      	uxth	r3, r3
 800c77a:	4619      	mov	r1, r3
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c782:	4413      	add	r3, r2
 800c784:	4619      	mov	r1, r3
 800c786:	6938      	ldr	r0, [r7, #16]
 800c788:	f7ff fe96 	bl	800c4b8 <move_window>
 800c78c:	4603      	mov	r3, r0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d11d      	bne.n	800c7ce <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	009b      	lsls	r3, r3, #2
 800c79c:	693a      	ldr	r2, [r7, #16]
 800c79e:	8992      	ldrh	r2, [r2, #12]
 800c7a0:	fbb3 f0f2 	udiv	r0, r3, r2
 800c7a4:	fb02 f200 	mul.w	r2, r2, r0
 800c7a8:	1a9b      	subs	r3, r3, r2
 800c7aa:	440b      	add	r3, r1
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f7ff fbeb 	bl	800bf88 <ld_dword>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c7b8:	617b      	str	r3, [r7, #20]
			break;
 800c7ba:	e009      	b.n	800c7d0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c7bc:	2301      	movs	r3, #1
 800c7be:	617b      	str	r3, [r7, #20]
 800c7c0:	e006      	b.n	800c7d0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c7c2:	bf00      	nop
 800c7c4:	e004      	b.n	800c7d0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c7c6:	bf00      	nop
 800c7c8:	e002      	b.n	800c7d0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c7ca:	bf00      	nop
 800c7cc:	e000      	b.n	800c7d0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c7ce:	bf00      	nop
		}
	}

	return val;
 800c7d0:	697b      	ldr	r3, [r7, #20]
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3718      	adds	r7, #24
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}

0800c7da <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c7da:	b590      	push	{r4, r7, lr}
 800c7dc:	b089      	sub	sp, #36	; 0x24
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	60f8      	str	r0, [r7, #12]
 800c7e2:	60b9      	str	r1, [r7, #8]
 800c7e4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c7e6:	2302      	movs	r3, #2
 800c7e8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	f240 8102 	bls.w	800c9f6 <put_fat+0x21c>
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	699b      	ldr	r3, [r3, #24]
 800c7f6:	68ba      	ldr	r2, [r7, #8]
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	f080 80fc 	bcs.w	800c9f6 <put_fat+0x21c>
		switch (fs->fs_type) {
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	2b03      	cmp	r3, #3
 800c804:	f000 80b6 	beq.w	800c974 <put_fat+0x19a>
 800c808:	2b03      	cmp	r3, #3
 800c80a:	f300 80fd 	bgt.w	800ca08 <put_fat+0x22e>
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d003      	beq.n	800c81a <put_fat+0x40>
 800c812:	2b02      	cmp	r3, #2
 800c814:	f000 8083 	beq.w	800c91e <put_fat+0x144>
 800c818:	e0f6      	b.n	800ca08 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	61bb      	str	r3, [r7, #24]
 800c81e:	69bb      	ldr	r3, [r7, #24]
 800c820:	085b      	lsrs	r3, r3, #1
 800c822:	69ba      	ldr	r2, [r7, #24]
 800c824:	4413      	add	r3, r2
 800c826:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	899b      	ldrh	r3, [r3, #12]
 800c830:	4619      	mov	r1, r3
 800c832:	69bb      	ldr	r3, [r7, #24]
 800c834:	fbb3 f3f1 	udiv	r3, r3, r1
 800c838:	4413      	add	r3, r2
 800c83a:	4619      	mov	r1, r3
 800c83c:	68f8      	ldr	r0, [r7, #12]
 800c83e:	f7ff fe3b 	bl	800c4b8 <move_window>
 800c842:	4603      	mov	r3, r0
 800c844:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c846:	7ffb      	ldrb	r3, [r7, #31]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	f040 80d6 	bne.w	800c9fa <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c854:	69bb      	ldr	r3, [r7, #24]
 800c856:	1c5a      	adds	r2, r3, #1
 800c858:	61ba      	str	r2, [r7, #24]
 800c85a:	68fa      	ldr	r2, [r7, #12]
 800c85c:	8992      	ldrh	r2, [r2, #12]
 800c85e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c862:	fb02 f200 	mul.w	r2, r2, r0
 800c866:	1a9b      	subs	r3, r3, r2
 800c868:	440b      	add	r3, r1
 800c86a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	f003 0301 	and.w	r3, r3, #1
 800c872:	2b00      	cmp	r3, #0
 800c874:	d00d      	beq.n	800c892 <put_fat+0xb8>
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	b25b      	sxtb	r3, r3
 800c87c:	f003 030f 	and.w	r3, r3, #15
 800c880:	b25a      	sxtb	r2, r3
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	b2db      	uxtb	r3, r3
 800c886:	011b      	lsls	r3, r3, #4
 800c888:	b25b      	sxtb	r3, r3
 800c88a:	4313      	orrs	r3, r2
 800c88c:	b25b      	sxtb	r3, r3
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	e001      	b.n	800c896 <put_fat+0xbc>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	b2db      	uxtb	r3, r3
 800c896:	697a      	ldr	r2, [r7, #20]
 800c898:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	2201      	movs	r2, #1
 800c89e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	899b      	ldrh	r3, [r3, #12]
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	69bb      	ldr	r3, [r7, #24]
 800c8ac:	fbb3 f3f1 	udiv	r3, r3, r1
 800c8b0:	4413      	add	r3, r2
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	68f8      	ldr	r0, [r7, #12]
 800c8b6:	f7ff fdff 	bl	800c4b8 <move_window>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c8be:	7ffb      	ldrb	r3, [r7, #31]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	f040 809c 	bne.w	800c9fe <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	899b      	ldrh	r3, [r3, #12]
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	69bb      	ldr	r3, [r7, #24]
 800c8d4:	fbb3 f0f2 	udiv	r0, r3, r2
 800c8d8:	fb02 f200 	mul.w	r2, r2, r0
 800c8dc:	1a9b      	subs	r3, r3, r2
 800c8de:	440b      	add	r3, r1
 800c8e0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	f003 0301 	and.w	r3, r3, #1
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d003      	beq.n	800c8f4 <put_fat+0x11a>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	091b      	lsrs	r3, r3, #4
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	e00e      	b.n	800c912 <put_fat+0x138>
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	b25b      	sxtb	r3, r3
 800c8fa:	f023 030f 	bic.w	r3, r3, #15
 800c8fe:	b25a      	sxtb	r2, r3
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	0a1b      	lsrs	r3, r3, #8
 800c904:	b25b      	sxtb	r3, r3
 800c906:	f003 030f 	and.w	r3, r3, #15
 800c90a:	b25b      	sxtb	r3, r3
 800c90c:	4313      	orrs	r3, r2
 800c90e:	b25b      	sxtb	r3, r3
 800c910:	b2db      	uxtb	r3, r3
 800c912:	697a      	ldr	r2, [r7, #20]
 800c914:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2201      	movs	r2, #1
 800c91a:	70da      	strb	r2, [r3, #3]
			break;
 800c91c:	e074      	b.n	800ca08 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	899b      	ldrh	r3, [r3, #12]
 800c926:	085b      	lsrs	r3, r3, #1
 800c928:	b29b      	uxth	r3, r3
 800c92a:	4619      	mov	r1, r3
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c932:	4413      	add	r3, r2
 800c934:	4619      	mov	r1, r3
 800c936:	68f8      	ldr	r0, [r7, #12]
 800c938:	f7ff fdbe 	bl	800c4b8 <move_window>
 800c93c:	4603      	mov	r3, r0
 800c93e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c940:	7ffb      	ldrb	r3, [r7, #31]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d15d      	bne.n	800ca02 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	005b      	lsls	r3, r3, #1
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	8992      	ldrh	r2, [r2, #12]
 800c954:	fbb3 f0f2 	udiv	r0, r3, r2
 800c958:	fb02 f200 	mul.w	r2, r2, r0
 800c95c:	1a9b      	subs	r3, r3, r2
 800c95e:	440b      	add	r3, r1
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	b292      	uxth	r2, r2
 800c964:	4611      	mov	r1, r2
 800c966:	4618      	mov	r0, r3
 800c968:	f7ff fb31 	bl	800bfce <st_word>
			fs->wflag = 1;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2201      	movs	r2, #1
 800c970:	70da      	strb	r2, [r3, #3]
			break;
 800c972:	e049      	b.n	800ca08 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	899b      	ldrh	r3, [r3, #12]
 800c97c:	089b      	lsrs	r3, r3, #2
 800c97e:	b29b      	uxth	r3, r3
 800c980:	4619      	mov	r1, r3
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	fbb3 f3f1 	udiv	r3, r3, r1
 800c988:	4413      	add	r3, r2
 800c98a:	4619      	mov	r1, r3
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	f7ff fd93 	bl	800c4b8 <move_window>
 800c992:	4603      	mov	r3, r0
 800c994:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c996:	7ffb      	ldrb	r3, [r7, #31]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d134      	bne.n	800ca06 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	009b      	lsls	r3, r3, #2
 800c9ac:	68fa      	ldr	r2, [r7, #12]
 800c9ae:	8992      	ldrh	r2, [r2, #12]
 800c9b0:	fbb3 f0f2 	udiv	r0, r3, r2
 800c9b4:	fb02 f200 	mul.w	r2, r2, r0
 800c9b8:	1a9b      	subs	r3, r3, r2
 800c9ba:	440b      	add	r3, r1
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7ff fae3 	bl	800bf88 <ld_dword>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c9c8:	4323      	orrs	r3, r4
 800c9ca:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	009b      	lsls	r3, r3, #2
 800c9d6:	68fa      	ldr	r2, [r7, #12]
 800c9d8:	8992      	ldrh	r2, [r2, #12]
 800c9da:	fbb3 f0f2 	udiv	r0, r3, r2
 800c9de:	fb02 f200 	mul.w	r2, r2, r0
 800c9e2:	1a9b      	subs	r3, r3, r2
 800c9e4:	440b      	add	r3, r1
 800c9e6:	6879      	ldr	r1, [r7, #4]
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7ff fb0b 	bl	800c004 <st_dword>
			fs->wflag = 1;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	70da      	strb	r2, [r3, #3]
			break;
 800c9f4:	e008      	b.n	800ca08 <put_fat+0x22e>
		}
	}
 800c9f6:	bf00      	nop
 800c9f8:	e006      	b.n	800ca08 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c9fa:	bf00      	nop
 800c9fc:	e004      	b.n	800ca08 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c9fe:	bf00      	nop
 800ca00:	e002      	b.n	800ca08 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ca02:	bf00      	nop
 800ca04:	e000      	b.n	800ca08 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ca06:	bf00      	nop
	return res;
 800ca08:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3724      	adds	r7, #36	; 0x24
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd90      	pop	{r4, r7, pc}

0800ca12 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ca12:	b580      	push	{r7, lr}
 800ca14:	b088      	sub	sp, #32
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	60f8      	str	r0, [r7, #12]
 800ca1a:	60b9      	str	r1, [r7, #8]
 800ca1c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	2b01      	cmp	r3, #1
 800ca2c:	d904      	bls.n	800ca38 <remove_chain+0x26>
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	699b      	ldr	r3, [r3, #24]
 800ca32:	68ba      	ldr	r2, [r7, #8]
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d301      	bcc.n	800ca3c <remove_chain+0x2a>
 800ca38:	2302      	movs	r3, #2
 800ca3a:	e04b      	b.n	800cad4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d00c      	beq.n	800ca5c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ca42:	f04f 32ff 	mov.w	r2, #4294967295
 800ca46:	6879      	ldr	r1, [r7, #4]
 800ca48:	69b8      	ldr	r0, [r7, #24]
 800ca4a:	f7ff fec6 	bl	800c7da <put_fat>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ca52:	7ffb      	ldrb	r3, [r7, #31]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d001      	beq.n	800ca5c <remove_chain+0x4a>
 800ca58:	7ffb      	ldrb	r3, [r7, #31]
 800ca5a:	e03b      	b.n	800cad4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ca5c:	68b9      	ldr	r1, [r7, #8]
 800ca5e:	68f8      	ldr	r0, [r7, #12]
 800ca60:	f7ff fde7 	bl	800c632 <get_fat>
 800ca64:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d031      	beq.n	800cad0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	2b01      	cmp	r3, #1
 800ca70:	d101      	bne.n	800ca76 <remove_chain+0x64>
 800ca72:	2302      	movs	r3, #2
 800ca74:	e02e      	b.n	800cad4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca7c:	d101      	bne.n	800ca82 <remove_chain+0x70>
 800ca7e:	2301      	movs	r3, #1
 800ca80:	e028      	b.n	800cad4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ca82:	2200      	movs	r2, #0
 800ca84:	68b9      	ldr	r1, [r7, #8]
 800ca86:	69b8      	ldr	r0, [r7, #24]
 800ca88:	f7ff fea7 	bl	800c7da <put_fat>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ca90:	7ffb      	ldrb	r3, [r7, #31]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d001      	beq.n	800ca9a <remove_chain+0x88>
 800ca96:	7ffb      	ldrb	r3, [r7, #31]
 800ca98:	e01c      	b.n	800cad4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ca9a:	69bb      	ldr	r3, [r7, #24]
 800ca9c:	695a      	ldr	r2, [r3, #20]
 800ca9e:	69bb      	ldr	r3, [r7, #24]
 800caa0:	699b      	ldr	r3, [r3, #24]
 800caa2:	3b02      	subs	r3, #2
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d20b      	bcs.n	800cac0 <remove_chain+0xae>
			fs->free_clst++;
 800caa8:	69bb      	ldr	r3, [r7, #24]
 800caaa:	695b      	ldr	r3, [r3, #20]
 800caac:	1c5a      	adds	r2, r3, #1
 800caae:	69bb      	ldr	r3, [r7, #24]
 800cab0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	791b      	ldrb	r3, [r3, #4]
 800cab6:	f043 0301 	orr.w	r3, r3, #1
 800caba:	b2da      	uxtb	r2, r3
 800cabc:	69bb      	ldr	r3, [r7, #24]
 800cabe:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cac4:	69bb      	ldr	r3, [r7, #24]
 800cac6:	699b      	ldr	r3, [r3, #24]
 800cac8:	68ba      	ldr	r2, [r7, #8]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d3c6      	bcc.n	800ca5c <remove_chain+0x4a>
 800cace:	e000      	b.n	800cad2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cad0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cad2:	2300      	movs	r3, #0
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3720      	adds	r7, #32
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b088      	sub	sp, #32
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d10d      	bne.n	800cb0e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	691b      	ldr	r3, [r3, #16]
 800caf6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800caf8:	69bb      	ldr	r3, [r7, #24]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d004      	beq.n	800cb08 <create_chain+0x2c>
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	699b      	ldr	r3, [r3, #24]
 800cb02:	69ba      	ldr	r2, [r7, #24]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d31b      	bcc.n	800cb40 <create_chain+0x64>
 800cb08:	2301      	movs	r3, #1
 800cb0a:	61bb      	str	r3, [r7, #24]
 800cb0c:	e018      	b.n	800cb40 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cb0e:	6839      	ldr	r1, [r7, #0]
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f7ff fd8e 	bl	800c632 <get_fat>
 800cb16:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d801      	bhi.n	800cb22 <create_chain+0x46>
 800cb1e:	2301      	movs	r3, #1
 800cb20:	e070      	b.n	800cc04 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb28:	d101      	bne.n	800cb2e <create_chain+0x52>
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	e06a      	b.n	800cc04 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	699b      	ldr	r3, [r3, #24]
 800cb32:	68fa      	ldr	r2, [r7, #12]
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d201      	bcs.n	800cb3c <create_chain+0x60>
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	e063      	b.n	800cc04 <create_chain+0x128>
		scl = clst;
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	3301      	adds	r3, #1
 800cb48:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	699b      	ldr	r3, [r3, #24]
 800cb4e:	69fa      	ldr	r2, [r7, #28]
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d307      	bcc.n	800cb64 <create_chain+0x88>
				ncl = 2;
 800cb54:	2302      	movs	r3, #2
 800cb56:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cb58:	69fa      	ldr	r2, [r7, #28]
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d901      	bls.n	800cb64 <create_chain+0x88>
 800cb60:	2300      	movs	r3, #0
 800cb62:	e04f      	b.n	800cc04 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cb64:	69f9      	ldr	r1, [r7, #28]
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f7ff fd63 	bl	800c632 <get_fat>
 800cb6c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d00e      	beq.n	800cb92 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d003      	beq.n	800cb82 <create_chain+0xa6>
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb80:	d101      	bne.n	800cb86 <create_chain+0xaa>
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	e03e      	b.n	800cc04 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cb86:	69fa      	ldr	r2, [r7, #28]
 800cb88:	69bb      	ldr	r3, [r7, #24]
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d1da      	bne.n	800cb44 <create_chain+0x68>
 800cb8e:	2300      	movs	r3, #0
 800cb90:	e038      	b.n	800cc04 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cb92:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cb94:	f04f 32ff 	mov.w	r2, #4294967295
 800cb98:	69f9      	ldr	r1, [r7, #28]
 800cb9a:	6938      	ldr	r0, [r7, #16]
 800cb9c:	f7ff fe1d 	bl	800c7da <put_fat>
 800cba0:	4603      	mov	r3, r0
 800cba2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cba4:	7dfb      	ldrb	r3, [r7, #23]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d109      	bne.n	800cbbe <create_chain+0xe2>
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d006      	beq.n	800cbbe <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cbb0:	69fa      	ldr	r2, [r7, #28]
 800cbb2:	6839      	ldr	r1, [r7, #0]
 800cbb4:	6938      	ldr	r0, [r7, #16]
 800cbb6:	f7ff fe10 	bl	800c7da <put_fat>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cbbe:	7dfb      	ldrb	r3, [r7, #23]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d116      	bne.n	800cbf2 <create_chain+0x116>
		fs->last_clst = ncl;
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	69fa      	ldr	r2, [r7, #28]
 800cbc8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	695a      	ldr	r2, [r3, #20]
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	699b      	ldr	r3, [r3, #24]
 800cbd2:	3b02      	subs	r3, #2
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d804      	bhi.n	800cbe2 <create_chain+0x106>
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	695b      	ldr	r3, [r3, #20]
 800cbdc:	1e5a      	subs	r2, r3, #1
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	791b      	ldrb	r3, [r3, #4]
 800cbe6:	f043 0301 	orr.w	r3, r3, #1
 800cbea:	b2da      	uxtb	r2, r3
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	711a      	strb	r2, [r3, #4]
 800cbf0:	e007      	b.n	800cc02 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cbf2:	7dfb      	ldrb	r3, [r7, #23]
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d102      	bne.n	800cbfe <create_chain+0x122>
 800cbf8:	f04f 33ff 	mov.w	r3, #4294967295
 800cbfc:	e000      	b.n	800cc00 <create_chain+0x124>
 800cbfe:	2301      	movs	r3, #1
 800cc00:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cc02:	69fb      	ldr	r3, [r7, #28]
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3720      	adds	r7, #32
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b087      	sub	sp, #28
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc20:	3304      	adds	r3, #4
 800cc22:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	899b      	ldrh	r3, [r3, #12]
 800cc28:	461a      	mov	r2, r3
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	8952      	ldrh	r2, [r2, #10]
 800cc34:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc38:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	1d1a      	adds	r2, r3, #4
 800cc3e:	613a      	str	r2, [r7, #16]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d101      	bne.n	800cc4e <clmt_clust+0x42>
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	e010      	b.n	800cc70 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800cc4e:	697a      	ldr	r2, [r7, #20]
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d307      	bcc.n	800cc66 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800cc56:	697a      	ldr	r2, [r7, #20]
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	1ad3      	subs	r3, r2, r3
 800cc5c:	617b      	str	r3, [r7, #20]
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	3304      	adds	r3, #4
 800cc62:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cc64:	e7e9      	b.n	800cc3a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800cc66:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	4413      	add	r3, r2
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	371c      	adds	r7, #28
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr

0800cc7c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b086      	sub	sp, #24
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc92:	d204      	bcs.n	800cc9e <dir_sdi+0x22>
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	f003 031f 	and.w	r3, r3, #31
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d001      	beq.n	800cca2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800cc9e:	2302      	movs	r3, #2
 800cca0:	e071      	b.n	800cd86 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	683a      	ldr	r2, [r7, #0]
 800cca6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d106      	bne.n	800ccc2 <dir_sdi+0x46>
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	2b02      	cmp	r3, #2
 800ccba:	d902      	bls.n	800ccc2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccc0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d10c      	bne.n	800cce2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	095b      	lsrs	r3, r3, #5
 800cccc:	693a      	ldr	r2, [r7, #16]
 800ccce:	8912      	ldrh	r2, [r2, #8]
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d301      	bcc.n	800ccd8 <dir_sdi+0x5c>
 800ccd4:	2302      	movs	r3, #2
 800ccd6:	e056      	b.n	800cd86 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	61da      	str	r2, [r3, #28]
 800cce0:	e02d      	b.n	800cd3e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	895b      	ldrh	r3, [r3, #10]
 800cce6:	461a      	mov	r2, r3
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	899b      	ldrh	r3, [r3, #12]
 800ccec:	fb03 f302 	mul.w	r3, r3, r2
 800ccf0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ccf2:	e019      	b.n	800cd28 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6979      	ldr	r1, [r7, #20]
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f7ff fc9a 	bl	800c632 <get_fat>
 800ccfe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd06:	d101      	bne.n	800cd0c <dir_sdi+0x90>
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e03c      	b.n	800cd86 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d904      	bls.n	800cd1c <dir_sdi+0xa0>
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	699b      	ldr	r3, [r3, #24]
 800cd16:	697a      	ldr	r2, [r7, #20]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d301      	bcc.n	800cd20 <dir_sdi+0xa4>
 800cd1c:	2302      	movs	r3, #2
 800cd1e:	e032      	b.n	800cd86 <dir_sdi+0x10a>
			ofs -= csz;
 800cd20:	683a      	ldr	r2, [r7, #0]
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	1ad3      	subs	r3, r2, r3
 800cd26:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cd28:	683a      	ldr	r2, [r7, #0]
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d2e1      	bcs.n	800ccf4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800cd30:	6979      	ldr	r1, [r7, #20]
 800cd32:	6938      	ldr	r0, [r7, #16]
 800cd34:	f7ff fc5e 	bl	800c5f4 <clust2sect>
 800cd38:	4602      	mov	r2, r0
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	697a      	ldr	r2, [r7, #20]
 800cd42:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	69db      	ldr	r3, [r3, #28]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d101      	bne.n	800cd50 <dir_sdi+0xd4>
 800cd4c:	2302      	movs	r3, #2
 800cd4e:	e01a      	b.n	800cd86 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	69da      	ldr	r2, [r3, #28]
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	899b      	ldrh	r3, [r3, #12]
 800cd58:	4619      	mov	r1, r3
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	fbb3 f3f1 	udiv	r3, r3, r1
 800cd60:	441a      	add	r2, r3
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	899b      	ldrh	r3, [r3, #12]
 800cd70:	461a      	mov	r2, r3
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	fbb3 f0f2 	udiv	r0, r3, r2
 800cd78:	fb02 f200 	mul.w	r2, r2, r0
 800cd7c:	1a9b      	subs	r3, r3, r2
 800cd7e:	18ca      	adds	r2, r1, r3
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cd84:	2300      	movs	r3, #0
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3718      	adds	r7, #24
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}

0800cd8e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b086      	sub	sp, #24
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
 800cd96:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	695b      	ldr	r3, [r3, #20]
 800cda2:	3320      	adds	r3, #32
 800cda4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	69db      	ldr	r3, [r3, #28]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d003      	beq.n	800cdb6 <dir_next+0x28>
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cdb4:	d301      	bcc.n	800cdba <dir_next+0x2c>
 800cdb6:	2304      	movs	r3, #4
 800cdb8:	e0bb      	b.n	800cf32 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	899b      	ldrh	r3, [r3, #12]
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	fbb3 f1f2 	udiv	r1, r3, r2
 800cdc6:	fb02 f201 	mul.w	r2, r2, r1
 800cdca:	1a9b      	subs	r3, r3, r2
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	f040 809d 	bne.w	800cf0c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	69db      	ldr	r3, [r3, #28]
 800cdd6:	1c5a      	adds	r2, r3, #1
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	699b      	ldr	r3, [r3, #24]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d10b      	bne.n	800cdfc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	095b      	lsrs	r3, r3, #5
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	8912      	ldrh	r2, [r2, #8]
 800cdec:	4293      	cmp	r3, r2
 800cdee:	f0c0 808d 	bcc.w	800cf0c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	61da      	str	r2, [r3, #28]
 800cdf8:	2304      	movs	r3, #4
 800cdfa:	e09a      	b.n	800cf32 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	899b      	ldrh	r3, [r3, #12]
 800ce00:	461a      	mov	r2, r3
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce08:	68fa      	ldr	r2, [r7, #12]
 800ce0a:	8952      	ldrh	r2, [r2, #10]
 800ce0c:	3a01      	subs	r2, #1
 800ce0e:	4013      	ands	r3, r2
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d17b      	bne.n	800cf0c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	699b      	ldr	r3, [r3, #24]
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	4610      	mov	r0, r2
 800ce1e:	f7ff fc08 	bl	800c632 <get_fat>
 800ce22:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d801      	bhi.n	800ce2e <dir_next+0xa0>
 800ce2a:	2302      	movs	r3, #2
 800ce2c:	e081      	b.n	800cf32 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce34:	d101      	bne.n	800ce3a <dir_next+0xac>
 800ce36:	2301      	movs	r3, #1
 800ce38:	e07b      	b.n	800cf32 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	699b      	ldr	r3, [r3, #24]
 800ce3e:	697a      	ldr	r2, [r7, #20]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d359      	bcc.n	800cef8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d104      	bne.n	800ce54 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	61da      	str	r2, [r3, #28]
 800ce50:	2304      	movs	r3, #4
 800ce52:	e06e      	b.n	800cf32 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	699b      	ldr	r3, [r3, #24]
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	4610      	mov	r0, r2
 800ce5e:	f7ff fe3d 	bl	800cadc <create_chain>
 800ce62:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d101      	bne.n	800ce6e <dir_next+0xe0>
 800ce6a:	2307      	movs	r3, #7
 800ce6c:	e061      	b.n	800cf32 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d101      	bne.n	800ce78 <dir_next+0xea>
 800ce74:	2302      	movs	r3, #2
 800ce76:	e05c      	b.n	800cf32 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce7e:	d101      	bne.n	800ce84 <dir_next+0xf6>
 800ce80:	2301      	movs	r3, #1
 800ce82:	e056      	b.n	800cf32 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f7ff fad3 	bl	800c430 <sync_window>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d001      	beq.n	800ce94 <dir_next+0x106>
 800ce90:	2301      	movs	r3, #1
 800ce92:	e04e      	b.n	800cf32 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	899b      	ldrh	r3, [r3, #12]
 800ce9e:	461a      	mov	r2, r3
 800cea0:	2100      	movs	r1, #0
 800cea2:	f7ff f8fc 	bl	800c09e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cea6:	2300      	movs	r3, #0
 800cea8:	613b      	str	r3, [r7, #16]
 800ceaa:	6979      	ldr	r1, [r7, #20]
 800ceac:	68f8      	ldr	r0, [r7, #12]
 800ceae:	f7ff fba1 	bl	800c5f4 <clust2sect>
 800ceb2:	4602      	mov	r2, r0
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	631a      	str	r2, [r3, #48]	; 0x30
 800ceb8:	e012      	b.n	800cee0 <dir_next+0x152>
						fs->wflag = 1;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	2201      	movs	r2, #1
 800cebe:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cec0:	68f8      	ldr	r0, [r7, #12]
 800cec2:	f7ff fab5 	bl	800c430 <sync_window>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d001      	beq.n	800ced0 <dir_next+0x142>
 800cecc:	2301      	movs	r3, #1
 800cece:	e030      	b.n	800cf32 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	3301      	adds	r3, #1
 800ced4:	613b      	str	r3, [r7, #16]
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceda:	1c5a      	adds	r2, r3, #1
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	631a      	str	r2, [r3, #48]	; 0x30
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	895b      	ldrh	r3, [r3, #10]
 800cee4:	461a      	mov	r2, r3
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	4293      	cmp	r3, r2
 800ceea:	d3e6      	bcc.n	800ceba <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	1ad2      	subs	r2, r2, r3
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	697a      	ldr	r2, [r7, #20]
 800cefc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cefe:	6979      	ldr	r1, [r7, #20]
 800cf00:	68f8      	ldr	r0, [r7, #12]
 800cf02:	f7ff fb77 	bl	800c5f4 <clust2sect>
 800cf06:	4602      	mov	r2, r0
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	68ba      	ldr	r2, [r7, #8]
 800cf10:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	899b      	ldrh	r3, [r3, #12]
 800cf1c:	461a      	mov	r2, r3
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	fbb3 f0f2 	udiv	r0, r3, r2
 800cf24:	fb02 f200 	mul.w	r2, r2, r0
 800cf28:	1a9b      	subs	r3, r3, r2
 800cf2a:	18ca      	adds	r2, r1, r3
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cf30:	2300      	movs	r3, #0
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3718      	adds	r7, #24
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}

0800cf3a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b086      	sub	sp, #24
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
 800cf42:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cf4a:	2100      	movs	r1, #0
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f7ff fe95 	bl	800cc7c <dir_sdi>
 800cf52:	4603      	mov	r3, r0
 800cf54:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cf56:	7dfb      	ldrb	r3, [r7, #23]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d12b      	bne.n	800cfb4 <dir_alloc+0x7a>
		n = 0;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	69db      	ldr	r3, [r3, #28]
 800cf64:	4619      	mov	r1, r3
 800cf66:	68f8      	ldr	r0, [r7, #12]
 800cf68:	f7ff faa6 	bl	800c4b8 <move_window>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cf70:	7dfb      	ldrb	r3, [r7, #23]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d11d      	bne.n	800cfb2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6a1b      	ldr	r3, [r3, #32]
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	2be5      	cmp	r3, #229	; 0xe5
 800cf7e:	d004      	beq.n	800cf8a <dir_alloc+0x50>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6a1b      	ldr	r3, [r3, #32]
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d107      	bne.n	800cf9a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	613b      	str	r3, [r7, #16]
 800cf90:	693a      	ldr	r2, [r7, #16]
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d102      	bne.n	800cf9e <dir_alloc+0x64>
 800cf98:	e00c      	b.n	800cfb4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cf9e:	2101      	movs	r1, #1
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f7ff fef4 	bl	800cd8e <dir_next>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cfaa:	7dfb      	ldrb	r3, [r7, #23]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d0d7      	beq.n	800cf60 <dir_alloc+0x26>
 800cfb0:	e000      	b.n	800cfb4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cfb2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cfb4:	7dfb      	ldrb	r3, [r7, #23]
 800cfb6:	2b04      	cmp	r3, #4
 800cfb8:	d101      	bne.n	800cfbe <dir_alloc+0x84>
 800cfba:	2307      	movs	r3, #7
 800cfbc:	75fb      	strb	r3, [r7, #23]
	return res;
 800cfbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3718      	adds	r7, #24
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}

0800cfc8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b084      	sub	sp, #16
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	331a      	adds	r3, #26
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7fe ffbe 	bl	800bf58 <ld_word>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	2b03      	cmp	r3, #3
 800cfe6:	d109      	bne.n	800cffc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	3314      	adds	r3, #20
 800cfec:	4618      	mov	r0, r3
 800cfee:	f7fe ffb3 	bl	800bf58 <ld_word>
 800cff2:	4603      	mov	r3, r0
 800cff4:	041b      	lsls	r3, r3, #16
 800cff6:	68fa      	ldr	r2, [r7, #12]
 800cff8:	4313      	orrs	r3, r2
 800cffa:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cffc:	68fb      	ldr	r3, [r7, #12]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3710      	adds	r7, #16
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d006:	b580      	push	{r7, lr}
 800d008:	b084      	sub	sp, #16
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	60f8      	str	r0, [r7, #12]
 800d00e:	60b9      	str	r1, [r7, #8]
 800d010:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	331a      	adds	r3, #26
 800d016:	687a      	ldr	r2, [r7, #4]
 800d018:	b292      	uxth	r2, r2
 800d01a:	4611      	mov	r1, r2
 800d01c:	4618      	mov	r0, r3
 800d01e:	f7fe ffd6 	bl	800bfce <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	2b03      	cmp	r3, #3
 800d028:	d109      	bne.n	800d03e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	f103 0214 	add.w	r2, r3, #20
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	0c1b      	lsrs	r3, r3, #16
 800d034:	b29b      	uxth	r3, r3
 800d036:	4619      	mov	r1, r3
 800d038:	4610      	mov	r0, r2
 800d03a:	f7fe ffc8 	bl	800bfce <st_word>
	}
}
 800d03e:	bf00      	nop
 800d040:	3710      	adds	r7, #16
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}

0800d046 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d046:	b580      	push	{r7, lr}
 800d048:	b086      	sub	sp, #24
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d054:	2100      	movs	r1, #0
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f7ff fe10 	bl	800cc7c <dir_sdi>
 800d05c:	4603      	mov	r3, r0
 800d05e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d060:	7dfb      	ldrb	r3, [r7, #23]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d001      	beq.n	800d06a <dir_find+0x24>
 800d066:	7dfb      	ldrb	r3, [r7, #23]
 800d068:	e03e      	b.n	800d0e8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	69db      	ldr	r3, [r3, #28]
 800d06e:	4619      	mov	r1, r3
 800d070:	6938      	ldr	r0, [r7, #16]
 800d072:	f7ff fa21 	bl	800c4b8 <move_window>
 800d076:	4603      	mov	r3, r0
 800d078:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d07a:	7dfb      	ldrb	r3, [r7, #23]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d12f      	bne.n	800d0e0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6a1b      	ldr	r3, [r3, #32]
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d088:	7bfb      	ldrb	r3, [r7, #15]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d102      	bne.n	800d094 <dir_find+0x4e>
 800d08e:	2304      	movs	r3, #4
 800d090:	75fb      	strb	r3, [r7, #23]
 800d092:	e028      	b.n	800d0e6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6a1b      	ldr	r3, [r3, #32]
 800d098:	330b      	adds	r3, #11
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0a0:	b2da      	uxtb	r2, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6a1b      	ldr	r3, [r3, #32]
 800d0aa:	330b      	adds	r3, #11
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	f003 0308 	and.w	r3, r3, #8
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d10a      	bne.n	800d0cc <dir_find+0x86>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6a18      	ldr	r0, [r3, #32]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	3324      	adds	r3, #36	; 0x24
 800d0be:	220b      	movs	r2, #11
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	f7ff f807 	bl	800c0d4 <mem_cmp>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d00b      	beq.n	800d0e4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d0cc:	2100      	movs	r1, #0
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f7ff fe5d 	bl	800cd8e <dir_next>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d0d8:	7dfb      	ldrb	r3, [r7, #23]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d0c5      	beq.n	800d06a <dir_find+0x24>
 800d0de:	e002      	b.n	800d0e6 <dir_find+0xa0>
		if (res != FR_OK) break;
 800d0e0:	bf00      	nop
 800d0e2:	e000      	b.n	800d0e6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d0e4:	bf00      	nop

	return res;
 800d0e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3718      	adds	r7, #24
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}

0800d0f0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b084      	sub	sp, #16
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d0fe:	2101      	movs	r1, #1
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f7ff ff1a 	bl	800cf3a <dir_alloc>
 800d106:	4603      	mov	r3, r0
 800d108:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d10a:	7bfb      	ldrb	r3, [r7, #15]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d11c      	bne.n	800d14a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	69db      	ldr	r3, [r3, #28]
 800d114:	4619      	mov	r1, r3
 800d116:	68b8      	ldr	r0, [r7, #8]
 800d118:	f7ff f9ce 	bl	800c4b8 <move_window>
 800d11c:	4603      	mov	r3, r0
 800d11e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d120:	7bfb      	ldrb	r3, [r7, #15]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d111      	bne.n	800d14a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6a1b      	ldr	r3, [r3, #32]
 800d12a:	2220      	movs	r2, #32
 800d12c:	2100      	movs	r1, #0
 800d12e:	4618      	mov	r0, r3
 800d130:	f7fe ffb5 	bl	800c09e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6a18      	ldr	r0, [r3, #32]
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	3324      	adds	r3, #36	; 0x24
 800d13c:	220b      	movs	r2, #11
 800d13e:	4619      	mov	r1, r3
 800d140:	f7fe ff8c 	bl	800c05c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	2201      	movs	r2, #1
 800d148:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d14a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3710      	adds	r7, #16
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b08a      	sub	sp, #40	; 0x28
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	617b      	str	r3, [r7, #20]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	3324      	adds	r3, #36	; 0x24
 800d168:	613b      	str	r3, [r7, #16]
	mem_set(sfn, ' ', 11);
 800d16a:	220b      	movs	r2, #11
 800d16c:	2120      	movs	r1, #32
 800d16e:	6938      	ldr	r0, [r7, #16]
 800d170:	f7fe ff95 	bl	800c09e <mem_set>
	si = i = 0; ni = 8;
 800d174:	2300      	movs	r3, #0
 800d176:	61bb      	str	r3, [r7, #24]
 800d178:	69bb      	ldr	r3, [r7, #24]
 800d17a:	61fb      	str	r3, [r7, #28]
 800d17c:	2308      	movs	r3, #8
 800d17e:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d180:	69fb      	ldr	r3, [r7, #28]
 800d182:	1c5a      	adds	r2, r3, #1
 800d184:	61fa      	str	r2, [r7, #28]
 800d186:	697a      	ldr	r2, [r7, #20]
 800d188:	4413      	add	r3, r2
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d194:	2b20      	cmp	r3, #32
 800d196:	f240 8083 	bls.w	800d2a0 <create_name+0x14c>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d19a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d19e:	2b2f      	cmp	r3, #47	; 0x2f
 800d1a0:	d007      	beq.n	800d1b2 <create_name+0x5e>
 800d1a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1a6:	2b5c      	cmp	r3, #92	; 0x5c
 800d1a8:	d110      	bne.n	800d1cc <create_name+0x78>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d1aa:	e002      	b.n	800d1b2 <create_name+0x5e>
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	61fb      	str	r3, [r7, #28]
 800d1b2:	697a      	ldr	r2, [r7, #20]
 800d1b4:	69fb      	ldr	r3, [r7, #28]
 800d1b6:	4413      	add	r3, r2
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	2b2f      	cmp	r3, #47	; 0x2f
 800d1bc:	d0f6      	beq.n	800d1ac <create_name+0x58>
 800d1be:	697a      	ldr	r2, [r7, #20]
 800d1c0:	69fb      	ldr	r3, [r7, #28]
 800d1c2:	4413      	add	r3, r2
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	2b5c      	cmp	r3, #92	; 0x5c
 800d1c8:	d0f0      	beq.n	800d1ac <create_name+0x58>
			break;
 800d1ca:	e06a      	b.n	800d2a2 <create_name+0x14e>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d1cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1d0:	2b2e      	cmp	r3, #46	; 0x2e
 800d1d2:	d003      	beq.n	800d1dc <create_name+0x88>
 800d1d4:	69ba      	ldr	r2, [r7, #24]
 800d1d6:	6a3b      	ldr	r3, [r7, #32]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d30d      	bcc.n	800d1f8 <create_name+0xa4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d1dc:	6a3b      	ldr	r3, [r7, #32]
 800d1de:	2b0b      	cmp	r3, #11
 800d1e0:	d003      	beq.n	800d1ea <create_name+0x96>
 800d1e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1e6:	2b2e      	cmp	r3, #46	; 0x2e
 800d1e8:	d001      	beq.n	800d1ee <create_name+0x9a>
 800d1ea:	2306      	movs	r3, #6
 800d1ec:	e075      	b.n	800d2da <create_name+0x186>
			i = 8; ni = 11;				/* Goto extension */
 800d1ee:	2308      	movs	r3, #8
 800d1f0:	61bb      	str	r3, [r7, #24]
 800d1f2:	230b      	movs	r3, #11
 800d1f4:	623b      	str	r3, [r7, #32]
			continue;
 800d1f6:	e052      	b.n	800d29e <create_name+0x14a>
#if !_DF1S
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false at SBCS cfg.) */
 800d1f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1fc:	2b80      	cmp	r3, #128	; 0x80
 800d1fe:	d92e      	bls.n	800d25e <create_name+0x10a>
 800d200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d204:	2bff      	cmp	r3, #255	; 0xff
 800d206:	d02a      	beq.n	800d25e <create_name+0x10a>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	1c5a      	adds	r2, r3, #1
 800d20c:	61fa      	str	r2, [r7, #28]
 800d20e:	697a      	ldr	r2, [r7, #20]
 800d210:	4413      	add	r3, r2
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	73fb      	strb	r3, [r7, #15]
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 800d216:	7bfb      	ldrb	r3, [r7, #15]
 800d218:	2b3f      	cmp	r3, #63	; 0x3f
 800d21a:	d902      	bls.n	800d222 <create_name+0xce>
 800d21c:	7bfb      	ldrb	r3, [r7, #15]
 800d21e:	2b7e      	cmp	r3, #126	; 0x7e
 800d220:	d906      	bls.n	800d230 <create_name+0xdc>
 800d222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d226:	2b00      	cmp	r3, #0
 800d228:	da07      	bge.n	800d23a <create_name+0xe6>
 800d22a:	7bfb      	ldrb	r3, [r7, #15]
 800d22c:	2bff      	cmp	r3, #255	; 0xff
 800d22e:	d004      	beq.n	800d23a <create_name+0xe6>
 800d230:	6a3b      	ldr	r3, [r7, #32]
 800d232:	3b01      	subs	r3, #1
 800d234:	69ba      	ldr	r2, [r7, #24]
 800d236:	429a      	cmp	r2, r3
 800d238:	d301      	bcc.n	800d23e <create_name+0xea>
 800d23a:	2306      	movs	r3, #6
 800d23c:	e04d      	b.n	800d2da <create_name+0x186>
			sfn[i++] = c;
 800d23e:	69bb      	ldr	r3, [r7, #24]
 800d240:	1c5a      	adds	r2, r3, #1
 800d242:	61ba      	str	r2, [r7, #24]
 800d244:	693a      	ldr	r2, [r7, #16]
 800d246:	4413      	add	r3, r2
 800d248:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d24c:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 800d24e:	69bb      	ldr	r3, [r7, #24]
 800d250:	1c5a      	adds	r2, r3, #1
 800d252:	61ba      	str	r2, [r7, #24]
 800d254:	693a      	ldr	r2, [r7, #16]
 800d256:	4413      	add	r3, r2
 800d258:	7bfa      	ldrb	r2, [r7, #15]
 800d25a:	701a      	strb	r2, [r3, #0]
 800d25c:	e01f      	b.n	800d29e <create_name+0x14a>
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d25e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d262:	4619      	mov	r1, r3
 800d264:	481f      	ldr	r0, [pc, #124]	; (800d2e4 <create_name+0x190>)
 800d266:	f7fe ff5c 	bl	800c122 <chk_chr>
 800d26a:	4603      	mov	r3, r0
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d001      	beq.n	800d274 <create_name+0x120>
 800d270:	2306      	movs	r3, #6
 800d272:	e032      	b.n	800d2da <create_name+0x186>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d278:	2b60      	cmp	r3, #96	; 0x60
 800d27a:	d908      	bls.n	800d28e <create_name+0x13a>
 800d27c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d280:	2b7a      	cmp	r3, #122	; 0x7a
 800d282:	d804      	bhi.n	800d28e <create_name+0x13a>
 800d284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d288:	3b20      	subs	r3, #32
 800d28a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 800d28e:	69bb      	ldr	r3, [r7, #24]
 800d290:	1c5a      	adds	r2, r3, #1
 800d292:	61ba      	str	r2, [r7, #24]
 800d294:	693a      	ldr	r2, [r7, #16]
 800d296:	4413      	add	r3, r2
 800d298:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d29c:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d29e:	e76f      	b.n	800d180 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d2a0:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d2a2:	697a      	ldr	r2, [r7, #20]
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	441a      	add	r2, r3
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d2ac:	69bb      	ldr	r3, [r7, #24]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d101      	bne.n	800d2b6 <create_name+0x162>
 800d2b2:	2306      	movs	r3, #6
 800d2b4:	e011      	b.n	800d2da <create_name+0x186>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	2be5      	cmp	r3, #229	; 0xe5
 800d2bc:	d102      	bne.n	800d2c4 <create_name+0x170>
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	2205      	movs	r2, #5
 800d2c2:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d2c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2c8:	2b20      	cmp	r3, #32
 800d2ca:	d801      	bhi.n	800d2d0 <create_name+0x17c>
 800d2cc:	2204      	movs	r2, #4
 800d2ce:	e000      	b.n	800d2d2 <create_name+0x17e>
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	330b      	adds	r3, #11
 800d2d6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d2d8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3728      	adds	r7, #40	; 0x28
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	080104c8 	.word	0x080104c8

0800d2e8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b086      	sub	sp, #24
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d2fc:	e002      	b.n	800d304 <follow_path+0x1c>
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	3301      	adds	r3, #1
 800d302:	603b      	str	r3, [r7, #0]
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	2b2f      	cmp	r3, #47	; 0x2f
 800d30a:	d0f8      	beq.n	800d2fe <follow_path+0x16>
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	2b5c      	cmp	r3, #92	; 0x5c
 800d312:	d0f4      	beq.n	800d2fe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	2200      	movs	r2, #0
 800d318:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	2b1f      	cmp	r3, #31
 800d320:	d80a      	bhi.n	800d338 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2280      	movs	r2, #128	; 0x80
 800d326:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d32a:	2100      	movs	r1, #0
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f7ff fca5 	bl	800cc7c <dir_sdi>
 800d332:	4603      	mov	r3, r0
 800d334:	75fb      	strb	r3, [r7, #23]
 800d336:	e048      	b.n	800d3ca <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d338:	463b      	mov	r3, r7
 800d33a:	4619      	mov	r1, r3
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f7ff ff09 	bl	800d154 <create_name>
 800d342:	4603      	mov	r3, r0
 800d344:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d346:	7dfb      	ldrb	r3, [r7, #23]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d139      	bne.n	800d3c0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f7ff fe7a 	bl	800d046 <dir_find>
 800d352:	4603      	mov	r3, r0
 800d354:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d35c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d35e:	7dfb      	ldrb	r3, [r7, #23]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d00a      	beq.n	800d37a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d364:	7dfb      	ldrb	r3, [r7, #23]
 800d366:	2b04      	cmp	r3, #4
 800d368:	d12c      	bne.n	800d3c4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d36a:	7afb      	ldrb	r3, [r7, #11]
 800d36c:	f003 0304 	and.w	r3, r3, #4
 800d370:	2b00      	cmp	r3, #0
 800d372:	d127      	bne.n	800d3c4 <follow_path+0xdc>
 800d374:	2305      	movs	r3, #5
 800d376:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d378:	e024      	b.n	800d3c4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d37a:	7afb      	ldrb	r3, [r7, #11]
 800d37c:	f003 0304 	and.w	r3, r3, #4
 800d380:	2b00      	cmp	r3, #0
 800d382:	d121      	bne.n	800d3c8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	799b      	ldrb	r3, [r3, #6]
 800d388:	f003 0310 	and.w	r3, r3, #16
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d102      	bne.n	800d396 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d390:	2305      	movs	r3, #5
 800d392:	75fb      	strb	r3, [r7, #23]
 800d394:	e019      	b.n	800d3ca <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	695b      	ldr	r3, [r3, #20]
 800d3a0:	68fa      	ldr	r2, [r7, #12]
 800d3a2:	8992      	ldrh	r2, [r2, #12]
 800d3a4:	fbb3 f0f2 	udiv	r0, r3, r2
 800d3a8:	fb02 f200 	mul.w	r2, r2, r0
 800d3ac:	1a9b      	subs	r3, r3, r2
 800d3ae:	440b      	add	r3, r1
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	68f8      	ldr	r0, [r7, #12]
 800d3b4:	f7ff fe08 	bl	800cfc8 <ld_clust>
 800d3b8:	4602      	mov	r2, r0
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d3be:	e7bb      	b.n	800d338 <follow_path+0x50>
			if (res != FR_OK) break;
 800d3c0:	bf00      	nop
 800d3c2:	e002      	b.n	800d3ca <follow_path+0xe2>
				break;
 800d3c4:	bf00      	nop
 800d3c6:	e000      	b.n	800d3ca <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d3c8:	bf00      	nop
			}
		}
	}

	return res;
 800d3ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3718      	adds	r7, #24
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b087      	sub	sp, #28
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d3dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d3e0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d031      	beq.n	800d44e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	617b      	str	r3, [r7, #20]
 800d3f0:	e002      	b.n	800d3f8 <get_ldnumber+0x24>
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	617b      	str	r3, [r7, #20]
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	2b20      	cmp	r3, #32
 800d3fe:	d903      	bls.n	800d408 <get_ldnumber+0x34>
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	2b3a      	cmp	r3, #58	; 0x3a
 800d406:	d1f4      	bne.n	800d3f2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	2b3a      	cmp	r3, #58	; 0x3a
 800d40e:	d11c      	bne.n	800d44a <get_ldnumber+0x76>
			tp = *path;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	1c5a      	adds	r2, r3, #1
 800d41a:	60fa      	str	r2, [r7, #12]
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	3b30      	subs	r3, #48	; 0x30
 800d420:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	2b09      	cmp	r3, #9
 800d426:	d80e      	bhi.n	800d446 <get_ldnumber+0x72>
 800d428:	68fa      	ldr	r2, [r7, #12]
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d10a      	bne.n	800d446 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d107      	bne.n	800d446 <get_ldnumber+0x72>
					vol = (int)i;
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	3301      	adds	r3, #1
 800d43e:	617b      	str	r3, [r7, #20]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	697a      	ldr	r2, [r7, #20]
 800d444:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	e002      	b.n	800d450 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d44a:	2300      	movs	r3, #0
 800d44c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d44e:	693b      	ldr	r3, [r7, #16]
}
 800d450:	4618      	mov	r0, r3
 800d452:	371c      	adds	r7, #28
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2200      	movs	r2, #0
 800d46a:	70da      	strb	r2, [r3, #3]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f04f 32ff 	mov.w	r2, #4294967295
 800d472:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d474:	6839      	ldr	r1, [r7, #0]
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f7ff f81e 	bl	800c4b8 <move_window>
 800d47c:	4603      	mov	r3, r0
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d001      	beq.n	800d486 <check_fs+0x2a>
 800d482:	2304      	movs	r3, #4
 800d484:	e038      	b.n	800d4f8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	3334      	adds	r3, #52	; 0x34
 800d48a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d48e:	4618      	mov	r0, r3
 800d490:	f7fe fd62 	bl	800bf58 <ld_word>
 800d494:	4603      	mov	r3, r0
 800d496:	461a      	mov	r2, r3
 800d498:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d001      	beq.n	800d4a4 <check_fs+0x48>
 800d4a0:	2303      	movs	r3, #3
 800d4a2:	e029      	b.n	800d4f8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d4aa:	2be9      	cmp	r3, #233	; 0xe9
 800d4ac:	d009      	beq.n	800d4c2 <check_fs+0x66>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d4b4:	2beb      	cmp	r3, #235	; 0xeb
 800d4b6:	d11e      	bne.n	800d4f6 <check_fs+0x9a>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d4be:	2b90      	cmp	r3, #144	; 0x90
 800d4c0:	d119      	bne.n	800d4f6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	3334      	adds	r3, #52	; 0x34
 800d4c6:	3336      	adds	r3, #54	; 0x36
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7fe fd5d 	bl	800bf88 <ld_dword>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d4d4:	4a0a      	ldr	r2, [pc, #40]	; (800d500 <check_fs+0xa4>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d101      	bne.n	800d4de <check_fs+0x82>
 800d4da:	2300      	movs	r3, #0
 800d4dc:	e00c      	b.n	800d4f8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	3334      	adds	r3, #52	; 0x34
 800d4e2:	3352      	adds	r3, #82	; 0x52
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7fe fd4f 	bl	800bf88 <ld_dword>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	4a05      	ldr	r2, [pc, #20]	; (800d504 <check_fs+0xa8>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d101      	bne.n	800d4f6 <check_fs+0x9a>
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	e000      	b.n	800d4f8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d4f6:	2302      	movs	r3, #2
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3708      	adds	r7, #8
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	00544146 	.word	0x00544146
 800d504:	33544146 	.word	0x33544146

0800d508 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b096      	sub	sp, #88	; 0x58
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	4613      	mov	r3, r2
 800d514:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	2200      	movs	r2, #0
 800d51a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d51c:	68f8      	ldr	r0, [r7, #12]
 800d51e:	f7ff ff59 	bl	800d3d4 <get_ldnumber>
 800d522:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d526:	2b00      	cmp	r3, #0
 800d528:	da01      	bge.n	800d52e <find_volume+0x26>
 800d52a:	230b      	movs	r3, #11
 800d52c:	e265      	b.n	800d9fa <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d52e:	4ab0      	ldr	r2, [pc, #704]	; (800d7f0 <find_volume+0x2e8>)
 800d530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d536:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d101      	bne.n	800d542 <find_volume+0x3a>
 800d53e:	230c      	movs	r3, #12
 800d540:	e25b      	b.n	800d9fa <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d546:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d548:	79fb      	ldrb	r3, [r7, #7]
 800d54a:	f023 0301 	bic.w	r3, r3, #1
 800d54e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d01a      	beq.n	800d58e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d55a:	785b      	ldrb	r3, [r3, #1]
 800d55c:	4618      	mov	r0, r3
 800d55e:	f7fe fc5d 	bl	800be1c <disk_status>
 800d562:	4603      	mov	r3, r0
 800d564:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d568:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d56c:	f003 0301 	and.w	r3, r3, #1
 800d570:	2b00      	cmp	r3, #0
 800d572:	d10c      	bne.n	800d58e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d574:	79fb      	ldrb	r3, [r7, #7]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d007      	beq.n	800d58a <find_volume+0x82>
 800d57a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d57e:	f003 0304 	and.w	r3, r3, #4
 800d582:	2b00      	cmp	r3, #0
 800d584:	d001      	beq.n	800d58a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d586:	230a      	movs	r3, #10
 800d588:	e237      	b.n	800d9fa <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800d58a:	2300      	movs	r3, #0
 800d58c:	e235      	b.n	800d9fa <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d590:	2200      	movs	r2, #0
 800d592:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d596:	b2da      	uxtb	r2, r3
 800d598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d59a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d59e:	785b      	ldrb	r3, [r3, #1]
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f7fe fc55 	bl	800be50 <disk_initialize>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d5ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d5b0:	f003 0301 	and.w	r3, r3, #1
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d001      	beq.n	800d5bc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d5b8:	2303      	movs	r3, #3
 800d5ba:	e21e      	b.n	800d9fa <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d5bc:	79fb      	ldrb	r3, [r7, #7]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d007      	beq.n	800d5d2 <find_volume+0xca>
 800d5c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d5c6:	f003 0304 	and.w	r3, r3, #4
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d001      	beq.n	800d5d2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d5ce:	230a      	movs	r3, #10
 800d5d0:	e213      	b.n	800d9fa <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d4:	7858      	ldrb	r0, [r3, #1]
 800d5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d8:	330c      	adds	r3, #12
 800d5da:	461a      	mov	r2, r3
 800d5dc:	2102      	movs	r1, #2
 800d5de:	f7fe fc9d 	bl	800bf1c <disk_ioctl>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d001      	beq.n	800d5ec <find_volume+0xe4>
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	e206      	b.n	800d9fa <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ee:	899b      	ldrh	r3, [r3, #12]
 800d5f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5f4:	d80d      	bhi.n	800d612 <find_volume+0x10a>
 800d5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f8:	899b      	ldrh	r3, [r3, #12]
 800d5fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5fe:	d308      	bcc.n	800d612 <find_volume+0x10a>
 800d600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d602:	899b      	ldrh	r3, [r3, #12]
 800d604:	461a      	mov	r2, r3
 800d606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d608:	899b      	ldrh	r3, [r3, #12]
 800d60a:	3b01      	subs	r3, #1
 800d60c:	4013      	ands	r3, r2
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d001      	beq.n	800d616 <find_volume+0x10e>
 800d612:	2301      	movs	r3, #1
 800d614:	e1f1      	b.n	800d9fa <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d616:	2300      	movs	r3, #0
 800d618:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d61a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d61c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d61e:	f7ff ff1d 	bl	800d45c <check_fs>
 800d622:	4603      	mov	r3, r0
 800d624:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d628:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d62c:	2b02      	cmp	r3, #2
 800d62e:	d14b      	bne.n	800d6c8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d630:	2300      	movs	r3, #0
 800d632:	643b      	str	r3, [r7, #64]	; 0x40
 800d634:	e01f      	b.n	800d676 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d638:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d63c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d63e:	011b      	lsls	r3, r3, #4
 800d640:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d644:	4413      	add	r3, r2
 800d646:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d64a:	3304      	adds	r3, #4
 800d64c:	781b      	ldrb	r3, [r3, #0]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d006      	beq.n	800d660 <find_volume+0x158>
 800d652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d654:	3308      	adds	r3, #8
 800d656:	4618      	mov	r0, r3
 800d658:	f7fe fc96 	bl	800bf88 <ld_dword>
 800d65c:	4602      	mov	r2, r0
 800d65e:	e000      	b.n	800d662 <find_volume+0x15a>
 800d660:	2200      	movs	r2, #0
 800d662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d66a:	440b      	add	r3, r1
 800d66c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d672:	3301      	adds	r3, #1
 800d674:	643b      	str	r3, [r7, #64]	; 0x40
 800d676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d678:	2b03      	cmp	r3, #3
 800d67a:	d9dc      	bls.n	800d636 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d67c:	2300      	movs	r3, #0
 800d67e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d682:	2b00      	cmp	r3, #0
 800d684:	d002      	beq.n	800d68c <find_volume+0x184>
 800d686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d688:	3b01      	subs	r3, #1
 800d68a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d68c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d68e:	009b      	lsls	r3, r3, #2
 800d690:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d694:	4413      	add	r3, r2
 800d696:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d69a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d69c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d005      	beq.n	800d6ae <find_volume+0x1a6>
 800d6a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d6a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d6a6:	f7ff fed9 	bl	800d45c <check_fs>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	e000      	b.n	800d6b0 <find_volume+0x1a8>
 800d6ae:	2303      	movs	r3, #3
 800d6b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d6b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d6b8:	2b01      	cmp	r3, #1
 800d6ba:	d905      	bls.n	800d6c8 <find_volume+0x1c0>
 800d6bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6be:	3301      	adds	r3, #1
 800d6c0:	643b      	str	r3, [r7, #64]	; 0x40
 800d6c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6c4:	2b03      	cmp	r3, #3
 800d6c6:	d9e1      	bls.n	800d68c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d6c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d6cc:	2b04      	cmp	r3, #4
 800d6ce:	d101      	bne.n	800d6d4 <find_volume+0x1cc>
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	e192      	b.n	800d9fa <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d6d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d901      	bls.n	800d6e0 <find_volume+0x1d8>
 800d6dc:	230d      	movs	r3, #13
 800d6de:	e18c      	b.n	800d9fa <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e2:	3334      	adds	r3, #52	; 0x34
 800d6e4:	330b      	adds	r3, #11
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7fe fc36 	bl	800bf58 <ld_word>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6f2:	899b      	ldrh	r3, [r3, #12]
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	d001      	beq.n	800d6fc <find_volume+0x1f4>
 800d6f8:	230d      	movs	r3, #13
 800d6fa:	e17e      	b.n	800d9fa <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6fe:	3334      	adds	r3, #52	; 0x34
 800d700:	3316      	adds	r3, #22
 800d702:	4618      	mov	r0, r3
 800d704:	f7fe fc28 	bl	800bf58 <ld_word>
 800d708:	4603      	mov	r3, r0
 800d70a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d70c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d106      	bne.n	800d720 <find_volume+0x218>
 800d712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d714:	3334      	adds	r3, #52	; 0x34
 800d716:	3324      	adds	r3, #36	; 0x24
 800d718:	4618      	mov	r0, r3
 800d71a:	f7fe fc35 	bl	800bf88 <ld_dword>
 800d71e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d722:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d724:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d728:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d72e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d732:	789b      	ldrb	r3, [r3, #2]
 800d734:	2b01      	cmp	r3, #1
 800d736:	d005      	beq.n	800d744 <find_volume+0x23c>
 800d738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d73a:	789b      	ldrb	r3, [r3, #2]
 800d73c:	2b02      	cmp	r3, #2
 800d73e:	d001      	beq.n	800d744 <find_volume+0x23c>
 800d740:	230d      	movs	r3, #13
 800d742:	e15a      	b.n	800d9fa <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d746:	789b      	ldrb	r3, [r3, #2]
 800d748:	461a      	mov	r2, r3
 800d74a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d74c:	fb02 f303 	mul.w	r3, r2, r3
 800d750:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d758:	b29a      	uxth	r2, r3
 800d75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d760:	895b      	ldrh	r3, [r3, #10]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d008      	beq.n	800d778 <find_volume+0x270>
 800d766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d768:	895b      	ldrh	r3, [r3, #10]
 800d76a:	461a      	mov	r2, r3
 800d76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d76e:	895b      	ldrh	r3, [r3, #10]
 800d770:	3b01      	subs	r3, #1
 800d772:	4013      	ands	r3, r2
 800d774:	2b00      	cmp	r3, #0
 800d776:	d001      	beq.n	800d77c <find_volume+0x274>
 800d778:	230d      	movs	r3, #13
 800d77a:	e13e      	b.n	800d9fa <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d77e:	3334      	adds	r3, #52	; 0x34
 800d780:	3311      	adds	r3, #17
 800d782:	4618      	mov	r0, r3
 800d784:	f7fe fbe8 	bl	800bf58 <ld_word>
 800d788:	4603      	mov	r3, r0
 800d78a:	461a      	mov	r2, r3
 800d78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d78e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d792:	891b      	ldrh	r3, [r3, #8]
 800d794:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d796:	8992      	ldrh	r2, [r2, #12]
 800d798:	0952      	lsrs	r2, r2, #5
 800d79a:	b292      	uxth	r2, r2
 800d79c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d7a0:	fb02 f201 	mul.w	r2, r2, r1
 800d7a4:	1a9b      	subs	r3, r3, r2
 800d7a6:	b29b      	uxth	r3, r3
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d001      	beq.n	800d7b0 <find_volume+0x2a8>
 800d7ac:	230d      	movs	r3, #13
 800d7ae:	e124      	b.n	800d9fa <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b2:	3334      	adds	r3, #52	; 0x34
 800d7b4:	3313      	adds	r3, #19
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7fe fbce 	bl	800bf58 <ld_word>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d7c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d106      	bne.n	800d7d4 <find_volume+0x2cc>
 800d7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c8:	3334      	adds	r3, #52	; 0x34
 800d7ca:	3320      	adds	r3, #32
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7fe fbdb 	bl	800bf88 <ld_dword>
 800d7d2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d6:	3334      	adds	r3, #52	; 0x34
 800d7d8:	330e      	adds	r3, #14
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7fe fbbc 	bl	800bf58 <ld_word>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d7e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d104      	bne.n	800d7f4 <find_volume+0x2ec>
 800d7ea:	230d      	movs	r3, #13
 800d7ec:	e105      	b.n	800d9fa <find_volume+0x4f2>
 800d7ee:	bf00      	nop
 800d7f0:	200020fc 	.word	0x200020fc

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d7f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d7f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7f8:	4413      	add	r3, r2
 800d7fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7fc:	8911      	ldrh	r1, [r2, #8]
 800d7fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d800:	8992      	ldrh	r2, [r2, #12]
 800d802:	0952      	lsrs	r2, r2, #5
 800d804:	b292      	uxth	r2, r2
 800d806:	fbb1 f2f2 	udiv	r2, r1, r2
 800d80a:	b292      	uxth	r2, r2
 800d80c:	4413      	add	r3, r2
 800d80e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d810:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d814:	429a      	cmp	r2, r3
 800d816:	d201      	bcs.n	800d81c <find_volume+0x314>
 800d818:	230d      	movs	r3, #13
 800d81a:	e0ee      	b.n	800d9fa <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d81c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d820:	1ad3      	subs	r3, r2, r3
 800d822:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d824:	8952      	ldrh	r2, [r2, #10]
 800d826:	fbb3 f3f2 	udiv	r3, r3, r2
 800d82a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d101      	bne.n	800d836 <find_volume+0x32e>
 800d832:	230d      	movs	r3, #13
 800d834:	e0e1      	b.n	800d9fa <find_volume+0x4f2>
		fmt = FS_FAT32;
 800d836:	2303      	movs	r3, #3
 800d838:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d842:	4293      	cmp	r3, r2
 800d844:	d802      	bhi.n	800d84c <find_volume+0x344>
 800d846:	2302      	movs	r3, #2
 800d848:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d852:	4293      	cmp	r3, r2
 800d854:	d802      	bhi.n	800d85c <find_volume+0x354>
 800d856:	2301      	movs	r3, #1
 800d858:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85e:	1c9a      	adds	r2, r3, #2
 800d860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d862:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d866:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d868:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d86a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d86c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d86e:	441a      	add	r2, r3
 800d870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d872:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d874:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d878:	441a      	add	r2, r3
 800d87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d87c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800d87e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d882:	2b03      	cmp	r3, #3
 800d884:	d11e      	bne.n	800d8c4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d888:	3334      	adds	r3, #52	; 0x34
 800d88a:	332a      	adds	r3, #42	; 0x2a
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7fe fb63 	bl	800bf58 <ld_word>
 800d892:	4603      	mov	r3, r0
 800d894:	2b00      	cmp	r3, #0
 800d896:	d001      	beq.n	800d89c <find_volume+0x394>
 800d898:	230d      	movs	r3, #13
 800d89a:	e0ae      	b.n	800d9fa <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d89e:	891b      	ldrh	r3, [r3, #8]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d001      	beq.n	800d8a8 <find_volume+0x3a0>
 800d8a4:	230d      	movs	r3, #13
 800d8a6:	e0a8      	b.n	800d9fa <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8aa:	3334      	adds	r3, #52	; 0x34
 800d8ac:	332c      	adds	r3, #44	; 0x2c
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7fe fb6a 	bl	800bf88 <ld_dword>
 800d8b4:	4602      	mov	r2, r0
 800d8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8bc:	699b      	ldr	r3, [r3, #24]
 800d8be:	009b      	lsls	r3, r3, #2
 800d8c0:	647b      	str	r3, [r7, #68]	; 0x44
 800d8c2:	e01f      	b.n	800d904 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c6:	891b      	ldrh	r3, [r3, #8]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d101      	bne.n	800d8d0 <find_volume+0x3c8>
 800d8cc:	230d      	movs	r3, #13
 800d8ce:	e094      	b.n	800d9fa <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8d6:	441a      	add	r2, r3
 800d8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8da:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d8dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d8e0:	2b02      	cmp	r3, #2
 800d8e2:	d103      	bne.n	800d8ec <find_volume+0x3e4>
 800d8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8e6:	699b      	ldr	r3, [r3, #24]
 800d8e8:	005b      	lsls	r3, r3, #1
 800d8ea:	e00a      	b.n	800d902 <find_volume+0x3fa>
 800d8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ee:	699a      	ldr	r2, [r3, #24]
 800d8f0:	4613      	mov	r3, r2
 800d8f2:	005b      	lsls	r3, r3, #1
 800d8f4:	4413      	add	r3, r2
 800d8f6:	085a      	lsrs	r2, r3, #1
 800d8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8fa:	699b      	ldr	r3, [r3, #24]
 800d8fc:	f003 0301 	and.w	r3, r3, #1
 800d900:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d902:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d906:	69da      	ldr	r2, [r3, #28]
 800d908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d90a:	899b      	ldrh	r3, [r3, #12]
 800d90c:	4619      	mov	r1, r3
 800d90e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d910:	440b      	add	r3, r1
 800d912:	3b01      	subs	r3, #1
 800d914:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d916:	8989      	ldrh	r1, [r1, #12]
 800d918:	fbb3 f3f1 	udiv	r3, r3, r1
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d201      	bcs.n	800d924 <find_volume+0x41c>
 800d920:	230d      	movs	r3, #13
 800d922:	e06a      	b.n	800d9fa <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d926:	f04f 32ff 	mov.w	r2, #4294967295
 800d92a:	615a      	str	r2, [r3, #20]
 800d92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d92e:	695a      	ldr	r2, [r3, #20]
 800d930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d932:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d936:	2280      	movs	r2, #128	; 0x80
 800d938:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d93a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d93e:	2b03      	cmp	r3, #3
 800d940:	d149      	bne.n	800d9d6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d944:	3334      	adds	r3, #52	; 0x34
 800d946:	3330      	adds	r3, #48	; 0x30
 800d948:	4618      	mov	r0, r3
 800d94a:	f7fe fb05 	bl	800bf58 <ld_word>
 800d94e:	4603      	mov	r3, r0
 800d950:	2b01      	cmp	r3, #1
 800d952:	d140      	bne.n	800d9d6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d956:	3301      	adds	r3, #1
 800d958:	4619      	mov	r1, r3
 800d95a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d95c:	f7fe fdac 	bl	800c4b8 <move_window>
 800d960:	4603      	mov	r3, r0
 800d962:	2b00      	cmp	r3, #0
 800d964:	d137      	bne.n	800d9d6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800d966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d968:	2200      	movs	r2, #0
 800d96a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d96e:	3334      	adds	r3, #52	; 0x34
 800d970:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d974:	4618      	mov	r0, r3
 800d976:	f7fe faef 	bl	800bf58 <ld_word>
 800d97a:	4603      	mov	r3, r0
 800d97c:	461a      	mov	r2, r3
 800d97e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d982:	429a      	cmp	r2, r3
 800d984:	d127      	bne.n	800d9d6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d988:	3334      	adds	r3, #52	; 0x34
 800d98a:	4618      	mov	r0, r3
 800d98c:	f7fe fafc 	bl	800bf88 <ld_dword>
 800d990:	4603      	mov	r3, r0
 800d992:	4a1c      	ldr	r2, [pc, #112]	; (800da04 <find_volume+0x4fc>)
 800d994:	4293      	cmp	r3, r2
 800d996:	d11e      	bne.n	800d9d6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d99a:	3334      	adds	r3, #52	; 0x34
 800d99c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7fe faf1 	bl	800bf88 <ld_dword>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	4a17      	ldr	r2, [pc, #92]	; (800da08 <find_volume+0x500>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d113      	bne.n	800d9d6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9b0:	3334      	adds	r3, #52	; 0x34
 800d9b2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7fe fae6 	bl	800bf88 <ld_dword>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c4:	3334      	adds	r3, #52	; 0x34
 800d9c6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f7fe fadc 	bl	800bf88 <ld_dword>
 800d9d0:	4602      	mov	r2, r0
 800d9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d9dc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d9de:	4b0b      	ldr	r3, [pc, #44]	; (800da0c <find_volume+0x504>)
 800d9e0:	881b      	ldrh	r3, [r3, #0]
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	b29a      	uxth	r2, r3
 800d9e6:	4b09      	ldr	r3, [pc, #36]	; (800da0c <find_volume+0x504>)
 800d9e8:	801a      	strh	r2, [r3, #0]
 800d9ea:	4b08      	ldr	r3, [pc, #32]	; (800da0c <find_volume+0x504>)
 800d9ec:	881a      	ldrh	r2, [r3, #0]
 800d9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d9f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d9f4:	f7fe fcf8 	bl	800c3e8 <clear_lock>
#endif
	return FR_OK;
 800d9f8:	2300      	movs	r3, #0
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3758      	adds	r7, #88	; 0x58
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}
 800da02:	bf00      	nop
 800da04:	41615252 	.word	0x41615252
 800da08:	61417272 	.word	0x61417272
 800da0c:	20002100 	.word	0x20002100

0800da10 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b084      	sub	sp, #16
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800da1a:	2309      	movs	r3, #9
 800da1c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d01c      	beq.n	800da5e <validate+0x4e>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d018      	beq.n	800da5e <validate+0x4e>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d013      	beq.n	800da5e <validate+0x4e>
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	889a      	ldrh	r2, [r3, #4]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	88db      	ldrh	r3, [r3, #6]
 800da40:	429a      	cmp	r2, r3
 800da42:	d10c      	bne.n	800da5e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	785b      	ldrb	r3, [r3, #1]
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7fe f9e6 	bl	800be1c <disk_status>
 800da50:	4603      	mov	r3, r0
 800da52:	f003 0301 	and.w	r3, r3, #1
 800da56:	2b00      	cmp	r3, #0
 800da58:	d101      	bne.n	800da5e <validate+0x4e>
			res = FR_OK;
 800da5a:	2300      	movs	r3, #0
 800da5c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800da5e:	7bfb      	ldrb	r3, [r7, #15]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d102      	bne.n	800da6a <validate+0x5a>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	e000      	b.n	800da6c <validate+0x5c>
 800da6a:	2300      	movs	r3, #0
 800da6c:	683a      	ldr	r2, [r7, #0]
 800da6e:	6013      	str	r3, [r2, #0]
	return res;
 800da70:	7bfb      	ldrb	r3, [r7, #15]
}
 800da72:	4618      	mov	r0, r3
 800da74:	3710      	adds	r7, #16
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
	...

0800da7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b088      	sub	sp, #32
 800da80:	af00      	add	r7, sp, #0
 800da82:	60f8      	str	r0, [r7, #12]
 800da84:	60b9      	str	r1, [r7, #8]
 800da86:	4613      	mov	r3, r2
 800da88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800da8e:	f107 0310 	add.w	r3, r7, #16
 800da92:	4618      	mov	r0, r3
 800da94:	f7ff fc9e 	bl	800d3d4 <get_ldnumber>
 800da98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800da9a:	69fb      	ldr	r3, [r7, #28]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	da01      	bge.n	800daa4 <f_mount+0x28>
 800daa0:	230b      	movs	r3, #11
 800daa2:	e02b      	b.n	800dafc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800daa4:	4a17      	ldr	r2, [pc, #92]	; (800db04 <f_mount+0x88>)
 800daa6:	69fb      	ldr	r3, [r7, #28]
 800daa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d005      	beq.n	800dac0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800dab4:	69b8      	ldr	r0, [r7, #24]
 800dab6:	f7fe fc97 	bl	800c3e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800daba:	69bb      	ldr	r3, [r7, #24]
 800dabc:	2200      	movs	r2, #0
 800dabe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d002      	beq.n	800dacc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	2200      	movs	r2, #0
 800daca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	490d      	ldr	r1, [pc, #52]	; (800db04 <f_mount+0x88>)
 800dad0:	69fb      	ldr	r3, [r7, #28]
 800dad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d002      	beq.n	800dae2 <f_mount+0x66>
 800dadc:	79fb      	ldrb	r3, [r7, #7]
 800dade:	2b01      	cmp	r3, #1
 800dae0:	d001      	beq.n	800dae6 <f_mount+0x6a>
 800dae2:	2300      	movs	r3, #0
 800dae4:	e00a      	b.n	800dafc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dae6:	f107 010c 	add.w	r1, r7, #12
 800daea:	f107 0308 	add.w	r3, r7, #8
 800daee:	2200      	movs	r2, #0
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7ff fd09 	bl	800d508 <find_volume>
 800daf6:	4603      	mov	r3, r0
 800daf8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800dafa:	7dfb      	ldrb	r3, [r7, #23]
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3720      	adds	r7, #32
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}
 800db04:	200020fc 	.word	0x200020fc

0800db08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b098      	sub	sp, #96	; 0x60
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	4613      	mov	r3, r2
 800db14:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d101      	bne.n	800db20 <f_open+0x18>
 800db1c:	2309      	movs	r3, #9
 800db1e:	e1bb      	b.n	800de98 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800db20:	79fb      	ldrb	r3, [r7, #7]
 800db22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db26:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800db28:	79fa      	ldrb	r2, [r7, #7]
 800db2a:	f107 0110 	add.w	r1, r7, #16
 800db2e:	f107 0308 	add.w	r3, r7, #8
 800db32:	4618      	mov	r0, r3
 800db34:	f7ff fce8 	bl	800d508 <find_volume>
 800db38:	4603      	mov	r3, r0
 800db3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800db3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db42:	2b00      	cmp	r3, #0
 800db44:	f040 819f 	bne.w	800de86 <f_open+0x37e>
		dj.obj.fs = fs;
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800db4c:	68ba      	ldr	r2, [r7, #8]
 800db4e:	f107 0314 	add.w	r3, r7, #20
 800db52:	4611      	mov	r1, r2
 800db54:	4618      	mov	r0, r3
 800db56:	f7ff fbc7 	bl	800d2e8 <follow_path>
 800db5a:	4603      	mov	r3, r0
 800db5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800db60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db64:	2b00      	cmp	r3, #0
 800db66:	d11a      	bne.n	800db9e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800db68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800db6c:	b25b      	sxtb	r3, r3
 800db6e:	2b00      	cmp	r3, #0
 800db70:	da03      	bge.n	800db7a <f_open+0x72>
				res = FR_INVALID_NAME;
 800db72:	2306      	movs	r3, #6
 800db74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800db78:	e011      	b.n	800db9e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800db7a:	79fb      	ldrb	r3, [r7, #7]
 800db7c:	f023 0301 	bic.w	r3, r3, #1
 800db80:	2b00      	cmp	r3, #0
 800db82:	bf14      	ite	ne
 800db84:	2301      	movne	r3, #1
 800db86:	2300      	moveq	r3, #0
 800db88:	b2db      	uxtb	r3, r3
 800db8a:	461a      	mov	r2, r3
 800db8c:	f107 0314 	add.w	r3, r7, #20
 800db90:	4611      	mov	r1, r2
 800db92:	4618      	mov	r0, r3
 800db94:	f7fe fae0 	bl	800c158 <chk_lock>
 800db98:	4603      	mov	r3, r0
 800db9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800db9e:	79fb      	ldrb	r3, [r7, #7]
 800dba0:	f003 031c 	and.w	r3, r3, #28
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d07f      	beq.n	800dca8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800dba8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d017      	beq.n	800dbe0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dbb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbb4:	2b04      	cmp	r3, #4
 800dbb6:	d10e      	bne.n	800dbd6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dbb8:	f7fe fb2a 	bl	800c210 <enq_lock>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d006      	beq.n	800dbd0 <f_open+0xc8>
 800dbc2:	f107 0314 	add.w	r3, r7, #20
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7ff fa92 	bl	800d0f0 <dir_register>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	e000      	b.n	800dbd2 <f_open+0xca>
 800dbd0:	2312      	movs	r3, #18
 800dbd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dbd6:	79fb      	ldrb	r3, [r7, #7]
 800dbd8:	f043 0308 	orr.w	r3, r3, #8
 800dbdc:	71fb      	strb	r3, [r7, #7]
 800dbde:	e010      	b.n	800dc02 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dbe0:	7ebb      	ldrb	r3, [r7, #26]
 800dbe2:	f003 0311 	and.w	r3, r3, #17
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d003      	beq.n	800dbf2 <f_open+0xea>
					res = FR_DENIED;
 800dbea:	2307      	movs	r3, #7
 800dbec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dbf0:	e007      	b.n	800dc02 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dbf2:	79fb      	ldrb	r3, [r7, #7]
 800dbf4:	f003 0304 	and.w	r3, r3, #4
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d002      	beq.n	800dc02 <f_open+0xfa>
 800dbfc:	2308      	movs	r3, #8
 800dbfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dc02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d168      	bne.n	800dcdc <f_open+0x1d4>
 800dc0a:	79fb      	ldrb	r3, [r7, #7]
 800dc0c:	f003 0308 	and.w	r3, r3, #8
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d063      	beq.n	800dcdc <f_open+0x1d4>
				dw = GET_FATTIME();
 800dc14:	f7fa fdbe 	bl	8008794 <get_fattime>
 800dc18:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800dc1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc1c:	330e      	adds	r3, #14
 800dc1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7fe f9ef 	bl	800c004 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dc26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc28:	3316      	adds	r3, #22
 800dc2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7fe f9e9 	bl	800c004 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800dc32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc34:	330b      	adds	r3, #11
 800dc36:	2220      	movs	r2, #32
 800dc38:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc3e:	4611      	mov	r1, r2
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7ff f9c1 	bl	800cfc8 <ld_clust>
 800dc46:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7ff f9d9 	bl	800d006 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dc54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc56:	331c      	adds	r3, #28
 800dc58:	2100      	movs	r1, #0
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7fe f9d2 	bl	800c004 <st_dword>
					fs->wflag = 1;
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	2201      	movs	r2, #1
 800dc64:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dc66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d037      	beq.n	800dcdc <f_open+0x1d4>
						dw = fs->winsect;
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc70:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800dc72:	f107 0314 	add.w	r3, r7, #20
 800dc76:	2200      	movs	r2, #0
 800dc78:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7fe fec9 	bl	800ca12 <remove_chain>
 800dc80:	4603      	mov	r3, r0
 800dc82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800dc86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d126      	bne.n	800dcdc <f_open+0x1d4>
							res = move_window(fs, dw);
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7fe fc10 	bl	800c4b8 <move_window>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dca2:	3a01      	subs	r2, #1
 800dca4:	611a      	str	r2, [r3, #16]
 800dca6:	e019      	b.n	800dcdc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dca8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d115      	bne.n	800dcdc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dcb0:	7ebb      	ldrb	r3, [r7, #26]
 800dcb2:	f003 0310 	and.w	r3, r3, #16
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d003      	beq.n	800dcc2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800dcba:	2304      	movs	r3, #4
 800dcbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dcc0:	e00c      	b.n	800dcdc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dcc2:	79fb      	ldrb	r3, [r7, #7]
 800dcc4:	f003 0302 	and.w	r3, r3, #2
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d007      	beq.n	800dcdc <f_open+0x1d4>
 800dccc:	7ebb      	ldrb	r3, [r7, #26]
 800dcce:	f003 0301 	and.w	r3, r3, #1
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d002      	beq.n	800dcdc <f_open+0x1d4>
						res = FR_DENIED;
 800dcd6:	2307      	movs	r3, #7
 800dcd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800dcdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d128      	bne.n	800dd36 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dce4:	79fb      	ldrb	r3, [r7, #7]
 800dce6:	f003 0308 	and.w	r3, r3, #8
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d003      	beq.n	800dcf6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800dcee:	79fb      	ldrb	r3, [r7, #7]
 800dcf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcf4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800dcfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dd04:	79fb      	ldrb	r3, [r7, #7]
 800dd06:	f023 0301 	bic.w	r3, r3, #1
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	bf14      	ite	ne
 800dd0e:	2301      	movne	r3, #1
 800dd10:	2300      	moveq	r3, #0
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	461a      	mov	r2, r3
 800dd16:	f107 0314 	add.w	r3, r7, #20
 800dd1a:	4611      	mov	r1, r2
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7fe fa99 	bl	800c254 <inc_lock>
 800dd22:	4602      	mov	r2, r0
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	691b      	ldr	r3, [r3, #16]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d102      	bne.n	800dd36 <f_open+0x22e>
 800dd30:	2302      	movs	r3, #2
 800dd32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800dd36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	f040 80a3 	bne.w	800de86 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd44:	4611      	mov	r1, r2
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7ff f93e 	bl	800cfc8 <ld_clust>
 800dd4c:	4602      	mov	r2, r0
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dd52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd54:	331c      	adds	r3, #28
 800dd56:	4618      	mov	r0, r3
 800dd58:	f7fe f916 	bl	800bf88 <ld_dword>
 800dd5c:	4602      	mov	r2, r0
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	2200      	movs	r2, #0
 800dd66:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dd68:	693a      	ldr	r2, [r7, #16]
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	88da      	ldrh	r2, [r3, #6]
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	79fa      	ldrb	r2, [r7, #7]
 800dd7a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	2200      	movs	r2, #0
 800dd86:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	3330      	adds	r3, #48	; 0x30
 800dd92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dd96:	2100      	movs	r1, #0
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7fe f980 	bl	800c09e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dd9e:	79fb      	ldrb	r3, [r7, #7]
 800dda0:	f003 0320 	and.w	r3, r3, #32
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d06e      	beq.n	800de86 <f_open+0x37e>
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	68db      	ldr	r3, [r3, #12]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d06a      	beq.n	800de86 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	68da      	ldr	r2, [r3, #12]
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	895b      	ldrh	r3, [r3, #10]
 800ddbc:	461a      	mov	r2, r3
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	899b      	ldrh	r3, [r3, #12]
 800ddc2:	fb03 f302 	mul.w	r3, r3, r2
 800ddc6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	689b      	ldr	r3, [r3, #8]
 800ddcc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	68db      	ldr	r3, [r3, #12]
 800ddd2:	657b      	str	r3, [r7, #84]	; 0x54
 800ddd4:	e016      	b.n	800de04 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7fe fc29 	bl	800c632 <get_fat>
 800dde0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800dde2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dde4:	2b01      	cmp	r3, #1
 800dde6:	d802      	bhi.n	800ddee <f_open+0x2e6>
 800dde8:	2302      	movs	r3, #2
 800ddea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ddee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ddf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddf4:	d102      	bne.n	800ddfc <f_open+0x2f4>
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ddfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ddfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de00:	1ad3      	subs	r3, r2, r3
 800de02:	657b      	str	r3, [r7, #84]	; 0x54
 800de04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d103      	bne.n	800de14 <f_open+0x30c>
 800de0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800de0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de10:	429a      	cmp	r2, r3
 800de12:	d8e0      	bhi.n	800ddd6 <f_open+0x2ce>
				}
				fp->clust = clst;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800de18:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800de1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d131      	bne.n	800de86 <f_open+0x37e>
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	899b      	ldrh	r3, [r3, #12]
 800de26:	461a      	mov	r2, r3
 800de28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de2a:	fbb3 f1f2 	udiv	r1, r3, r2
 800de2e:	fb02 f201 	mul.w	r2, r2, r1
 800de32:	1a9b      	subs	r3, r3, r2
 800de34:	2b00      	cmp	r3, #0
 800de36:	d026      	beq.n	800de86 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800de3c:	4618      	mov	r0, r3
 800de3e:	f7fe fbd9 	bl	800c5f4 <clust2sect>
 800de42:	6478      	str	r0, [r7, #68]	; 0x44
 800de44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de46:	2b00      	cmp	r3, #0
 800de48:	d103      	bne.n	800de52 <f_open+0x34a>
						res = FR_INT_ERR;
 800de4a:	2302      	movs	r3, #2
 800de4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800de50:	e019      	b.n	800de86 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	899b      	ldrh	r3, [r3, #12]
 800de56:	461a      	mov	r2, r3
 800de58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de5a:	fbb3 f2f2 	udiv	r2, r3, r2
 800de5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de60:	441a      	add	r2, r3
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	7858      	ldrb	r0, [r3, #1]
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	6a1a      	ldr	r2, [r3, #32]
 800de74:	2301      	movs	r3, #1
 800de76:	f7fe f811 	bl	800be9c <disk_read>
 800de7a:	4603      	mov	r3, r0
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d002      	beq.n	800de86 <f_open+0x37e>
 800de80:	2301      	movs	r3, #1
 800de82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800de86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d002      	beq.n	800de94 <f_open+0x38c>
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	2200      	movs	r2, #0
 800de92:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800de94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800de98:	4618      	mov	r0, r3
 800de9a:	3760      	adds	r7, #96	; 0x60
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b08e      	sub	sp, #56	; 0x38
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	60f8      	str	r0, [r7, #12]
 800dea8:	60b9      	str	r1, [r7, #8]
 800deaa:	607a      	str	r2, [r7, #4]
 800deac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	2200      	movs	r2, #0
 800deb6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f107 0214 	add.w	r2, r7, #20
 800debe:	4611      	mov	r1, r2
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7ff fda5 	bl	800da10 <validate>
 800dec6:	4603      	mov	r3, r0
 800dec8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800decc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d107      	bne.n	800dee4 <f_read+0x44>
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	7d5b      	ldrb	r3, [r3, #21]
 800ded8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dedc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d002      	beq.n	800deea <f_read+0x4a>
 800dee4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dee8:	e135      	b.n	800e156 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	7d1b      	ldrb	r3, [r3, #20]
 800deee:	f003 0301 	and.w	r3, r3, #1
 800def2:	2b00      	cmp	r3, #0
 800def4:	d101      	bne.n	800defa <f_read+0x5a>
 800def6:	2307      	movs	r3, #7
 800def8:	e12d      	b.n	800e156 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	68da      	ldr	r2, [r3, #12]
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	699b      	ldr	r3, [r3, #24]
 800df02:	1ad3      	subs	r3, r2, r3
 800df04:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800df06:	687a      	ldr	r2, [r7, #4]
 800df08:	6a3b      	ldr	r3, [r7, #32]
 800df0a:	429a      	cmp	r2, r3
 800df0c:	f240 811e 	bls.w	800e14c <f_read+0x2ac>
 800df10:	6a3b      	ldr	r3, [r7, #32]
 800df12:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800df14:	e11a      	b.n	800e14c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	699b      	ldr	r3, [r3, #24]
 800df1a:	697a      	ldr	r2, [r7, #20]
 800df1c:	8992      	ldrh	r2, [r2, #12]
 800df1e:	fbb3 f1f2 	udiv	r1, r3, r2
 800df22:	fb02 f201 	mul.w	r2, r2, r1
 800df26:	1a9b      	subs	r3, r3, r2
 800df28:	2b00      	cmp	r3, #0
 800df2a:	f040 80d5 	bne.w	800e0d8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	699b      	ldr	r3, [r3, #24]
 800df32:	697a      	ldr	r2, [r7, #20]
 800df34:	8992      	ldrh	r2, [r2, #12]
 800df36:	fbb3 f3f2 	udiv	r3, r3, r2
 800df3a:	697a      	ldr	r2, [r7, #20]
 800df3c:	8952      	ldrh	r2, [r2, #10]
 800df3e:	3a01      	subs	r2, #1
 800df40:	4013      	ands	r3, r2
 800df42:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d12f      	bne.n	800dfaa <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	699b      	ldr	r3, [r3, #24]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d103      	bne.n	800df5a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	689b      	ldr	r3, [r3, #8]
 800df56:	633b      	str	r3, [r7, #48]	; 0x30
 800df58:	e013      	b.n	800df82 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d007      	beq.n	800df72 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	699b      	ldr	r3, [r3, #24]
 800df66:	4619      	mov	r1, r3
 800df68:	68f8      	ldr	r0, [r7, #12]
 800df6a:	f7fe fe4f 	bl	800cc0c <clmt_clust>
 800df6e:	6338      	str	r0, [r7, #48]	; 0x30
 800df70:	e007      	b.n	800df82 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800df72:	68fa      	ldr	r2, [r7, #12]
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	69db      	ldr	r3, [r3, #28]
 800df78:	4619      	mov	r1, r3
 800df7a:	4610      	mov	r0, r2
 800df7c:	f7fe fb59 	bl	800c632 <get_fat>
 800df80:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800df82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df84:	2b01      	cmp	r3, #1
 800df86:	d804      	bhi.n	800df92 <f_read+0xf2>
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	2202      	movs	r2, #2
 800df8c:	755a      	strb	r2, [r3, #21]
 800df8e:	2302      	movs	r3, #2
 800df90:	e0e1      	b.n	800e156 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800df92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df98:	d104      	bne.n	800dfa4 <f_read+0x104>
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2201      	movs	r2, #1
 800df9e:	755a      	strb	r2, [r3, #21]
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	e0d8      	b.n	800e156 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfa8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dfaa:	697a      	ldr	r2, [r7, #20]
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	69db      	ldr	r3, [r3, #28]
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	4610      	mov	r0, r2
 800dfb4:	f7fe fb1e 	bl	800c5f4 <clust2sect>
 800dfb8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dfba:	69bb      	ldr	r3, [r7, #24]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d104      	bne.n	800dfca <f_read+0x12a>
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	2202      	movs	r2, #2
 800dfc4:	755a      	strb	r2, [r3, #21]
 800dfc6:	2302      	movs	r3, #2
 800dfc8:	e0c5      	b.n	800e156 <f_read+0x2b6>
			sect += csect;
 800dfca:	69ba      	ldr	r2, [r7, #24]
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	4413      	add	r3, r2
 800dfd0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	899b      	ldrh	r3, [r3, #12]
 800dfd6:	461a      	mov	r2, r3
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	fbb3 f3f2 	udiv	r3, r3, r2
 800dfde:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800dfe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d041      	beq.n	800e06a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dfe6:	69fa      	ldr	r2, [r7, #28]
 800dfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfea:	4413      	add	r3, r2
 800dfec:	697a      	ldr	r2, [r7, #20]
 800dfee:	8952      	ldrh	r2, [r2, #10]
 800dff0:	4293      	cmp	r3, r2
 800dff2:	d905      	bls.n	800e000 <f_read+0x160>
					cc = fs->csize - csect;
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	895b      	ldrh	r3, [r3, #10]
 800dff8:	461a      	mov	r2, r3
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	1ad3      	subs	r3, r2, r3
 800dffe:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	7858      	ldrb	r0, [r3, #1]
 800e004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e006:	69ba      	ldr	r2, [r7, #24]
 800e008:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e00a:	f7fd ff47 	bl	800be9c <disk_read>
 800e00e:	4603      	mov	r3, r0
 800e010:	2b00      	cmp	r3, #0
 800e012:	d004      	beq.n	800e01e <f_read+0x17e>
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	2201      	movs	r2, #1
 800e018:	755a      	strb	r2, [r3, #21]
 800e01a:	2301      	movs	r3, #1
 800e01c:	e09b      	b.n	800e156 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	7d1b      	ldrb	r3, [r3, #20]
 800e022:	b25b      	sxtb	r3, r3
 800e024:	2b00      	cmp	r3, #0
 800e026:	da18      	bge.n	800e05a <f_read+0x1ba>
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	6a1a      	ldr	r2, [r3, #32]
 800e02c:	69bb      	ldr	r3, [r7, #24]
 800e02e:	1ad3      	subs	r3, r2, r3
 800e030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e032:	429a      	cmp	r2, r3
 800e034:	d911      	bls.n	800e05a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	6a1a      	ldr	r2, [r3, #32]
 800e03a:	69bb      	ldr	r3, [r7, #24]
 800e03c:	1ad3      	subs	r3, r2, r3
 800e03e:	697a      	ldr	r2, [r7, #20]
 800e040:	8992      	ldrh	r2, [r2, #12]
 800e042:	fb02 f303 	mul.w	r3, r2, r3
 800e046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e048:	18d0      	adds	r0, r2, r3
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	899b      	ldrh	r3, [r3, #12]
 800e054:	461a      	mov	r2, r3
 800e056:	f7fe f801 	bl	800c05c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	899b      	ldrh	r3, [r3, #12]
 800e05e:	461a      	mov	r2, r3
 800e060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e062:	fb02 f303 	mul.w	r3, r2, r3
 800e066:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e068:	e05c      	b.n	800e124 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	6a1b      	ldr	r3, [r3, #32]
 800e06e:	69ba      	ldr	r2, [r7, #24]
 800e070:	429a      	cmp	r2, r3
 800e072:	d02e      	beq.n	800e0d2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	7d1b      	ldrb	r3, [r3, #20]
 800e078:	b25b      	sxtb	r3, r3
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	da18      	bge.n	800e0b0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	7858      	ldrb	r0, [r3, #1]
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	6a1a      	ldr	r2, [r3, #32]
 800e08c:	2301      	movs	r3, #1
 800e08e:	f7fd ff25 	bl	800bedc <disk_write>
 800e092:	4603      	mov	r3, r0
 800e094:	2b00      	cmp	r3, #0
 800e096:	d004      	beq.n	800e0a2 <f_read+0x202>
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	2201      	movs	r2, #1
 800e09c:	755a      	strb	r2, [r3, #21]
 800e09e:	2301      	movs	r3, #1
 800e0a0:	e059      	b.n	800e156 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	7d1b      	ldrb	r3, [r3, #20]
 800e0a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0aa:	b2da      	uxtb	r2, r3
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e0b0:	697b      	ldr	r3, [r7, #20]
 800e0b2:	7858      	ldrb	r0, [r3, #1]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	69ba      	ldr	r2, [r7, #24]
 800e0be:	f7fd feed 	bl	800be9c <disk_read>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d004      	beq.n	800e0d2 <f_read+0x232>
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	755a      	strb	r2, [r3, #21]
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	e041      	b.n	800e156 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	69ba      	ldr	r2, [r7, #24]
 800e0d6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	899b      	ldrh	r3, [r3, #12]
 800e0dc:	4618      	mov	r0, r3
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	699b      	ldr	r3, [r3, #24]
 800e0e2:	697a      	ldr	r2, [r7, #20]
 800e0e4:	8992      	ldrh	r2, [r2, #12]
 800e0e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800e0ea:	fb02 f201 	mul.w	r2, r2, r1
 800e0ee:	1a9b      	subs	r3, r3, r2
 800e0f0:	1ac3      	subs	r3, r0, r3
 800e0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e0f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d901      	bls.n	800e100 <f_read+0x260>
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	699b      	ldr	r3, [r3, #24]
 800e10a:	697a      	ldr	r2, [r7, #20]
 800e10c:	8992      	ldrh	r2, [r2, #12]
 800e10e:	fbb3 f0f2 	udiv	r0, r3, r2
 800e112:	fb02 f200 	mul.w	r2, r2, r0
 800e116:	1a9b      	subs	r3, r3, r2
 800e118:	440b      	add	r3, r1
 800e11a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e11c:	4619      	mov	r1, r3
 800e11e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e120:	f7fd ff9c 	bl	800c05c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e128:	4413      	add	r3, r2
 800e12a:	627b      	str	r3, [r7, #36]	; 0x24
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	699a      	ldr	r2, [r3, #24]
 800e130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e132:	441a      	add	r2, r3
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	619a      	str	r2, [r3, #24]
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	681a      	ldr	r2, [r3, #0]
 800e13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e13e:	441a      	add	r2, r3
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	601a      	str	r2, [r3, #0]
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e148:	1ad3      	subs	r3, r2, r3
 800e14a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	f47f aee1 	bne.w	800df16 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e154:	2300      	movs	r3, #0
}
 800e156:	4618      	mov	r0, r3
 800e158:	3738      	adds	r7, #56	; 0x38
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}

0800e15e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e15e:	b580      	push	{r7, lr}
 800e160:	b086      	sub	sp, #24
 800e162:	af00      	add	r7, sp, #0
 800e164:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f107 0208 	add.w	r2, r7, #8
 800e16c:	4611      	mov	r1, r2
 800e16e:	4618      	mov	r0, r3
 800e170:	f7ff fc4e 	bl	800da10 <validate>
 800e174:	4603      	mov	r3, r0
 800e176:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e178:	7dfb      	ldrb	r3, [r7, #23]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d168      	bne.n	800e250 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	7d1b      	ldrb	r3, [r3, #20]
 800e182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e186:	2b00      	cmp	r3, #0
 800e188:	d062      	beq.n	800e250 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	7d1b      	ldrb	r3, [r3, #20]
 800e18e:	b25b      	sxtb	r3, r3
 800e190:	2b00      	cmp	r3, #0
 800e192:	da15      	bge.n	800e1c0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	7858      	ldrb	r0, [r3, #1]
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6a1a      	ldr	r2, [r3, #32]
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	f7fd fe9a 	bl	800bedc <disk_write>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d001      	beq.n	800e1b2 <f_sync+0x54>
 800e1ae:	2301      	movs	r3, #1
 800e1b0:	e04f      	b.n	800e252 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	7d1b      	ldrb	r3, [r3, #20]
 800e1b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1ba:	b2da      	uxtb	r2, r3
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e1c0:	f7fa fae8 	bl	8008794 <get_fattime>
 800e1c4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e1c6:	68ba      	ldr	r2, [r7, #8]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	4610      	mov	r0, r2
 800e1d0:	f7fe f972 	bl	800c4b8 <move_window>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e1d8:	7dfb      	ldrb	r3, [r7, #23]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d138      	bne.n	800e250 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1e2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	330b      	adds	r3, #11
 800e1e8:	781a      	ldrb	r2, [r3, #0]
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	330b      	adds	r3, #11
 800e1ee:	f042 0220 	orr.w	r2, r2, #32
 800e1f2:	b2d2      	uxtb	r2, r2
 800e1f4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6818      	ldr	r0, [r3, #0]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	689b      	ldr	r3, [r3, #8]
 800e1fe:	461a      	mov	r2, r3
 800e200:	68f9      	ldr	r1, [r7, #12]
 800e202:	f7fe ff00 	bl	800d006 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	f103 021c 	add.w	r2, r3, #28
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	68db      	ldr	r3, [r3, #12]
 800e210:	4619      	mov	r1, r3
 800e212:	4610      	mov	r0, r2
 800e214:	f7fd fef6 	bl	800c004 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	3316      	adds	r3, #22
 800e21c:	6939      	ldr	r1, [r7, #16]
 800e21e:	4618      	mov	r0, r3
 800e220:	f7fd fef0 	bl	800c004 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	3312      	adds	r3, #18
 800e228:	2100      	movs	r1, #0
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7fd fecf 	bl	800bfce <st_word>
					fs->wflag = 1;
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	2201      	movs	r2, #1
 800e234:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	4618      	mov	r0, r3
 800e23a:	f7fe f96b 	bl	800c514 <sync_fs>
 800e23e:	4603      	mov	r3, r0
 800e240:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	7d1b      	ldrb	r3, [r3, #20]
 800e246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e24a:	b2da      	uxtb	r2, r3
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e250:	7dfb      	ldrb	r3, [r7, #23]
}
 800e252:	4618      	mov	r0, r3
 800e254:	3718      	adds	r7, #24
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}

0800e25a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e25a:	b580      	push	{r7, lr}
 800e25c:	b084      	sub	sp, #16
 800e25e:	af00      	add	r7, sp, #0
 800e260:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f7ff ff7b 	bl	800e15e <f_sync>
 800e268:	4603      	mov	r3, r0
 800e26a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e26c:	7bfb      	ldrb	r3, [r7, #15]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d118      	bne.n	800e2a4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f107 0208 	add.w	r2, r7, #8
 800e278:	4611      	mov	r1, r2
 800e27a:	4618      	mov	r0, r3
 800e27c:	f7ff fbc8 	bl	800da10 <validate>
 800e280:	4603      	mov	r3, r0
 800e282:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e284:	7bfb      	ldrb	r3, [r7, #15]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d10c      	bne.n	800e2a4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	691b      	ldr	r3, [r3, #16]
 800e28e:	4618      	mov	r0, r3
 800e290:	f7fe f86e 	bl	800c370 <dec_lock>
 800e294:	4603      	mov	r3, r0
 800e296:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e298:	7bfb      	ldrb	r3, [r7, #15]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d102      	bne.n	800e2a4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3710      	adds	r7, #16
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}

0800e2ae <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e2ae:	b580      	push	{r7, lr}
 800e2b0:	b090      	sub	sp, #64	; 0x40
 800e2b2:	af00      	add	r7, sp, #0
 800e2b4:	6078      	str	r0, [r7, #4]
 800e2b6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f107 0208 	add.w	r2, r7, #8
 800e2be:	4611      	mov	r1, r2
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f7ff fba5 	bl	800da10 <validate>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e2cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d103      	bne.n	800e2dc <f_lseek+0x2e>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	7d5b      	ldrb	r3, [r3, #21]
 800e2d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e2dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d002      	beq.n	800e2ea <f_lseek+0x3c>
 800e2e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e2e8:	e201      	b.n	800e6ee <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	f000 80d9 	beq.w	800e4a6 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2fa:	d15a      	bne.n	800e3b2 <f_lseek+0x104>
			tbl = fp->cltbl;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e300:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e304:	1d1a      	adds	r2, r3, #4
 800e306:	627a      	str	r2, [r7, #36]	; 0x24
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	617b      	str	r3, [r7, #20]
 800e30c:	2302      	movs	r3, #2
 800e30e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	689b      	ldr	r3, [r3, #8]
 800e314:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800e316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d03a      	beq.n	800e392 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e31e:	613b      	str	r3, [r7, #16]
 800e320:	2300      	movs	r3, #0
 800e322:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e326:	3302      	adds	r3, #2
 800e328:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800e32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e32c:	60fb      	str	r3, [r7, #12]
 800e32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e330:	3301      	adds	r3, #1
 800e332:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e338:	4618      	mov	r0, r3
 800e33a:	f7fe f97a 	bl	800c632 <get_fat>
 800e33e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e342:	2b01      	cmp	r3, #1
 800e344:	d804      	bhi.n	800e350 <f_lseek+0xa2>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2202      	movs	r2, #2
 800e34a:	755a      	strb	r2, [r3, #21]
 800e34c:	2302      	movs	r3, #2
 800e34e:	e1ce      	b.n	800e6ee <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e356:	d104      	bne.n	800e362 <f_lseek+0xb4>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2201      	movs	r2, #1
 800e35c:	755a      	strb	r2, [r3, #21]
 800e35e:	2301      	movs	r3, #1
 800e360:	e1c5      	b.n	800e6ee <f_lseek+0x440>
					} while (cl == pcl + 1);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	3301      	adds	r3, #1
 800e366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e368:	429a      	cmp	r2, r3
 800e36a:	d0de      	beq.n	800e32a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e36c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	429a      	cmp	r2, r3
 800e372:	d809      	bhi.n	800e388 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e376:	1d1a      	adds	r2, r3, #4
 800e378:	627a      	str	r2, [r7, #36]	; 0x24
 800e37a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e37c:	601a      	str	r2, [r3, #0]
 800e37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e380:	1d1a      	adds	r2, r3, #4
 800e382:	627a      	str	r2, [r7, #36]	; 0x24
 800e384:	693a      	ldr	r2, [r7, #16]
 800e386:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	699b      	ldr	r3, [r3, #24]
 800e38c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e38e:	429a      	cmp	r2, r3
 800e390:	d3c4      	bcc.n	800e31c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e398:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e39a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e39c:	697b      	ldr	r3, [r7, #20]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d803      	bhi.n	800e3aa <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	601a      	str	r2, [r3, #0]
 800e3a8:	e19f      	b.n	800e6ea <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e3aa:	2311      	movs	r3, #17
 800e3ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e3b0:	e19b      	b.n	800e6ea <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	68db      	ldr	r3, [r3, #12]
 800e3b6:	683a      	ldr	r2, [r7, #0]
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d902      	bls.n	800e3c2 <f_lseek+0x114>
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	68db      	ldr	r3, [r3, #12]
 800e3c0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	683a      	ldr	r2, [r7, #0]
 800e3c6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	f000 818d 	beq.w	800e6ea <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	3b01      	subs	r3, #1
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f7fe fc18 	bl	800cc0c <clmt_clust>
 800e3dc:	4602      	mov	r2, r0
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e3e2:	68ba      	ldr	r2, [r7, #8]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	69db      	ldr	r3, [r3, #28]
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	4610      	mov	r0, r2
 800e3ec:	f7fe f902 	bl	800c5f4 <clust2sect>
 800e3f0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e3f2:	69bb      	ldr	r3, [r7, #24]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d104      	bne.n	800e402 <f_lseek+0x154>
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2202      	movs	r2, #2
 800e3fc:	755a      	strb	r2, [r3, #21]
 800e3fe:	2302      	movs	r3, #2
 800e400:	e175      	b.n	800e6ee <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	3b01      	subs	r3, #1
 800e406:	68ba      	ldr	r2, [r7, #8]
 800e408:	8992      	ldrh	r2, [r2, #12]
 800e40a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e40e:	68ba      	ldr	r2, [r7, #8]
 800e410:	8952      	ldrh	r2, [r2, #10]
 800e412:	3a01      	subs	r2, #1
 800e414:	4013      	ands	r3, r2
 800e416:	69ba      	ldr	r2, [r7, #24]
 800e418:	4413      	add	r3, r2
 800e41a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	699b      	ldr	r3, [r3, #24]
 800e420:	68ba      	ldr	r2, [r7, #8]
 800e422:	8992      	ldrh	r2, [r2, #12]
 800e424:	fbb3 f1f2 	udiv	r1, r3, r2
 800e428:	fb02 f201 	mul.w	r2, r2, r1
 800e42c:	1a9b      	subs	r3, r3, r2
 800e42e:	2b00      	cmp	r3, #0
 800e430:	f000 815b 	beq.w	800e6ea <f_lseek+0x43c>
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6a1b      	ldr	r3, [r3, #32]
 800e438:	69ba      	ldr	r2, [r7, #24]
 800e43a:	429a      	cmp	r2, r3
 800e43c:	f000 8155 	beq.w	800e6ea <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	7d1b      	ldrb	r3, [r3, #20]
 800e444:	b25b      	sxtb	r3, r3
 800e446:	2b00      	cmp	r3, #0
 800e448:	da18      	bge.n	800e47c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	7858      	ldrb	r0, [r3, #1]
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6a1a      	ldr	r2, [r3, #32]
 800e458:	2301      	movs	r3, #1
 800e45a:	f7fd fd3f 	bl	800bedc <disk_write>
 800e45e:	4603      	mov	r3, r0
 800e460:	2b00      	cmp	r3, #0
 800e462:	d004      	beq.n	800e46e <f_lseek+0x1c0>
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2201      	movs	r2, #1
 800e468:	755a      	strb	r2, [r3, #21]
 800e46a:	2301      	movs	r3, #1
 800e46c:	e13f      	b.n	800e6ee <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	7d1b      	ldrb	r3, [r3, #20]
 800e472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e476:	b2da      	uxtb	r2, r3
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	7858      	ldrb	r0, [r3, #1]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e486:	2301      	movs	r3, #1
 800e488:	69ba      	ldr	r2, [r7, #24]
 800e48a:	f7fd fd07 	bl	800be9c <disk_read>
 800e48e:	4603      	mov	r3, r0
 800e490:	2b00      	cmp	r3, #0
 800e492:	d004      	beq.n	800e49e <f_lseek+0x1f0>
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2201      	movs	r2, #1
 800e498:	755a      	strb	r2, [r3, #21]
 800e49a:	2301      	movs	r3, #1
 800e49c:	e127      	b.n	800e6ee <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	69ba      	ldr	r2, [r7, #24]
 800e4a2:	621a      	str	r2, [r3, #32]
 800e4a4:	e121      	b.n	800e6ea <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	68db      	ldr	r3, [r3, #12]
 800e4aa:	683a      	ldr	r2, [r7, #0]
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d908      	bls.n	800e4c2 <f_lseek+0x214>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	7d1b      	ldrb	r3, [r3, #20]
 800e4b4:	f003 0302 	and.w	r3, r3, #2
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d102      	bne.n	800e4c2 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	68db      	ldr	r3, [r3, #12]
 800e4c0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	699b      	ldr	r3, [r3, #24]
 800e4c6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	637b      	str	r3, [r7, #52]	; 0x34
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e4d0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	f000 80b5 	beq.w	800e644 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	895b      	ldrh	r3, [r3, #10]
 800e4de:	461a      	mov	r2, r3
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	899b      	ldrh	r3, [r3, #12]
 800e4e4:	fb03 f302 	mul.w	r3, r3, r2
 800e4e8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e4ea:	6a3b      	ldr	r3, [r7, #32]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d01b      	beq.n	800e528 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	1e5a      	subs	r2, r3, #1
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	fbb2 f2f3 	udiv	r2, r2, r3
 800e4fa:	6a3b      	ldr	r3, [r7, #32]
 800e4fc:	1e59      	subs	r1, r3, #1
 800e4fe:	69fb      	ldr	r3, [r7, #28]
 800e500:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e504:	429a      	cmp	r2, r3
 800e506:	d30f      	bcc.n	800e528 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e508:	6a3b      	ldr	r3, [r7, #32]
 800e50a:	1e5a      	subs	r2, r3, #1
 800e50c:	69fb      	ldr	r3, [r7, #28]
 800e50e:	425b      	negs	r3, r3
 800e510:	401a      	ands	r2, r3
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	699b      	ldr	r3, [r3, #24]
 800e51a:	683a      	ldr	r2, [r7, #0]
 800e51c:	1ad3      	subs	r3, r2, r3
 800e51e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	69db      	ldr	r3, [r3, #28]
 800e524:	63bb      	str	r3, [r7, #56]	; 0x38
 800e526:	e022      	b.n	800e56e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	689b      	ldr	r3, [r3, #8]
 800e52c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e530:	2b00      	cmp	r3, #0
 800e532:	d119      	bne.n	800e568 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2100      	movs	r1, #0
 800e538:	4618      	mov	r0, r3
 800e53a:	f7fe facf 	bl	800cadc <create_chain>
 800e53e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e542:	2b01      	cmp	r3, #1
 800e544:	d104      	bne.n	800e550 <f_lseek+0x2a2>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2202      	movs	r2, #2
 800e54a:	755a      	strb	r2, [r3, #21]
 800e54c:	2302      	movs	r3, #2
 800e54e:	e0ce      	b.n	800e6ee <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e556:	d104      	bne.n	800e562 <f_lseek+0x2b4>
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2201      	movs	r2, #1
 800e55c:	755a      	strb	r2, [r3, #21]
 800e55e:	2301      	movs	r3, #1
 800e560:	e0c5      	b.n	800e6ee <f_lseek+0x440>
					fp->obj.sclust = clst;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e566:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e56c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e570:	2b00      	cmp	r3, #0
 800e572:	d067      	beq.n	800e644 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800e574:	e03a      	b.n	800e5ec <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800e576:	683a      	ldr	r2, [r7, #0]
 800e578:	69fb      	ldr	r3, [r7, #28]
 800e57a:	1ad3      	subs	r3, r2, r3
 800e57c:	603b      	str	r3, [r7, #0]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	699a      	ldr	r2, [r3, #24]
 800e582:	69fb      	ldr	r3, [r7, #28]
 800e584:	441a      	add	r2, r3
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	7d1b      	ldrb	r3, [r3, #20]
 800e58e:	f003 0302 	and.w	r3, r3, #2
 800e592:	2b00      	cmp	r3, #0
 800e594:	d00b      	beq.n	800e5ae <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7fe fa9e 	bl	800cadc <create_chain>
 800e5a0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d108      	bne.n	800e5ba <f_lseek+0x30c>
							ofs = 0; break;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	603b      	str	r3, [r7, #0]
 800e5ac:	e022      	b.n	800e5f4 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7fe f83d 	bl	800c632 <get_fat>
 800e5b8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5c0:	d104      	bne.n	800e5cc <f_lseek+0x31e>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	755a      	strb	r2, [r3, #21]
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	e090      	b.n	800e6ee <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ce:	2b01      	cmp	r3, #1
 800e5d0:	d904      	bls.n	800e5dc <f_lseek+0x32e>
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	699b      	ldr	r3, [r3, #24]
 800e5d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d304      	bcc.n	800e5e6 <f_lseek+0x338>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2202      	movs	r2, #2
 800e5e0:	755a      	strb	r2, [r3, #21]
 800e5e2:	2302      	movs	r3, #2
 800e5e4:	e083      	b.n	800e6ee <f_lseek+0x440>
					fp->clust = clst;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5ea:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e5ec:	683a      	ldr	r2, [r7, #0]
 800e5ee:	69fb      	ldr	r3, [r7, #28]
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d8c0      	bhi.n	800e576 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	699a      	ldr	r2, [r3, #24]
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	441a      	add	r2, r3
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	899b      	ldrh	r3, [r3, #12]
 800e604:	461a      	mov	r2, r3
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	fbb3 f1f2 	udiv	r1, r3, r2
 800e60c:	fb02 f201 	mul.w	r2, r2, r1
 800e610:	1a9b      	subs	r3, r3, r2
 800e612:	2b00      	cmp	r3, #0
 800e614:	d016      	beq.n	800e644 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7fd ffea 	bl	800c5f4 <clust2sect>
 800e620:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e624:	2b00      	cmp	r3, #0
 800e626:	d104      	bne.n	800e632 <f_lseek+0x384>
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2202      	movs	r2, #2
 800e62c:	755a      	strb	r2, [r3, #21]
 800e62e:	2302      	movs	r3, #2
 800e630:	e05d      	b.n	800e6ee <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	899b      	ldrh	r3, [r3, #12]
 800e636:	461a      	mov	r2, r3
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e63e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e640:	4413      	add	r3, r2
 800e642:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	699a      	ldr	r2, [r3, #24]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	68db      	ldr	r3, [r3, #12]
 800e64c:	429a      	cmp	r2, r3
 800e64e:	d90a      	bls.n	800e666 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	699a      	ldr	r2, [r3, #24]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	7d1b      	ldrb	r3, [r3, #20]
 800e65c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e660:	b2da      	uxtb	r2, r3
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	699b      	ldr	r3, [r3, #24]
 800e66a:	68ba      	ldr	r2, [r7, #8]
 800e66c:	8992      	ldrh	r2, [r2, #12]
 800e66e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e672:	fb02 f201 	mul.w	r2, r2, r1
 800e676:	1a9b      	subs	r3, r3, r2
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d036      	beq.n	800e6ea <f_lseek+0x43c>
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6a1b      	ldr	r3, [r3, #32]
 800e680:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e682:	429a      	cmp	r2, r3
 800e684:	d031      	beq.n	800e6ea <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	7d1b      	ldrb	r3, [r3, #20]
 800e68a:	b25b      	sxtb	r3, r3
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	da18      	bge.n	800e6c2 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	7858      	ldrb	r0, [r3, #1]
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6a1a      	ldr	r2, [r3, #32]
 800e69e:	2301      	movs	r3, #1
 800e6a0:	f7fd fc1c 	bl	800bedc <disk_write>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d004      	beq.n	800e6b4 <f_lseek+0x406>
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2201      	movs	r2, #1
 800e6ae:	755a      	strb	r2, [r3, #21]
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	e01c      	b.n	800e6ee <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	7d1b      	ldrb	r3, [r3, #20]
 800e6b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6bc:	b2da      	uxtb	r2, r3
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	7858      	ldrb	r0, [r3, #1]
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6d0:	f7fd fbe4 	bl	800be9c <disk_read>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d004      	beq.n	800e6e4 <f_lseek+0x436>
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2201      	movs	r2, #1
 800e6de:	755a      	strb	r2, [r3, #21]
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	e004      	b.n	800e6ee <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6e8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e6ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3740      	adds	r7, #64	; 0x40
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
	...

0800e6f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b087      	sub	sp, #28
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	60f8      	str	r0, [r7, #12]
 800e700:	60b9      	str	r1, [r7, #8]
 800e702:	4613      	mov	r3, r2
 800e704:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e706:	2301      	movs	r3, #1
 800e708:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e70a:	2300      	movs	r3, #0
 800e70c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e70e:	4b1f      	ldr	r3, [pc, #124]	; (800e78c <FATFS_LinkDriverEx+0x94>)
 800e710:	7a5b      	ldrb	r3, [r3, #9]
 800e712:	b2db      	uxtb	r3, r3
 800e714:	2b00      	cmp	r3, #0
 800e716:	d131      	bne.n	800e77c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e718:	4b1c      	ldr	r3, [pc, #112]	; (800e78c <FATFS_LinkDriverEx+0x94>)
 800e71a:	7a5b      	ldrb	r3, [r3, #9]
 800e71c:	b2db      	uxtb	r3, r3
 800e71e:	461a      	mov	r2, r3
 800e720:	4b1a      	ldr	r3, [pc, #104]	; (800e78c <FATFS_LinkDriverEx+0x94>)
 800e722:	2100      	movs	r1, #0
 800e724:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e726:	4b19      	ldr	r3, [pc, #100]	; (800e78c <FATFS_LinkDriverEx+0x94>)
 800e728:	7a5b      	ldrb	r3, [r3, #9]
 800e72a:	b2db      	uxtb	r3, r3
 800e72c:	4a17      	ldr	r2, [pc, #92]	; (800e78c <FATFS_LinkDriverEx+0x94>)
 800e72e:	009b      	lsls	r3, r3, #2
 800e730:	4413      	add	r3, r2
 800e732:	68fa      	ldr	r2, [r7, #12]
 800e734:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e736:	4b15      	ldr	r3, [pc, #84]	; (800e78c <FATFS_LinkDriverEx+0x94>)
 800e738:	7a5b      	ldrb	r3, [r3, #9]
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	461a      	mov	r2, r3
 800e73e:	4b13      	ldr	r3, [pc, #76]	; (800e78c <FATFS_LinkDriverEx+0x94>)
 800e740:	4413      	add	r3, r2
 800e742:	79fa      	ldrb	r2, [r7, #7]
 800e744:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e746:	4b11      	ldr	r3, [pc, #68]	; (800e78c <FATFS_LinkDriverEx+0x94>)
 800e748:	7a5b      	ldrb	r3, [r3, #9]
 800e74a:	b2db      	uxtb	r3, r3
 800e74c:	1c5a      	adds	r2, r3, #1
 800e74e:	b2d1      	uxtb	r1, r2
 800e750:	4a0e      	ldr	r2, [pc, #56]	; (800e78c <FATFS_LinkDriverEx+0x94>)
 800e752:	7251      	strb	r1, [r2, #9]
 800e754:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e756:	7dbb      	ldrb	r3, [r7, #22]
 800e758:	3330      	adds	r3, #48	; 0x30
 800e75a:	b2da      	uxtb	r2, r3
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	3301      	adds	r3, #1
 800e764:	223a      	movs	r2, #58	; 0x3a
 800e766:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	3302      	adds	r3, #2
 800e76c:	222f      	movs	r2, #47	; 0x2f
 800e76e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	3303      	adds	r3, #3
 800e774:	2200      	movs	r2, #0
 800e776:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e778:	2300      	movs	r3, #0
 800e77a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e77c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e77e:	4618      	mov	r0, r3
 800e780:	371c      	adds	r7, #28
 800e782:	46bd      	mov	sp, r7
 800e784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e788:	4770      	bx	lr
 800e78a:	bf00      	nop
 800e78c:	20002124 	.word	0x20002124

0800e790 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b082      	sub	sp, #8
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e79a:	2200      	movs	r2, #0
 800e79c:	6839      	ldr	r1, [r7, #0]
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f7ff ffaa 	bl	800e6f8 <FATFS_LinkDriverEx>
 800e7a4:	4603      	mov	r3, r0
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3708      	adds	r7, #8
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
	...

0800e7b0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e7b4:	2201      	movs	r2, #1
 800e7b6:	490e      	ldr	r1, [pc, #56]	; (800e7f0 <MX_USB_HOST_Init+0x40>)
 800e7b8:	480e      	ldr	r0, [pc, #56]	; (800e7f4 <MX_USB_HOST_Init+0x44>)
 800e7ba:	f7fb fe0d 	bl	800a3d8 <USBH_Init>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d001      	beq.n	800e7c8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e7c4:	f7f2 fb02 	bl	8000dcc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800e7c8:	490b      	ldr	r1, [pc, #44]	; (800e7f8 <MX_USB_HOST_Init+0x48>)
 800e7ca:	480a      	ldr	r0, [pc, #40]	; (800e7f4 <MX_USB_HOST_Init+0x44>)
 800e7cc:	f7fb fea0 	bl	800a510 <USBH_RegisterClass>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d001      	beq.n	800e7da <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e7d6:	f7f2 faf9 	bl	8000dcc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e7da:	4806      	ldr	r0, [pc, #24]	; (800e7f4 <MX_USB_HOST_Init+0x44>)
 800e7dc:	f7fb ff86 	bl	800a6ec <USBH_Start>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d001      	beq.n	800e7ea <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e7e6:	f7f2 faf1 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e7ea:	bf00      	nop
 800e7ec:	bd80      	pop	{r7, pc}
 800e7ee:	bf00      	nop
 800e7f0:	0800e811 	.word	0x0800e811
 800e7f4:	2000544c 	.word	0x2000544c
 800e7f8:	20000018 	.word	0x20000018

0800e7fc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800e800:	4802      	ldr	r0, [pc, #8]	; (800e80c <MX_USB_HOST_Process+0x10>)
 800e802:	f7fb ff83 	bl	800a70c <USBH_Process>
}
 800e806:	bf00      	nop
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop
 800e80c:	2000544c 	.word	0x2000544c

0800e810 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e810:	b480      	push	{r7}
 800e812:	b083      	sub	sp, #12
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	460b      	mov	r3, r1
 800e81a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e81c:	78fb      	ldrb	r3, [r7, #3]
 800e81e:	3b01      	subs	r3, #1
 800e820:	2b04      	cmp	r3, #4
 800e822:	d819      	bhi.n	800e858 <USBH_UserProcess+0x48>
 800e824:	a201      	add	r2, pc, #4	; (adr r2, 800e82c <USBH_UserProcess+0x1c>)
 800e826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e82a:	bf00      	nop
 800e82c:	0800e859 	.word	0x0800e859
 800e830:	0800e849 	.word	0x0800e849
 800e834:	0800e859 	.word	0x0800e859
 800e838:	0800e851 	.word	0x0800e851
 800e83c:	0800e841 	.word	0x0800e841
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e840:	4b09      	ldr	r3, [pc, #36]	; (800e868 <USBH_UserProcess+0x58>)
 800e842:	2203      	movs	r2, #3
 800e844:	701a      	strb	r2, [r3, #0]
  break;
 800e846:	e008      	b.n	800e85a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e848:	4b07      	ldr	r3, [pc, #28]	; (800e868 <USBH_UserProcess+0x58>)
 800e84a:	2202      	movs	r2, #2
 800e84c:	701a      	strb	r2, [r3, #0]
  break;
 800e84e:	e004      	b.n	800e85a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e850:	4b05      	ldr	r3, [pc, #20]	; (800e868 <USBH_UserProcess+0x58>)
 800e852:	2201      	movs	r2, #1
 800e854:	701a      	strb	r2, [r3, #0]
  break;
 800e856:	e000      	b.n	800e85a <USBH_UserProcess+0x4a>

  default:
  break;
 800e858:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e85a:	bf00      	nop
 800e85c:	370c      	adds	r7, #12
 800e85e:	46bd      	mov	sp, r7
 800e860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e864:	4770      	bx	lr
 800e866:	bf00      	nop
 800e868:	20002130 	.word	0x20002130

0800e86c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b08a      	sub	sp, #40	; 0x28
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e874:	f107 0314 	add.w	r3, r7, #20
 800e878:	2200      	movs	r2, #0
 800e87a:	601a      	str	r2, [r3, #0]
 800e87c:	605a      	str	r2, [r3, #4]
 800e87e:	609a      	str	r2, [r3, #8]
 800e880:	60da      	str	r2, [r3, #12]
 800e882:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e88c:	d147      	bne.n	800e91e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e88e:	2300      	movs	r3, #0
 800e890:	613b      	str	r3, [r7, #16]
 800e892:	4b25      	ldr	r3, [pc, #148]	; (800e928 <HAL_HCD_MspInit+0xbc>)
 800e894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e896:	4a24      	ldr	r2, [pc, #144]	; (800e928 <HAL_HCD_MspInit+0xbc>)
 800e898:	f043 0301 	orr.w	r3, r3, #1
 800e89c:	6313      	str	r3, [r2, #48]	; 0x30
 800e89e:	4b22      	ldr	r3, [pc, #136]	; (800e928 <HAL_HCD_MspInit+0xbc>)
 800e8a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8a2:	f003 0301 	and.w	r3, r3, #1
 800e8a6:	613b      	str	r3, [r7, #16]
 800e8a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e8aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e8ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e8b8:	f107 0314 	add.w	r3, r7, #20
 800e8bc:	4619      	mov	r1, r3
 800e8be:	481b      	ldr	r0, [pc, #108]	; (800e92c <HAL_HCD_MspInit+0xc0>)
 800e8c0:	f7f4 fcbe 	bl	8003240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e8c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e8c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8ca:	2302      	movs	r3, #2
 800e8cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e8d2:	2303      	movs	r3, #3
 800e8d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e8d6:	230a      	movs	r3, #10
 800e8d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e8da:	f107 0314 	add.w	r3, r7, #20
 800e8de:	4619      	mov	r1, r3
 800e8e0:	4812      	ldr	r0, [pc, #72]	; (800e92c <HAL_HCD_MspInit+0xc0>)
 800e8e2:	f7f4 fcad 	bl	8003240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e8e6:	4b10      	ldr	r3, [pc, #64]	; (800e928 <HAL_HCD_MspInit+0xbc>)
 800e8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8ea:	4a0f      	ldr	r2, [pc, #60]	; (800e928 <HAL_HCD_MspInit+0xbc>)
 800e8ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8f0:	6353      	str	r3, [r2, #52]	; 0x34
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	60fb      	str	r3, [r7, #12]
 800e8f6:	4b0c      	ldr	r3, [pc, #48]	; (800e928 <HAL_HCD_MspInit+0xbc>)
 800e8f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8fa:	4a0b      	ldr	r2, [pc, #44]	; (800e928 <HAL_HCD_MspInit+0xbc>)
 800e8fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e900:	6453      	str	r3, [r2, #68]	; 0x44
 800e902:	4b09      	ldr	r3, [pc, #36]	; (800e928 <HAL_HCD_MspInit+0xbc>)
 800e904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e90a:	60fb      	str	r3, [r7, #12]
 800e90c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e90e:	2200      	movs	r2, #0
 800e910:	2100      	movs	r1, #0
 800e912:	2043      	movs	r0, #67	; 0x43
 800e914:	f7f2 ff95 	bl	8001842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e918:	2043      	movs	r0, #67	; 0x43
 800e91a:	f7f2 ffae 	bl	800187a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e91e:	bf00      	nop
 800e920:	3728      	adds	r7, #40	; 0x28
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
 800e926:	bf00      	nop
 800e928:	40023800 	.word	0x40023800
 800e92c:	40020000 	.word	0x40020000

0800e930 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e93e:	4618      	mov	r0, r3
 800e940:	f7fc fc03 	bl	800b14a <USBH_LL_IncTimer>
}
 800e944:	bf00      	nop
 800e946:	3708      	adds	r7, #8
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7fc fc3b 	bl	800b1d6 <USBH_LL_Connect>
}
 800e960:	bf00      	nop
 800e962:	3708      	adds	r7, #8
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}

0800e968 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e976:	4618      	mov	r0, r3
 800e978:	f7fc fc44 	bl	800b204 <USBH_LL_Disconnect>
}
 800e97c:	bf00      	nop
 800e97e:	3708      	adds	r7, #8
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}

0800e984 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e984:	b480      	push	{r7}
 800e986:	b083      	sub	sp, #12
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	460b      	mov	r3, r1
 800e98e:	70fb      	strb	r3, [r7, #3]
 800e990:	4613      	mov	r3, r2
 800e992:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e994:	bf00      	nop
 800e996:	370c      	adds	r7, #12
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr

0800e9a0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b082      	sub	sp, #8
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f7fc fbf5 	bl	800b19e <USBH_LL_PortEnabled>
}
 800e9b4:	bf00      	nop
 800e9b6:	3708      	adds	r7, #8
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b082      	sub	sp, #8
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7fc fbf5 	bl	800b1ba <USBH_LL_PortDisabled>
}
 800e9d0:	bf00      	nop
 800e9d2:	3708      	adds	r7, #8
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e9e6:	2b01      	cmp	r3, #1
 800e9e8:	d12a      	bne.n	800ea40 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e9ea:	4a18      	ldr	r2, [pc, #96]	; (800ea4c <USBH_LL_Init+0x74>)
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	4a15      	ldr	r2, [pc, #84]	; (800ea4c <USBH_LL_Init+0x74>)
 800e9f6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e9fa:	4b14      	ldr	r3, [pc, #80]	; (800ea4c <USBH_LL_Init+0x74>)
 800e9fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ea00:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ea02:	4b12      	ldr	r3, [pc, #72]	; (800ea4c <USBH_LL_Init+0x74>)
 800ea04:	2208      	movs	r2, #8
 800ea06:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ea08:	4b10      	ldr	r3, [pc, #64]	; (800ea4c <USBH_LL_Init+0x74>)
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ea0e:	4b0f      	ldr	r3, [pc, #60]	; (800ea4c <USBH_LL_Init+0x74>)
 800ea10:	2200      	movs	r2, #0
 800ea12:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ea14:	4b0d      	ldr	r3, [pc, #52]	; (800ea4c <USBH_LL_Init+0x74>)
 800ea16:	2202      	movs	r2, #2
 800ea18:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ea1a:	4b0c      	ldr	r3, [pc, #48]	; (800ea4c <USBH_LL_Init+0x74>)
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ea20:	480a      	ldr	r0, [pc, #40]	; (800ea4c <USBH_LL_Init+0x74>)
 800ea22:	f7f4 fda9 	bl	8003578 <HAL_HCD_Init>
 800ea26:	4603      	mov	r3, r0
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d001      	beq.n	800ea30 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ea2c:	f7f2 f9ce 	bl	8000dcc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ea30:	4806      	ldr	r0, [pc, #24]	; (800ea4c <USBH_LL_Init+0x74>)
 800ea32:	f7f5 f98c 	bl	8003d4e <HAL_HCD_GetCurrentFrame>
 800ea36:	4603      	mov	r3, r0
 800ea38:	4619      	mov	r1, r3
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f7fc fb76 	bl	800b12c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ea40:	2300      	movs	r3, #0
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3708      	adds	r7, #8
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	20005824 	.word	0x20005824

0800ea50 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b084      	sub	sp, #16
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7f5 f8fb 	bl	8003c62 <HAL_HCD_Start>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ea70:	7bfb      	ldrb	r3, [r7, #15]
 800ea72:	4618      	mov	r0, r3
 800ea74:	f000 f982 	bl	800ed7c <USBH_Get_USB_Status>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3710      	adds	r7, #16
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}

0800ea86 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ea86:	b580      	push	{r7, lr}
 800ea88:	b084      	sub	sp, #16
 800ea8a:	af00      	add	r7, sp, #0
 800ea8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ea92:	2300      	movs	r3, #0
 800ea94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f7f5 f903 	bl	8003ca8 <HAL_HCD_Stop>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eaa6:	7bfb      	ldrb	r3, [r7, #15]
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f000 f967 	bl	800ed7c <USBH_Get_USB_Status>
 800eaae:	4603      	mov	r3, r0
 800eab0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eab2:	7bbb      	ldrb	r3, [r7, #14]
}
 800eab4:	4618      	mov	r0, r3
 800eab6:	3710      	adds	r7, #16
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}

0800eabc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b084      	sub	sp, #16
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800eac4:	2301      	movs	r3, #1
 800eac6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eace:	4618      	mov	r0, r3
 800ead0:	f7f5 f94b 	bl	8003d6a <HAL_HCD_GetCurrentSpeed>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b02      	cmp	r3, #2
 800ead8:	d00c      	beq.n	800eaf4 <USBH_LL_GetSpeed+0x38>
 800eada:	2b02      	cmp	r3, #2
 800eadc:	d80d      	bhi.n	800eafa <USBH_LL_GetSpeed+0x3e>
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d002      	beq.n	800eae8 <USBH_LL_GetSpeed+0x2c>
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	d003      	beq.n	800eaee <USBH_LL_GetSpeed+0x32>
 800eae6:	e008      	b.n	800eafa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800eae8:	2300      	movs	r3, #0
 800eaea:	73fb      	strb	r3, [r7, #15]
    break;
 800eaec:	e008      	b.n	800eb00 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800eaee:	2301      	movs	r3, #1
 800eaf0:	73fb      	strb	r3, [r7, #15]
    break;
 800eaf2:	e005      	b.n	800eb00 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800eaf4:	2302      	movs	r3, #2
 800eaf6:	73fb      	strb	r3, [r7, #15]
    break;
 800eaf8:	e002      	b.n	800eb00 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800eafa:	2301      	movs	r3, #1
 800eafc:	73fb      	strb	r3, [r7, #15]
    break;
 800eafe:	bf00      	nop
  }
  return  speed;
 800eb00:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	3710      	adds	r7, #16
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}

0800eb0a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800eb0a:	b580      	push	{r7, lr}
 800eb0c:	b084      	sub	sp, #16
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb12:	2300      	movs	r3, #0
 800eb14:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eb16:	2300      	movs	r3, #0
 800eb18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7f5 f8de 	bl	8003ce2 <HAL_HCD_ResetPort>
 800eb26:	4603      	mov	r3, r0
 800eb28:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eb2a:	7bfb      	ldrb	r3, [r7, #15]
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f000 f925 	bl	800ed7c <USBH_Get_USB_Status>
 800eb32:	4603      	mov	r3, r0
 800eb34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb36:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3710      	adds	r7, #16
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}

0800eb40 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b082      	sub	sp, #8
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	460b      	mov	r3, r1
 800eb4a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eb52:	78fa      	ldrb	r2, [r7, #3]
 800eb54:	4611      	mov	r1, r2
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7f5 f8e5 	bl	8003d26 <HAL_HCD_HC_GetXferCount>
 800eb5c:	4603      	mov	r3, r0
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3708      	adds	r7, #8
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}

0800eb66 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800eb66:	b590      	push	{r4, r7, lr}
 800eb68:	b089      	sub	sp, #36	; 0x24
 800eb6a:	af04      	add	r7, sp, #16
 800eb6c:	6078      	str	r0, [r7, #4]
 800eb6e:	4608      	mov	r0, r1
 800eb70:	4611      	mov	r1, r2
 800eb72:	461a      	mov	r2, r3
 800eb74:	4603      	mov	r3, r0
 800eb76:	70fb      	strb	r3, [r7, #3]
 800eb78:	460b      	mov	r3, r1
 800eb7a:	70bb      	strb	r3, [r7, #2]
 800eb7c:	4613      	mov	r3, r2
 800eb7e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb80:	2300      	movs	r3, #0
 800eb82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eb84:	2300      	movs	r3, #0
 800eb86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800eb8e:	787c      	ldrb	r4, [r7, #1]
 800eb90:	78ba      	ldrb	r2, [r7, #2]
 800eb92:	78f9      	ldrb	r1, [r7, #3]
 800eb94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eb96:	9302      	str	r3, [sp, #8]
 800eb98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800eb9c:	9301      	str	r3, [sp, #4]
 800eb9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eba2:	9300      	str	r3, [sp, #0]
 800eba4:	4623      	mov	r3, r4
 800eba6:	f7f4 fd49 	bl	800363c <HAL_HCD_HC_Init>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ebae:	7bfb      	ldrb	r3, [r7, #15]
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f000 f8e3 	bl	800ed7c <USBH_Get_USB_Status>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebba:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3714      	adds	r7, #20
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd90      	pop	{r4, r7, pc}

0800ebc4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	460b      	mov	r3, r1
 800ebce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ebde:	78fa      	ldrb	r2, [r7, #3]
 800ebe0:	4611      	mov	r1, r2
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f7f4 fdb9 	bl	800375a <HAL_HCD_HC_Halt>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ebec:	7bfb      	ldrb	r3, [r7, #15]
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f000 f8c4 	bl	800ed7c <USBH_Get_USB_Status>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3710      	adds	r7, #16
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}

0800ec02 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ec02:	b590      	push	{r4, r7, lr}
 800ec04:	b089      	sub	sp, #36	; 0x24
 800ec06:	af04      	add	r7, sp, #16
 800ec08:	6078      	str	r0, [r7, #4]
 800ec0a:	4608      	mov	r0, r1
 800ec0c:	4611      	mov	r1, r2
 800ec0e:	461a      	mov	r2, r3
 800ec10:	4603      	mov	r3, r0
 800ec12:	70fb      	strb	r3, [r7, #3]
 800ec14:	460b      	mov	r3, r1
 800ec16:	70bb      	strb	r3, [r7, #2]
 800ec18:	4613      	mov	r3, r2
 800ec1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ec20:	2300      	movs	r3, #0
 800ec22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ec2a:	787c      	ldrb	r4, [r7, #1]
 800ec2c:	78ba      	ldrb	r2, [r7, #2]
 800ec2e:	78f9      	ldrb	r1, [r7, #3]
 800ec30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ec34:	9303      	str	r3, [sp, #12]
 800ec36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ec38:	9302      	str	r3, [sp, #8]
 800ec3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec3c:	9301      	str	r3, [sp, #4]
 800ec3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ec42:	9300      	str	r3, [sp, #0]
 800ec44:	4623      	mov	r3, r4
 800ec46:	f7f4 fdab 	bl	80037a0 <HAL_HCD_HC_SubmitRequest>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ec4e:	7bfb      	ldrb	r3, [r7, #15]
 800ec50:	4618      	mov	r0, r3
 800ec52:	f000 f893 	bl	800ed7c <USBH_Get_USB_Status>
 800ec56:	4603      	mov	r3, r0
 800ec58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3714      	adds	r7, #20
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd90      	pop	{r4, r7, pc}

0800ec64 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ec76:	78fa      	ldrb	r2, [r7, #3]
 800ec78:	4611      	mov	r1, r2
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7f5 f83f 	bl	8003cfe <HAL_HCD_HC_GetURBState>
 800ec80:	4603      	mov	r3, r0
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3708      	adds	r7, #8
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}

0800ec8a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ec8a:	b580      	push	{r7, lr}
 800ec8c:	b082      	sub	sp, #8
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
 800ec92:	460b      	mov	r3, r1
 800ec94:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800ec96:	20c8      	movs	r0, #200	; 0xc8
 800ec98:	f7f2 fcd4 	bl	8001644 <HAL_Delay>
  return USBH_OK;
 800ec9c:	2300      	movs	r3, #0
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3708      	adds	r7, #8
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}

0800eca6 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800eca6:	b480      	push	{r7}
 800eca8:	b085      	sub	sp, #20
 800ecaa:	af00      	add	r7, sp, #0
 800ecac:	6078      	str	r0, [r7, #4]
 800ecae:	460b      	mov	r3, r1
 800ecb0:	70fb      	strb	r3, [r7, #3]
 800ecb2:	4613      	mov	r3, r2
 800ecb4:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ecbc:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ecbe:	78fb      	ldrb	r3, [r7, #3]
 800ecc0:	68fa      	ldr	r2, [r7, #12]
 800ecc2:	212c      	movs	r1, #44	; 0x2c
 800ecc4:	fb01 f303 	mul.w	r3, r1, r3
 800ecc8:	4413      	add	r3, r2
 800ecca:	333b      	adds	r3, #59	; 0x3b
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d009      	beq.n	800ece6 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ecd2:	78fb      	ldrb	r3, [r7, #3]
 800ecd4:	68fa      	ldr	r2, [r7, #12]
 800ecd6:	212c      	movs	r1, #44	; 0x2c
 800ecd8:	fb01 f303 	mul.w	r3, r1, r3
 800ecdc:	4413      	add	r3, r2
 800ecde:	3354      	adds	r3, #84	; 0x54
 800ece0:	78ba      	ldrb	r2, [r7, #2]
 800ece2:	701a      	strb	r2, [r3, #0]
 800ece4:	e008      	b.n	800ecf8 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ece6:	78fb      	ldrb	r3, [r7, #3]
 800ece8:	68fa      	ldr	r2, [r7, #12]
 800ecea:	212c      	movs	r1, #44	; 0x2c
 800ecec:	fb01 f303 	mul.w	r3, r1, r3
 800ecf0:	4413      	add	r3, r2
 800ecf2:	3355      	adds	r3, #85	; 0x55
 800ecf4:	78ba      	ldrb	r2, [r7, #2]
 800ecf6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ecf8:	2300      	movs	r3, #0
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3714      	adds	r7, #20
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed04:	4770      	bx	lr

0800ed06 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ed06:	b480      	push	{r7}
 800ed08:	b085      	sub	sp, #20
 800ed0a:	af00      	add	r7, sp, #0
 800ed0c:	6078      	str	r0, [r7, #4]
 800ed0e:	460b      	mov	r3, r1
 800ed10:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800ed12:	2300      	movs	r3, #0
 800ed14:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ed1c:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800ed1e:	78fb      	ldrb	r3, [r7, #3]
 800ed20:	68ba      	ldr	r2, [r7, #8]
 800ed22:	212c      	movs	r1, #44	; 0x2c
 800ed24:	fb01 f303 	mul.w	r3, r1, r3
 800ed28:	4413      	add	r3, r2
 800ed2a:	333b      	adds	r3, #59	; 0x3b
 800ed2c:	781b      	ldrb	r3, [r3, #0]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d009      	beq.n	800ed46 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800ed32:	78fb      	ldrb	r3, [r7, #3]
 800ed34:	68ba      	ldr	r2, [r7, #8]
 800ed36:	212c      	movs	r1, #44	; 0x2c
 800ed38:	fb01 f303 	mul.w	r3, r1, r3
 800ed3c:	4413      	add	r3, r2
 800ed3e:	3354      	adds	r3, #84	; 0x54
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	73fb      	strb	r3, [r7, #15]
 800ed44:	e008      	b.n	800ed58 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800ed46:	78fb      	ldrb	r3, [r7, #3]
 800ed48:	68ba      	ldr	r2, [r7, #8]
 800ed4a:	212c      	movs	r1, #44	; 0x2c
 800ed4c:	fb01 f303 	mul.w	r3, r1, r3
 800ed50:	4413      	add	r3, r2
 800ed52:	3355      	adds	r3, #85	; 0x55
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800ed58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3714      	adds	r7, #20
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed64:	4770      	bx	lr

0800ed66 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ed66:	b580      	push	{r7, lr}
 800ed68:	b082      	sub	sp, #8
 800ed6a:	af00      	add	r7, sp, #0
 800ed6c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f7f2 fc68 	bl	8001644 <HAL_Delay>
}
 800ed74:	bf00      	nop
 800ed76:	3708      	adds	r7, #8
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}

0800ed7c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	b085      	sub	sp, #20
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	4603      	mov	r3, r0
 800ed84:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ed86:	2300      	movs	r3, #0
 800ed88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ed8a:	79fb      	ldrb	r3, [r7, #7]
 800ed8c:	2b03      	cmp	r3, #3
 800ed8e:	d817      	bhi.n	800edc0 <USBH_Get_USB_Status+0x44>
 800ed90:	a201      	add	r2, pc, #4	; (adr r2, 800ed98 <USBH_Get_USB_Status+0x1c>)
 800ed92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed96:	bf00      	nop
 800ed98:	0800eda9 	.word	0x0800eda9
 800ed9c:	0800edaf 	.word	0x0800edaf
 800eda0:	0800edb5 	.word	0x0800edb5
 800eda4:	0800edbb 	.word	0x0800edbb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800eda8:	2300      	movs	r3, #0
 800edaa:	73fb      	strb	r3, [r7, #15]
    break;
 800edac:	e00b      	b.n	800edc6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800edae:	2302      	movs	r3, #2
 800edb0:	73fb      	strb	r3, [r7, #15]
    break;
 800edb2:	e008      	b.n	800edc6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800edb4:	2301      	movs	r3, #1
 800edb6:	73fb      	strb	r3, [r7, #15]
    break;
 800edb8:	e005      	b.n	800edc6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800edba:	2302      	movs	r3, #2
 800edbc:	73fb      	strb	r3, [r7, #15]
    break;
 800edbe:	e002      	b.n	800edc6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800edc0:	2302      	movs	r3, #2
 800edc2:	73fb      	strb	r3, [r7, #15]
    break;
 800edc4:	bf00      	nop
  }
  return usb_status;
 800edc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3714      	adds	r7, #20
 800edcc:	46bd      	mov	sp, r7
 800edce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd2:	4770      	bx	lr

0800edd4 <__errno>:
 800edd4:	4b01      	ldr	r3, [pc, #4]	; (800eddc <__errno+0x8>)
 800edd6:	6818      	ldr	r0, [r3, #0]
 800edd8:	4770      	bx	lr
 800edda:	bf00      	nop
 800eddc:	20000038 	.word	0x20000038

0800ede0 <__libc_init_array>:
 800ede0:	b570      	push	{r4, r5, r6, lr}
 800ede2:	4d0d      	ldr	r5, [pc, #52]	; (800ee18 <__libc_init_array+0x38>)
 800ede4:	4c0d      	ldr	r4, [pc, #52]	; (800ee1c <__libc_init_array+0x3c>)
 800ede6:	1b64      	subs	r4, r4, r5
 800ede8:	10a4      	asrs	r4, r4, #2
 800edea:	2600      	movs	r6, #0
 800edec:	42a6      	cmp	r6, r4
 800edee:	d109      	bne.n	800ee04 <__libc_init_array+0x24>
 800edf0:	4d0b      	ldr	r5, [pc, #44]	; (800ee20 <__libc_init_array+0x40>)
 800edf2:	4c0c      	ldr	r4, [pc, #48]	; (800ee24 <__libc_init_array+0x44>)
 800edf4:	f000 fff2 	bl	800fddc <_init>
 800edf8:	1b64      	subs	r4, r4, r5
 800edfa:	10a4      	asrs	r4, r4, #2
 800edfc:	2600      	movs	r6, #0
 800edfe:	42a6      	cmp	r6, r4
 800ee00:	d105      	bne.n	800ee0e <__libc_init_array+0x2e>
 800ee02:	bd70      	pop	{r4, r5, r6, pc}
 800ee04:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee08:	4798      	blx	r3
 800ee0a:	3601      	adds	r6, #1
 800ee0c:	e7ee      	b.n	800edec <__libc_init_array+0xc>
 800ee0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee12:	4798      	blx	r3
 800ee14:	3601      	adds	r6, #1
 800ee16:	e7f2      	b.n	800edfe <__libc_init_array+0x1e>
 800ee18:	08086f34 	.word	0x08086f34
 800ee1c:	08086f34 	.word	0x08086f34
 800ee20:	08086f34 	.word	0x08086f34
 800ee24:	08086f38 	.word	0x08086f38

0800ee28 <malloc>:
 800ee28:	4b02      	ldr	r3, [pc, #8]	; (800ee34 <malloc+0xc>)
 800ee2a:	4601      	mov	r1, r0
 800ee2c:	6818      	ldr	r0, [r3, #0]
 800ee2e:	f000 b871 	b.w	800ef14 <_malloc_r>
 800ee32:	bf00      	nop
 800ee34:	20000038 	.word	0x20000038

0800ee38 <free>:
 800ee38:	4b02      	ldr	r3, [pc, #8]	; (800ee44 <free+0xc>)
 800ee3a:	4601      	mov	r1, r0
 800ee3c:	6818      	ldr	r0, [r3, #0]
 800ee3e:	f000 b819 	b.w	800ee74 <_free_r>
 800ee42:	bf00      	nop
 800ee44:	20000038 	.word	0x20000038

0800ee48 <memcpy>:
 800ee48:	440a      	add	r2, r1
 800ee4a:	4291      	cmp	r1, r2
 800ee4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee50:	d100      	bne.n	800ee54 <memcpy+0xc>
 800ee52:	4770      	bx	lr
 800ee54:	b510      	push	{r4, lr}
 800ee56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee5e:	4291      	cmp	r1, r2
 800ee60:	d1f9      	bne.n	800ee56 <memcpy+0xe>
 800ee62:	bd10      	pop	{r4, pc}

0800ee64 <memset>:
 800ee64:	4402      	add	r2, r0
 800ee66:	4603      	mov	r3, r0
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	d100      	bne.n	800ee6e <memset+0xa>
 800ee6c:	4770      	bx	lr
 800ee6e:	f803 1b01 	strb.w	r1, [r3], #1
 800ee72:	e7f9      	b.n	800ee68 <memset+0x4>

0800ee74 <_free_r>:
 800ee74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee76:	2900      	cmp	r1, #0
 800ee78:	d048      	beq.n	800ef0c <_free_r+0x98>
 800ee7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee7e:	9001      	str	r0, [sp, #4]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f1a1 0404 	sub.w	r4, r1, #4
 800ee86:	bfb8      	it	lt
 800ee88:	18e4      	addlt	r4, r4, r3
 800ee8a:	f000 f9d3 	bl	800f234 <__malloc_lock>
 800ee8e:	4a20      	ldr	r2, [pc, #128]	; (800ef10 <_free_r+0x9c>)
 800ee90:	9801      	ldr	r0, [sp, #4]
 800ee92:	6813      	ldr	r3, [r2, #0]
 800ee94:	4615      	mov	r5, r2
 800ee96:	b933      	cbnz	r3, 800eea6 <_free_r+0x32>
 800ee98:	6063      	str	r3, [r4, #4]
 800ee9a:	6014      	str	r4, [r2, #0]
 800ee9c:	b003      	add	sp, #12
 800ee9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eea2:	f000 b9cd 	b.w	800f240 <__malloc_unlock>
 800eea6:	42a3      	cmp	r3, r4
 800eea8:	d90b      	bls.n	800eec2 <_free_r+0x4e>
 800eeaa:	6821      	ldr	r1, [r4, #0]
 800eeac:	1862      	adds	r2, r4, r1
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	bf04      	itt	eq
 800eeb2:	681a      	ldreq	r2, [r3, #0]
 800eeb4:	685b      	ldreq	r3, [r3, #4]
 800eeb6:	6063      	str	r3, [r4, #4]
 800eeb8:	bf04      	itt	eq
 800eeba:	1852      	addeq	r2, r2, r1
 800eebc:	6022      	streq	r2, [r4, #0]
 800eebe:	602c      	str	r4, [r5, #0]
 800eec0:	e7ec      	b.n	800ee9c <_free_r+0x28>
 800eec2:	461a      	mov	r2, r3
 800eec4:	685b      	ldr	r3, [r3, #4]
 800eec6:	b10b      	cbz	r3, 800eecc <_free_r+0x58>
 800eec8:	42a3      	cmp	r3, r4
 800eeca:	d9fa      	bls.n	800eec2 <_free_r+0x4e>
 800eecc:	6811      	ldr	r1, [r2, #0]
 800eece:	1855      	adds	r5, r2, r1
 800eed0:	42a5      	cmp	r5, r4
 800eed2:	d10b      	bne.n	800eeec <_free_r+0x78>
 800eed4:	6824      	ldr	r4, [r4, #0]
 800eed6:	4421      	add	r1, r4
 800eed8:	1854      	adds	r4, r2, r1
 800eeda:	42a3      	cmp	r3, r4
 800eedc:	6011      	str	r1, [r2, #0]
 800eede:	d1dd      	bne.n	800ee9c <_free_r+0x28>
 800eee0:	681c      	ldr	r4, [r3, #0]
 800eee2:	685b      	ldr	r3, [r3, #4]
 800eee4:	6053      	str	r3, [r2, #4]
 800eee6:	4421      	add	r1, r4
 800eee8:	6011      	str	r1, [r2, #0]
 800eeea:	e7d7      	b.n	800ee9c <_free_r+0x28>
 800eeec:	d902      	bls.n	800eef4 <_free_r+0x80>
 800eeee:	230c      	movs	r3, #12
 800eef0:	6003      	str	r3, [r0, #0]
 800eef2:	e7d3      	b.n	800ee9c <_free_r+0x28>
 800eef4:	6825      	ldr	r5, [r4, #0]
 800eef6:	1961      	adds	r1, r4, r5
 800eef8:	428b      	cmp	r3, r1
 800eefa:	bf04      	itt	eq
 800eefc:	6819      	ldreq	r1, [r3, #0]
 800eefe:	685b      	ldreq	r3, [r3, #4]
 800ef00:	6063      	str	r3, [r4, #4]
 800ef02:	bf04      	itt	eq
 800ef04:	1949      	addeq	r1, r1, r5
 800ef06:	6021      	streq	r1, [r4, #0]
 800ef08:	6054      	str	r4, [r2, #4]
 800ef0a:	e7c7      	b.n	800ee9c <_free_r+0x28>
 800ef0c:	b003      	add	sp, #12
 800ef0e:	bd30      	pop	{r4, r5, pc}
 800ef10:	20002134 	.word	0x20002134

0800ef14 <_malloc_r>:
 800ef14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef16:	1ccd      	adds	r5, r1, #3
 800ef18:	f025 0503 	bic.w	r5, r5, #3
 800ef1c:	3508      	adds	r5, #8
 800ef1e:	2d0c      	cmp	r5, #12
 800ef20:	bf38      	it	cc
 800ef22:	250c      	movcc	r5, #12
 800ef24:	2d00      	cmp	r5, #0
 800ef26:	4606      	mov	r6, r0
 800ef28:	db01      	blt.n	800ef2e <_malloc_r+0x1a>
 800ef2a:	42a9      	cmp	r1, r5
 800ef2c:	d903      	bls.n	800ef36 <_malloc_r+0x22>
 800ef2e:	230c      	movs	r3, #12
 800ef30:	6033      	str	r3, [r6, #0]
 800ef32:	2000      	movs	r0, #0
 800ef34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef36:	f000 f97d 	bl	800f234 <__malloc_lock>
 800ef3a:	4921      	ldr	r1, [pc, #132]	; (800efc0 <_malloc_r+0xac>)
 800ef3c:	680a      	ldr	r2, [r1, #0]
 800ef3e:	4614      	mov	r4, r2
 800ef40:	b99c      	cbnz	r4, 800ef6a <_malloc_r+0x56>
 800ef42:	4f20      	ldr	r7, [pc, #128]	; (800efc4 <_malloc_r+0xb0>)
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	b923      	cbnz	r3, 800ef52 <_malloc_r+0x3e>
 800ef48:	4621      	mov	r1, r4
 800ef4a:	4630      	mov	r0, r6
 800ef4c:	f000 f86a 	bl	800f024 <_sbrk_r>
 800ef50:	6038      	str	r0, [r7, #0]
 800ef52:	4629      	mov	r1, r5
 800ef54:	4630      	mov	r0, r6
 800ef56:	f000 f865 	bl	800f024 <_sbrk_r>
 800ef5a:	1c43      	adds	r3, r0, #1
 800ef5c:	d123      	bne.n	800efa6 <_malloc_r+0x92>
 800ef5e:	230c      	movs	r3, #12
 800ef60:	6033      	str	r3, [r6, #0]
 800ef62:	4630      	mov	r0, r6
 800ef64:	f000 f96c 	bl	800f240 <__malloc_unlock>
 800ef68:	e7e3      	b.n	800ef32 <_malloc_r+0x1e>
 800ef6a:	6823      	ldr	r3, [r4, #0]
 800ef6c:	1b5b      	subs	r3, r3, r5
 800ef6e:	d417      	bmi.n	800efa0 <_malloc_r+0x8c>
 800ef70:	2b0b      	cmp	r3, #11
 800ef72:	d903      	bls.n	800ef7c <_malloc_r+0x68>
 800ef74:	6023      	str	r3, [r4, #0]
 800ef76:	441c      	add	r4, r3
 800ef78:	6025      	str	r5, [r4, #0]
 800ef7a:	e004      	b.n	800ef86 <_malloc_r+0x72>
 800ef7c:	6863      	ldr	r3, [r4, #4]
 800ef7e:	42a2      	cmp	r2, r4
 800ef80:	bf0c      	ite	eq
 800ef82:	600b      	streq	r3, [r1, #0]
 800ef84:	6053      	strne	r3, [r2, #4]
 800ef86:	4630      	mov	r0, r6
 800ef88:	f000 f95a 	bl	800f240 <__malloc_unlock>
 800ef8c:	f104 000b 	add.w	r0, r4, #11
 800ef90:	1d23      	adds	r3, r4, #4
 800ef92:	f020 0007 	bic.w	r0, r0, #7
 800ef96:	1ac2      	subs	r2, r0, r3
 800ef98:	d0cc      	beq.n	800ef34 <_malloc_r+0x20>
 800ef9a:	1a1b      	subs	r3, r3, r0
 800ef9c:	50a3      	str	r3, [r4, r2]
 800ef9e:	e7c9      	b.n	800ef34 <_malloc_r+0x20>
 800efa0:	4622      	mov	r2, r4
 800efa2:	6864      	ldr	r4, [r4, #4]
 800efa4:	e7cc      	b.n	800ef40 <_malloc_r+0x2c>
 800efa6:	1cc4      	adds	r4, r0, #3
 800efa8:	f024 0403 	bic.w	r4, r4, #3
 800efac:	42a0      	cmp	r0, r4
 800efae:	d0e3      	beq.n	800ef78 <_malloc_r+0x64>
 800efb0:	1a21      	subs	r1, r4, r0
 800efb2:	4630      	mov	r0, r6
 800efb4:	f000 f836 	bl	800f024 <_sbrk_r>
 800efb8:	3001      	adds	r0, #1
 800efba:	d1dd      	bne.n	800ef78 <_malloc_r+0x64>
 800efbc:	e7cf      	b.n	800ef5e <_malloc_r+0x4a>
 800efbe:	bf00      	nop
 800efc0:	20002134 	.word	0x20002134
 800efc4:	20002138 	.word	0x20002138

0800efc8 <iprintf>:
 800efc8:	b40f      	push	{r0, r1, r2, r3}
 800efca:	4b0a      	ldr	r3, [pc, #40]	; (800eff4 <iprintf+0x2c>)
 800efcc:	b513      	push	{r0, r1, r4, lr}
 800efce:	681c      	ldr	r4, [r3, #0]
 800efd0:	b124      	cbz	r4, 800efdc <iprintf+0x14>
 800efd2:	69a3      	ldr	r3, [r4, #24]
 800efd4:	b913      	cbnz	r3, 800efdc <iprintf+0x14>
 800efd6:	4620      	mov	r0, r4
 800efd8:	f000 f88c 	bl	800f0f4 <__sinit>
 800efdc:	ab05      	add	r3, sp, #20
 800efde:	9a04      	ldr	r2, [sp, #16]
 800efe0:	68a1      	ldr	r1, [r4, #8]
 800efe2:	9301      	str	r3, [sp, #4]
 800efe4:	4620      	mov	r0, r4
 800efe6:	f000 f95b 	bl	800f2a0 <_vfiprintf_r>
 800efea:	b002      	add	sp, #8
 800efec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eff0:	b004      	add	sp, #16
 800eff2:	4770      	bx	lr
 800eff4:	20000038 	.word	0x20000038

0800eff8 <putchar>:
 800eff8:	4b09      	ldr	r3, [pc, #36]	; (800f020 <putchar+0x28>)
 800effa:	b513      	push	{r0, r1, r4, lr}
 800effc:	681c      	ldr	r4, [r3, #0]
 800effe:	4601      	mov	r1, r0
 800f000:	b134      	cbz	r4, 800f010 <putchar+0x18>
 800f002:	69a3      	ldr	r3, [r4, #24]
 800f004:	b923      	cbnz	r3, 800f010 <putchar+0x18>
 800f006:	9001      	str	r0, [sp, #4]
 800f008:	4620      	mov	r0, r4
 800f00a:	f000 f873 	bl	800f0f4 <__sinit>
 800f00e:	9901      	ldr	r1, [sp, #4]
 800f010:	68a2      	ldr	r2, [r4, #8]
 800f012:	4620      	mov	r0, r4
 800f014:	b002      	add	sp, #8
 800f016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f01a:	f000 bc05 	b.w	800f828 <_putc_r>
 800f01e:	bf00      	nop
 800f020:	20000038 	.word	0x20000038

0800f024 <_sbrk_r>:
 800f024:	b538      	push	{r3, r4, r5, lr}
 800f026:	4d06      	ldr	r5, [pc, #24]	; (800f040 <_sbrk_r+0x1c>)
 800f028:	2300      	movs	r3, #0
 800f02a:	4604      	mov	r4, r0
 800f02c:	4608      	mov	r0, r1
 800f02e:	602b      	str	r3, [r5, #0]
 800f030:	f7f2 fa24 	bl	800147c <_sbrk>
 800f034:	1c43      	adds	r3, r0, #1
 800f036:	d102      	bne.n	800f03e <_sbrk_r+0x1a>
 800f038:	682b      	ldr	r3, [r5, #0]
 800f03a:	b103      	cbz	r3, 800f03e <_sbrk_r+0x1a>
 800f03c:	6023      	str	r3, [r4, #0]
 800f03e:	bd38      	pop	{r3, r4, r5, pc}
 800f040:	20005b34 	.word	0x20005b34

0800f044 <std>:
 800f044:	2300      	movs	r3, #0
 800f046:	b510      	push	{r4, lr}
 800f048:	4604      	mov	r4, r0
 800f04a:	e9c0 3300 	strd	r3, r3, [r0]
 800f04e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f052:	6083      	str	r3, [r0, #8]
 800f054:	8181      	strh	r1, [r0, #12]
 800f056:	6643      	str	r3, [r0, #100]	; 0x64
 800f058:	81c2      	strh	r2, [r0, #14]
 800f05a:	6183      	str	r3, [r0, #24]
 800f05c:	4619      	mov	r1, r3
 800f05e:	2208      	movs	r2, #8
 800f060:	305c      	adds	r0, #92	; 0x5c
 800f062:	f7ff feff 	bl	800ee64 <memset>
 800f066:	4b05      	ldr	r3, [pc, #20]	; (800f07c <std+0x38>)
 800f068:	6263      	str	r3, [r4, #36]	; 0x24
 800f06a:	4b05      	ldr	r3, [pc, #20]	; (800f080 <std+0x3c>)
 800f06c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f06e:	4b05      	ldr	r3, [pc, #20]	; (800f084 <std+0x40>)
 800f070:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f072:	4b05      	ldr	r3, [pc, #20]	; (800f088 <std+0x44>)
 800f074:	6224      	str	r4, [r4, #32]
 800f076:	6323      	str	r3, [r4, #48]	; 0x30
 800f078:	bd10      	pop	{r4, pc}
 800f07a:	bf00      	nop
 800f07c:	0800f8b9 	.word	0x0800f8b9
 800f080:	0800f8db 	.word	0x0800f8db
 800f084:	0800f913 	.word	0x0800f913
 800f088:	0800f937 	.word	0x0800f937

0800f08c <_cleanup_r>:
 800f08c:	4901      	ldr	r1, [pc, #4]	; (800f094 <_cleanup_r+0x8>)
 800f08e:	f000 b8af 	b.w	800f1f0 <_fwalk_reent>
 800f092:	bf00      	nop
 800f094:	0800fc11 	.word	0x0800fc11

0800f098 <__sfmoreglue>:
 800f098:	b570      	push	{r4, r5, r6, lr}
 800f09a:	1e4a      	subs	r2, r1, #1
 800f09c:	2568      	movs	r5, #104	; 0x68
 800f09e:	4355      	muls	r5, r2
 800f0a0:	460e      	mov	r6, r1
 800f0a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f0a6:	f7ff ff35 	bl	800ef14 <_malloc_r>
 800f0aa:	4604      	mov	r4, r0
 800f0ac:	b140      	cbz	r0, 800f0c0 <__sfmoreglue+0x28>
 800f0ae:	2100      	movs	r1, #0
 800f0b0:	e9c0 1600 	strd	r1, r6, [r0]
 800f0b4:	300c      	adds	r0, #12
 800f0b6:	60a0      	str	r0, [r4, #8]
 800f0b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f0bc:	f7ff fed2 	bl	800ee64 <memset>
 800f0c0:	4620      	mov	r0, r4
 800f0c2:	bd70      	pop	{r4, r5, r6, pc}

0800f0c4 <__sfp_lock_acquire>:
 800f0c4:	4801      	ldr	r0, [pc, #4]	; (800f0cc <__sfp_lock_acquire+0x8>)
 800f0c6:	f000 b8b3 	b.w	800f230 <__retarget_lock_acquire_recursive>
 800f0ca:	bf00      	nop
 800f0cc:	20005b30 	.word	0x20005b30

0800f0d0 <__sfp_lock_release>:
 800f0d0:	4801      	ldr	r0, [pc, #4]	; (800f0d8 <__sfp_lock_release+0x8>)
 800f0d2:	f000 b8ae 	b.w	800f232 <__retarget_lock_release_recursive>
 800f0d6:	bf00      	nop
 800f0d8:	20005b30 	.word	0x20005b30

0800f0dc <__sinit_lock_acquire>:
 800f0dc:	4801      	ldr	r0, [pc, #4]	; (800f0e4 <__sinit_lock_acquire+0x8>)
 800f0de:	f000 b8a7 	b.w	800f230 <__retarget_lock_acquire_recursive>
 800f0e2:	bf00      	nop
 800f0e4:	20005b2b 	.word	0x20005b2b

0800f0e8 <__sinit_lock_release>:
 800f0e8:	4801      	ldr	r0, [pc, #4]	; (800f0f0 <__sinit_lock_release+0x8>)
 800f0ea:	f000 b8a2 	b.w	800f232 <__retarget_lock_release_recursive>
 800f0ee:	bf00      	nop
 800f0f0:	20005b2b 	.word	0x20005b2b

0800f0f4 <__sinit>:
 800f0f4:	b510      	push	{r4, lr}
 800f0f6:	4604      	mov	r4, r0
 800f0f8:	f7ff fff0 	bl	800f0dc <__sinit_lock_acquire>
 800f0fc:	69a3      	ldr	r3, [r4, #24]
 800f0fe:	b11b      	cbz	r3, 800f108 <__sinit+0x14>
 800f100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f104:	f7ff bff0 	b.w	800f0e8 <__sinit_lock_release>
 800f108:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f10c:	6523      	str	r3, [r4, #80]	; 0x50
 800f10e:	4b13      	ldr	r3, [pc, #76]	; (800f15c <__sinit+0x68>)
 800f110:	4a13      	ldr	r2, [pc, #76]	; (800f160 <__sinit+0x6c>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	62a2      	str	r2, [r4, #40]	; 0x28
 800f116:	42a3      	cmp	r3, r4
 800f118:	bf04      	itt	eq
 800f11a:	2301      	moveq	r3, #1
 800f11c:	61a3      	streq	r3, [r4, #24]
 800f11e:	4620      	mov	r0, r4
 800f120:	f000 f820 	bl	800f164 <__sfp>
 800f124:	6060      	str	r0, [r4, #4]
 800f126:	4620      	mov	r0, r4
 800f128:	f000 f81c 	bl	800f164 <__sfp>
 800f12c:	60a0      	str	r0, [r4, #8]
 800f12e:	4620      	mov	r0, r4
 800f130:	f000 f818 	bl	800f164 <__sfp>
 800f134:	2200      	movs	r2, #0
 800f136:	60e0      	str	r0, [r4, #12]
 800f138:	2104      	movs	r1, #4
 800f13a:	6860      	ldr	r0, [r4, #4]
 800f13c:	f7ff ff82 	bl	800f044 <std>
 800f140:	68a0      	ldr	r0, [r4, #8]
 800f142:	2201      	movs	r2, #1
 800f144:	2109      	movs	r1, #9
 800f146:	f7ff ff7d 	bl	800f044 <std>
 800f14a:	68e0      	ldr	r0, [r4, #12]
 800f14c:	2202      	movs	r2, #2
 800f14e:	2112      	movs	r1, #18
 800f150:	f7ff ff78 	bl	800f044 <std>
 800f154:	2301      	movs	r3, #1
 800f156:	61a3      	str	r3, [r4, #24]
 800f158:	e7d2      	b.n	800f100 <__sinit+0xc>
 800f15a:	bf00      	nop
 800f15c:	08086e94 	.word	0x08086e94
 800f160:	0800f08d 	.word	0x0800f08d

0800f164 <__sfp>:
 800f164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f166:	4607      	mov	r7, r0
 800f168:	f7ff ffac 	bl	800f0c4 <__sfp_lock_acquire>
 800f16c:	4b1e      	ldr	r3, [pc, #120]	; (800f1e8 <__sfp+0x84>)
 800f16e:	681e      	ldr	r6, [r3, #0]
 800f170:	69b3      	ldr	r3, [r6, #24]
 800f172:	b913      	cbnz	r3, 800f17a <__sfp+0x16>
 800f174:	4630      	mov	r0, r6
 800f176:	f7ff ffbd 	bl	800f0f4 <__sinit>
 800f17a:	3648      	adds	r6, #72	; 0x48
 800f17c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f180:	3b01      	subs	r3, #1
 800f182:	d503      	bpl.n	800f18c <__sfp+0x28>
 800f184:	6833      	ldr	r3, [r6, #0]
 800f186:	b30b      	cbz	r3, 800f1cc <__sfp+0x68>
 800f188:	6836      	ldr	r6, [r6, #0]
 800f18a:	e7f7      	b.n	800f17c <__sfp+0x18>
 800f18c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f190:	b9d5      	cbnz	r5, 800f1c8 <__sfp+0x64>
 800f192:	4b16      	ldr	r3, [pc, #88]	; (800f1ec <__sfp+0x88>)
 800f194:	60e3      	str	r3, [r4, #12]
 800f196:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f19a:	6665      	str	r5, [r4, #100]	; 0x64
 800f19c:	f000 f847 	bl	800f22e <__retarget_lock_init_recursive>
 800f1a0:	f7ff ff96 	bl	800f0d0 <__sfp_lock_release>
 800f1a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f1a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f1ac:	6025      	str	r5, [r4, #0]
 800f1ae:	61a5      	str	r5, [r4, #24]
 800f1b0:	2208      	movs	r2, #8
 800f1b2:	4629      	mov	r1, r5
 800f1b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f1b8:	f7ff fe54 	bl	800ee64 <memset>
 800f1bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f1c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f1c4:	4620      	mov	r0, r4
 800f1c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1c8:	3468      	adds	r4, #104	; 0x68
 800f1ca:	e7d9      	b.n	800f180 <__sfp+0x1c>
 800f1cc:	2104      	movs	r1, #4
 800f1ce:	4638      	mov	r0, r7
 800f1d0:	f7ff ff62 	bl	800f098 <__sfmoreglue>
 800f1d4:	4604      	mov	r4, r0
 800f1d6:	6030      	str	r0, [r6, #0]
 800f1d8:	2800      	cmp	r0, #0
 800f1da:	d1d5      	bne.n	800f188 <__sfp+0x24>
 800f1dc:	f7ff ff78 	bl	800f0d0 <__sfp_lock_release>
 800f1e0:	230c      	movs	r3, #12
 800f1e2:	603b      	str	r3, [r7, #0]
 800f1e4:	e7ee      	b.n	800f1c4 <__sfp+0x60>
 800f1e6:	bf00      	nop
 800f1e8:	08086e94 	.word	0x08086e94
 800f1ec:	ffff0001 	.word	0xffff0001

0800f1f0 <_fwalk_reent>:
 800f1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1f4:	4606      	mov	r6, r0
 800f1f6:	4688      	mov	r8, r1
 800f1f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f1fc:	2700      	movs	r7, #0
 800f1fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f202:	f1b9 0901 	subs.w	r9, r9, #1
 800f206:	d505      	bpl.n	800f214 <_fwalk_reent+0x24>
 800f208:	6824      	ldr	r4, [r4, #0]
 800f20a:	2c00      	cmp	r4, #0
 800f20c:	d1f7      	bne.n	800f1fe <_fwalk_reent+0xe>
 800f20e:	4638      	mov	r0, r7
 800f210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f214:	89ab      	ldrh	r3, [r5, #12]
 800f216:	2b01      	cmp	r3, #1
 800f218:	d907      	bls.n	800f22a <_fwalk_reent+0x3a>
 800f21a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f21e:	3301      	adds	r3, #1
 800f220:	d003      	beq.n	800f22a <_fwalk_reent+0x3a>
 800f222:	4629      	mov	r1, r5
 800f224:	4630      	mov	r0, r6
 800f226:	47c0      	blx	r8
 800f228:	4307      	orrs	r7, r0
 800f22a:	3568      	adds	r5, #104	; 0x68
 800f22c:	e7e9      	b.n	800f202 <_fwalk_reent+0x12>

0800f22e <__retarget_lock_init_recursive>:
 800f22e:	4770      	bx	lr

0800f230 <__retarget_lock_acquire_recursive>:
 800f230:	4770      	bx	lr

0800f232 <__retarget_lock_release_recursive>:
 800f232:	4770      	bx	lr

0800f234 <__malloc_lock>:
 800f234:	4801      	ldr	r0, [pc, #4]	; (800f23c <__malloc_lock+0x8>)
 800f236:	f7ff bffb 	b.w	800f230 <__retarget_lock_acquire_recursive>
 800f23a:	bf00      	nop
 800f23c:	20005b2c 	.word	0x20005b2c

0800f240 <__malloc_unlock>:
 800f240:	4801      	ldr	r0, [pc, #4]	; (800f248 <__malloc_unlock+0x8>)
 800f242:	f7ff bff6 	b.w	800f232 <__retarget_lock_release_recursive>
 800f246:	bf00      	nop
 800f248:	20005b2c 	.word	0x20005b2c

0800f24c <__sfputc_r>:
 800f24c:	6893      	ldr	r3, [r2, #8]
 800f24e:	3b01      	subs	r3, #1
 800f250:	2b00      	cmp	r3, #0
 800f252:	b410      	push	{r4}
 800f254:	6093      	str	r3, [r2, #8]
 800f256:	da08      	bge.n	800f26a <__sfputc_r+0x1e>
 800f258:	6994      	ldr	r4, [r2, #24]
 800f25a:	42a3      	cmp	r3, r4
 800f25c:	db01      	blt.n	800f262 <__sfputc_r+0x16>
 800f25e:	290a      	cmp	r1, #10
 800f260:	d103      	bne.n	800f26a <__sfputc_r+0x1e>
 800f262:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f266:	f000 bb6b 	b.w	800f940 <__swbuf_r>
 800f26a:	6813      	ldr	r3, [r2, #0]
 800f26c:	1c58      	adds	r0, r3, #1
 800f26e:	6010      	str	r0, [r2, #0]
 800f270:	7019      	strb	r1, [r3, #0]
 800f272:	4608      	mov	r0, r1
 800f274:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f278:	4770      	bx	lr

0800f27a <__sfputs_r>:
 800f27a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f27c:	4606      	mov	r6, r0
 800f27e:	460f      	mov	r7, r1
 800f280:	4614      	mov	r4, r2
 800f282:	18d5      	adds	r5, r2, r3
 800f284:	42ac      	cmp	r4, r5
 800f286:	d101      	bne.n	800f28c <__sfputs_r+0x12>
 800f288:	2000      	movs	r0, #0
 800f28a:	e007      	b.n	800f29c <__sfputs_r+0x22>
 800f28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f290:	463a      	mov	r2, r7
 800f292:	4630      	mov	r0, r6
 800f294:	f7ff ffda 	bl	800f24c <__sfputc_r>
 800f298:	1c43      	adds	r3, r0, #1
 800f29a:	d1f3      	bne.n	800f284 <__sfputs_r+0xa>
 800f29c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f2a0 <_vfiprintf_r>:
 800f2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a4:	460d      	mov	r5, r1
 800f2a6:	b09d      	sub	sp, #116	; 0x74
 800f2a8:	4614      	mov	r4, r2
 800f2aa:	4698      	mov	r8, r3
 800f2ac:	4606      	mov	r6, r0
 800f2ae:	b118      	cbz	r0, 800f2b8 <_vfiprintf_r+0x18>
 800f2b0:	6983      	ldr	r3, [r0, #24]
 800f2b2:	b90b      	cbnz	r3, 800f2b8 <_vfiprintf_r+0x18>
 800f2b4:	f7ff ff1e 	bl	800f0f4 <__sinit>
 800f2b8:	4b89      	ldr	r3, [pc, #548]	; (800f4e0 <_vfiprintf_r+0x240>)
 800f2ba:	429d      	cmp	r5, r3
 800f2bc:	d11b      	bne.n	800f2f6 <_vfiprintf_r+0x56>
 800f2be:	6875      	ldr	r5, [r6, #4]
 800f2c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2c2:	07d9      	lsls	r1, r3, #31
 800f2c4:	d405      	bmi.n	800f2d2 <_vfiprintf_r+0x32>
 800f2c6:	89ab      	ldrh	r3, [r5, #12]
 800f2c8:	059a      	lsls	r2, r3, #22
 800f2ca:	d402      	bmi.n	800f2d2 <_vfiprintf_r+0x32>
 800f2cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2ce:	f7ff ffaf 	bl	800f230 <__retarget_lock_acquire_recursive>
 800f2d2:	89ab      	ldrh	r3, [r5, #12]
 800f2d4:	071b      	lsls	r3, r3, #28
 800f2d6:	d501      	bpl.n	800f2dc <_vfiprintf_r+0x3c>
 800f2d8:	692b      	ldr	r3, [r5, #16]
 800f2da:	b9eb      	cbnz	r3, 800f318 <_vfiprintf_r+0x78>
 800f2dc:	4629      	mov	r1, r5
 800f2de:	4630      	mov	r0, r6
 800f2e0:	f000 fb92 	bl	800fa08 <__swsetup_r>
 800f2e4:	b1c0      	cbz	r0, 800f318 <_vfiprintf_r+0x78>
 800f2e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2e8:	07dc      	lsls	r4, r3, #31
 800f2ea:	d50e      	bpl.n	800f30a <_vfiprintf_r+0x6a>
 800f2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f2f0:	b01d      	add	sp, #116	; 0x74
 800f2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2f6:	4b7b      	ldr	r3, [pc, #492]	; (800f4e4 <_vfiprintf_r+0x244>)
 800f2f8:	429d      	cmp	r5, r3
 800f2fa:	d101      	bne.n	800f300 <_vfiprintf_r+0x60>
 800f2fc:	68b5      	ldr	r5, [r6, #8]
 800f2fe:	e7df      	b.n	800f2c0 <_vfiprintf_r+0x20>
 800f300:	4b79      	ldr	r3, [pc, #484]	; (800f4e8 <_vfiprintf_r+0x248>)
 800f302:	429d      	cmp	r5, r3
 800f304:	bf08      	it	eq
 800f306:	68f5      	ldreq	r5, [r6, #12]
 800f308:	e7da      	b.n	800f2c0 <_vfiprintf_r+0x20>
 800f30a:	89ab      	ldrh	r3, [r5, #12]
 800f30c:	0598      	lsls	r0, r3, #22
 800f30e:	d4ed      	bmi.n	800f2ec <_vfiprintf_r+0x4c>
 800f310:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f312:	f7ff ff8e 	bl	800f232 <__retarget_lock_release_recursive>
 800f316:	e7e9      	b.n	800f2ec <_vfiprintf_r+0x4c>
 800f318:	2300      	movs	r3, #0
 800f31a:	9309      	str	r3, [sp, #36]	; 0x24
 800f31c:	2320      	movs	r3, #32
 800f31e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f322:	f8cd 800c 	str.w	r8, [sp, #12]
 800f326:	2330      	movs	r3, #48	; 0x30
 800f328:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f4ec <_vfiprintf_r+0x24c>
 800f32c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f330:	f04f 0901 	mov.w	r9, #1
 800f334:	4623      	mov	r3, r4
 800f336:	469a      	mov	sl, r3
 800f338:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f33c:	b10a      	cbz	r2, 800f342 <_vfiprintf_r+0xa2>
 800f33e:	2a25      	cmp	r2, #37	; 0x25
 800f340:	d1f9      	bne.n	800f336 <_vfiprintf_r+0x96>
 800f342:	ebba 0b04 	subs.w	fp, sl, r4
 800f346:	d00b      	beq.n	800f360 <_vfiprintf_r+0xc0>
 800f348:	465b      	mov	r3, fp
 800f34a:	4622      	mov	r2, r4
 800f34c:	4629      	mov	r1, r5
 800f34e:	4630      	mov	r0, r6
 800f350:	f7ff ff93 	bl	800f27a <__sfputs_r>
 800f354:	3001      	adds	r0, #1
 800f356:	f000 80aa 	beq.w	800f4ae <_vfiprintf_r+0x20e>
 800f35a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f35c:	445a      	add	r2, fp
 800f35e:	9209      	str	r2, [sp, #36]	; 0x24
 800f360:	f89a 3000 	ldrb.w	r3, [sl]
 800f364:	2b00      	cmp	r3, #0
 800f366:	f000 80a2 	beq.w	800f4ae <_vfiprintf_r+0x20e>
 800f36a:	2300      	movs	r3, #0
 800f36c:	f04f 32ff 	mov.w	r2, #4294967295
 800f370:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f374:	f10a 0a01 	add.w	sl, sl, #1
 800f378:	9304      	str	r3, [sp, #16]
 800f37a:	9307      	str	r3, [sp, #28]
 800f37c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f380:	931a      	str	r3, [sp, #104]	; 0x68
 800f382:	4654      	mov	r4, sl
 800f384:	2205      	movs	r2, #5
 800f386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f38a:	4858      	ldr	r0, [pc, #352]	; (800f4ec <_vfiprintf_r+0x24c>)
 800f38c:	f7f0 ff20 	bl	80001d0 <memchr>
 800f390:	9a04      	ldr	r2, [sp, #16]
 800f392:	b9d8      	cbnz	r0, 800f3cc <_vfiprintf_r+0x12c>
 800f394:	06d1      	lsls	r1, r2, #27
 800f396:	bf44      	itt	mi
 800f398:	2320      	movmi	r3, #32
 800f39a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f39e:	0713      	lsls	r3, r2, #28
 800f3a0:	bf44      	itt	mi
 800f3a2:	232b      	movmi	r3, #43	; 0x2b
 800f3a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f3a8:	f89a 3000 	ldrb.w	r3, [sl]
 800f3ac:	2b2a      	cmp	r3, #42	; 0x2a
 800f3ae:	d015      	beq.n	800f3dc <_vfiprintf_r+0x13c>
 800f3b0:	9a07      	ldr	r2, [sp, #28]
 800f3b2:	4654      	mov	r4, sl
 800f3b4:	2000      	movs	r0, #0
 800f3b6:	f04f 0c0a 	mov.w	ip, #10
 800f3ba:	4621      	mov	r1, r4
 800f3bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3c0:	3b30      	subs	r3, #48	; 0x30
 800f3c2:	2b09      	cmp	r3, #9
 800f3c4:	d94e      	bls.n	800f464 <_vfiprintf_r+0x1c4>
 800f3c6:	b1b0      	cbz	r0, 800f3f6 <_vfiprintf_r+0x156>
 800f3c8:	9207      	str	r2, [sp, #28]
 800f3ca:	e014      	b.n	800f3f6 <_vfiprintf_r+0x156>
 800f3cc:	eba0 0308 	sub.w	r3, r0, r8
 800f3d0:	fa09 f303 	lsl.w	r3, r9, r3
 800f3d4:	4313      	orrs	r3, r2
 800f3d6:	9304      	str	r3, [sp, #16]
 800f3d8:	46a2      	mov	sl, r4
 800f3da:	e7d2      	b.n	800f382 <_vfiprintf_r+0xe2>
 800f3dc:	9b03      	ldr	r3, [sp, #12]
 800f3de:	1d19      	adds	r1, r3, #4
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	9103      	str	r1, [sp, #12]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	bfbb      	ittet	lt
 800f3e8:	425b      	neglt	r3, r3
 800f3ea:	f042 0202 	orrlt.w	r2, r2, #2
 800f3ee:	9307      	strge	r3, [sp, #28]
 800f3f0:	9307      	strlt	r3, [sp, #28]
 800f3f2:	bfb8      	it	lt
 800f3f4:	9204      	strlt	r2, [sp, #16]
 800f3f6:	7823      	ldrb	r3, [r4, #0]
 800f3f8:	2b2e      	cmp	r3, #46	; 0x2e
 800f3fa:	d10c      	bne.n	800f416 <_vfiprintf_r+0x176>
 800f3fc:	7863      	ldrb	r3, [r4, #1]
 800f3fe:	2b2a      	cmp	r3, #42	; 0x2a
 800f400:	d135      	bne.n	800f46e <_vfiprintf_r+0x1ce>
 800f402:	9b03      	ldr	r3, [sp, #12]
 800f404:	1d1a      	adds	r2, r3, #4
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	9203      	str	r2, [sp, #12]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	bfb8      	it	lt
 800f40e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f412:	3402      	adds	r4, #2
 800f414:	9305      	str	r3, [sp, #20]
 800f416:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f4fc <_vfiprintf_r+0x25c>
 800f41a:	7821      	ldrb	r1, [r4, #0]
 800f41c:	2203      	movs	r2, #3
 800f41e:	4650      	mov	r0, sl
 800f420:	f7f0 fed6 	bl	80001d0 <memchr>
 800f424:	b140      	cbz	r0, 800f438 <_vfiprintf_r+0x198>
 800f426:	2340      	movs	r3, #64	; 0x40
 800f428:	eba0 000a 	sub.w	r0, r0, sl
 800f42c:	fa03 f000 	lsl.w	r0, r3, r0
 800f430:	9b04      	ldr	r3, [sp, #16]
 800f432:	4303      	orrs	r3, r0
 800f434:	3401      	adds	r4, #1
 800f436:	9304      	str	r3, [sp, #16]
 800f438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f43c:	482c      	ldr	r0, [pc, #176]	; (800f4f0 <_vfiprintf_r+0x250>)
 800f43e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f442:	2206      	movs	r2, #6
 800f444:	f7f0 fec4 	bl	80001d0 <memchr>
 800f448:	2800      	cmp	r0, #0
 800f44a:	d03f      	beq.n	800f4cc <_vfiprintf_r+0x22c>
 800f44c:	4b29      	ldr	r3, [pc, #164]	; (800f4f4 <_vfiprintf_r+0x254>)
 800f44e:	bb1b      	cbnz	r3, 800f498 <_vfiprintf_r+0x1f8>
 800f450:	9b03      	ldr	r3, [sp, #12]
 800f452:	3307      	adds	r3, #7
 800f454:	f023 0307 	bic.w	r3, r3, #7
 800f458:	3308      	adds	r3, #8
 800f45a:	9303      	str	r3, [sp, #12]
 800f45c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f45e:	443b      	add	r3, r7
 800f460:	9309      	str	r3, [sp, #36]	; 0x24
 800f462:	e767      	b.n	800f334 <_vfiprintf_r+0x94>
 800f464:	fb0c 3202 	mla	r2, ip, r2, r3
 800f468:	460c      	mov	r4, r1
 800f46a:	2001      	movs	r0, #1
 800f46c:	e7a5      	b.n	800f3ba <_vfiprintf_r+0x11a>
 800f46e:	2300      	movs	r3, #0
 800f470:	3401      	adds	r4, #1
 800f472:	9305      	str	r3, [sp, #20]
 800f474:	4619      	mov	r1, r3
 800f476:	f04f 0c0a 	mov.w	ip, #10
 800f47a:	4620      	mov	r0, r4
 800f47c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f480:	3a30      	subs	r2, #48	; 0x30
 800f482:	2a09      	cmp	r2, #9
 800f484:	d903      	bls.n	800f48e <_vfiprintf_r+0x1ee>
 800f486:	2b00      	cmp	r3, #0
 800f488:	d0c5      	beq.n	800f416 <_vfiprintf_r+0x176>
 800f48a:	9105      	str	r1, [sp, #20]
 800f48c:	e7c3      	b.n	800f416 <_vfiprintf_r+0x176>
 800f48e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f492:	4604      	mov	r4, r0
 800f494:	2301      	movs	r3, #1
 800f496:	e7f0      	b.n	800f47a <_vfiprintf_r+0x1da>
 800f498:	ab03      	add	r3, sp, #12
 800f49a:	9300      	str	r3, [sp, #0]
 800f49c:	462a      	mov	r2, r5
 800f49e:	4b16      	ldr	r3, [pc, #88]	; (800f4f8 <_vfiprintf_r+0x258>)
 800f4a0:	a904      	add	r1, sp, #16
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	f3af 8000 	nop.w
 800f4a8:	4607      	mov	r7, r0
 800f4aa:	1c78      	adds	r0, r7, #1
 800f4ac:	d1d6      	bne.n	800f45c <_vfiprintf_r+0x1bc>
 800f4ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4b0:	07d9      	lsls	r1, r3, #31
 800f4b2:	d405      	bmi.n	800f4c0 <_vfiprintf_r+0x220>
 800f4b4:	89ab      	ldrh	r3, [r5, #12]
 800f4b6:	059a      	lsls	r2, r3, #22
 800f4b8:	d402      	bmi.n	800f4c0 <_vfiprintf_r+0x220>
 800f4ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4bc:	f7ff feb9 	bl	800f232 <__retarget_lock_release_recursive>
 800f4c0:	89ab      	ldrh	r3, [r5, #12]
 800f4c2:	065b      	lsls	r3, r3, #25
 800f4c4:	f53f af12 	bmi.w	800f2ec <_vfiprintf_r+0x4c>
 800f4c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f4ca:	e711      	b.n	800f2f0 <_vfiprintf_r+0x50>
 800f4cc:	ab03      	add	r3, sp, #12
 800f4ce:	9300      	str	r3, [sp, #0]
 800f4d0:	462a      	mov	r2, r5
 800f4d2:	4b09      	ldr	r3, [pc, #36]	; (800f4f8 <_vfiprintf_r+0x258>)
 800f4d4:	a904      	add	r1, sp, #16
 800f4d6:	4630      	mov	r0, r6
 800f4d8:	f000 f880 	bl	800f5dc <_printf_i>
 800f4dc:	e7e4      	b.n	800f4a8 <_vfiprintf_r+0x208>
 800f4de:	bf00      	nop
 800f4e0:	08086eb8 	.word	0x08086eb8
 800f4e4:	08086ed8 	.word	0x08086ed8
 800f4e8:	08086e98 	.word	0x08086e98
 800f4ec:	08086ef8 	.word	0x08086ef8
 800f4f0:	08086f02 	.word	0x08086f02
 800f4f4:	00000000 	.word	0x00000000
 800f4f8:	0800f27b 	.word	0x0800f27b
 800f4fc:	08086efe 	.word	0x08086efe

0800f500 <_printf_common>:
 800f500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f504:	4616      	mov	r6, r2
 800f506:	4699      	mov	r9, r3
 800f508:	688a      	ldr	r2, [r1, #8]
 800f50a:	690b      	ldr	r3, [r1, #16]
 800f50c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f510:	4293      	cmp	r3, r2
 800f512:	bfb8      	it	lt
 800f514:	4613      	movlt	r3, r2
 800f516:	6033      	str	r3, [r6, #0]
 800f518:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f51c:	4607      	mov	r7, r0
 800f51e:	460c      	mov	r4, r1
 800f520:	b10a      	cbz	r2, 800f526 <_printf_common+0x26>
 800f522:	3301      	adds	r3, #1
 800f524:	6033      	str	r3, [r6, #0]
 800f526:	6823      	ldr	r3, [r4, #0]
 800f528:	0699      	lsls	r1, r3, #26
 800f52a:	bf42      	ittt	mi
 800f52c:	6833      	ldrmi	r3, [r6, #0]
 800f52e:	3302      	addmi	r3, #2
 800f530:	6033      	strmi	r3, [r6, #0]
 800f532:	6825      	ldr	r5, [r4, #0]
 800f534:	f015 0506 	ands.w	r5, r5, #6
 800f538:	d106      	bne.n	800f548 <_printf_common+0x48>
 800f53a:	f104 0a19 	add.w	sl, r4, #25
 800f53e:	68e3      	ldr	r3, [r4, #12]
 800f540:	6832      	ldr	r2, [r6, #0]
 800f542:	1a9b      	subs	r3, r3, r2
 800f544:	42ab      	cmp	r3, r5
 800f546:	dc26      	bgt.n	800f596 <_printf_common+0x96>
 800f548:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f54c:	1e13      	subs	r3, r2, #0
 800f54e:	6822      	ldr	r2, [r4, #0]
 800f550:	bf18      	it	ne
 800f552:	2301      	movne	r3, #1
 800f554:	0692      	lsls	r2, r2, #26
 800f556:	d42b      	bmi.n	800f5b0 <_printf_common+0xb0>
 800f558:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f55c:	4649      	mov	r1, r9
 800f55e:	4638      	mov	r0, r7
 800f560:	47c0      	blx	r8
 800f562:	3001      	adds	r0, #1
 800f564:	d01e      	beq.n	800f5a4 <_printf_common+0xa4>
 800f566:	6823      	ldr	r3, [r4, #0]
 800f568:	68e5      	ldr	r5, [r4, #12]
 800f56a:	6832      	ldr	r2, [r6, #0]
 800f56c:	f003 0306 	and.w	r3, r3, #6
 800f570:	2b04      	cmp	r3, #4
 800f572:	bf08      	it	eq
 800f574:	1aad      	subeq	r5, r5, r2
 800f576:	68a3      	ldr	r3, [r4, #8]
 800f578:	6922      	ldr	r2, [r4, #16]
 800f57a:	bf0c      	ite	eq
 800f57c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f580:	2500      	movne	r5, #0
 800f582:	4293      	cmp	r3, r2
 800f584:	bfc4      	itt	gt
 800f586:	1a9b      	subgt	r3, r3, r2
 800f588:	18ed      	addgt	r5, r5, r3
 800f58a:	2600      	movs	r6, #0
 800f58c:	341a      	adds	r4, #26
 800f58e:	42b5      	cmp	r5, r6
 800f590:	d11a      	bne.n	800f5c8 <_printf_common+0xc8>
 800f592:	2000      	movs	r0, #0
 800f594:	e008      	b.n	800f5a8 <_printf_common+0xa8>
 800f596:	2301      	movs	r3, #1
 800f598:	4652      	mov	r2, sl
 800f59a:	4649      	mov	r1, r9
 800f59c:	4638      	mov	r0, r7
 800f59e:	47c0      	blx	r8
 800f5a0:	3001      	adds	r0, #1
 800f5a2:	d103      	bne.n	800f5ac <_printf_common+0xac>
 800f5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f5a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5ac:	3501      	adds	r5, #1
 800f5ae:	e7c6      	b.n	800f53e <_printf_common+0x3e>
 800f5b0:	18e1      	adds	r1, r4, r3
 800f5b2:	1c5a      	adds	r2, r3, #1
 800f5b4:	2030      	movs	r0, #48	; 0x30
 800f5b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f5ba:	4422      	add	r2, r4
 800f5bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f5c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f5c4:	3302      	adds	r3, #2
 800f5c6:	e7c7      	b.n	800f558 <_printf_common+0x58>
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	4622      	mov	r2, r4
 800f5cc:	4649      	mov	r1, r9
 800f5ce:	4638      	mov	r0, r7
 800f5d0:	47c0      	blx	r8
 800f5d2:	3001      	adds	r0, #1
 800f5d4:	d0e6      	beq.n	800f5a4 <_printf_common+0xa4>
 800f5d6:	3601      	adds	r6, #1
 800f5d8:	e7d9      	b.n	800f58e <_printf_common+0x8e>
	...

0800f5dc <_printf_i>:
 800f5dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f5e0:	460c      	mov	r4, r1
 800f5e2:	4691      	mov	r9, r2
 800f5e4:	7e27      	ldrb	r7, [r4, #24]
 800f5e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f5e8:	2f78      	cmp	r7, #120	; 0x78
 800f5ea:	4680      	mov	r8, r0
 800f5ec:	469a      	mov	sl, r3
 800f5ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f5f2:	d807      	bhi.n	800f604 <_printf_i+0x28>
 800f5f4:	2f62      	cmp	r7, #98	; 0x62
 800f5f6:	d80a      	bhi.n	800f60e <_printf_i+0x32>
 800f5f8:	2f00      	cmp	r7, #0
 800f5fa:	f000 80d8 	beq.w	800f7ae <_printf_i+0x1d2>
 800f5fe:	2f58      	cmp	r7, #88	; 0x58
 800f600:	f000 80a3 	beq.w	800f74a <_printf_i+0x16e>
 800f604:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f608:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f60c:	e03a      	b.n	800f684 <_printf_i+0xa8>
 800f60e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f612:	2b15      	cmp	r3, #21
 800f614:	d8f6      	bhi.n	800f604 <_printf_i+0x28>
 800f616:	a001      	add	r0, pc, #4	; (adr r0, 800f61c <_printf_i+0x40>)
 800f618:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f61c:	0800f675 	.word	0x0800f675
 800f620:	0800f689 	.word	0x0800f689
 800f624:	0800f605 	.word	0x0800f605
 800f628:	0800f605 	.word	0x0800f605
 800f62c:	0800f605 	.word	0x0800f605
 800f630:	0800f605 	.word	0x0800f605
 800f634:	0800f689 	.word	0x0800f689
 800f638:	0800f605 	.word	0x0800f605
 800f63c:	0800f605 	.word	0x0800f605
 800f640:	0800f605 	.word	0x0800f605
 800f644:	0800f605 	.word	0x0800f605
 800f648:	0800f795 	.word	0x0800f795
 800f64c:	0800f6b9 	.word	0x0800f6b9
 800f650:	0800f777 	.word	0x0800f777
 800f654:	0800f605 	.word	0x0800f605
 800f658:	0800f605 	.word	0x0800f605
 800f65c:	0800f7b7 	.word	0x0800f7b7
 800f660:	0800f605 	.word	0x0800f605
 800f664:	0800f6b9 	.word	0x0800f6b9
 800f668:	0800f605 	.word	0x0800f605
 800f66c:	0800f605 	.word	0x0800f605
 800f670:	0800f77f 	.word	0x0800f77f
 800f674:	680b      	ldr	r3, [r1, #0]
 800f676:	1d1a      	adds	r2, r3, #4
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	600a      	str	r2, [r1, #0]
 800f67c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f680:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f684:	2301      	movs	r3, #1
 800f686:	e0a3      	b.n	800f7d0 <_printf_i+0x1f4>
 800f688:	6825      	ldr	r5, [r4, #0]
 800f68a:	6808      	ldr	r0, [r1, #0]
 800f68c:	062e      	lsls	r6, r5, #24
 800f68e:	f100 0304 	add.w	r3, r0, #4
 800f692:	d50a      	bpl.n	800f6aa <_printf_i+0xce>
 800f694:	6805      	ldr	r5, [r0, #0]
 800f696:	600b      	str	r3, [r1, #0]
 800f698:	2d00      	cmp	r5, #0
 800f69a:	da03      	bge.n	800f6a4 <_printf_i+0xc8>
 800f69c:	232d      	movs	r3, #45	; 0x2d
 800f69e:	426d      	negs	r5, r5
 800f6a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6a4:	485e      	ldr	r0, [pc, #376]	; (800f820 <_printf_i+0x244>)
 800f6a6:	230a      	movs	r3, #10
 800f6a8:	e019      	b.n	800f6de <_printf_i+0x102>
 800f6aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f6ae:	6805      	ldr	r5, [r0, #0]
 800f6b0:	600b      	str	r3, [r1, #0]
 800f6b2:	bf18      	it	ne
 800f6b4:	b22d      	sxthne	r5, r5
 800f6b6:	e7ef      	b.n	800f698 <_printf_i+0xbc>
 800f6b8:	680b      	ldr	r3, [r1, #0]
 800f6ba:	6825      	ldr	r5, [r4, #0]
 800f6bc:	1d18      	adds	r0, r3, #4
 800f6be:	6008      	str	r0, [r1, #0]
 800f6c0:	0628      	lsls	r0, r5, #24
 800f6c2:	d501      	bpl.n	800f6c8 <_printf_i+0xec>
 800f6c4:	681d      	ldr	r5, [r3, #0]
 800f6c6:	e002      	b.n	800f6ce <_printf_i+0xf2>
 800f6c8:	0669      	lsls	r1, r5, #25
 800f6ca:	d5fb      	bpl.n	800f6c4 <_printf_i+0xe8>
 800f6cc:	881d      	ldrh	r5, [r3, #0]
 800f6ce:	4854      	ldr	r0, [pc, #336]	; (800f820 <_printf_i+0x244>)
 800f6d0:	2f6f      	cmp	r7, #111	; 0x6f
 800f6d2:	bf0c      	ite	eq
 800f6d4:	2308      	moveq	r3, #8
 800f6d6:	230a      	movne	r3, #10
 800f6d8:	2100      	movs	r1, #0
 800f6da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f6de:	6866      	ldr	r6, [r4, #4]
 800f6e0:	60a6      	str	r6, [r4, #8]
 800f6e2:	2e00      	cmp	r6, #0
 800f6e4:	bfa2      	ittt	ge
 800f6e6:	6821      	ldrge	r1, [r4, #0]
 800f6e8:	f021 0104 	bicge.w	r1, r1, #4
 800f6ec:	6021      	strge	r1, [r4, #0]
 800f6ee:	b90d      	cbnz	r5, 800f6f4 <_printf_i+0x118>
 800f6f0:	2e00      	cmp	r6, #0
 800f6f2:	d04d      	beq.n	800f790 <_printf_i+0x1b4>
 800f6f4:	4616      	mov	r6, r2
 800f6f6:	fbb5 f1f3 	udiv	r1, r5, r3
 800f6fa:	fb03 5711 	mls	r7, r3, r1, r5
 800f6fe:	5dc7      	ldrb	r7, [r0, r7]
 800f700:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f704:	462f      	mov	r7, r5
 800f706:	42bb      	cmp	r3, r7
 800f708:	460d      	mov	r5, r1
 800f70a:	d9f4      	bls.n	800f6f6 <_printf_i+0x11a>
 800f70c:	2b08      	cmp	r3, #8
 800f70e:	d10b      	bne.n	800f728 <_printf_i+0x14c>
 800f710:	6823      	ldr	r3, [r4, #0]
 800f712:	07df      	lsls	r7, r3, #31
 800f714:	d508      	bpl.n	800f728 <_printf_i+0x14c>
 800f716:	6923      	ldr	r3, [r4, #16]
 800f718:	6861      	ldr	r1, [r4, #4]
 800f71a:	4299      	cmp	r1, r3
 800f71c:	bfde      	ittt	le
 800f71e:	2330      	movle	r3, #48	; 0x30
 800f720:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f724:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f728:	1b92      	subs	r2, r2, r6
 800f72a:	6122      	str	r2, [r4, #16]
 800f72c:	f8cd a000 	str.w	sl, [sp]
 800f730:	464b      	mov	r3, r9
 800f732:	aa03      	add	r2, sp, #12
 800f734:	4621      	mov	r1, r4
 800f736:	4640      	mov	r0, r8
 800f738:	f7ff fee2 	bl	800f500 <_printf_common>
 800f73c:	3001      	adds	r0, #1
 800f73e:	d14c      	bne.n	800f7da <_printf_i+0x1fe>
 800f740:	f04f 30ff 	mov.w	r0, #4294967295
 800f744:	b004      	add	sp, #16
 800f746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f74a:	4835      	ldr	r0, [pc, #212]	; (800f820 <_printf_i+0x244>)
 800f74c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f750:	6823      	ldr	r3, [r4, #0]
 800f752:	680e      	ldr	r6, [r1, #0]
 800f754:	061f      	lsls	r7, r3, #24
 800f756:	f856 5b04 	ldr.w	r5, [r6], #4
 800f75a:	600e      	str	r6, [r1, #0]
 800f75c:	d514      	bpl.n	800f788 <_printf_i+0x1ac>
 800f75e:	07d9      	lsls	r1, r3, #31
 800f760:	bf44      	itt	mi
 800f762:	f043 0320 	orrmi.w	r3, r3, #32
 800f766:	6023      	strmi	r3, [r4, #0]
 800f768:	b91d      	cbnz	r5, 800f772 <_printf_i+0x196>
 800f76a:	6823      	ldr	r3, [r4, #0]
 800f76c:	f023 0320 	bic.w	r3, r3, #32
 800f770:	6023      	str	r3, [r4, #0]
 800f772:	2310      	movs	r3, #16
 800f774:	e7b0      	b.n	800f6d8 <_printf_i+0xfc>
 800f776:	6823      	ldr	r3, [r4, #0]
 800f778:	f043 0320 	orr.w	r3, r3, #32
 800f77c:	6023      	str	r3, [r4, #0]
 800f77e:	2378      	movs	r3, #120	; 0x78
 800f780:	4828      	ldr	r0, [pc, #160]	; (800f824 <_printf_i+0x248>)
 800f782:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f786:	e7e3      	b.n	800f750 <_printf_i+0x174>
 800f788:	065e      	lsls	r6, r3, #25
 800f78a:	bf48      	it	mi
 800f78c:	b2ad      	uxthmi	r5, r5
 800f78e:	e7e6      	b.n	800f75e <_printf_i+0x182>
 800f790:	4616      	mov	r6, r2
 800f792:	e7bb      	b.n	800f70c <_printf_i+0x130>
 800f794:	680b      	ldr	r3, [r1, #0]
 800f796:	6826      	ldr	r6, [r4, #0]
 800f798:	6960      	ldr	r0, [r4, #20]
 800f79a:	1d1d      	adds	r5, r3, #4
 800f79c:	600d      	str	r5, [r1, #0]
 800f79e:	0635      	lsls	r5, r6, #24
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	d501      	bpl.n	800f7a8 <_printf_i+0x1cc>
 800f7a4:	6018      	str	r0, [r3, #0]
 800f7a6:	e002      	b.n	800f7ae <_printf_i+0x1d2>
 800f7a8:	0671      	lsls	r1, r6, #25
 800f7aa:	d5fb      	bpl.n	800f7a4 <_printf_i+0x1c8>
 800f7ac:	8018      	strh	r0, [r3, #0]
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	6123      	str	r3, [r4, #16]
 800f7b2:	4616      	mov	r6, r2
 800f7b4:	e7ba      	b.n	800f72c <_printf_i+0x150>
 800f7b6:	680b      	ldr	r3, [r1, #0]
 800f7b8:	1d1a      	adds	r2, r3, #4
 800f7ba:	600a      	str	r2, [r1, #0]
 800f7bc:	681e      	ldr	r6, [r3, #0]
 800f7be:	6862      	ldr	r2, [r4, #4]
 800f7c0:	2100      	movs	r1, #0
 800f7c2:	4630      	mov	r0, r6
 800f7c4:	f7f0 fd04 	bl	80001d0 <memchr>
 800f7c8:	b108      	cbz	r0, 800f7ce <_printf_i+0x1f2>
 800f7ca:	1b80      	subs	r0, r0, r6
 800f7cc:	6060      	str	r0, [r4, #4]
 800f7ce:	6863      	ldr	r3, [r4, #4]
 800f7d0:	6123      	str	r3, [r4, #16]
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7d8:	e7a8      	b.n	800f72c <_printf_i+0x150>
 800f7da:	6923      	ldr	r3, [r4, #16]
 800f7dc:	4632      	mov	r2, r6
 800f7de:	4649      	mov	r1, r9
 800f7e0:	4640      	mov	r0, r8
 800f7e2:	47d0      	blx	sl
 800f7e4:	3001      	adds	r0, #1
 800f7e6:	d0ab      	beq.n	800f740 <_printf_i+0x164>
 800f7e8:	6823      	ldr	r3, [r4, #0]
 800f7ea:	079b      	lsls	r3, r3, #30
 800f7ec:	d413      	bmi.n	800f816 <_printf_i+0x23a>
 800f7ee:	68e0      	ldr	r0, [r4, #12]
 800f7f0:	9b03      	ldr	r3, [sp, #12]
 800f7f2:	4298      	cmp	r0, r3
 800f7f4:	bfb8      	it	lt
 800f7f6:	4618      	movlt	r0, r3
 800f7f8:	e7a4      	b.n	800f744 <_printf_i+0x168>
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	4632      	mov	r2, r6
 800f7fe:	4649      	mov	r1, r9
 800f800:	4640      	mov	r0, r8
 800f802:	47d0      	blx	sl
 800f804:	3001      	adds	r0, #1
 800f806:	d09b      	beq.n	800f740 <_printf_i+0x164>
 800f808:	3501      	adds	r5, #1
 800f80a:	68e3      	ldr	r3, [r4, #12]
 800f80c:	9903      	ldr	r1, [sp, #12]
 800f80e:	1a5b      	subs	r3, r3, r1
 800f810:	42ab      	cmp	r3, r5
 800f812:	dcf2      	bgt.n	800f7fa <_printf_i+0x21e>
 800f814:	e7eb      	b.n	800f7ee <_printf_i+0x212>
 800f816:	2500      	movs	r5, #0
 800f818:	f104 0619 	add.w	r6, r4, #25
 800f81c:	e7f5      	b.n	800f80a <_printf_i+0x22e>
 800f81e:	bf00      	nop
 800f820:	08086f09 	.word	0x08086f09
 800f824:	08086f1a 	.word	0x08086f1a

0800f828 <_putc_r>:
 800f828:	b570      	push	{r4, r5, r6, lr}
 800f82a:	460d      	mov	r5, r1
 800f82c:	4614      	mov	r4, r2
 800f82e:	4606      	mov	r6, r0
 800f830:	b118      	cbz	r0, 800f83a <_putc_r+0x12>
 800f832:	6983      	ldr	r3, [r0, #24]
 800f834:	b90b      	cbnz	r3, 800f83a <_putc_r+0x12>
 800f836:	f7ff fc5d 	bl	800f0f4 <__sinit>
 800f83a:	4b1c      	ldr	r3, [pc, #112]	; (800f8ac <_putc_r+0x84>)
 800f83c:	429c      	cmp	r4, r3
 800f83e:	d124      	bne.n	800f88a <_putc_r+0x62>
 800f840:	6874      	ldr	r4, [r6, #4]
 800f842:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f844:	07d8      	lsls	r0, r3, #31
 800f846:	d405      	bmi.n	800f854 <_putc_r+0x2c>
 800f848:	89a3      	ldrh	r3, [r4, #12]
 800f84a:	0599      	lsls	r1, r3, #22
 800f84c:	d402      	bmi.n	800f854 <_putc_r+0x2c>
 800f84e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f850:	f7ff fcee 	bl	800f230 <__retarget_lock_acquire_recursive>
 800f854:	68a3      	ldr	r3, [r4, #8]
 800f856:	3b01      	subs	r3, #1
 800f858:	2b00      	cmp	r3, #0
 800f85a:	60a3      	str	r3, [r4, #8]
 800f85c:	da05      	bge.n	800f86a <_putc_r+0x42>
 800f85e:	69a2      	ldr	r2, [r4, #24]
 800f860:	4293      	cmp	r3, r2
 800f862:	db1c      	blt.n	800f89e <_putc_r+0x76>
 800f864:	b2eb      	uxtb	r3, r5
 800f866:	2b0a      	cmp	r3, #10
 800f868:	d019      	beq.n	800f89e <_putc_r+0x76>
 800f86a:	6823      	ldr	r3, [r4, #0]
 800f86c:	1c5a      	adds	r2, r3, #1
 800f86e:	6022      	str	r2, [r4, #0]
 800f870:	701d      	strb	r5, [r3, #0]
 800f872:	b2ed      	uxtb	r5, r5
 800f874:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f876:	07da      	lsls	r2, r3, #31
 800f878:	d405      	bmi.n	800f886 <_putc_r+0x5e>
 800f87a:	89a3      	ldrh	r3, [r4, #12]
 800f87c:	059b      	lsls	r3, r3, #22
 800f87e:	d402      	bmi.n	800f886 <_putc_r+0x5e>
 800f880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f882:	f7ff fcd6 	bl	800f232 <__retarget_lock_release_recursive>
 800f886:	4628      	mov	r0, r5
 800f888:	bd70      	pop	{r4, r5, r6, pc}
 800f88a:	4b09      	ldr	r3, [pc, #36]	; (800f8b0 <_putc_r+0x88>)
 800f88c:	429c      	cmp	r4, r3
 800f88e:	d101      	bne.n	800f894 <_putc_r+0x6c>
 800f890:	68b4      	ldr	r4, [r6, #8]
 800f892:	e7d6      	b.n	800f842 <_putc_r+0x1a>
 800f894:	4b07      	ldr	r3, [pc, #28]	; (800f8b4 <_putc_r+0x8c>)
 800f896:	429c      	cmp	r4, r3
 800f898:	bf08      	it	eq
 800f89a:	68f4      	ldreq	r4, [r6, #12]
 800f89c:	e7d1      	b.n	800f842 <_putc_r+0x1a>
 800f89e:	4629      	mov	r1, r5
 800f8a0:	4622      	mov	r2, r4
 800f8a2:	4630      	mov	r0, r6
 800f8a4:	f000 f84c 	bl	800f940 <__swbuf_r>
 800f8a8:	4605      	mov	r5, r0
 800f8aa:	e7e3      	b.n	800f874 <_putc_r+0x4c>
 800f8ac:	08086eb8 	.word	0x08086eb8
 800f8b0:	08086ed8 	.word	0x08086ed8
 800f8b4:	08086e98 	.word	0x08086e98

0800f8b8 <__sread>:
 800f8b8:	b510      	push	{r4, lr}
 800f8ba:	460c      	mov	r4, r1
 800f8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8c0:	f000 fa58 	bl	800fd74 <_read_r>
 800f8c4:	2800      	cmp	r0, #0
 800f8c6:	bfab      	itete	ge
 800f8c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f8ca:	89a3      	ldrhlt	r3, [r4, #12]
 800f8cc:	181b      	addge	r3, r3, r0
 800f8ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f8d2:	bfac      	ite	ge
 800f8d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f8d6:	81a3      	strhlt	r3, [r4, #12]
 800f8d8:	bd10      	pop	{r4, pc}

0800f8da <__swrite>:
 800f8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8de:	461f      	mov	r7, r3
 800f8e0:	898b      	ldrh	r3, [r1, #12]
 800f8e2:	05db      	lsls	r3, r3, #23
 800f8e4:	4605      	mov	r5, r0
 800f8e6:	460c      	mov	r4, r1
 800f8e8:	4616      	mov	r6, r2
 800f8ea:	d505      	bpl.n	800f8f8 <__swrite+0x1e>
 800f8ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8f0:	2302      	movs	r3, #2
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	f000 f9c8 	bl	800fc88 <_lseek_r>
 800f8f8:	89a3      	ldrh	r3, [r4, #12]
 800f8fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f902:	81a3      	strh	r3, [r4, #12]
 800f904:	4632      	mov	r2, r6
 800f906:	463b      	mov	r3, r7
 800f908:	4628      	mov	r0, r5
 800f90a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f90e:	f000 b869 	b.w	800f9e4 <_write_r>

0800f912 <__sseek>:
 800f912:	b510      	push	{r4, lr}
 800f914:	460c      	mov	r4, r1
 800f916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f91a:	f000 f9b5 	bl	800fc88 <_lseek_r>
 800f91e:	1c43      	adds	r3, r0, #1
 800f920:	89a3      	ldrh	r3, [r4, #12]
 800f922:	bf15      	itete	ne
 800f924:	6560      	strne	r0, [r4, #84]	; 0x54
 800f926:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f92a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f92e:	81a3      	strheq	r3, [r4, #12]
 800f930:	bf18      	it	ne
 800f932:	81a3      	strhne	r3, [r4, #12]
 800f934:	bd10      	pop	{r4, pc}

0800f936 <__sclose>:
 800f936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f93a:	f000 b8d3 	b.w	800fae4 <_close_r>
	...

0800f940 <__swbuf_r>:
 800f940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f942:	460e      	mov	r6, r1
 800f944:	4614      	mov	r4, r2
 800f946:	4605      	mov	r5, r0
 800f948:	b118      	cbz	r0, 800f952 <__swbuf_r+0x12>
 800f94a:	6983      	ldr	r3, [r0, #24]
 800f94c:	b90b      	cbnz	r3, 800f952 <__swbuf_r+0x12>
 800f94e:	f7ff fbd1 	bl	800f0f4 <__sinit>
 800f952:	4b21      	ldr	r3, [pc, #132]	; (800f9d8 <__swbuf_r+0x98>)
 800f954:	429c      	cmp	r4, r3
 800f956:	d12b      	bne.n	800f9b0 <__swbuf_r+0x70>
 800f958:	686c      	ldr	r4, [r5, #4]
 800f95a:	69a3      	ldr	r3, [r4, #24]
 800f95c:	60a3      	str	r3, [r4, #8]
 800f95e:	89a3      	ldrh	r3, [r4, #12]
 800f960:	071a      	lsls	r2, r3, #28
 800f962:	d52f      	bpl.n	800f9c4 <__swbuf_r+0x84>
 800f964:	6923      	ldr	r3, [r4, #16]
 800f966:	b36b      	cbz	r3, 800f9c4 <__swbuf_r+0x84>
 800f968:	6923      	ldr	r3, [r4, #16]
 800f96a:	6820      	ldr	r0, [r4, #0]
 800f96c:	1ac0      	subs	r0, r0, r3
 800f96e:	6963      	ldr	r3, [r4, #20]
 800f970:	b2f6      	uxtb	r6, r6
 800f972:	4283      	cmp	r3, r0
 800f974:	4637      	mov	r7, r6
 800f976:	dc04      	bgt.n	800f982 <__swbuf_r+0x42>
 800f978:	4621      	mov	r1, r4
 800f97a:	4628      	mov	r0, r5
 800f97c:	f000 f948 	bl	800fc10 <_fflush_r>
 800f980:	bb30      	cbnz	r0, 800f9d0 <__swbuf_r+0x90>
 800f982:	68a3      	ldr	r3, [r4, #8]
 800f984:	3b01      	subs	r3, #1
 800f986:	60a3      	str	r3, [r4, #8]
 800f988:	6823      	ldr	r3, [r4, #0]
 800f98a:	1c5a      	adds	r2, r3, #1
 800f98c:	6022      	str	r2, [r4, #0]
 800f98e:	701e      	strb	r6, [r3, #0]
 800f990:	6963      	ldr	r3, [r4, #20]
 800f992:	3001      	adds	r0, #1
 800f994:	4283      	cmp	r3, r0
 800f996:	d004      	beq.n	800f9a2 <__swbuf_r+0x62>
 800f998:	89a3      	ldrh	r3, [r4, #12]
 800f99a:	07db      	lsls	r3, r3, #31
 800f99c:	d506      	bpl.n	800f9ac <__swbuf_r+0x6c>
 800f99e:	2e0a      	cmp	r6, #10
 800f9a0:	d104      	bne.n	800f9ac <__swbuf_r+0x6c>
 800f9a2:	4621      	mov	r1, r4
 800f9a4:	4628      	mov	r0, r5
 800f9a6:	f000 f933 	bl	800fc10 <_fflush_r>
 800f9aa:	b988      	cbnz	r0, 800f9d0 <__swbuf_r+0x90>
 800f9ac:	4638      	mov	r0, r7
 800f9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9b0:	4b0a      	ldr	r3, [pc, #40]	; (800f9dc <__swbuf_r+0x9c>)
 800f9b2:	429c      	cmp	r4, r3
 800f9b4:	d101      	bne.n	800f9ba <__swbuf_r+0x7a>
 800f9b6:	68ac      	ldr	r4, [r5, #8]
 800f9b8:	e7cf      	b.n	800f95a <__swbuf_r+0x1a>
 800f9ba:	4b09      	ldr	r3, [pc, #36]	; (800f9e0 <__swbuf_r+0xa0>)
 800f9bc:	429c      	cmp	r4, r3
 800f9be:	bf08      	it	eq
 800f9c0:	68ec      	ldreq	r4, [r5, #12]
 800f9c2:	e7ca      	b.n	800f95a <__swbuf_r+0x1a>
 800f9c4:	4621      	mov	r1, r4
 800f9c6:	4628      	mov	r0, r5
 800f9c8:	f000 f81e 	bl	800fa08 <__swsetup_r>
 800f9cc:	2800      	cmp	r0, #0
 800f9ce:	d0cb      	beq.n	800f968 <__swbuf_r+0x28>
 800f9d0:	f04f 37ff 	mov.w	r7, #4294967295
 800f9d4:	e7ea      	b.n	800f9ac <__swbuf_r+0x6c>
 800f9d6:	bf00      	nop
 800f9d8:	08086eb8 	.word	0x08086eb8
 800f9dc:	08086ed8 	.word	0x08086ed8
 800f9e0:	08086e98 	.word	0x08086e98

0800f9e4 <_write_r>:
 800f9e4:	b538      	push	{r3, r4, r5, lr}
 800f9e6:	4d07      	ldr	r5, [pc, #28]	; (800fa04 <_write_r+0x20>)
 800f9e8:	4604      	mov	r4, r0
 800f9ea:	4608      	mov	r0, r1
 800f9ec:	4611      	mov	r1, r2
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	602a      	str	r2, [r5, #0]
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	f7f1 fcf1 	bl	80013da <_write>
 800f9f8:	1c43      	adds	r3, r0, #1
 800f9fa:	d102      	bne.n	800fa02 <_write_r+0x1e>
 800f9fc:	682b      	ldr	r3, [r5, #0]
 800f9fe:	b103      	cbz	r3, 800fa02 <_write_r+0x1e>
 800fa00:	6023      	str	r3, [r4, #0]
 800fa02:	bd38      	pop	{r3, r4, r5, pc}
 800fa04:	20005b34 	.word	0x20005b34

0800fa08 <__swsetup_r>:
 800fa08:	4b32      	ldr	r3, [pc, #200]	; (800fad4 <__swsetup_r+0xcc>)
 800fa0a:	b570      	push	{r4, r5, r6, lr}
 800fa0c:	681d      	ldr	r5, [r3, #0]
 800fa0e:	4606      	mov	r6, r0
 800fa10:	460c      	mov	r4, r1
 800fa12:	b125      	cbz	r5, 800fa1e <__swsetup_r+0x16>
 800fa14:	69ab      	ldr	r3, [r5, #24]
 800fa16:	b913      	cbnz	r3, 800fa1e <__swsetup_r+0x16>
 800fa18:	4628      	mov	r0, r5
 800fa1a:	f7ff fb6b 	bl	800f0f4 <__sinit>
 800fa1e:	4b2e      	ldr	r3, [pc, #184]	; (800fad8 <__swsetup_r+0xd0>)
 800fa20:	429c      	cmp	r4, r3
 800fa22:	d10f      	bne.n	800fa44 <__swsetup_r+0x3c>
 800fa24:	686c      	ldr	r4, [r5, #4]
 800fa26:	89a3      	ldrh	r3, [r4, #12]
 800fa28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa2c:	0719      	lsls	r1, r3, #28
 800fa2e:	d42c      	bmi.n	800fa8a <__swsetup_r+0x82>
 800fa30:	06dd      	lsls	r5, r3, #27
 800fa32:	d411      	bmi.n	800fa58 <__swsetup_r+0x50>
 800fa34:	2309      	movs	r3, #9
 800fa36:	6033      	str	r3, [r6, #0]
 800fa38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fa3c:	81a3      	strh	r3, [r4, #12]
 800fa3e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa42:	e03e      	b.n	800fac2 <__swsetup_r+0xba>
 800fa44:	4b25      	ldr	r3, [pc, #148]	; (800fadc <__swsetup_r+0xd4>)
 800fa46:	429c      	cmp	r4, r3
 800fa48:	d101      	bne.n	800fa4e <__swsetup_r+0x46>
 800fa4a:	68ac      	ldr	r4, [r5, #8]
 800fa4c:	e7eb      	b.n	800fa26 <__swsetup_r+0x1e>
 800fa4e:	4b24      	ldr	r3, [pc, #144]	; (800fae0 <__swsetup_r+0xd8>)
 800fa50:	429c      	cmp	r4, r3
 800fa52:	bf08      	it	eq
 800fa54:	68ec      	ldreq	r4, [r5, #12]
 800fa56:	e7e6      	b.n	800fa26 <__swsetup_r+0x1e>
 800fa58:	0758      	lsls	r0, r3, #29
 800fa5a:	d512      	bpl.n	800fa82 <__swsetup_r+0x7a>
 800fa5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa5e:	b141      	cbz	r1, 800fa72 <__swsetup_r+0x6a>
 800fa60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa64:	4299      	cmp	r1, r3
 800fa66:	d002      	beq.n	800fa6e <__swsetup_r+0x66>
 800fa68:	4630      	mov	r0, r6
 800fa6a:	f7ff fa03 	bl	800ee74 <_free_r>
 800fa6e:	2300      	movs	r3, #0
 800fa70:	6363      	str	r3, [r4, #52]	; 0x34
 800fa72:	89a3      	ldrh	r3, [r4, #12]
 800fa74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fa78:	81a3      	strh	r3, [r4, #12]
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	6063      	str	r3, [r4, #4]
 800fa7e:	6923      	ldr	r3, [r4, #16]
 800fa80:	6023      	str	r3, [r4, #0]
 800fa82:	89a3      	ldrh	r3, [r4, #12]
 800fa84:	f043 0308 	orr.w	r3, r3, #8
 800fa88:	81a3      	strh	r3, [r4, #12]
 800fa8a:	6923      	ldr	r3, [r4, #16]
 800fa8c:	b94b      	cbnz	r3, 800faa2 <__swsetup_r+0x9a>
 800fa8e:	89a3      	ldrh	r3, [r4, #12]
 800fa90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fa94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa98:	d003      	beq.n	800faa2 <__swsetup_r+0x9a>
 800fa9a:	4621      	mov	r1, r4
 800fa9c:	4630      	mov	r0, r6
 800fa9e:	f000 f929 	bl	800fcf4 <__smakebuf_r>
 800faa2:	89a0      	ldrh	r0, [r4, #12]
 800faa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800faa8:	f010 0301 	ands.w	r3, r0, #1
 800faac:	d00a      	beq.n	800fac4 <__swsetup_r+0xbc>
 800faae:	2300      	movs	r3, #0
 800fab0:	60a3      	str	r3, [r4, #8]
 800fab2:	6963      	ldr	r3, [r4, #20]
 800fab4:	425b      	negs	r3, r3
 800fab6:	61a3      	str	r3, [r4, #24]
 800fab8:	6923      	ldr	r3, [r4, #16]
 800faba:	b943      	cbnz	r3, 800face <__swsetup_r+0xc6>
 800fabc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fac0:	d1ba      	bne.n	800fa38 <__swsetup_r+0x30>
 800fac2:	bd70      	pop	{r4, r5, r6, pc}
 800fac4:	0781      	lsls	r1, r0, #30
 800fac6:	bf58      	it	pl
 800fac8:	6963      	ldrpl	r3, [r4, #20]
 800faca:	60a3      	str	r3, [r4, #8]
 800facc:	e7f4      	b.n	800fab8 <__swsetup_r+0xb0>
 800face:	2000      	movs	r0, #0
 800fad0:	e7f7      	b.n	800fac2 <__swsetup_r+0xba>
 800fad2:	bf00      	nop
 800fad4:	20000038 	.word	0x20000038
 800fad8:	08086eb8 	.word	0x08086eb8
 800fadc:	08086ed8 	.word	0x08086ed8
 800fae0:	08086e98 	.word	0x08086e98

0800fae4 <_close_r>:
 800fae4:	b538      	push	{r3, r4, r5, lr}
 800fae6:	4d06      	ldr	r5, [pc, #24]	; (800fb00 <_close_r+0x1c>)
 800fae8:	2300      	movs	r3, #0
 800faea:	4604      	mov	r4, r0
 800faec:	4608      	mov	r0, r1
 800faee:	602b      	str	r3, [r5, #0]
 800faf0:	f7f1 fc8f 	bl	8001412 <_close>
 800faf4:	1c43      	adds	r3, r0, #1
 800faf6:	d102      	bne.n	800fafe <_close_r+0x1a>
 800faf8:	682b      	ldr	r3, [r5, #0]
 800fafa:	b103      	cbz	r3, 800fafe <_close_r+0x1a>
 800fafc:	6023      	str	r3, [r4, #0]
 800fafe:	bd38      	pop	{r3, r4, r5, pc}
 800fb00:	20005b34 	.word	0x20005b34

0800fb04 <__sflush_r>:
 800fb04:	898a      	ldrh	r2, [r1, #12]
 800fb06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb0a:	4605      	mov	r5, r0
 800fb0c:	0710      	lsls	r0, r2, #28
 800fb0e:	460c      	mov	r4, r1
 800fb10:	d458      	bmi.n	800fbc4 <__sflush_r+0xc0>
 800fb12:	684b      	ldr	r3, [r1, #4]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	dc05      	bgt.n	800fb24 <__sflush_r+0x20>
 800fb18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	dc02      	bgt.n	800fb24 <__sflush_r+0x20>
 800fb1e:	2000      	movs	r0, #0
 800fb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb26:	2e00      	cmp	r6, #0
 800fb28:	d0f9      	beq.n	800fb1e <__sflush_r+0x1a>
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fb30:	682f      	ldr	r7, [r5, #0]
 800fb32:	602b      	str	r3, [r5, #0]
 800fb34:	d032      	beq.n	800fb9c <__sflush_r+0x98>
 800fb36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fb38:	89a3      	ldrh	r3, [r4, #12]
 800fb3a:	075a      	lsls	r2, r3, #29
 800fb3c:	d505      	bpl.n	800fb4a <__sflush_r+0x46>
 800fb3e:	6863      	ldr	r3, [r4, #4]
 800fb40:	1ac0      	subs	r0, r0, r3
 800fb42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fb44:	b10b      	cbz	r3, 800fb4a <__sflush_r+0x46>
 800fb46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fb48:	1ac0      	subs	r0, r0, r3
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	4602      	mov	r2, r0
 800fb4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb50:	6a21      	ldr	r1, [r4, #32]
 800fb52:	4628      	mov	r0, r5
 800fb54:	47b0      	blx	r6
 800fb56:	1c43      	adds	r3, r0, #1
 800fb58:	89a3      	ldrh	r3, [r4, #12]
 800fb5a:	d106      	bne.n	800fb6a <__sflush_r+0x66>
 800fb5c:	6829      	ldr	r1, [r5, #0]
 800fb5e:	291d      	cmp	r1, #29
 800fb60:	d82c      	bhi.n	800fbbc <__sflush_r+0xb8>
 800fb62:	4a2a      	ldr	r2, [pc, #168]	; (800fc0c <__sflush_r+0x108>)
 800fb64:	40ca      	lsrs	r2, r1
 800fb66:	07d6      	lsls	r6, r2, #31
 800fb68:	d528      	bpl.n	800fbbc <__sflush_r+0xb8>
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	6062      	str	r2, [r4, #4]
 800fb6e:	04d9      	lsls	r1, r3, #19
 800fb70:	6922      	ldr	r2, [r4, #16]
 800fb72:	6022      	str	r2, [r4, #0]
 800fb74:	d504      	bpl.n	800fb80 <__sflush_r+0x7c>
 800fb76:	1c42      	adds	r2, r0, #1
 800fb78:	d101      	bne.n	800fb7e <__sflush_r+0x7a>
 800fb7a:	682b      	ldr	r3, [r5, #0]
 800fb7c:	b903      	cbnz	r3, 800fb80 <__sflush_r+0x7c>
 800fb7e:	6560      	str	r0, [r4, #84]	; 0x54
 800fb80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb82:	602f      	str	r7, [r5, #0]
 800fb84:	2900      	cmp	r1, #0
 800fb86:	d0ca      	beq.n	800fb1e <__sflush_r+0x1a>
 800fb88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb8c:	4299      	cmp	r1, r3
 800fb8e:	d002      	beq.n	800fb96 <__sflush_r+0x92>
 800fb90:	4628      	mov	r0, r5
 800fb92:	f7ff f96f 	bl	800ee74 <_free_r>
 800fb96:	2000      	movs	r0, #0
 800fb98:	6360      	str	r0, [r4, #52]	; 0x34
 800fb9a:	e7c1      	b.n	800fb20 <__sflush_r+0x1c>
 800fb9c:	6a21      	ldr	r1, [r4, #32]
 800fb9e:	2301      	movs	r3, #1
 800fba0:	4628      	mov	r0, r5
 800fba2:	47b0      	blx	r6
 800fba4:	1c41      	adds	r1, r0, #1
 800fba6:	d1c7      	bne.n	800fb38 <__sflush_r+0x34>
 800fba8:	682b      	ldr	r3, [r5, #0]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d0c4      	beq.n	800fb38 <__sflush_r+0x34>
 800fbae:	2b1d      	cmp	r3, #29
 800fbb0:	d001      	beq.n	800fbb6 <__sflush_r+0xb2>
 800fbb2:	2b16      	cmp	r3, #22
 800fbb4:	d101      	bne.n	800fbba <__sflush_r+0xb6>
 800fbb6:	602f      	str	r7, [r5, #0]
 800fbb8:	e7b1      	b.n	800fb1e <__sflush_r+0x1a>
 800fbba:	89a3      	ldrh	r3, [r4, #12]
 800fbbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbc0:	81a3      	strh	r3, [r4, #12]
 800fbc2:	e7ad      	b.n	800fb20 <__sflush_r+0x1c>
 800fbc4:	690f      	ldr	r7, [r1, #16]
 800fbc6:	2f00      	cmp	r7, #0
 800fbc8:	d0a9      	beq.n	800fb1e <__sflush_r+0x1a>
 800fbca:	0793      	lsls	r3, r2, #30
 800fbcc:	680e      	ldr	r6, [r1, #0]
 800fbce:	bf08      	it	eq
 800fbd0:	694b      	ldreq	r3, [r1, #20]
 800fbd2:	600f      	str	r7, [r1, #0]
 800fbd4:	bf18      	it	ne
 800fbd6:	2300      	movne	r3, #0
 800fbd8:	eba6 0807 	sub.w	r8, r6, r7
 800fbdc:	608b      	str	r3, [r1, #8]
 800fbde:	f1b8 0f00 	cmp.w	r8, #0
 800fbe2:	dd9c      	ble.n	800fb1e <__sflush_r+0x1a>
 800fbe4:	6a21      	ldr	r1, [r4, #32]
 800fbe6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fbe8:	4643      	mov	r3, r8
 800fbea:	463a      	mov	r2, r7
 800fbec:	4628      	mov	r0, r5
 800fbee:	47b0      	blx	r6
 800fbf0:	2800      	cmp	r0, #0
 800fbf2:	dc06      	bgt.n	800fc02 <__sflush_r+0xfe>
 800fbf4:	89a3      	ldrh	r3, [r4, #12]
 800fbf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbfa:	81a3      	strh	r3, [r4, #12]
 800fbfc:	f04f 30ff 	mov.w	r0, #4294967295
 800fc00:	e78e      	b.n	800fb20 <__sflush_r+0x1c>
 800fc02:	4407      	add	r7, r0
 800fc04:	eba8 0800 	sub.w	r8, r8, r0
 800fc08:	e7e9      	b.n	800fbde <__sflush_r+0xda>
 800fc0a:	bf00      	nop
 800fc0c:	20400001 	.word	0x20400001

0800fc10 <_fflush_r>:
 800fc10:	b538      	push	{r3, r4, r5, lr}
 800fc12:	690b      	ldr	r3, [r1, #16]
 800fc14:	4605      	mov	r5, r0
 800fc16:	460c      	mov	r4, r1
 800fc18:	b913      	cbnz	r3, 800fc20 <_fflush_r+0x10>
 800fc1a:	2500      	movs	r5, #0
 800fc1c:	4628      	mov	r0, r5
 800fc1e:	bd38      	pop	{r3, r4, r5, pc}
 800fc20:	b118      	cbz	r0, 800fc2a <_fflush_r+0x1a>
 800fc22:	6983      	ldr	r3, [r0, #24]
 800fc24:	b90b      	cbnz	r3, 800fc2a <_fflush_r+0x1a>
 800fc26:	f7ff fa65 	bl	800f0f4 <__sinit>
 800fc2a:	4b14      	ldr	r3, [pc, #80]	; (800fc7c <_fflush_r+0x6c>)
 800fc2c:	429c      	cmp	r4, r3
 800fc2e:	d11b      	bne.n	800fc68 <_fflush_r+0x58>
 800fc30:	686c      	ldr	r4, [r5, #4]
 800fc32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d0ef      	beq.n	800fc1a <_fflush_r+0xa>
 800fc3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fc3c:	07d0      	lsls	r0, r2, #31
 800fc3e:	d404      	bmi.n	800fc4a <_fflush_r+0x3a>
 800fc40:	0599      	lsls	r1, r3, #22
 800fc42:	d402      	bmi.n	800fc4a <_fflush_r+0x3a>
 800fc44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc46:	f7ff faf3 	bl	800f230 <__retarget_lock_acquire_recursive>
 800fc4a:	4628      	mov	r0, r5
 800fc4c:	4621      	mov	r1, r4
 800fc4e:	f7ff ff59 	bl	800fb04 <__sflush_r>
 800fc52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc54:	07da      	lsls	r2, r3, #31
 800fc56:	4605      	mov	r5, r0
 800fc58:	d4e0      	bmi.n	800fc1c <_fflush_r+0xc>
 800fc5a:	89a3      	ldrh	r3, [r4, #12]
 800fc5c:	059b      	lsls	r3, r3, #22
 800fc5e:	d4dd      	bmi.n	800fc1c <_fflush_r+0xc>
 800fc60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc62:	f7ff fae6 	bl	800f232 <__retarget_lock_release_recursive>
 800fc66:	e7d9      	b.n	800fc1c <_fflush_r+0xc>
 800fc68:	4b05      	ldr	r3, [pc, #20]	; (800fc80 <_fflush_r+0x70>)
 800fc6a:	429c      	cmp	r4, r3
 800fc6c:	d101      	bne.n	800fc72 <_fflush_r+0x62>
 800fc6e:	68ac      	ldr	r4, [r5, #8]
 800fc70:	e7df      	b.n	800fc32 <_fflush_r+0x22>
 800fc72:	4b04      	ldr	r3, [pc, #16]	; (800fc84 <_fflush_r+0x74>)
 800fc74:	429c      	cmp	r4, r3
 800fc76:	bf08      	it	eq
 800fc78:	68ec      	ldreq	r4, [r5, #12]
 800fc7a:	e7da      	b.n	800fc32 <_fflush_r+0x22>
 800fc7c:	08086eb8 	.word	0x08086eb8
 800fc80:	08086ed8 	.word	0x08086ed8
 800fc84:	08086e98 	.word	0x08086e98

0800fc88 <_lseek_r>:
 800fc88:	b538      	push	{r3, r4, r5, lr}
 800fc8a:	4d07      	ldr	r5, [pc, #28]	; (800fca8 <_lseek_r+0x20>)
 800fc8c:	4604      	mov	r4, r0
 800fc8e:	4608      	mov	r0, r1
 800fc90:	4611      	mov	r1, r2
 800fc92:	2200      	movs	r2, #0
 800fc94:	602a      	str	r2, [r5, #0]
 800fc96:	461a      	mov	r2, r3
 800fc98:	f7f1 fbe2 	bl	8001460 <_lseek>
 800fc9c:	1c43      	adds	r3, r0, #1
 800fc9e:	d102      	bne.n	800fca6 <_lseek_r+0x1e>
 800fca0:	682b      	ldr	r3, [r5, #0]
 800fca2:	b103      	cbz	r3, 800fca6 <_lseek_r+0x1e>
 800fca4:	6023      	str	r3, [r4, #0]
 800fca6:	bd38      	pop	{r3, r4, r5, pc}
 800fca8:	20005b34 	.word	0x20005b34

0800fcac <__swhatbuf_r>:
 800fcac:	b570      	push	{r4, r5, r6, lr}
 800fcae:	460e      	mov	r6, r1
 800fcb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcb4:	2900      	cmp	r1, #0
 800fcb6:	b096      	sub	sp, #88	; 0x58
 800fcb8:	4614      	mov	r4, r2
 800fcba:	461d      	mov	r5, r3
 800fcbc:	da07      	bge.n	800fcce <__swhatbuf_r+0x22>
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	602b      	str	r3, [r5, #0]
 800fcc2:	89b3      	ldrh	r3, [r6, #12]
 800fcc4:	061a      	lsls	r2, r3, #24
 800fcc6:	d410      	bmi.n	800fcea <__swhatbuf_r+0x3e>
 800fcc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fccc:	e00e      	b.n	800fcec <__swhatbuf_r+0x40>
 800fcce:	466a      	mov	r2, sp
 800fcd0:	f000 f862 	bl	800fd98 <_fstat_r>
 800fcd4:	2800      	cmp	r0, #0
 800fcd6:	dbf2      	blt.n	800fcbe <__swhatbuf_r+0x12>
 800fcd8:	9a01      	ldr	r2, [sp, #4]
 800fcda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fcde:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fce2:	425a      	negs	r2, r3
 800fce4:	415a      	adcs	r2, r3
 800fce6:	602a      	str	r2, [r5, #0]
 800fce8:	e7ee      	b.n	800fcc8 <__swhatbuf_r+0x1c>
 800fcea:	2340      	movs	r3, #64	; 0x40
 800fcec:	2000      	movs	r0, #0
 800fcee:	6023      	str	r3, [r4, #0]
 800fcf0:	b016      	add	sp, #88	; 0x58
 800fcf2:	bd70      	pop	{r4, r5, r6, pc}

0800fcf4 <__smakebuf_r>:
 800fcf4:	898b      	ldrh	r3, [r1, #12]
 800fcf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fcf8:	079d      	lsls	r5, r3, #30
 800fcfa:	4606      	mov	r6, r0
 800fcfc:	460c      	mov	r4, r1
 800fcfe:	d507      	bpl.n	800fd10 <__smakebuf_r+0x1c>
 800fd00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fd04:	6023      	str	r3, [r4, #0]
 800fd06:	6123      	str	r3, [r4, #16]
 800fd08:	2301      	movs	r3, #1
 800fd0a:	6163      	str	r3, [r4, #20]
 800fd0c:	b002      	add	sp, #8
 800fd0e:	bd70      	pop	{r4, r5, r6, pc}
 800fd10:	ab01      	add	r3, sp, #4
 800fd12:	466a      	mov	r2, sp
 800fd14:	f7ff ffca 	bl	800fcac <__swhatbuf_r>
 800fd18:	9900      	ldr	r1, [sp, #0]
 800fd1a:	4605      	mov	r5, r0
 800fd1c:	4630      	mov	r0, r6
 800fd1e:	f7ff f8f9 	bl	800ef14 <_malloc_r>
 800fd22:	b948      	cbnz	r0, 800fd38 <__smakebuf_r+0x44>
 800fd24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd28:	059a      	lsls	r2, r3, #22
 800fd2a:	d4ef      	bmi.n	800fd0c <__smakebuf_r+0x18>
 800fd2c:	f023 0303 	bic.w	r3, r3, #3
 800fd30:	f043 0302 	orr.w	r3, r3, #2
 800fd34:	81a3      	strh	r3, [r4, #12]
 800fd36:	e7e3      	b.n	800fd00 <__smakebuf_r+0xc>
 800fd38:	4b0d      	ldr	r3, [pc, #52]	; (800fd70 <__smakebuf_r+0x7c>)
 800fd3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800fd3c:	89a3      	ldrh	r3, [r4, #12]
 800fd3e:	6020      	str	r0, [r4, #0]
 800fd40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd44:	81a3      	strh	r3, [r4, #12]
 800fd46:	9b00      	ldr	r3, [sp, #0]
 800fd48:	6163      	str	r3, [r4, #20]
 800fd4a:	9b01      	ldr	r3, [sp, #4]
 800fd4c:	6120      	str	r0, [r4, #16]
 800fd4e:	b15b      	cbz	r3, 800fd68 <__smakebuf_r+0x74>
 800fd50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd54:	4630      	mov	r0, r6
 800fd56:	f000 f831 	bl	800fdbc <_isatty_r>
 800fd5a:	b128      	cbz	r0, 800fd68 <__smakebuf_r+0x74>
 800fd5c:	89a3      	ldrh	r3, [r4, #12]
 800fd5e:	f023 0303 	bic.w	r3, r3, #3
 800fd62:	f043 0301 	orr.w	r3, r3, #1
 800fd66:	81a3      	strh	r3, [r4, #12]
 800fd68:	89a0      	ldrh	r0, [r4, #12]
 800fd6a:	4305      	orrs	r5, r0
 800fd6c:	81a5      	strh	r5, [r4, #12]
 800fd6e:	e7cd      	b.n	800fd0c <__smakebuf_r+0x18>
 800fd70:	0800f08d 	.word	0x0800f08d

0800fd74 <_read_r>:
 800fd74:	b538      	push	{r3, r4, r5, lr}
 800fd76:	4d07      	ldr	r5, [pc, #28]	; (800fd94 <_read_r+0x20>)
 800fd78:	4604      	mov	r4, r0
 800fd7a:	4608      	mov	r0, r1
 800fd7c:	4611      	mov	r1, r2
 800fd7e:	2200      	movs	r2, #0
 800fd80:	602a      	str	r2, [r5, #0]
 800fd82:	461a      	mov	r2, r3
 800fd84:	f7f1 fb0c 	bl	80013a0 <_read>
 800fd88:	1c43      	adds	r3, r0, #1
 800fd8a:	d102      	bne.n	800fd92 <_read_r+0x1e>
 800fd8c:	682b      	ldr	r3, [r5, #0]
 800fd8e:	b103      	cbz	r3, 800fd92 <_read_r+0x1e>
 800fd90:	6023      	str	r3, [r4, #0]
 800fd92:	bd38      	pop	{r3, r4, r5, pc}
 800fd94:	20005b34 	.word	0x20005b34

0800fd98 <_fstat_r>:
 800fd98:	b538      	push	{r3, r4, r5, lr}
 800fd9a:	4d07      	ldr	r5, [pc, #28]	; (800fdb8 <_fstat_r+0x20>)
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	4604      	mov	r4, r0
 800fda0:	4608      	mov	r0, r1
 800fda2:	4611      	mov	r1, r2
 800fda4:	602b      	str	r3, [r5, #0]
 800fda6:	f7f1 fb40 	bl	800142a <_fstat>
 800fdaa:	1c43      	adds	r3, r0, #1
 800fdac:	d102      	bne.n	800fdb4 <_fstat_r+0x1c>
 800fdae:	682b      	ldr	r3, [r5, #0]
 800fdb0:	b103      	cbz	r3, 800fdb4 <_fstat_r+0x1c>
 800fdb2:	6023      	str	r3, [r4, #0]
 800fdb4:	bd38      	pop	{r3, r4, r5, pc}
 800fdb6:	bf00      	nop
 800fdb8:	20005b34 	.word	0x20005b34

0800fdbc <_isatty_r>:
 800fdbc:	b538      	push	{r3, r4, r5, lr}
 800fdbe:	4d06      	ldr	r5, [pc, #24]	; (800fdd8 <_isatty_r+0x1c>)
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	4604      	mov	r4, r0
 800fdc4:	4608      	mov	r0, r1
 800fdc6:	602b      	str	r3, [r5, #0]
 800fdc8:	f7f1 fb3f 	bl	800144a <_isatty>
 800fdcc:	1c43      	adds	r3, r0, #1
 800fdce:	d102      	bne.n	800fdd6 <_isatty_r+0x1a>
 800fdd0:	682b      	ldr	r3, [r5, #0]
 800fdd2:	b103      	cbz	r3, 800fdd6 <_isatty_r+0x1a>
 800fdd4:	6023      	str	r3, [r4, #0]
 800fdd6:	bd38      	pop	{r3, r4, r5, pc}
 800fdd8:	20005b34 	.word	0x20005b34

0800fddc <_init>:
 800fddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdde:	bf00      	nop
 800fde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fde2:	bc08      	pop	{r3}
 800fde4:	469e      	mov	lr, r3
 800fde6:	4770      	bx	lr

0800fde8 <_fini>:
 800fde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdea:	bf00      	nop
 800fdec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdee:	bc08      	pop	{r3}
 800fdf0:	469e      	mov	lr, r3
 800fdf2:	4770      	bx	lr
