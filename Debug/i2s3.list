
i2s3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00076974  08005344  08005344  00015344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807bcb8  0807bcb8  0009000c  2**0
                  CONTENTS
  4 .ARM          00000008  0807bcb8  0807bcb8  0008bcb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807bcc0  0807bcc0  0009000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807bcc0  0807bcc0  0008bcc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0807bcc4  0807bcc4  0008bcc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0807bcc8  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0009000c  2**0
                  CONTENTS
 10 .bss          00001220  2000000c  2000000c  0009000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000122c  2000122c  0009000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0009000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c69f  00000000  00000000  0009003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000207b  00000000  00000000  0009c6db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a20  00000000  00000000  0009e758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000950  00000000  00000000  0009f178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211ec  00000000  00000000  0009fac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e8fe  00000000  00000000  000c0cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4c4e  00000000  00000000  000cf5b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00194200  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000028a8  00000000  00000000  00194254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800532c 	.word	0x0800532c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800532c 	.word	0x0800532c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <WM8978_Register_Wirter>:
static void DMAEx_XferM1CpltCallback(struct __DMA_HandleTypeDef *hdma);
static void DMAEx_XferErrorCallback(struct __DMA_HandleTypeDef *hdma);
HAL_StatusTypeDef HAL_I2S_Transmit_DMAEx(I2S_HandleTypeDef *hi2s, uint16_t *FirstBuffer, uint16_t *SecondBuffer, uint16_t Size);

HAL_StatusTypeDef WM8978_Register_Wirter(uint8_t reg_addr, uint16_t data)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4603      	mov	r3, r0
 80004c8:	460a      	mov	r2, r1
 80004ca:	71fb      	strb	r3, [r7, #7]
 80004cc:	4613      	mov	r3, r2
 80004ce:	80bb      	strh	r3, [r7, #4]
	uint8_t pData[10] =	{ 0 };
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	809a      	strh	r2, [r3, #4]

	pData[0] = (reg_addr << 1) | ((data >> 8) & 0x01);
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	b25a      	sxtb	r2, r3
 80004e4:	88bb      	ldrh	r3, [r7, #4]
 80004e6:	0a1b      	lsrs	r3, r3, #8
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	b25b      	sxtb	r3, r3
 80004ec:	f003 0301 	and.w	r3, r3, #1
 80004f0:	b25b      	sxtb	r3, r3
 80004f2:	4313      	orrs	r3, r2
 80004f4:	b25b      	sxtb	r3, r3
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	733b      	strb	r3, [r7, #12]
	pData[1] = data & 0xFF;
 80004fa:	88bb      	ldrh	r3, [r7, #4]
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(&USEI2C, WM8978_WIRTE_ADDRESS, pData, 2, 1000);
 8000500:	f107 020c 	add.w	r2, r7, #12
 8000504:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	2302      	movs	r3, #2
 800050c:	2134      	movs	r1, #52	; 0x34
 800050e:	4804      	ldr	r0, [pc, #16]	; (8000520 <WM8978_Register_Wirter+0x60>)
 8000510:	f002 ff6c 	bl	80033ec <HAL_I2C_Master_Transmit>
 8000514:	4603      	mov	r3, r0
}
 8000516:	4618      	mov	r0, r3
 8000518:	3718      	adds	r7, #24
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20001084 	.word	0x20001084

08000524 <WAV_FileInit>:



void WAV_FileInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
	DataLength = sizeof(data) - 0x2c;
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <WAV_FileInit+0x1c>)
 800052a:	4a06      	ldr	r2, [pc, #24]	; (8000544 <WAV_FileInit+0x20>)
 800052c:	601a      	str	r2, [r3, #0]
	DataAddress = (uint8_t*) (data + 0x2c);
 800052e:	4a06      	ldr	r2, [pc, #24]	; (8000548 <WAV_FileInit+0x24>)
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <WAV_FileInit+0x28>)
 8000532:	601a      	str	r2, [r3, #0]
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20001028 	.word	0x20001028
 8000544:	00076926 	.word	0x00076926
 8000548:	08005370 	.word	0x08005370
 800054c:	2000102c 	.word	0x2000102c

08000550 <WAV_FileRead>:


uint32_t WAV_FileRead(uint8_t *buf, uint32_t size)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]

	uint32_t Playing_End = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]

	if (DataLength >= size)
 800055e:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <WAV_FileRead+0x64>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	683a      	ldr	r2, [r7, #0]
 8000564:	429a      	cmp	r2, r3
 8000566:	d815      	bhi.n	8000594 <WAV_FileRead+0x44>
	{
		memcpy(buf, DataAddress, size);
 8000568:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <WAV_FileRead+0x68>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	683a      	ldr	r2, [r7, #0]
 800056e:	4619      	mov	r1, r3
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f004 fec5 	bl	8005300 <memcpy>
		DataLength -= size;
 8000576:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <WAV_FileRead+0x64>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	1ad3      	subs	r3, r2, r3
 800057e:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <WAV_FileRead+0x64>)
 8000580:	6013      	str	r3, [r2, #0]
		DataAddress += size;
 8000582:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <WAV_FileRead+0x68>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	4413      	add	r3, r2
 800058a:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <WAV_FileRead+0x68>)
 800058c:	6013      	str	r3, [r2, #0]
		Playing_End = 1;
 800058e:	2301      	movs	r3, #1
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	e009      	b.n	80005a8 <WAV_FileRead+0x58>
	}
	else
	{
		memcpy(buf, DataAddress, DataLength);
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <WAV_FileRead+0x68>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <WAV_FileRead+0x64>)
 800059a:	6812      	ldr	r2, [r2, #0]
 800059c:	4619      	mov	r1, r3
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f004 feae 	bl	8005300 <memcpy>
		Playing_End = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
	}

	return Playing_End;
 80005a8:	68fb      	ldr	r3, [r7, #12]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20001028 	.word	0x20001028
 80005b8:	2000102c 	.word	0x2000102c

080005bc <HAL_I2S_Transmit_DMAEx>:

HAL_StatusTypeDef HAL_I2S_Transmit_DMAEx(I2S_HandleTypeDef *hi2s, uint16_t *FirstBuffer, uint16_t *SecondBuffer, uint16_t Size)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b089      	sub	sp, #36	; 0x24
 80005c0:	af02      	add	r7, sp, #8
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
 80005c8:	807b      	strh	r3, [r7, #2]
	uint32_t tmpreg_cfgr;
	if ((FirstBuffer == NULL) || (SecondBuffer == NULL) || (Size == 0U))
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d005      	beq.n	80005dc <HAL_I2S_Transmit_DMAEx+0x20>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d002      	beq.n	80005dc <HAL_I2S_Transmit_DMAEx+0x20>
 80005d6:	887b      	ldrh	r3, [r7, #2]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d101      	bne.n	80005e0 <HAL_I2S_Transmit_DMAEx+0x24>
	{
		return HAL_ERROR;
 80005dc:	2301      	movs	r3, #1
 80005de:	e09c      	b.n	800071a <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Process Locked */
	__HAL_LOCK(hi2s);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d101      	bne.n	80005f0 <HAL_I2S_Transmit_DMAEx+0x34>
 80005ec:	2302      	movs	r3, #2
 80005ee:	e094      	b.n	800071a <HAL_I2S_Transmit_DMAEx+0x15e>
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2201      	movs	r2, #1
 80005f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (hi2s->State != HAL_I2S_STATE_READY)
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b01      	cmp	r3, #1
 8000602:	d005      	beq.n	8000610 <HAL_I2S_Transmit_DMAEx+0x54>
	{
		__HAL_UNLOCK(hi2s);
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2200      	movs	r2, #0
 8000608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_BUSY;
 800060c:	2302      	movs	r3, #2
 800060e:	e084      	b.n	800071a <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Set state and reset error code */
	hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2203      	movs	r2, #3
 8000614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2200      	movs	r2, #0
 800061c:	645a      	str	r2, [r3, #68]	; 0x44
	hi2s->pTxBuffPtr = FirstBuffer;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	68ba      	ldr	r2, [r7, #8]
 8000622:	625a      	str	r2, [r3, #36]	; 0x24

	tmpreg_cfgr = hi2s->Instance->I2SCFGR
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	f003 0307 	and.w	r3, r3, #7
 800062e:	617b      	str	r3, [r7, #20]
			& (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);

	if ((tmpreg_cfgr == I2S_DATAFORMAT_24B)
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	2b03      	cmp	r3, #3
 8000634:	d002      	beq.n	800063c <HAL_I2S_Transmit_DMAEx+0x80>
			|| (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	2b05      	cmp	r3, #5
 800063a:	d10a      	bne.n	8000652 <HAL_I2S_Transmit_DMAEx+0x96>
	{
		hi2s->TxXferSize = (Size << 1U);
 800063c:	887b      	ldrh	r3, [r7, #2]
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	b29a      	uxth	r2, r3
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = (Size << 1U);
 8000646:	887b      	ldrh	r3, [r7, #2]
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	b29a      	uxth	r2, r3
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000650:	e005      	b.n	800065e <HAL_I2S_Transmit_DMAEx+0xa2>
	}
	else
	{
		hi2s->TxXferSize = Size;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	887a      	ldrh	r2, [r7, #2]
 8000656:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = Size;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	887a      	ldrh	r2, [r7, #2]
 800065c:	855a      	strh	r2, [r3, #42]	; 0x2a
	}

	/* Set the I2S Tx DMA Half transfer complete callback */
	hi2s->hdmatx->XferHalfCpltCallback = NULL;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000662:	2200      	movs	r2, #0
 8000664:	641a      	str	r2, [r3, #64]	; 0x40
	hi2s->hdmatx->XferM1HalfCpltCallback = NULL;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800066a:	2200      	movs	r2, #0
 800066c:	649a      	str	r2, [r3, #72]	; 0x48

	/* Set the I2S Tx DMA transfer complete callback */
	hi2s->hdmatx->XferCpltCallback = DMAEx_XferCpltCallback;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000672:	4a2c      	ldr	r2, [pc, #176]	; (8000724 <HAL_I2S_Transmit_DMAEx+0x168>)
 8000674:	63da      	str	r2, [r3, #60]	; 0x3c
	hi2s->hdmatx->XferM1CpltCallback = DMAEx_XferM1CpltCallback;
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800067a:	4a2b      	ldr	r2, [pc, #172]	; (8000728 <HAL_I2S_Transmit_DMAEx+0x16c>)
 800067c:	645a      	str	r2, [r3, #68]	; 0x44

	/* Set the DMA error callback */
	hi2s->hdmatx->XferErrorCallback = DMAEx_XferErrorCallback;
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000682:	4a2a      	ldr	r2, [pc, #168]	; (800072c <HAL_I2S_Transmit_DMAEx+0x170>)
 8000684:	64da      	str	r2, [r3, #76]	; 0x4c

	/* Set the DMA abort callback */
	hi2s->hdmatx->XferAbortCallback = NULL;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800068a:	2200      	movs	r2, #0
 800068c:	651a      	str	r2, [r3, #80]	; 0x50

	/* Enable the Tx DMA Stream/Channel */
	if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx, (uint32_t) FirstBuffer, (uint32_t) &hi2s->Instance->DR, (uint32_t) SecondBuffer,	hi2s->TxXferSize))
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000692:	68b9      	ldr	r1, [r7, #8]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	330c      	adds	r3, #12
 800069a:	461c      	mov	r4, r3
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	4613      	mov	r3, r2
 80006a8:	4622      	mov	r2, r4
 80006aa:	f001 fa51 	bl	8001b50 <HAL_DMAEx_MultiBufferStart_IT>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d00f      	beq.n	80006d4 <HAL_I2S_Transmit_DMAEx+0x118>
	{
		/* Update SPI error code */
		SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b8:	f043 0208 	orr.w	r2, r3, #8
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	645a      	str	r2, [r3, #68]	; 0x44
		hi2s->State = HAL_I2S_STATE_READY;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	2201      	movs	r2, #1
 80006c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		__HAL_UNLOCK(hi2s);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2200      	movs	r2, #0
 80006cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_ERROR;
 80006d0:	2301      	movs	r3, #1
 80006d2:	e022      	b.n	800071a <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Check if the I2S is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d107      	bne.n	80006f2 <HAL_I2S_Transmit_DMAEx+0x136>
	{
		/* Enable I2S peripheral */
		__HAL_I2S_ENABLE(hi2s);
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	69da      	ldr	r2, [r3, #28]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80006f0:	61da      	str	r2, [r3, #28]
	}

	/* Check if the I2S Tx request is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	f003 0302 	and.w	r3, r3, #2
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d107      	bne.n	8000710 <HAL_I2S_Transmit_DMAEx+0x154>
	{
		/* Enable Tx DMA Request */
		SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	685a      	ldr	r2, [r3, #4]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f042 0202 	orr.w	r2, r2, #2
 800070e:	605a      	str	r2, [r3, #4]
	}

	__HAL_UNLOCK(hi2s);
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	return HAL_OK;
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	371c      	adds	r7, #28
 800071e:	46bd      	mov	sp, r7
 8000720:	bd90      	pop	{r4, r7, pc}
 8000722:	bf00      	nop
 8000724:	08000731 	.word	0x08000731
 8000728:	08000759 	.word	0x08000759
 800072c:	08000781 	.word	0x08000781

08000730 <DMAEx_XferCpltCallback>:



static void DMAEx_XferCpltCallback(struct __DMA_HandleTypeDef *hdma)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	//if (DMA1_Stream3->CR & (1 << 19)) {

	//if(DMA1_Stream4->CR&(1<<19)){
		if (WAV_FileRead((uint8_t*)I2S_Buf0,sizeof(I2S_Buf0)) == 0)
 8000738:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800073c:	4805      	ldr	r0, [pc, #20]	; (8000754 <DMAEx_XferCpltCallback+0x24>)
 800073e:	f7ff ff07 	bl	8000550 <WAV_FileRead>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d101      	bne.n	800074c <DMAEx_XferCpltCallback+0x1c>
			{
				Audio_Player_Stop();
 8000748:	f000 f86a 	bl	8000820 <Audio_Player_Stop>
			}

	//}

}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000028 	.word	0x20000028

08000758 <DMAEx_XferM1CpltCallback>:

static void DMAEx_XferM1CpltCallback(struct __DMA_HandleTypeDef *hdma)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

		if (WAV_FileRead((uint8_t*) I2S_Buf1, sizeof(I2S_Buf1)) == 0)
 8000760:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <DMAEx_XferM1CpltCallback+0x24>)
 8000766:	f7ff fef3 	bl	8000550 <WAV_FileRead>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d101      	bne.n	8000774 <DMAEx_XferM1CpltCallback+0x1c>
			{
				Audio_Player_Stop();
 8000770:	f000 f856 	bl	8000820 <Audio_Player_Stop>
			}


}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000828 	.word	0x20000828

08000780 <DMAEx_XferErrorCallback>:




static void DMAEx_XferErrorCallback(struct __DMA_HandleTypeDef *hdma)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]

}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <Audio_Player_Init>:

void Audio_Player_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0


	WM8978_Register_Wirter(0, 0);
 8000798:	2100      	movs	r1, #0
 800079a:	2000      	movs	r0, #0
 800079c:	f7ff fe90 	bl	80004c0 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(1, 0x0F);
 80007a0:	210f      	movs	r1, #15
 80007a2:	2001      	movs	r0, #1
 80007a4:	f7ff fe8c 	bl	80004c0 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(3, 0x7F);
 80007a8:	217f      	movs	r1, #127	; 0x7f
 80007aa:	2003      	movs	r0, #3
 80007ac:	f7ff fe88 	bl	80004c0 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(4, 0x10);
 80007b0:	2110      	movs	r1, #16
 80007b2:	2004      	movs	r0, #4
 80007b4:	f7ff fe84 	bl	80004c0 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(6, 0);
 80007b8:	2100      	movs	r1, #0
 80007ba:	2006      	movs	r0, #6
 80007bc:	f7ff fe80 	bl	80004c0 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(10, 0x08);
 80007c0:	2108      	movs	r1, #8
 80007c2:	200a      	movs	r0, #10
 80007c4:	f7ff fe7c 	bl	80004c0 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(43, 0x10);
 80007c8:	2110      	movs	r1, #16
 80007ca:	202b      	movs	r0, #43	; 0x2b
 80007cc:	f7ff fe78 	bl	80004c0 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(54, 50);
 80007d0:	2132      	movs	r1, #50	; 0x32
 80007d2:	2036      	movs	r0, #54	; 0x36
 80007d4:	f7ff fe74 	bl	80004c0 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(55, 50 | (1 << 8));
 80007d8:	f44f 7199 	mov.w	r1, #306	; 0x132
 80007dc:	2037      	movs	r0, #55	; 0x37
 80007de:	f7ff fe6f 	bl	80004c0 <WM8978_Register_Wirter>

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <Audio_Player_Start>:
		WM8978_Register_Wirter(54, num);
		WM8978_Register_Wirter(55, num | (1 << 8));
}

void Audio_Player_Start()
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
		WAV_FileRead((uint8_t*) I2S_Buf0, sizeof(I2S_Buf0));
 80007ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f0:	4808      	ldr	r0, [pc, #32]	; (8000814 <Audio_Player_Start+0x2c>)
 80007f2:	f7ff fead 	bl	8000550 <WAV_FileRead>
		WAV_FileRead((uint8_t*) I2S_Buf1, sizeof(I2S_Buf1));
 80007f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007fa:	4807      	ldr	r0, [pc, #28]	; (8000818 <Audio_Player_Start+0x30>)
 80007fc:	f7ff fea8 	bl	8000550 <WAV_FileRead>
		HAL_I2S_Transmit_DMAEx(&USEI2S, I2S_Buf0, I2S_Buf1, BUFFER_SIZE);
 8000800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000804:	4a04      	ldr	r2, [pc, #16]	; (8000818 <Audio_Player_Start+0x30>)
 8000806:	4903      	ldr	r1, [pc, #12]	; (8000814 <Audio_Player_Start+0x2c>)
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <Audio_Player_Start+0x34>)
 800080a:	f7ff fed7 	bl	80005bc <HAL_I2S_Transmit_DMAEx>
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000028 	.word	0x20000028
 8000818:	20000828 	.word	0x20000828
 800081c:	200011e0 	.word	0x200011e0

08000820 <Audio_Player_Stop>:
{
	HAL_I2S_DMAResume(&USEI2S);
}

void Audio_Player_Stop(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	WAV_FileInit();
 8000824:	f7ff fe7e 	bl	8000524 <WAV_FileInit>
	HAL_I2S_DMAStop(&USEI2S);
 8000828:	4802      	ldr	r0, [pc, #8]	; (8000834 <Audio_Player_Stop+0x14>)
 800082a:	f003 fa27 	bl	8003c7c <HAL_I2S_DMAStop>
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200011e0 	.word	0x200011e0

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083c:	f000 fc86 	bl	800114c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000840:	f000 f818 	bl	8000874 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000844:	f000 f880 	bl	8000948 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000848:	f000 f97a 	bl	8000b40 <MX_GPIO_Init>
  MX_DMA_Init();
 800084c:	f000 f950 	bl	8000af0 <MX_DMA_Init>
  MX_I2S3_Init();
 8000850:	f000 f920 	bl	8000a94 <MX_I2S3_Init>
  MX_I2C1_Init();
 8000854:	f000 f894 	bl	8000980 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000858:	f000 f8c0 	bl	80009dc <MX_I2C2_Init>
  MX_I2S2_Init();
 800085c:	f000 f8ec 	bl	8000a38 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  Audio_Player_Init();
 8000860:	f7ff ff98 	bl	8000794 <Audio_Player_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Audio_Player_Start();
 8000864:	f7ff ffc0 	bl	80007e8 <Audio_Player_Start>
	  HAL_Delay(15000);
 8000868:	f643 2098 	movw	r0, #15000	; 0x3a98
 800086c:	f000 fce0 	bl	8001230 <HAL_Delay>
	  Audio_Player_Start();
 8000870:	e7f8      	b.n	8000864 <main+0x2c>
	...

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b094      	sub	sp, #80	; 0x50
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0320 	add.w	r3, r7, #32
 800087e:	2230      	movs	r2, #48	; 0x30
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f004 fd4a 	bl	800531c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000898:	2300      	movs	r3, #0
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	4b28      	ldr	r3, [pc, #160]	; (8000940 <SystemClock_Config+0xcc>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	4a27      	ldr	r2, [pc, #156]	; (8000940 <SystemClock_Config+0xcc>)
 80008a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a6:	6413      	str	r3, [r2, #64]	; 0x40
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <SystemClock_Config+0xcc>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b4:	2300      	movs	r3, #0
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	4b22      	ldr	r3, [pc, #136]	; (8000944 <SystemClock_Config+0xd0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a21      	ldr	r2, [pc, #132]	; (8000944 <SystemClock_Config+0xd0>)
 80008be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <SystemClock_Config+0xd0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d0:	2301      	movs	r3, #1
 80008d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008e4:	2304      	movs	r3, #4
 80008e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008e8:	23a8      	movs	r3, #168	; 0xa8
 80008ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008f0:	2304      	movs	r3, #4
 80008f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f4:	f107 0320 	add.w	r3, r7, #32
 80008f8:	4618      	mov	r0, r3
 80008fa:	f003 ff3d 	bl	8004778 <HAL_RCC_OscConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000904:	f000 f96e 	bl	8000be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000908:	230f      	movs	r3, #15
 800090a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090c:	2302      	movs	r3, #2
 800090e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000914:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000918:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800091a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	2105      	movs	r1, #5
 8000926:	4618      	mov	r0, r3
 8000928:	f004 f99e 	bl	8004c68 <HAL_RCC_ClockConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000932:	f000 f957 	bl	8000be4 <Error_Handler>
  }
}
 8000936:	bf00      	nop
 8000938:	3750      	adds	r7, #80	; 0x50
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40007000 	.word	0x40007000

08000948 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800094e:	463b      	mov	r3, r7
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800095a:	2301      	movs	r3, #1
 800095c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800095e:	23c0      	movs	r3, #192	; 0xc0
 8000960:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000962:	2302      	movs	r3, #2
 8000964:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000966:	463b      	mov	r3, r7
 8000968:	4618      	mov	r0, r3
 800096a:	f004 fb65 	bl	8005038 <HAL_RCCEx_PeriphCLKConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000974:	f000 f936 	bl	8000be4 <Error_Handler>
  }
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_I2C1_Init+0x50>)
 8000986:	4a13      	ldr	r2, [pc, #76]	; (80009d4 <MX_I2C1_Init+0x54>)
 8000988:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_I2C1_Init+0x50>)
 800098c:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <MX_I2C1_Init+0x58>)
 800098e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_I2C1_Init+0x50>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_I2C1_Init+0x50>)
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_I2C1_Init+0x50>)
 800099e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MX_I2C1_Init+0x50>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_I2C1_Init+0x50>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <MX_I2C1_Init+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_I2C1_Init+0x50>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_I2C1_Init+0x50>)
 80009be:	f002 fbd1 	bl	8003164 <HAL_I2C_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009c8:	f000 f90c 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20001030 	.word	0x20001030
 80009d4:	40005400 	.word	0x40005400
 80009d8:	000186a0 	.word	0x000186a0

080009dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_I2C2_Init+0x50>)
 80009e2:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <MX_I2C2_Init+0x54>)
 80009e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_I2C2_Init+0x50>)
 80009e8:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <MX_I2C2_Init+0x58>)
 80009ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_I2C2_Init+0x50>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_I2C2_Init+0x50>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_I2C2_Init+0x50>)
 80009fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009fe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <MX_I2C2_Init+0x50>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_I2C2_Init+0x50>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <MX_I2C2_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_I2C2_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a18:	4804      	ldr	r0, [pc, #16]	; (8000a2c <MX_I2C2_Init+0x50>)
 8000a1a:	f002 fba3 	bl	8003164 <HAL_I2C_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a24:	f000 f8de 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20001084 	.word	0x20001084
 8000a30:	40005800 	.word	0x40005800
 8000a34:	000186a0 	.word	0x000186a0

08000a38 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_I2S2_Init+0x54>)
 8000a3e:	4a14      	ldr	r2, [pc, #80]	; (8000a90 <MX_I2S2_Init+0x58>)
 8000a40:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <MX_I2S2_Init+0x54>)
 8000a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a48:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <MX_I2S2_Init+0x54>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a50:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_I2S2_Init+0x54>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <MX_I2S2_Init+0x54>)
 8000a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a5c:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_I2S2_Init+0x54>)
 8000a60:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000a64:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_I2S2_Init+0x54>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <MX_I2S2_Init+0x54>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_I2S2_Init+0x54>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000a78:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MX_I2S2_Init+0x54>)
 8000a7a:	f002 ffbf 	bl	80039fc <HAL_I2S_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000a84:	f000 f8ae 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20001198 	.word	0x20001198
 8000a90:	40003800 	.word	0x40003800

08000a94 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <MX_I2S3_Init+0x54>)
 8000a9a:	4a14      	ldr	r2, [pc, #80]	; (8000aec <MX_I2S3_Init+0x58>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_I2S3_Init+0x54>)
 8000aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <MX_I2S3_Init+0x54>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_I2S3_Init+0x54>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <MX_I2S3_Init+0x54>)
 8000ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ab8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_I2S3_Init+0x54>)
 8000abc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000ac0:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_I2S3_Init+0x54>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000ac8:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <MX_I2S3_Init+0x54>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_I2S3_Init+0x54>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <MX_I2S3_Init+0x54>)
 8000ad6:	f002 ff91 	bl	80039fc <HAL_I2S_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000ae0:	f000 f880 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200011e0 	.word	0x200011e0
 8000aec:	40003c00 	.word	0x40003c00

08000af0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <MX_DMA_Init+0x4c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <MX_DMA_Init+0x4c>)
 8000b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <MX_DMA_Init+0x4c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	200f      	movs	r0, #15
 8000b18:	f000 fc89 	bl	800142e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000b1c:	200f      	movs	r0, #15
 8000b1e:	f000 fca2 	bl	8001466 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	2010      	movs	r0, #16
 8000b28:	f000 fc81 	bl	800142e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b2c:	2010      	movs	r0, #16
 8000b2e:	f000 fc9a 	bl	8001466 <HAL_NVIC_EnableIRQ>

}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800

08000b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	4b25      	ldr	r3, [pc, #148]	; (8000be0 <MX_GPIO_Init+0xa0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a24      	ldr	r2, [pc, #144]	; (8000be0 <MX_GPIO_Init+0xa0>)
 8000b50:	f043 0320 	orr.w	r3, r3, #32
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <MX_GPIO_Init+0xa0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0320 	and.w	r3, r3, #32
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <MX_GPIO_Init+0xa0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a1d      	ldr	r2, [pc, #116]	; (8000be0 <MX_GPIO_Init+0xa0>)
 8000b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <MX_GPIO_Init+0xa0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <MX_GPIO_Init+0xa0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a16      	ldr	r2, [pc, #88]	; (8000be0 <MX_GPIO_Init+0xa0>)
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_GPIO_Init+0xa0>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0304 	and.w	r3, r3, #4
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <MX_GPIO_Init+0xa0>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a0f      	ldr	r2, [pc, #60]	; (8000be0 <MX_GPIO_Init+0xa0>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <MX_GPIO_Init+0xa0>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_GPIO_Init+0xa0>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <MX_GPIO_Init+0xa0>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_GPIO_Init+0xa0>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

}
 8000bd2:	bf00      	nop
 8000bd4:	371c      	adds	r7, #28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	e7fe      	b.n	8000bec <Error_Handler+0x8>
	...

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <HAL_MspInit+0x4c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800

08000c40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a32      	ldr	r2, [pc, #200]	; (8000d28 <HAL_I2C_MspInit+0xe8>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d12c      	bne.n	8000cbc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
 8000c66:	4b31      	ldr	r3, [pc, #196]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a30      	ldr	r2, [pc, #192]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b2e      	ldr	r3, [pc, #184]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	61bb      	str	r3, [r7, #24]
 8000c7c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c7e:	23c0      	movs	r3, #192	; 0xc0
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c82:	2312      	movs	r3, #18
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	4825      	ldr	r0, [pc, #148]	; (8000d30 <HAL_I2C_MspInit+0xf0>)
 8000c9a:	f002 f8c7 	bl	8002e2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a21      	ldr	r2, [pc, #132]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000ca8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000cba:	e030      	b.n	8000d1e <HAL_I2C_MspInit+0xde>
  else if(hi2c->Instance==I2C2)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a1c      	ldr	r2, [pc, #112]	; (8000d34 <HAL_I2C_MspInit+0xf4>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d12b      	bne.n	8000d1e <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000cd0:	f043 0320 	orr.w	r3, r3, #32
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0320 	and.w	r3, r3, #32
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce6:	2312      	movs	r3, #18
 8000ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480e      	ldr	r0, [pc, #56]	; (8000d38 <HAL_I2C_MspInit+0xf8>)
 8000cfe:	f002 f895 	bl	8002e2c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000d0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_I2C_MspInit+0xec>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
}
 8000d1e:	bf00      	nop
 8000d20:	3730      	adds	r7, #48	; 0x30
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40005400 	.word	0x40005400
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020400 	.word	0x40020400
 8000d34:	40005800 	.word	0x40005800
 8000d38:	40021400 	.word	0x40021400

08000d3c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08e      	sub	sp, #56	; 0x38
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a4b      	ldr	r2, [pc, #300]	; (8000e88 <HAL_I2S_MspInit+0x14c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	f040 80a0 	bne.w	8000ea0 <HAL_I2S_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]
 8000d64:	4b49      	ldr	r3, [pc, #292]	; (8000e8c <HAL_I2S_MspInit+0x150>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	4a48      	ldr	r2, [pc, #288]	; (8000e8c <HAL_I2S_MspInit+0x150>)
 8000d6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d70:	4b46      	ldr	r3, [pc, #280]	; (8000e8c <HAL_I2S_MspInit+0x150>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d78:	623b      	str	r3, [r7, #32]
 8000d7a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
 8000d80:	4b42      	ldr	r3, [pc, #264]	; (8000e8c <HAL_I2S_MspInit+0x150>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	4a41      	ldr	r2, [pc, #260]	; (8000e8c <HAL_I2S_MspInit+0x150>)
 8000d86:	f043 0304 	orr.w	r3, r3, #4
 8000d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8c:	4b3f      	ldr	r3, [pc, #252]	; (8000e8c <HAL_I2S_MspInit+0x150>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d90:	f003 0304 	and.w	r3, r3, #4
 8000d94:	61fb      	str	r3, [r7, #28]
 8000d96:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
 8000d9c:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <HAL_I2S_MspInit+0x150>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	4a3a      	ldr	r2, [pc, #232]	; (8000e8c <HAL_I2S_MspInit+0x150>)
 8000da2:	f043 0302 	orr.w	r3, r3, #2
 8000da6:	6313      	str	r3, [r2, #48]	; 0x30
 8000da8:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <HAL_I2S_MspInit+0x150>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	61bb      	str	r3, [r7, #24]
 8000db2:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000db4:	2304      	movs	r3, #4
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000dc4:	2306      	movs	r3, #6
 8000dc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4830      	ldr	r0, [pc, #192]	; (8000e90 <HAL_I2S_MspInit+0x154>)
 8000dd0:	f002 f82c 	bl	8002e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000dd4:	2348      	movs	r3, #72	; 0x48
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000de4:	2305      	movs	r3, #5
 8000de6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dec:	4619      	mov	r1, r3
 8000dee:	4828      	ldr	r0, [pc, #160]	; (8000e90 <HAL_I2S_MspInit+0x154>)
 8000df0:	f002 f81c 	bl	8002e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000df4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e06:	2305      	movs	r3, #5
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4820      	ldr	r0, [pc, #128]	; (8000e94 <HAL_I2S_MspInit+0x158>)
 8000e12:	f002 f80b 	bl	8002e2c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000e16:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <HAL_I2S_MspInit+0x15c>)
 8000e18:	4a20      	ldr	r2, [pc, #128]	; (8000e9c <HAL_I2S_MspInit+0x160>)
 8000e1a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000e1c:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <HAL_I2S_MspInit+0x15c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e22:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <HAL_I2S_MspInit+0x15c>)
 8000e24:	2240      	movs	r2, #64	; 0x40
 8000e26:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e28:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <HAL_I2S_MspInit+0x15c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e2e:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <HAL_I2S_MspInit+0x15c>)
 8000e30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e34:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <HAL_I2S_MspInit+0x15c>)
 8000e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e3c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <HAL_I2S_MspInit+0x15c>)
 8000e40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e44:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <HAL_I2S_MspInit+0x15c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_I2S_MspInit+0x15c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <HAL_I2S_MspInit+0x15c>)
 8000e54:	2204      	movs	r2, #4
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HAL_I2S_MspInit+0x15c>)
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_I2S_MspInit+0x15c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HAL_I2S_MspInit+0x15c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000e6a:	480b      	ldr	r0, [pc, #44]	; (8000e98 <HAL_I2S_MspInit+0x15c>)
 8000e6c:	f000 fb16 	bl	800149c <HAL_DMA_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 8000e76:	f7ff feb5 	bl	8000be4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <HAL_I2S_MspInit+0x15c>)
 8000e7e:	639a      	str	r2, [r3, #56]	; 0x38
 8000e80:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <HAL_I2S_MspInit+0x15c>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e86:	e0cb      	b.n	8001020 <HAL_I2S_MspInit+0x2e4>
 8000e88:	40003800 	.word	0x40003800
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020800 	.word	0x40020800
 8000e94:	40020400 	.word	0x40020400
 8000e98:	20001138 	.word	0x20001138
 8000e9c:	40026070 	.word	0x40026070
  else if(hi2s->Instance==SPI3)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a60      	ldr	r2, [pc, #384]	; (8001028 <HAL_I2S_MspInit+0x2ec>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	f040 80ba 	bne.w	8001020 <HAL_I2S_MspInit+0x2e4>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	4b5e      	ldr	r3, [pc, #376]	; (800102c <HAL_I2S_MspInit+0x2f0>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	4a5d      	ldr	r2, [pc, #372]	; (800102c <HAL_I2S_MspInit+0x2f0>)
 8000eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eba:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebc:	4b5b      	ldr	r3, [pc, #364]	; (800102c <HAL_I2S_MspInit+0x2f0>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	4b57      	ldr	r3, [pc, #348]	; (800102c <HAL_I2S_MspInit+0x2f0>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed0:	4a56      	ldr	r2, [pc, #344]	; (800102c <HAL_I2S_MspInit+0x2f0>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed8:	4b54      	ldr	r3, [pc, #336]	; (800102c <HAL_I2S_MspInit+0x2f0>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	4b50      	ldr	r3, [pc, #320]	; (800102c <HAL_I2S_MspInit+0x2f0>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eec:	4a4f      	ldr	r2, [pc, #316]	; (800102c <HAL_I2S_MspInit+0x2f0>)
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef4:	4b4d      	ldr	r3, [pc, #308]	; (800102c <HAL_I2S_MspInit+0x2f0>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	4b49      	ldr	r3, [pc, #292]	; (800102c <HAL_I2S_MspInit+0x2f0>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	4a48      	ldr	r2, [pc, #288]	; (800102c <HAL_I2S_MspInit+0x2f0>)
 8000f0a:	f043 0302 	orr.w	r3, r3, #2
 8000f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f10:	4b46      	ldr	r3, [pc, #280]	; (800102c <HAL_I2S_MspInit+0x2f0>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f1c:	2310      	movs	r3, #16
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f2c:	2306      	movs	r3, #6
 8000f2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f34:	4619      	mov	r1, r3
 8000f36:	483e      	ldr	r0, [pc, #248]	; (8001030 <HAL_I2S_MspInit+0x2f4>)
 8000f38:	f001 ff78 	bl	8002e2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_12;
 8000f3c:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f4e:	2306      	movs	r3, #6
 8000f50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f56:	4619      	mov	r1, r3
 8000f58:	4836      	ldr	r0, [pc, #216]	; (8001034 <HAL_I2S_MspInit+0x2f8>)
 8000f5a:	f001 ff67 	bl	8002e2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8000f70:	2305      	movs	r3, #5
 8000f72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f78:	4619      	mov	r1, r3
 8000f7a:	482e      	ldr	r0, [pc, #184]	; (8001034 <HAL_I2S_MspInit+0x2f8>)
 8000f7c:	f001 ff56 	bl	8002e2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f80:	2308      	movs	r3, #8
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f90:	2306      	movs	r3, #6
 8000f92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4827      	ldr	r0, [pc, #156]	; (8001038 <HAL_I2S_MspInit+0x2fc>)
 8000f9c:	f001 ff46 	bl	8002e2c <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000fa0:	4b26      	ldr	r3, [pc, #152]	; (800103c <HAL_I2S_MspInit+0x300>)
 8000fa2:	4a27      	ldr	r2, [pc, #156]	; (8001040 <HAL_I2S_MspInit+0x304>)
 8000fa4:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000fa6:	4b25      	ldr	r3, [pc, #148]	; (800103c <HAL_I2S_MspInit+0x300>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <HAL_I2S_MspInit+0x300>)
 8000fae:	2240      	movs	r2, #64	; 0x40
 8000fb0:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb2:	4b22      	ldr	r3, [pc, #136]	; (800103c <HAL_I2S_MspInit+0x300>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fb8:	4b20      	ldr	r3, [pc, #128]	; (800103c <HAL_I2S_MspInit+0x300>)
 8000fba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fbe:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	; (800103c <HAL_I2S_MspInit+0x300>)
 8000fc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fc6:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fc8:	4b1c      	ldr	r3, [pc, #112]	; (800103c <HAL_I2S_MspInit+0x300>)
 8000fca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fce:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <HAL_I2S_MspInit+0x300>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_I2S_MspInit+0x300>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <HAL_I2S_MspInit+0x300>)
 8000fde:	2204      	movs	r2, #4
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <HAL_I2S_MspInit+0x300>)
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <HAL_I2S_MspInit+0x300>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <HAL_I2S_MspInit+0x300>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000ff4:	4811      	ldr	r0, [pc, #68]	; (800103c <HAL_I2S_MspInit+0x300>)
 8000ff6:	f000 fa51 	bl	800149c <HAL_DMA_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_I2S_MspInit+0x2c8>
      Error_Handler();
 8001000:	f7ff fdf0 	bl	8000be4 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a0d      	ldr	r2, [pc, #52]	; (800103c <HAL_I2S_MspInit+0x300>)
 8001008:	639a      	str	r2, [r3, #56]	; 0x38
 800100a:	4a0c      	ldr	r2, [pc, #48]	; (800103c <HAL_I2S_MspInit+0x300>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	2100      	movs	r1, #0
 8001014:	2033      	movs	r0, #51	; 0x33
 8001016:	f000 fa0a 	bl	800142e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800101a:	2033      	movs	r0, #51	; 0x33
 800101c:	f000 fa23 	bl	8001466 <HAL_NVIC_EnableIRQ>
}
 8001020:	bf00      	nop
 8001022:	3738      	adds	r7, #56	; 0x38
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40003c00 	.word	0x40003c00
 800102c:	40023800 	.word	0x40023800
 8001030:	40020000 	.word	0x40020000
 8001034:	40020800 	.word	0x40020800
 8001038:	40020400 	.word	0x40020400
 800103c:	200010d8 	.word	0x200010d8
 8001040:	40026088 	.word	0x40026088

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <NMI_Handler+0x4>

0800104a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <HardFault_Handler+0x4>

08001050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <MemManage_Handler+0x4>

08001056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <UsageFault_Handler+0x4>

08001062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001090:	f000 f8ae 	bl	80011f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}

08001098 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <DMA1_Stream4_IRQHandler+0x10>)
 800109e:	f000 fb1b 	bl	80016d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20001138 	.word	0x20001138

080010ac <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <DMA1_Stream5_IRQHandler+0x10>)
 80010b2:	f000 fb11 	bl	80016d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200010d8 	.word	0x200010d8

080010c0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <SPI3_IRQHandler+0x10>)
 80010c6:	f002 ffb3 	bl	8004030 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200011e0 	.word	0x200011e0

080010d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <SystemInit+0x20>)
 80010da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <SystemInit+0x20>)
 80010e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001130 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010fc:	480d      	ldr	r0, [pc, #52]	; (8001134 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010fe:	490e      	ldr	r1, [pc, #56]	; (8001138 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001100:	4a0e      	ldr	r2, [pc, #56]	; (800113c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001104:	e002      	b.n	800110c <LoopCopyDataInit>

08001106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110a:	3304      	adds	r3, #4

0800110c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800110c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001110:	d3f9      	bcc.n	8001106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001112:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001114:	4c0b      	ldr	r4, [pc, #44]	; (8001144 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001118:	e001      	b.n	800111e <LoopFillZerobss>

0800111a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800111c:	3204      	adds	r2, #4

0800111e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001120:	d3fb      	bcc.n	800111a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001122:	f7ff ffd7 	bl	80010d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001126:	f004 f8c7 	bl	80052b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112a:	f7ff fb85 	bl	8000838 <main>
  bx  lr    
 800112e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001130:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001138:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800113c:	0807bcc8 	.word	0x0807bcc8
  ldr r2, =_sbss
 8001140:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001144:	2000122c 	.word	0x2000122c

08001148 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC_IRQHandler>
	...

0800114c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <HAL_Init+0x40>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0d      	ldr	r2, [pc, #52]	; (800118c <HAL_Init+0x40>)
 8001156:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800115a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <HAL_Init+0x40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0a      	ldr	r2, [pc, #40]	; (800118c <HAL_Init+0x40>)
 8001162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001166:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a07      	ldr	r2, [pc, #28]	; (800118c <HAL_Init+0x40>)
 800116e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001172:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001174:	2003      	movs	r0, #3
 8001176:	f000 f94f 	bl	8001418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800117a:	200f      	movs	r0, #15
 800117c:	f000 f808 	bl	8001190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001180:	f7ff fd36 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40023c00 	.word	0x40023c00

08001190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_InitTick+0x54>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_InitTick+0x58>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 f967 	bl	8001482 <HAL_SYSTICK_Config>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00e      	b.n	80011dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b0f      	cmp	r3, #15
 80011c2:	d80a      	bhi.n	80011da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c4:	2200      	movs	r2, #0
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	f000 f92f 	bl	800142e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d0:	4a06      	ldr	r2, [pc, #24]	; (80011ec <HAL_InitTick+0x5c>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e000      	b.n	80011dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000008 	.word	0x20000008
 80011ec:	20000004 	.word	0x20000004

080011f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x20>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_IncTick+0x24>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	4a04      	ldr	r2, [pc, #16]	; (8001214 <HAL_IncTick+0x24>)
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000008 	.word	0x20000008
 8001214:	20001228 	.word	0x20001228

08001218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <HAL_GetTick+0x14>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20001228 	.word	0x20001228

08001230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001238:	f7ff ffee 	bl	8001218 <HAL_GetTick>
 800123c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001248:	d005      	beq.n	8001256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <HAL_Delay+0x44>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4413      	add	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001256:	bf00      	nop
 8001258:	f7ff ffde 	bl	8001218 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	d8f7      	bhi.n	8001258 <HAL_Delay+0x28>
  {
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000008 	.word	0x20000008

08001278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001294:	4013      	ands	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012aa:	4a04      	ldr	r2, [pc, #16]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	60d3      	str	r3, [r2, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <__NVIC_GetPriorityGrouping+0x18>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f003 0307 	and.w	r3, r3, #7
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	db0b      	blt.n	8001306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	f003 021f 	and.w	r2, r3, #31
 80012f4:	4907      	ldr	r1, [pc, #28]	; (8001314 <__NVIC_EnableIRQ+0x38>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	095b      	lsrs	r3, r3, #5
 80012fc:	2001      	movs	r0, #1
 80012fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000e100 	.word	0xe000e100

08001318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	db0a      	blt.n	8001342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	490c      	ldr	r1, [pc, #48]	; (8001364 <__NVIC_SetPriority+0x4c>)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	0112      	lsls	r2, r2, #4
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	440b      	add	r3, r1
 800133c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001340:	e00a      	b.n	8001358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4908      	ldr	r1, [pc, #32]	; (8001368 <__NVIC_SetPriority+0x50>)
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	3b04      	subs	r3, #4
 8001350:	0112      	lsls	r2, r2, #4
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	440b      	add	r3, r1
 8001356:	761a      	strb	r2, [r3, #24]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000e100 	.word	0xe000e100
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136c:	b480      	push	{r7}
 800136e:	b089      	sub	sp, #36	; 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f1c3 0307 	rsb	r3, r3, #7
 8001386:	2b04      	cmp	r3, #4
 8001388:	bf28      	it	cs
 800138a:	2304      	movcs	r3, #4
 800138c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3304      	adds	r3, #4
 8001392:	2b06      	cmp	r3, #6
 8001394:	d902      	bls.n	800139c <NVIC_EncodePriority+0x30>
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3b03      	subs	r3, #3
 800139a:	e000      	b.n	800139e <NVIC_EncodePriority+0x32>
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a0:	f04f 32ff 	mov.w	r2, #4294967295
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	401a      	ands	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b4:	f04f 31ff 	mov.w	r1, #4294967295
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	fa01 f303 	lsl.w	r3, r1, r3
 80013be:	43d9      	mvns	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	4313      	orrs	r3, r2
         );
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3724      	adds	r7, #36	; 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e4:	d301      	bcc.n	80013ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00f      	b.n	800140a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <SysTick_Config+0x40>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f2:	210f      	movs	r1, #15
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f7ff ff8e 	bl	8001318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <SysTick_Config+0x40>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <SysTick_Config+0x40>)
 8001404:	2207      	movs	r2, #7
 8001406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	e000e010 	.word	0xe000e010

08001418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ff29 	bl	8001278 <__NVIC_SetPriorityGrouping>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
 800143a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001440:	f7ff ff3e 	bl	80012c0 <__NVIC_GetPriorityGrouping>
 8001444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	6978      	ldr	r0, [r7, #20]
 800144c:	f7ff ff8e 	bl	800136c <NVIC_EncodePriority>
 8001450:	4602      	mov	r2, r0
 8001452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff5d 	bl	8001318 <__NVIC_SetPriority>
}
 800145e:	bf00      	nop
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff31 	bl	80012dc <__NVIC_EnableIRQ>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ffa2 	bl	80013d4 <SysTick_Config>
 8001490:	4603      	mov	r3, r0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014a8:	f7ff feb6 	bl	8001218 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e099      	b.n	80015ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2202      	movs	r2, #2
 80014bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0201 	bic.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014d8:	e00f      	b.n	80014fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014da:	f7ff fe9d 	bl	8001218 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b05      	cmp	r3, #5
 80014e6:	d908      	bls.n	80014fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2220      	movs	r2, #32
 80014ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2203      	movs	r2, #3
 80014f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e078      	b.n	80015ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1e8      	bne.n	80014da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	4b38      	ldr	r3, [pc, #224]	; (80015f4 <HAL_DMA_Init+0x158>)
 8001514:	4013      	ands	r3, r2
 8001516:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001526:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001532:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800153e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	4313      	orrs	r3, r2
 800154a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	2b04      	cmp	r3, #4
 8001552:	d107      	bne.n	8001564 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	4313      	orrs	r3, r2
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	4313      	orrs	r3, r2
 8001562:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f023 0307 	bic.w	r3, r3, #7
 800157a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	4313      	orrs	r3, r2
 8001584:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	2b04      	cmp	r3, #4
 800158c:	d117      	bne.n	80015be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4313      	orrs	r3, r2
 8001596:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00e      	beq.n	80015be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 fa59 	bl	8001a58 <DMA_CheckFifoParam>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d008      	beq.n	80015be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2240      	movs	r2, #64	; 0x40
 80015b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80015ba:	2301      	movs	r3, #1
 80015bc:	e016      	b.n	80015ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fa10 	bl	80019ec <DMA_CalcBaseAndBitshift>
 80015cc:	4603      	mov	r3, r0
 80015ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d4:	223f      	movs	r2, #63	; 0x3f
 80015d6:	409a      	lsls	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	f010803f 	.word	0xf010803f

080015f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001604:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001606:	f7ff fe07 	bl	8001218 <HAL_GetTick>
 800160a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d008      	beq.n	800162a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2280      	movs	r2, #128	; 0x80
 800161c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e052      	b.n	80016d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0216 	bic.w	r2, r2, #22
 8001638:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	695a      	ldr	r2, [r3, #20]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001648:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	2b00      	cmp	r3, #0
 8001650:	d103      	bne.n	800165a <HAL_DMA_Abort+0x62>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001656:	2b00      	cmp	r3, #0
 8001658:	d007      	beq.n	800166a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0208 	bic.w	r2, r2, #8
 8001668:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0201 	bic.w	r2, r2, #1
 8001678:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800167a:	e013      	b.n	80016a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800167c:	f7ff fdcc 	bl	8001218 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b05      	cmp	r3, #5
 8001688:	d90c      	bls.n	80016a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2220      	movs	r2, #32
 800168e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2203      	movs	r2, #3
 8001694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e015      	b.n	80016d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1e4      	bne.n	800167c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b6:	223f      	movs	r2, #63	; 0x3f
 80016b8:	409a      	lsls	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016e4:	4b92      	ldr	r3, [pc, #584]	; (8001930 <HAL_DMA_IRQHandler+0x258>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a92      	ldr	r2, [pc, #584]	; (8001934 <HAL_DMA_IRQHandler+0x25c>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	0a9b      	lsrs	r3, r3, #10
 80016f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001702:	2208      	movs	r2, #8
 8001704:	409a      	lsls	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4013      	ands	r3, r2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d01a      	beq.n	8001744 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d013      	beq.n	8001744 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0204 	bic.w	r2, r2, #4
 800172a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001730:	2208      	movs	r2, #8
 8001732:	409a      	lsls	r2, r3
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173c:	f043 0201 	orr.w	r2, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001748:	2201      	movs	r2, #1
 800174a:	409a      	lsls	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4013      	ands	r3, r2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d012      	beq.n	800177a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00b      	beq.n	800177a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001766:	2201      	movs	r2, #1
 8001768:	409a      	lsls	r2, r3
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001772:	f043 0202 	orr.w	r2, r3, #2
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177e:	2204      	movs	r2, #4
 8001780:	409a      	lsls	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4013      	ands	r3, r2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d012      	beq.n	80017b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00b      	beq.n	80017b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179c:	2204      	movs	r2, #4
 800179e:	409a      	lsls	r2, r3
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a8:	f043 0204 	orr.w	r2, r3, #4
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b4:	2210      	movs	r2, #16
 80017b6:	409a      	lsls	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d043      	beq.n	8001848 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d03c      	beq.n	8001848 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d2:	2210      	movs	r2, #16
 80017d4:	409a      	lsls	r2, r3
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d018      	beq.n	800181a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d108      	bne.n	8001808 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d024      	beq.n	8001848 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	4798      	blx	r3
 8001806:	e01f      	b.n	8001848 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800180c:	2b00      	cmp	r3, #0
 800180e:	d01b      	beq.n	8001848 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	4798      	blx	r3
 8001818:	e016      	b.n	8001848 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001824:	2b00      	cmp	r3, #0
 8001826:	d107      	bne.n	8001838 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0208 	bic.w	r2, r2, #8
 8001836:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184c:	2220      	movs	r2, #32
 800184e:	409a      	lsls	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 808e 	beq.w	8001976 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 8086 	beq.w	8001976 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186e:	2220      	movs	r2, #32
 8001870:	409a      	lsls	r2, r3
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b05      	cmp	r3, #5
 8001880:	d136      	bne.n	80018f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 0216 	bic.w	r2, r2, #22
 8001890:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	695a      	ldr	r2, [r3, #20]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d103      	bne.n	80018b2 <HAL_DMA_IRQHandler+0x1da>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d007      	beq.n	80018c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0208 	bic.w	r2, r2, #8
 80018c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c6:	223f      	movs	r2, #63	; 0x3f
 80018c8:	409a      	lsls	r2, r3
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d07d      	beq.n	80019e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	4798      	blx	r3
        }
        return;
 80018ee:	e078      	b.n	80019e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d01c      	beq.n	8001938 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d108      	bne.n	800191e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001910:	2b00      	cmp	r3, #0
 8001912:	d030      	beq.n	8001976 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	4798      	blx	r3
 800191c:	e02b      	b.n	8001976 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001922:	2b00      	cmp	r3, #0
 8001924:	d027      	beq.n	8001976 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	4798      	blx	r3
 800192e:	e022      	b.n	8001976 <HAL_DMA_IRQHandler+0x29e>
 8001930:	20000000 	.word	0x20000000
 8001934:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10f      	bne.n	8001966 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0210 	bic.w	r2, r2, #16
 8001954:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197a:	2b00      	cmp	r3, #0
 800197c:	d032      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d022      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2205      	movs	r2, #5
 800198e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0201 	bic.w	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	3301      	adds	r3, #1
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d307      	bcc.n	80019be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f2      	bne.n	80019a2 <HAL_DMA_IRQHandler+0x2ca>
 80019bc:	e000      	b.n	80019c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80019be:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d005      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	4798      	blx	r3
 80019e0:	e000      	b.n	80019e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80019e2:	bf00      	nop
    }
  }
}
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop

080019ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	3b10      	subs	r3, #16
 80019fc:	4a14      	ldr	r2, [pc, #80]	; (8001a50 <DMA_CalcBaseAndBitshift+0x64>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	091b      	lsrs	r3, r3, #4
 8001a04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a06:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <DMA_CalcBaseAndBitshift+0x68>)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d909      	bls.n	8001a2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a22:	f023 0303 	bic.w	r3, r3, #3
 8001a26:	1d1a      	adds	r2, r3, #4
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	659a      	str	r2, [r3, #88]	; 0x58
 8001a2c:	e007      	b.n	8001a3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a36:	f023 0303 	bic.w	r3, r3, #3
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	aaaaaaab 	.word	0xaaaaaaab
 8001a54:	0807bcb0 	.word	0x0807bcb0

08001a58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d11f      	bne.n	8001ab2 <DMA_CheckFifoParam+0x5a>
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d856      	bhi.n	8001b26 <DMA_CheckFifoParam+0xce>
 8001a78:	a201      	add	r2, pc, #4	; (adr r2, 8001a80 <DMA_CheckFifoParam+0x28>)
 8001a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7e:	bf00      	nop
 8001a80:	08001a91 	.word	0x08001a91
 8001a84:	08001aa3 	.word	0x08001aa3
 8001a88:	08001a91 	.word	0x08001a91
 8001a8c:	08001b27 	.word	0x08001b27
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d046      	beq.n	8001b2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aa0:	e043      	b.n	8001b2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001aaa:	d140      	bne.n	8001b2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ab0:	e03d      	b.n	8001b2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aba:	d121      	bne.n	8001b00 <DMA_CheckFifoParam+0xa8>
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d837      	bhi.n	8001b32 <DMA_CheckFifoParam+0xda>
 8001ac2:	a201      	add	r2, pc, #4	; (adr r2, 8001ac8 <DMA_CheckFifoParam+0x70>)
 8001ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac8:	08001ad9 	.word	0x08001ad9
 8001acc:	08001adf 	.word	0x08001adf
 8001ad0:	08001ad9 	.word	0x08001ad9
 8001ad4:	08001af1 	.word	0x08001af1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
      break;
 8001adc:	e030      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d025      	beq.n	8001b36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aee:	e022      	b.n	8001b36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001af8:	d11f      	bne.n	8001b3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001afe:	e01c      	b.n	8001b3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d903      	bls.n	8001b0e <DMA_CheckFifoParam+0xb6>
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d003      	beq.n	8001b14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b0c:	e018      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	73fb      	strb	r3, [r7, #15]
      break;
 8001b12:	e015      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00e      	beq.n	8001b3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
      break;
 8001b24:	e00b      	b.n	8001b3e <DMA_CheckFifoParam+0xe6>
      break;
 8001b26:	bf00      	nop
 8001b28:	e00a      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      break;
 8001b2a:	bf00      	nop
 8001b2c:	e008      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      break;
 8001b2e:	bf00      	nop
 8001b30:	e006      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      break;
 8001b32:	bf00      	nop
 8001b34:	e004      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      break;
 8001b36:	bf00      	nop
 8001b38:	e002      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b3a:	bf00      	nop
 8001b3c:	e000      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      break;
 8001b3e:	bf00      	nop
    }
  } 
  
  return status; 
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop

08001b50 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
 8001b5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b80      	cmp	r3, #128	; 0x80
 8001b68:	d106      	bne.n	8001b78 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	f001 b913 	b.w	8002d9e <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d007      	beq.n	8001b90 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d105      	bne.n	8001b9c <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2240      	movs	r2, #64	; 0x40
 8001b94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	f001 b901 	b.w	8002d9e <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d102      	bne.n	8001bac <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	f001 b8f9 	b.w	8002d9e <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	f041 80e7 	bne.w	8002d90 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001bde:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f001 f8f6 	bl	8002de0 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b99      	ldr	r3, [pc, #612]	; (8001e60 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d960      	bls.n	8001cc2 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a97      	ldr	r2, [pc, #604]	; (8001e64 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d057      	beq.n	8001cba <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a96      	ldr	r2, [pc, #600]	; (8001e68 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d050      	beq.n	8001cb6 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a94      	ldr	r2, [pc, #592]	; (8001e6c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d049      	beq.n	8001cb2 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a93      	ldr	r2, [pc, #588]	; (8001e70 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d042      	beq.n	8001cae <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a91      	ldr	r2, [pc, #580]	; (8001e74 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d03a      	beq.n	8001ca8 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a90      	ldr	r2, [pc, #576]	; (8001e78 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d032      	beq.n	8001ca2 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a8e      	ldr	r2, [pc, #568]	; (8001e7c <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d02a      	beq.n	8001c9c <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a8d      	ldr	r2, [pc, #564]	; (8001e80 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d022      	beq.n	8001c96 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a8b      	ldr	r2, [pc, #556]	; (8001e84 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d01a      	beq.n	8001c90 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a8a      	ldr	r2, [pc, #552]	; (8001e88 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d012      	beq.n	8001c8a <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a88      	ldr	r2, [pc, #544]	; (8001e8c <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d00a      	beq.n	8001c84 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a87      	ldr	r2, [pc, #540]	; (8001e90 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d102      	bne.n	8001c7e <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8001c78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c7c:	e01e      	b.n	8001cbc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001c7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001c82:	e01b      	b.n	8001cbc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001c84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c88:	e018      	b.n	8001cbc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001c8a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c8e:	e015      	b.n	8001cbc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001c90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c94:	e012      	b.n	8001cbc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001c96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c9a:	e00f      	b.n	8001cbc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001c9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ca0:	e00c      	b.n	8001cbc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001ca2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ca6:	e009      	b.n	8001cbc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001ca8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cac:	e006      	b.n	8001cbc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001cae:	2320      	movs	r3, #32
 8001cb0:	e004      	b.n	8001cbc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001cb2:	2320      	movs	r3, #32
 8001cb4:	e002      	b.n	8001cbc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001cb6:	2320      	movs	r3, #32
 8001cb8:	e000      	b.n	8001cbc <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001cba:	2320      	movs	r3, #32
 8001cbc:	4a75      	ldr	r2, [pc, #468]	; (8001e94 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8001cbe:	60d3      	str	r3, [r2, #12]
 8001cc0:	e150      	b.n	8001f64 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b73      	ldr	r3, [pc, #460]	; (8001e98 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d960      	bls.n	8001d90 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a64      	ldr	r2, [pc, #400]	; (8001e64 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d057      	beq.n	8001d88 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a62      	ldr	r2, [pc, #392]	; (8001e68 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d050      	beq.n	8001d84 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a61      	ldr	r2, [pc, #388]	; (8001e6c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d049      	beq.n	8001d80 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a5f      	ldr	r2, [pc, #380]	; (8001e70 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d042      	beq.n	8001d7c <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a5e      	ldr	r2, [pc, #376]	; (8001e74 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d03a      	beq.n	8001d76 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a5c      	ldr	r2, [pc, #368]	; (8001e78 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d032      	beq.n	8001d70 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a5b      	ldr	r2, [pc, #364]	; (8001e7c <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d02a      	beq.n	8001d6a <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a59      	ldr	r2, [pc, #356]	; (8001e80 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d022      	beq.n	8001d64 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a58      	ldr	r2, [pc, #352]	; (8001e84 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d01a      	beq.n	8001d5e <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a56      	ldr	r2, [pc, #344]	; (8001e88 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d012      	beq.n	8001d58 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a55      	ldr	r2, [pc, #340]	; (8001e8c <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d00a      	beq.n	8001d52 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a53      	ldr	r2, [pc, #332]	; (8001e90 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d102      	bne.n	8001d4c <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8001d46:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d4a:	e01e      	b.n	8001d8a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001d4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001d50:	e01b      	b.n	8001d8a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001d52:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d56:	e018      	b.n	8001d8a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001d58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d5c:	e015      	b.n	8001d8a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001d5e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d62:	e012      	b.n	8001d8a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001d64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d68:	e00f      	b.n	8001d8a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001d6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d6e:	e00c      	b.n	8001d8a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001d70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d74:	e009      	b.n	8001d8a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001d76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d7a:	e006      	b.n	8001d8a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001d7c:	2320      	movs	r3, #32
 8001d7e:	e004      	b.n	8001d8a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001d80:	2320      	movs	r3, #32
 8001d82:	e002      	b.n	8001d8a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001d84:	2320      	movs	r3, #32
 8001d86:	e000      	b.n	8001d8a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001d88:	2320      	movs	r3, #32
 8001d8a:	4a42      	ldr	r2, [pc, #264]	; (8001e94 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8001d8c:	6093      	str	r3, [r2, #8]
 8001d8e:	e0e9      	b.n	8001f64 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b41      	ldr	r3, [pc, #260]	; (8001e9c <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	f240 8083 	bls.w	8001ea4 <HAL_DMAEx_MultiBufferStart_IT+0x354>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a30      	ldr	r2, [pc, #192]	; (8001e64 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d057      	beq.n	8001e58 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a2e      	ldr	r2, [pc, #184]	; (8001e68 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d050      	beq.n	8001e54 <HAL_DMAEx_MultiBufferStart_IT+0x304>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a2d      	ldr	r2, [pc, #180]	; (8001e6c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d049      	beq.n	8001e50 <HAL_DMAEx_MultiBufferStart_IT+0x300>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a2b      	ldr	r2, [pc, #172]	; (8001e70 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d042      	beq.n	8001e4c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a2a      	ldr	r2, [pc, #168]	; (8001e74 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d03a      	beq.n	8001e46 <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a28      	ldr	r2, [pc, #160]	; (8001e78 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d032      	beq.n	8001e40 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a27      	ldr	r2, [pc, #156]	; (8001e7c <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d02a      	beq.n	8001e3a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a25      	ldr	r2, [pc, #148]	; (8001e80 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d022      	beq.n	8001e34 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a24      	ldr	r2, [pc, #144]	; (8001e84 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d01a      	beq.n	8001e2e <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a22      	ldr	r2, [pc, #136]	; (8001e88 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d012      	beq.n	8001e28 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a21      	ldr	r2, [pc, #132]	; (8001e8c <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d00a      	beq.n	8001e22 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1f      	ldr	r2, [pc, #124]	; (8001e90 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d102      	bne.n	8001e1c <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8001e16:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e1a:	e01e      	b.n	8001e5a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8001e1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e20:	e01b      	b.n	8001e5a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8001e22:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e26:	e018      	b.n	8001e5a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8001e28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e2c:	e015      	b.n	8001e5a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8001e2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e32:	e012      	b.n	8001e5a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8001e34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e38:	e00f      	b.n	8001e5a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8001e3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e3e:	e00c      	b.n	8001e5a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8001e40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e44:	e009      	b.n	8001e5a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8001e46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e4a:	e006      	b.n	8001e5a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8001e4c:	2320      	movs	r3, #32
 8001e4e:	e004      	b.n	8001e5a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8001e50:	2320      	movs	r3, #32
 8001e52:	e002      	b.n	8001e5a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8001e54:	2320      	movs	r3, #32
 8001e56:	e000      	b.n	8001e5a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8001e58:	2320      	movs	r3, #32
 8001e5a:	4a11      	ldr	r2, [pc, #68]	; (8001ea0 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8001e5c:	60d3      	str	r3, [r2, #12]
 8001e5e:	e081      	b.n	8001f64 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8001e60:	40026458 	.word	0x40026458
 8001e64:	40026010 	.word	0x40026010
 8001e68:	40026410 	.word	0x40026410
 8001e6c:	40026070 	.word	0x40026070
 8001e70:	40026470 	.word	0x40026470
 8001e74:	40026028 	.word	0x40026028
 8001e78:	40026428 	.word	0x40026428
 8001e7c:	40026088 	.word	0x40026088
 8001e80:	40026488 	.word	0x40026488
 8001e84:	40026040 	.word	0x40026040
 8001e88:	40026440 	.word	0x40026440
 8001e8c:	400260a0 	.word	0x400260a0
 8001e90:	400264a0 	.word	0x400264a0
 8001e94:	40026400 	.word	0x40026400
 8001e98:	400260b8 	.word	0x400260b8
 8001e9c:	40026058 	.word	0x40026058
 8001ea0:	40026000 	.word	0x40026000
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a96      	ldr	r2, [pc, #600]	; (8002104 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d057      	beq.n	8001f5e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a95      	ldr	r2, [pc, #596]	; (8002108 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d050      	beq.n	8001f5a <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a93      	ldr	r2, [pc, #588]	; (800210c <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d049      	beq.n	8001f56 <HAL_DMAEx_MultiBufferStart_IT+0x406>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a92      	ldr	r2, [pc, #584]	; (8002110 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d042      	beq.n	8001f52 <HAL_DMAEx_MultiBufferStart_IT+0x402>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a90      	ldr	r2, [pc, #576]	; (8002114 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d03a      	beq.n	8001f4c <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a8f      	ldr	r2, [pc, #572]	; (8002118 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d032      	beq.n	8001f46 <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a8d      	ldr	r2, [pc, #564]	; (800211c <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d02a      	beq.n	8001f40 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a8c      	ldr	r2, [pc, #560]	; (8002120 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d022      	beq.n	8001f3a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a8a      	ldr	r2, [pc, #552]	; (8002124 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d01a      	beq.n	8001f34 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a89      	ldr	r2, [pc, #548]	; (8002128 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d012      	beq.n	8001f2e <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a87      	ldr	r2, [pc, #540]	; (800212c <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00a      	beq.n	8001f28 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a86      	ldr	r2, [pc, #536]	; (8002130 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d102      	bne.n	8001f22 <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8001f1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f20:	e01e      	b.n	8001f60 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8001f22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001f26:	e01b      	b.n	8001f60 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8001f28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f2c:	e018      	b.n	8001f60 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8001f2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f32:	e015      	b.n	8001f60 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8001f34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f38:	e012      	b.n	8001f60 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8001f3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f3e:	e00f      	b.n	8001f60 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8001f40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f44:	e00c      	b.n	8001f60 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8001f46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f4a:	e009      	b.n	8001f60 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8001f4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f50:	e006      	b.n	8001f60 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8001f52:	2320      	movs	r3, #32
 8001f54:	e004      	b.n	8001f60 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8001f56:	2320      	movs	r3, #32
 8001f58:	e002      	b.n	8001f60 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8001f5a:	2320      	movs	r3, #32
 8001f5c:	e000      	b.n	8001f60 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8001f5e:	2320      	movs	r3, #32
 8001f60:	4a74      	ldr	r2, [pc, #464]	; (8002134 <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 8001f62:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b73      	ldr	r3, [pc, #460]	; (8002138 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d960      	bls.n	8002032 <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a63      	ldr	r2, [pc, #396]	; (8002104 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d057      	beq.n	800202a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a62      	ldr	r2, [pc, #392]	; (8002108 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d050      	beq.n	8002026 <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a60      	ldr	r2, [pc, #384]	; (800210c <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d049      	beq.n	8002022 <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a5f      	ldr	r2, [pc, #380]	; (8002110 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d042      	beq.n	800201e <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a5d      	ldr	r2, [pc, #372]	; (8002114 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d03a      	beq.n	8002018 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a5c      	ldr	r2, [pc, #368]	; (8002118 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d032      	beq.n	8002012 <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a5a      	ldr	r2, [pc, #360]	; (800211c <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d02a      	beq.n	800200c <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a59      	ldr	r2, [pc, #356]	; (8002120 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d022      	beq.n	8002006 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a57      	ldr	r2, [pc, #348]	; (8002124 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d01a      	beq.n	8002000 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a56      	ldr	r2, [pc, #344]	; (8002128 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d012      	beq.n	8001ffa <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a54      	ldr	r2, [pc, #336]	; (800212c <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00a      	beq.n	8001ff4 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a53      	ldr	r2, [pc, #332]	; (8002130 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d102      	bne.n	8001fee <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8001fe8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fec:	e01e      	b.n	800202c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8001fee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ff2:	e01b      	b.n	800202c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8001ff4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ff8:	e018      	b.n	800202c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8001ffa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ffe:	e015      	b.n	800202c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002000:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002004:	e012      	b.n	800202c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800200a:	e00f      	b.n	800202c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800200c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002010:	e00c      	b.n	800202c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002016:	e009      	b.n	800202c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800201c:	e006      	b.n	800202c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800201e:	2310      	movs	r3, #16
 8002020:	e004      	b.n	800202c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002022:	2310      	movs	r3, #16
 8002024:	e002      	b.n	800202c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002026:	2310      	movs	r3, #16
 8002028:	e000      	b.n	800202c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800202a:	2310      	movs	r3, #16
 800202c:	4a43      	ldr	r2, [pc, #268]	; (800213c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 800202e:	60d3      	str	r3, [r2, #12]
 8002030:	e14f      	b.n	80022d2 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	4b41      	ldr	r3, [pc, #260]	; (8002140 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 800203a:	429a      	cmp	r2, r3
 800203c:	f240 8082 	bls.w	8002144 <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a2f      	ldr	r2, [pc, #188]	; (8002104 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d057      	beq.n	80020fa <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a2e      	ldr	r2, [pc, #184]	; (8002108 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d050      	beq.n	80020f6 <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a2c      	ldr	r2, [pc, #176]	; (800210c <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d049      	beq.n	80020f2 <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a2b      	ldr	r2, [pc, #172]	; (8002110 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d042      	beq.n	80020ee <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a29      	ldr	r2, [pc, #164]	; (8002114 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d03a      	beq.n	80020e8 <HAL_DMAEx_MultiBufferStart_IT+0x598>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a28      	ldr	r2, [pc, #160]	; (8002118 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d032      	beq.n	80020e2 <HAL_DMAEx_MultiBufferStart_IT+0x592>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a26      	ldr	r2, [pc, #152]	; (800211c <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d02a      	beq.n	80020dc <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a25      	ldr	r2, [pc, #148]	; (8002120 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d022      	beq.n	80020d6 <HAL_DMAEx_MultiBufferStart_IT+0x586>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a23      	ldr	r2, [pc, #140]	; (8002124 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d01a      	beq.n	80020d0 <HAL_DMAEx_MultiBufferStart_IT+0x580>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a22      	ldr	r2, [pc, #136]	; (8002128 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d012      	beq.n	80020ca <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a20      	ldr	r2, [pc, #128]	; (800212c <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00a      	beq.n	80020c4 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1f      	ldr	r2, [pc, #124]	; (8002130 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d102      	bne.n	80020be <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 80020b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020bc:	e01e      	b.n	80020fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80020be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80020c2:	e01b      	b.n	80020fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80020c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020c8:	e018      	b.n	80020fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80020ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020ce:	e015      	b.n	80020fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80020d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020d4:	e012      	b.n	80020fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80020d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020da:	e00f      	b.n	80020fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80020dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020e0:	e00c      	b.n	80020fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80020e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020e6:	e009      	b.n	80020fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80020e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ec:	e006      	b.n	80020fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80020ee:	2310      	movs	r3, #16
 80020f0:	e004      	b.n	80020fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80020f2:	2310      	movs	r3, #16
 80020f4:	e002      	b.n	80020fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80020f6:	2310      	movs	r3, #16
 80020f8:	e000      	b.n	80020fc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80020fa:	2310      	movs	r3, #16
 80020fc:	4a0f      	ldr	r2, [pc, #60]	; (800213c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 80020fe:	6093      	str	r3, [r2, #8]
 8002100:	e0e7      	b.n	80022d2 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002102:	bf00      	nop
 8002104:	40026010 	.word	0x40026010
 8002108:	40026410 	.word	0x40026410
 800210c:	40026070 	.word	0x40026070
 8002110:	40026470 	.word	0x40026470
 8002114:	40026028 	.word	0x40026028
 8002118:	40026428 	.word	0x40026428
 800211c:	40026088 	.word	0x40026088
 8002120:	40026488 	.word	0x40026488
 8002124:	40026040 	.word	0x40026040
 8002128:	40026440 	.word	0x40026440
 800212c:	400260a0 	.word	0x400260a0
 8002130:	400264a0 	.word	0x400264a0
 8002134:	40026000 	.word	0x40026000
 8002138:	40026458 	.word	0x40026458
 800213c:	40026400 	.word	0x40026400
 8002140:	400260b8 	.word	0x400260b8
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	4b96      	ldr	r3, [pc, #600]	; (80023a4 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800214c:	429a      	cmp	r2, r3
 800214e:	d960      	bls.n	8002212 <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a94      	ldr	r2, [pc, #592]	; (80023a8 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d057      	beq.n	800220a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a93      	ldr	r2, [pc, #588]	; (80023ac <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d050      	beq.n	8002206 <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a91      	ldr	r2, [pc, #580]	; (80023b0 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d049      	beq.n	8002202 <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a90      	ldr	r2, [pc, #576]	; (80023b4 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d042      	beq.n	80021fe <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a8e      	ldr	r2, [pc, #568]	; (80023b8 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d03a      	beq.n	80021f8 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a8d      	ldr	r2, [pc, #564]	; (80023bc <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d032      	beq.n	80021f2 <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a8b      	ldr	r2, [pc, #556]	; (80023c0 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d02a      	beq.n	80021ec <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a8a      	ldr	r2, [pc, #552]	; (80023c4 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d022      	beq.n	80021e6 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a88      	ldr	r2, [pc, #544]	; (80023c8 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01a      	beq.n	80021e0 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a87      	ldr	r2, [pc, #540]	; (80023cc <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d012      	beq.n	80021da <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a85      	ldr	r2, [pc, #532]	; (80023d0 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00a      	beq.n	80021d4 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a84      	ldr	r2, [pc, #528]	; (80023d4 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d102      	bne.n	80021ce <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 80021c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021cc:	e01e      	b.n	800220c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80021ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80021d2:	e01b      	b.n	800220c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80021d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021d8:	e018      	b.n	800220c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80021da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021de:	e015      	b.n	800220c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80021e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021e4:	e012      	b.n	800220c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80021e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ea:	e00f      	b.n	800220c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80021ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021f0:	e00c      	b.n	800220c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80021f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021f6:	e009      	b.n	800220c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80021f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021fc:	e006      	b.n	800220c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80021fe:	2310      	movs	r3, #16
 8002200:	e004      	b.n	800220c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002202:	2310      	movs	r3, #16
 8002204:	e002      	b.n	800220c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002206:	2310      	movs	r3, #16
 8002208:	e000      	b.n	800220c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800220a:	2310      	movs	r3, #16
 800220c:	4a72      	ldr	r2, [pc, #456]	; (80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 800220e:	60d3      	str	r3, [r2, #12]
 8002210:	e05f      	b.n	80022d2 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a64      	ldr	r2, [pc, #400]	; (80023a8 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d057      	beq.n	80022cc <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a62      	ldr	r2, [pc, #392]	; (80023ac <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d050      	beq.n	80022c8 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a61      	ldr	r2, [pc, #388]	; (80023b0 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d049      	beq.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a5f      	ldr	r2, [pc, #380]	; (80023b4 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d042      	beq.n	80022c0 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a5e      	ldr	r2, [pc, #376]	; (80023b8 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d03a      	beq.n	80022ba <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a5c      	ldr	r2, [pc, #368]	; (80023bc <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d032      	beq.n	80022b4 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a5b      	ldr	r2, [pc, #364]	; (80023c0 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d02a      	beq.n	80022ae <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a59      	ldr	r2, [pc, #356]	; (80023c4 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d022      	beq.n	80022a8 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a58      	ldr	r2, [pc, #352]	; (80023c8 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d01a      	beq.n	80022a2 <HAL_DMAEx_MultiBufferStart_IT+0x752>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a56      	ldr	r2, [pc, #344]	; (80023cc <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d012      	beq.n	800229c <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a55      	ldr	r2, [pc, #340]	; (80023d0 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d00a      	beq.n	8002296 <HAL_DMAEx_MultiBufferStart_IT+0x746>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a53      	ldr	r2, [pc, #332]	; (80023d4 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d102      	bne.n	8002290 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 800228a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800228e:	e01e      	b.n	80022ce <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002290:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002294:	e01b      	b.n	80022ce <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002296:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800229a:	e018      	b.n	80022ce <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800229c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022a0:	e015      	b.n	80022ce <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80022a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022a6:	e012      	b.n	80022ce <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80022a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ac:	e00f      	b.n	80022ce <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80022ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022b2:	e00c      	b.n	80022ce <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80022b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022b8:	e009      	b.n	80022ce <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80022ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022be:	e006      	b.n	80022ce <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80022c0:	2310      	movs	r3, #16
 80022c2:	e004      	b.n	80022ce <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80022c4:	2310      	movs	r3, #16
 80022c6:	e002      	b.n	80022ce <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80022c8:	2310      	movs	r3, #16
 80022ca:	e000      	b.n	80022ce <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80022cc:	2310      	movs	r3, #16
 80022ce:	4a42      	ldr	r2, [pc, #264]	; (80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 80022d0:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	4b40      	ldr	r3, [pc, #256]	; (80023dc <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 80022da:	429a      	cmp	r2, r3
 80022dc:	f240 8082 	bls.w	80023e4 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a30      	ldr	r2, [pc, #192]	; (80023a8 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d057      	beq.n	800239a <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a2f      	ldr	r2, [pc, #188]	; (80023ac <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d050      	beq.n	8002396 <HAL_DMAEx_MultiBufferStart_IT+0x846>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a2d      	ldr	r2, [pc, #180]	; (80023b0 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d049      	beq.n	8002392 <HAL_DMAEx_MultiBufferStart_IT+0x842>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a2c      	ldr	r2, [pc, #176]	; (80023b4 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d042      	beq.n	800238e <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a2a      	ldr	r2, [pc, #168]	; (80023b8 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d03a      	beq.n	8002388 <HAL_DMAEx_MultiBufferStart_IT+0x838>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a29      	ldr	r2, [pc, #164]	; (80023bc <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d032      	beq.n	8002382 <HAL_DMAEx_MultiBufferStart_IT+0x832>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a27      	ldr	r2, [pc, #156]	; (80023c0 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d02a      	beq.n	800237c <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a26      	ldr	r2, [pc, #152]	; (80023c4 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d022      	beq.n	8002376 <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a24      	ldr	r2, [pc, #144]	; (80023c8 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d01a      	beq.n	8002370 <HAL_DMAEx_MultiBufferStart_IT+0x820>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a23      	ldr	r2, [pc, #140]	; (80023cc <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d012      	beq.n	800236a <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a21      	ldr	r2, [pc, #132]	; (80023d0 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d00a      	beq.n	8002364 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a20      	ldr	r2, [pc, #128]	; (80023d4 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d102      	bne.n	800235e <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8002358:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800235c:	e01e      	b.n	800239c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800235e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002362:	e01b      	b.n	800239c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002364:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002368:	e018      	b.n	800239c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800236a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800236e:	e015      	b.n	800239c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002370:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002374:	e012      	b.n	800239c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002376:	f44f 7300 	mov.w	r3, #512	; 0x200
 800237a:	e00f      	b.n	800239c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800237c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002380:	e00c      	b.n	800239c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002382:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002386:	e009      	b.n	800239c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800238c:	e006      	b.n	800239c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800238e:	2308      	movs	r3, #8
 8002390:	e004      	b.n	800239c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002392:	2308      	movs	r3, #8
 8002394:	e002      	b.n	800239c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002396:	2308      	movs	r3, #8
 8002398:	e000      	b.n	800239c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800239a:	2308      	movs	r3, #8
 800239c:	4a10      	ldr	r2, [pc, #64]	; (80023e0 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 800239e:	60d3      	str	r3, [r2, #12]
 80023a0:	e16f      	b.n	8002682 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80023a2:	bf00      	nop
 80023a4:	40026058 	.word	0x40026058
 80023a8:	40026010 	.word	0x40026010
 80023ac:	40026410 	.word	0x40026410
 80023b0:	40026070 	.word	0x40026070
 80023b4:	40026470 	.word	0x40026470
 80023b8:	40026028 	.word	0x40026028
 80023bc:	40026428 	.word	0x40026428
 80023c0:	40026088 	.word	0x40026088
 80023c4:	40026488 	.word	0x40026488
 80023c8:	40026040 	.word	0x40026040
 80023cc:	40026440 	.word	0x40026440
 80023d0:	400260a0 	.word	0x400260a0
 80023d4:	400264a0 	.word	0x400264a0
 80023d8:	40026000 	.word	0x40026000
 80023dc:	40026458 	.word	0x40026458
 80023e0:	40026400 	.word	0x40026400
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b94      	ldr	r3, [pc, #592]	; (800263c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d960      	bls.n	80024b2 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a92      	ldr	r2, [pc, #584]	; (8002640 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d057      	beq.n	80024aa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a91      	ldr	r2, [pc, #580]	; (8002644 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d050      	beq.n	80024a6 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a8f      	ldr	r2, [pc, #572]	; (8002648 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d049      	beq.n	80024a2 <HAL_DMAEx_MultiBufferStart_IT+0x952>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a8e      	ldr	r2, [pc, #568]	; (800264c <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d042      	beq.n	800249e <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a8c      	ldr	r2, [pc, #560]	; (8002650 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d03a      	beq.n	8002498 <HAL_DMAEx_MultiBufferStart_IT+0x948>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a8b      	ldr	r2, [pc, #556]	; (8002654 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d032      	beq.n	8002492 <HAL_DMAEx_MultiBufferStart_IT+0x942>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a89      	ldr	r2, [pc, #548]	; (8002658 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d02a      	beq.n	800248c <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a88      	ldr	r2, [pc, #544]	; (800265c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d022      	beq.n	8002486 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a86      	ldr	r2, [pc, #536]	; (8002660 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d01a      	beq.n	8002480 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a85      	ldr	r2, [pc, #532]	; (8002664 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d012      	beq.n	800247a <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a83      	ldr	r2, [pc, #524]	; (8002668 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00a      	beq.n	8002474 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a82      	ldr	r2, [pc, #520]	; (800266c <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d102      	bne.n	800246e <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 8002468:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800246c:	e01e      	b.n	80024ac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800246e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002472:	e01b      	b.n	80024ac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002474:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002478:	e018      	b.n	80024ac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800247a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800247e:	e015      	b.n	80024ac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002480:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002484:	e012      	b.n	80024ac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800248a:	e00f      	b.n	80024ac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800248c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002490:	e00c      	b.n	80024ac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002496:	e009      	b.n	80024ac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800249c:	e006      	b.n	80024ac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800249e:	2308      	movs	r3, #8
 80024a0:	e004      	b.n	80024ac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80024a2:	2308      	movs	r3, #8
 80024a4:	e002      	b.n	80024ac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80024a6:	2308      	movs	r3, #8
 80024a8:	e000      	b.n	80024ac <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80024aa:	2308      	movs	r3, #8
 80024ac:	4a70      	ldr	r2, [pc, #448]	; (8002670 <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 80024ae:	6093      	str	r3, [r2, #8]
 80024b0:	e0e7      	b.n	8002682 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	4b6e      	ldr	r3, [pc, #440]	; (8002674 <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d960      	bls.n	8002580 <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a5f      	ldr	r2, [pc, #380]	; (8002640 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d057      	beq.n	8002578 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a5d      	ldr	r2, [pc, #372]	; (8002644 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d050      	beq.n	8002574 <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a5c      	ldr	r2, [pc, #368]	; (8002648 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d049      	beq.n	8002570 <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a5a      	ldr	r2, [pc, #360]	; (800264c <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d042      	beq.n	800256c <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a59      	ldr	r2, [pc, #356]	; (8002650 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d03a      	beq.n	8002566 <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a57      	ldr	r2, [pc, #348]	; (8002654 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d032      	beq.n	8002560 <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a56      	ldr	r2, [pc, #344]	; (8002658 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d02a      	beq.n	800255a <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a54      	ldr	r2, [pc, #336]	; (800265c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d022      	beq.n	8002554 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a53      	ldr	r2, [pc, #332]	; (8002660 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d01a      	beq.n	800254e <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a51      	ldr	r2, [pc, #324]	; (8002664 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d012      	beq.n	8002548 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a50      	ldr	r2, [pc, #320]	; (8002668 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d00a      	beq.n	8002542 <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a4e      	ldr	r2, [pc, #312]	; (800266c <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d102      	bne.n	800253c <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 8002536:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800253a:	e01e      	b.n	800257a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800253c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002540:	e01b      	b.n	800257a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002542:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002546:	e018      	b.n	800257a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002548:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800254c:	e015      	b.n	800257a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800254e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002552:	e012      	b.n	800257a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002558:	e00f      	b.n	800257a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800255a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800255e:	e00c      	b.n	800257a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002564:	e009      	b.n	800257a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002566:	f44f 7300 	mov.w	r3, #512	; 0x200
 800256a:	e006      	b.n	800257a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800256c:	2308      	movs	r3, #8
 800256e:	e004      	b.n	800257a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002570:	2308      	movs	r3, #8
 8002572:	e002      	b.n	800257a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002574:	2308      	movs	r3, #8
 8002576:	e000      	b.n	800257a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002578:	2308      	movs	r3, #8
 800257a:	4a3f      	ldr	r2, [pc, #252]	; (8002678 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 800257c:	60d3      	str	r3, [r2, #12]
 800257e:	e080      	b.n	8002682 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a2e      	ldr	r2, [pc, #184]	; (8002640 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d078      	beq.n	800267c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a2d      	ldr	r2, [pc, #180]	; (8002644 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d050      	beq.n	8002636 <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a2b      	ldr	r2, [pc, #172]	; (8002648 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d049      	beq.n	8002632 <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a2a      	ldr	r2, [pc, #168]	; (800264c <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d042      	beq.n	800262e <HAL_DMAEx_MultiBufferStart_IT+0xade>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a28      	ldr	r2, [pc, #160]	; (8002650 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d03a      	beq.n	8002628 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a27      	ldr	r2, [pc, #156]	; (8002654 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d032      	beq.n	8002622 <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a25      	ldr	r2, [pc, #148]	; (8002658 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d02a      	beq.n	800261c <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a24      	ldr	r2, [pc, #144]	; (800265c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d022      	beq.n	8002616 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a22      	ldr	r2, [pc, #136]	; (8002660 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d01a      	beq.n	8002610 <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a21      	ldr	r2, [pc, #132]	; (8002664 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d012      	beq.n	800260a <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a1f      	ldr	r2, [pc, #124]	; (8002668 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00a      	beq.n	8002604 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a1e      	ldr	r2, [pc, #120]	; (800266c <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d102      	bne.n	80025fe <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 80025f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80025fc:	e03f      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80025fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002602:	e03c      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002604:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002608:	e039      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800260a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800260e:	e036      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002610:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002614:	e033      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800261a:	e030      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800261c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002620:	e02d      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002626:	e02a      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800262c:	e027      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800262e:	2308      	movs	r3, #8
 8002630:	e025      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002632:	2308      	movs	r3, #8
 8002634:	e023      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002636:	2308      	movs	r3, #8
 8002638:	e021      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800263a:	bf00      	nop
 800263c:	400260b8 	.word	0x400260b8
 8002640:	40026010 	.word	0x40026010
 8002644:	40026410 	.word	0x40026410
 8002648:	40026070 	.word	0x40026070
 800264c:	40026470 	.word	0x40026470
 8002650:	40026028 	.word	0x40026028
 8002654:	40026428 	.word	0x40026428
 8002658:	40026088 	.word	0x40026088
 800265c:	40026488 	.word	0x40026488
 8002660:	40026040 	.word	0x40026040
 8002664:	40026440 	.word	0x40026440
 8002668:	400260a0 	.word	0x400260a0
 800266c:	400264a0 	.word	0x400264a0
 8002670:	40026400 	.word	0x40026400
 8002674:	40026058 	.word	0x40026058
 8002678:	40026000 	.word	0x40026000
 800267c:	2308      	movs	r3, #8
 800267e:	4a9a      	ldr	r2, [pc, #616]	; (80028e8 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8002680:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	4b98      	ldr	r3, [pc, #608]	; (80028ec <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 800268a:	429a      	cmp	r2, r3
 800268c:	d960      	bls.n	8002750 <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a97      	ldr	r2, [pc, #604]	; (80028f0 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d057      	beq.n	8002748 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a95      	ldr	r2, [pc, #596]	; (80028f4 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d050      	beq.n	8002744 <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a94      	ldr	r2, [pc, #592]	; (80028f8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d049      	beq.n	8002740 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a92      	ldr	r2, [pc, #584]	; (80028fc <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d042      	beq.n	800273c <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a91      	ldr	r2, [pc, #580]	; (8002900 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d03a      	beq.n	8002736 <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a8f      	ldr	r2, [pc, #572]	; (8002904 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d032      	beq.n	8002730 <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a8e      	ldr	r2, [pc, #568]	; (8002908 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d02a      	beq.n	800272a <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a8c      	ldr	r2, [pc, #560]	; (800290c <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d022      	beq.n	8002724 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a8b      	ldr	r2, [pc, #556]	; (8002910 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d01a      	beq.n	800271e <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a89      	ldr	r2, [pc, #548]	; (8002914 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d012      	beq.n	8002718 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a88      	ldr	r2, [pc, #544]	; (8002918 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d00a      	beq.n	8002712 <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a86      	ldr	r2, [pc, #536]	; (800291c <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d102      	bne.n	800270c <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 8002706:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800270a:	e01e      	b.n	800274a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800270c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002710:	e01b      	b.n	800274a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002712:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002716:	e018      	b.n	800274a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002718:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800271c:	e015      	b.n	800274a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800271e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002722:	e012      	b.n	800274a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002724:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002728:	e00f      	b.n	800274a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800272a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800272e:	e00c      	b.n	800274a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002730:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002734:	e009      	b.n	800274a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800273a:	e006      	b.n	800274a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800273c:	2304      	movs	r3, #4
 800273e:	e004      	b.n	800274a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002740:	2304      	movs	r3, #4
 8002742:	e002      	b.n	800274a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002744:	2304      	movs	r3, #4
 8002746:	e000      	b.n	800274a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002748:	2304      	movs	r3, #4
 800274a:	4a75      	ldr	r2, [pc, #468]	; (8002920 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 800274c:	60d3      	str	r3, [r2, #12]
 800274e:	e151      	b.n	80029f4 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	461a      	mov	r2, r3
 8002756:	4b73      	ldr	r3, [pc, #460]	; (8002924 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 8002758:	429a      	cmp	r2, r3
 800275a:	d960      	bls.n	800281e <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a63      	ldr	r2, [pc, #396]	; (80028f0 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d057      	beq.n	8002816 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a62      	ldr	r2, [pc, #392]	; (80028f4 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d050      	beq.n	8002812 <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a60      	ldr	r2, [pc, #384]	; (80028f8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d049      	beq.n	800280e <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a5f      	ldr	r2, [pc, #380]	; (80028fc <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d042      	beq.n	800280a <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a5d      	ldr	r2, [pc, #372]	; (8002900 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d03a      	beq.n	8002804 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a5c      	ldr	r2, [pc, #368]	; (8002904 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d032      	beq.n	80027fe <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a5a      	ldr	r2, [pc, #360]	; (8002908 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d02a      	beq.n	80027f8 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a59      	ldr	r2, [pc, #356]	; (800290c <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d022      	beq.n	80027f2 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a57      	ldr	r2, [pc, #348]	; (8002910 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d01a      	beq.n	80027ec <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a56      	ldr	r2, [pc, #344]	; (8002914 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d012      	beq.n	80027e6 <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a54      	ldr	r2, [pc, #336]	; (8002918 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d00a      	beq.n	80027e0 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a53      	ldr	r2, [pc, #332]	; (800291c <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d102      	bne.n	80027da <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 80027d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027d8:	e01e      	b.n	8002818 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80027da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027de:	e01b      	b.n	8002818 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80027e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027e4:	e018      	b.n	8002818 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80027e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027ea:	e015      	b.n	8002818 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80027ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027f0:	e012      	b.n	8002818 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80027f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027f6:	e00f      	b.n	8002818 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80027f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027fc:	e00c      	b.n	8002818 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80027fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002802:	e009      	b.n	8002818 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002808:	e006      	b.n	8002818 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800280a:	2304      	movs	r3, #4
 800280c:	e004      	b.n	8002818 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800280e:	2304      	movs	r3, #4
 8002810:	e002      	b.n	8002818 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002812:	2304      	movs	r3, #4
 8002814:	e000      	b.n	8002818 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002816:	2304      	movs	r3, #4
 8002818:	4a41      	ldr	r2, [pc, #260]	; (8002920 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 800281a:	6093      	str	r3, [r2, #8]
 800281c:	e0ea      	b.n	80029f4 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	4b40      	ldr	r3, [pc, #256]	; (8002928 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 8002826:	429a      	cmp	r2, r3
 8002828:	f240 8084 	bls.w	8002934 <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a2f      	ldr	r2, [pc, #188]	; (80028f0 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d07a      	beq.n	800292c <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a2e      	ldr	r2, [pc, #184]	; (80028f4 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d050      	beq.n	80028e2 <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a2c      	ldr	r2, [pc, #176]	; (80028f8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d049      	beq.n	80028de <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a2b      	ldr	r2, [pc, #172]	; (80028fc <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d042      	beq.n	80028da <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a29      	ldr	r2, [pc, #164]	; (8002900 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d03a      	beq.n	80028d4 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a28      	ldr	r2, [pc, #160]	; (8002904 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d032      	beq.n	80028ce <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a26      	ldr	r2, [pc, #152]	; (8002908 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d02a      	beq.n	80028c8 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a25      	ldr	r2, [pc, #148]	; (800290c <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d022      	beq.n	80028c2 <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a23      	ldr	r2, [pc, #140]	; (8002910 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d01a      	beq.n	80028bc <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a22      	ldr	r2, [pc, #136]	; (8002914 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d012      	beq.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a20      	ldr	r2, [pc, #128]	; (8002918 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00a      	beq.n	80028b0 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a1f      	ldr	r2, [pc, #124]	; (800291c <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d102      	bne.n	80028aa <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 80028a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028a8:	e041      	b.n	800292e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80028aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028ae:	e03e      	b.n	800292e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80028b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028b4:	e03b      	b.n	800292e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80028b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028ba:	e038      	b.n	800292e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80028bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028c0:	e035      	b.n	800292e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80028c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028c6:	e032      	b.n	800292e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80028c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028cc:	e02f      	b.n	800292e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80028ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028d2:	e02c      	b.n	800292e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80028d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028d8:	e029      	b.n	800292e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80028da:	2304      	movs	r3, #4
 80028dc:	e027      	b.n	800292e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80028de:	2304      	movs	r3, #4
 80028e0:	e025      	b.n	800292e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80028e2:	2304      	movs	r3, #4
 80028e4:	e023      	b.n	800292e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80028e6:	bf00      	nop
 80028e8:	40026000 	.word	0x40026000
 80028ec:	40026458 	.word	0x40026458
 80028f0:	40026010 	.word	0x40026010
 80028f4:	40026410 	.word	0x40026410
 80028f8:	40026070 	.word	0x40026070
 80028fc:	40026470 	.word	0x40026470
 8002900:	40026028 	.word	0x40026028
 8002904:	40026428 	.word	0x40026428
 8002908:	40026088 	.word	0x40026088
 800290c:	40026488 	.word	0x40026488
 8002910:	40026040 	.word	0x40026040
 8002914:	40026440 	.word	0x40026440
 8002918:	400260a0 	.word	0x400260a0
 800291c:	400264a0 	.word	0x400264a0
 8002920:	40026400 	.word	0x40026400
 8002924:	400260b8 	.word	0x400260b8
 8002928:	40026058 	.word	0x40026058
 800292c:	2304      	movs	r3, #4
 800292e:	4a94      	ldr	r2, [pc, #592]	; (8002b80 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002930:	60d3      	str	r3, [r2, #12]
 8002932:	e05f      	b.n	80029f4 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a92      	ldr	r2, [pc, #584]	; (8002b84 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d057      	beq.n	80029ee <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a91      	ldr	r2, [pc, #580]	; (8002b88 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d050      	beq.n	80029ea <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a8f      	ldr	r2, [pc, #572]	; (8002b8c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d049      	beq.n	80029e6 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a8e      	ldr	r2, [pc, #568]	; (8002b90 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d042      	beq.n	80029e2 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a8c      	ldr	r2, [pc, #560]	; (8002b94 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d03a      	beq.n	80029dc <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a8b      	ldr	r2, [pc, #556]	; (8002b98 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d032      	beq.n	80029d6 <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a89      	ldr	r2, [pc, #548]	; (8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d02a      	beq.n	80029d0 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a88      	ldr	r2, [pc, #544]	; (8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d022      	beq.n	80029ca <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a86      	ldr	r2, [pc, #536]	; (8002ba4 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d01a      	beq.n	80029c4 <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a85      	ldr	r2, [pc, #532]	; (8002ba8 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d012      	beq.n	80029be <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a83      	ldr	r2, [pc, #524]	; (8002bac <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00a      	beq.n	80029b8 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a82      	ldr	r2, [pc, #520]	; (8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d102      	bne.n	80029b2 <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 80029ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029b0:	e01e      	b.n	80029f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80029b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029b6:	e01b      	b.n	80029f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80029b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029bc:	e018      	b.n	80029f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80029be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029c2:	e015      	b.n	80029f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80029c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029c8:	e012      	b.n	80029f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80029ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ce:	e00f      	b.n	80029f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80029d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029d4:	e00c      	b.n	80029f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80029d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029da:	e009      	b.n	80029f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80029dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029e0:	e006      	b.n	80029f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80029e2:	2304      	movs	r3, #4
 80029e4:	e004      	b.n	80029f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80029e6:	2304      	movs	r3, #4
 80029e8:	e002      	b.n	80029f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80029ea:	2304      	movs	r3, #4
 80029ec:	e000      	b.n	80029f0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80029ee:	2304      	movs	r3, #4
 80029f0:	4a63      	ldr	r2, [pc, #396]	; (8002b80 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80029f2:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b6e      	ldr	r3, [pc, #440]	; (8002bb4 <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d95c      	bls.n	8002aba <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a5f      	ldr	r2, [pc, #380]	; (8002b84 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d053      	beq.n	8002ab2 <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a5e      	ldr	r2, [pc, #376]	; (8002b88 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d04c      	beq.n	8002aae <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a5c      	ldr	r2, [pc, #368]	; (8002b8c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d045      	beq.n	8002aaa <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a5b      	ldr	r2, [pc, #364]	; (8002b90 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d03e      	beq.n	8002aa6 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a59      	ldr	r2, [pc, #356]	; (8002b94 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d037      	beq.n	8002aa2 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a58      	ldr	r2, [pc, #352]	; (8002b98 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d030      	beq.n	8002a9e <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a56      	ldr	r2, [pc, #344]	; (8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d029      	beq.n	8002a9a <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a55      	ldr	r2, [pc, #340]	; (8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d022      	beq.n	8002a96 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a53      	ldr	r2, [pc, #332]	; (8002ba4 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d01a      	beq.n	8002a90 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a52      	ldr	r2, [pc, #328]	; (8002ba8 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d012      	beq.n	8002a8a <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a50      	ldr	r2, [pc, #320]	; (8002bac <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00a      	beq.n	8002a84 <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a4f      	ldr	r2, [pc, #316]	; (8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d102      	bne.n	8002a7e <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8002a78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a7c:	e01a      	b.n	8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002a7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a82:	e017      	b.n	8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002a84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a88:	e014      	b.n	8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002a8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a8e:	e011      	b.n	8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002a90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a94:	e00e      	b.n	8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002a96:	2340      	movs	r3, #64	; 0x40
 8002a98:	e00c      	b.n	8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002a9a:	2340      	movs	r3, #64	; 0x40
 8002a9c:	e00a      	b.n	8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002a9e:	2340      	movs	r3, #64	; 0x40
 8002aa0:	e008      	b.n	8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002aa2:	2340      	movs	r3, #64	; 0x40
 8002aa4:	e006      	b.n	8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e004      	b.n	8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e002      	b.n	8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	4a40      	ldr	r2, [pc, #256]	; (8002bb8 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8002ab6:	60d3      	str	r3, [r2, #12]
 8002ab8:	e141      	b.n	8002d3e <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	4b3e      	ldr	r3, [pc, #248]	; (8002bbc <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d97c      	bls.n	8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a2e      	ldr	r2, [pc, #184]	; (8002b84 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d053      	beq.n	8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a2c      	ldr	r2, [pc, #176]	; (8002b88 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d04c      	beq.n	8002b74 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a2b      	ldr	r2, [pc, #172]	; (8002b8c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d045      	beq.n	8002b70 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a29      	ldr	r2, [pc, #164]	; (8002b90 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d03e      	beq.n	8002b6c <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a28      	ldr	r2, [pc, #160]	; (8002b94 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d037      	beq.n	8002b68 <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a26      	ldr	r2, [pc, #152]	; (8002b98 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d030      	beq.n	8002b64 <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a25      	ldr	r2, [pc, #148]	; (8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d029      	beq.n	8002b60 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a23      	ldr	r2, [pc, #140]	; (8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d022      	beq.n	8002b5c <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a22      	ldr	r2, [pc, #136]	; (8002ba4 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d01a      	beq.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a20      	ldr	r2, [pc, #128]	; (8002ba8 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d012      	beq.n	8002b50 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a1f      	ldr	r2, [pc, #124]	; (8002bac <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d00a      	beq.n	8002b4a <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a1d      	ldr	r2, [pc, #116]	; (8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d102      	bne.n	8002b44 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8002b3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b42:	e01a      	b.n	8002b7a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002b44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b48:	e017      	b.n	8002b7a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002b4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b4e:	e014      	b.n	8002b7a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002b50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b54:	e011      	b.n	8002b7a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002b56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b5a:	e00e      	b.n	8002b7a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002b5c:	2340      	movs	r3, #64	; 0x40
 8002b5e:	e00c      	b.n	8002b7a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002b60:	2340      	movs	r3, #64	; 0x40
 8002b62:	e00a      	b.n	8002b7a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002b64:	2340      	movs	r3, #64	; 0x40
 8002b66:	e008      	b.n	8002b7a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002b68:	2340      	movs	r3, #64	; 0x40
 8002b6a:	e006      	b.n	8002b7a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e004      	b.n	8002b7a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e002      	b.n	8002b7a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	4a0f      	ldr	r2, [pc, #60]	; (8002bb8 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8002b7c:	6093      	str	r3, [r2, #8]
 8002b7e:	e0de      	b.n	8002d3e <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8002b80:	40026000 	.word	0x40026000
 8002b84:	40026010 	.word	0x40026010
 8002b88:	40026410 	.word	0x40026410
 8002b8c:	40026070 	.word	0x40026070
 8002b90:	40026470 	.word	0x40026470
 8002b94:	40026028 	.word	0x40026028
 8002b98:	40026428 	.word	0x40026428
 8002b9c:	40026088 	.word	0x40026088
 8002ba0:	40026488 	.word	0x40026488
 8002ba4:	40026040 	.word	0x40026040
 8002ba8:	40026440 	.word	0x40026440
 8002bac:	400260a0 	.word	0x400260a0
 8002bb0:	400264a0 	.word	0x400264a0
 8002bb4:	40026458 	.word	0x40026458
 8002bb8:	40026400 	.word	0x40026400
 8002bbc:	400260b8 	.word	0x400260b8
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b78      	ldr	r3, [pc, #480]	; (8002da8 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d95c      	bls.n	8002c86 <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a76      	ldr	r2, [pc, #472]	; (8002dac <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d053      	beq.n	8002c7e <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a75      	ldr	r2, [pc, #468]	; (8002db0 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d04c      	beq.n	8002c7a <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a73      	ldr	r2, [pc, #460]	; (8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d045      	beq.n	8002c76 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a72      	ldr	r2, [pc, #456]	; (8002db8 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d03e      	beq.n	8002c72 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a70      	ldr	r2, [pc, #448]	; (8002dbc <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d037      	beq.n	8002c6e <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a6f      	ldr	r2, [pc, #444]	; (8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d030      	beq.n	8002c6a <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a6d      	ldr	r2, [pc, #436]	; (8002dc4 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d029      	beq.n	8002c66 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a6c      	ldr	r2, [pc, #432]	; (8002dc8 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d022      	beq.n	8002c62 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a6a      	ldr	r2, [pc, #424]	; (8002dcc <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d01a      	beq.n	8002c5c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a69      	ldr	r2, [pc, #420]	; (8002dd0 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d012      	beq.n	8002c56 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a67      	ldr	r2, [pc, #412]	; (8002dd4 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00a      	beq.n	8002c50 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a66      	ldr	r2, [pc, #408]	; (8002dd8 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d102      	bne.n	8002c4a <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8002c44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c48:	e01a      	b.n	8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8002c4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c4e:	e017      	b.n	8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8002c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c54:	e014      	b.n	8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8002c56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c5a:	e011      	b.n	8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8002c5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c60:	e00e      	b.n	8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8002c62:	2340      	movs	r3, #64	; 0x40
 8002c64:	e00c      	b.n	8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8002c66:	2340      	movs	r3, #64	; 0x40
 8002c68:	e00a      	b.n	8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8002c6a:	2340      	movs	r3, #64	; 0x40
 8002c6c:	e008      	b.n	8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8002c6e:	2340      	movs	r3, #64	; 0x40
 8002c70:	e006      	b.n	8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e004      	b.n	8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e002      	b.n	8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	4a56      	ldr	r2, [pc, #344]	; (8002ddc <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8002c82:	60d3      	str	r3, [r2, #12]
 8002c84:	e05b      	b.n	8002d3e <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a48      	ldr	r2, [pc, #288]	; (8002dac <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d053      	beq.n	8002d38 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a46      	ldr	r2, [pc, #280]	; (8002db0 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d04c      	beq.n	8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a45      	ldr	r2, [pc, #276]	; (8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d045      	beq.n	8002d30 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a43      	ldr	r2, [pc, #268]	; (8002db8 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d03e      	beq.n	8002d2c <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a42      	ldr	r2, [pc, #264]	; (8002dbc <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d037      	beq.n	8002d28 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a40      	ldr	r2, [pc, #256]	; (8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d030      	beq.n	8002d24 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a3f      	ldr	r2, [pc, #252]	; (8002dc4 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d029      	beq.n	8002d20 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a3d      	ldr	r2, [pc, #244]	; (8002dc8 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d022      	beq.n	8002d1c <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a3c      	ldr	r2, [pc, #240]	; (8002dcc <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d01a      	beq.n	8002d16 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a3a      	ldr	r2, [pc, #232]	; (8002dd0 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d012      	beq.n	8002d10 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a39      	ldr	r2, [pc, #228]	; (8002dd4 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00a      	beq.n	8002d0a <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a37      	ldr	r2, [pc, #220]	; (8002dd8 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d102      	bne.n	8002d04 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8002cfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d02:	e01a      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8002d04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d08:	e017      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8002d0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d0e:	e014      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8002d10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d14:	e011      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8002d16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d1a:	e00e      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8002d1c:	2340      	movs	r3, #64	; 0x40
 8002d1e:	e00c      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8002d20:	2340      	movs	r3, #64	; 0x40
 8002d22:	e00a      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8002d24:	2340      	movs	r3, #64	; 0x40
 8002d26:	e008      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8002d28:	2340      	movs	r3, #64	; 0x40
 8002d2a:	e006      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e004      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8002d30:	2301      	movs	r3, #1
 8002d32:	e002      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	4a28      	ldr	r2, [pc, #160]	; (8002ddc <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8002d3c:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f042 0216 	orr.w	r2, r2, #22
 8002d4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695a      	ldr	r2, [r3, #20]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d103      	bne.n	8002d6e <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d007      	beq.n	8002d7e <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f042 0208 	orr.w	r2, r2, #8
 8002d7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0201 	orr.w	r2, r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	e005      	b.n	8002d9c <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8002d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40026058 	.word	0x40026058
 8002dac:	40026010 	.word	0x40026010
 8002db0:	40026410 	.word	0x40026410
 8002db4:	40026070 	.word	0x40026070
 8002db8:	40026470 	.word	0x40026470
 8002dbc:	40026028 	.word	0x40026028
 8002dc0:	40026428 	.word	0x40026428
 8002dc4:	40026088 	.word	0x40026088
 8002dc8:	40026488 	.word	0x40026488
 8002dcc:	40026040 	.word	0x40026040
 8002dd0:	40026440 	.word	0x40026440
 8002dd4:	400260a0 	.word	0x400260a0
 8002dd8:	400264a0 	.word	0x400264a0
 8002ddc:	40026000 	.word	0x40026000

08002de0 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
 8002dec:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b40      	cmp	r3, #64	; 0x40
 8002dfc:	d108      	bne.n	8002e10 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e0e:	e007      	b.n	8002e20 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	60da      	str	r2, [r3, #12]
}
 8002e20:	bf00      	nop
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	; 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
 8002e46:	e16b      	b.n	8003120 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e48:	2201      	movs	r2, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	f040 815a 	bne.w	800311a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d005      	beq.n	8002e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d130      	bne.n	8002ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	2203      	movs	r2, #3
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 0201 	and.w	r2, r3, #1
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d017      	beq.n	8002f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d123      	bne.n	8002f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	08da      	lsrs	r2, r3, #3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3208      	adds	r2, #8
 8002f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	220f      	movs	r2, #15
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	08da      	lsrs	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3208      	adds	r2, #8
 8002f6a:	69b9      	ldr	r1, [r7, #24]
 8002f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 0203 	and.w	r2, r3, #3
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80b4 	beq.w	800311a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	4b60      	ldr	r3, [pc, #384]	; (8003138 <HAL_GPIO_Init+0x30c>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	4a5f      	ldr	r2, [pc, #380]	; (8003138 <HAL_GPIO_Init+0x30c>)
 8002fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fc2:	4b5d      	ldr	r3, [pc, #372]	; (8003138 <HAL_GPIO_Init+0x30c>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fce:	4a5b      	ldr	r2, [pc, #364]	; (800313c <HAL_GPIO_Init+0x310>)
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	220f      	movs	r2, #15
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a52      	ldr	r2, [pc, #328]	; (8003140 <HAL_GPIO_Init+0x314>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d02b      	beq.n	8003052 <HAL_GPIO_Init+0x226>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a51      	ldr	r2, [pc, #324]	; (8003144 <HAL_GPIO_Init+0x318>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d025      	beq.n	800304e <HAL_GPIO_Init+0x222>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a50      	ldr	r2, [pc, #320]	; (8003148 <HAL_GPIO_Init+0x31c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d01f      	beq.n	800304a <HAL_GPIO_Init+0x21e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a4f      	ldr	r2, [pc, #316]	; (800314c <HAL_GPIO_Init+0x320>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d019      	beq.n	8003046 <HAL_GPIO_Init+0x21a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a4e      	ldr	r2, [pc, #312]	; (8003150 <HAL_GPIO_Init+0x324>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d013      	beq.n	8003042 <HAL_GPIO_Init+0x216>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a4d      	ldr	r2, [pc, #308]	; (8003154 <HAL_GPIO_Init+0x328>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00d      	beq.n	800303e <HAL_GPIO_Init+0x212>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a4c      	ldr	r2, [pc, #304]	; (8003158 <HAL_GPIO_Init+0x32c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d007      	beq.n	800303a <HAL_GPIO_Init+0x20e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a4b      	ldr	r2, [pc, #300]	; (800315c <HAL_GPIO_Init+0x330>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d101      	bne.n	8003036 <HAL_GPIO_Init+0x20a>
 8003032:	2307      	movs	r3, #7
 8003034:	e00e      	b.n	8003054 <HAL_GPIO_Init+0x228>
 8003036:	2308      	movs	r3, #8
 8003038:	e00c      	b.n	8003054 <HAL_GPIO_Init+0x228>
 800303a:	2306      	movs	r3, #6
 800303c:	e00a      	b.n	8003054 <HAL_GPIO_Init+0x228>
 800303e:	2305      	movs	r3, #5
 8003040:	e008      	b.n	8003054 <HAL_GPIO_Init+0x228>
 8003042:	2304      	movs	r3, #4
 8003044:	e006      	b.n	8003054 <HAL_GPIO_Init+0x228>
 8003046:	2303      	movs	r3, #3
 8003048:	e004      	b.n	8003054 <HAL_GPIO_Init+0x228>
 800304a:	2302      	movs	r3, #2
 800304c:	e002      	b.n	8003054 <HAL_GPIO_Init+0x228>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_GPIO_Init+0x228>
 8003052:	2300      	movs	r3, #0
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	f002 0203 	and.w	r2, r2, #3
 800305a:	0092      	lsls	r2, r2, #2
 800305c:	4093      	lsls	r3, r2
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003064:	4935      	ldr	r1, [pc, #212]	; (800313c <HAL_GPIO_Init+0x310>)
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	089b      	lsrs	r3, r3, #2
 800306a:	3302      	adds	r3, #2
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003072:	4b3b      	ldr	r3, [pc, #236]	; (8003160 <HAL_GPIO_Init+0x334>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	43db      	mvns	r3, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4013      	ands	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003096:	4a32      	ldr	r2, [pc, #200]	; (8003160 <HAL_GPIO_Init+0x334>)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800309c:	4b30      	ldr	r3, [pc, #192]	; (8003160 <HAL_GPIO_Init+0x334>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030c0:	4a27      	ldr	r2, [pc, #156]	; (8003160 <HAL_GPIO_Init+0x334>)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030c6:	4b26      	ldr	r3, [pc, #152]	; (8003160 <HAL_GPIO_Init+0x334>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ea:	4a1d      	ldr	r2, [pc, #116]	; (8003160 <HAL_GPIO_Init+0x334>)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030f0:	4b1b      	ldr	r3, [pc, #108]	; (8003160 <HAL_GPIO_Init+0x334>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003114:	4a12      	ldr	r2, [pc, #72]	; (8003160 <HAL_GPIO_Init+0x334>)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3301      	adds	r3, #1
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b0f      	cmp	r3, #15
 8003124:	f67f ae90 	bls.w	8002e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	3724      	adds	r7, #36	; 0x24
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	40013800 	.word	0x40013800
 8003140:	40020000 	.word	0x40020000
 8003144:	40020400 	.word	0x40020400
 8003148:	40020800 	.word	0x40020800
 800314c:	40020c00 	.word	0x40020c00
 8003150:	40021000 	.word	0x40021000
 8003154:	40021400 	.word	0x40021400
 8003158:	40021800 	.word	0x40021800
 800315c:	40021c00 	.word	0x40021c00
 8003160:	40013c00 	.word	0x40013c00

08003164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e12b      	b.n	80033ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fd fd58 	bl	8000c40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2224      	movs	r2, #36	; 0x24
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0201 	bic.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031c8:	f001 ff22 	bl	8005010 <HAL_RCC_GetPCLK1Freq>
 80031cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4a81      	ldr	r2, [pc, #516]	; (80033d8 <HAL_I2C_Init+0x274>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d807      	bhi.n	80031e8 <HAL_I2C_Init+0x84>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4a80      	ldr	r2, [pc, #512]	; (80033dc <HAL_I2C_Init+0x278>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	bf94      	ite	ls
 80031e0:	2301      	movls	r3, #1
 80031e2:	2300      	movhi	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	e006      	b.n	80031f6 <HAL_I2C_Init+0x92>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4a7d      	ldr	r2, [pc, #500]	; (80033e0 <HAL_I2C_Init+0x27c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	bf94      	ite	ls
 80031f0:	2301      	movls	r3, #1
 80031f2:	2300      	movhi	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e0e7      	b.n	80033ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4a78      	ldr	r2, [pc, #480]	; (80033e4 <HAL_I2C_Init+0x280>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	0c9b      	lsrs	r3, r3, #18
 8003208:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	4a6a      	ldr	r2, [pc, #424]	; (80033d8 <HAL_I2C_Init+0x274>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d802      	bhi.n	8003238 <HAL_I2C_Init+0xd4>
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	3301      	adds	r3, #1
 8003236:	e009      	b.n	800324c <HAL_I2C_Init+0xe8>
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800323e:	fb02 f303 	mul.w	r3, r2, r3
 8003242:	4a69      	ldr	r2, [pc, #420]	; (80033e8 <HAL_I2C_Init+0x284>)
 8003244:	fba2 2303 	umull	r2, r3, r2, r3
 8003248:	099b      	lsrs	r3, r3, #6
 800324a:	3301      	adds	r3, #1
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6812      	ldr	r2, [r2, #0]
 8003250:	430b      	orrs	r3, r1
 8003252:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800325e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	495c      	ldr	r1, [pc, #368]	; (80033d8 <HAL_I2C_Init+0x274>)
 8003268:	428b      	cmp	r3, r1
 800326a:	d819      	bhi.n	80032a0 <HAL_I2C_Init+0x13c>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	1e59      	subs	r1, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	fbb1 f3f3 	udiv	r3, r1, r3
 800327a:	1c59      	adds	r1, r3, #1
 800327c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003280:	400b      	ands	r3, r1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HAL_I2C_Init+0x138>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1e59      	subs	r1, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	fbb1 f3f3 	udiv	r3, r1, r3
 8003294:	3301      	adds	r3, #1
 8003296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800329a:	e051      	b.n	8003340 <HAL_I2C_Init+0x1dc>
 800329c:	2304      	movs	r3, #4
 800329e:	e04f      	b.n	8003340 <HAL_I2C_Init+0x1dc>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d111      	bne.n	80032cc <HAL_I2C_Init+0x168>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	1e58      	subs	r0, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6859      	ldr	r1, [r3, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	440b      	add	r3, r1
 80032b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ba:	3301      	adds	r3, #1
 80032bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	bf0c      	ite	eq
 80032c4:	2301      	moveq	r3, #1
 80032c6:	2300      	movne	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	e012      	b.n	80032f2 <HAL_I2C_Init+0x18e>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	1e58      	subs	r0, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	0099      	lsls	r1, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	fbb0 f3f3 	udiv	r3, r0, r3
 80032e2:	3301      	adds	r3, #1
 80032e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	bf0c      	ite	eq
 80032ec:	2301      	moveq	r3, #1
 80032ee:	2300      	movne	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_I2C_Init+0x196>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e022      	b.n	8003340 <HAL_I2C_Init+0x1dc>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10e      	bne.n	8003320 <HAL_I2C_Init+0x1bc>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	1e58      	subs	r0, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6859      	ldr	r1, [r3, #4]
 800330a:	460b      	mov	r3, r1
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	440b      	add	r3, r1
 8003310:	fbb0 f3f3 	udiv	r3, r0, r3
 8003314:	3301      	adds	r3, #1
 8003316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800331a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800331e:	e00f      	b.n	8003340 <HAL_I2C_Init+0x1dc>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1e58      	subs	r0, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6859      	ldr	r1, [r3, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	0099      	lsls	r1, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	fbb0 f3f3 	udiv	r3, r0, r3
 8003336:	3301      	adds	r3, #1
 8003338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800333c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	6809      	ldr	r1, [r1, #0]
 8003344:	4313      	orrs	r3, r2
 8003346:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69da      	ldr	r2, [r3, #28]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800336e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6911      	ldr	r1, [r2, #16]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	68d2      	ldr	r2, [r2, #12]
 800337a:	4311      	orrs	r1, r2
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	430b      	orrs	r3, r1
 8003382:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	000186a0 	.word	0x000186a0
 80033dc:	001e847f 	.word	0x001e847f
 80033e0:	003d08ff 	.word	0x003d08ff
 80033e4:	431bde83 	.word	0x431bde83
 80033e8:	10624dd3 	.word	0x10624dd3

080033ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	461a      	mov	r2, r3
 80033f8:	460b      	mov	r3, r1
 80033fa:	817b      	strh	r3, [r7, #10]
 80033fc:	4613      	mov	r3, r2
 80033fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003400:	f7fd ff0a 	bl	8001218 <HAL_GetTick>
 8003404:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b20      	cmp	r3, #32
 8003410:	f040 80e0 	bne.w	80035d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	2319      	movs	r3, #25
 800341a:	2201      	movs	r2, #1
 800341c:	4970      	ldr	r1, [pc, #448]	; (80035e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f964 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800342a:	2302      	movs	r3, #2
 800342c:	e0d3      	b.n	80035d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <HAL_I2C_Master_Transmit+0x50>
 8003438:	2302      	movs	r3, #2
 800343a:	e0cc      	b.n	80035d6 <HAL_I2C_Master_Transmit+0x1ea>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b01      	cmp	r3, #1
 8003450:	d007      	beq.n	8003462 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 0201 	orr.w	r2, r2, #1
 8003460:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003470:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2221      	movs	r2, #33	; 0x21
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2210      	movs	r2, #16
 800347e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	893a      	ldrh	r2, [r7, #8]
 8003492:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	4a50      	ldr	r2, [pc, #320]	; (80035e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80034a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034a4:	8979      	ldrh	r1, [r7, #10]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	6a3a      	ldr	r2, [r7, #32]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 f89c 	bl	80035e8 <I2C_MasterRequestWrite>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e08d      	b.n	80035d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ba:	2300      	movs	r3, #0
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80034d0:	e066      	b.n	80035a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	6a39      	ldr	r1, [r7, #32]
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 f9de 	bl	8003898 <I2C_WaitOnTXEFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00d      	beq.n	80034fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d107      	bne.n	80034fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e06b      	b.n	80035d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	781a      	ldrb	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003518:	b29b      	uxth	r3, r3
 800351a:	3b01      	subs	r3, #1
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b04      	cmp	r3, #4
 800353a:	d11b      	bne.n	8003574 <HAL_I2C_Master_Transmit+0x188>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003540:	2b00      	cmp	r3, #0
 8003542:	d017      	beq.n	8003574 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	781a      	ldrb	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	6a39      	ldr	r1, [r7, #32]
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 f9ce 	bl	800391a <I2C_WaitOnBTFFlagUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00d      	beq.n	80035a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	2b04      	cmp	r3, #4
 800358a:	d107      	bne.n	800359c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800359a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e01a      	b.n	80035d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d194      	bne.n	80034d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	e000      	b.n	80035d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80035d4:	2302      	movs	r3, #2
  }
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	00100002 	.word	0x00100002
 80035e4:	ffff0000 	.word	0xffff0000

080035e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	460b      	mov	r3, r1
 80035f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b08      	cmp	r3, #8
 8003602:	d006      	beq.n	8003612 <I2C_MasterRequestWrite+0x2a>
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d003      	beq.n	8003612 <I2C_MasterRequestWrite+0x2a>
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003610:	d108      	bne.n	8003624 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	e00b      	b.n	800363c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	2b12      	cmp	r3, #18
 800362a:	d107      	bne.n	800363c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800363a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 f84f 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00d      	beq.n	8003670 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003662:	d103      	bne.n	800366c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800366a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e035      	b.n	80036dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003678:	d108      	bne.n	800368c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800367a:	897b      	ldrh	r3, [r7, #10]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	461a      	mov	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003688:	611a      	str	r2, [r3, #16]
 800368a:	e01b      	b.n	80036c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800368c:	897b      	ldrh	r3, [r7, #10]
 800368e:	11db      	asrs	r3, r3, #7
 8003690:	b2db      	uxtb	r3, r3
 8003692:	f003 0306 	and.w	r3, r3, #6
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f063 030f 	orn	r3, r3, #15
 800369c:	b2da      	uxtb	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	490e      	ldr	r1, [pc, #56]	; (80036e4 <I2C_MasterRequestWrite+0xfc>)
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f875 	bl	800379a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e010      	b.n	80036dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036ba:	897b      	ldrh	r3, [r7, #10]
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	4907      	ldr	r1, [pc, #28]	; (80036e8 <I2C_MasterRequestWrite+0x100>)
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f865 	bl	800379a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	00010008 	.word	0x00010008
 80036e8:	00010002 	.word	0x00010002

080036ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036fc:	e025      	b.n	800374a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003704:	d021      	beq.n	800374a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003706:	f7fd fd87 	bl	8001218 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d302      	bcc.n	800371c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d116      	bne.n	800374a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	f043 0220 	orr.w	r2, r3, #32
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e023      	b.n	8003792 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	0c1b      	lsrs	r3, r3, #16
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b01      	cmp	r3, #1
 8003752:	d10d      	bne.n	8003770 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	43da      	mvns	r2, r3
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	4013      	ands	r3, r2
 8003760:	b29b      	uxth	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	bf0c      	ite	eq
 8003766:	2301      	moveq	r3, #1
 8003768:	2300      	movne	r3, #0
 800376a:	b2db      	uxtb	r3, r3
 800376c:	461a      	mov	r2, r3
 800376e:	e00c      	b.n	800378a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	43da      	mvns	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4013      	ands	r3, r2
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	bf0c      	ite	eq
 8003782:	2301      	moveq	r3, #1
 8003784:	2300      	movne	r3, #0
 8003786:	b2db      	uxtb	r3, r3
 8003788:	461a      	mov	r2, r3
 800378a:	79fb      	ldrb	r3, [r7, #7]
 800378c:	429a      	cmp	r2, r3
 800378e:	d0b6      	beq.n	80036fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b084      	sub	sp, #16
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	607a      	str	r2, [r7, #4]
 80037a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037a8:	e051      	b.n	800384e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b8:	d123      	bne.n	8003802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f043 0204 	orr.w	r2, r3, #4
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e046      	b.n	8003890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003808:	d021      	beq.n	800384e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380a:	f7fd fd05 	bl	8001218 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	429a      	cmp	r2, r3
 8003818:	d302      	bcc.n	8003820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d116      	bne.n	800384e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	f043 0220 	orr.w	r2, r3, #32
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e020      	b.n	8003890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	0c1b      	lsrs	r3, r3, #16
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b01      	cmp	r3, #1
 8003856:	d10c      	bne.n	8003872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	43da      	mvns	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4013      	ands	r3, r2
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	bf14      	ite	ne
 800386a:	2301      	movne	r3, #1
 800386c:	2300      	moveq	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	e00b      	b.n	800388a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	43da      	mvns	r2, r3
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	4013      	ands	r3, r2
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	bf14      	ite	ne
 8003884:	2301      	movne	r3, #1
 8003886:	2300      	moveq	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d18d      	bne.n	80037aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038a4:	e02d      	b.n	8003902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f878 	bl	800399c <I2C_IsAcknowledgeFailed>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e02d      	b.n	8003912 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038bc:	d021      	beq.n	8003902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038be:	f7fd fcab 	bl	8001218 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d302      	bcc.n	80038d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d116      	bne.n	8003902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	f043 0220 	orr.w	r2, r3, #32
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e007      	b.n	8003912 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390c:	2b80      	cmp	r3, #128	; 0x80
 800390e:	d1ca      	bne.n	80038a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003926:	e02d      	b.n	8003984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f837 	bl	800399c <I2C_IsAcknowledgeFailed>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e02d      	b.n	8003994 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393e:	d021      	beq.n	8003984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003940:	f7fd fc6a 	bl	8001218 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	429a      	cmp	r2, r3
 800394e:	d302      	bcc.n	8003956 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d116      	bne.n	8003984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	f043 0220 	orr.w	r2, r3, #32
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e007      	b.n	8003994 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b04      	cmp	r3, #4
 8003990:	d1ca      	bne.n	8003928 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b2:	d11b      	bne.n	80039ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	f043 0204 	orr.w	r2, r3, #4
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
	...

080039fc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e128      	b.n	8003c60 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a90      	ldr	r2, [pc, #576]	; (8003c68 <HAL_I2S_Init+0x26c>)
 8003a26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7fd f987 	bl	8000d3c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2202      	movs	r2, #2
 8003a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a44:	f023 030f 	bic.w	r3, r3, #15
 8003a48:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d060      	beq.n	8003b1c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d102      	bne.n	8003a68 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a62:	2310      	movs	r3, #16
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	e001      	b.n	8003a6c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a68:	2320      	movs	r3, #32
 8003a6a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d802      	bhi.n	8003a7a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	f001 fbbe 	bl	80051fc <HAL_RCCEx_GetPeriphCLKFreq>
 8003a80:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a8a:	d125      	bne.n	8003ad8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d010      	beq.n	8003ab6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	3305      	adds	r3, #5
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	e01f      	b.n	8003af6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	461a      	mov	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad2:	3305      	adds	r3, #5
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	e00e      	b.n	8003af6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	461a      	mov	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af2:	3305      	adds	r3, #5
 8003af4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4a5c      	ldr	r2, [pc, #368]	; (8003c6c <HAL_I2S_Init+0x270>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	08db      	lsrs	r3, r3, #3
 8003b00:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	085b      	lsrs	r3, r3, #1
 8003b12:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	61bb      	str	r3, [r7, #24]
 8003b1a:	e003      	b.n	8003b24 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d902      	bls.n	8003b30 <HAL_I2S_Init+0x134>
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	2bff      	cmp	r3, #255	; 0xff
 8003b2e:	d907      	bls.n	8003b40 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b34:	f043 0210 	orr.w	r2, r3, #16
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e08f      	b.n	8003c60 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	ea42 0103 	orr.w	r1, r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69fa      	ldr	r2, [r7, #28]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b5e:	f023 030f 	bic.w	r3, r3, #15
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6851      	ldr	r1, [r2, #4]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6892      	ldr	r2, [r2, #8]
 8003b6a:	4311      	orrs	r1, r2
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	68d2      	ldr	r2, [r2, #12]
 8003b70:	4311      	orrs	r1, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6992      	ldr	r2, [r2, #24]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b82:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d161      	bne.n	8003c50 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a38      	ldr	r2, [pc, #224]	; (8003c70 <HAL_I2S_Init+0x274>)
 8003b90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a37      	ldr	r2, [pc, #220]	; (8003c74 <HAL_I2S_Init+0x278>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d101      	bne.n	8003ba0 <HAL_I2S_Init+0x1a4>
 8003b9c:	4b36      	ldr	r3, [pc, #216]	; (8003c78 <HAL_I2S_Init+0x27c>)
 8003b9e:	e001      	b.n	8003ba4 <HAL_I2S_Init+0x1a8>
 8003ba0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6812      	ldr	r2, [r2, #0]
 8003baa:	4932      	ldr	r1, [pc, #200]	; (8003c74 <HAL_I2S_Init+0x278>)
 8003bac:	428a      	cmp	r2, r1
 8003bae:	d101      	bne.n	8003bb4 <HAL_I2S_Init+0x1b8>
 8003bb0:	4a31      	ldr	r2, [pc, #196]	; (8003c78 <HAL_I2S_Init+0x27c>)
 8003bb2:	e001      	b.n	8003bb8 <HAL_I2S_Init+0x1bc>
 8003bb4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003bb8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003bbc:	f023 030f 	bic.w	r3, r3, #15
 8003bc0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2b      	ldr	r2, [pc, #172]	; (8003c74 <HAL_I2S_Init+0x278>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d101      	bne.n	8003bd0 <HAL_I2S_Init+0x1d4>
 8003bcc:	4b2a      	ldr	r3, [pc, #168]	; (8003c78 <HAL_I2S_Init+0x27c>)
 8003bce:	e001      	b.n	8003bd4 <HAL_I2S_Init+0x1d8>
 8003bd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a25      	ldr	r2, [pc, #148]	; (8003c74 <HAL_I2S_Init+0x278>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d101      	bne.n	8003be6 <HAL_I2S_Init+0x1ea>
 8003be2:	4b25      	ldr	r3, [pc, #148]	; (8003c78 <HAL_I2S_Init+0x27c>)
 8003be4:	e001      	b.n	8003bea <HAL_I2S_Init+0x1ee>
 8003be6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf6:	d003      	beq.n	8003c00 <HAL_I2S_Init+0x204>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d103      	bne.n	8003c08 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	e001      	b.n	8003c0c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c16:	4313      	orrs	r3, r2
 8003c18:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c20:	4313      	orrs	r3, r2
 8003c22:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	897b      	ldrh	r3, [r7, #10]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c38:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a0d      	ldr	r2, [pc, #52]	; (8003c74 <HAL_I2S_Init+0x278>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d101      	bne.n	8003c48 <HAL_I2S_Init+0x24c>
 8003c44:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <HAL_I2S_Init+0x27c>)
 8003c46:	e001      	b.n	8003c4c <HAL_I2S_Init+0x250>
 8003c48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c4c:	897a      	ldrh	r2, [r7, #10]
 8003c4e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3720      	adds	r7, #32
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	0800413f 	.word	0x0800413f
 8003c6c:	cccccccd 	.word	0xcccccccd
 8003c70:	080042c5 	.word	0x080042c5
 8003c74:	40003800 	.word	0x40003800
 8003c78:	40003400 	.word	0x40003400

08003c7c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c90:	d004      	beq.n	8003c9c <HAL_I2S_DMAStop+0x20>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f040 80d1 	bne.w	8003e3e <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00f      	beq.n	8003cc4 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fd fca5 	bl	80015f8 <HAL_DMA_Abort>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d007      	beq.n	8003cc4 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb8:	f043 0208 	orr.w	r2, r3, #8
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003cc4:	2364      	movs	r3, #100	; 0x64
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	2102      	movs	r1, #2
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fac1 	bl	8004252 <I2S_WaitFlagStateUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00b      	beq.n	8003cee <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	f043 0201 	orr.w	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003cee:	2364      	movs	r3, #100	; 0x64
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2180      	movs	r1, #128	; 0x80
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 faac 	bl	8004252 <I2S_WaitFlagStateUntilTimeout>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00b      	beq.n	8003d18 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d04:	f043 0201 	orr.w	r2, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	69da      	ldr	r2, [r3, #28]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d26:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0202 	bic.w	r2, r2, #2
 8003d44:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b05      	cmp	r3, #5
 8003d50:	f040 8165 	bne.w	800401e <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00f      	beq.n	8003d7c <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fd fc49 	bl	80015f8 <HAL_DMA_Abort>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d007      	beq.n	8003d7c <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d70:	f043 0208 	orr.w	r2, r3, #8
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a8a      	ldr	r2, [pc, #552]	; (8003fac <HAL_I2S_DMAStop+0x330>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d101      	bne.n	8003d8a <HAL_I2S_DMAStop+0x10e>
 8003d86:	4b8a      	ldr	r3, [pc, #552]	; (8003fb0 <HAL_I2S_DMAStop+0x334>)
 8003d88:	e001      	b.n	8003d8e <HAL_I2S_DMAStop+0x112>
 8003d8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d8e:	69da      	ldr	r2, [r3, #28]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4985      	ldr	r1, [pc, #532]	; (8003fac <HAL_I2S_DMAStop+0x330>)
 8003d96:	428b      	cmp	r3, r1
 8003d98:	d101      	bne.n	8003d9e <HAL_I2S_DMAStop+0x122>
 8003d9a:	4b85      	ldr	r3, [pc, #532]	; (8003fb0 <HAL_I2S_DMAStop+0x334>)
 8003d9c:	e001      	b.n	8003da2 <HAL_I2S_DMAStop+0x126>
 8003d9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da6:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8003da8:	2300      	movs	r3, #0
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a7e      	ldr	r2, [pc, #504]	; (8003fac <HAL_I2S_DMAStop+0x330>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d101      	bne.n	8003dba <HAL_I2S_DMAStop+0x13e>
 8003db6:	4b7e      	ldr	r3, [pc, #504]	; (8003fb0 <HAL_I2S_DMAStop+0x334>)
 8003db8:	e001      	b.n	8003dbe <HAL_I2S_DMAStop+0x142>
 8003dba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a79      	ldr	r2, [pc, #484]	; (8003fac <HAL_I2S_DMAStop+0x330>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d101      	bne.n	8003dd0 <HAL_I2S_DMAStop+0x154>
 8003dcc:	4b78      	ldr	r3, [pc, #480]	; (8003fb0 <HAL_I2S_DMAStop+0x334>)
 8003dce:	e001      	b.n	8003dd4 <HAL_I2S_DMAStop+0x158>
 8003dd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a73      	ldr	r2, [pc, #460]	; (8003fac <HAL_I2S_DMAStop+0x330>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d101      	bne.n	8003de8 <HAL_I2S_DMAStop+0x16c>
 8003de4:	4b72      	ldr	r3, [pc, #456]	; (8003fb0 <HAL_I2S_DMAStop+0x334>)
 8003de6:	e001      	b.n	8003dec <HAL_I2S_DMAStop+0x170>
 8003de8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	496e      	ldr	r1, [pc, #440]	; (8003fac <HAL_I2S_DMAStop+0x330>)
 8003df4:	428b      	cmp	r3, r1
 8003df6:	d101      	bne.n	8003dfc <HAL_I2S_DMAStop+0x180>
 8003df8:	4b6d      	ldr	r3, [pc, #436]	; (8003fb0 <HAL_I2S_DMAStop+0x334>)
 8003dfa:	e001      	b.n	8003e00 <HAL_I2S_DMAStop+0x184>
 8003dfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e00:	f022 0201 	bic.w	r2, r2, #1
 8003e04:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10c      	bne.n	8003e28 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003e26:	e0fa      	b.n	800401e <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a5f      	ldr	r2, [pc, #380]	; (8003fac <HAL_I2S_DMAStop+0x330>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d101      	bne.n	8003e36 <HAL_I2S_DMAStop+0x1ba>
 8003e32:	4b5f      	ldr	r3, [pc, #380]	; (8003fb0 <HAL_I2S_DMAStop+0x334>)
 8003e34:	e001      	b.n	8003e3a <HAL_I2S_DMAStop+0x1be>
 8003e36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e3a:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003e3c:	e0ef      	b.n	800401e <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e46:	d005      	beq.n	8003e54 <HAL_I2S_DMAStop+0x1d8>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e50:	f040 80e5 	bne.w	800401e <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00f      	beq.n	8003e7c <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fd fbc9 	bl	80015f8 <HAL_DMA_Abort>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d007      	beq.n	8003e7c <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e70:	f043 0208 	orr.w	r2, r3, #8
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b05      	cmp	r3, #5
 8003e86:	f040 809a 	bne.w	8003fbe <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00f      	beq.n	8003eb2 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fd fbae 	bl	80015f8 <HAL_DMA_Abort>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d007      	beq.n	8003eb2 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	f043 0208 	orr.w	r2, r3, #8
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8003eb2:	f7fd f9b1 	bl	8001218 <HAL_GetTick>
 8003eb6:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8003eb8:	e012      	b.n	8003ee0 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8003eba:	f7fd f9ad 	bl	8001218 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b64      	cmp	r3, #100	; 0x64
 8003ec6:	d90b      	bls.n	8003ee0 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ecc:	f043 0201 	orr.w	r2, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a31      	ldr	r2, [pc, #196]	; (8003fac <HAL_I2S_DMAStop+0x330>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d101      	bne.n	8003eee <HAL_I2S_DMAStop+0x272>
 8003eea:	4b31      	ldr	r3, [pc, #196]	; (8003fb0 <HAL_I2S_DMAStop+0x334>)
 8003eec:	e001      	b.n	8003ef2 <HAL_I2S_DMAStop+0x276>
 8003eee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d1de      	bne.n	8003eba <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8003efc:	e012      	b.n	8003f24 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8003efe:	f7fd f98b 	bl	8001218 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b64      	cmp	r3, #100	; 0x64
 8003f0a:	d90b      	bls.n	8003f24 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f10:	f043 0201 	orr.w	r2, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a20      	ldr	r2, [pc, #128]	; (8003fac <HAL_I2S_DMAStop+0x330>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d101      	bne.n	8003f32 <HAL_I2S_DMAStop+0x2b6>
 8003f2e:	4b20      	ldr	r3, [pc, #128]	; (8003fb0 <HAL_I2S_DMAStop+0x334>)
 8003f30:	e001      	b.n	8003f36 <HAL_I2S_DMAStop+0x2ba>
 8003f32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3c:	2b80      	cmp	r3, #128	; 0x80
 8003f3e:	d0de      	beq.n	8003efe <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a19      	ldr	r2, [pc, #100]	; (8003fac <HAL_I2S_DMAStop+0x330>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d101      	bne.n	8003f4e <HAL_I2S_DMAStop+0x2d2>
 8003f4a:	4b19      	ldr	r3, [pc, #100]	; (8003fb0 <HAL_I2S_DMAStop+0x334>)
 8003f4c:	e001      	b.n	8003f52 <HAL_I2S_DMAStop+0x2d6>
 8003f4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4914      	ldr	r1, [pc, #80]	; (8003fac <HAL_I2S_DMAStop+0x330>)
 8003f5a:	428b      	cmp	r3, r1
 8003f5c:	d101      	bne.n	8003f62 <HAL_I2S_DMAStop+0x2e6>
 8003f5e:	4b14      	ldr	r3, [pc, #80]	; (8003fb0 <HAL_I2S_DMAStop+0x334>)
 8003f60:	e001      	b.n	8003f66 <HAL_I2S_DMAStop+0x2ea>
 8003f62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f6a:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a0d      	ldr	r2, [pc, #52]	; (8003fac <HAL_I2S_DMAStop+0x330>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d101      	bne.n	8003f7e <HAL_I2S_DMAStop+0x302>
 8003f7a:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <HAL_I2S_DMAStop+0x334>)
 8003f7c:	e001      	b.n	8003f82 <HAL_I2S_DMAStop+0x306>
 8003f7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a07      	ldr	r2, [pc, #28]	; (8003fac <HAL_I2S_DMAStop+0x330>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d101      	bne.n	8003f96 <HAL_I2S_DMAStop+0x31a>
 8003f92:	4b07      	ldr	r3, [pc, #28]	; (8003fb0 <HAL_I2S_DMAStop+0x334>)
 8003f94:	e001      	b.n	8003f9a <HAL_I2S_DMAStop+0x31e>
 8003f96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4902      	ldr	r1, [pc, #8]	; (8003fac <HAL_I2S_DMAStop+0x330>)
 8003fa2:	428b      	cmp	r3, r1
 8003fa4:	d106      	bne.n	8003fb4 <HAL_I2S_DMAStop+0x338>
 8003fa6:	4b02      	ldr	r3, [pc, #8]	; (8003fb0 <HAL_I2S_DMAStop+0x334>)
 8003fa8:	e006      	b.n	8003fb8 <HAL_I2S_DMAStop+0x33c>
 8003faa:	bf00      	nop
 8003fac:	40003800 	.word	0x40003800
 8003fb0:	40003400 	.word	0x40003400
 8003fb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fb8:	f022 0202 	bic.w	r2, r2, #2
 8003fbc:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	69da      	ldr	r2, [r3, #28]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fcc:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0201 	bic.w	r2, r2, #1
 8003ff2:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ffc:	d10c      	bne.n	8004018 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004002:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	77fb      	strb	r3, [r7, #31]
 8004016:	e002      	b.n	800401e <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8004026:	7ffb      	ldrb	r3, [r7, #31]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3720      	adds	r7, #32
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	4798      	blx	r3
}
 8004040:	bf00      	nop
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	881a      	ldrh	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	1c9a      	adds	r2, r3, #2
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	3b01      	subs	r3, #1
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10e      	bne.n	80040d8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040c8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7ff ffb8 	bl	8004048 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80040d8:	bf00      	nop
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	b292      	uxth	r2, r2
 80040f4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	1c9a      	adds	r2, r3, #2
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004104:	b29b      	uxth	r3, r3
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004112:	b29b      	uxth	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10e      	bne.n	8004136 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004126:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff ff93 	bl	800405c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004136:	bf00      	nop
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b086      	sub	sp, #24
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b04      	cmp	r3, #4
 8004158:	d13a      	bne.n	80041d0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b01      	cmp	r3, #1
 8004162:	d109      	bne.n	8004178 <I2S_IRQHandler+0x3a>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416e:	2b40      	cmp	r3, #64	; 0x40
 8004170:	d102      	bne.n	8004178 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff ffb4 	bl	80040e0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417e:	2b40      	cmp	r3, #64	; 0x40
 8004180:	d126      	bne.n	80041d0 <I2S_IRQHandler+0x92>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f003 0320 	and.w	r3, r3, #32
 800418c:	2b20      	cmp	r3, #32
 800418e:	d11f      	bne.n	80041d0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800419e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80041a0:	2300      	movs	r3, #0
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	613b      	str	r3, [r7, #16]
 80041b4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c2:	f043 0202 	orr.w	r2, r3, #2
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff ff50 	bl	8004070 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d136      	bne.n	800424a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d109      	bne.n	80041fa <I2S_IRQHandler+0xbc>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f0:	2b80      	cmp	r3, #128	; 0x80
 80041f2:	d102      	bne.n	80041fa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff ff45 	bl	8004084 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b08      	cmp	r3, #8
 8004202:	d122      	bne.n	800424a <I2S_IRQHandler+0x10c>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f003 0320 	and.w	r3, r3, #32
 800420e:	2b20      	cmp	r3, #32
 8004210:	d11b      	bne.n	800424a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004220:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	f043 0204 	orr.w	r2, r3, #4
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff ff13 	bl	8004070 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800424a:	bf00      	nop
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b086      	sub	sp, #24
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	603b      	str	r3, [r7, #0]
 800425e:	4613      	mov	r3, r2
 8004260:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004262:	f7fc ffd9 	bl	8001218 <HAL_GetTick>
 8004266:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004268:	e018      	b.n	800429c <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004270:	d014      	beq.n	800429c <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8004272:	f7fc ffd1 	bl	8001218 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d902      	bls.n	8004288 <I2S_WaitFlagStateUntilTimeout+0x36>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d109      	bne.n	800429c <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e00f      	b.n	80042bc <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	4013      	ands	r3, r2
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	bf0c      	ite	eq
 80042ac:	2301      	moveq	r3, #1
 80042ae:	2300      	movne	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	461a      	mov	r2, r3
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d1d7      	bne.n	800426a <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4aa2      	ldr	r2, [pc, #648]	; (8004564 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d101      	bne.n	80042e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80042de:	4ba2      	ldr	r3, [pc, #648]	; (8004568 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042e0:	e001      	b.n	80042e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80042e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a9b      	ldr	r2, [pc, #620]	; (8004564 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d101      	bne.n	8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80042fc:	4b9a      	ldr	r3, [pc, #616]	; (8004568 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042fe:	e001      	b.n	8004304 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004300:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004310:	d004      	beq.n	800431c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	f040 8099 	bne.w	800444e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b02      	cmp	r3, #2
 8004324:	d107      	bne.n	8004336 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f925 	bl	8004580 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b01      	cmp	r3, #1
 800433e:	d107      	bne.n	8004350 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f9c8 	bl	80046e0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004356:	2b40      	cmp	r3, #64	; 0x40
 8004358:	d13a      	bne.n	80043d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f003 0320 	and.w	r3, r3, #32
 8004360:	2b00      	cmp	r3, #0
 8004362:	d035      	beq.n	80043d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a7e      	ldr	r2, [pc, #504]	; (8004564 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d101      	bne.n	8004372 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800436e:	4b7e      	ldr	r3, [pc, #504]	; (8004568 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004370:	e001      	b.n	8004376 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004372:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4979      	ldr	r1, [pc, #484]	; (8004564 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800437e:	428b      	cmp	r3, r1
 8004380:	d101      	bne.n	8004386 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004382:	4b79      	ldr	r3, [pc, #484]	; (8004568 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004384:	e001      	b.n	800438a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004386:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800438a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800438e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800439e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80043a0:	2300      	movs	r3, #0
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c2:	f043 0202 	orr.w	r2, r3, #2
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff fe50 	bl	8004070 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	f040 80be 	bne.w	8004558 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f003 0320 	and.w	r3, r3, #32
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 80b8 	beq.w	8004558 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043f6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a59      	ldr	r2, [pc, #356]	; (8004564 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d101      	bne.n	8004406 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004402:	4b59      	ldr	r3, [pc, #356]	; (8004568 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004404:	e001      	b.n	800440a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004406:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4954      	ldr	r1, [pc, #336]	; (8004564 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004412:	428b      	cmp	r3, r1
 8004414:	d101      	bne.n	800441a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004416:	4b54      	ldr	r3, [pc, #336]	; (8004568 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004418:	e001      	b.n	800441e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800441a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800441e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004422:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004424:	2300      	movs	r3, #0
 8004426:	60bb      	str	r3, [r7, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	60bb      	str	r3, [r7, #8]
 8004430:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443e:	f043 0204 	orr.w	r2, r3, #4
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff fe12 	bl	8004070 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800444c:	e084      	b.n	8004558 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b02      	cmp	r3, #2
 8004456:	d107      	bne.n	8004468 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f8be 	bl	80045e4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b01      	cmp	r3, #1
 8004470:	d107      	bne.n	8004482 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f8fd 	bl	800467c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004488:	2b40      	cmp	r3, #64	; 0x40
 800448a:	d12f      	bne.n	80044ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f003 0320 	and.w	r3, r3, #32
 8004492:	2b00      	cmp	r3, #0
 8004494:	d02a      	beq.n	80044ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044a4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a2e      	ldr	r2, [pc, #184]	; (8004564 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d101      	bne.n	80044b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80044b0:	4b2d      	ldr	r3, [pc, #180]	; (8004568 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044b2:	e001      	b.n	80044b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80044b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4929      	ldr	r1, [pc, #164]	; (8004564 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044c0:	428b      	cmp	r3, r1
 80044c2:	d101      	bne.n	80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80044c4:	4b28      	ldr	r3, [pc, #160]	; (8004568 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044c6:	e001      	b.n	80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80044c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044d0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044de:	f043 0202 	orr.w	r2, r3, #2
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7ff fdc2 	bl	8004070 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d131      	bne.n	800455a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d02c      	beq.n	800455a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a17      	ldr	r2, [pc, #92]	; (8004564 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d101      	bne.n	800450e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800450a:	4b17      	ldr	r3, [pc, #92]	; (8004568 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800450c:	e001      	b.n	8004512 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800450e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4912      	ldr	r1, [pc, #72]	; (8004564 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800451a:	428b      	cmp	r3, r1
 800451c:	d101      	bne.n	8004522 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800451e:	4b12      	ldr	r3, [pc, #72]	; (8004568 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004520:	e001      	b.n	8004526 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004522:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004526:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800452a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800453a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004548:	f043 0204 	orr.w	r2, r3, #4
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff fd8d 	bl	8004070 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004556:	e000      	b.n	800455a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004558:	bf00      	nop
}
 800455a:	bf00      	nop
 800455c:	3720      	adds	r7, #32
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40003800 	.word	0x40003800
 8004568:	40003400 	.word	0x40003400

0800456c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	1c99      	adds	r1, r3, #2
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6251      	str	r1, [r2, #36]	; 0x24
 8004592:	881a      	ldrh	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d113      	bne.n	80045da <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d106      	bne.n	80045da <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7ff ffc9 	bl	800456c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	1c99      	adds	r1, r3, #2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6251      	str	r1, [r2, #36]	; 0x24
 80045f6:	8819      	ldrh	r1, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a1d      	ldr	r2, [pc, #116]	; (8004674 <I2SEx_TxISR_I2SExt+0x90>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d101      	bne.n	8004606 <I2SEx_TxISR_I2SExt+0x22>
 8004602:	4b1d      	ldr	r3, [pc, #116]	; (8004678 <I2SEx_TxISR_I2SExt+0x94>)
 8004604:	e001      	b.n	800460a <I2SEx_TxISR_I2SExt+0x26>
 8004606:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800460a:	460a      	mov	r2, r1
 800460c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d121      	bne.n	800466a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a12      	ldr	r2, [pc, #72]	; (8004674 <I2SEx_TxISR_I2SExt+0x90>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d101      	bne.n	8004634 <I2SEx_TxISR_I2SExt+0x50>
 8004630:	4b11      	ldr	r3, [pc, #68]	; (8004678 <I2SEx_TxISR_I2SExt+0x94>)
 8004632:	e001      	b.n	8004638 <I2SEx_TxISR_I2SExt+0x54>
 8004634:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	490d      	ldr	r1, [pc, #52]	; (8004674 <I2SEx_TxISR_I2SExt+0x90>)
 8004640:	428b      	cmp	r3, r1
 8004642:	d101      	bne.n	8004648 <I2SEx_TxISR_I2SExt+0x64>
 8004644:	4b0c      	ldr	r3, [pc, #48]	; (8004678 <I2SEx_TxISR_I2SExt+0x94>)
 8004646:	e001      	b.n	800464c <I2SEx_TxISR_I2SExt+0x68>
 8004648:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800464c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004650:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d106      	bne.n	800466a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff ff81 	bl	800456c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40003800 	.word	0x40003800
 8004678:	40003400 	.word	0x40003400

0800467c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68d8      	ldr	r0, [r3, #12]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	1c99      	adds	r1, r3, #2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004694:	b282      	uxth	r2, r0
 8004696:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d113      	bne.n	80046d8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046be:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7ff ff4a 	bl	800456c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046d8:	bf00      	nop
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a20      	ldr	r2, [pc, #128]	; (8004770 <I2SEx_RxISR_I2SExt+0x90>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d101      	bne.n	80046f6 <I2SEx_RxISR_I2SExt+0x16>
 80046f2:	4b20      	ldr	r3, [pc, #128]	; (8004774 <I2SEx_RxISR_I2SExt+0x94>)
 80046f4:	e001      	b.n	80046fa <I2SEx_RxISR_I2SExt+0x1a>
 80046f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046fa:	68d8      	ldr	r0, [r3, #12]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	1c99      	adds	r1, r3, #2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004706:	b282      	uxth	r2, r0
 8004708:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d121      	bne.n	8004766 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a12      	ldr	r2, [pc, #72]	; (8004770 <I2SEx_RxISR_I2SExt+0x90>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d101      	bne.n	8004730 <I2SEx_RxISR_I2SExt+0x50>
 800472c:	4b11      	ldr	r3, [pc, #68]	; (8004774 <I2SEx_RxISR_I2SExt+0x94>)
 800472e:	e001      	b.n	8004734 <I2SEx_RxISR_I2SExt+0x54>
 8004730:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	490d      	ldr	r1, [pc, #52]	; (8004770 <I2SEx_RxISR_I2SExt+0x90>)
 800473c:	428b      	cmp	r3, r1
 800473e:	d101      	bne.n	8004744 <I2SEx_RxISR_I2SExt+0x64>
 8004740:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <I2SEx_RxISR_I2SExt+0x94>)
 8004742:	e001      	b.n	8004748 <I2SEx_RxISR_I2SExt+0x68>
 8004744:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004748:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800474c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d106      	bne.n	8004766 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7ff ff03 	bl	800456c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004766:	bf00      	nop
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40003800 	.word	0x40003800
 8004774:	40003400 	.word	0x40003400

08004778 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e264      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d075      	beq.n	8004882 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004796:	4ba3      	ldr	r3, [pc, #652]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 030c 	and.w	r3, r3, #12
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d00c      	beq.n	80047bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047a2:	4ba0      	ldr	r3, [pc, #640]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d112      	bne.n	80047d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ae:	4b9d      	ldr	r3, [pc, #628]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ba:	d10b      	bne.n	80047d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047bc:	4b99      	ldr	r3, [pc, #612]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d05b      	beq.n	8004880 <HAL_RCC_OscConfig+0x108>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d157      	bne.n	8004880 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e23f      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047dc:	d106      	bne.n	80047ec <HAL_RCC_OscConfig+0x74>
 80047de:	4b91      	ldr	r3, [pc, #580]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a90      	ldr	r2, [pc, #576]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80047e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	e01d      	b.n	8004828 <HAL_RCC_OscConfig+0xb0>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047f4:	d10c      	bne.n	8004810 <HAL_RCC_OscConfig+0x98>
 80047f6:	4b8b      	ldr	r3, [pc, #556]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a8a      	ldr	r2, [pc, #552]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80047fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	4b88      	ldr	r3, [pc, #544]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a87      	ldr	r2, [pc, #540]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 8004808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	e00b      	b.n	8004828 <HAL_RCC_OscConfig+0xb0>
 8004810:	4b84      	ldr	r3, [pc, #528]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a83      	ldr	r2, [pc, #524]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 8004816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	4b81      	ldr	r3, [pc, #516]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a80      	ldr	r2, [pc, #512]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 8004822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d013      	beq.n	8004858 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004830:	f7fc fcf2 	bl	8001218 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004838:	f7fc fcee 	bl	8001218 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b64      	cmp	r3, #100	; 0x64
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e204      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484a:	4b76      	ldr	r3, [pc, #472]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f0      	beq.n	8004838 <HAL_RCC_OscConfig+0xc0>
 8004856:	e014      	b.n	8004882 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004858:	f7fc fcde 	bl	8001218 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004860:	f7fc fcda 	bl	8001218 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b64      	cmp	r3, #100	; 0x64
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e1f0      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004872:	4b6c      	ldr	r3, [pc, #432]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0xe8>
 800487e:	e000      	b.n	8004882 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d063      	beq.n	8004956 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800488e:	4b65      	ldr	r3, [pc, #404]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 030c 	and.w	r3, r3, #12
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00b      	beq.n	80048b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800489a:	4b62      	ldr	r3, [pc, #392]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d11c      	bne.n	80048e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048a6:	4b5f      	ldr	r3, [pc, #380]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d116      	bne.n	80048e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b2:	4b5c      	ldr	r3, [pc, #368]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d005      	beq.n	80048ca <HAL_RCC_OscConfig+0x152>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d001      	beq.n	80048ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e1c4      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ca:	4b56      	ldr	r3, [pc, #344]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	4952      	ldr	r1, [pc, #328]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048de:	e03a      	b.n	8004956 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d020      	beq.n	800492a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048e8:	4b4f      	ldr	r3, [pc, #316]	; (8004a28 <HAL_RCC_OscConfig+0x2b0>)
 80048ea:	2201      	movs	r2, #1
 80048ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ee:	f7fc fc93 	bl	8001218 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048f6:	f7fc fc8f 	bl	8001218 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e1a5      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004908:	4b46      	ldr	r3, [pc, #280]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004914:	4b43      	ldr	r3, [pc, #268]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	4940      	ldr	r1, [pc, #256]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 8004924:	4313      	orrs	r3, r2
 8004926:	600b      	str	r3, [r1, #0]
 8004928:	e015      	b.n	8004956 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800492a:	4b3f      	ldr	r3, [pc, #252]	; (8004a28 <HAL_RCC_OscConfig+0x2b0>)
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004930:	f7fc fc72 	bl	8001218 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004938:	f7fc fc6e 	bl	8001218 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e184      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494a:	4b36      	ldr	r3, [pc, #216]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f0      	bne.n	8004938 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d030      	beq.n	80049c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d016      	beq.n	8004998 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800496a:	4b30      	ldr	r3, [pc, #192]	; (8004a2c <HAL_RCC_OscConfig+0x2b4>)
 800496c:	2201      	movs	r2, #1
 800496e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004970:	f7fc fc52 	bl	8001218 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004978:	f7fc fc4e 	bl	8001218 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e164      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800498a:	4b26      	ldr	r3, [pc, #152]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 800498c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0f0      	beq.n	8004978 <HAL_RCC_OscConfig+0x200>
 8004996:	e015      	b.n	80049c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004998:	4b24      	ldr	r3, [pc, #144]	; (8004a2c <HAL_RCC_OscConfig+0x2b4>)
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800499e:	f7fc fc3b 	bl	8001218 <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049a6:	f7fc fc37 	bl	8001218 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e14d      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b8:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80049ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1f0      	bne.n	80049a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 80a0 	beq.w	8004b12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049d2:	2300      	movs	r3, #0
 80049d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049d6:	4b13      	ldr	r3, [pc, #76]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10f      	bne.n	8004a02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049e2:	2300      	movs	r3, #0
 80049e4:	60bb      	str	r3, [r7, #8]
 80049e6:	4b0f      	ldr	r3, [pc, #60]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	4a0e      	ldr	r2, [pc, #56]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80049ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f0:	6413      	str	r3, [r2, #64]	; 0x40
 80049f2:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <HAL_RCC_OscConfig+0x2ac>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fa:	60bb      	str	r3, [r7, #8]
 80049fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049fe:	2301      	movs	r3, #1
 8004a00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a02:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_RCC_OscConfig+0x2b8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d121      	bne.n	8004a52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a0e:	4b08      	ldr	r3, [pc, #32]	; (8004a30 <HAL_RCC_OscConfig+0x2b8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a07      	ldr	r2, [pc, #28]	; (8004a30 <HAL_RCC_OscConfig+0x2b8>)
 8004a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a1a:	f7fc fbfd 	bl	8001218 <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a20:	e011      	b.n	8004a46 <HAL_RCC_OscConfig+0x2ce>
 8004a22:	bf00      	nop
 8004a24:	40023800 	.word	0x40023800
 8004a28:	42470000 	.word	0x42470000
 8004a2c:	42470e80 	.word	0x42470e80
 8004a30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a34:	f7fc fbf0 	bl	8001218 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e106      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a46:	4b85      	ldr	r3, [pc, #532]	; (8004c5c <HAL_RCC_OscConfig+0x4e4>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f0      	beq.n	8004a34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d106      	bne.n	8004a68 <HAL_RCC_OscConfig+0x2f0>
 8004a5a:	4b81      	ldr	r3, [pc, #516]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5e:	4a80      	ldr	r2, [pc, #512]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	6713      	str	r3, [r2, #112]	; 0x70
 8004a66:	e01c      	b.n	8004aa2 <HAL_RCC_OscConfig+0x32a>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	2b05      	cmp	r3, #5
 8004a6e:	d10c      	bne.n	8004a8a <HAL_RCC_OscConfig+0x312>
 8004a70:	4b7b      	ldr	r3, [pc, #492]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a74:	4a7a      	ldr	r2, [pc, #488]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004a76:	f043 0304 	orr.w	r3, r3, #4
 8004a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a7c:	4b78      	ldr	r3, [pc, #480]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a80:	4a77      	ldr	r2, [pc, #476]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004a82:	f043 0301 	orr.w	r3, r3, #1
 8004a86:	6713      	str	r3, [r2, #112]	; 0x70
 8004a88:	e00b      	b.n	8004aa2 <HAL_RCC_OscConfig+0x32a>
 8004a8a:	4b75      	ldr	r3, [pc, #468]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8e:	4a74      	ldr	r2, [pc, #464]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004a90:	f023 0301 	bic.w	r3, r3, #1
 8004a94:	6713      	str	r3, [r2, #112]	; 0x70
 8004a96:	4b72      	ldr	r3, [pc, #456]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9a:	4a71      	ldr	r2, [pc, #452]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004a9c:	f023 0304 	bic.w	r3, r3, #4
 8004aa0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d015      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aaa:	f7fc fbb5 	bl	8001218 <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab0:	e00a      	b.n	8004ac8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab2:	f7fc fbb1 	bl	8001218 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e0c5      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac8:	4b65      	ldr	r3, [pc, #404]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0ee      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x33a>
 8004ad4:	e014      	b.n	8004b00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad6:	f7fc fb9f 	bl	8001218 <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004adc:	e00a      	b.n	8004af4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ade:	f7fc fb9b 	bl	8001218 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e0af      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af4:	4b5a      	ldr	r3, [pc, #360]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1ee      	bne.n	8004ade <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b00:	7dfb      	ldrb	r3, [r7, #23]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d105      	bne.n	8004b12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b06:	4b56      	ldr	r3, [pc, #344]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	4a55      	ldr	r2, [pc, #340]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 809b 	beq.w	8004c52 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b1c:	4b50      	ldr	r3, [pc, #320]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 030c 	and.w	r3, r3, #12
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d05c      	beq.n	8004be2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d141      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b30:	4b4c      	ldr	r3, [pc, #304]	; (8004c64 <HAL_RCC_OscConfig+0x4ec>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b36:	f7fc fb6f 	bl	8001218 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b3e:	f7fc fb6b 	bl	8001218 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e081      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b50:	4b43      	ldr	r3, [pc, #268]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1f0      	bne.n	8004b3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	69da      	ldr	r2, [r3, #28]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	431a      	orrs	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	019b      	lsls	r3, r3, #6
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b72:	085b      	lsrs	r3, r3, #1
 8004b74:	3b01      	subs	r3, #1
 8004b76:	041b      	lsls	r3, r3, #16
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	061b      	lsls	r3, r3, #24
 8004b80:	4937      	ldr	r1, [pc, #220]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b86:	4b37      	ldr	r3, [pc, #220]	; (8004c64 <HAL_RCC_OscConfig+0x4ec>)
 8004b88:	2201      	movs	r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8c:	f7fc fb44 	bl	8001218 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b94:	f7fc fb40 	bl	8001218 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e056      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba6:	4b2e      	ldr	r3, [pc, #184]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f0      	beq.n	8004b94 <HAL_RCC_OscConfig+0x41c>
 8004bb2:	e04e      	b.n	8004c52 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb4:	4b2b      	ldr	r3, [pc, #172]	; (8004c64 <HAL_RCC_OscConfig+0x4ec>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bba:	f7fc fb2d 	bl	8001218 <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bc2:	f7fc fb29 	bl	8001218 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e03f      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd4:	4b22      	ldr	r3, [pc, #136]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1f0      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x44a>
 8004be0:	e037      	b.n	8004c52 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e032      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bee:	4b1c      	ldr	r3, [pc, #112]	; (8004c60 <HAL_RCC_OscConfig+0x4e8>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d028      	beq.n	8004c4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d121      	bne.n	8004c4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d11a      	bne.n	8004c4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c1e:	4013      	ands	r3, r2
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c24:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d111      	bne.n	8004c4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c34:	085b      	lsrs	r3, r3, #1
 8004c36:	3b01      	subs	r3, #1
 8004c38:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d107      	bne.n	8004c4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c48:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d001      	beq.n	8004c52 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40007000 	.word	0x40007000
 8004c60:	40023800 	.word	0x40023800
 8004c64:	42470060 	.word	0x42470060

08004c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e0cc      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c7c:	4b68      	ldr	r3, [pc, #416]	; (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d90c      	bls.n	8004ca4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8a:	4b65      	ldr	r3, [pc, #404]	; (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c92:	4b63      	ldr	r3, [pc, #396]	; (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d001      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0b8      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d020      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cbc:	4b59      	ldr	r3, [pc, #356]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4a58      	ldr	r2, [pc, #352]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cd4:	4b53      	ldr	r3, [pc, #332]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	4a52      	ldr	r2, [pc, #328]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce0:	4b50      	ldr	r3, [pc, #320]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	494d      	ldr	r1, [pc, #308]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d044      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d107      	bne.n	8004d16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d06:	4b47      	ldr	r3, [pc, #284]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d119      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e07f      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d003      	beq.n	8004d26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d107      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d26:	4b3f      	ldr	r3, [pc, #252]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e06f      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d36:	4b3b      	ldr	r3, [pc, #236]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e067      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d46:	4b37      	ldr	r3, [pc, #220]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f023 0203 	bic.w	r2, r3, #3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	4934      	ldr	r1, [pc, #208]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d58:	f7fc fa5e 	bl	8001218 <HAL_GetTick>
 8004d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d5e:	e00a      	b.n	8004d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d60:	f7fc fa5a 	bl	8001218 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e04f      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d76:	4b2b      	ldr	r3, [pc, #172]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 020c 	and.w	r2, r3, #12
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d1eb      	bne.n	8004d60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d88:	4b25      	ldr	r3, [pc, #148]	; (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d20c      	bcs.n	8004db0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d96:	4b22      	ldr	r3, [pc, #136]	; (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9e:	4b20      	ldr	r3, [pc, #128]	; (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d001      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e032      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dbc:	4b19      	ldr	r3, [pc, #100]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	4916      	ldr	r1, [pc, #88]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d009      	beq.n	8004dee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dda:	4b12      	ldr	r3, [pc, #72]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	490e      	ldr	r1, [pc, #56]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dee:	f000 f821 	bl	8004e34 <HAL_RCC_GetSysClockFreq>
 8004df2:	4602      	mov	r2, r0
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	091b      	lsrs	r3, r3, #4
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	490a      	ldr	r1, [pc, #40]	; (8004e28 <HAL_RCC_ClockConfig+0x1c0>)
 8004e00:	5ccb      	ldrb	r3, [r1, r3]
 8004e02:	fa22 f303 	lsr.w	r3, r2, r3
 8004e06:	4a09      	ldr	r2, [pc, #36]	; (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e0a:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <HAL_RCC_ClockConfig+0x1c8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fc f9be 	bl	8001190 <HAL_InitTick>

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40023c00 	.word	0x40023c00
 8004e24:	40023800 	.word	0x40023800
 8004e28:	0807bc98 	.word	0x0807bc98
 8004e2c:	20000000 	.word	0x20000000
 8004e30:	20000004 	.word	0x20000004

08004e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e38:	b084      	sub	sp, #16
 8004e3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	607b      	str	r3, [r7, #4]
 8004e40:	2300      	movs	r3, #0
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	2300      	movs	r3, #0
 8004e46:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e4c:	4b67      	ldr	r3, [pc, #412]	; (8004fec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 030c 	and.w	r3, r3, #12
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d00d      	beq.n	8004e74 <HAL_RCC_GetSysClockFreq+0x40>
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	f200 80bd 	bhi.w	8004fd8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_RCC_GetSysClockFreq+0x34>
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d003      	beq.n	8004e6e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e66:	e0b7      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e68:	4b61      	ldr	r3, [pc, #388]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e6a:	60bb      	str	r3, [r7, #8]
       break;
 8004e6c:	e0b7      	b.n	8004fde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e6e:	4b61      	ldr	r3, [pc, #388]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004e70:	60bb      	str	r3, [r7, #8]
      break;
 8004e72:	e0b4      	b.n	8004fde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e74:	4b5d      	ldr	r3, [pc, #372]	; (8004fec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e7e:	4b5b      	ldr	r3, [pc, #364]	; (8004fec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d04d      	beq.n	8004f26 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e8a:	4b58      	ldr	r3, [pc, #352]	; (8004fec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	099b      	lsrs	r3, r3, #6
 8004e90:	461a      	mov	r2, r3
 8004e92:	f04f 0300 	mov.w	r3, #0
 8004e96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e9a:	f04f 0100 	mov.w	r1, #0
 8004e9e:	ea02 0800 	and.w	r8, r2, r0
 8004ea2:	ea03 0901 	and.w	r9, r3, r1
 8004ea6:	4640      	mov	r0, r8
 8004ea8:	4649      	mov	r1, r9
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	014b      	lsls	r3, r1, #5
 8004eb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004eb8:	0142      	lsls	r2, r0, #5
 8004eba:	4610      	mov	r0, r2
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	ebb0 0008 	subs.w	r0, r0, r8
 8004ec2:	eb61 0109 	sbc.w	r1, r1, r9
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	f04f 0300 	mov.w	r3, #0
 8004ece:	018b      	lsls	r3, r1, #6
 8004ed0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ed4:	0182      	lsls	r2, r0, #6
 8004ed6:	1a12      	subs	r2, r2, r0
 8004ed8:	eb63 0301 	sbc.w	r3, r3, r1
 8004edc:	f04f 0000 	mov.w	r0, #0
 8004ee0:	f04f 0100 	mov.w	r1, #0
 8004ee4:	00d9      	lsls	r1, r3, #3
 8004ee6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004eea:	00d0      	lsls	r0, r2, #3
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	eb12 0208 	adds.w	r2, r2, r8
 8004ef4:	eb43 0309 	adc.w	r3, r3, r9
 8004ef8:	f04f 0000 	mov.w	r0, #0
 8004efc:	f04f 0100 	mov.w	r1, #0
 8004f00:	0259      	lsls	r1, r3, #9
 8004f02:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004f06:	0250      	lsls	r0, r2, #9
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	4619      	mov	r1, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	461a      	mov	r2, r3
 8004f14:	f04f 0300 	mov.w	r3, #0
 8004f18:	f7fb f956 	bl	80001c8 <__aeabi_uldivmod>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4613      	mov	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	e04a      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f26:	4b31      	ldr	r3, [pc, #196]	; (8004fec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	099b      	lsrs	r3, r3, #6
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f36:	f04f 0100 	mov.w	r1, #0
 8004f3a:	ea02 0400 	and.w	r4, r2, r0
 8004f3e:	ea03 0501 	and.w	r5, r3, r1
 8004f42:	4620      	mov	r0, r4
 8004f44:	4629      	mov	r1, r5
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	f04f 0300 	mov.w	r3, #0
 8004f4e:	014b      	lsls	r3, r1, #5
 8004f50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f54:	0142      	lsls	r2, r0, #5
 8004f56:	4610      	mov	r0, r2
 8004f58:	4619      	mov	r1, r3
 8004f5a:	1b00      	subs	r0, r0, r4
 8004f5c:	eb61 0105 	sbc.w	r1, r1, r5
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	018b      	lsls	r3, r1, #6
 8004f6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f6e:	0182      	lsls	r2, r0, #6
 8004f70:	1a12      	subs	r2, r2, r0
 8004f72:	eb63 0301 	sbc.w	r3, r3, r1
 8004f76:	f04f 0000 	mov.w	r0, #0
 8004f7a:	f04f 0100 	mov.w	r1, #0
 8004f7e:	00d9      	lsls	r1, r3, #3
 8004f80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f84:	00d0      	lsls	r0, r2, #3
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	1912      	adds	r2, r2, r4
 8004f8c:	eb45 0303 	adc.w	r3, r5, r3
 8004f90:	f04f 0000 	mov.w	r0, #0
 8004f94:	f04f 0100 	mov.w	r1, #0
 8004f98:	0299      	lsls	r1, r3, #10
 8004f9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004f9e:	0290      	lsls	r0, r2, #10
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4610      	mov	r0, r2
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	461a      	mov	r2, r3
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	f7fb f90a 	bl	80001c8 <__aeabi_uldivmod>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4613      	mov	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fbc:	4b0b      	ldr	r3, [pc, #44]	; (8004fec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	0c1b      	lsrs	r3, r3, #16
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd4:	60bb      	str	r3, [r7, #8]
      break;
 8004fd6:	e002      	b.n	8004fde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fd8:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004fda:	60bb      	str	r3, [r7, #8]
      break;
 8004fdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fde:	68bb      	ldr	r3, [r7, #8]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004fea:	bf00      	nop
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	00f42400 	.word	0x00f42400
 8004ff4:	007a1200 	.word	0x007a1200

08004ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ffc:	4b03      	ldr	r3, [pc, #12]	; (800500c <HAL_RCC_GetHCLKFreq+0x14>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
}
 8005000:	4618      	mov	r0, r3
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	20000000 	.word	0x20000000

08005010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005014:	f7ff fff0 	bl	8004ff8 <HAL_RCC_GetHCLKFreq>
 8005018:	4602      	mov	r2, r0
 800501a:	4b05      	ldr	r3, [pc, #20]	; (8005030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	0a9b      	lsrs	r3, r3, #10
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	4903      	ldr	r1, [pc, #12]	; (8005034 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005026:	5ccb      	ldrb	r3, [r1, r3]
 8005028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800502c:	4618      	mov	r0, r3
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40023800 	.word	0x40023800
 8005034:	0807bca8 	.word	0x0807bca8

08005038 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d105      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800505c:	2b00      	cmp	r3, #0
 800505e:	d035      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005060:	4b62      	ldr	r3, [pc, #392]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005066:	f7fc f8d7 	bl	8001218 <HAL_GetTick>
 800506a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800506c:	e008      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800506e:	f7fc f8d3 	bl	8001218 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d901      	bls.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e0b0      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005080:	4b5b      	ldr	r3, [pc, #364]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1f0      	bne.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	019a      	lsls	r2, r3, #6
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	071b      	lsls	r3, r3, #28
 8005098:	4955      	ldr	r1, [pc, #340]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050a0:	4b52      	ldr	r3, [pc, #328]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80050a2:	2201      	movs	r2, #1
 80050a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050a6:	f7fc f8b7 	bl	8001218 <HAL_GetTick>
 80050aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050ac:	e008      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050ae:	f7fc f8b3 	bl	8001218 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e090      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050c0:	4b4b      	ldr	r3, [pc, #300]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0f0      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 8083 	beq.w	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050da:	2300      	movs	r3, #0
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	4b44      	ldr	r3, [pc, #272]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	4a43      	ldr	r2, [pc, #268]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e8:	6413      	str	r3, [r2, #64]	; 0x40
 80050ea:	4b41      	ldr	r3, [pc, #260]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80050f6:	4b3f      	ldr	r3, [pc, #252]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a3e      	ldr	r2, [pc, #248]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80050fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005100:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005102:	f7fc f889 	bl	8001218 <HAL_GetTick>
 8005106:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005108:	e008      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800510a:	f7fc f885 	bl	8001218 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e062      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800511c:	4b35      	ldr	r3, [pc, #212]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0f0      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005128:	4b31      	ldr	r3, [pc, #196]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800512a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005130:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d02f      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	429a      	cmp	r2, r3
 8005144:	d028      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005146:	4b2a      	ldr	r3, [pc, #168]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800514e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005150:	4b29      	ldr	r3, [pc, #164]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005152:	2201      	movs	r2, #1
 8005154:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005156:	4b28      	ldr	r3, [pc, #160]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800515c:	4a24      	ldr	r2, [pc, #144]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005162:	4b23      	ldr	r3, [pc, #140]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b01      	cmp	r3, #1
 800516c:	d114      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800516e:	f7fc f853 	bl	8001218 <HAL_GetTick>
 8005172:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005174:	e00a      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005176:	f7fc f84f 	bl	8001218 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	f241 3288 	movw	r2, #5000	; 0x1388
 8005184:	4293      	cmp	r3, r2
 8005186:	d901      	bls.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e02a      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800518c:	4b18      	ldr	r3, [pc, #96]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800518e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0ee      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051a4:	d10d      	bne.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80051a6:	4b12      	ldr	r3, [pc, #72]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80051b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ba:	490d      	ldr	r1, [pc, #52]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	608b      	str	r3, [r1, #8]
 80051c0:	e005      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 80051c2:	4b0b      	ldr	r3, [pc, #44]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	4a0a      	ldr	r2, [pc, #40]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051c8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051cc:	6093      	str	r3, [r2, #8]
 80051ce:	4b08      	ldr	r3, [pc, #32]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051da:	4905      	ldr	r1, [pc, #20]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	42470068 	.word	0x42470068
 80051f0:	40023800 	.word	0x40023800
 80051f4:	40007000 	.word	0x40007000
 80051f8:	42470e40 	.word	0x42470e40

080051fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005204:	2300      	movs	r3, #0
 8005206:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d13e      	bne.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800521a:	4b23      	ldr	r3, [pc, #140]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d005      	beq.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d12f      	bne.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005230:	4b1e      	ldr	r3, [pc, #120]	; (80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005232:	617b      	str	r3, [r7, #20]
          break;
 8005234:	e02f      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005236:	4b1c      	ldr	r3, [pc, #112]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800523e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005242:	d108      	bne.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005244:	4b18      	ldr	r3, [pc, #96]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800524c:	4a18      	ldr	r2, [pc, #96]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800524e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	e007      	b.n	8005266 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005256:	4b14      	ldr	r3, [pc, #80]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800525e:	4a15      	ldr	r2, [pc, #84]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005260:	fbb2 f3f3 	udiv	r3, r2, r3
 8005264:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005266:	4b10      	ldr	r3, [pc, #64]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800526c:	099b      	lsrs	r3, r3, #6
 800526e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	fb02 f303 	mul.w	r3, r2, r3
 8005278:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800527a:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800527c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005280:	0f1b      	lsrs	r3, r3, #28
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	fbb2 f3f3 	udiv	r3, r2, r3
 800528c:	617b      	str	r3, [r7, #20]
          break;
 800528e:	e002      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	617b      	str	r3, [r7, #20]
          break;
 8005294:	bf00      	nop
        }
      }
      break;
 8005296:	bf00      	nop
    }
  }
  return frequency;
 8005298:	697b      	ldr	r3, [r7, #20]
}
 800529a:	4618      	mov	r0, r3
 800529c:	371c      	adds	r7, #28
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40023800 	.word	0x40023800
 80052ac:	00bb8000 	.word	0x00bb8000
 80052b0:	007a1200 	.word	0x007a1200
 80052b4:	00f42400 	.word	0x00f42400

080052b8 <__libc_init_array>:
 80052b8:	b570      	push	{r4, r5, r6, lr}
 80052ba:	4d0d      	ldr	r5, [pc, #52]	; (80052f0 <__libc_init_array+0x38>)
 80052bc:	4c0d      	ldr	r4, [pc, #52]	; (80052f4 <__libc_init_array+0x3c>)
 80052be:	1b64      	subs	r4, r4, r5
 80052c0:	10a4      	asrs	r4, r4, #2
 80052c2:	2600      	movs	r6, #0
 80052c4:	42a6      	cmp	r6, r4
 80052c6:	d109      	bne.n	80052dc <__libc_init_array+0x24>
 80052c8:	4d0b      	ldr	r5, [pc, #44]	; (80052f8 <__libc_init_array+0x40>)
 80052ca:	4c0c      	ldr	r4, [pc, #48]	; (80052fc <__libc_init_array+0x44>)
 80052cc:	f000 f82e 	bl	800532c <_init>
 80052d0:	1b64      	subs	r4, r4, r5
 80052d2:	10a4      	asrs	r4, r4, #2
 80052d4:	2600      	movs	r6, #0
 80052d6:	42a6      	cmp	r6, r4
 80052d8:	d105      	bne.n	80052e6 <__libc_init_array+0x2e>
 80052da:	bd70      	pop	{r4, r5, r6, pc}
 80052dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80052e0:	4798      	blx	r3
 80052e2:	3601      	adds	r6, #1
 80052e4:	e7ee      	b.n	80052c4 <__libc_init_array+0xc>
 80052e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ea:	4798      	blx	r3
 80052ec:	3601      	adds	r6, #1
 80052ee:	e7f2      	b.n	80052d6 <__libc_init_array+0x1e>
 80052f0:	0807bcc0 	.word	0x0807bcc0
 80052f4:	0807bcc0 	.word	0x0807bcc0
 80052f8:	0807bcc0 	.word	0x0807bcc0
 80052fc:	0807bcc4 	.word	0x0807bcc4

08005300 <memcpy>:
 8005300:	440a      	add	r2, r1
 8005302:	4291      	cmp	r1, r2
 8005304:	f100 33ff 	add.w	r3, r0, #4294967295
 8005308:	d100      	bne.n	800530c <memcpy+0xc>
 800530a:	4770      	bx	lr
 800530c:	b510      	push	{r4, lr}
 800530e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005312:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005316:	4291      	cmp	r1, r2
 8005318:	d1f9      	bne.n	800530e <memcpy+0xe>
 800531a:	bd10      	pop	{r4, pc}

0800531c <memset>:
 800531c:	4402      	add	r2, r0
 800531e:	4603      	mov	r3, r0
 8005320:	4293      	cmp	r3, r2
 8005322:	d100      	bne.n	8005326 <memset+0xa>
 8005324:	4770      	bx	lr
 8005326:	f803 1b01 	strb.w	r1, [r3], #1
 800532a:	e7f9      	b.n	8005320 <memset+0x4>

0800532c <_init>:
 800532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532e:	bf00      	nop
 8005330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005332:	bc08      	pop	{r3}
 8005334:	469e      	mov	lr, r3
 8005336:	4770      	bx	lr

08005338 <_fini>:
 8005338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533a:	bf00      	nop
 800533c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800533e:	bc08      	pop	{r3}
 8005340:	469e      	mov	lr, r3
 8005342:	4770      	bx	lr
