
i2s3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b6bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00079c38  0801b84c  0801b84c  0002b84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08095484  08095484  000b00b4  2**0
                  CONTENTS
  4 .ARM          00000008  08095484  08095484  000a5484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0809548c  0809548c  000b00b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0809548c  0809548c  000a548c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08095490  08095490  000a5490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08095494  000b0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000b00b4  2**0
                  CONTENTS
 10 .bss          0000e2d4  200000b4  200000b4  000b00b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000e388  2000e388  000b00b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000b00b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000506b8  00000000  00000000  000b00e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000096b5  00000000  00000000  0010079c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021b8  00000000  00000000  00109e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002010  00000000  00000000  0010c010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003321d  00000000  00000000  0010e020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003d57b  00000000  00000000  0014123d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e66d5  00000000  00000000  0017e7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00264e8d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009324  00000000  00000000  00264ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b4 	.word	0x200000b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b834 	.word	0x0801b834

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	0801b834 	.word	0x0801b834

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <WM8978_Register_Wirter>:
//	return HAL_I2C_Master_Transmit(&USEI2C, WM8978_WIRTE_ADDRESS, pData, 2,
//			1000);
//}

HAL_StatusTypeDef WM8978_Register_Wirter(I2C_HandleTypeDef *hi2c,uint8_t reg_addr, uint16_t data)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af02      	add	r7, sp, #8
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	460b      	mov	r3, r1
 8000572:	70fb      	strb	r3, [r7, #3]
 8000574:	4613      	mov	r3, r2
 8000576:	803b      	strh	r3, [r7, #0]
	uint8_t pData[10] =	{ 0 };
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	809a      	strh	r2, [r3, #4]

	pData[0] = (reg_addr << 1) | ((data >> 8) & 0x01);
 8000586:	78fb      	ldrb	r3, [r7, #3]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	b25a      	sxtb	r2, r3
 800058c:	883b      	ldrh	r3, [r7, #0]
 800058e:	0a1b      	lsrs	r3, r3, #8
 8000590:	b29b      	uxth	r3, r3
 8000592:	b25b      	sxtb	r3, r3
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	b25b      	sxtb	r3, r3
 800059a:	4313      	orrs	r3, r2
 800059c:	b25b      	sxtb	r3, r3
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	733b      	strb	r3, [r7, #12]
	pData[1] = data & 0xFF;
 80005a2:	883b      	ldrh	r3, [r7, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	737b      	strb	r3, [r7, #13]
	//WM8978_REGVAL_TBL[reg_addr]=data;	//卤拢麓忙录脛麓忙脝梅脰碌碌陆卤戮碌脴

	return HAL_I2C_Master_Transmit(hi2c,WM8978_WIRTE_ADDRESS, pData, 2, 1000);
 80005a8:	f107 020c 	add.w	r2, r7, #12
 80005ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2302      	movs	r3, #2
 80005b4:	2134      	movs	r1, #52	; 0x34
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f006 f9d8 	bl	800696c <HAL_I2C_Master_Transmit>
 80005bc:	4603      	mov	r3, r0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3718      	adds	r7, #24
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <WAV_FileInit>:




void WAV_FileInit(void) {
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	DataLength = sizeof(data) - 0x2c;
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <WAV_FileInit+0x1c>)
 80005ce:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <WAV_FileInit+0x20>)
 80005d0:	601a      	str	r2, [r3, #0]
	DataAddress = (uint8_t*) (data + 0x2c);
 80005d2:	4a06      	ldr	r2, [pc, #24]	; (80005ec <WAV_FileInit+0x24>)
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <WAV_FileInit+0x28>)
 80005d6:	601a      	str	r2, [r3, #0]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200020d0 	.word	0x200020d0
 80005e8:	00076926 	.word	0x00076926
 80005ec:	0801e8f8 	.word	0x0801e8f8
 80005f0:	200020d4 	.word	0x200020d4

080005f4 <WAV_FileRead2>:
uint32_t WAV_FileRead2(uint8_t *buf, uint32_t size) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
	bw = 0;
 80005fe:	4b19      	ldr	r3, [pc, #100]	; (8000664 <WAV_FileRead2+0x70>)
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
	f_read(&file, buf, size, (void*)&bw); //16bit音频,直接读取数据
 8000604:	4b17      	ldr	r3, [pc, #92]	; (8000664 <WAV_FileRead2+0x70>)
 8000606:	683a      	ldr	r2, [r7, #0]
 8000608:	6879      	ldr	r1, [r7, #4]
 800060a:	4817      	ldr	r0, [pc, #92]	; (8000668 <WAV_FileRead2+0x74>)
 800060c:	f00f fc54 	bl	800feb8 <f_read>
	//printf("aaaa %d\n",bw);

	if (bw < BUFFER_SIZE) //不够数据了,补充0
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <WAV_FileRead2+0x70>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000618:	d21e      	bcs.n	8000658 <WAV_FileRead2+0x64>
	{
		for (i = bw; i < BUFFER_SIZE - bw; i++)
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <WAV_FileRead2+0x70>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	461a      	mov	r2, r3
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <WAV_FileRead2+0x78>)
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	e00b      	b.n	800063e <WAV_FileRead2+0x4a>
			buf[i] = 0;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <WAV_FileRead2+0x78>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	461a      	mov	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4413      	add	r3, r2
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
		for (i = bw; i < BUFFER_SIZE - bw; i++)
 8000634:	4b0d      	ldr	r3, [pc, #52]	; (800066c <WAV_FileRead2+0x78>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	4a0c      	ldr	r2, [pc, #48]	; (800066c <WAV_FileRead2+0x78>)
 800063c:	6013      	str	r3, [r2, #0]
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <WAV_FileRead2+0x70>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000646:	4a09      	ldr	r2, [pc, #36]	; (800066c <WAV_FileRead2+0x78>)
 8000648:	6812      	ldr	r2, [r2, #0]
 800064a:	4293      	cmp	r3, r2
 800064c:	d8eb      	bhi.n	8000626 <WAV_FileRead2+0x32>

		f_close(&file);
 800064e:	4806      	ldr	r0, [pc, #24]	; (8000668 <WAV_FileRead2+0x74>)
 8000650:	f00f fe0f 	bl	8010272 <f_close>

		return 0;
 8000654:	2300      	movs	r3, #0
 8000656:	e000      	b.n	800065a <WAV_FileRead2+0x66>

	}
	return 1;
 8000658:	2301      	movs	r3, #1
}
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200032ec 	.word	0x200032ec
 8000668:	20004474 	.word	0x20004474
 800066c:	200032e4 	.word	0x200032e4

08000670 <WAV_FileRead3>:


uint32_t WAV_FileRead3(uint8_t *buf, uint32_t size) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
	bw2 = 0;
 800067a:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <WAV_FileRead3+0x88>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
	res2=f_read(&file2, buf, size, (void*)&bw2); //16bit音频,直接读取数据
 8000680:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <WAV_FileRead3+0x88>)
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	481d      	ldr	r0, [pc, #116]	; (80006fc <WAV_FileRead3+0x8c>)
 8000688:	f00f fc16 	bl	800feb8 <f_read>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <WAV_FileRead3+0x90>)
 8000692:	701a      	strb	r2, [r3, #0]
	printf("aaaa %d %d\n",res2,bw2);
 8000694:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <WAV_FileRead3+0x90>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	4619      	mov	r1, r3
 800069a:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <WAV_FileRead3+0x88>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	4818      	ldr	r0, [pc, #96]	; (8000704 <WAV_FileRead3+0x94>)
 80006a2:	f01a f901 	bl	801a8a8 <iprintf>

	if (bw2 < BUFFER_SIZE) //不够数据了,补充0
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <WAV_FileRead3+0x88>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006ae:	d21e      	bcs.n	80006ee <WAV_FileRead3+0x7e>
	{
		for (i = bw; i < BUFFER_SIZE - bw2; i++)
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <WAV_FileRead3+0x98>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <WAV_FileRead3+0x9c>)
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	e00b      	b.n	80006d4 <WAV_FileRead3+0x64>
			buf[i] = 0;
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <WAV_FileRead3+0x9c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
		for (i = bw; i < BUFFER_SIZE - bw2; i++)
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <WAV_FileRead3+0x9c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	3301      	adds	r3, #1
 80006d0:	4a0e      	ldr	r2, [pc, #56]	; (800070c <WAV_FileRead3+0x9c>)
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <WAV_FileRead3+0x88>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80006dc:	4a0b      	ldr	r2, [pc, #44]	; (800070c <WAV_FileRead3+0x9c>)
 80006de:	6812      	ldr	r2, [r2, #0]
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d8eb      	bhi.n	80006bc <WAV_FileRead3+0x4c>

		f_close(&file2);
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <WAV_FileRead3+0x8c>)
 80006e6:	f00f fdc4 	bl	8010272 <f_close>

		return 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	e000      	b.n	80006f0 <WAV_FileRead3+0x80>

	}
	return 1;
 80006ee:	2301      	movs	r3, #1
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200032e8 	.word	0x200032e8
 80006fc:	200032f0 	.word	0x200032f0
 8000700:	200032c0 	.word	0x200032c0
 8000704:	0801b84c 	.word	0x0801b84c
 8000708:	200032ec 	.word	0x200032ec
 800070c:	200032e4 	.word	0x200032e4

08000710 <DMAEx_XferCpltCallback2>:
	return Playing_End;
}



static void DMAEx_XferCpltCallback2(struct __DMA_HandleTypeDef *hdma) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	//if (DMA1_Stream3->CR & (1 << 19)) {
	//if(DMA1_Stream4->CR&(1<<19)){
	//printf("aaaa\n");
	if (WAV_FileRead3((uint8_t*) I2S_Buf2, sizeof(I2S_Buf2)) == 0) {
 8000718:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <DMAEx_XferCpltCallback2+0x24>)
 800071e:	f7ff ffa7 	bl	8000670 <WAV_FileRead3>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d101      	bne.n	800072c <DMAEx_XferCpltCallback2+0x1c>
		Audio_Player_Stop();
 8000728:	f000 fa34 	bl	8000b94 <Audio_Player_Stop>
	}

	//}

}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200010d0 	.word	0x200010d0

08000738 <DMAEx_XferM1CpltCallback2>:

static void DMAEx_XferM1CpltCallback2(struct __DMA_HandleTypeDef *hdma) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

	if (WAV_FileRead3((uint8_t*) I2S_Buf3, sizeof(I2S_Buf3)) == 0) {
 8000740:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000744:	4805      	ldr	r0, [pc, #20]	; (800075c <DMAEx_XferM1CpltCallback2+0x24>)
 8000746:	f7ff ff93 	bl	8000670 <WAV_FileRead3>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d101      	bne.n	8000754 <DMAEx_XferM1CpltCallback2+0x1c>
		Audio_Player_Stop();
 8000750:	f000 fa20 	bl	8000b94 <Audio_Player_Stop>
	}

}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200018d0 	.word	0x200018d0

08000760 <HAL_I2S_Transmit_DMAEx>:




HAL_StatusTypeDef HAL_I2S_Transmit_DMAEx(I2S_HandleTypeDef *hi2s,
		uint16_t *FirstBuffer, uint16_t *SecondBuffer, uint16_t Size) {
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b089      	sub	sp, #36	; 0x24
 8000764:	af02      	add	r7, sp, #8
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
 800076c:	807b      	strh	r3, [r7, #2]
	uint32_t tmpreg_cfgr;
	if ((FirstBuffer == NULL) || (SecondBuffer == NULL) || (Size == 0U)) {
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d005      	beq.n	8000780 <HAL_I2S_Transmit_DMAEx+0x20>
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d002      	beq.n	8000780 <HAL_I2S_Transmit_DMAEx+0x20>
 800077a:	887b      	ldrh	r3, [r7, #2]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <HAL_I2S_Transmit_DMAEx+0x24>
		return HAL_ERROR;
 8000780:	2301      	movs	r3, #1
 8000782:	e09c      	b.n	80008be <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Process Locked */
	__HAL_LOCK(hi2s);
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b01      	cmp	r3, #1
 800078e:	d101      	bne.n	8000794 <HAL_I2S_Transmit_DMAEx+0x34>
 8000790:	2302      	movs	r3, #2
 8000792:	e094      	b.n	80008be <HAL_I2S_Transmit_DMAEx+0x15e>
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	2201      	movs	r2, #1
 8000798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (hi2s->State != HAL_I2S_STATE_READY) {
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d005      	beq.n	80007b4 <HAL_I2S_Transmit_DMAEx+0x54>
		__HAL_UNLOCK(hi2s);
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	2200      	movs	r2, #0
 80007ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_BUSY;
 80007b0:	2302      	movs	r3, #2
 80007b2:	e084      	b.n	80008be <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Set state and reset error code */
	hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	2203      	movs	r2, #3
 80007b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2200      	movs	r2, #0
 80007c0:	645a      	str	r2, [r3, #68]	; 0x44
	hi2s->pTxBuffPtr = FirstBuffer;
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	68ba      	ldr	r2, [r7, #8]
 80007c6:	625a      	str	r2, [r3, #36]	; 0x24

	tmpreg_cfgr = hi2s->Instance->I2SCFGR
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	617b      	str	r3, [r7, #20]
			& (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);

	if ((tmpreg_cfgr == I2S_DATAFORMAT_24B)
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	d002      	beq.n	80007e0 <HAL_I2S_Transmit_DMAEx+0x80>
			|| (tmpreg_cfgr == I2S_DATAFORMAT_32B)) {
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	2b05      	cmp	r3, #5
 80007de:	d10a      	bne.n	80007f6 <HAL_I2S_Transmit_DMAEx+0x96>
		hi2s->TxXferSize = (Size << 1U);
 80007e0:	887b      	ldrh	r3, [r7, #2]
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = (Size << 1U);
 80007ea:	887b      	ldrh	r3, [r7, #2]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80007f4:	e005      	b.n	8000802 <HAL_I2S_Transmit_DMAEx+0xa2>
	} else {
		hi2s->TxXferSize = Size;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	887a      	ldrh	r2, [r7, #2]
 80007fa:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = Size;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	887a      	ldrh	r2, [r7, #2]
 8000800:	855a      	strh	r2, [r3, #42]	; 0x2a
	}

	/* Set the I2S Tx DMA Half transfer complete callback */
	hi2s->hdmatx->XferHalfCpltCallback = NULL;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000806:	2200      	movs	r2, #0
 8000808:	641a      	str	r2, [r3, #64]	; 0x40
	hi2s->hdmatx->XferM1HalfCpltCallback = NULL;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800080e:	2200      	movs	r2, #0
 8000810:	649a      	str	r2, [r3, #72]	; 0x48

	/* Set the I2S Tx DMA transfer complete callback */
	hi2s->hdmatx->XferCpltCallback = DMAEx_XferCpltCallback;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000816:	4a2c      	ldr	r2, [pc, #176]	; (80008c8 <HAL_I2S_Transmit_DMAEx+0x168>)
 8000818:	63da      	str	r2, [r3, #60]	; 0x3c
	hi2s->hdmatx->XferM1CpltCallback = DMAEx_XferM1CpltCallback;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800081e:	4a2b      	ldr	r2, [pc, #172]	; (80008cc <HAL_I2S_Transmit_DMAEx+0x16c>)
 8000820:	645a      	str	r2, [r3, #68]	; 0x44

	/* Set the DMA error callback */
	hi2s->hdmatx->XferErrorCallback = DMAEx_XferErrorCallback;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000826:	4a2a      	ldr	r2, [pc, #168]	; (80008d0 <HAL_I2S_Transmit_DMAEx+0x170>)
 8000828:	64da      	str	r2, [r3, #76]	; 0x4c

	/* Set the DMA abort callback */
	hi2s->hdmatx->XferAbortCallback = NULL;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800082e:	2200      	movs	r2, #0
 8000830:	651a      	str	r2, [r3, #80]	; 0x50

	/* Enable the Tx DMA Stream/Channel */
	if (HAL_OK
			!= HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx,
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000836:	68b9      	ldr	r1, [r7, #8]
					(uint32_t) FirstBuffer, (uint32_t) &hi2s->Instance->DR,
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	330c      	adds	r3, #12
			!= HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx,
 800083e:	461c      	mov	r4, r3
 8000840:	687a      	ldr	r2, [r7, #4]
					(uint32_t) SecondBuffer, hi2s->TxXferSize)) {
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000846:	b29b      	uxth	r3, r3
			!= HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx,
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	4613      	mov	r3, r2
 800084c:	4622      	mov	r2, r4
 800084e:	f001 fd23 	bl	8002298 <HAL_DMAEx_MultiBufferStart_IT>
 8000852:	4603      	mov	r3, r0
	if (HAL_OK
 8000854:	2b00      	cmp	r3, #0
 8000856:	d00f      	beq.n	8000878 <HAL_I2S_Transmit_DMAEx+0x118>
		/* Update SPI error code */
		SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085c:	f043 0208 	orr.w	r2, r3, #8
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	645a      	str	r2, [r3, #68]	; 0x44
		hi2s->State = HAL_I2S_STATE_READY;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2201      	movs	r2, #1
 8000868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		__HAL_UNLOCK(hi2s);
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2200      	movs	r2, #0
 8000870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_ERROR;
 8000874:	2301      	movs	r3, #1
 8000876:	e022      	b.n	80008be <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Check if the I2S is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE)) {
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000882:	2b00      	cmp	r3, #0
 8000884:	d107      	bne.n	8000896 <HAL_I2S_Transmit_DMAEx+0x136>
		/* Enable I2S peripheral */
		__HAL_I2S_ENABLE(hi2s);
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	69da      	ldr	r2, [r3, #28]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000894:	61da      	str	r2, [r3, #28]
	}

	/* Check if the I2S Tx request is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN)) {
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f003 0302 	and.w	r3, r3, #2
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d107      	bne.n	80008b4 <HAL_I2S_Transmit_DMAEx+0x154>
		/* Enable Tx DMA Request */
		SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	685a      	ldr	r2, [r3, #4]
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f042 0202 	orr.w	r2, r2, #2
 80008b2:	605a      	str	r2, [r3, #4]
	}

	__HAL_UNLOCK(hi2s);
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	2200      	movs	r2, #0
 80008b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	return HAL_OK;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	371c      	adds	r7, #28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd90      	pop	{r4, r7, pc}
 80008c6:	bf00      	nop
 80008c8:	08000a49 	.word	0x08000a49
 80008cc:	08000a71 	.word	0x08000a71
 80008d0:	08000a99 	.word	0x08000a99

080008d4 <HAL_I2S_Transmit_DMAEx2>:

HAL_StatusTypeDef HAL_I2S_Transmit_DMAEx2(I2S_HandleTypeDef *hi2s,
		uint16_t *FirstBuffer, uint16_t *SecondBuffer, uint16_t Size) {
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b089      	sub	sp, #36	; 0x24
 80008d8:	af02      	add	r7, sp, #8
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
 80008e0:	807b      	strh	r3, [r7, #2]
	uint32_t tmpreg_cfgr;
	if ((FirstBuffer == NULL) || (SecondBuffer == NULL) || (Size == 0U)) {
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d005      	beq.n	80008f4 <HAL_I2S_Transmit_DMAEx2+0x20>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d002      	beq.n	80008f4 <HAL_I2S_Transmit_DMAEx2+0x20>
 80008ee:	887b      	ldrh	r3, [r7, #2]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d101      	bne.n	80008f8 <HAL_I2S_Transmit_DMAEx2+0x24>
		return HAL_ERROR;
 80008f4:	2301      	movs	r3, #1
 80008f6:	e09c      	b.n	8000a32 <HAL_I2S_Transmit_DMAEx2+0x15e>
	}

	/* Process Locked */
	__HAL_LOCK(hi2s);
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b01      	cmp	r3, #1
 8000902:	d101      	bne.n	8000908 <HAL_I2S_Transmit_DMAEx2+0x34>
 8000904:	2302      	movs	r3, #2
 8000906:	e094      	b.n	8000a32 <HAL_I2S_Transmit_DMAEx2+0x15e>
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2201      	movs	r2, #1
 800090c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (hi2s->State != HAL_I2S_STATE_READY) {
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b01      	cmp	r3, #1
 800091a:	d005      	beq.n	8000928 <HAL_I2S_Transmit_DMAEx2+0x54>
		__HAL_UNLOCK(hi2s);
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2200      	movs	r2, #0
 8000920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_BUSY;
 8000924:	2302      	movs	r3, #2
 8000926:	e084      	b.n	8000a32 <HAL_I2S_Transmit_DMAEx2+0x15e>
	}

	/* Set state and reset error code */
	hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	2203      	movs	r2, #3
 800092c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2200      	movs	r2, #0
 8000934:	645a      	str	r2, [r3, #68]	; 0x44
	hi2s->pTxBuffPtr = FirstBuffer;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	68ba      	ldr	r2, [r7, #8]
 800093a:	625a      	str	r2, [r3, #36]	; 0x24

	tmpreg_cfgr = hi2s->Instance->I2SCFGR
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	617b      	str	r3, [r7, #20]
			& (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);

	if ((tmpreg_cfgr == I2S_DATAFORMAT_24B)
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	2b03      	cmp	r3, #3
 800094c:	d002      	beq.n	8000954 <HAL_I2S_Transmit_DMAEx2+0x80>
			|| (tmpreg_cfgr == I2S_DATAFORMAT_32B)) {
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	2b05      	cmp	r3, #5
 8000952:	d10a      	bne.n	800096a <HAL_I2S_Transmit_DMAEx2+0x96>
		hi2s->TxXferSize = (Size << 1U);
 8000954:	887b      	ldrh	r3, [r7, #2]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	b29a      	uxth	r2, r3
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = (Size << 1U);
 800095e:	887b      	ldrh	r3, [r7, #2]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	b29a      	uxth	r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000968:	e005      	b.n	8000976 <HAL_I2S_Transmit_DMAEx2+0xa2>
	} else {
		hi2s->TxXferSize = Size;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	887a      	ldrh	r2, [r7, #2]
 800096e:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = Size;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	887a      	ldrh	r2, [r7, #2]
 8000974:	855a      	strh	r2, [r3, #42]	; 0x2a
	}

	/* Set the I2S Tx DMA Half transfer complete callback */
	hi2s->hdmatx->XferHalfCpltCallback = NULL;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800097a:	2200      	movs	r2, #0
 800097c:	641a      	str	r2, [r3, #64]	; 0x40
	hi2s->hdmatx->XferM1HalfCpltCallback = NULL;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000982:	2200      	movs	r2, #0
 8000984:	649a      	str	r2, [r3, #72]	; 0x48

	/* Set the I2S Tx DMA transfer complete callback */
	hi2s->hdmatx->XferCpltCallback = DMAEx_XferCpltCallback2;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800098a:	4a2c      	ldr	r2, [pc, #176]	; (8000a3c <HAL_I2S_Transmit_DMAEx2+0x168>)
 800098c:	63da      	str	r2, [r3, #60]	; 0x3c
	hi2s->hdmatx->XferM1CpltCallback = DMAEx_XferM1CpltCallback2;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000992:	4a2b      	ldr	r2, [pc, #172]	; (8000a40 <HAL_I2S_Transmit_DMAEx2+0x16c>)
 8000994:	645a      	str	r2, [r3, #68]	; 0x44

	/* Set the DMA error callback */
	hi2s->hdmatx->XferErrorCallback = DMAEx_XferErrorCallback;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800099a:	4a2a      	ldr	r2, [pc, #168]	; (8000a44 <HAL_I2S_Transmit_DMAEx2+0x170>)
 800099c:	64da      	str	r2, [r3, #76]	; 0x4c

	/* Set the DMA abort callback */
	hi2s->hdmatx->XferAbortCallback = NULL;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009a2:	2200      	movs	r2, #0
 80009a4:	651a      	str	r2, [r3, #80]	; 0x50

	/* Enable the Tx DMA Stream/Channel */
	if (HAL_OK
			!= HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx,
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80009aa:	68b9      	ldr	r1, [r7, #8]
					(uint32_t) FirstBuffer, (uint32_t) &hi2s->Instance->DR,
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	330c      	adds	r3, #12
			!= HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx,
 80009b2:	461c      	mov	r4, r3
 80009b4:	687a      	ldr	r2, [r7, #4]
					(uint32_t) SecondBuffer, hi2s->TxXferSize)) {
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80009ba:	b29b      	uxth	r3, r3
			!= HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx,
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	4613      	mov	r3, r2
 80009c0:	4622      	mov	r2, r4
 80009c2:	f001 fc69 	bl	8002298 <HAL_DMAEx_MultiBufferStart_IT>
 80009c6:	4603      	mov	r3, r0
	if (HAL_OK
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d00f      	beq.n	80009ec <HAL_I2S_Transmit_DMAEx2+0x118>
		/* Update SPI error code */
		SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d0:	f043 0208 	orr.w	r2, r3, #8
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	645a      	str	r2, [r3, #68]	; 0x44
		hi2s->State = HAL_I2S_STATE_READY;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	2201      	movs	r2, #1
 80009dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		__HAL_UNLOCK(hi2s);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2200      	movs	r2, #0
 80009e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	e022      	b.n	8000a32 <HAL_I2S_Transmit_DMAEx2+0x15e>
	}

	/* Check if the I2S is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE)) {
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d107      	bne.n	8000a0a <HAL_I2S_Transmit_DMAEx2+0x136>
		/* Enable I2S peripheral */
		__HAL_I2S_ENABLE(hi2s);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	69da      	ldr	r2, [r3, #28]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a08:	61da      	str	r2, [r3, #28]
	}

	/* Check if the I2S Tx request is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN)) {
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f003 0302 	and.w	r3, r3, #2
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d107      	bne.n	8000a28 <HAL_I2S_Transmit_DMAEx2+0x154>
		/* Enable Tx DMA Request */
		SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	685a      	ldr	r2, [r3, #4]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f042 0202 	orr.w	r2, r2, #2
 8000a26:	605a      	str	r2, [r3, #4]
	}

	__HAL_UNLOCK(hi2s);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	return HAL_OK;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	371c      	adds	r7, #28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd90      	pop	{r4, r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	08000711 	.word	0x08000711
 8000a40:	08000739 	.word	0x08000739
 8000a44:	08000a99 	.word	0x08000a99

08000a48 <DMAEx_XferCpltCallback>:





static void DMAEx_XferCpltCallback(struct __DMA_HandleTypeDef *hdma) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	//if (DMA1_Stream3->CR & (1 << 19)) {
	//if(DMA1_Stream4->CR&(1<<19)){
	if (WAV_FileRead2((uint8_t*) I2S_Buf0, sizeof(I2S_Buf0)) == 0) {
 8000a50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <DMAEx_XferCpltCallback+0x24>)
 8000a56:	f7ff fdcd 	bl	80005f4 <WAV_FileRead2>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d101      	bne.n	8000a64 <DMAEx_XferCpltCallback+0x1c>
		Audio_Player_Stop();
 8000a60:	f000 f898 	bl	8000b94 <Audio_Player_Stop>
	}

	//}

}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200000d0 	.word	0x200000d0

08000a70 <DMAEx_XferM1CpltCallback>:

static void DMAEx_XferM1CpltCallback(struct __DMA_HandleTypeDef *hdma) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

	if (WAV_FileRead2((uint8_t*) I2S_Buf1, sizeof(I2S_Buf1)) == 0) {
 8000a78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <DMAEx_XferM1CpltCallback+0x24>)
 8000a7e:	f7ff fdb9 	bl	80005f4 <WAV_FileRead2>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d101      	bne.n	8000a8c <DMAEx_XferM1CpltCallback+0x1c>
		Audio_Player_Stop();
 8000a88:	f000 f884 	bl	8000b94 <Audio_Player_Stop>
	}

}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200008d0 	.word	0x200008d0

08000a98 <DMAEx_XferErrorCallback>:

static void DMAEx_XferErrorCallback(struct __DMA_HandleTypeDef *hdma) {
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]

}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <Audio_Player_Init>:

void Audio_Player_Init(I2C_HandleTypeDef*hi2c) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]

	WM8978_Register_Wirter(hi2c,0, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff fd55 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,1,0X1B);	//R1,MICEN脡猫脰脙脦陋1(MIC脢鹿脛脺),BIASEN脡猫脰脙脦陋1(脛拢脛芒脝梅鹿陇脳梅),VMIDSEL[1:0]脡猫脰脙脦陋:11(5K)
 8000abe:	221b      	movs	r2, #27
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff fd50 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,2,0X1B0);	//R2,ROUT1,LOUT1脢盲鲁枚脢鹿脛脺(露煤禄煤驴脡脪脭鹿陇脳梅),BOOSTENR,BOOSTENL脢鹿脛脺
 8000ac8:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8000acc:	2102      	movs	r1, #2
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff fd4a 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,3,0X6C);	//R3,LOUT2,ROUT2脢盲鲁枚脢鹿脛脺(脌庐掳脠鹿陇脳梅),RMIX,LMIX脢鹿脛脺
 8000ad4:	226c      	movs	r2, #108	; 0x6c
 8000ad6:	2103      	movs	r1, #3
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff fd45 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,3, 0x7F);
 8000ade:	227f      	movs	r2, #127	; 0x7f
 8000ae0:	2103      	movs	r1, #3
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff fd40 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,4, 0x10);
 8000ae8:	2210      	movs	r2, #16
 8000aea:	2104      	movs	r1, #4
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff fd3b 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,6,0);		//R6,MCLK脫脡脥芒虏驴脤谩鹿漏
 8000af2:	2200      	movs	r2, #0
 8000af4:	2106      	movs	r1, #6
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff fd36 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,43,1<<4);	//R43,INVROUT2路麓脧貌,脟媒露炉脌庐掳脠
 8000afc:	2210      	movs	r2, #16
 8000afe:	212b      	movs	r1, #43	; 0x2b
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff fd31 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,47,1<<8);	//R47脡猫脰脙,PGABOOSTL,脳贸脥篓碌脌MIC禄帽碌脙20卤露脭枚脪忙
 8000b06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b0a:	212f      	movs	r1, #47	; 0x2f
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff fd2b 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,48,1<<8);	//R48脡猫脰脙,PGABOOSTR,脫脪脥篓碌脌MIC禄帽碌脙20卤露脭枚脪忙
 8000b12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b16:	2130      	movs	r1, #48	; 0x30
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff fd25 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,49,1<<1);	//R49,TSDEN,驴陋脝么鹿媒脠脠卤拢禄陇
 8000b1e:	2202      	movs	r2, #2
 8000b20:	2131      	movs	r1, #49	; 0x31
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff fd20 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,10,1<<3);	//R10,SOFTMUTE鹿脴卤脮,128x虏脡脩霉,脳卯录脩SNR
 8000b28:	2208      	movs	r2, #8
 8000b2a:	210a      	movs	r1, #10
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff fd1b 	bl	8000568 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(hi2c,14,1<<3);	//R14,AD
 8000b32:	2208      	movs	r2, #8
 8000b34:	210e      	movs	r1, #14
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff fd16 	bl	8000568 <WM8978_Register_Wirter>

}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <Audio_Player_Start>:



void Audio_Player_Start() {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	WAV_FileRead3((uint8_t*) I2S_Buf2, sizeof(I2S_Buf0));
 8000b48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b4c:	480b      	ldr	r0, [pc, #44]	; (8000b7c <Audio_Player_Start+0x38>)
 8000b4e:	f7ff fd8f 	bl	8000670 <WAV_FileRead3>
	WAV_FileRead3((uint8_t*) I2S_Buf3, sizeof(I2S_Buf1));
 8000b52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b56:	480a      	ldr	r0, [pc, #40]	; (8000b80 <Audio_Player_Start+0x3c>)
 8000b58:	f7ff fd8a 	bl	8000670 <WAV_FileRead3>
	HAL_I2S_Transmit_DMAEx(&USEI2S, I2S_Buf0, I2S_Buf1, BUFFER_SIZE);
 8000b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b60:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <Audio_Player_Start+0x40>)
 8000b62:	4909      	ldr	r1, [pc, #36]	; (8000b88 <Audio_Player_Start+0x44>)
 8000b64:	4809      	ldr	r0, [pc, #36]	; (8000b8c <Audio_Player_Start+0x48>)
 8000b66:	f7ff fdfb 	bl	8000760 <HAL_I2S_Transmit_DMAEx>

	HAL_I2S_Transmit_DMAEx2(&hi2s2, I2S_Buf2, I2S_Buf3, BUFFER_SIZE);
 8000b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b6e:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <Audio_Player_Start+0x3c>)
 8000b70:	4902      	ldr	r1, [pc, #8]	; (8000b7c <Audio_Player_Start+0x38>)
 8000b72:	4807      	ldr	r0, [pc, #28]	; (8000b90 <Audio_Player_Start+0x4c>)
 8000b74:	f7ff feae 	bl	80008d4 <HAL_I2S_Transmit_DMAEx2>

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200010d0 	.word	0x200010d0
 8000b80:	200018d0 	.word	0x200018d0
 8000b84:	200008d0 	.word	0x200008d0
 8000b88:	200000d0 	.word	0x200000d0
 8000b8c:	20005550 	.word	0x20005550
 8000b90:	20005508 	.word	0x20005508

08000b94 <Audio_Player_Stop>:

void Audio_Player_Resume(void) {
	HAL_I2S_DMAResume(&USEI2S);
}

void Audio_Player_Stop(void) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	WAV_FileInit();
 8000b98:	f7ff fd16 	bl	80005c8 <WAV_FileInit>
	HAL_I2S_DMAStop(&USEI2S);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <Audio_Player_Stop+0x14>)
 8000b9e:	f006 fb2d 	bl	80071fc <HAL_I2S_DMAStop>
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20005550 	.word	0x20005550

08000bac <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart5, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000bb4:	1d39      	adds	r1, r7, #4
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <__io_putchar+0x20>)
 8000bbe:	f007 fe90 	bl	80088e2 <HAL_UART_Transmit>
  return ch;
 8000bc2:	687b      	ldr	r3, [r7, #4]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20004430 	.word	0x20004430

08000bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd4:	f000 fe5e 	bl	8001894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd8:	f000 f876 	bl	8000cc8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000bdc:	f000 f8de 	bl	8000d9c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be0:	f000 fa02 	bl	8000fe8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000be4:	f000 f9d8 	bl	8000f98 <MX_DMA_Init>
  MX_I2S3_Init();
 8000be8:	f000 f97e 	bl	8000ee8 <MX_I2S3_Init>
  MX_I2C1_Init();
 8000bec:	f000 f8f2 	bl	8000dd4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000bf0:	f000 f91e 	bl	8000e30 <MX_I2C2_Init>
  MX_I2S2_Init();
 8000bf4:	f000 f94a 	bl	8000e8c <MX_I2S2_Init>
  MX_FATFS_Init();
 8000bf8:	f009 f8f4 	bl	8009de4 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000bfc:	f019 fa40 	bl	801a080 <MX_USB_HOST_Init>
  MX_UART5_Init();
 8000c00:	f000 f9a0 	bl	8000f44 <MX_UART5_Init>
  MX_LWIP_Init();
 8000c04:	f009 fa3e 	bl	800a084 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  Audio_Player_Init(&hi2c1);
 8000c08:	4823      	ldr	r0, [pc, #140]	; (8000c98 <main+0xc8>)
 8000c0a:	f7ff ff4f 	bl	8000aac <Audio_Player_Init>
  Audio_Player_Init(&hi2c2);
 8000c0e:	4823      	ldr	r0, [pc, #140]	; (8000c9c <main+0xcc>)
 8000c10:	f7ff ff4c 	bl	8000aac <Audio_Player_Init>
  //ETX_MSC_ProcessUsbDevice();

  while( Appli_state !=APPLICATION_READY){
 8000c14:	e001      	b.n	8000c1a <main+0x4a>
	    MX_USB_HOST_Process();
 8000c16:	f019 fa59 	bl	801a0cc <MX_USB_HOST_Process>
  while( Appli_state !=APPLICATION_READY){
 8000c1a:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <main+0xd0>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d1f9      	bne.n	8000c16 <main+0x46>
  }
  res = f_mount( &UsbDiskFatFs, (TCHAR const*)UsbDiskPath, 0 );
 8000c22:	2200      	movs	r2, #0
 8000c24:	491f      	ldr	r1, [pc, #124]	; (8000ca4 <main+0xd4>)
 8000c26:	4820      	ldr	r0, [pc, #128]	; (8000ca8 <main+0xd8>)
 8000c28:	f00e ff34 	bl	800fa94 <f_mount>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <main+0xdc>)
 8000c32:	701a      	strb	r2, [r3, #0]

  printf("mount %d\n",res);
 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <main+0xdc>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	481d      	ldr	r0, [pc, #116]	; (8000cb0 <main+0xe0>)
 8000c3c:	f019 fe34 	bl	801a8a8 <iprintf>
  res = f_open( &file, file_name, FA_READ );
 8000c40:	2201      	movs	r2, #1
 8000c42:	491c      	ldr	r1, [pc, #112]	; (8000cb4 <main+0xe4>)
 8000c44:	481c      	ldr	r0, [pc, #112]	; (8000cb8 <main+0xe8>)
 8000c46:	f00e ff6b 	bl	800fb20 <f_open>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <main+0xdc>)
 8000c50:	701a      	strb	r2, [r3, #0]


  f_lseek(&file,44);
 8000c52:	212c      	movs	r1, #44	; 0x2c
 8000c54:	4818      	ldr	r0, [pc, #96]	; (8000cb8 <main+0xe8>)
 8000c56:	f00f fb36 	bl	80102c6 <f_lseek>
  printf("open %d\n",res);
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <main+0xdc>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4816      	ldr	r0, [pc, #88]	; (8000cbc <main+0xec>)
 8000c62:	f019 fe21 	bl	801a8a8 <iprintf>
  res = f_open( &file2, file_name2, FA_READ );
 8000c66:	2201      	movs	r2, #1
 8000c68:	4915      	ldr	r1, [pc, #84]	; (8000cc0 <main+0xf0>)
 8000c6a:	4816      	ldr	r0, [pc, #88]	; (8000cc4 <main+0xf4>)
 8000c6c:	f00e ff58 	bl	800fb20 <f_open>
 8000c70:	4603      	mov	r3, r0
 8000c72:	461a      	mov	r2, r3
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <main+0xdc>)
 8000c76:	701a      	strb	r2, [r3, #0]
  f_lseek(&file2,44);
 8000c78:	212c      	movs	r1, #44	; 0x2c
 8000c7a:	4812      	ldr	r0, [pc, #72]	; (8000cc4 <main+0xf4>)
 8000c7c:	f00f fb23 	bl	80102c6 <f_lseek>

  printf("open %d\n",res);
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <main+0xdc>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	480d      	ldr	r0, [pc, #52]	; (8000cbc <main+0xec>)
 8000c88:	f019 fe0e 	bl	801a8a8 <iprintf>
  Audio_Player_Start();
 8000c8c:	f7ff ff5a 	bl	8000b44 <Audio_Player_Start>
  {
    /* USER CODE END WHILE */
   // MX_USB_HOST_Process();

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 8000c90:	f009 fb2a 	bl	800a2e8 <MX_LWIP_Process>
 8000c94:	e7fc      	b.n	8000c90 <main+0xc0>
 8000c96:	bf00      	nop
 8000c98:	20004324 	.word	0x20004324
 8000c9c:	20004378 	.word	0x20004378
 8000ca0:	200032b6 	.word	0x200032b6
 8000ca4:	2000310c 	.word	0x2000310c
 8000ca8:	200020d8 	.word	0x200020d8
 8000cac:	200054a4 	.word	0x200054a4
 8000cb0:	0801b858 	.word	0x0801b858
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	20004474 	.word	0x20004474
 8000cbc:	0801b864 	.word	0x0801b864
 8000cc0:	2000000c 	.word	0x2000000c
 8000cc4:	200032f0 	.word	0x200032f0

08000cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b094      	sub	sp, #80	; 0x50
 8000ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cce:	f107 0320 	add.w	r3, r7, #32
 8000cd2:	2230      	movs	r2, #48	; 0x30
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f019 fd34 	bl	801a744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	4b28      	ldr	r3, [pc, #160]	; (8000d94 <SystemClock_Config+0xcc>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <SystemClock_Config+0xcc>)
 8000cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfc:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <SystemClock_Config+0xcc>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d08:	2300      	movs	r3, #0
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <SystemClock_Config+0xd0>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a21      	ldr	r2, [pc, #132]	; (8000d98 <SystemClock_Config+0xd0>)
 8000d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <SystemClock_Config+0xd0>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d24:	2301      	movs	r3, #1
 8000d26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d3c:	23a8      	movs	r3, #168	; 0xa8
 8000d3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d40:	2302      	movs	r3, #2
 8000d42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d44:	2307      	movs	r3, #7
 8000d46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d48:	f107 0320 	add.w	r3, r7, #32
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f006 ffc7 	bl	8007ce0 <HAL_RCC_OscConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d58:	f000 f9b4 	bl	80010c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d60:	2302      	movs	r3, #2
 8000d62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	2105      	movs	r1, #5
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f007 fa28 	bl	80081d0 <HAL_RCC_ClockConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d86:	f000 f99d 	bl	80010c4 <Error_Handler>
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	3750      	adds	r7, #80	; 0x50
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40007000 	.word	0x40007000

08000d9c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da2:	463b      	mov	r3, r7
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000dae:	2301      	movs	r3, #1
 8000db0:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000db2:	23c0      	movs	r3, #192	; 0xc0
 8000db4:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000db6:	2302      	movs	r3, #2
 8000db8:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dba:	463b      	mov	r3, r7
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f007 fc03 	bl	80085c8 <HAL_RCCEx_PeriphCLKConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000dc8:	f000 f97c 	bl	80010c4 <Error_Handler>
  }
}
 8000dcc:	bf00      	nop
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000dda:	4a13      	ldr	r2, [pc, #76]	; (8000e28 <MX_I2C1_Init+0x54>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000de0:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <MX_I2C1_Init+0x58>)
 8000de2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000df2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000df6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000df8:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e10:	4804      	ldr	r0, [pc, #16]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000e12:	f005 fc67 	bl	80066e4 <HAL_I2C_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e1c:	f000 f952 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20004324 	.word	0x20004324
 8000e28:	40005400 	.word	0x40005400
 8000e2c:	000186a0 	.word	0x000186a0

08000e30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <MX_I2C2_Init+0x50>)
 8000e36:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <MX_I2C2_Init+0x54>)
 8000e38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_I2C2_Init+0x50>)
 8000e3c:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <MX_I2C2_Init+0x58>)
 8000e3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <MX_I2C2_Init+0x50>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_I2C2_Init+0x50>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_I2C2_Init+0x50>)
 8000e4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e52:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <MX_I2C2_Init+0x50>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_I2C2_Init+0x50>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <MX_I2C2_Init+0x50>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_I2C2_Init+0x50>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e6c:	4804      	ldr	r0, [pc, #16]	; (8000e80 <MX_I2C2_Init+0x50>)
 8000e6e:	f005 fc39 	bl	80066e4 <HAL_I2C_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e78:	f000 f924 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20004378 	.word	0x20004378
 8000e84:	40005800 	.word	0x40005800
 8000e88:	000186a0 	.word	0x000186a0

08000e8c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <MX_I2S2_Init+0x54>)
 8000e92:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <MX_I2S2_Init+0x58>)
 8000e94:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000e96:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_I2S2_Init+0x54>)
 8000e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e9c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <MX_I2S2_Init+0x54>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_I2S2_Init+0x54>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <MX_I2S2_Init+0x54>)
 8000eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb0:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <MX_I2S2_Init+0x54>)
 8000eb4:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000eb8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_I2S2_Init+0x54>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <MX_I2S2_Init+0x54>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_I2S2_Init+0x54>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000ecc:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <MX_I2S2_Init+0x54>)
 8000ece:	f006 f855 	bl	8006f7c <HAL_I2S_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000ed8:	f000 f8f4 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20005508 	.word	0x20005508
 8000ee4:	40003800 	.word	0x40003800

08000ee8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <MX_I2S3_Init+0x54>)
 8000eee:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <MX_I2S3_Init+0x58>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000ef2:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <MX_I2S3_Init+0x54>)
 8000ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <MX_I2S3_Init+0x54>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_I2S3_Init+0x54>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <MX_I2S3_Init+0x54>)
 8000f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f0c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <MX_I2S3_Init+0x54>)
 8000f10:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000f14:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_I2S3_Init+0x54>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <MX_I2S3_Init+0x54>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_I2S3_Init+0x54>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <MX_I2S3_Init+0x54>)
 8000f2a:	f006 f827 	bl	8006f7c <HAL_I2S_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000f34:	f000 f8c6 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20005550 	.word	0x20005550
 8000f40:	40003c00 	.word	0x40003c00

08000f44 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_UART5_Init+0x4c>)
 8000f4a:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <MX_UART5_Init+0x50>)
 8000f4c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <MX_UART5_Init+0x4c>)
 8000f50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f54:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_UART5_Init+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_UART5_Init+0x4c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <MX_UART5_Init+0x4c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_UART5_Init+0x4c>)
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <MX_UART5_Init+0x4c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_UART5_Init+0x4c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_UART5_Init+0x4c>)
 8000f7c:	f007 fc64 	bl	8008848 <HAL_UART_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000f86:	f000 f89d 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20004430 	.word	0x20004430
 8000f94:	40005000 	.word	0x40005000

08000f98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <MX_DMA_Init+0x4c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a0f      	ldr	r2, [pc, #60]	; (8000fe4 <MX_DMA_Init+0x4c>)
 8000fa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <MX_DMA_Init+0x4c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 2, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	200f      	movs	r0, #15
 8000fc0:	f000 fdd9 	bl	8001b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000fc4:	200f      	movs	r0, #15
 8000fc6:	f000 fdf2 	bl	8001bae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 2, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2102      	movs	r1, #2
 8000fce:	2010      	movs	r0, #16
 8000fd0:	f000 fdd1 	bl	8001b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000fd4:	2010      	movs	r0, #16
 8000fd6:	f000 fdea 	bl	8001bae <HAL_NVIC_EnableIRQ>

}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800

08000fe8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
 8000ff2:	4b33      	ldr	r3, [pc, #204]	; (80010c0 <MX_GPIO_Init+0xd8>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a32      	ldr	r2, [pc, #200]	; (80010c0 <MX_GPIO_Init+0xd8>)
 8000ff8:	f043 0320 	orr.w	r3, r3, #32
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <MX_GPIO_Init+0xd8>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0320 	and.w	r3, r3, #32
 8001006:	61fb      	str	r3, [r7, #28]
 8001008:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
 800100e:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <MX_GPIO_Init+0xd8>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a2b      	ldr	r2, [pc, #172]	; (80010c0 <MX_GPIO_Init+0xd8>)
 8001014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b29      	ldr	r3, [pc, #164]	; (80010c0 <MX_GPIO_Init+0xd8>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001022:	61bb      	str	r3, [r7, #24]
 8001024:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <MX_GPIO_Init+0xd8>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a24      	ldr	r2, [pc, #144]	; (80010c0 <MX_GPIO_Init+0xd8>)
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <MX_GPIO_Init+0xd8>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <MX_GPIO_Init+0xd8>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a1d      	ldr	r2, [pc, #116]	; (80010c0 <MX_GPIO_Init+0xd8>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <MX_GPIO_Init+0xd8>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <MX_GPIO_Init+0xd8>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <MX_GPIO_Init+0xd8>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_GPIO_Init+0xd8>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <MX_GPIO_Init+0xd8>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a0f      	ldr	r2, [pc, #60]	; (80010c0 <MX_GPIO_Init+0xd8>)
 8001084:	f043 0308 	orr.w	r3, r3, #8
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <MX_GPIO_Init+0xd8>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_GPIO_Init+0xd8>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <MX_GPIO_Init+0xd8>)
 80010a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_GPIO_Init+0xd8>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]

}
 80010b2:	bf00      	nop
 80010b4:	3724      	adds	r7, #36	; 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800

080010c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c8:	b672      	cpsid	i
}
 80010ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010cc:	e7fe      	b.n	80010cc <Error_Handler+0x8>
	...

080010d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <HAL_MspInit+0x4c>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a0f      	ldr	r2, [pc, #60]	; (800111c <HAL_MspInit+0x4c>)
 80010e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <HAL_MspInit+0x4c>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_MspInit+0x4c>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a08      	ldr	r2, [pc, #32]	; (800111c <HAL_MspInit+0x4c>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_MspInit+0x4c>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800

08001120 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	; 0x30
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 031c 	add.w	r3, r7, #28
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a32      	ldr	r2, [pc, #200]	; (8001208 <HAL_I2C_MspInit+0xe8>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d12c      	bne.n	800119c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	4b31      	ldr	r3, [pc, #196]	; (800120c <HAL_I2C_MspInit+0xec>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a30      	ldr	r2, [pc, #192]	; (800120c <HAL_I2C_MspInit+0xec>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b2e      	ldr	r3, [pc, #184]	; (800120c <HAL_I2C_MspInit+0xec>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	61bb      	str	r3, [r7, #24]
 800115c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800115e:	23c0      	movs	r3, #192	; 0xc0
 8001160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001162:	2312      	movs	r3, #18
 8001164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001166:	2301      	movs	r3, #1
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800116e:	2304      	movs	r3, #4
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	4619      	mov	r1, r3
 8001178:	4825      	ldr	r0, [pc, #148]	; (8001210 <HAL_I2C_MspInit+0xf0>)
 800117a:	f003 fba7 	bl	80048cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <HAL_I2C_MspInit+0xec>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	4a21      	ldr	r2, [pc, #132]	; (800120c <HAL_I2C_MspInit+0xec>)
 8001188:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800118c:	6413      	str	r3, [r2, #64]	; 0x40
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <HAL_I2C_MspInit+0xec>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800119a:	e030      	b.n	80011fe <HAL_I2C_MspInit+0xde>
  else if(hi2c->Instance==I2C2)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <HAL_I2C_MspInit+0xf4>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d12b      	bne.n	80011fe <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_I2C_MspInit+0xec>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a17      	ldr	r2, [pc, #92]	; (800120c <HAL_I2C_MspInit+0xec>)
 80011b0:	f043 0320 	orr.w	r3, r3, #32
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_I2C_MspInit+0xec>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0320 	and.w	r3, r3, #32
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011c2:	2303      	movs	r3, #3
 80011c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c6:	2312      	movs	r3, #18
 80011c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ce:	2303      	movs	r3, #3
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011d2:	2304      	movs	r3, #4
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	480e      	ldr	r0, [pc, #56]	; (8001218 <HAL_I2C_MspInit+0xf8>)
 80011de:	f003 fb75 	bl	80048cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_I2C_MspInit+0xec>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <HAL_I2C_MspInit+0xec>)
 80011ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f0:	6413      	str	r3, [r2, #64]	; 0x40
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_I2C_MspInit+0xec>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
}
 80011fe:	bf00      	nop
 8001200:	3730      	adds	r7, #48	; 0x30
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40005400 	.word	0x40005400
 800120c:	40023800 	.word	0x40023800
 8001210:	40020400 	.word	0x40020400
 8001214:	40005800 	.word	0x40005800
 8001218:	40021400 	.word	0x40021400

0800121c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08e      	sub	sp, #56	; 0x38
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a4b      	ldr	r2, [pc, #300]	; (8001368 <HAL_I2S_MspInit+0x14c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	f040 80a0 	bne.w	8001380 <HAL_I2S_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
 8001244:	4b49      	ldr	r3, [pc, #292]	; (800136c <HAL_I2S_MspInit+0x150>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	4a48      	ldr	r2, [pc, #288]	; (800136c <HAL_I2S_MspInit+0x150>)
 800124a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124e:	6413      	str	r3, [r2, #64]	; 0x40
 8001250:	4b46      	ldr	r3, [pc, #280]	; (800136c <HAL_I2S_MspInit+0x150>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001258:	623b      	str	r3, [r7, #32]
 800125a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	4b42      	ldr	r3, [pc, #264]	; (800136c <HAL_I2S_MspInit+0x150>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	4a41      	ldr	r2, [pc, #260]	; (800136c <HAL_I2S_MspInit+0x150>)
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	6313      	str	r3, [r2, #48]	; 0x30
 800126c:	4b3f      	ldr	r3, [pc, #252]	; (800136c <HAL_I2S_MspInit+0x150>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]
 800127c:	4b3b      	ldr	r3, [pc, #236]	; (800136c <HAL_I2S_MspInit+0x150>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	4a3a      	ldr	r2, [pc, #232]	; (800136c <HAL_I2S_MspInit+0x150>)
 8001282:	f043 0302 	orr.w	r3, r3, #2
 8001286:	6313      	str	r3, [r2, #48]	; 0x30
 8001288:	4b38      	ldr	r3, [pc, #224]	; (800136c <HAL_I2S_MspInit+0x150>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	61bb      	str	r3, [r7, #24]
 8001292:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001294:	2304      	movs	r3, #4
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80012a4:	2306      	movs	r3, #6
 80012a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ac:	4619      	mov	r1, r3
 80012ae:	4830      	ldr	r0, [pc, #192]	; (8001370 <HAL_I2S_MspInit+0x154>)
 80012b0:	f003 fb0c 	bl	80048cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80012b4:	2348      	movs	r3, #72	; 0x48
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012c4:	2305      	movs	r3, #5
 80012c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012cc:	4619      	mov	r1, r3
 80012ce:	4828      	ldr	r0, [pc, #160]	; (8001370 <HAL_I2S_MspInit+0x154>)
 80012d0:	f003 fafc 	bl	80048cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80012d4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012e6:	2305      	movs	r3, #5
 80012e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ee:	4619      	mov	r1, r3
 80012f0:	4820      	ldr	r0, [pc, #128]	; (8001374 <HAL_I2S_MspInit+0x158>)
 80012f2:	f003 faeb 	bl	80048cc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <HAL_I2S_MspInit+0x15c>)
 80012f8:	4a20      	ldr	r2, [pc, #128]	; (800137c <HAL_I2S_MspInit+0x160>)
 80012fa:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80012fc:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <HAL_I2S_MspInit+0x15c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001302:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <HAL_I2S_MspInit+0x15c>)
 8001304:	2240      	movs	r2, #64	; 0x40
 8001306:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_I2S_MspInit+0x15c>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800130e:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <HAL_I2S_MspInit+0x15c>)
 8001310:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001314:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <HAL_I2S_MspInit+0x15c>)
 8001318:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800131c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <HAL_I2S_MspInit+0x15c>)
 8001320:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001324:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <HAL_I2S_MspInit+0x15c>)
 8001328:	2200      	movs	r2, #0
 800132a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_I2S_MspInit+0x15c>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_I2S_MspInit+0x15c>)
 8001334:	2204      	movs	r2, #4
 8001336:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_I2S_MspInit+0x15c>)
 800133a:	2203      	movs	r2, #3
 800133c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <HAL_I2S_MspInit+0x15c>)
 8001340:	2200      	movs	r2, #0
 8001342:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_I2S_MspInit+0x15c>)
 8001346:	2200      	movs	r2, #0
 8001348:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800134a:	480b      	ldr	r0, [pc, #44]	; (8001378 <HAL_I2S_MspInit+0x15c>)
 800134c:	f000 fc4a 	bl	8001be4 <HAL_DMA_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 8001356:	f7ff feb5 	bl	80010c4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a06      	ldr	r2, [pc, #24]	; (8001378 <HAL_I2S_MspInit+0x15c>)
 800135e:	639a      	str	r2, [r3, #56]	; 0x38
 8001360:	4a05      	ldr	r2, [pc, #20]	; (8001378 <HAL_I2S_MspInit+0x15c>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001366:	e0c2      	b.n	80014ee <HAL_I2S_MspInit+0x2d2>
 8001368:	40003800 	.word	0x40003800
 800136c:	40023800 	.word	0x40023800
 8001370:	40020800 	.word	0x40020800
 8001374:	40020400 	.word	0x40020400
 8001378:	200054a8 	.word	0x200054a8
 800137c:	40026070 	.word	0x40026070
  else if(hi2s->Instance==SPI3)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a5c      	ldr	r2, [pc, #368]	; (80014f8 <HAL_I2S_MspInit+0x2dc>)
 8001386:	4293      	cmp	r3, r2
 8001388:	f040 80b1 	bne.w	80014ee <HAL_I2S_MspInit+0x2d2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	4b5a      	ldr	r3, [pc, #360]	; (80014fc <HAL_I2S_MspInit+0x2e0>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	4a59      	ldr	r2, [pc, #356]	; (80014fc <HAL_I2S_MspInit+0x2e0>)
 8001396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800139a:	6413      	str	r3, [r2, #64]	; 0x40
 800139c:	4b57      	ldr	r3, [pc, #348]	; (80014fc <HAL_I2S_MspInit+0x2e0>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	4b53      	ldr	r3, [pc, #332]	; (80014fc <HAL_I2S_MspInit+0x2e0>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	4a52      	ldr	r2, [pc, #328]	; (80014fc <HAL_I2S_MspInit+0x2e0>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6313      	str	r3, [r2, #48]	; 0x30
 80013b8:	4b50      	ldr	r3, [pc, #320]	; (80014fc <HAL_I2S_MspInit+0x2e0>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	4b4c      	ldr	r3, [pc, #304]	; (80014fc <HAL_I2S_MspInit+0x2e0>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	4a4b      	ldr	r2, [pc, #300]	; (80014fc <HAL_I2S_MspInit+0x2e0>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	6313      	str	r3, [r2, #48]	; 0x30
 80013d4:	4b49      	ldr	r3, [pc, #292]	; (80014fc <HAL_I2S_MspInit+0x2e0>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	4b45      	ldr	r3, [pc, #276]	; (80014fc <HAL_I2S_MspInit+0x2e0>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	4a44      	ldr	r2, [pc, #272]	; (80014fc <HAL_I2S_MspInit+0x2e0>)
 80013ea:	f043 0302 	orr.w	r3, r3, #2
 80013ee:	6313      	str	r3, [r2, #48]	; 0x30
 80013f0:	4b42      	ldr	r3, [pc, #264]	; (80014fc <HAL_I2S_MspInit+0x2e0>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013fc:	2310      	movs	r3, #16
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800140c:	2306      	movs	r3, #6
 800140e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001414:	4619      	mov	r1, r3
 8001416:	483a      	ldr	r0, [pc, #232]	; (8001500 <HAL_I2S_MspInit+0x2e4>)
 8001418:	f003 fa58 	bl	80048cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800142c:	2306      	movs	r3, #6
 800142e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001434:	4619      	mov	r1, r3
 8001436:	4833      	ldr	r0, [pc, #204]	; (8001504 <HAL_I2S_MspInit+0x2e8>)
 8001438:	f003 fa48 	bl	80048cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800143c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 800144e:	2305      	movs	r3, #5
 8001450:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001456:	4619      	mov	r1, r3
 8001458:	482a      	ldr	r0, [pc, #168]	; (8001504 <HAL_I2S_MspInit+0x2e8>)
 800145a:	f003 fa37 	bl	80048cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800145e:	2328      	movs	r3, #40	; 0x28
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800146e:	2306      	movs	r3, #6
 8001470:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001476:	4619      	mov	r1, r3
 8001478:	4823      	ldr	r0, [pc, #140]	; (8001508 <HAL_I2S_MspInit+0x2ec>)
 800147a:	f003 fa27 	bl	80048cc <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800147e:	4b23      	ldr	r3, [pc, #140]	; (800150c <HAL_I2S_MspInit+0x2f0>)
 8001480:	4a23      	ldr	r2, [pc, #140]	; (8001510 <HAL_I2S_MspInit+0x2f4>)
 8001482:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001484:	4b21      	ldr	r3, [pc, #132]	; (800150c <HAL_I2S_MspInit+0x2f0>)
 8001486:	2200      	movs	r2, #0
 8001488:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <HAL_I2S_MspInit+0x2f0>)
 800148c:	2240      	movs	r2, #64	; 0x40
 800148e:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <HAL_I2S_MspInit+0x2f0>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001496:	4b1d      	ldr	r3, [pc, #116]	; (800150c <HAL_I2S_MspInit+0x2f0>)
 8001498:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800149c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800149e:	4b1b      	ldr	r3, [pc, #108]	; (800150c <HAL_I2S_MspInit+0x2f0>)
 80014a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014a4:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <HAL_I2S_MspInit+0x2f0>)
 80014a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ac:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_I2S_MspInit+0x2f0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_I2S_MspInit+0x2f0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014ba:	4b14      	ldr	r3, [pc, #80]	; (800150c <HAL_I2S_MspInit+0x2f0>)
 80014bc:	2204      	movs	r2, #4
 80014be:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_I2S_MspInit+0x2f0>)
 80014c2:	2203      	movs	r2, #3
 80014c4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_I2S_MspInit+0x2f0>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <HAL_I2S_MspInit+0x2f0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80014d2:	480e      	ldr	r0, [pc, #56]	; (800150c <HAL_I2S_MspInit+0x2f0>)
 80014d4:	f000 fb86 	bl	8001be4 <HAL_DMA_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_I2S_MspInit+0x2c6>
      Error_Handler();
 80014de:	f7ff fdf1 	bl	80010c4 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a09      	ldr	r2, [pc, #36]	; (800150c <HAL_I2S_MspInit+0x2f0>)
 80014e6:	639a      	str	r2, [r3, #56]	; 0x38
 80014e8:	4a08      	ldr	r2, [pc, #32]	; (800150c <HAL_I2S_MspInit+0x2f0>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6393      	str	r3, [r2, #56]	; 0x38
}
 80014ee:	bf00      	nop
 80014f0:	3738      	adds	r7, #56	; 0x38
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40003c00 	.word	0x40003c00
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020000 	.word	0x40020000
 8001504:	40020800 	.word	0x40020800
 8001508:	40020400 	.word	0x40020400
 800150c:	200043d0 	.word	0x200043d0
 8001510:	40026088 	.word	0x40026088

08001514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a28      	ldr	r2, [pc, #160]	; (80015d4 <HAL_UART_MspInit+0xc0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d14a      	bne.n	80015cc <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <HAL_UART_MspInit+0xc4>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	4a26      	ldr	r2, [pc, #152]	; (80015d8 <HAL_UART_MspInit+0xc4>)
 8001540:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001544:	6413      	str	r3, [r2, #64]	; 0x40
 8001546:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <HAL_UART_MspInit+0xc4>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <HAL_UART_MspInit+0xc4>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a1f      	ldr	r2, [pc, #124]	; (80015d8 <HAL_UART_MspInit+0xc4>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <HAL_UART_MspInit+0xc4>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <HAL_UART_MspInit+0xc4>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a18      	ldr	r2, [pc, #96]	; (80015d8 <HAL_UART_MspInit+0xc4>)
 8001578:	f043 0308 	orr.w	r3, r3, #8
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <HAL_UART_MspInit+0xc4>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800158a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800159c:	2308      	movs	r3, #8
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	480d      	ldr	r0, [pc, #52]	; (80015dc <HAL_UART_MspInit+0xc8>)
 80015a8:	f003 f990 	bl	80048cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015ac:	2304      	movs	r3, #4
 80015ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80015bc:	2308      	movs	r3, #8
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	4806      	ldr	r0, [pc, #24]	; (80015e0 <HAL_UART_MspInit+0xcc>)
 80015c8:	f003 f980 	bl	80048cc <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80015cc:	bf00      	nop
 80015ce:	3728      	adds	r7, #40	; 0x28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40005000 	.word	0x40005000
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020800 	.word	0x40020800
 80015e0:	40020c00 	.word	0x40020c00

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <NMI_Handler+0x4>

080015ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <MemManage_Handler+0x4>

080015f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <UsageFault_Handler+0x4>

08001602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001630:	f000 f982 	bl	8001938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <DMA1_Stream4_IRQHandler+0x10>)
 800163e:	f000 fbef 	bl	8001e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200054a8 	.word	0x200054a8

0800164c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <DMA1_Stream5_IRQHandler+0x10>)
 8001652:	f000 fbe5 	bl	8001e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200043d0 	.word	0x200043d0

08001660 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <ETH_IRQHandler+0x10>)
 8001666:	f002 fb65 	bl	8003d34 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20008f24 	.word	0x20008f24

08001674 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <OTG_FS_IRQHandler+0x10>)
 800167a:	f003 fd2d 	bl	80050d8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000e074 	.word	0x2000e074

08001688 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
	return 1;
 800168c:	2301      	movs	r3, #1
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <_kill>:

int _kill(int pid, int sig)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <_kill+0x20>)
 80016a4:	2216      	movs	r2, #22
 80016a6:	601a      	str	r2, [r3, #0]
	return -1;
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	2000e378 	.word	0x2000e378

080016bc <_exit>:

void _exit (int status)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ffe5 	bl	8001698 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016ce:	e7fe      	b.n	80016ce <_exit+0x12>

080016d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	e00a      	b.n	80016f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016e2:	f3af 8000 	nop.w
 80016e6:	4601      	mov	r1, r0
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	1c5a      	adds	r2, r3, #1
 80016ec:	60ba      	str	r2, [r7, #8]
 80016ee:	b2ca      	uxtb	r2, r1
 80016f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3301      	adds	r3, #1
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	dbf0      	blt.n	80016e2 <_read+0x12>
	}

return len;
 8001700:	687b      	ldr	r3, [r7, #4]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	e009      	b.n	8001730 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	1c5a      	adds	r2, r3, #1
 8001720:	60ba      	str	r2, [r7, #8]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fa41 	bl	8000bac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	3301      	adds	r3, #1
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	429a      	cmp	r2, r3
 8001736:	dbf1      	blt.n	800171c <_write+0x12>
	}
	return len;
 8001738:	687b      	ldr	r3, [r7, #4]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <_close>:

int _close(int file)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
	return -1;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800176a:	605a      	str	r2, [r3, #4]
	return 0;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <_isatty>:

int _isatty(int file)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
	return 1;
 8001782:	2301      	movs	r3, #1
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
	return 0;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b087      	sub	sp, #28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b4:	4a14      	ldr	r2, [pc, #80]	; (8001808 <_sbrk+0x5c>)
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <_sbrk+0x60>)
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <_sbrk+0x64>)
 80017ca:	4a12      	ldr	r2, [pc, #72]	; (8001814 <_sbrk+0x68>)
 80017cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d205      	bcs.n	80017e8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80017dc:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <_sbrk+0x6c>)
 80017de:	220c      	movs	r2, #12
 80017e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
 80017e6:	e009      	b.n	80017fc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	4a06      	ldr	r2, [pc, #24]	; (8001810 <_sbrk+0x64>)
 80017f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fa:	68fb      	ldr	r3, [r7, #12]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	371c      	adds	r7, #28
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	20020000 	.word	0x20020000
 800180c:	00000400 	.word	0x00000400
 8001810:	20003110 	.word	0x20003110
 8001814:	2000e388 	.word	0x2000e388
 8001818:	2000e378 	.word	0x2000e378

0800181c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <SystemInit+0x20>)
 8001822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001826:	4a05      	ldr	r2, [pc, #20]	; (800183c <SystemInit+0x20>)
 8001828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800182c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001878 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001844:	480d      	ldr	r0, [pc, #52]	; (800187c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001846:	490e      	ldr	r1, [pc, #56]	; (8001880 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001848:	4a0e      	ldr	r2, [pc, #56]	; (8001884 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800184c:	e002      	b.n	8001854 <LoopCopyDataInit>

0800184e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001852:	3304      	adds	r3, #4

08001854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001858:	d3f9      	bcc.n	800184e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185a:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800185c:	4c0b      	ldr	r4, [pc, #44]	; (800188c <LoopFillZerobss+0x26>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001860:	e001      	b.n	8001866 <LoopFillZerobss>

08001862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001864:	3204      	adds	r2, #4

08001866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001868:	d3fb      	bcc.n	8001862 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800186a:	f7ff ffd7 	bl	800181c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800186e:	f018 ff19 	bl	801a6a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001872:	f7ff f9ad 	bl	8000bd0 <main>
  bx  lr    
 8001876:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001878:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800187c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001880:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001884:	08095494 	.word	0x08095494
  ldr r2, =_sbss
 8001888:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 800188c:	2000e388 	.word	0x2000e388

08001890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001890:	e7fe      	b.n	8001890 <ADC_IRQHandler>
	...

08001894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <HAL_Init+0x40>)
 800189e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_Init+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <HAL_Init+0x40>)
 80018aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_Init+0x40>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <HAL_Init+0x40>)
 80018b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018bc:	2003      	movs	r0, #3
 80018be:	f000 f94f 	bl	8001b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c2:	200f      	movs	r0, #15
 80018c4:	f000 f808 	bl	80018d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c8:	f7ff fc02 	bl	80010d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023c00 	.word	0x40023c00

080018d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_InitTick+0x54>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_InitTick+0x58>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4619      	mov	r1, r3
 80018ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 f967 	bl	8001bca <HAL_SYSTICK_Config>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e00e      	b.n	8001924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b0f      	cmp	r3, #15
 800190a:	d80a      	bhi.n	8001922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800190c:	2200      	movs	r2, #0
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f000 f92f 	bl	8001b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001918:	4a06      	ldr	r2, [pc, #24]	; (8001934 <HAL_InitTick+0x5c>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	e000      	b.n	8001924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000018 	.word	0x20000018
 8001930:	20000020 	.word	0x20000020
 8001934:	2000001c 	.word	0x2000001c

08001938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_IncTick+0x20>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_IncTick+0x24>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <HAL_IncTick+0x24>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000020 	.word	0x20000020
 800195c:	20005598 	.word	0x20005598

08001960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <HAL_GetTick+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20005598 	.word	0x20005598

08001978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001980:	f7ff ffee 	bl	8001960 <HAL_GetTick>
 8001984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001990:	d005      	beq.n	800199e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_Delay+0x44>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4413      	add	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800199e:	bf00      	nop
 80019a0:	f7ff ffde 	bl	8001960 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d8f7      	bhi.n	80019a0 <HAL_Delay+0x28>
  {
  }
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000020 	.word	0x20000020

080019c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f2:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60d3      	str	r3, [r2, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <__NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db0b      	blt.n	8001a4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	4907      	ldr	r1, [pc, #28]	; (8001a5c <__NVIC_EnableIRQ+0x38>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	2001      	movs	r0, #1
 8001a46:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	db0a      	blt.n	8001a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	490c      	ldr	r1, [pc, #48]	; (8001aac <__NVIC_SetPriority+0x4c>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a88:	e00a      	b.n	8001aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4908      	ldr	r1, [pc, #32]	; (8001ab0 <__NVIC_SetPriority+0x50>)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	3b04      	subs	r3, #4
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	761a      	strb	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f1c3 0307 	rsb	r3, r3, #7
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	bf28      	it	cs
 8001ad2:	2304      	movcs	r3, #4
 8001ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d902      	bls.n	8001ae4 <NVIC_EncodePriority+0x30>
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b03      	subs	r3, #3
 8001ae2:	e000      	b.n	8001ae6 <NVIC_EncodePriority+0x32>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	401a      	ands	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	4313      	orrs	r3, r2
         );
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b2c:	d301      	bcc.n	8001b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00f      	b.n	8001b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b32:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <SysTick_Config+0x40>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3a:	210f      	movs	r1, #15
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b40:	f7ff ff8e 	bl	8001a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <SysTick_Config+0x40>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4a:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <SysTick_Config+0x40>)
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	e000e010 	.word	0xe000e010

08001b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff29 	bl	80019c0 <__NVIC_SetPriorityGrouping>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b88:	f7ff ff3e 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	6978      	ldr	r0, [r7, #20]
 8001b94:	f7ff ff8e 	bl	8001ab4 <NVIC_EncodePriority>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff5d 	bl	8001a60 <__NVIC_SetPriority>
}
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff31 	bl	8001a24 <__NVIC_EnableIRQ>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ffa2 	bl	8001b1c <SysTick_Config>
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bf0:	f7ff feb6 	bl	8001960 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e099      	b.n	8001d34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0201 	bic.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c20:	e00f      	b.n	8001c42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c22:	f7ff fe9d 	bl	8001960 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	d908      	bls.n	8001c42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2220      	movs	r2, #32
 8001c34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2203      	movs	r2, #3
 8001c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e078      	b.n	8001d34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1e8      	bne.n	8001c22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <HAL_DMA_Init+0x158>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d107      	bne.n	8001cac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f023 0307 	bic.w	r3, r3, #7
 8001cc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d117      	bne.n	8001d06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00e      	beq.n	8001d06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fa59 	bl	80021a0 <DMA_CheckFifoParam>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d008      	beq.n	8001d06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2240      	movs	r2, #64	; 0x40
 8001cf8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d02:	2301      	movs	r3, #1
 8001d04:	e016      	b.n	8001d34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fa10 	bl	8002134 <DMA_CalcBaseAndBitshift>
 8001d14:	4603      	mov	r3, r0
 8001d16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1c:	223f      	movs	r2, #63	; 0x3f
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	f010803f 	.word	0xf010803f

08001d40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d4e:	f7ff fe07 	bl	8001960 <HAL_GetTick>
 8001d52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d008      	beq.n	8001d72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2280      	movs	r2, #128	; 0x80
 8001d64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e052      	b.n	8001e18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0216 	bic.w	r2, r2, #22
 8001d80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d103      	bne.n	8001da2 <HAL_DMA_Abort+0x62>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0208 	bic.w	r2, r2, #8
 8001db0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0201 	bic.w	r2, r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dc2:	e013      	b.n	8001dec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dc4:	f7ff fdcc 	bl	8001960 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b05      	cmp	r3, #5
 8001dd0:	d90c      	bls.n	8001dec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2203      	movs	r2, #3
 8001ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e015      	b.n	8001e18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1e4      	bne.n	8001dc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfe:	223f      	movs	r2, #63	; 0x3f
 8001e00:	409a      	lsls	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e2c:	4b92      	ldr	r3, [pc, #584]	; (8002078 <HAL_DMA_IRQHandler+0x258>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a92      	ldr	r2, [pc, #584]	; (800207c <HAL_DMA_IRQHandler+0x25c>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	0a9b      	lsrs	r3, r3, #10
 8001e38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4a:	2208      	movs	r2, #8
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d01a      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d013      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0204 	bic.w	r2, r2, #4
 8001e72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e78:	2208      	movs	r2, #8
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e84:	f043 0201 	orr.w	r2, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e90:	2201      	movs	r2, #1
 8001e92:	409a      	lsls	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d012      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00b      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eae:	2201      	movs	r2, #1
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eba:	f043 0202 	orr.w	r2, r3, #2
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec6:	2204      	movs	r2, #4
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d012      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00b      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef0:	f043 0204 	orr.w	r2, r3, #4
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efc:	2210      	movs	r2, #16
 8001efe:	409a      	lsls	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d043      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d03c      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1a:	2210      	movs	r2, #16
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d018      	beq.n	8001f62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d108      	bne.n	8001f50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d024      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	4798      	blx	r3
 8001f4e:	e01f      	b.n	8001f90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d01b      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	4798      	blx	r3
 8001f60:	e016      	b.n	8001f90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d107      	bne.n	8001f80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0208 	bic.w	r2, r2, #8
 8001f7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f94:	2220      	movs	r2, #32
 8001f96:	409a      	lsls	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 808e 	beq.w	80020be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0310 	and.w	r3, r3, #16
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 8086 	beq.w	80020be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b05      	cmp	r3, #5
 8001fc8:	d136      	bne.n	8002038 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0216 	bic.w	r2, r2, #22
 8001fd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	695a      	ldr	r2, [r3, #20]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fe8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d103      	bne.n	8001ffa <HAL_DMA_IRQHandler+0x1da>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0208 	bic.w	r2, r2, #8
 8002008:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200e:	223f      	movs	r2, #63	; 0x3f
 8002010:	409a      	lsls	r2, r3
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800202a:	2b00      	cmp	r3, #0
 800202c:	d07d      	beq.n	800212a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	4798      	blx	r3
        }
        return;
 8002036:	e078      	b.n	800212a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d01c      	beq.n	8002080 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d108      	bne.n	8002066 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002058:	2b00      	cmp	r3, #0
 800205a:	d030      	beq.n	80020be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	4798      	blx	r3
 8002064:	e02b      	b.n	80020be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206a:	2b00      	cmp	r3, #0
 800206c:	d027      	beq.n	80020be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	4798      	blx	r3
 8002076:	e022      	b.n	80020be <HAL_DMA_IRQHandler+0x29e>
 8002078:	20000018 	.word	0x20000018
 800207c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10f      	bne.n	80020ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0210 	bic.w	r2, r2, #16
 800209c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d032      	beq.n	800212c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d022      	beq.n	8002118 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2205      	movs	r2, #5
 80020d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0201 	bic.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	3301      	adds	r3, #1
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d307      	bcc.n	8002106 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f2      	bne.n	80020ea <HAL_DMA_IRQHandler+0x2ca>
 8002104:	e000      	b.n	8002108 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002106:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	4798      	blx	r3
 8002128:	e000      	b.n	800212c <HAL_DMA_IRQHandler+0x30c>
        return;
 800212a:	bf00      	nop
    }
  }
}
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop

08002134 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	3b10      	subs	r3, #16
 8002144:	4a14      	ldr	r2, [pc, #80]	; (8002198 <DMA_CalcBaseAndBitshift+0x64>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800214e:	4a13      	ldr	r2, [pc, #76]	; (800219c <DMA_CalcBaseAndBitshift+0x68>)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b03      	cmp	r3, #3
 8002160:	d909      	bls.n	8002176 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800216a:	f023 0303 	bic.w	r3, r3, #3
 800216e:	1d1a      	adds	r2, r3, #4
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	659a      	str	r2, [r3, #88]	; 0x58
 8002174:	e007      	b.n	8002186 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800217e:	f023 0303 	bic.w	r3, r3, #3
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	aaaaaaab 	.word	0xaaaaaaab
 800219c:	08095238 	.word	0x08095238

080021a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d11f      	bne.n	80021fa <DMA_CheckFifoParam+0x5a>
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d856      	bhi.n	800226e <DMA_CheckFifoParam+0xce>
 80021c0:	a201      	add	r2, pc, #4	; (adr r2, 80021c8 <DMA_CheckFifoParam+0x28>)
 80021c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c6:	bf00      	nop
 80021c8:	080021d9 	.word	0x080021d9
 80021cc:	080021eb 	.word	0x080021eb
 80021d0:	080021d9 	.word	0x080021d9
 80021d4:	0800226f 	.word	0x0800226f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d046      	beq.n	8002272 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021e8:	e043      	b.n	8002272 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021f2:	d140      	bne.n	8002276 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f8:	e03d      	b.n	8002276 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002202:	d121      	bne.n	8002248 <DMA_CheckFifoParam+0xa8>
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b03      	cmp	r3, #3
 8002208:	d837      	bhi.n	800227a <DMA_CheckFifoParam+0xda>
 800220a:	a201      	add	r2, pc, #4	; (adr r2, 8002210 <DMA_CheckFifoParam+0x70>)
 800220c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002210:	08002221 	.word	0x08002221
 8002214:	08002227 	.word	0x08002227
 8002218:	08002221 	.word	0x08002221
 800221c:	08002239 	.word	0x08002239
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
      break;
 8002224:	e030      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d025      	beq.n	800227e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002236:	e022      	b.n	800227e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002240:	d11f      	bne.n	8002282 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002246:	e01c      	b.n	8002282 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d903      	bls.n	8002256 <DMA_CheckFifoParam+0xb6>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b03      	cmp	r3, #3
 8002252:	d003      	beq.n	800225c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002254:	e018      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
      break;
 800225a:	e015      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002260:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00e      	beq.n	8002286 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
      break;
 800226c:	e00b      	b.n	8002286 <DMA_CheckFifoParam+0xe6>
      break;
 800226e:	bf00      	nop
 8002270:	e00a      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 8002272:	bf00      	nop
 8002274:	e008      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 8002276:	bf00      	nop
 8002278:	e006      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 800227a:	bf00      	nop
 800227c:	e004      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 800227e:	bf00      	nop
 8002280:	e002      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;   
 8002282:	bf00      	nop
 8002284:	e000      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 8002286:	bf00      	nop
    }
  } 
  
  return status; 
 8002288:	7bfb      	ldrb	r3, [r7, #15]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop

08002298 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b80      	cmp	r3, #128	; 0x80
 80022b0:	d106      	bne.n	80022c0 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	f001 b913 	b.w	80034e6 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d007      	beq.n	80022d8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d105      	bne.n	80022e4 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2240      	movs	r2, #64	; 0x40
 80022dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	f001 b901 	b.w	80034e6 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d102      	bne.n	80022f4 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 80022ee:	2302      	movs	r3, #2
 80022f0:	f001 b8f9 	b.w	80034e6 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b01      	cmp	r3, #1
 8002306:	f041 80e7 	bne.w	80034d8 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2202      	movs	r2, #2
 800230e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002326:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f001 f8f6 	bl	8003528 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4b99      	ldr	r3, [pc, #612]	; (80025a8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002344:	429a      	cmp	r2, r3
 8002346:	d960      	bls.n	800240a <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a97      	ldr	r2, [pc, #604]	; (80025ac <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d057      	beq.n	8002402 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a96      	ldr	r2, [pc, #600]	; (80025b0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d050      	beq.n	80023fe <HAL_DMAEx_MultiBufferStart_IT+0x166>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a94      	ldr	r2, [pc, #592]	; (80025b4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d049      	beq.n	80023fa <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a93      	ldr	r2, [pc, #588]	; (80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d042      	beq.n	80023f6 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a91      	ldr	r2, [pc, #580]	; (80025bc <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d03a      	beq.n	80023f0 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a90      	ldr	r2, [pc, #576]	; (80025c0 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d032      	beq.n	80023ea <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a8e      	ldr	r2, [pc, #568]	; (80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d02a      	beq.n	80023e4 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a8d      	ldr	r2, [pc, #564]	; (80025c8 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d022      	beq.n	80023de <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a8b      	ldr	r2, [pc, #556]	; (80025cc <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01a      	beq.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a8a      	ldr	r2, [pc, #552]	; (80025d0 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d012      	beq.n	80023d2 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a88      	ldr	r2, [pc, #544]	; (80025d4 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00a      	beq.n	80023cc <HAL_DMAEx_MultiBufferStart_IT+0x134>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a87      	ldr	r2, [pc, #540]	; (80025d8 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d102      	bne.n	80023c6 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 80023c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023c4:	e01e      	b.n	8002404 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80023c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80023ca:	e01b      	b.n	8002404 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80023cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023d0:	e018      	b.n	8002404 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80023d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023d6:	e015      	b.n	8002404 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80023d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023dc:	e012      	b.n	8002404 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80023de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023e2:	e00f      	b.n	8002404 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80023e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023e8:	e00c      	b.n	8002404 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80023ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023ee:	e009      	b.n	8002404 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80023f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023f4:	e006      	b.n	8002404 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80023f6:	2320      	movs	r3, #32
 80023f8:	e004      	b.n	8002404 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80023fa:	2320      	movs	r3, #32
 80023fc:	e002      	b.n	8002404 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80023fe:	2320      	movs	r3, #32
 8002400:	e000      	b.n	8002404 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002402:	2320      	movs	r3, #32
 8002404:	4a75      	ldr	r2, [pc, #468]	; (80025dc <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8002406:	60d3      	str	r3, [r2, #12]
 8002408:	e150      	b.n	80026ac <HAL_DMAEx_MultiBufferStart_IT+0x414>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	4b73      	ldr	r3, [pc, #460]	; (80025e0 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8002412:	429a      	cmp	r2, r3
 8002414:	d960      	bls.n	80024d8 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a64      	ldr	r2, [pc, #400]	; (80025ac <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d057      	beq.n	80024d0 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a62      	ldr	r2, [pc, #392]	; (80025b0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d050      	beq.n	80024cc <HAL_DMAEx_MultiBufferStart_IT+0x234>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a61      	ldr	r2, [pc, #388]	; (80025b4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d049      	beq.n	80024c8 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a5f      	ldr	r2, [pc, #380]	; (80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d042      	beq.n	80024c4 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a5e      	ldr	r2, [pc, #376]	; (80025bc <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d03a      	beq.n	80024be <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a5c      	ldr	r2, [pc, #368]	; (80025c0 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d032      	beq.n	80024b8 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a5b      	ldr	r2, [pc, #364]	; (80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d02a      	beq.n	80024b2 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a59      	ldr	r2, [pc, #356]	; (80025c8 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d022      	beq.n	80024ac <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a58      	ldr	r2, [pc, #352]	; (80025cc <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d01a      	beq.n	80024a6 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a56      	ldr	r2, [pc, #344]	; (80025d0 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d012      	beq.n	80024a0 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a55      	ldr	r2, [pc, #340]	; (80025d4 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d00a      	beq.n	800249a <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a53      	ldr	r2, [pc, #332]	; (80025d8 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d102      	bne.n	8002494 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800248e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002492:	e01e      	b.n	80024d2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002494:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002498:	e01b      	b.n	80024d2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800249a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800249e:	e018      	b.n	80024d2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80024a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024a4:	e015      	b.n	80024d2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80024a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024aa:	e012      	b.n	80024d2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80024ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024b0:	e00f      	b.n	80024d2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80024b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024b6:	e00c      	b.n	80024d2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80024b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024bc:	e009      	b.n	80024d2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80024be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024c2:	e006      	b.n	80024d2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80024c4:	2320      	movs	r3, #32
 80024c6:	e004      	b.n	80024d2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80024c8:	2320      	movs	r3, #32
 80024ca:	e002      	b.n	80024d2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80024cc:	2320      	movs	r3, #32
 80024ce:	e000      	b.n	80024d2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80024d0:	2320      	movs	r3, #32
 80024d2:	4a42      	ldr	r2, [pc, #264]	; (80025dc <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 80024d4:	6093      	str	r3, [r2, #8]
 80024d6:	e0e9      	b.n	80026ac <HAL_DMAEx_MultiBufferStart_IT+0x414>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	4b41      	ldr	r3, [pc, #260]	; (80025e4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 80024e0:	429a      	cmp	r2, r3
 80024e2:	f240 8083 	bls.w	80025ec <HAL_DMAEx_MultiBufferStart_IT+0x354>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a30      	ldr	r2, [pc, #192]	; (80025ac <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d057      	beq.n	80025a0 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a2e      	ldr	r2, [pc, #184]	; (80025b0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d050      	beq.n	800259c <HAL_DMAEx_MultiBufferStart_IT+0x304>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a2d      	ldr	r2, [pc, #180]	; (80025b4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d049      	beq.n	8002598 <HAL_DMAEx_MultiBufferStart_IT+0x300>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a2b      	ldr	r2, [pc, #172]	; (80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d042      	beq.n	8002594 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a2a      	ldr	r2, [pc, #168]	; (80025bc <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d03a      	beq.n	800258e <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a28      	ldr	r2, [pc, #160]	; (80025c0 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d032      	beq.n	8002588 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d02a      	beq.n	8002582 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a25      	ldr	r2, [pc, #148]	; (80025c8 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d022      	beq.n	800257c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a24      	ldr	r2, [pc, #144]	; (80025cc <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d01a      	beq.n	8002576 <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a22      	ldr	r2, [pc, #136]	; (80025d0 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d012      	beq.n	8002570 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a21      	ldr	r2, [pc, #132]	; (80025d4 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d00a      	beq.n	800256a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a1f      	ldr	r2, [pc, #124]	; (80025d8 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d102      	bne.n	8002564 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 800255e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002562:	e01e      	b.n	80025a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002564:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002568:	e01b      	b.n	80025a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800256a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800256e:	e018      	b.n	80025a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002570:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002574:	e015      	b.n	80025a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002576:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800257a:	e012      	b.n	80025a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800257c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002580:	e00f      	b.n	80025a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002582:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002586:	e00c      	b.n	80025a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002588:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800258c:	e009      	b.n	80025a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800258e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002592:	e006      	b.n	80025a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002594:	2320      	movs	r3, #32
 8002596:	e004      	b.n	80025a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002598:	2320      	movs	r3, #32
 800259a:	e002      	b.n	80025a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800259c:	2320      	movs	r3, #32
 800259e:	e000      	b.n	80025a2 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80025a0:	2320      	movs	r3, #32
 80025a2:	4a11      	ldr	r2, [pc, #68]	; (80025e8 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 80025a4:	60d3      	str	r3, [r2, #12]
 80025a6:	e081      	b.n	80026ac <HAL_DMAEx_MultiBufferStart_IT+0x414>
 80025a8:	40026458 	.word	0x40026458
 80025ac:	40026010 	.word	0x40026010
 80025b0:	40026410 	.word	0x40026410
 80025b4:	40026070 	.word	0x40026070
 80025b8:	40026470 	.word	0x40026470
 80025bc:	40026028 	.word	0x40026028
 80025c0:	40026428 	.word	0x40026428
 80025c4:	40026088 	.word	0x40026088
 80025c8:	40026488 	.word	0x40026488
 80025cc:	40026040 	.word	0x40026040
 80025d0:	40026440 	.word	0x40026440
 80025d4:	400260a0 	.word	0x400260a0
 80025d8:	400264a0 	.word	0x400264a0
 80025dc:	40026400 	.word	0x40026400
 80025e0:	400260b8 	.word	0x400260b8
 80025e4:	40026058 	.word	0x40026058
 80025e8:	40026000 	.word	0x40026000
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a96      	ldr	r2, [pc, #600]	; (800284c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d057      	beq.n	80026a6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a95      	ldr	r2, [pc, #596]	; (8002850 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d050      	beq.n	80026a2 <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a93      	ldr	r2, [pc, #588]	; (8002854 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d049      	beq.n	800269e <HAL_DMAEx_MultiBufferStart_IT+0x406>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a92      	ldr	r2, [pc, #584]	; (8002858 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d042      	beq.n	800269a <HAL_DMAEx_MultiBufferStart_IT+0x402>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a90      	ldr	r2, [pc, #576]	; (800285c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d03a      	beq.n	8002694 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a8f      	ldr	r2, [pc, #572]	; (8002860 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d032      	beq.n	800268e <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a8d      	ldr	r2, [pc, #564]	; (8002864 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d02a      	beq.n	8002688 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a8c      	ldr	r2, [pc, #560]	; (8002868 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d022      	beq.n	8002682 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a8a      	ldr	r2, [pc, #552]	; (800286c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d01a      	beq.n	800267c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a89      	ldr	r2, [pc, #548]	; (8002870 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d012      	beq.n	8002676 <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a87      	ldr	r2, [pc, #540]	; (8002874 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00a      	beq.n	8002670 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a86      	ldr	r2, [pc, #536]	; (8002878 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d102      	bne.n	800266a <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8002664:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002668:	e01e      	b.n	80026a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800266a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800266e:	e01b      	b.n	80026a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002670:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002674:	e018      	b.n	80026a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002676:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800267a:	e015      	b.n	80026a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800267c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002680:	e012      	b.n	80026a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002682:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002686:	e00f      	b.n	80026a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002688:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800268c:	e00c      	b.n	80026a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800268e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002692:	e009      	b.n	80026a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002694:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002698:	e006      	b.n	80026a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800269a:	2320      	movs	r3, #32
 800269c:	e004      	b.n	80026a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800269e:	2320      	movs	r3, #32
 80026a0:	e002      	b.n	80026a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80026a2:	2320      	movs	r3, #32
 80026a4:	e000      	b.n	80026a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80026a6:	2320      	movs	r3, #32
 80026a8:	4a74      	ldr	r2, [pc, #464]	; (800287c <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 80026aa:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b73      	ldr	r3, [pc, #460]	; (8002880 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d960      	bls.n	800277a <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a63      	ldr	r2, [pc, #396]	; (800284c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d057      	beq.n	8002772 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a62      	ldr	r2, [pc, #392]	; (8002850 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d050      	beq.n	800276e <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a60      	ldr	r2, [pc, #384]	; (8002854 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d049      	beq.n	800276a <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a5f      	ldr	r2, [pc, #380]	; (8002858 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d042      	beq.n	8002766 <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a5d      	ldr	r2, [pc, #372]	; (800285c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d03a      	beq.n	8002760 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a5c      	ldr	r2, [pc, #368]	; (8002860 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d032      	beq.n	800275a <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a5a      	ldr	r2, [pc, #360]	; (8002864 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d02a      	beq.n	8002754 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a59      	ldr	r2, [pc, #356]	; (8002868 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d022      	beq.n	800274e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a57      	ldr	r2, [pc, #348]	; (800286c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d01a      	beq.n	8002748 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a56      	ldr	r2, [pc, #344]	; (8002870 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d012      	beq.n	8002742 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a54      	ldr	r2, [pc, #336]	; (8002874 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d00a      	beq.n	800273c <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a53      	ldr	r2, [pc, #332]	; (8002878 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d102      	bne.n	8002736 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8002730:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002734:	e01e      	b.n	8002774 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002736:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800273a:	e01b      	b.n	8002774 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800273c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002740:	e018      	b.n	8002774 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002742:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002746:	e015      	b.n	8002774 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002748:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800274c:	e012      	b.n	8002774 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800274e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002752:	e00f      	b.n	8002774 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002758:	e00c      	b.n	8002774 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800275a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800275e:	e009      	b.n	8002774 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002764:	e006      	b.n	8002774 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002766:	2310      	movs	r3, #16
 8002768:	e004      	b.n	8002774 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800276a:	2310      	movs	r3, #16
 800276c:	e002      	b.n	8002774 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800276e:	2310      	movs	r3, #16
 8002770:	e000      	b.n	8002774 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002772:	2310      	movs	r3, #16
 8002774:	4a43      	ldr	r2, [pc, #268]	; (8002884 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8002776:	60d3      	str	r3, [r2, #12]
 8002778:	e14f      	b.n	8002a1a <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	4b41      	ldr	r3, [pc, #260]	; (8002888 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 8002782:	429a      	cmp	r2, r3
 8002784:	f240 8082 	bls.w	800288c <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a2f      	ldr	r2, [pc, #188]	; (800284c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d057      	beq.n	8002842 <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a2e      	ldr	r2, [pc, #184]	; (8002850 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d050      	beq.n	800283e <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a2c      	ldr	r2, [pc, #176]	; (8002854 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d049      	beq.n	800283a <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a2b      	ldr	r2, [pc, #172]	; (8002858 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d042      	beq.n	8002836 <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a29      	ldr	r2, [pc, #164]	; (800285c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d03a      	beq.n	8002830 <HAL_DMAEx_MultiBufferStart_IT+0x598>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a28      	ldr	r2, [pc, #160]	; (8002860 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d032      	beq.n	800282a <HAL_DMAEx_MultiBufferStart_IT+0x592>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a26      	ldr	r2, [pc, #152]	; (8002864 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d02a      	beq.n	8002824 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a25      	ldr	r2, [pc, #148]	; (8002868 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d022      	beq.n	800281e <HAL_DMAEx_MultiBufferStart_IT+0x586>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a23      	ldr	r2, [pc, #140]	; (800286c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d01a      	beq.n	8002818 <HAL_DMAEx_MultiBufferStart_IT+0x580>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a22      	ldr	r2, [pc, #136]	; (8002870 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d012      	beq.n	8002812 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a20      	ldr	r2, [pc, #128]	; (8002874 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00a      	beq.n	800280c <HAL_DMAEx_MultiBufferStart_IT+0x574>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1f      	ldr	r2, [pc, #124]	; (8002878 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d102      	bne.n	8002806 <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8002800:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002804:	e01e      	b.n	8002844 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002806:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800280a:	e01b      	b.n	8002844 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800280c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002810:	e018      	b.n	8002844 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002812:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002816:	e015      	b.n	8002844 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002818:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800281c:	e012      	b.n	8002844 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800281e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002822:	e00f      	b.n	8002844 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002828:	e00c      	b.n	8002844 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800282a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800282e:	e009      	b.n	8002844 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002834:	e006      	b.n	8002844 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002836:	2310      	movs	r3, #16
 8002838:	e004      	b.n	8002844 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800283a:	2310      	movs	r3, #16
 800283c:	e002      	b.n	8002844 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800283e:	2310      	movs	r3, #16
 8002840:	e000      	b.n	8002844 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002842:	2310      	movs	r3, #16
 8002844:	4a0f      	ldr	r2, [pc, #60]	; (8002884 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8002846:	6093      	str	r3, [r2, #8]
 8002848:	e0e7      	b.n	8002a1a <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800284a:	bf00      	nop
 800284c:	40026010 	.word	0x40026010
 8002850:	40026410 	.word	0x40026410
 8002854:	40026070 	.word	0x40026070
 8002858:	40026470 	.word	0x40026470
 800285c:	40026028 	.word	0x40026028
 8002860:	40026428 	.word	0x40026428
 8002864:	40026088 	.word	0x40026088
 8002868:	40026488 	.word	0x40026488
 800286c:	40026040 	.word	0x40026040
 8002870:	40026440 	.word	0x40026440
 8002874:	400260a0 	.word	0x400260a0
 8002878:	400264a0 	.word	0x400264a0
 800287c:	40026000 	.word	0x40026000
 8002880:	40026458 	.word	0x40026458
 8002884:	40026400 	.word	0x40026400
 8002888:	400260b8 	.word	0x400260b8
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	4b96      	ldr	r3, [pc, #600]	; (8002aec <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002894:	429a      	cmp	r2, r3
 8002896:	d960      	bls.n	800295a <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a94      	ldr	r2, [pc, #592]	; (8002af0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d057      	beq.n	8002952 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a93      	ldr	r2, [pc, #588]	; (8002af4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d050      	beq.n	800294e <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a91      	ldr	r2, [pc, #580]	; (8002af8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d049      	beq.n	800294a <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a90      	ldr	r2, [pc, #576]	; (8002afc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d042      	beq.n	8002946 <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a8e      	ldr	r2, [pc, #568]	; (8002b00 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d03a      	beq.n	8002940 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a8d      	ldr	r2, [pc, #564]	; (8002b04 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d032      	beq.n	800293a <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a8b      	ldr	r2, [pc, #556]	; (8002b08 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d02a      	beq.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a8a      	ldr	r2, [pc, #552]	; (8002b0c <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d022      	beq.n	800292e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a88      	ldr	r2, [pc, #544]	; (8002b10 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d01a      	beq.n	8002928 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a87      	ldr	r2, [pc, #540]	; (8002b14 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d012      	beq.n	8002922 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a85      	ldr	r2, [pc, #532]	; (8002b18 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00a      	beq.n	800291c <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a84      	ldr	r2, [pc, #528]	; (8002b1c <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d102      	bne.n	8002916 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8002910:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002914:	e01e      	b.n	8002954 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002916:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800291a:	e01b      	b.n	8002954 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800291c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002920:	e018      	b.n	8002954 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002922:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002926:	e015      	b.n	8002954 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002928:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800292c:	e012      	b.n	8002954 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800292e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002932:	e00f      	b.n	8002954 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002938:	e00c      	b.n	8002954 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800293a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800293e:	e009      	b.n	8002954 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002944:	e006      	b.n	8002954 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002946:	2310      	movs	r3, #16
 8002948:	e004      	b.n	8002954 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800294a:	2310      	movs	r3, #16
 800294c:	e002      	b.n	8002954 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800294e:	2310      	movs	r3, #16
 8002950:	e000      	b.n	8002954 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002952:	2310      	movs	r3, #16
 8002954:	4a72      	ldr	r2, [pc, #456]	; (8002b20 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8002956:	60d3      	str	r3, [r2, #12]
 8002958:	e05f      	b.n	8002a1a <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a64      	ldr	r2, [pc, #400]	; (8002af0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d057      	beq.n	8002a14 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a62      	ldr	r2, [pc, #392]	; (8002af4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d050      	beq.n	8002a10 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a61      	ldr	r2, [pc, #388]	; (8002af8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d049      	beq.n	8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x774>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a5f      	ldr	r2, [pc, #380]	; (8002afc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d042      	beq.n	8002a08 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a5e      	ldr	r2, [pc, #376]	; (8002b00 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d03a      	beq.n	8002a02 <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a5c      	ldr	r2, [pc, #368]	; (8002b04 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d032      	beq.n	80029fc <HAL_DMAEx_MultiBufferStart_IT+0x764>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a5b      	ldr	r2, [pc, #364]	; (8002b08 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d02a      	beq.n	80029f6 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a59      	ldr	r2, [pc, #356]	; (8002b0c <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d022      	beq.n	80029f0 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a58      	ldr	r2, [pc, #352]	; (8002b10 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d01a      	beq.n	80029ea <HAL_DMAEx_MultiBufferStart_IT+0x752>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a56      	ldr	r2, [pc, #344]	; (8002b14 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d012      	beq.n	80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a55      	ldr	r2, [pc, #340]	; (8002b18 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d00a      	beq.n	80029de <HAL_DMAEx_MultiBufferStart_IT+0x746>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a53      	ldr	r2, [pc, #332]	; (8002b1c <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d102      	bne.n	80029d8 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 80029d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029d6:	e01e      	b.n	8002a16 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80029d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029dc:	e01b      	b.n	8002a16 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80029de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029e2:	e018      	b.n	8002a16 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80029e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029e8:	e015      	b.n	8002a16 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80029ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029ee:	e012      	b.n	8002a16 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80029f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029f4:	e00f      	b.n	8002a16 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80029f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029fa:	e00c      	b.n	8002a16 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80029fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a00:	e009      	b.n	8002a16 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a06:	e006      	b.n	8002a16 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002a08:	2310      	movs	r3, #16
 8002a0a:	e004      	b.n	8002a16 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002a0c:	2310      	movs	r3, #16
 8002a0e:	e002      	b.n	8002a16 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002a10:	2310      	movs	r3, #16
 8002a12:	e000      	b.n	8002a16 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002a14:	2310      	movs	r3, #16
 8002a16:	4a42      	ldr	r2, [pc, #264]	; (8002b20 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8002a18:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	4b40      	ldr	r3, [pc, #256]	; (8002b24 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 8002a22:	429a      	cmp	r2, r3
 8002a24:	f240 8082 	bls.w	8002b2c <HAL_DMAEx_MultiBufferStart_IT+0x894>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a30      	ldr	r2, [pc, #192]	; (8002af0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d057      	beq.n	8002ae2 <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a2f      	ldr	r2, [pc, #188]	; (8002af4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d050      	beq.n	8002ade <HAL_DMAEx_MultiBufferStart_IT+0x846>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a2d      	ldr	r2, [pc, #180]	; (8002af8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d049      	beq.n	8002ada <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a2c      	ldr	r2, [pc, #176]	; (8002afc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d042      	beq.n	8002ad6 <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a2a      	ldr	r2, [pc, #168]	; (8002b00 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d03a      	beq.n	8002ad0 <HAL_DMAEx_MultiBufferStart_IT+0x838>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a29      	ldr	r2, [pc, #164]	; (8002b04 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d032      	beq.n	8002aca <HAL_DMAEx_MultiBufferStart_IT+0x832>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a27      	ldr	r2, [pc, #156]	; (8002b08 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d02a      	beq.n	8002ac4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a26      	ldr	r2, [pc, #152]	; (8002b0c <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d022      	beq.n	8002abe <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a24      	ldr	r2, [pc, #144]	; (8002b10 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d01a      	beq.n	8002ab8 <HAL_DMAEx_MultiBufferStart_IT+0x820>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a23      	ldr	r2, [pc, #140]	; (8002b14 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d012      	beq.n	8002ab2 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a21      	ldr	r2, [pc, #132]	; (8002b18 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00a      	beq.n	8002aac <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a20      	ldr	r2, [pc, #128]	; (8002b1c <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d102      	bne.n	8002aa6 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8002aa0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002aa4:	e01e      	b.n	8002ae4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002aa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aaa:	e01b      	b.n	8002ae4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002aac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ab0:	e018      	b.n	8002ae4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002ab2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ab6:	e015      	b.n	8002ae4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002ab8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002abc:	e012      	b.n	8002ae4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002abe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ac2:	e00f      	b.n	8002ae4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ac8:	e00c      	b.n	8002ae4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002aca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ace:	e009      	b.n	8002ae4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ad4:	e006      	b.n	8002ae4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002ad6:	2308      	movs	r3, #8
 8002ad8:	e004      	b.n	8002ae4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002ada:	2308      	movs	r3, #8
 8002adc:	e002      	b.n	8002ae4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002ade:	2308      	movs	r3, #8
 8002ae0:	e000      	b.n	8002ae4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8002ae2:	2308      	movs	r3, #8
 8002ae4:	4a10      	ldr	r2, [pc, #64]	; (8002b28 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 8002ae6:	60d3      	str	r3, [r2, #12]
 8002ae8:	e16f      	b.n	8002dca <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8002aea:	bf00      	nop
 8002aec:	40026058 	.word	0x40026058
 8002af0:	40026010 	.word	0x40026010
 8002af4:	40026410 	.word	0x40026410
 8002af8:	40026070 	.word	0x40026070
 8002afc:	40026470 	.word	0x40026470
 8002b00:	40026028 	.word	0x40026028
 8002b04:	40026428 	.word	0x40026428
 8002b08:	40026088 	.word	0x40026088
 8002b0c:	40026488 	.word	0x40026488
 8002b10:	40026040 	.word	0x40026040
 8002b14:	40026440 	.word	0x40026440
 8002b18:	400260a0 	.word	0x400260a0
 8002b1c:	400264a0 	.word	0x400264a0
 8002b20:	40026000 	.word	0x40026000
 8002b24:	40026458 	.word	0x40026458
 8002b28:	40026400 	.word	0x40026400
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	4b94      	ldr	r3, [pc, #592]	; (8002d84 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d960      	bls.n	8002bfa <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a92      	ldr	r2, [pc, #584]	; (8002d88 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d057      	beq.n	8002bf2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a91      	ldr	r2, [pc, #580]	; (8002d8c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d050      	beq.n	8002bee <HAL_DMAEx_MultiBufferStart_IT+0x956>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a8f      	ldr	r2, [pc, #572]	; (8002d90 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d049      	beq.n	8002bea <HAL_DMAEx_MultiBufferStart_IT+0x952>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a8e      	ldr	r2, [pc, #568]	; (8002d94 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d042      	beq.n	8002be6 <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a8c      	ldr	r2, [pc, #560]	; (8002d98 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d03a      	beq.n	8002be0 <HAL_DMAEx_MultiBufferStart_IT+0x948>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a8b      	ldr	r2, [pc, #556]	; (8002d9c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d032      	beq.n	8002bda <HAL_DMAEx_MultiBufferStart_IT+0x942>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a89      	ldr	r2, [pc, #548]	; (8002da0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d02a      	beq.n	8002bd4 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a88      	ldr	r2, [pc, #544]	; (8002da4 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d022      	beq.n	8002bce <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a86      	ldr	r2, [pc, #536]	; (8002da8 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d01a      	beq.n	8002bc8 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a85      	ldr	r2, [pc, #532]	; (8002dac <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d012      	beq.n	8002bc2 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a83      	ldr	r2, [pc, #524]	; (8002db0 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00a      	beq.n	8002bbc <HAL_DMAEx_MultiBufferStart_IT+0x924>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a82      	ldr	r2, [pc, #520]	; (8002db4 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d102      	bne.n	8002bb6 <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 8002bb0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002bb4:	e01e      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002bb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bba:	e01b      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002bbc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002bc0:	e018      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002bc2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002bc6:	e015      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002bc8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002bcc:	e012      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002bce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bd2:	e00f      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bd8:	e00c      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bde:	e009      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002be0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002be4:	e006      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002be6:	2308      	movs	r3, #8
 8002be8:	e004      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002bea:	2308      	movs	r3, #8
 8002bec:	e002      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002bee:	2308      	movs	r3, #8
 8002bf0:	e000      	b.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8002bf2:	2308      	movs	r3, #8
 8002bf4:	4a70      	ldr	r2, [pc, #448]	; (8002db8 <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 8002bf6:	6093      	str	r3, [r2, #8]
 8002bf8:	e0e7      	b.n	8002dca <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	4b6e      	ldr	r3, [pc, #440]	; (8002dbc <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d960      	bls.n	8002cc8 <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a5f      	ldr	r2, [pc, #380]	; (8002d88 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d057      	beq.n	8002cc0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a5d      	ldr	r2, [pc, #372]	; (8002d8c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d050      	beq.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a5c      	ldr	r2, [pc, #368]	; (8002d90 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d049      	beq.n	8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a5a      	ldr	r2, [pc, #360]	; (8002d94 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d042      	beq.n	8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a59      	ldr	r2, [pc, #356]	; (8002d98 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d03a      	beq.n	8002cae <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a57      	ldr	r2, [pc, #348]	; (8002d9c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d032      	beq.n	8002ca8 <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a56      	ldr	r2, [pc, #344]	; (8002da0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d02a      	beq.n	8002ca2 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a54      	ldr	r2, [pc, #336]	; (8002da4 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d022      	beq.n	8002c9c <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a53      	ldr	r2, [pc, #332]	; (8002da8 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d01a      	beq.n	8002c96 <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a51      	ldr	r2, [pc, #324]	; (8002dac <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d012      	beq.n	8002c90 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a50      	ldr	r2, [pc, #320]	; (8002db0 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d00a      	beq.n	8002c8a <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a4e      	ldr	r2, [pc, #312]	; (8002db4 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d102      	bne.n	8002c84 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 8002c7e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c82:	e01e      	b.n	8002cc2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002c84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c88:	e01b      	b.n	8002cc2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002c8a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c8e:	e018      	b.n	8002cc2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002c90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c94:	e015      	b.n	8002cc2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002c96:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c9a:	e012      	b.n	8002cc2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ca0:	e00f      	b.n	8002cc2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ca6:	e00c      	b.n	8002cc2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cac:	e009      	b.n	8002cc2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002cae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cb2:	e006      	b.n	8002cc2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002cb4:	2308      	movs	r3, #8
 8002cb6:	e004      	b.n	8002cc2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002cb8:	2308      	movs	r3, #8
 8002cba:	e002      	b.n	8002cc2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002cbc:	2308      	movs	r3, #8
 8002cbe:	e000      	b.n	8002cc2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002cc0:	2308      	movs	r3, #8
 8002cc2:	4a3f      	ldr	r2, [pc, #252]	; (8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 8002cc4:	60d3      	str	r3, [r2, #12]
 8002cc6:	e080      	b.n	8002dca <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a2e      	ldr	r2, [pc, #184]	; (8002d88 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d078      	beq.n	8002dc4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a2d      	ldr	r2, [pc, #180]	; (8002d8c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d050      	beq.n	8002d7e <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a2b      	ldr	r2, [pc, #172]	; (8002d90 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d049      	beq.n	8002d7a <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a2a      	ldr	r2, [pc, #168]	; (8002d94 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d042      	beq.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0xade>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a28      	ldr	r2, [pc, #160]	; (8002d98 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d03a      	beq.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a27      	ldr	r2, [pc, #156]	; (8002d9c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d032      	beq.n	8002d6a <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a25      	ldr	r2, [pc, #148]	; (8002da0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d02a      	beq.n	8002d64 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a24      	ldr	r2, [pc, #144]	; (8002da4 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d022      	beq.n	8002d5e <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a22      	ldr	r2, [pc, #136]	; (8002da8 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d01a      	beq.n	8002d58 <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a21      	ldr	r2, [pc, #132]	; (8002dac <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d012      	beq.n	8002d52 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a1f      	ldr	r2, [pc, #124]	; (8002db0 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00a      	beq.n	8002d4c <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1e      	ldr	r2, [pc, #120]	; (8002db4 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d102      	bne.n	8002d46 <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 8002d40:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d44:	e03f      	b.n	8002dc6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002d46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d4a:	e03c      	b.n	8002dc6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002d4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d50:	e039      	b.n	8002dc6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002d52:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d56:	e036      	b.n	8002dc6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002d58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d5c:	e033      	b.n	8002dc6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002d5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d62:	e030      	b.n	8002dc6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d68:	e02d      	b.n	8002dc6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d6e:	e02a      	b.n	8002dc6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d74:	e027      	b.n	8002dc6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002d76:	2308      	movs	r3, #8
 8002d78:	e025      	b.n	8002dc6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002d7a:	2308      	movs	r3, #8
 8002d7c:	e023      	b.n	8002dc6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002d7e:	2308      	movs	r3, #8
 8002d80:	e021      	b.n	8002dc6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8002d82:	bf00      	nop
 8002d84:	400260b8 	.word	0x400260b8
 8002d88:	40026010 	.word	0x40026010
 8002d8c:	40026410 	.word	0x40026410
 8002d90:	40026070 	.word	0x40026070
 8002d94:	40026470 	.word	0x40026470
 8002d98:	40026028 	.word	0x40026028
 8002d9c:	40026428 	.word	0x40026428
 8002da0:	40026088 	.word	0x40026088
 8002da4:	40026488 	.word	0x40026488
 8002da8:	40026040 	.word	0x40026040
 8002dac:	40026440 	.word	0x40026440
 8002db0:	400260a0 	.word	0x400260a0
 8002db4:	400264a0 	.word	0x400264a0
 8002db8:	40026400 	.word	0x40026400
 8002dbc:	40026058 	.word	0x40026058
 8002dc0:	40026000 	.word	0x40026000
 8002dc4:	2308      	movs	r3, #8
 8002dc6:	4a9a      	ldr	r2, [pc, #616]	; (8003030 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8002dc8:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4b98      	ldr	r3, [pc, #608]	; (8003034 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d960      	bls.n	8002e98 <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a97      	ldr	r2, [pc, #604]	; (8003038 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d057      	beq.n	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a95      	ldr	r2, [pc, #596]	; (800303c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d050      	beq.n	8002e8c <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a94      	ldr	r2, [pc, #592]	; (8003040 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d049      	beq.n	8002e88 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a92      	ldr	r2, [pc, #584]	; (8003044 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d042      	beq.n	8002e84 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a91      	ldr	r2, [pc, #580]	; (8003048 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d03a      	beq.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a8f      	ldr	r2, [pc, #572]	; (800304c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d032      	beq.n	8002e78 <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a8e      	ldr	r2, [pc, #568]	; (8003050 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d02a      	beq.n	8002e72 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a8c      	ldr	r2, [pc, #560]	; (8003054 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d022      	beq.n	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a8b      	ldr	r2, [pc, #556]	; (8003058 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d01a      	beq.n	8002e66 <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a89      	ldr	r2, [pc, #548]	; (800305c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d012      	beq.n	8002e60 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a88      	ldr	r2, [pc, #544]	; (8003060 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00a      	beq.n	8002e5a <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a86      	ldr	r2, [pc, #536]	; (8003064 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d102      	bne.n	8002e54 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 8002e4e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e52:	e01e      	b.n	8002e92 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e58:	e01b      	b.n	8002e92 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e5a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e5e:	e018      	b.n	8002e92 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e64:	e015      	b.n	8002e92 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e66:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e6a:	e012      	b.n	8002e92 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e70:	e00f      	b.n	8002e92 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e76:	e00c      	b.n	8002e92 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e7c:	e009      	b.n	8002e92 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e82:	e006      	b.n	8002e92 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e84:	2304      	movs	r3, #4
 8002e86:	e004      	b.n	8002e92 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e88:	2304      	movs	r3, #4
 8002e8a:	e002      	b.n	8002e92 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	e000      	b.n	8002e92 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8002e90:	2304      	movs	r3, #4
 8002e92:	4a75      	ldr	r2, [pc, #468]	; (8003068 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8002e94:	60d3      	str	r3, [r2, #12]
 8002e96:	e151      	b.n	800313c <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4b73      	ldr	r3, [pc, #460]	; (800306c <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d960      	bls.n	8002f66 <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a63      	ldr	r2, [pc, #396]	; (8003038 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d057      	beq.n	8002f5e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a62      	ldr	r2, [pc, #392]	; (800303c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d050      	beq.n	8002f5a <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a60      	ldr	r2, [pc, #384]	; (8003040 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d049      	beq.n	8002f56 <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a5f      	ldr	r2, [pc, #380]	; (8003044 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d042      	beq.n	8002f52 <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a5d      	ldr	r2, [pc, #372]	; (8003048 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d03a      	beq.n	8002f4c <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a5c      	ldr	r2, [pc, #368]	; (800304c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d032      	beq.n	8002f46 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a5a      	ldr	r2, [pc, #360]	; (8003050 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d02a      	beq.n	8002f40 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a59      	ldr	r2, [pc, #356]	; (8003054 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d022      	beq.n	8002f3a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a57      	ldr	r2, [pc, #348]	; (8003058 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d01a      	beq.n	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a56      	ldr	r2, [pc, #344]	; (800305c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d012      	beq.n	8002f2e <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a54      	ldr	r2, [pc, #336]	; (8003060 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00a      	beq.n	8002f28 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a53      	ldr	r2, [pc, #332]	; (8003064 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d102      	bne.n	8002f22 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 8002f1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f20:	e01e      	b.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002f22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f26:	e01b      	b.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002f28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f2c:	e018      	b.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002f2e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f32:	e015      	b.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002f34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f38:	e012      	b.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f3e:	e00f      	b.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002f40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f44:	e00c      	b.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002f46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f4a:	e009      	b.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f50:	e006      	b.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002f52:	2304      	movs	r3, #4
 8002f54:	e004      	b.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002f56:	2304      	movs	r3, #4
 8002f58:	e002      	b.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	e000      	b.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002f5e:	2304      	movs	r3, #4
 8002f60:	4a41      	ldr	r2, [pc, #260]	; (8003068 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8002f62:	6093      	str	r3, [r2, #8]
 8002f64:	e0ea      	b.n	800313c <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	4b40      	ldr	r3, [pc, #256]	; (8003070 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	f240 8084 	bls.w	800307c <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a2f      	ldr	r2, [pc, #188]	; (8003038 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d07a      	beq.n	8003074 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a2e      	ldr	r2, [pc, #184]	; (800303c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d050      	beq.n	800302a <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a2c      	ldr	r2, [pc, #176]	; (8003040 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d049      	beq.n	8003026 <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a2b      	ldr	r2, [pc, #172]	; (8003044 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d042      	beq.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a29      	ldr	r2, [pc, #164]	; (8003048 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d03a      	beq.n	800301c <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a28      	ldr	r2, [pc, #160]	; (800304c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d032      	beq.n	8003016 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a26      	ldr	r2, [pc, #152]	; (8003050 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d02a      	beq.n	8003010 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a25      	ldr	r2, [pc, #148]	; (8003054 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d022      	beq.n	800300a <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a23      	ldr	r2, [pc, #140]	; (8003058 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d01a      	beq.n	8003004 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a22      	ldr	r2, [pc, #136]	; (800305c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d012      	beq.n	8002ffe <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a20      	ldr	r2, [pc, #128]	; (8003060 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d00a      	beq.n	8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a1f      	ldr	r2, [pc, #124]	; (8003064 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d102      	bne.n	8002ff2 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8002fec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ff0:	e041      	b.n	8003076 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002ff2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ff6:	e03e      	b.n	8003076 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002ff8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ffc:	e03b      	b.n	8003076 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002ffe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003002:	e038      	b.n	8003076 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003004:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003008:	e035      	b.n	8003076 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800300a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800300e:	e032      	b.n	8003076 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003010:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003014:	e02f      	b.n	8003076 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003016:	f44f 7380 	mov.w	r3, #256	; 0x100
 800301a:	e02c      	b.n	8003076 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800301c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003020:	e029      	b.n	8003076 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003022:	2304      	movs	r3, #4
 8003024:	e027      	b.n	8003076 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003026:	2304      	movs	r3, #4
 8003028:	e025      	b.n	8003076 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800302a:	2304      	movs	r3, #4
 800302c:	e023      	b.n	8003076 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800302e:	bf00      	nop
 8003030:	40026000 	.word	0x40026000
 8003034:	40026458 	.word	0x40026458
 8003038:	40026010 	.word	0x40026010
 800303c:	40026410 	.word	0x40026410
 8003040:	40026070 	.word	0x40026070
 8003044:	40026470 	.word	0x40026470
 8003048:	40026028 	.word	0x40026028
 800304c:	40026428 	.word	0x40026428
 8003050:	40026088 	.word	0x40026088
 8003054:	40026488 	.word	0x40026488
 8003058:	40026040 	.word	0x40026040
 800305c:	40026440 	.word	0x40026440
 8003060:	400260a0 	.word	0x400260a0
 8003064:	400264a0 	.word	0x400264a0
 8003068:	40026400 	.word	0x40026400
 800306c:	400260b8 	.word	0x400260b8
 8003070:	40026058 	.word	0x40026058
 8003074:	2304      	movs	r3, #4
 8003076:	4a94      	ldr	r2, [pc, #592]	; (80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003078:	60d3      	str	r3, [r2, #12]
 800307a:	e05f      	b.n	800313c <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a92      	ldr	r2, [pc, #584]	; (80032cc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d057      	beq.n	8003136 <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a91      	ldr	r2, [pc, #580]	; (80032d0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d050      	beq.n	8003132 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a8f      	ldr	r2, [pc, #572]	; (80032d4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d049      	beq.n	800312e <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a8e      	ldr	r2, [pc, #568]	; (80032d8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d042      	beq.n	800312a <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a8c      	ldr	r2, [pc, #560]	; (80032dc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d03a      	beq.n	8003124 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a8b      	ldr	r2, [pc, #556]	; (80032e0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d032      	beq.n	800311e <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a89      	ldr	r2, [pc, #548]	; (80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d02a      	beq.n	8003118 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a88      	ldr	r2, [pc, #544]	; (80032e8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d022      	beq.n	8003112 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a86      	ldr	r2, [pc, #536]	; (80032ec <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d01a      	beq.n	800310c <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a85      	ldr	r2, [pc, #532]	; (80032f0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d012      	beq.n	8003106 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a83      	ldr	r2, [pc, #524]	; (80032f4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d00a      	beq.n	8003100 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a82      	ldr	r2, [pc, #520]	; (80032f8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d102      	bne.n	80030fa <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 80030f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030f8:	e01e      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80030fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030fe:	e01b      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003100:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003104:	e018      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003106:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800310a:	e015      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800310c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003110:	e012      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003112:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003116:	e00f      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003118:	f44f 7380 	mov.w	r3, #256	; 0x100
 800311c:	e00c      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800311e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003122:	e009      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003124:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003128:	e006      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800312a:	2304      	movs	r3, #4
 800312c:	e004      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800312e:	2304      	movs	r3, #4
 8003130:	e002      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003132:	2304      	movs	r3, #4
 8003134:	e000      	b.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003136:	2304      	movs	r3, #4
 8003138:	4a63      	ldr	r2, [pc, #396]	; (80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800313a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	461a      	mov	r2, r3
 8003142:	4b6e      	ldr	r3, [pc, #440]	; (80032fc <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 8003144:	429a      	cmp	r2, r3
 8003146:	d95c      	bls.n	8003202 <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a5f      	ldr	r2, [pc, #380]	; (80032cc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d053      	beq.n	80031fa <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a5e      	ldr	r2, [pc, #376]	; (80032d0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d04c      	beq.n	80031f6 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a5c      	ldr	r2, [pc, #368]	; (80032d4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d045      	beq.n	80031f2 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a5b      	ldr	r2, [pc, #364]	; (80032d8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d03e      	beq.n	80031ee <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a59      	ldr	r2, [pc, #356]	; (80032dc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d037      	beq.n	80031ea <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a58      	ldr	r2, [pc, #352]	; (80032e0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d030      	beq.n	80031e6 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a56      	ldr	r2, [pc, #344]	; (80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d029      	beq.n	80031e2 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a55      	ldr	r2, [pc, #340]	; (80032e8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d022      	beq.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a53      	ldr	r2, [pc, #332]	; (80032ec <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01a      	beq.n	80031d8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a52      	ldr	r2, [pc, #328]	; (80032f0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d012      	beq.n	80031d2 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a50      	ldr	r2, [pc, #320]	; (80032f4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00a      	beq.n	80031cc <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a4f      	ldr	r2, [pc, #316]	; (80032f8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d102      	bne.n	80031c6 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 80031c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031c4:	e01a      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80031c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031ca:	e017      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80031cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031d0:	e014      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80031d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031d6:	e011      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80031d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031dc:	e00e      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80031de:	2340      	movs	r3, #64	; 0x40
 80031e0:	e00c      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80031e2:	2340      	movs	r3, #64	; 0x40
 80031e4:	e00a      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80031e6:	2340      	movs	r3, #64	; 0x40
 80031e8:	e008      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80031ea:	2340      	movs	r3, #64	; 0x40
 80031ec:	e006      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e004      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e002      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80031fa:	2301      	movs	r3, #1
 80031fc:	4a40      	ldr	r2, [pc, #256]	; (8003300 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 80031fe:	60d3      	str	r3, [r2, #12]
 8003200:	e141      	b.n	8003486 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	4b3e      	ldr	r3, [pc, #248]	; (8003304 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 800320a:	429a      	cmp	r2, r3
 800320c:	d97c      	bls.n	8003308 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a2e      	ldr	r2, [pc, #184]	; (80032cc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d053      	beq.n	80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a2c      	ldr	r2, [pc, #176]	; (80032d0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d04c      	beq.n	80032bc <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a2b      	ldr	r2, [pc, #172]	; (80032d4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d045      	beq.n	80032b8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a29      	ldr	r2, [pc, #164]	; (80032d8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d03e      	beq.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a28      	ldr	r2, [pc, #160]	; (80032dc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d037      	beq.n	80032b0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a26      	ldr	r2, [pc, #152]	; (80032e0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d030      	beq.n	80032ac <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a25      	ldr	r2, [pc, #148]	; (80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d029      	beq.n	80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a23      	ldr	r2, [pc, #140]	; (80032e8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d022      	beq.n	80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a22      	ldr	r2, [pc, #136]	; (80032ec <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d01a      	beq.n	800329e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a20      	ldr	r2, [pc, #128]	; (80032f0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d012      	beq.n	8003298 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a1f      	ldr	r2, [pc, #124]	; (80032f4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d00a      	beq.n	8003292 <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a1d      	ldr	r2, [pc, #116]	; (80032f8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d102      	bne.n	800328c <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8003286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800328a:	e01a      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800328c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003290:	e017      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003296:	e014      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800329c:	e011      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800329e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032a2:	e00e      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80032a4:	2340      	movs	r3, #64	; 0x40
 80032a6:	e00c      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80032a8:	2340      	movs	r3, #64	; 0x40
 80032aa:	e00a      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80032ac:	2340      	movs	r3, #64	; 0x40
 80032ae:	e008      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80032b0:	2340      	movs	r3, #64	; 0x40
 80032b2:	e006      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80032b4:	2301      	movs	r3, #1
 80032b6:	e004      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80032b8:	2301      	movs	r3, #1
 80032ba:	e002      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80032bc:	2301      	movs	r3, #1
 80032be:	e000      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80032c0:	2301      	movs	r3, #1
 80032c2:	4a0f      	ldr	r2, [pc, #60]	; (8003300 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 80032c4:	6093      	str	r3, [r2, #8]
 80032c6:	e0de      	b.n	8003486 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 80032c8:	40026000 	.word	0x40026000
 80032cc:	40026010 	.word	0x40026010
 80032d0:	40026410 	.word	0x40026410
 80032d4:	40026070 	.word	0x40026070
 80032d8:	40026470 	.word	0x40026470
 80032dc:	40026028 	.word	0x40026028
 80032e0:	40026428 	.word	0x40026428
 80032e4:	40026088 	.word	0x40026088
 80032e8:	40026488 	.word	0x40026488
 80032ec:	40026040 	.word	0x40026040
 80032f0:	40026440 	.word	0x40026440
 80032f4:	400260a0 	.word	0x400260a0
 80032f8:	400264a0 	.word	0x400264a0
 80032fc:	40026458 	.word	0x40026458
 8003300:	40026400 	.word	0x40026400
 8003304:	400260b8 	.word	0x400260b8
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	4b78      	ldr	r3, [pc, #480]	; (80034f0 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003310:	429a      	cmp	r2, r3
 8003312:	d95c      	bls.n	80033ce <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a76      	ldr	r2, [pc, #472]	; (80034f4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d053      	beq.n	80033c6 <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a75      	ldr	r2, [pc, #468]	; (80034f8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d04c      	beq.n	80033c2 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a73      	ldr	r2, [pc, #460]	; (80034fc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d045      	beq.n	80033be <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a72      	ldr	r2, [pc, #456]	; (8003500 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d03e      	beq.n	80033ba <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a70      	ldr	r2, [pc, #448]	; (8003504 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d037      	beq.n	80033b6 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a6f      	ldr	r2, [pc, #444]	; (8003508 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d030      	beq.n	80033b2 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a6d      	ldr	r2, [pc, #436]	; (800350c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d029      	beq.n	80033ae <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a6c      	ldr	r2, [pc, #432]	; (8003510 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d022      	beq.n	80033aa <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a6a      	ldr	r2, [pc, #424]	; (8003514 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d01a      	beq.n	80033a4 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a69      	ldr	r2, [pc, #420]	; (8003518 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d012      	beq.n	800339e <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a67      	ldr	r2, [pc, #412]	; (800351c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00a      	beq.n	8003398 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a66      	ldr	r2, [pc, #408]	; (8003520 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d102      	bne.n	8003392 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 800338c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003390:	e01a      	b.n	80033c8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003392:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003396:	e017      	b.n	80033c8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800339c:	e014      	b.n	80033c8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800339e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033a2:	e011      	b.n	80033c8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80033a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033a8:	e00e      	b.n	80033c8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80033aa:	2340      	movs	r3, #64	; 0x40
 80033ac:	e00c      	b.n	80033c8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80033ae:	2340      	movs	r3, #64	; 0x40
 80033b0:	e00a      	b.n	80033c8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80033b2:	2340      	movs	r3, #64	; 0x40
 80033b4:	e008      	b.n	80033c8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80033b6:	2340      	movs	r3, #64	; 0x40
 80033b8:	e006      	b.n	80033c8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e004      	b.n	80033c8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80033be:	2301      	movs	r3, #1
 80033c0:	e002      	b.n	80033c8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80033c6:	2301      	movs	r3, #1
 80033c8:	4a56      	ldr	r2, [pc, #344]	; (8003524 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80033ca:	60d3      	str	r3, [r2, #12]
 80033cc:	e05b      	b.n	8003486 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a48      	ldr	r2, [pc, #288]	; (80034f4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d053      	beq.n	8003480 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a46      	ldr	r2, [pc, #280]	; (80034f8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d04c      	beq.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a45      	ldr	r2, [pc, #276]	; (80034fc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d045      	beq.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a43      	ldr	r2, [pc, #268]	; (8003500 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d03e      	beq.n	8003474 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a42      	ldr	r2, [pc, #264]	; (8003504 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d037      	beq.n	8003470 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a40      	ldr	r2, [pc, #256]	; (8003508 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d030      	beq.n	800346c <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a3f      	ldr	r2, [pc, #252]	; (800350c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d029      	beq.n	8003468 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a3d      	ldr	r2, [pc, #244]	; (8003510 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d022      	beq.n	8003464 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a3c      	ldr	r2, [pc, #240]	; (8003514 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d01a      	beq.n	800345e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a3a      	ldr	r2, [pc, #232]	; (8003518 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d012      	beq.n	8003458 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a39      	ldr	r2, [pc, #228]	; (800351c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00a      	beq.n	8003452 <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a37      	ldr	r2, [pc, #220]	; (8003520 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d102      	bne.n	800344c <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8003446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800344a:	e01a      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800344c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003450:	e017      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003452:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003456:	e014      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800345c:	e011      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800345e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003462:	e00e      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003464:	2340      	movs	r3, #64	; 0x40
 8003466:	e00c      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003468:	2340      	movs	r3, #64	; 0x40
 800346a:	e00a      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800346c:	2340      	movs	r3, #64	; 0x40
 800346e:	e008      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003470:	2340      	movs	r3, #64	; 0x40
 8003472:	e006      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003474:	2301      	movs	r3, #1
 8003476:	e004      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003478:	2301      	movs	r3, #1
 800347a:	e002      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003480:	2301      	movs	r3, #1
 8003482:	4a28      	ldr	r2, [pc, #160]	; (8003524 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003484:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 0216 	orr.w	r2, r2, #22
 8003494:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695a      	ldr	r2, [r3, #20]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d103      	bne.n	80034b6 <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d007      	beq.n	80034c6 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f042 0208 	orr.w	r2, r2, #8
 80034c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0201 	orr.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	e005      	b.n	80034e4 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034e0:	2302      	movs	r3, #2
 80034e2:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80034e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40026058 	.word	0x40026058
 80034f4:	40026010 	.word	0x40026010
 80034f8:	40026410 	.word	0x40026410
 80034fc:	40026070 	.word	0x40026070
 8003500:	40026470 	.word	0x40026470
 8003504:	40026028 	.word	0x40026028
 8003508:	40026428 	.word	0x40026428
 800350c:	40026088 	.word	0x40026088
 8003510:	40026488 	.word	0x40026488
 8003514:	40026040 	.word	0x40026040
 8003518:	40026440 	.word	0x40026440
 800351c:	400260a0 	.word	0x400260a0
 8003520:	400264a0 	.word	0x400264a0
 8003524:	40026000 	.word	0x40026000

08003528 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b40      	cmp	r3, #64	; 0x40
 8003544:	d108      	bne.n	8003558 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003556:	e007      	b.n	8003568 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	60da      	str	r2, [r3, #12]
}
 8003568:	bf00      	nop
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	61fb      	str	r3, [r7, #28]
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8003584:	4baa      	ldr	r3, [pc, #680]	; (8003830 <HAL_ETH_Init+0x2bc>)
 8003586:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800358c:	2300      	movs	r3, #0
 800358e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e183      	b.n	80038a2 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f006 fea6 	bl	800a300 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b4:	2300      	movs	r3, #0
 80035b6:	60bb      	str	r3, [r7, #8]
 80035b8:	4b9e      	ldr	r3, [pc, #632]	; (8003834 <HAL_ETH_Init+0x2c0>)
 80035ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035bc:	4a9d      	ldr	r2, [pc, #628]	; (8003834 <HAL_ETH_Init+0x2c0>)
 80035be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035c2:	6453      	str	r3, [r2, #68]	; 0x44
 80035c4:	4b9b      	ldr	r3, [pc, #620]	; (8003834 <HAL_ETH_Init+0x2c0>)
 80035c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80035d0:	4b99      	ldr	r3, [pc, #612]	; (8003838 <HAL_ETH_Init+0x2c4>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4a98      	ldr	r2, [pc, #608]	; (8003838 <HAL_ETH_Init+0x2c4>)
 80035d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035da:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80035dc:	4b96      	ldr	r3, [pc, #600]	; (8003838 <HAL_ETH_Init+0x2c4>)
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	4994      	ldr	r1, [pc, #592]	; (8003838 <HAL_ETH_Init+0x2c4>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0201 	orr.w	r2, r2, #1
 80035fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003600:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003602:	f7fe f9ad 	bl	8001960 <HAL_GetTick>
 8003606:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003608:	e011      	b.n	800362e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800360a:	f7fe f9a9 	bl	8001960 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003618:	d909      	bls.n	800362e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2203      	movs	r2, #3
 800361e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e139      	b.n	80038a2 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1e4      	bne.n	800360a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f023 031c 	bic.w	r3, r3, #28
 800364e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003650:	f004 ff86 	bl	8008560 <HAL_RCC_GetHCLKFreq>
 8003654:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	4a78      	ldr	r2, [pc, #480]	; (800383c <HAL_ETH_Init+0x2c8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d908      	bls.n	8003670 <HAL_ETH_Init+0xfc>
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	4a77      	ldr	r2, [pc, #476]	; (8003840 <HAL_ETH_Init+0x2cc>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d804      	bhi.n	8003670 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f043 0308 	orr.w	r3, r3, #8
 800366c:	61fb      	str	r3, [r7, #28]
 800366e:	e027      	b.n	80036c0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	4a73      	ldr	r2, [pc, #460]	; (8003840 <HAL_ETH_Init+0x2cc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d908      	bls.n	800368a <HAL_ETH_Init+0x116>
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	4a6d      	ldr	r2, [pc, #436]	; (8003830 <HAL_ETH_Init+0x2bc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d204      	bcs.n	800368a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f043 030c 	orr.w	r3, r3, #12
 8003686:	61fb      	str	r3, [r7, #28]
 8003688:	e01a      	b.n	80036c0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	4a68      	ldr	r2, [pc, #416]	; (8003830 <HAL_ETH_Init+0x2bc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d303      	bcc.n	800369a <HAL_ETH_Init+0x126>
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	4a6b      	ldr	r2, [pc, #428]	; (8003844 <HAL_ETH_Init+0x2d0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d911      	bls.n	80036be <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	4a69      	ldr	r2, [pc, #420]	; (8003844 <HAL_ETH_Init+0x2d0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d908      	bls.n	80036b4 <HAL_ETH_Init+0x140>
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	4a68      	ldr	r2, [pc, #416]	; (8003848 <HAL_ETH_Init+0x2d4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d804      	bhi.n	80036b4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f043 0304 	orr.w	r3, r3, #4
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	e005      	b.n	80036c0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f043 0310 	orr.w	r3, r3, #16
 80036ba:	61fb      	str	r3, [r7, #28]
 80036bc:	e000      	b.n	80036c0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80036be:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80036c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80036cc:	2100      	movs	r1, #0
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fc1d 	bl	8003f0e <HAL_ETH_WritePHYRegister>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00b      	beq.n	80036f2 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80036de:	6939      	ldr	r1, [r7, #16]
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fdd3 	bl	800428c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e0d7      	b.n	80038a2 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80036f2:	20ff      	movs	r0, #255	; 0xff
 80036f4:	f7fe f940 	bl	8001978 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 80a5 	beq.w	800384c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003702:	f7fe f92d 	bl	8001960 <HAL_GetTick>
 8003706:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003708:	f107 030c 	add.w	r3, r7, #12
 800370c:	461a      	mov	r2, r3
 800370e:	2101      	movs	r1, #1
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fb94 	bl	8003e3e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003716:	f7fe f923 	bl	8001960 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	f241 3288 	movw	r2, #5000	; 0x1388
 8003724:	4293      	cmp	r3, r2
 8003726:	d90f      	bls.n	8003748 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800372c:	6939      	ldr	r1, [r7, #16]
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fdac 	bl	800428c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e0ac      	b.n	80038a2 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0da      	beq.n	8003708 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003752:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003756:	2100      	movs	r1, #0
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fbd8 	bl	8003f0e <HAL_ETH_WritePHYRegister>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00b      	beq.n	800377c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003768:	6939      	ldr	r1, [r7, #16]
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fd8e 	bl	800428c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003778:	2301      	movs	r3, #1
 800377a:	e092      	b.n	80038a2 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800377c:	f7fe f8f0 	bl	8001960 <HAL_GetTick>
 8003780:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003782:	f107 030c 	add.w	r3, r7, #12
 8003786:	461a      	mov	r2, r3
 8003788:	2101      	movs	r1, #1
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fb57 	bl	8003e3e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003790:	f7fe f8e6 	bl	8001960 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	f241 3288 	movw	r2, #5000	; 0x1388
 800379e:	4293      	cmp	r3, r2
 80037a0:	d90f      	bls.n	80037c2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80037a6:	6939      	ldr	r1, [r7, #16]
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fd6f 	bl	800428c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e06f      	b.n	80038a2 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0da      	beq.n	8003782 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80037cc:	f107 030c 	add.w	r3, r7, #12
 80037d0:	461a      	mov	r2, r3
 80037d2:	2110      	movs	r1, #16
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fb32 	bl	8003e3e <HAL_ETH_ReadPHYRegister>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00b      	beq.n	80037f8 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80037e4:	6939      	ldr	r1, [r7, #16]
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fd50 	bl	800428c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80037f4:	2301      	movs	r3, #1
 80037f6:	e054      	b.n	80038a2 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d004      	beq.n	800380c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003808:	60da      	str	r2, [r3, #12]
 800380a:	e002      	b.n	8003812 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
 8003822:	e035      	b.n	8003890 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	e030      	b.n	8003890 <HAL_ETH_Init+0x31c>
 800382e:	bf00      	nop
 8003830:	03938700 	.word	0x03938700
 8003834:	40023800 	.word	0x40023800
 8003838:	40013800 	.word	0x40013800
 800383c:	01312cff 	.word	0x01312cff
 8003840:	02160ebf 	.word	0x02160ebf
 8003844:	05f5e0ff 	.word	0x05f5e0ff
 8003848:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	08db      	lsrs	r3, r3, #3
 8003852:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	085b      	lsrs	r3, r3, #1
 800385a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800385c:	4313      	orrs	r3, r2
 800385e:	b29b      	uxth	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	2100      	movs	r1, #0
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fb52 	bl	8003f0e <HAL_ETH_WritePHYRegister>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00b      	beq.n	8003888 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003874:	6939      	ldr	r1, [r7, #16]
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fd08 	bl	800428c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e00c      	b.n	80038a2 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003888:	f640 70ff 	movw	r0, #4095	; 0xfff
 800388c:	f7fe f874 	bl	8001978 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003890:	6939      	ldr	r1, [r7, #16]
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fcfa 	bl	800428c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3720      	adds	r7, #32
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop

080038ac <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_ETH_DMATxDescListInit+0x20>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e052      	b.n	8003972 <HAL_ETH_DMATxDescListInit+0xc6>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	e030      	b.n	800394a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	015b      	lsls	r3, r3, #5
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	4413      	add	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80038f8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003900:	fb02 f303 	mul.w	r3, r2, r3
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4413      	add	r3, r2
 8003908:	461a      	mov	r2, r3
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d105      	bne.n	8003922 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	3b01      	subs	r3, #1
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	429a      	cmp	r2, r3
 800392a:	d208      	bcs.n	800393e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	3301      	adds	r3, #1
 8003930:	015b      	lsls	r3, r3, #5
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	4413      	add	r3, r2
 8003936:	461a      	mov	r2, r3
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	60da      	str	r2, [r3, #12]
 800393c:	e002      	b.n	8003944 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	3301      	adds	r3, #1
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d3ca      	bcc.n	80038e8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800395c:	3310      	adds	r3, #16
 800395e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	371c      	adds	r7, #28
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800397e:	b480      	push	{r7}
 8003980:	b087      	sub	sp, #28
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	607a      	str	r2, [r7, #4]
 800398a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_ETH_DMARxDescListInit+0x20>
 800399a:	2302      	movs	r3, #2
 800399c:	e056      	b.n	8003a4c <HAL_ETH_DMARxDescListInit+0xce>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2202      	movs	r2, #2
 80039aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	e034      	b.n	8003a24 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	015b      	lsls	r3, r3, #5
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	4413      	add	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80039ca:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80039d2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80039da:	fb02 f303 	mul.w	r3, r2, r3
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	4413      	add	r3, r2
 80039e2:	461a      	mov	r2, r3
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d105      	bne.n	80039fc <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d208      	bcs.n	8003a18 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	015b      	lsls	r3, r3, #5
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	4413      	add	r3, r2
 8003a10:	461a      	mov	r2, r3
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	60da      	str	r2, [r3, #12]
 8003a16:	e002      	b.n	8003a1e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	3301      	adds	r3, #1
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d3c6      	bcc.n	80039ba <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a36:	330c      	adds	r3, #12
 8003a38:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	371c      	adds	r7, #28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_ETH_TransmitFrame+0x24>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e0cd      	b.n	8003c18 <HAL_ETH_TransmitFrame+0x1c0>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e0b8      	b.n	8003c18 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	da09      	bge.n	8003ac4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2212      	movs	r2, #18
 8003ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e0a9      	b.n	8003c18 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d915      	bls.n	8003afa <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	4a54      	ldr	r2, [pc, #336]	; (8003c24 <HAL_ETH_TransmitFrame+0x1cc>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	0a9b      	lsrs	r3, r3, #10
 8003ad8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	4b51      	ldr	r3, [pc, #324]	; (8003c24 <HAL_ETH_TransmitFrame+0x1cc>)
 8003ade:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae2:	0a9b      	lsrs	r3, r3, #10
 8003ae4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003ae8:	fb01 f303 	mul.w	r3, r1, r3
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	3301      	adds	r3, #1
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	e001      	b.n	8003afe <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8003afa:	2301      	movs	r3, #1
 8003afc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d11c      	bne.n	8003b3e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003b12:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003b1e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003b2e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	461a      	mov	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b3c:	e04b      	b.n	8003bd6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	e044      	b.n	8003bce <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b52:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d107      	bne.n	8003b6a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b64:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b68:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003b72:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d116      	bne.n	8003bac <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003b8c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	4a25      	ldr	r2, [pc, #148]	; (8003c28 <HAL_ETH_TransmitFrame+0x1d0>)
 8003b92:	fb02 f203 	mul.w	r2, r2, r3
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003b9e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003baa:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003bba:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d3b6      	bcc.n	8003b44 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bde:	3314      	adds	r3, #20
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00d      	beq.n	8003c06 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bf2:	3314      	adds	r3, #20
 8003bf4:	2204      	movs	r2, #4
 8003bf6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c00:	3304      	adds	r3, #4
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	371c      	adds	r7, #28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	ac02b00b 	.word	0xac02b00b
 8003c28:	fffffa0c 	.word	0xfffffa0c

08003c2c <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_ETH_GetReceivedFrame+0x1a>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e070      	b.n	8003d28 <HAL_ETH_GetReceivedFrame+0xfc>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2202      	movs	r2, #2
 8003c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	db5a      	blt.n	8003d16 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d030      	beq.n	8003cd0 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d103      	bne.n	8003c88 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	0c1b      	lsrs	r3, r3, #16
 8003c98:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003c9c:	3b04      	subs	r3, #4
 8003c9e:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e02b      	b.n	8003d28 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d010      	beq.n	8003d00 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	629a      	str	r2, [r3, #40]	; 0x28
 8003cfe:	e00a      	b.n	8003d16 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	461a      	mov	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d44:	3314      	adds	r3, #20
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4c:	2b40      	cmp	r3, #64	; 0x40
 8003d4e:	d112      	bne.n	8003d76 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f860 	bl	8003e16 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d5e:	3314      	adds	r3, #20
 8003d60:	2240      	movs	r2, #64	; 0x40
 8003d62:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d74:	e01b      	b.n	8003dae <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d7e:	3314      	adds	r3, #20
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d111      	bne.n	8003dae <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f839 	bl	8003e02 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d98:	3314      	adds	r3, #20
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db6:	3314      	adds	r3, #20
 8003db8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003dbc:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc6:	3314      	adds	r3, #20
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd2:	d112      	bne.n	8003dfa <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f828 	bl	8003e2a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de2:	3314      	adds	r3, #20
 8003de4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003de8:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b086      	sub	sp, #24
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	460b      	mov	r3, r1
 8003e48:	607a      	str	r2, [r7, #4]
 8003e4a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b82      	cmp	r3, #130	; 0x82
 8003e5e:	d101      	bne.n	8003e64 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003e60:	2302      	movs	r3, #2
 8003e62:	e050      	b.n	8003f06 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2282      	movs	r2, #130	; 0x82
 8003e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f003 031c 	and.w	r3, r3, #28
 8003e7a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8a1b      	ldrh	r3, [r3, #16]
 8003e80:	02db      	lsls	r3, r3, #11
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003e8a:	897b      	ldrh	r3, [r7, #10]
 8003e8c:	019b      	lsls	r3, r3, #6
 8003e8e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f023 0302 	bic.w	r3, r3, #2
 8003e9e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f043 0301 	orr.w	r3, r3, #1
 8003ea6:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003eb0:	f7fd fd56 	bl	8001960 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003eb6:	e015      	b.n	8003ee4 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003eb8:	f7fd fd52 	bl	8001960 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec6:	d309      	bcc.n	8003edc <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e014      	b.n	8003f06 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1e4      	bne.n	8003eb8 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b086      	sub	sp, #24
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	460b      	mov	r3, r1
 8003f18:	607a      	str	r2, [r7, #4]
 8003f1a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b42      	cmp	r3, #66	; 0x42
 8003f2e:	d101      	bne.n	8003f34 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003f30:	2302      	movs	r3, #2
 8003f32:	e04e      	b.n	8003fd2 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2242      	movs	r2, #66	; 0x42
 8003f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f003 031c 	and.w	r3, r3, #28
 8003f4a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8a1b      	ldrh	r3, [r3, #16]
 8003f50:	02db      	lsls	r3, r3, #11
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003f5a:	897b      	ldrh	r3, [r7, #10]
 8003f5c:	019b      	lsls	r3, r3, #6
 8003f5e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f043 0302 	orr.w	r3, r3, #2
 8003f6e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f043 0301 	orr.w	r3, r3, #1
 8003f76:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003f8a:	f7fd fce9 	bl	8001960 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003f90:	e015      	b.n	8003fbe <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003f92:	f7fd fce5 	bl	8001960 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa0:	d309      	bcc.n	8003fb6 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e00d      	b.n	8003fd2 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1e4      	bne.n	8003f92 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b082      	sub	sp, #8
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_ETH_Start+0x16>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e01f      	b.n	8004030 <HAL_ETH_Start+0x56>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 fb45 	bl	8004690 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fb7c 	bl	8004704 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 fc13 	bl	8004838 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fbb0 	bl	8004778 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fbdd 	bl	80047d8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <HAL_ETH_Stop+0x16>
 800404a:	2302      	movs	r3, #2
 800404c:	e01f      	b.n	800408e <HAL_ETH_Stop+0x56>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2202      	movs	r2, #2
 800405a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fba2 	bl	80047a8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 fbcf 	bl	8004808 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fb67 	bl	800473e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 fbe1 	bl	8004838 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 fb27 	bl	80046ca <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_ETH_ConfigMAC+0x1c>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e0e4      	b.n	800427e <HAL_ETH_ConfigMAC+0x1e6>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 80b1 	beq.w	800422e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4b6c      	ldr	r3, [pc, #432]	; (8004288 <HAL_ETH_ConfigMAC+0x1f0>)
 80040d8:	4013      	ands	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80040e4:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80040ea:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80040f0:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80040f6:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80040fc:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8004102:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8004108:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800410e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8004114:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800411a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8004120:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8004126:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800413e:	2001      	movs	r0, #1
 8004140:	f7fd fc1a 	bl	8001978 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004154:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800415a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8004160:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8004166:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800416c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8004172:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800417e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004180:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800418a:	2001      	movs	r0, #1
 800418c:	f7fd fbf4 	bl	8001978 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80041a0:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041aa:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80041ba:	4013      	ands	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c2:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80041c8:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80041ce:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80041d4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80041da:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80041e0:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80041f8:	2001      	movs	r0, #1
 80041fa:	f7fd fbbd 	bl	8001978 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800421e:	2001      	movs	r0, #1
 8004220:	f7fd fbaa 	bl	8001978 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	61da      	str	r2, [r3, #28]
 800422c:	e01e      	b.n	800426c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800423c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800425e:	2001      	movs	r0, #1
 8004260:	f7fd fb8a 	bl	8001978 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	ff20810f 	.word	0xff20810f

0800428c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b0b0      	sub	sp, #192	; 0xc0
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d007      	beq.n	80042b2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042a8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80042b6:	2300      	movs	r3, #0
 80042b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80042ba:	2300      	movs	r3, #0
 80042bc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80042be:	2300      	movs	r3, #0
 80042c0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80042c2:	2300      	movs	r3, #0
 80042c4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80042c6:	2300      	movs	r3, #0
 80042c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d103      	bne.n	80042da <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80042d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042d6:	663b      	str	r3, [r7, #96]	; 0x60
 80042d8:	e001      	b.n	80042de <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80042da:	2300      	movs	r3, #0
 80042dc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80042de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042e2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80042e4:	2300      	movs	r3, #0
 80042e6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80042e8:	2300      	movs	r3, #0
 80042ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80042ec:	2300      	movs	r3, #0
 80042ee:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80042f0:	2300      	movs	r3, #0
 80042f2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80042f4:	2300      	movs	r3, #0
 80042f6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80042f8:	2340      	movs	r3, #64	; 0x40
 80042fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80042fc:	2300      	movs	r3, #0
 80042fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8004302:	2300      	movs	r3, #0
 8004304:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004308:	2300      	movs	r3, #0
 800430a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800430e:	2300      	movs	r3, #0
 8004310:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004314:	2300      	movs	r3, #0
 8004316:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800431a:	2300      	movs	r3, #0
 800431c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8004320:	2300      	movs	r3, #0
 8004322:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8004326:	2300      	movs	r3, #0
 8004328:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800432c:	2380      	movs	r3, #128	; 0x80
 800432e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004332:	2300      	movs	r3, #0
 8004334:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004338:	2300      	movs	r3, #0
 800433a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800433e:	2300      	movs	r3, #0
 8004340:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004344:	2300      	movs	r3, #0
 8004346:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800434a:	2300      	movs	r3, #0
 800434c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8004350:	2300      	movs	r3, #0
 8004352:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004360:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004364:	4bac      	ldr	r3, [pc, #688]	; (8004618 <ETH_MACDMAConfig+0x38c>)
 8004366:	4013      	ands	r3, r2
 8004368:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800436c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800436e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004370:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8004372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004374:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004378:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800437e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004380:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004382:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8004386:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800438c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800438e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004390:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004392:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004394:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8004396:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004398:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800439a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800439c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800439e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80043a0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80043a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80043b4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80043c0:	2001      	movs	r0, #1
 80043c2:	f7fd fad9 	bl	8001978 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80043ce:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80043d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80043d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80043d4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80043d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80043d8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80043da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80043de:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80043e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80043e4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80043e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80043ea:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80043ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80043f0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80043f4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80043fc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80043fe:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800440a:	2001      	movs	r0, #1
 800440c:	f7fd fab4 	bl	8001978 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004418:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004422:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800442c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004438:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800443c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004440:	4013      	ands	r3, r2
 8004442:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004446:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800444a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800444c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004450:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004452:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004456:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004458:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800445c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800445e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8004462:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004464:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004468:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800446a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800447c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004488:	2001      	movs	r0, #1
 800448a:	f7fd fa75 	bl	8001978 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004496:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004498:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800449c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80044b2:	2001      	movs	r0, #1
 80044b4:	f7fd fa60 	bl	8001978 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80044c0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80044c2:	2300      	movs	r3, #0
 80044c4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80044c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044ca:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80044cc:	2300      	movs	r3, #0
 80044ce:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80044d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80044d4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80044d6:	2300      	movs	r3, #0
 80044d8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80044da:	2300      	movs	r3, #0
 80044dc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80044de:	2300      	movs	r3, #0
 80044e0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80044e2:	2300      	movs	r3, #0
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80044e6:	2304      	movs	r3, #4
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80044ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80044f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044f4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80044f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80044fa:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80044fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004500:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004502:	2380      	movs	r3, #128	; 0x80
 8004504:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8004506:	2300      	movs	r3, #0
 8004508:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800450a:	2300      	movs	r3, #0
 800450c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004516:	3318      	adds	r3, #24
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800451e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004522:	4b3e      	ldr	r3, [pc, #248]	; (800461c <ETH_MACDMAConfig+0x390>)
 8004524:	4013      	ands	r3, r2
 8004526:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800452a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800452c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800452e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004530:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004532:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004534:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004536:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004538:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800453a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800453c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800453e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004540:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004542:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004546:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800454a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800454c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800455e:	3318      	adds	r3, #24
 8004560:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004564:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800456e:	3318      	adds	r3, #24
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004576:	2001      	movs	r0, #1
 8004578:	f7fd f9fe 	bl	8001978 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004584:	3318      	adds	r3, #24
 8004586:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800458a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800458c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004590:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004594:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004598:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800459a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800459c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800459e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045a0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80045a2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80045a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80045a6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80045b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80045c4:	2001      	movs	r0, #1
 80045c6:	f7fd f9d7 	bl	8001978 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045d6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d10f      	bne.n	8004600 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e8:	331c      	adds	r3, #28
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80045f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045fc:	331c      	adds	r3, #28
 80045fe:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	461a      	mov	r2, r3
 8004606:	2100      	movs	r1, #0
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f809 	bl	8004620 <ETH_MACAddressConfig>
}
 800460e:	bf00      	nop
 8004610:	37c0      	adds	r7, #192	; 0xc0
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	ff20810f 	.word	0xff20810f
 800461c:	f8de3f23 	.word	0xf8de3f23

08004620 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3305      	adds	r3, #5
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	021b      	lsls	r3, r3, #8
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	3204      	adds	r2, #4
 8004638:	7812      	ldrb	r2, [r2, #0]
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	4b11      	ldr	r3, [pc, #68]	; (8004688 <ETH_MACAddressConfig+0x68>)
 8004642:	4413      	add	r3, r2
 8004644:	461a      	mov	r2, r3
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3303      	adds	r3, #3
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	061a      	lsls	r2, r3, #24
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	3302      	adds	r3, #2
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	041b      	lsls	r3, r3, #16
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3301      	adds	r3, #1
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	021b      	lsls	r3, r3, #8
 8004664:	4313      	orrs	r3, r2
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	7812      	ldrb	r2, [r2, #0]
 800466a:	4313      	orrs	r3, r2
 800466c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	4b06      	ldr	r3, [pc, #24]	; (800468c <ETH_MACAddressConfig+0x6c>)
 8004672:	4413      	add	r3, r2
 8004674:	461a      	mov	r2, r3
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	6013      	str	r3, [r2, #0]
}
 800467a:	bf00      	nop
 800467c:	371c      	adds	r7, #28
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40028040 	.word	0x40028040
 800468c:	40028044 	.word	0x40028044

08004690 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0208 	orr.w	r2, r2, #8
 80046aa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80046b4:	2001      	movs	r0, #1
 80046b6:	f000 f8e9 	bl	800488c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	601a      	str	r2, [r3, #0]
}
 80046c2:	bf00      	nop
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b084      	sub	sp, #16
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0208 	bic.w	r2, r2, #8
 80046e4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80046ee:	2001      	movs	r0, #1
 80046f0:	f000 f8cc 	bl	800488c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	601a      	str	r2, [r3, #0]
}
 80046fc:	bf00      	nop
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0204 	orr.w	r2, r2, #4
 800471e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004728:	2001      	movs	r0, #1
 800472a:	f000 f8af 	bl	800488c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	601a      	str	r2, [r3, #0]
}
 8004736:	bf00      	nop
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0204 	bic.w	r2, r2, #4
 8004758:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004762:	2001      	movs	r0, #1
 8004764:	f000 f892 	bl	800488c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	601a      	str	r2, [r3, #0]
}
 8004770:	bf00      	nop
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004788:	3318      	adds	r3, #24
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004798:	3318      	adds	r3, #24
 800479a:	601a      	str	r2, [r3, #0]
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b8:	3318      	adds	r3, #24
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c8:	3318      	adds	r3, #24
 80047ca:	601a      	str	r2, [r3, #0]
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e8:	3318      	adds	r3, #24
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0202 	orr.w	r2, r2, #2
 80047f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f8:	3318      	adds	r3, #24
 80047fa:	601a      	str	r2, [r3, #0]
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004818:	3318      	adds	r3, #24
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0202 	bic.w	r2, r2, #2
 8004824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004828:	3318      	adds	r3, #24
 800482a:	601a      	str	r2, [r3, #0]
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800484c:	3318      	adds	r3, #24
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800485c:	3318      	adds	r3, #24
 800485e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004868:	3318      	adds	r3, #24
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800486e:	2001      	movs	r0, #1
 8004870:	f000 f80c 	bl	800488c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800487e:	3318      	adds	r3, #24
 8004880:	601a      	str	r2, [r3, #0]
}
 8004882:	bf00      	nop
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004894:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <ETH_Delay+0x38>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a0b      	ldr	r2, [pc, #44]	; (80048c8 <ETH_Delay+0x3c>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	0a5b      	lsrs	r3, r3, #9
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	fb02 f303 	mul.w	r3, r2, r3
 80048a6:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80048a8:	bf00      	nop
  } 
  while (Delay --);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	1e5a      	subs	r2, r3, #1
 80048ae:	60fa      	str	r2, [r7, #12]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1f9      	bne.n	80048a8 <ETH_Delay+0x1c>
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	20000018 	.word	0x20000018
 80048c8:	10624dd3 	.word	0x10624dd3

080048cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b089      	sub	sp, #36	; 0x24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048da:	2300      	movs	r3, #0
 80048dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048de:	2300      	movs	r3, #0
 80048e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048e2:	2300      	movs	r3, #0
 80048e4:	61fb      	str	r3, [r7, #28]
 80048e6:	e16b      	b.n	8004bc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048e8:	2201      	movs	r2, #1
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	4013      	ands	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	429a      	cmp	r2, r3
 8004902:	f040 815a 	bne.w	8004bba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f003 0303 	and.w	r3, r3, #3
 800490e:	2b01      	cmp	r3, #1
 8004910:	d005      	beq.n	800491e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800491a:	2b02      	cmp	r3, #2
 800491c:	d130      	bne.n	8004980 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	2203      	movs	r2, #3
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	43db      	mvns	r3, r3
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	4013      	ands	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4313      	orrs	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004954:	2201      	movs	r2, #1
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	43db      	mvns	r3, r3
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	4013      	ands	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	091b      	lsrs	r3, r3, #4
 800496a:	f003 0201 	and.w	r2, r3, #1
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	4313      	orrs	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f003 0303 	and.w	r3, r3, #3
 8004988:	2b03      	cmp	r3, #3
 800498a:	d017      	beq.n	80049bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	2203      	movs	r2, #3
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	43db      	mvns	r3, r3
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	4013      	ands	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f003 0303 	and.w	r3, r3, #3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d123      	bne.n	8004a10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	08da      	lsrs	r2, r3, #3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3208      	adds	r2, #8
 80049d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	220f      	movs	r2, #15
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	43db      	mvns	r3, r3
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	4013      	ands	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	08da      	lsrs	r2, r3, #3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3208      	adds	r2, #8
 8004a0a:	69b9      	ldr	r1, [r7, #24]
 8004a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	2203      	movs	r2, #3
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	43db      	mvns	r3, r3
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	4013      	ands	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f003 0203 	and.w	r2, r3, #3
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 80b4 	beq.w	8004bba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	4b60      	ldr	r3, [pc, #384]	; (8004bd8 <HAL_GPIO_Init+0x30c>)
 8004a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5a:	4a5f      	ldr	r2, [pc, #380]	; (8004bd8 <HAL_GPIO_Init+0x30c>)
 8004a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a60:	6453      	str	r3, [r2, #68]	; 0x44
 8004a62:	4b5d      	ldr	r3, [pc, #372]	; (8004bd8 <HAL_GPIO_Init+0x30c>)
 8004a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a6e:	4a5b      	ldr	r2, [pc, #364]	; (8004bdc <HAL_GPIO_Init+0x310>)
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	089b      	lsrs	r3, r3, #2
 8004a74:	3302      	adds	r3, #2
 8004a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	220f      	movs	r2, #15
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a52      	ldr	r2, [pc, #328]	; (8004be0 <HAL_GPIO_Init+0x314>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d02b      	beq.n	8004af2 <HAL_GPIO_Init+0x226>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a51      	ldr	r2, [pc, #324]	; (8004be4 <HAL_GPIO_Init+0x318>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d025      	beq.n	8004aee <HAL_GPIO_Init+0x222>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a50      	ldr	r2, [pc, #320]	; (8004be8 <HAL_GPIO_Init+0x31c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d01f      	beq.n	8004aea <HAL_GPIO_Init+0x21e>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a4f      	ldr	r2, [pc, #316]	; (8004bec <HAL_GPIO_Init+0x320>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d019      	beq.n	8004ae6 <HAL_GPIO_Init+0x21a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a4e      	ldr	r2, [pc, #312]	; (8004bf0 <HAL_GPIO_Init+0x324>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d013      	beq.n	8004ae2 <HAL_GPIO_Init+0x216>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a4d      	ldr	r2, [pc, #308]	; (8004bf4 <HAL_GPIO_Init+0x328>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00d      	beq.n	8004ade <HAL_GPIO_Init+0x212>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a4c      	ldr	r2, [pc, #304]	; (8004bf8 <HAL_GPIO_Init+0x32c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d007      	beq.n	8004ada <HAL_GPIO_Init+0x20e>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a4b      	ldr	r2, [pc, #300]	; (8004bfc <HAL_GPIO_Init+0x330>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d101      	bne.n	8004ad6 <HAL_GPIO_Init+0x20a>
 8004ad2:	2307      	movs	r3, #7
 8004ad4:	e00e      	b.n	8004af4 <HAL_GPIO_Init+0x228>
 8004ad6:	2308      	movs	r3, #8
 8004ad8:	e00c      	b.n	8004af4 <HAL_GPIO_Init+0x228>
 8004ada:	2306      	movs	r3, #6
 8004adc:	e00a      	b.n	8004af4 <HAL_GPIO_Init+0x228>
 8004ade:	2305      	movs	r3, #5
 8004ae0:	e008      	b.n	8004af4 <HAL_GPIO_Init+0x228>
 8004ae2:	2304      	movs	r3, #4
 8004ae4:	e006      	b.n	8004af4 <HAL_GPIO_Init+0x228>
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e004      	b.n	8004af4 <HAL_GPIO_Init+0x228>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e002      	b.n	8004af4 <HAL_GPIO_Init+0x228>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <HAL_GPIO_Init+0x228>
 8004af2:	2300      	movs	r3, #0
 8004af4:	69fa      	ldr	r2, [r7, #28]
 8004af6:	f002 0203 	and.w	r2, r2, #3
 8004afa:	0092      	lsls	r2, r2, #2
 8004afc:	4093      	lsls	r3, r2
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b04:	4935      	ldr	r1, [pc, #212]	; (8004bdc <HAL_GPIO_Init+0x310>)
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	089b      	lsrs	r3, r3, #2
 8004b0a:	3302      	adds	r3, #2
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b12:	4b3b      	ldr	r3, [pc, #236]	; (8004c00 <HAL_GPIO_Init+0x334>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b36:	4a32      	ldr	r2, [pc, #200]	; (8004c00 <HAL_GPIO_Init+0x334>)
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004b3c:	4b30      	ldr	r3, [pc, #192]	; (8004c00 <HAL_GPIO_Init+0x334>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	43db      	mvns	r3, r3
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b60:	4a27      	ldr	r2, [pc, #156]	; (8004c00 <HAL_GPIO_Init+0x334>)
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b66:	4b26      	ldr	r3, [pc, #152]	; (8004c00 <HAL_GPIO_Init+0x334>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4013      	ands	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b8a:	4a1d      	ldr	r2, [pc, #116]	; (8004c00 <HAL_GPIO_Init+0x334>)
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b90:	4b1b      	ldr	r3, [pc, #108]	; (8004c00 <HAL_GPIO_Init+0x334>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bb4:	4a12      	ldr	r2, [pc, #72]	; (8004c00 <HAL_GPIO_Init+0x334>)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	61fb      	str	r3, [r7, #28]
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	2b0f      	cmp	r3, #15
 8004bc4:	f67f ae90 	bls.w	80048e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004bc8:	bf00      	nop
 8004bca:	bf00      	nop
 8004bcc:	3724      	adds	r7, #36	; 0x24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	40013800 	.word	0x40013800
 8004be0:	40020000 	.word	0x40020000
 8004be4:	40020400 	.word	0x40020400
 8004be8:	40020800 	.word	0x40020800
 8004bec:	40020c00 	.word	0x40020c00
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	40021400 	.word	0x40021400
 8004bf8:	40021800 	.word	0x40021800
 8004bfc:	40021c00 	.word	0x40021c00
 8004c00:	40013c00 	.word	0x40013c00

08004c04 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c06:	b08f      	sub	sp, #60	; 0x3c
 8004c08:	af0a      	add	r7, sp, #40	; 0x28
 8004c0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e054      	b.n	8004cc0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d106      	bne.n	8004c36 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f015 fa83 	bl	801a13c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2203      	movs	r2, #3
 8004c3a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d102      	bne.n	8004c50 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f004 f97f 	bl	8008f58 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	687e      	ldr	r6, [r7, #4]
 8004c62:	466d      	mov	r5, sp
 8004c64:	f106 0410 	add.w	r4, r6, #16
 8004c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c74:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c78:	1d33      	adds	r3, r6, #4
 8004c7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c7c:	6838      	ldr	r0, [r7, #0]
 8004c7e:	f004 f8f9 	bl	8008e74 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2101      	movs	r1, #1
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f004 f976 	bl	8008f7a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	687e      	ldr	r6, [r7, #4]
 8004c96:	466d      	mov	r5, sp
 8004c98:	f106 0410 	add.w	r4, r6, #16
 8004c9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ca0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ca2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ca4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ca8:	e885 0003 	stmia.w	r5, {r0, r1}
 8004cac:	1d33      	adds	r3, r6, #4
 8004cae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cb0:	6838      	ldr	r0, [r7, #0]
 8004cb2:	f004 fadd 	bl	8009270 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cc8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004cc8:	b590      	push	{r4, r7, lr}
 8004cca:	b089      	sub	sp, #36	; 0x24
 8004ccc:	af04      	add	r7, sp, #16
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	70fb      	strb	r3, [r7, #3]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	70bb      	strb	r3, [r7, #2]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_HCD_HC_Init+0x28>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e076      	b.n	8004dde <HAL_HCD_HC_Init+0x116>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004cf8:	78fb      	ldrb	r3, [r7, #3]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	212c      	movs	r1, #44	; 0x2c
 8004cfe:	fb01 f303 	mul.w	r3, r1, r3
 8004d02:	4413      	add	r3, r2
 8004d04:	333d      	adds	r3, #61	; 0x3d
 8004d06:	2200      	movs	r2, #0
 8004d08:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004d0a:	78fb      	ldrb	r3, [r7, #3]
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	212c      	movs	r1, #44	; 0x2c
 8004d10:	fb01 f303 	mul.w	r3, r1, r3
 8004d14:	4413      	add	r3, r2
 8004d16:	3338      	adds	r3, #56	; 0x38
 8004d18:	787a      	ldrb	r2, [r7, #1]
 8004d1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004d1c:	78fb      	ldrb	r3, [r7, #3]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	212c      	movs	r1, #44	; 0x2c
 8004d22:	fb01 f303 	mul.w	r3, r1, r3
 8004d26:	4413      	add	r3, r2
 8004d28:	3340      	adds	r3, #64	; 0x40
 8004d2a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004d2c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004d2e:	78fb      	ldrb	r3, [r7, #3]
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	212c      	movs	r1, #44	; 0x2c
 8004d34:	fb01 f303 	mul.w	r3, r1, r3
 8004d38:	4413      	add	r3, r2
 8004d3a:	3339      	adds	r3, #57	; 0x39
 8004d3c:	78fa      	ldrb	r2, [r7, #3]
 8004d3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004d40:	78fb      	ldrb	r3, [r7, #3]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	212c      	movs	r1, #44	; 0x2c
 8004d46:	fb01 f303 	mul.w	r3, r1, r3
 8004d4a:	4413      	add	r3, r2
 8004d4c:	333f      	adds	r3, #63	; 0x3f
 8004d4e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004d52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	78ba      	ldrb	r2, [r7, #2]
 8004d58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d5c:	b2d0      	uxtb	r0, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	212c      	movs	r1, #44	; 0x2c
 8004d62:	fb01 f303 	mul.w	r3, r1, r3
 8004d66:	4413      	add	r3, r2
 8004d68:	333a      	adds	r3, #58	; 0x3a
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004d6e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	da09      	bge.n	8004d8a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004d76:	78fb      	ldrb	r3, [r7, #3]
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	212c      	movs	r1, #44	; 0x2c
 8004d7c:	fb01 f303 	mul.w	r3, r1, r3
 8004d80:	4413      	add	r3, r2
 8004d82:	333b      	adds	r3, #59	; 0x3b
 8004d84:	2201      	movs	r2, #1
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	e008      	b.n	8004d9c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004d8a:	78fb      	ldrb	r3, [r7, #3]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	212c      	movs	r1, #44	; 0x2c
 8004d90:	fb01 f303 	mul.w	r3, r1, r3
 8004d94:	4413      	add	r3, r2
 8004d96:	333b      	adds	r3, #59	; 0x3b
 8004d98:	2200      	movs	r2, #0
 8004d9a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	212c      	movs	r1, #44	; 0x2c
 8004da2:	fb01 f303 	mul.w	r3, r1, r3
 8004da6:	4413      	add	r3, r2
 8004da8:	333c      	adds	r3, #60	; 0x3c
 8004daa:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004dae:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	787c      	ldrb	r4, [r7, #1]
 8004db6:	78ba      	ldrb	r2, [r7, #2]
 8004db8:	78f9      	ldrb	r1, [r7, #3]
 8004dba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004dbc:	9302      	str	r3, [sp, #8]
 8004dbe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004dc2:	9301      	str	r3, [sp, #4]
 8004dc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	4623      	mov	r3, r4
 8004dcc:	f004 fbca 	bl	8009564 <USB_HC_Init>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd90      	pop	{r4, r7, pc}

08004de6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	460b      	mov	r3, r1
 8004df0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d101      	bne.n	8004e04 <HAL_HCD_HC_Halt+0x1e>
 8004e00:	2302      	movs	r3, #2
 8004e02:	e00f      	b.n	8004e24 <HAL_HCD_HC_Halt+0x3e>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	78fa      	ldrb	r2, [r7, #3]
 8004e12:	4611      	mov	r1, r2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f004 fe06 	bl	8009a26 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	4608      	mov	r0, r1
 8004e36:	4611      	mov	r1, r2
 8004e38:	461a      	mov	r2, r3
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	70fb      	strb	r3, [r7, #3]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	70bb      	strb	r3, [r7, #2]
 8004e42:	4613      	mov	r3, r2
 8004e44:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004e46:	78fb      	ldrb	r3, [r7, #3]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	212c      	movs	r1, #44	; 0x2c
 8004e4c:	fb01 f303 	mul.w	r3, r1, r3
 8004e50:	4413      	add	r3, r2
 8004e52:	333b      	adds	r3, #59	; 0x3b
 8004e54:	78ba      	ldrb	r2, [r7, #2]
 8004e56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004e58:	78fb      	ldrb	r3, [r7, #3]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	212c      	movs	r1, #44	; 0x2c
 8004e5e:	fb01 f303 	mul.w	r3, r1, r3
 8004e62:	4413      	add	r3, r2
 8004e64:	333f      	adds	r3, #63	; 0x3f
 8004e66:	787a      	ldrb	r2, [r7, #1]
 8004e68:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004e6a:	7c3b      	ldrb	r3, [r7, #16]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d112      	bne.n	8004e96 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	212c      	movs	r1, #44	; 0x2c
 8004e76:	fb01 f303 	mul.w	r3, r1, r3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	3342      	adds	r3, #66	; 0x42
 8004e7e:	2203      	movs	r2, #3
 8004e80:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	212c      	movs	r1, #44	; 0x2c
 8004e88:	fb01 f303 	mul.w	r3, r1, r3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	333d      	adds	r3, #61	; 0x3d
 8004e90:	7f3a      	ldrb	r2, [r7, #28]
 8004e92:	701a      	strb	r2, [r3, #0]
 8004e94:	e008      	b.n	8004ea8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e96:	78fb      	ldrb	r3, [r7, #3]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	212c      	movs	r1, #44	; 0x2c
 8004e9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ea0:	4413      	add	r3, r2
 8004ea2:	3342      	adds	r3, #66	; 0x42
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004ea8:	787b      	ldrb	r3, [r7, #1]
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	f200 80c6 	bhi.w	800503c <HAL_HCD_HC_SubmitRequest+0x210>
 8004eb0:	a201      	add	r2, pc, #4	; (adr r2, 8004eb8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb6:	bf00      	nop
 8004eb8:	08004ec9 	.word	0x08004ec9
 8004ebc:	08005029 	.word	0x08005029
 8004ec0:	08004f2d 	.word	0x08004f2d
 8004ec4:	08004fab 	.word	0x08004fab
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004ec8:	7c3b      	ldrb	r3, [r7, #16]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	f040 80b8 	bne.w	8005040 <HAL_HCD_HC_SubmitRequest+0x214>
 8004ed0:	78bb      	ldrb	r3, [r7, #2]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f040 80b4 	bne.w	8005040 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004ed8:	8b3b      	ldrh	r3, [r7, #24]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d108      	bne.n	8004ef0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004ede:	78fb      	ldrb	r3, [r7, #3]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	212c      	movs	r1, #44	; 0x2c
 8004ee4:	fb01 f303 	mul.w	r3, r1, r3
 8004ee8:	4413      	add	r3, r2
 8004eea:	3355      	adds	r3, #85	; 0x55
 8004eec:	2201      	movs	r2, #1
 8004eee:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004ef0:	78fb      	ldrb	r3, [r7, #3]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	212c      	movs	r1, #44	; 0x2c
 8004ef6:	fb01 f303 	mul.w	r3, r1, r3
 8004efa:	4413      	add	r3, r2
 8004efc:	3355      	adds	r3, #85	; 0x55
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d109      	bne.n	8004f18 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f04:	78fb      	ldrb	r3, [r7, #3]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	212c      	movs	r1, #44	; 0x2c
 8004f0a:	fb01 f303 	mul.w	r3, r1, r3
 8004f0e:	4413      	add	r3, r2
 8004f10:	3342      	adds	r3, #66	; 0x42
 8004f12:	2200      	movs	r2, #0
 8004f14:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004f16:	e093      	b.n	8005040 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f18:	78fb      	ldrb	r3, [r7, #3]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	212c      	movs	r1, #44	; 0x2c
 8004f1e:	fb01 f303 	mul.w	r3, r1, r3
 8004f22:	4413      	add	r3, r2
 8004f24:	3342      	adds	r3, #66	; 0x42
 8004f26:	2202      	movs	r2, #2
 8004f28:	701a      	strb	r2, [r3, #0]
      break;
 8004f2a:	e089      	b.n	8005040 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004f2c:	78bb      	ldrb	r3, [r7, #2]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d11d      	bne.n	8004f6e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004f32:	78fb      	ldrb	r3, [r7, #3]
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	212c      	movs	r1, #44	; 0x2c
 8004f38:	fb01 f303 	mul.w	r3, r1, r3
 8004f3c:	4413      	add	r3, r2
 8004f3e:	3355      	adds	r3, #85	; 0x55
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d109      	bne.n	8004f5a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f46:	78fb      	ldrb	r3, [r7, #3]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	212c      	movs	r1, #44	; 0x2c
 8004f4c:	fb01 f303 	mul.w	r3, r1, r3
 8004f50:	4413      	add	r3, r2
 8004f52:	3342      	adds	r3, #66	; 0x42
 8004f54:	2200      	movs	r2, #0
 8004f56:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004f58:	e073      	b.n	8005042 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f5a:	78fb      	ldrb	r3, [r7, #3]
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	212c      	movs	r1, #44	; 0x2c
 8004f60:	fb01 f303 	mul.w	r3, r1, r3
 8004f64:	4413      	add	r3, r2
 8004f66:	3342      	adds	r3, #66	; 0x42
 8004f68:	2202      	movs	r2, #2
 8004f6a:	701a      	strb	r2, [r3, #0]
      break;
 8004f6c:	e069      	b.n	8005042 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004f6e:	78fb      	ldrb	r3, [r7, #3]
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	212c      	movs	r1, #44	; 0x2c
 8004f74:	fb01 f303 	mul.w	r3, r1, r3
 8004f78:	4413      	add	r3, r2
 8004f7a:	3354      	adds	r3, #84	; 0x54
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d109      	bne.n	8004f96 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f82:	78fb      	ldrb	r3, [r7, #3]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	212c      	movs	r1, #44	; 0x2c
 8004f88:	fb01 f303 	mul.w	r3, r1, r3
 8004f8c:	4413      	add	r3, r2
 8004f8e:	3342      	adds	r3, #66	; 0x42
 8004f90:	2200      	movs	r2, #0
 8004f92:	701a      	strb	r2, [r3, #0]
      break;
 8004f94:	e055      	b.n	8005042 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f96:	78fb      	ldrb	r3, [r7, #3]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	212c      	movs	r1, #44	; 0x2c
 8004f9c:	fb01 f303 	mul.w	r3, r1, r3
 8004fa0:	4413      	add	r3, r2
 8004fa2:	3342      	adds	r3, #66	; 0x42
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	701a      	strb	r2, [r3, #0]
      break;
 8004fa8:	e04b      	b.n	8005042 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004faa:	78bb      	ldrb	r3, [r7, #2]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d11d      	bne.n	8004fec <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	212c      	movs	r1, #44	; 0x2c
 8004fb6:	fb01 f303 	mul.w	r3, r1, r3
 8004fba:	4413      	add	r3, r2
 8004fbc:	3355      	adds	r3, #85	; 0x55
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d109      	bne.n	8004fd8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	212c      	movs	r1, #44	; 0x2c
 8004fca:	fb01 f303 	mul.w	r3, r1, r3
 8004fce:	4413      	add	r3, r2
 8004fd0:	3342      	adds	r3, #66	; 0x42
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004fd6:	e034      	b.n	8005042 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004fd8:	78fb      	ldrb	r3, [r7, #3]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	212c      	movs	r1, #44	; 0x2c
 8004fde:	fb01 f303 	mul.w	r3, r1, r3
 8004fe2:	4413      	add	r3, r2
 8004fe4:	3342      	adds	r3, #66	; 0x42
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	701a      	strb	r2, [r3, #0]
      break;
 8004fea:	e02a      	b.n	8005042 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004fec:	78fb      	ldrb	r3, [r7, #3]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	212c      	movs	r1, #44	; 0x2c
 8004ff2:	fb01 f303 	mul.w	r3, r1, r3
 8004ff6:	4413      	add	r3, r2
 8004ff8:	3354      	adds	r3, #84	; 0x54
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d109      	bne.n	8005014 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	212c      	movs	r1, #44	; 0x2c
 8005006:	fb01 f303 	mul.w	r3, r1, r3
 800500a:	4413      	add	r3, r2
 800500c:	3342      	adds	r3, #66	; 0x42
 800500e:	2200      	movs	r2, #0
 8005010:	701a      	strb	r2, [r3, #0]
      break;
 8005012:	e016      	b.n	8005042 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005014:	78fb      	ldrb	r3, [r7, #3]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	212c      	movs	r1, #44	; 0x2c
 800501a:	fb01 f303 	mul.w	r3, r1, r3
 800501e:	4413      	add	r3, r2
 8005020:	3342      	adds	r3, #66	; 0x42
 8005022:	2202      	movs	r2, #2
 8005024:	701a      	strb	r2, [r3, #0]
      break;
 8005026:	e00c      	b.n	8005042 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005028:	78fb      	ldrb	r3, [r7, #3]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	212c      	movs	r1, #44	; 0x2c
 800502e:	fb01 f303 	mul.w	r3, r1, r3
 8005032:	4413      	add	r3, r2
 8005034:	3342      	adds	r3, #66	; 0x42
 8005036:	2200      	movs	r2, #0
 8005038:	701a      	strb	r2, [r3, #0]
      break;
 800503a:	e002      	b.n	8005042 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800503c:	bf00      	nop
 800503e:	e000      	b.n	8005042 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8005040:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005042:	78fb      	ldrb	r3, [r7, #3]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	212c      	movs	r1, #44	; 0x2c
 8005048:	fb01 f303 	mul.w	r3, r1, r3
 800504c:	4413      	add	r3, r2
 800504e:	3344      	adds	r3, #68	; 0x44
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005054:	78fb      	ldrb	r3, [r7, #3]
 8005056:	8b3a      	ldrh	r2, [r7, #24]
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	202c      	movs	r0, #44	; 0x2c
 800505c:	fb00 f303 	mul.w	r3, r0, r3
 8005060:	440b      	add	r3, r1
 8005062:	334c      	adds	r3, #76	; 0x4c
 8005064:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005066:	78fb      	ldrb	r3, [r7, #3]
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	212c      	movs	r1, #44	; 0x2c
 800506c:	fb01 f303 	mul.w	r3, r1, r3
 8005070:	4413      	add	r3, r2
 8005072:	3360      	adds	r3, #96	; 0x60
 8005074:	2200      	movs	r2, #0
 8005076:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	212c      	movs	r1, #44	; 0x2c
 800507e:	fb01 f303 	mul.w	r3, r1, r3
 8005082:	4413      	add	r3, r2
 8005084:	3350      	adds	r3, #80	; 0x50
 8005086:	2200      	movs	r2, #0
 8005088:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	212c      	movs	r1, #44	; 0x2c
 8005090:	fb01 f303 	mul.w	r3, r1, r3
 8005094:	4413      	add	r3, r2
 8005096:	3339      	adds	r3, #57	; 0x39
 8005098:	78fa      	ldrb	r2, [r7, #3]
 800509a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800509c:	78fb      	ldrb	r3, [r7, #3]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	212c      	movs	r1, #44	; 0x2c
 80050a2:	fb01 f303 	mul.w	r3, r1, r3
 80050a6:	4413      	add	r3, r2
 80050a8:	3361      	adds	r3, #97	; 0x61
 80050aa:	2200      	movs	r2, #0
 80050ac:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6818      	ldr	r0, [r3, #0]
 80050b2:	78fb      	ldrb	r3, [r7, #3]
 80050b4:	222c      	movs	r2, #44	; 0x2c
 80050b6:	fb02 f303 	mul.w	r3, r2, r3
 80050ba:	3338      	adds	r3, #56	; 0x38
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	18d1      	adds	r1, r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	461a      	mov	r2, r3
 80050c8:	f004 fb5a 	bl	8009780 <USB_HC_StartXfer>
 80050cc:	4603      	mov	r3, r0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop

080050d8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f004 f87d 	bl	80091ee <USB_GetMode>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	f040 80f6 	bne.w	80052e8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4618      	mov	r0, r3
 8005102:	f004 f861 	bl	80091c8 <USB_ReadInterrupts>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 80ec 	beq.w	80052e6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f004 f858 	bl	80091c8 <USB_ReadInterrupts>
 8005118:	4603      	mov	r3, r0
 800511a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800511e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005122:	d104      	bne.n	800512e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800512c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f004 f848 	bl	80091c8 <USB_ReadInterrupts>
 8005138:	4603      	mov	r3, r0
 800513a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800513e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005142:	d104      	bne.n	800514e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800514c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f004 f838 	bl	80091c8 <USB_ReadInterrupts>
 8005158:	4603      	mov	r3, r0
 800515a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800515e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005162:	d104      	bne.n	800516e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800516c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f004 f828 	bl	80091c8 <USB_ReadInterrupts>
 8005178:	4603      	mov	r3, r0
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b02      	cmp	r3, #2
 8005180:	d103      	bne.n	800518a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2202      	movs	r2, #2
 8005188:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f004 f81a 	bl	80091c8 <USB_ReadInterrupts>
 8005194:	4603      	mov	r3, r0
 8005196:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800519a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800519e:	d11c      	bne.n	80051da <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80051a8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10f      	bne.n	80051da <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80051ba:	2110      	movs	r1, #16
 80051bc:	6938      	ldr	r0, [r7, #16]
 80051be:	f003 ff29 	bl	8009014 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80051c2:	6938      	ldr	r0, [r7, #16]
 80051c4:	f003 ff4a 	bl	800905c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2101      	movs	r1, #1
 80051ce:	4618      	mov	r0, r3
 80051d0:	f004 f902 	bl	80093d8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f015 f82f 	bl	801a238 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4618      	mov	r0, r3
 80051e0:	f003 fff2 	bl	80091c8 <USB_ReadInterrupts>
 80051e4:	4603      	mov	r3, r0
 80051e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051ee:	d102      	bne.n	80051f6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f001 fa03 	bl	80065fc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f003 ffe4 	bl	80091c8 <USB_ReadInterrupts>
 8005200:	4603      	mov	r3, r0
 8005202:	f003 0308 	and.w	r3, r3, #8
 8005206:	2b08      	cmp	r3, #8
 8005208:	d106      	bne.n	8005218 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f014 fff8 	bl	801a200 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2208      	movs	r2, #8
 8005216:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4618      	mov	r0, r3
 800521e:	f003 ffd3 	bl	80091c8 <USB_ReadInterrupts>
 8005222:	4603      	mov	r3, r0
 8005224:	f003 0310 	and.w	r3, r3, #16
 8005228:	2b10      	cmp	r3, #16
 800522a:	d101      	bne.n	8005230 <HAL_HCD_IRQHandler+0x158>
 800522c:	2301      	movs	r3, #1
 800522e:	e000      	b.n	8005232 <HAL_HCD_IRQHandler+0x15a>
 8005230:	2300      	movs	r3, #0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d012      	beq.n	800525c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699a      	ldr	r2, [r3, #24]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0210 	bic.w	r2, r2, #16
 8005244:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f001 f906 	bl	8006458 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0210 	orr.w	r2, r2, #16
 800525a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f003 ffb1 	bl	80091c8 <USB_ReadInterrupts>
 8005266:	4603      	mov	r3, r0
 8005268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005270:	d13a      	bne.n	80052e8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f004 fbc4 	bl	8009a04 <USB_HC_ReadInterrupt>
 800527c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800527e:	2300      	movs	r3, #0
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	e025      	b.n	80052d0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d018      	beq.n	80052ca <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ae:	d106      	bne.n	80052be <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	4619      	mov	r1, r3
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f8ab 	bl	8005412 <HCD_HC_IN_IRQHandler>
 80052bc:	e005      	b.n	80052ca <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	4619      	mov	r1, r3
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fcc6 	bl	8005c56 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	3301      	adds	r3, #1
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d3d4      	bcc.n	8005284 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052e2:	615a      	str	r2, [r3, #20]
 80052e4:	e000      	b.n	80052e8 <HAL_HCD_IRQHandler+0x210>
      return;
 80052e6:	bf00      	nop
    }
  }
}
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b082      	sub	sp, #8
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_HCD_Start+0x16>
 8005300:	2302      	movs	r3, #2
 8005302:	e013      	b.n	800532c <HAL_HCD_Start+0x3e>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2101      	movs	r1, #1
 8005312:	4618      	mov	r0, r3
 8005314:	f004 f8c4 	bl	80094a0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4618      	mov	r0, r3
 800531e:	f003 fe0a 	bl	8008f36 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005342:	2b01      	cmp	r3, #1
 8005344:	d101      	bne.n	800534a <HAL_HCD_Stop+0x16>
 8005346:	2302      	movs	r3, #2
 8005348:	e00d      	b.n	8005366 <HAL_HCD_Stop+0x32>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4618      	mov	r0, r3
 8005358:	f004 fcbe 	bl	8009cd8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b082      	sub	sp, #8
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4618      	mov	r0, r3
 800537c:	f004 f866 	bl	800944c <USB_ResetPort>
 8005380:	4603      	mov	r3, r0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	460b      	mov	r3, r1
 8005394:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005396:	78fb      	ldrb	r3, [r7, #3]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	212c      	movs	r1, #44	; 0x2c
 800539c:	fb01 f303 	mul.w	r3, r1, r3
 80053a0:	4413      	add	r3, r2
 80053a2:	3360      	adds	r3, #96	; 0x60
 80053a4:	781b      	ldrb	r3, [r3, #0]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	460b      	mov	r3, r1
 80053bc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80053be:	78fb      	ldrb	r3, [r7, #3]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	212c      	movs	r1, #44	; 0x2c
 80053c4:	fb01 f303 	mul.w	r3, r1, r3
 80053c8:	4413      	add	r3, r2
 80053ca:	3350      	adds	r3, #80	; 0x50
 80053cc:	681b      	ldr	r3, [r3, #0]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b082      	sub	sp, #8
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f004 f8aa 	bl	8009540 <USB_GetCurrentFrame>
 80053ec:	4603      	mov	r3, r0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b082      	sub	sp, #8
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4618      	mov	r0, r3
 8005404:	f004 f885 	bl	8009512 <USB_GetHostSpeed>
 8005408:	4603      	mov	r3, r0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b086      	sub	sp, #24
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	460b      	mov	r3, r1
 800541c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	4413      	add	r3, r2
 8005434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b04      	cmp	r3, #4
 8005440:	d119      	bne.n	8005476 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	4413      	add	r3, r2
 800544a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544e:	461a      	mov	r2, r3
 8005450:	2304      	movs	r3, #4
 8005452:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	4413      	add	r3, r2
 800545c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	0151      	lsls	r1, r2, #5
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	440a      	add	r2, r1
 800546a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800546e:	f043 0302 	orr.w	r3, r3, #2
 8005472:	60d3      	str	r3, [r2, #12]
 8005474:	e101      	b.n	800567a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	4413      	add	r3, r2
 800547e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800548c:	d12b      	bne.n	80054e6 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	4413      	add	r3, r2
 8005496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800549a:	461a      	mov	r2, r3
 800549c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	212c      	movs	r1, #44	; 0x2c
 80054a8:	fb01 f303 	mul.w	r3, r1, r3
 80054ac:	4413      	add	r3, r2
 80054ae:	3361      	adds	r3, #97	; 0x61
 80054b0:	2207      	movs	r2, #7
 80054b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	0151      	lsls	r1, r2, #5
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	440a      	add	r2, r1
 80054ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ce:	f043 0302 	orr.w	r3, r3, #2
 80054d2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	4611      	mov	r1, r2
 80054de:	4618      	mov	r0, r3
 80054e0:	f004 faa1 	bl	8009a26 <USB_HC_Halt>
 80054e4:	e0c9      	b.n	800567a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b20      	cmp	r3, #32
 80054fa:	d109      	bne.n	8005510 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	4413      	add	r3, r2
 8005504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005508:	461a      	mov	r2, r3
 800550a:	2320      	movs	r3, #32
 800550c:	6093      	str	r3, [r2, #8]
 800550e:	e0b4      	b.n	800567a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	4413      	add	r3, r2
 8005518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b08      	cmp	r3, #8
 8005524:	d133      	bne.n	800558e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	4413      	add	r3, r2
 800552e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	0151      	lsls	r1, r2, #5
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	440a      	add	r2, r1
 800553c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005540:	f043 0302 	orr.w	r3, r3, #2
 8005544:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	212c      	movs	r1, #44	; 0x2c
 800554c:	fb01 f303 	mul.w	r3, r1, r3
 8005550:	4413      	add	r3, r2
 8005552:	3361      	adds	r3, #97	; 0x61
 8005554:	2205      	movs	r2, #5
 8005556:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4413      	add	r3, r2
 8005560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005564:	461a      	mov	r2, r3
 8005566:	2310      	movs	r3, #16
 8005568:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	4413      	add	r3, r2
 8005572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005576:	461a      	mov	r2, r3
 8005578:	2308      	movs	r3, #8
 800557a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	4611      	mov	r1, r2
 8005586:	4618      	mov	r0, r3
 8005588:	f004 fa4d 	bl	8009a26 <USB_HC_Halt>
 800558c:	e075      	b.n	800567a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	4413      	add	r3, r2
 8005596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a4:	d134      	bne.n	8005610 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	0151      	lsls	r1, r2, #5
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	440a      	add	r2, r1
 80055bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055c0:	f043 0302 	orr.w	r3, r3, #2
 80055c4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	212c      	movs	r1, #44	; 0x2c
 80055cc:	fb01 f303 	mul.w	r3, r1, r3
 80055d0:	4413      	add	r3, r2
 80055d2:	3361      	adds	r3, #97	; 0x61
 80055d4:	2208      	movs	r2, #8
 80055d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e4:	461a      	mov	r2, r3
 80055e6:	2310      	movs	r3, #16
 80055e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f6:	461a      	mov	r2, r3
 80055f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055fc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	4611      	mov	r1, r2
 8005608:	4618      	mov	r0, r3
 800560a:	f004 fa0c 	bl	8009a26 <USB_HC_Halt>
 800560e:	e034      	b.n	800567a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	4413      	add	r3, r2
 8005618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005622:	2b80      	cmp	r3, #128	; 0x80
 8005624:	d129      	bne.n	800567a <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	4413      	add	r3, r2
 800562e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	0151      	lsls	r1, r2, #5
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	440a      	add	r2, r1
 800563c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005640:	f043 0302 	orr.w	r3, r3, #2
 8005644:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	212c      	movs	r1, #44	; 0x2c
 800564c:	fb01 f303 	mul.w	r3, r1, r3
 8005650:	4413      	add	r3, r2
 8005652:	3361      	adds	r3, #97	; 0x61
 8005654:	2206      	movs	r2, #6
 8005656:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	4611      	mov	r1, r2
 8005662:	4618      	mov	r0, r3
 8005664:	f004 f9df 	bl	8009a26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	4413      	add	r3, r2
 8005670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005674:	461a      	mov	r2, r3
 8005676:	2380      	movs	r3, #128	; 0x80
 8005678:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	4413      	add	r3, r2
 8005682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800568c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005690:	d122      	bne.n	80056d8 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	4413      	add	r3, r2
 800569a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	0151      	lsls	r1, r2, #5
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	440a      	add	r2, r1
 80056a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ac:	f043 0302 	orr.w	r3, r3, #2
 80056b0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	4611      	mov	r1, r2
 80056bc:	4618      	mov	r0, r3
 80056be:	f004 f9b2 	bl	8009a26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ce:	461a      	mov	r2, r3
 80056d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056d4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80056d6:	e2ba      	b.n	8005c4e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	f040 811b 	bne.w	8005926 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d019      	beq.n	800572c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	212c      	movs	r1, #44	; 0x2c
 80056fe:	fb01 f303 	mul.w	r3, r1, r3
 8005702:	4413      	add	r3, r2
 8005704:	3348      	adds	r3, #72	; 0x48
 8005706:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	0159      	lsls	r1, r3, #5
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	440b      	add	r3, r1
 8005710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800571a:	1ad2      	subs	r2, r2, r3
 800571c:	6879      	ldr	r1, [r7, #4]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	202c      	movs	r0, #44	; 0x2c
 8005722:	fb00 f303 	mul.w	r3, r0, r3
 8005726:	440b      	add	r3, r1
 8005728:	3350      	adds	r3, #80	; 0x50
 800572a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	212c      	movs	r1, #44	; 0x2c
 8005732:	fb01 f303 	mul.w	r3, r1, r3
 8005736:	4413      	add	r3, r2
 8005738:	3361      	adds	r3, #97	; 0x61
 800573a:	2201      	movs	r2, #1
 800573c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	212c      	movs	r1, #44	; 0x2c
 8005744:	fb01 f303 	mul.w	r3, r1, r3
 8005748:	4413      	add	r3, r2
 800574a:	335c      	adds	r3, #92	; 0x5c
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	4413      	add	r3, r2
 8005758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575c:	461a      	mov	r2, r3
 800575e:	2301      	movs	r3, #1
 8005760:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	212c      	movs	r1, #44	; 0x2c
 8005768:	fb01 f303 	mul.w	r3, r1, r3
 800576c:	4413      	add	r3, r2
 800576e:	333f      	adds	r3, #63	; 0x3f
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d009      	beq.n	800578a <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	212c      	movs	r1, #44	; 0x2c
 800577c:	fb01 f303 	mul.w	r3, r1, r3
 8005780:	4413      	add	r3, r2
 8005782:	333f      	adds	r3, #63	; 0x3f
 8005784:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005786:	2b02      	cmp	r3, #2
 8005788:	d121      	bne.n	80057ce <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	4413      	add	r3, r2
 8005792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	0151      	lsls	r1, r2, #5
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	440a      	add	r2, r1
 80057a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057a4:	f043 0302 	orr.w	r3, r3, #2
 80057a8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	4611      	mov	r1, r2
 80057b4:	4618      	mov	r0, r3
 80057b6:	f004 f936 	bl	8009a26 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c6:	461a      	mov	r2, r3
 80057c8:	2310      	movs	r3, #16
 80057ca:	6093      	str	r3, [r2, #8]
 80057cc:	e066      	b.n	800589c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	212c      	movs	r1, #44	; 0x2c
 80057d4:	fb01 f303 	mul.w	r3, r1, r3
 80057d8:	4413      	add	r3, r2
 80057da:	333f      	adds	r3, #63	; 0x3f
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	2b03      	cmp	r3, #3
 80057e0:	d127      	bne.n	8005832 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	0151      	lsls	r1, r2, #5
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	440a      	add	r2, r1
 80057f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005800:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	212c      	movs	r1, #44	; 0x2c
 8005808:	fb01 f303 	mul.w	r3, r1, r3
 800580c:	4413      	add	r3, r2
 800580e:	3360      	adds	r3, #96	; 0x60
 8005810:	2201      	movs	r2, #1
 8005812:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	b2d9      	uxtb	r1, r3
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	202c      	movs	r0, #44	; 0x2c
 800581e:	fb00 f303 	mul.w	r3, r0, r3
 8005822:	4413      	add	r3, r2
 8005824:	3360      	adds	r3, #96	; 0x60
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	461a      	mov	r2, r3
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f014 fd12 	bl	801a254 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005830:	e034      	b.n	800589c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	212c      	movs	r1, #44	; 0x2c
 8005838:	fb01 f303 	mul.w	r3, r1, r3
 800583c:	4413      	add	r3, r2
 800583e:	333f      	adds	r3, #63	; 0x3f
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d12a      	bne.n	800589c <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	212c      	movs	r1, #44	; 0x2c
 800584c:	fb01 f303 	mul.w	r3, r1, r3
 8005850:	4413      	add	r3, r2
 8005852:	3360      	adds	r3, #96	; 0x60
 8005854:	2201      	movs	r2, #1
 8005856:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	212c      	movs	r1, #44	; 0x2c
 800585e:	fb01 f303 	mul.w	r3, r1, r3
 8005862:	4413      	add	r3, r2
 8005864:	3354      	adds	r3, #84	; 0x54
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	f083 0301 	eor.w	r3, r3, #1
 800586c:	b2d8      	uxtb	r0, r3
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	212c      	movs	r1, #44	; 0x2c
 8005874:	fb01 f303 	mul.w	r3, r1, r3
 8005878:	4413      	add	r3, r2
 800587a:	3354      	adds	r3, #84	; 0x54
 800587c:	4602      	mov	r2, r0
 800587e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	b2d9      	uxtb	r1, r3
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	202c      	movs	r0, #44	; 0x2c
 800588a:	fb00 f303 	mul.w	r3, r0, r3
 800588e:	4413      	add	r3, r2
 8005890:	3360      	adds	r3, #96	; 0x60
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f014 fcdc 	bl	801a254 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d12b      	bne.n	80058fc <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	212c      	movs	r1, #44	; 0x2c
 80058aa:	fb01 f303 	mul.w	r3, r1, r3
 80058ae:	4413      	add	r3, r2
 80058b0:	3348      	adds	r3, #72	; 0x48
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6879      	ldr	r1, [r7, #4]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	202c      	movs	r0, #44	; 0x2c
 80058ba:	fb00 f202 	mul.w	r2, r0, r2
 80058be:	440a      	add	r2, r1
 80058c0:	3240      	adds	r2, #64	; 0x40
 80058c2:	8812      	ldrh	r2, [r2, #0]
 80058c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 81be 	beq.w	8005c4e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	212c      	movs	r1, #44	; 0x2c
 80058d8:	fb01 f303 	mul.w	r3, r1, r3
 80058dc:	4413      	add	r3, r2
 80058de:	3354      	adds	r3, #84	; 0x54
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	f083 0301 	eor.w	r3, r3, #1
 80058e6:	b2d8      	uxtb	r0, r3
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	212c      	movs	r1, #44	; 0x2c
 80058ee:	fb01 f303 	mul.w	r3, r1, r3
 80058f2:	4413      	add	r3, r2
 80058f4:	3354      	adds	r3, #84	; 0x54
 80058f6:	4602      	mov	r2, r0
 80058f8:	701a      	strb	r2, [r3, #0]
}
 80058fa:	e1a8      	b.n	8005c4e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	212c      	movs	r1, #44	; 0x2c
 8005902:	fb01 f303 	mul.w	r3, r1, r3
 8005906:	4413      	add	r3, r2
 8005908:	3354      	adds	r3, #84	; 0x54
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	f083 0301 	eor.w	r3, r3, #1
 8005910:	b2d8      	uxtb	r0, r3
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	212c      	movs	r1, #44	; 0x2c
 8005918:	fb01 f303 	mul.w	r3, r1, r3
 800591c:	4413      	add	r3, r2
 800591e:	3354      	adds	r3, #84	; 0x54
 8005920:	4602      	mov	r2, r0
 8005922:	701a      	strb	r2, [r3, #0]
}
 8005924:	e193      	b.n	8005c4e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	4413      	add	r3, r2
 800592e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b02      	cmp	r3, #2
 800593a:	f040 8106 	bne.w	8005b4a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	4413      	add	r3, r2
 8005946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	0151      	lsls	r1, r2, #5
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	440a      	add	r2, r1
 8005954:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005958:	f023 0302 	bic.w	r3, r3, #2
 800595c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	212c      	movs	r1, #44	; 0x2c
 8005964:	fb01 f303 	mul.w	r3, r1, r3
 8005968:	4413      	add	r3, r2
 800596a:	3361      	adds	r3, #97	; 0x61
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d109      	bne.n	8005986 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	212c      	movs	r1, #44	; 0x2c
 8005978:	fb01 f303 	mul.w	r3, r1, r3
 800597c:	4413      	add	r3, r2
 800597e:	3360      	adds	r3, #96	; 0x60
 8005980:	2201      	movs	r2, #1
 8005982:	701a      	strb	r2, [r3, #0]
 8005984:	e0c9      	b.n	8005b1a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	212c      	movs	r1, #44	; 0x2c
 800598c:	fb01 f303 	mul.w	r3, r1, r3
 8005990:	4413      	add	r3, r2
 8005992:	3361      	adds	r3, #97	; 0x61
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b05      	cmp	r3, #5
 8005998:	d109      	bne.n	80059ae <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	212c      	movs	r1, #44	; 0x2c
 80059a0:	fb01 f303 	mul.w	r3, r1, r3
 80059a4:	4413      	add	r3, r2
 80059a6:	3360      	adds	r3, #96	; 0x60
 80059a8:	2205      	movs	r2, #5
 80059aa:	701a      	strb	r2, [r3, #0]
 80059ac:	e0b5      	b.n	8005b1a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	212c      	movs	r1, #44	; 0x2c
 80059b4:	fb01 f303 	mul.w	r3, r1, r3
 80059b8:	4413      	add	r3, r2
 80059ba:	3361      	adds	r3, #97	; 0x61
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	2b06      	cmp	r3, #6
 80059c0:	d009      	beq.n	80059d6 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	212c      	movs	r1, #44	; 0x2c
 80059c8:	fb01 f303 	mul.w	r3, r1, r3
 80059cc:	4413      	add	r3, r2
 80059ce:	3361      	adds	r3, #97	; 0x61
 80059d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80059d2:	2b08      	cmp	r3, #8
 80059d4:	d150      	bne.n	8005a78 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	212c      	movs	r1, #44	; 0x2c
 80059dc:	fb01 f303 	mul.w	r3, r1, r3
 80059e0:	4413      	add	r3, r2
 80059e2:	335c      	adds	r3, #92	; 0x5c
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	202c      	movs	r0, #44	; 0x2c
 80059ee:	fb00 f303 	mul.w	r3, r0, r3
 80059f2:	440b      	add	r3, r1
 80059f4:	335c      	adds	r3, #92	; 0x5c
 80059f6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	212c      	movs	r1, #44	; 0x2c
 80059fe:	fb01 f303 	mul.w	r3, r1, r3
 8005a02:	4413      	add	r3, r2
 8005a04:	335c      	adds	r3, #92	; 0x5c
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d912      	bls.n	8005a32 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	212c      	movs	r1, #44	; 0x2c
 8005a12:	fb01 f303 	mul.w	r3, r1, r3
 8005a16:	4413      	add	r3, r2
 8005a18:	335c      	adds	r3, #92	; 0x5c
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	212c      	movs	r1, #44	; 0x2c
 8005a24:	fb01 f303 	mul.w	r3, r1, r3
 8005a28:	4413      	add	r3, r2
 8005a2a:	3360      	adds	r3, #96	; 0x60
 8005a2c:	2204      	movs	r2, #4
 8005a2e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005a30:	e073      	b.n	8005b1a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	212c      	movs	r1, #44	; 0x2c
 8005a38:	fb01 f303 	mul.w	r3, r1, r3
 8005a3c:	4413      	add	r3, r2
 8005a3e:	3360      	adds	r3, #96	; 0x60
 8005a40:	2202      	movs	r2, #2
 8005a42:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a5a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a62:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a70:	461a      	mov	r2, r3
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005a76:	e050      	b.n	8005b1a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	212c      	movs	r1, #44	; 0x2c
 8005a7e:	fb01 f303 	mul.w	r3, r1, r3
 8005a82:	4413      	add	r3, r2
 8005a84:	3361      	adds	r3, #97	; 0x61
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d122      	bne.n	8005ad2 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	212c      	movs	r1, #44	; 0x2c
 8005a92:	fb01 f303 	mul.w	r3, r1, r3
 8005a96:	4413      	add	r3, r2
 8005a98:	3360      	adds	r3, #96	; 0x60
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ab4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005abc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aca:	461a      	mov	r2, r3
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	e023      	b.n	8005b1a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	212c      	movs	r1, #44	; 0x2c
 8005ad8:	fb01 f303 	mul.w	r3, r1, r3
 8005adc:	4413      	add	r3, r2
 8005ade:	3361      	adds	r3, #97	; 0x61
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b07      	cmp	r3, #7
 8005ae4:	d119      	bne.n	8005b1a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	212c      	movs	r1, #44	; 0x2c
 8005aec:	fb01 f303 	mul.w	r3, r1, r3
 8005af0:	4413      	add	r3, r2
 8005af2:	335c      	adds	r3, #92	; 0x5c
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	1c5a      	adds	r2, r3, #1
 8005af8:	6879      	ldr	r1, [r7, #4]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	202c      	movs	r0, #44	; 0x2c
 8005afe:	fb00 f303 	mul.w	r3, r0, r3
 8005b02:	440b      	add	r3, r1
 8005b04:	335c      	adds	r3, #92	; 0x5c
 8005b06:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	212c      	movs	r1, #44	; 0x2c
 8005b0e:	fb01 f303 	mul.w	r3, r1, r3
 8005b12:	4413      	add	r3, r2
 8005b14:	3360      	adds	r3, #96	; 0x60
 8005b16:	2204      	movs	r2, #4
 8005b18:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b26:	461a      	mov	r2, r3
 8005b28:	2302      	movs	r3, #2
 8005b2a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	b2d9      	uxtb	r1, r3
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	202c      	movs	r0, #44	; 0x2c
 8005b36:	fb00 f303 	mul.w	r3, r0, r3
 8005b3a:	4413      	add	r3, r2
 8005b3c:	3360      	adds	r3, #96	; 0x60
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	461a      	mov	r2, r3
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f014 fb86 	bl	801a254 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005b48:	e081      	b.n	8005c4e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f003 0310 	and.w	r3, r3, #16
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d176      	bne.n	8005c4e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	212c      	movs	r1, #44	; 0x2c
 8005b66:	fb01 f303 	mul.w	r3, r1, r3
 8005b6a:	4413      	add	r3, r2
 8005b6c:	333f      	adds	r3, #63	; 0x3f
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	2b03      	cmp	r3, #3
 8005b72:	d121      	bne.n	8005bb8 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	212c      	movs	r1, #44	; 0x2c
 8005b7a:	fb01 f303 	mul.w	r3, r1, r3
 8005b7e:	4413      	add	r3, r2
 8005b80:	335c      	adds	r3, #92	; 0x5c
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	0151      	lsls	r1, r2, #5
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	440a      	add	r2, r1
 8005b9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ba0:	f043 0302 	orr.w	r3, r3, #2
 8005ba4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	4611      	mov	r1, r2
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f003 ff38 	bl	8009a26 <USB_HC_Halt>
 8005bb6:	e041      	b.n	8005c3c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	212c      	movs	r1, #44	; 0x2c
 8005bbe:	fb01 f303 	mul.w	r3, r1, r3
 8005bc2:	4413      	add	r3, r2
 8005bc4:	333f      	adds	r3, #63	; 0x3f
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d009      	beq.n	8005be0 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	212c      	movs	r1, #44	; 0x2c
 8005bd2:	fb01 f303 	mul.w	r3, r1, r3
 8005bd6:	4413      	add	r3, r2
 8005bd8:	333f      	adds	r3, #63	; 0x3f
 8005bda:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d12d      	bne.n	8005c3c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	212c      	movs	r1, #44	; 0x2c
 8005be6:	fb01 f303 	mul.w	r3, r1, r3
 8005bea:	4413      	add	r3, r2
 8005bec:	335c      	adds	r3, #92	; 0x5c
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d120      	bne.n	8005c3c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	212c      	movs	r1, #44	; 0x2c
 8005c00:	fb01 f303 	mul.w	r3, r1, r3
 8005c04:	4413      	add	r3, r2
 8005c06:	3361      	adds	r3, #97	; 0x61
 8005c08:	2203      	movs	r2, #3
 8005c0a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	0151      	lsls	r1, r2, #5
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	440a      	add	r2, r1
 8005c22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c26:	f043 0302 	orr.w	r3, r3, #2
 8005c2a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	b2d2      	uxtb	r2, r2
 8005c34:	4611      	mov	r1, r2
 8005c36:	4618      	mov	r0, r3
 8005c38:	f003 fef5 	bl	8009a26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c48:	461a      	mov	r2, r3
 8005c4a:	2310      	movs	r3, #16
 8005c4c:	6093      	str	r3, [r2, #8]
}
 8005c4e:	bf00      	nop
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b088      	sub	sp, #32
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
 8005c5e:	460b      	mov	r3, r1
 8005c60:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005c6c:	78fb      	ldrb	r3, [r7, #3]
 8005c6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 0304 	and.w	r3, r3, #4
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d119      	bne.n	8005cba <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c92:	461a      	mov	r2, r3
 8005c94:	2304      	movs	r3, #4
 8005c96:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	0151      	lsls	r1, r2, #5
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	440a      	add	r2, r1
 8005cae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cb2:	f043 0302 	orr.w	r3, r3, #2
 8005cb6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005cb8:	e3ca      	b.n	8006450 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f003 0320 	and.w	r3, r3, #32
 8005ccc:	2b20      	cmp	r3, #32
 8005cce:	d13e      	bne.n	8005d4e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cdc:	461a      	mov	r2, r3
 8005cde:	2320      	movs	r3, #32
 8005ce0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	212c      	movs	r1, #44	; 0x2c
 8005ce8:	fb01 f303 	mul.w	r3, r1, r3
 8005cec:	4413      	add	r3, r2
 8005cee:	333d      	adds	r3, #61	; 0x3d
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	f040 83ac 	bne.w	8006450 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	212c      	movs	r1, #44	; 0x2c
 8005cfe:	fb01 f303 	mul.w	r3, r1, r3
 8005d02:	4413      	add	r3, r2
 8005d04:	333d      	adds	r3, #61	; 0x3d
 8005d06:	2200      	movs	r2, #0
 8005d08:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	212c      	movs	r1, #44	; 0x2c
 8005d10:	fb01 f303 	mul.w	r3, r1, r3
 8005d14:	4413      	add	r3, r2
 8005d16:	3360      	adds	r3, #96	; 0x60
 8005d18:	2202      	movs	r2, #2
 8005d1a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	0151      	lsls	r1, r2, #5
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	440a      	add	r2, r1
 8005d32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d36:	f043 0302 	orr.w	r3, r3, #2
 8005d3a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	4611      	mov	r1, r2
 8005d46:	4618      	mov	r0, r3
 8005d48:	f003 fe6d 	bl	8009a26 <USB_HC_Halt>
}
 8005d4c:	e380      	b.n	8006450 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d64:	d122      	bne.n	8005dac <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	0151      	lsls	r1, r2, #5
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	440a      	add	r2, r1
 8005d7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d80:	f043 0302 	orr.w	r3, r3, #2
 8005d84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	b2d2      	uxtb	r2, r2
 8005d8e:	4611      	mov	r1, r2
 8005d90:	4618      	mov	r0, r3
 8005d92:	f003 fe48 	bl	8009a26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da2:	461a      	mov	r2, r3
 8005da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005da8:	6093      	str	r3, [r2, #8]
}
 8005daa:	e351      	b.n	8006450 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d150      	bne.n	8005e64 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	212c      	movs	r1, #44	; 0x2c
 8005dc8:	fb01 f303 	mul.w	r3, r1, r3
 8005dcc:	4413      	add	r3, r2
 8005dce:	335c      	adds	r3, #92	; 0x5c
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de6:	2b40      	cmp	r3, #64	; 0x40
 8005de8:	d111      	bne.n	8005e0e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	212c      	movs	r1, #44	; 0x2c
 8005df0:	fb01 f303 	mul.w	r3, r1, r3
 8005df4:	4413      	add	r3, r2
 8005df6:	333d      	adds	r3, #61	; 0x3d
 8005df8:	2201      	movs	r2, #1
 8005dfa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e08:	461a      	mov	r2, r3
 8005e0a:	2340      	movs	r3, #64	; 0x40
 8005e0c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	0151      	lsls	r1, r2, #5
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	440a      	add	r2, r1
 8005e24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e28:	f043 0302 	orr.w	r3, r3, #2
 8005e2c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	4611      	mov	r1, r2
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f003 fdf4 	bl	8009a26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	212c      	movs	r1, #44	; 0x2c
 8005e56:	fb01 f303 	mul.w	r3, r1, r3
 8005e5a:	4413      	add	r3, r2
 8005e5c:	3361      	adds	r3, #97	; 0x61
 8005e5e:	2201      	movs	r2, #1
 8005e60:	701a      	strb	r2, [r3, #0]
}
 8005e62:	e2f5      	b.n	8006450 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e76:	2b40      	cmp	r3, #64	; 0x40
 8005e78:	d13c      	bne.n	8005ef4 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	212c      	movs	r1, #44	; 0x2c
 8005e80:	fb01 f303 	mul.w	r3, r1, r3
 8005e84:	4413      	add	r3, r2
 8005e86:	3361      	adds	r3, #97	; 0x61
 8005e88:	2204      	movs	r2, #4
 8005e8a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	212c      	movs	r1, #44	; 0x2c
 8005e92:	fb01 f303 	mul.w	r3, r1, r3
 8005e96:	4413      	add	r3, r2
 8005e98:	333d      	adds	r3, #61	; 0x3d
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	212c      	movs	r1, #44	; 0x2c
 8005ea4:	fb01 f303 	mul.w	r3, r1, r3
 8005ea8:	4413      	add	r3, r2
 8005eaa:	335c      	adds	r3, #92	; 0x5c
 8005eac:	2200      	movs	r2, #0
 8005eae:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	0151      	lsls	r1, r2, #5
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eca:	f043 0302 	orr.w	r3, r3, #2
 8005ece:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	4611      	mov	r1, r2
 8005eda:	4618      	mov	r0, r3
 8005edc:	f003 fda3 	bl	8009a26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eec:	461a      	mov	r2, r3
 8005eee:	2340      	movs	r3, #64	; 0x40
 8005ef0:	6093      	str	r3, [r2, #8]
}
 8005ef2:	e2ad      	b.n	8006450 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f003 0308 	and.w	r3, r3, #8
 8005f06:	2b08      	cmp	r3, #8
 8005f08:	d12a      	bne.n	8005f60 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f16:	461a      	mov	r2, r3
 8005f18:	2308      	movs	r3, #8
 8005f1a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	0151      	lsls	r1, r2, #5
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	440a      	add	r2, r1
 8005f32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f36:	f043 0302 	orr.w	r3, r3, #2
 8005f3a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	4611      	mov	r1, r2
 8005f46:	4618      	mov	r0, r3
 8005f48:	f003 fd6d 	bl	8009a26 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	212c      	movs	r1, #44	; 0x2c
 8005f52:	fb01 f303 	mul.w	r3, r1, r3
 8005f56:	4413      	add	r3, r2
 8005f58:	3361      	adds	r3, #97	; 0x61
 8005f5a:	2205      	movs	r2, #5
 8005f5c:	701a      	strb	r2, [r3, #0]
}
 8005f5e:	e277      	b.n	8006450 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f003 0310 	and.w	r3, r3, #16
 8005f72:	2b10      	cmp	r3, #16
 8005f74:	d150      	bne.n	8006018 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	212c      	movs	r1, #44	; 0x2c
 8005f7c:	fb01 f303 	mul.w	r3, r1, r3
 8005f80:	4413      	add	r3, r2
 8005f82:	335c      	adds	r3, #92	; 0x5c
 8005f84:	2200      	movs	r2, #0
 8005f86:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	212c      	movs	r1, #44	; 0x2c
 8005f8e:	fb01 f303 	mul.w	r3, r1, r3
 8005f92:	4413      	add	r3, r2
 8005f94:	3361      	adds	r3, #97	; 0x61
 8005f96:	2203      	movs	r2, #3
 8005f98:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	212c      	movs	r1, #44	; 0x2c
 8005fa0:	fb01 f303 	mul.w	r3, r1, r3
 8005fa4:	4413      	add	r3, r2
 8005fa6:	333d      	adds	r3, #61	; 0x3d
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d112      	bne.n	8005fd4 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	212c      	movs	r1, #44	; 0x2c
 8005fb4:	fb01 f303 	mul.w	r3, r1, r3
 8005fb8:	4413      	add	r3, r2
 8005fba:	333c      	adds	r3, #60	; 0x3c
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d108      	bne.n	8005fd4 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	212c      	movs	r1, #44	; 0x2c
 8005fc8:	fb01 f303 	mul.w	r3, r1, r3
 8005fcc:	4413      	add	r3, r2
 8005fce:	333d      	adds	r3, #61	; 0x3d
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	0151      	lsls	r1, r2, #5
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	440a      	add	r2, r1
 8005fea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fee:	f043 0302 	orr.w	r3, r3, #2
 8005ff2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	4611      	mov	r1, r2
 8005ffe:	4618      	mov	r0, r3
 8006000:	f003 fd11 	bl	8009a26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	4413      	add	r3, r2
 800600c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006010:	461a      	mov	r2, r3
 8006012:	2310      	movs	r3, #16
 8006014:	6093      	str	r3, [r2, #8]
}
 8006016:	e21b      	b.n	8006450 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	4413      	add	r3, r2
 8006020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602a:	2b80      	cmp	r3, #128	; 0x80
 800602c:	d174      	bne.n	8006118 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d121      	bne.n	800607a <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	212c      	movs	r1, #44	; 0x2c
 800603c:	fb01 f303 	mul.w	r3, r1, r3
 8006040:	4413      	add	r3, r2
 8006042:	3361      	adds	r3, #97	; 0x61
 8006044:	2206      	movs	r2, #6
 8006046:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	4413      	add	r3, r2
 8006050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	0151      	lsls	r1, r2, #5
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	440a      	add	r2, r1
 800605e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006062:	f043 0302 	orr.w	r3, r3, #2
 8006066:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	4611      	mov	r1, r2
 8006072:	4618      	mov	r0, r3
 8006074:	f003 fcd7 	bl	8009a26 <USB_HC_Halt>
 8006078:	e044      	b.n	8006104 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	212c      	movs	r1, #44	; 0x2c
 8006080:	fb01 f303 	mul.w	r3, r1, r3
 8006084:	4413      	add	r3, r2
 8006086:	335c      	adds	r3, #92	; 0x5c
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	202c      	movs	r0, #44	; 0x2c
 8006092:	fb00 f303 	mul.w	r3, r0, r3
 8006096:	440b      	add	r3, r1
 8006098:	335c      	adds	r3, #92	; 0x5c
 800609a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	212c      	movs	r1, #44	; 0x2c
 80060a2:	fb01 f303 	mul.w	r3, r1, r3
 80060a6:	4413      	add	r3, r2
 80060a8:	335c      	adds	r3, #92	; 0x5c
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d920      	bls.n	80060f2 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	212c      	movs	r1, #44	; 0x2c
 80060b6:	fb01 f303 	mul.w	r3, r1, r3
 80060ba:	4413      	add	r3, r2
 80060bc:	335c      	adds	r3, #92	; 0x5c
 80060be:	2200      	movs	r2, #0
 80060c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	212c      	movs	r1, #44	; 0x2c
 80060c8:	fb01 f303 	mul.w	r3, r1, r3
 80060cc:	4413      	add	r3, r2
 80060ce:	3360      	adds	r3, #96	; 0x60
 80060d0:	2204      	movs	r2, #4
 80060d2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	b2d9      	uxtb	r1, r3
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	202c      	movs	r0, #44	; 0x2c
 80060de:	fb00 f303 	mul.w	r3, r0, r3
 80060e2:	4413      	add	r3, r2
 80060e4:	3360      	adds	r3, #96	; 0x60
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f014 f8b2 	bl	801a254 <HAL_HCD_HC_NotifyURBChange_Callback>
 80060f0:	e008      	b.n	8006104 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	212c      	movs	r1, #44	; 0x2c
 80060f8:	fb01 f303 	mul.w	r3, r1, r3
 80060fc:	4413      	add	r3, r2
 80060fe:	3360      	adds	r3, #96	; 0x60
 8006100:	2202      	movs	r2, #2
 8006102:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	4413      	add	r3, r2
 800610c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006110:	461a      	mov	r2, r3
 8006112:	2380      	movs	r3, #128	; 0x80
 8006114:	6093      	str	r3, [r2, #8]
}
 8006116:	e19b      	b.n	8006450 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	4413      	add	r3, r2
 8006120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800612a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800612e:	d134      	bne.n	800619a <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	4413      	add	r3, r2
 8006138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	0151      	lsls	r1, r2, #5
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	440a      	add	r2, r1
 8006146:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800614a:	f043 0302 	orr.w	r3, r3, #2
 800614e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	b2d2      	uxtb	r2, r2
 8006158:	4611      	mov	r1, r2
 800615a:	4618      	mov	r0, r3
 800615c:	f003 fc63 	bl	8009a26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	4413      	add	r3, r2
 8006168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800616c:	461a      	mov	r2, r3
 800616e:	2310      	movs	r3, #16
 8006170:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	4413      	add	r3, r2
 800617a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617e:	461a      	mov	r2, r3
 8006180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006184:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	212c      	movs	r1, #44	; 0x2c
 800618c:	fb01 f303 	mul.w	r3, r1, r3
 8006190:	4413      	add	r3, r2
 8006192:	3361      	adds	r3, #97	; 0x61
 8006194:	2208      	movs	r2, #8
 8006196:	701a      	strb	r2, [r3, #0]
}
 8006198:	e15a      	b.n	8006450 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	f040 814f 	bne.w	8006450 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	0151      	lsls	r1, r2, #5
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	440a      	add	r2, r1
 80061c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061cc:	f023 0302 	bic.w	r3, r3, #2
 80061d0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	212c      	movs	r1, #44	; 0x2c
 80061d8:	fb01 f303 	mul.w	r3, r1, r3
 80061dc:	4413      	add	r3, r2
 80061de:	3361      	adds	r3, #97	; 0x61
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d17d      	bne.n	80062e2 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	212c      	movs	r1, #44	; 0x2c
 80061ec:	fb01 f303 	mul.w	r3, r1, r3
 80061f0:	4413      	add	r3, r2
 80061f2:	3360      	adds	r3, #96	; 0x60
 80061f4:	2201      	movs	r2, #1
 80061f6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	212c      	movs	r1, #44	; 0x2c
 80061fe:	fb01 f303 	mul.w	r3, r1, r3
 8006202:	4413      	add	r3, r2
 8006204:	333f      	adds	r3, #63	; 0x3f
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	2b02      	cmp	r3, #2
 800620a:	d00a      	beq.n	8006222 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	212c      	movs	r1, #44	; 0x2c
 8006212:	fb01 f303 	mul.w	r3, r1, r3
 8006216:	4413      	add	r3, r2
 8006218:	333f      	adds	r3, #63	; 0x3f
 800621a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800621c:	2b03      	cmp	r3, #3
 800621e:	f040 8100 	bne.w	8006422 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d113      	bne.n	8006252 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	212c      	movs	r1, #44	; 0x2c
 8006230:	fb01 f303 	mul.w	r3, r1, r3
 8006234:	4413      	add	r3, r2
 8006236:	3355      	adds	r3, #85	; 0x55
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	f083 0301 	eor.w	r3, r3, #1
 800623e:	b2d8      	uxtb	r0, r3
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	212c      	movs	r1, #44	; 0x2c
 8006246:	fb01 f303 	mul.w	r3, r1, r3
 800624a:	4413      	add	r3, r2
 800624c:	3355      	adds	r3, #85	; 0x55
 800624e:	4602      	mov	r2, r0
 8006250:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	2b01      	cmp	r3, #1
 8006258:	f040 80e3 	bne.w	8006422 <HCD_HC_OUT_IRQHandler+0x7cc>
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	212c      	movs	r1, #44	; 0x2c
 8006262:	fb01 f303 	mul.w	r3, r1, r3
 8006266:	4413      	add	r3, r2
 8006268:	334c      	adds	r3, #76	; 0x4c
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 80d8 	beq.w	8006422 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	212c      	movs	r1, #44	; 0x2c
 8006278:	fb01 f303 	mul.w	r3, r1, r3
 800627c:	4413      	add	r3, r2
 800627e:	334c      	adds	r3, #76	; 0x4c
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	202c      	movs	r0, #44	; 0x2c
 8006288:	fb00 f202 	mul.w	r2, r0, r2
 800628c:	440a      	add	r2, r1
 800628e:	3240      	adds	r2, #64	; 0x40
 8006290:	8812      	ldrh	r2, [r2, #0]
 8006292:	4413      	add	r3, r2
 8006294:	3b01      	subs	r3, #1
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	202c      	movs	r0, #44	; 0x2c
 800629c:	fb00 f202 	mul.w	r2, r0, r2
 80062a0:	440a      	add	r2, r1
 80062a2:	3240      	adds	r2, #64	; 0x40
 80062a4:	8812      	ldrh	r2, [r2, #0]
 80062a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 80b5 	beq.w	8006422 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	212c      	movs	r1, #44	; 0x2c
 80062be:	fb01 f303 	mul.w	r3, r1, r3
 80062c2:	4413      	add	r3, r2
 80062c4:	3355      	adds	r3, #85	; 0x55
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	f083 0301 	eor.w	r3, r3, #1
 80062cc:	b2d8      	uxtb	r0, r3
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	212c      	movs	r1, #44	; 0x2c
 80062d4:	fb01 f303 	mul.w	r3, r1, r3
 80062d8:	4413      	add	r3, r2
 80062da:	3355      	adds	r3, #85	; 0x55
 80062dc:	4602      	mov	r2, r0
 80062de:	701a      	strb	r2, [r3, #0]
 80062e0:	e09f      	b.n	8006422 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	212c      	movs	r1, #44	; 0x2c
 80062e8:	fb01 f303 	mul.w	r3, r1, r3
 80062ec:	4413      	add	r3, r2
 80062ee:	3361      	adds	r3, #97	; 0x61
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	d109      	bne.n	800630a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	212c      	movs	r1, #44	; 0x2c
 80062fc:	fb01 f303 	mul.w	r3, r1, r3
 8006300:	4413      	add	r3, r2
 8006302:	3360      	adds	r3, #96	; 0x60
 8006304:	2202      	movs	r2, #2
 8006306:	701a      	strb	r2, [r3, #0]
 8006308:	e08b      	b.n	8006422 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	212c      	movs	r1, #44	; 0x2c
 8006310:	fb01 f303 	mul.w	r3, r1, r3
 8006314:	4413      	add	r3, r2
 8006316:	3361      	adds	r3, #97	; 0x61
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	2b04      	cmp	r3, #4
 800631c:	d109      	bne.n	8006332 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	212c      	movs	r1, #44	; 0x2c
 8006324:	fb01 f303 	mul.w	r3, r1, r3
 8006328:	4413      	add	r3, r2
 800632a:	3360      	adds	r3, #96	; 0x60
 800632c:	2202      	movs	r2, #2
 800632e:	701a      	strb	r2, [r3, #0]
 8006330:	e077      	b.n	8006422 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	212c      	movs	r1, #44	; 0x2c
 8006338:	fb01 f303 	mul.w	r3, r1, r3
 800633c:	4413      	add	r3, r2
 800633e:	3361      	adds	r3, #97	; 0x61
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	2b05      	cmp	r3, #5
 8006344:	d109      	bne.n	800635a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	212c      	movs	r1, #44	; 0x2c
 800634c:	fb01 f303 	mul.w	r3, r1, r3
 8006350:	4413      	add	r3, r2
 8006352:	3360      	adds	r3, #96	; 0x60
 8006354:	2205      	movs	r2, #5
 8006356:	701a      	strb	r2, [r3, #0]
 8006358:	e063      	b.n	8006422 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	212c      	movs	r1, #44	; 0x2c
 8006360:	fb01 f303 	mul.w	r3, r1, r3
 8006364:	4413      	add	r3, r2
 8006366:	3361      	adds	r3, #97	; 0x61
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	2b06      	cmp	r3, #6
 800636c:	d009      	beq.n	8006382 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	212c      	movs	r1, #44	; 0x2c
 8006374:	fb01 f303 	mul.w	r3, r1, r3
 8006378:	4413      	add	r3, r2
 800637a:	3361      	adds	r3, #97	; 0x61
 800637c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800637e:	2b08      	cmp	r3, #8
 8006380:	d14f      	bne.n	8006422 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	212c      	movs	r1, #44	; 0x2c
 8006388:	fb01 f303 	mul.w	r3, r1, r3
 800638c:	4413      	add	r3, r2
 800638e:	335c      	adds	r3, #92	; 0x5c
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	1c5a      	adds	r2, r3, #1
 8006394:	6879      	ldr	r1, [r7, #4]
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	202c      	movs	r0, #44	; 0x2c
 800639a:	fb00 f303 	mul.w	r3, r0, r3
 800639e:	440b      	add	r3, r1
 80063a0:	335c      	adds	r3, #92	; 0x5c
 80063a2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	212c      	movs	r1, #44	; 0x2c
 80063aa:	fb01 f303 	mul.w	r3, r1, r3
 80063ae:	4413      	add	r3, r2
 80063b0:	335c      	adds	r3, #92	; 0x5c
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d912      	bls.n	80063de <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	212c      	movs	r1, #44	; 0x2c
 80063be:	fb01 f303 	mul.w	r3, r1, r3
 80063c2:	4413      	add	r3, r2
 80063c4:	335c      	adds	r3, #92	; 0x5c
 80063c6:	2200      	movs	r2, #0
 80063c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	212c      	movs	r1, #44	; 0x2c
 80063d0:	fb01 f303 	mul.w	r3, r1, r3
 80063d4:	4413      	add	r3, r2
 80063d6:	3360      	adds	r3, #96	; 0x60
 80063d8:	2204      	movs	r2, #4
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	e021      	b.n	8006422 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	212c      	movs	r1, #44	; 0x2c
 80063e4:	fb01 f303 	mul.w	r3, r1, r3
 80063e8:	4413      	add	r3, r2
 80063ea:	3360      	adds	r3, #96	; 0x60
 80063ec:	2202      	movs	r2, #2
 80063ee:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006406:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800640e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	4413      	add	r3, r2
 8006418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641c:	461a      	mov	r2, r3
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	015a      	lsls	r2, r3, #5
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	4413      	add	r3, r2
 800642a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800642e:	461a      	mov	r2, r3
 8006430:	2302      	movs	r3, #2
 8006432:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	b2d9      	uxtb	r1, r3
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	202c      	movs	r0, #44	; 0x2c
 800643e:	fb00 f303 	mul.w	r3, r0, r3
 8006442:	4413      	add	r3, r2
 8006444:	3360      	adds	r3, #96	; 0x60
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	461a      	mov	r2, r3
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f013 ff02 	bl	801a254 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006450:	bf00      	nop
 8006452:	3720      	adds	r7, #32
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b08a      	sub	sp, #40	; 0x28
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	f003 030f 	and.w	r3, r3, #15
 8006478:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	0c5b      	lsrs	r3, r3, #17
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	091b      	lsrs	r3, r3, #4
 8006488:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800648c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2b02      	cmp	r3, #2
 8006492:	d004      	beq.n	800649e <HCD_RXQLVL_IRQHandler+0x46>
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	2b05      	cmp	r3, #5
 8006498:	f000 80a9 	beq.w	80065ee <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800649c:	e0aa      	b.n	80065f4 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 80a6 	beq.w	80065f2 <HCD_RXQLVL_IRQHandler+0x19a>
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	212c      	movs	r1, #44	; 0x2c
 80064ac:	fb01 f303 	mul.w	r3, r1, r3
 80064b0:	4413      	add	r3, r2
 80064b2:	3344      	adds	r3, #68	; 0x44
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 809b 	beq.w	80065f2 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	212c      	movs	r1, #44	; 0x2c
 80064c2:	fb01 f303 	mul.w	r3, r1, r3
 80064c6:	4413      	add	r3, r2
 80064c8:	3350      	adds	r3, #80	; 0x50
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	441a      	add	r2, r3
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	202c      	movs	r0, #44	; 0x2c
 80064d6:	fb00 f303 	mul.w	r3, r0, r3
 80064da:	440b      	add	r3, r1
 80064dc:	334c      	adds	r3, #76	; 0x4c
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d87a      	bhi.n	80065da <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6818      	ldr	r0, [r3, #0]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	212c      	movs	r1, #44	; 0x2c
 80064ee:	fb01 f303 	mul.w	r3, r1, r3
 80064f2:	4413      	add	r3, r2
 80064f4:	3344      	adds	r3, #68	; 0x44
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	b292      	uxth	r2, r2
 80064fc:	4619      	mov	r1, r3
 80064fe:	f002 fe0b 	bl	8009118 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	212c      	movs	r1, #44	; 0x2c
 8006508:	fb01 f303 	mul.w	r3, r1, r3
 800650c:	4413      	add	r3, r2
 800650e:	3344      	adds	r3, #68	; 0x44
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	441a      	add	r2, r3
 8006516:	6879      	ldr	r1, [r7, #4]
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	202c      	movs	r0, #44	; 0x2c
 800651c:	fb00 f303 	mul.w	r3, r0, r3
 8006520:	440b      	add	r3, r1
 8006522:	3344      	adds	r3, #68	; 0x44
 8006524:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	212c      	movs	r1, #44	; 0x2c
 800652c:	fb01 f303 	mul.w	r3, r1, r3
 8006530:	4413      	add	r3, r2
 8006532:	3350      	adds	r3, #80	; 0x50
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	441a      	add	r2, r3
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	202c      	movs	r0, #44	; 0x2c
 8006540:	fb00 f303 	mul.w	r3, r0, r3
 8006544:	440b      	add	r3, r1
 8006546:	3350      	adds	r3, #80	; 0x50
 8006548:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	4413      	add	r3, r2
 8006552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	0cdb      	lsrs	r3, r3, #19
 800655a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800655e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	212c      	movs	r1, #44	; 0x2c
 8006566:	fb01 f303 	mul.w	r3, r1, r3
 800656a:	4413      	add	r3, r2
 800656c:	3340      	adds	r3, #64	; 0x40
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	461a      	mov	r2, r3
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	4293      	cmp	r3, r2
 8006576:	d13c      	bne.n	80065f2 <HCD_RXQLVL_IRQHandler+0x19a>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d039      	beq.n	80065f2 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	4413      	add	r3, r2
 8006586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006594:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800659c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065aa:	461a      	mov	r2, r3
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	212c      	movs	r1, #44	; 0x2c
 80065b6:	fb01 f303 	mul.w	r3, r1, r3
 80065ba:	4413      	add	r3, r2
 80065bc:	3354      	adds	r3, #84	; 0x54
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	f083 0301 	eor.w	r3, r3, #1
 80065c4:	b2d8      	uxtb	r0, r3
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	212c      	movs	r1, #44	; 0x2c
 80065cc:	fb01 f303 	mul.w	r3, r1, r3
 80065d0:	4413      	add	r3, r2
 80065d2:	3354      	adds	r3, #84	; 0x54
 80065d4:	4602      	mov	r2, r0
 80065d6:	701a      	strb	r2, [r3, #0]
      break;
 80065d8:	e00b      	b.n	80065f2 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	212c      	movs	r1, #44	; 0x2c
 80065e0:	fb01 f303 	mul.w	r3, r1, r3
 80065e4:	4413      	add	r3, r2
 80065e6:	3360      	adds	r3, #96	; 0x60
 80065e8:	2204      	movs	r2, #4
 80065ea:	701a      	strb	r2, [r3, #0]
      break;
 80065ec:	e001      	b.n	80065f2 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80065ee:	bf00      	nop
 80065f0:	e000      	b.n	80065f4 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80065f2:	bf00      	nop
  }
}
 80065f4:	bf00      	nop
 80065f6:	3728      	adds	r7, #40	; 0x28
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006628:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b02      	cmp	r3, #2
 8006632:	d10b      	bne.n	800664c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b01      	cmp	r3, #1
 800663c:	d102      	bne.n	8006644 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f013 fdec 	bl	801a21c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f043 0302 	orr.w	r3, r3, #2
 800664a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	2b08      	cmp	r3, #8
 8006654:	d132      	bne.n	80066bc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f043 0308 	orr.w	r3, r3, #8
 800665c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f003 0304 	and.w	r3, r3, #4
 8006664:	2b04      	cmp	r3, #4
 8006666:	d126      	bne.n	80066b6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d113      	bne.n	8006698 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006676:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800667a:	d106      	bne.n	800668a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2102      	movs	r1, #2
 8006682:	4618      	mov	r0, r3
 8006684:	f002 fea8 	bl	80093d8 <USB_InitFSLSPClkSel>
 8006688:	e011      	b.n	80066ae <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2101      	movs	r1, #1
 8006690:	4618      	mov	r0, r3
 8006692:	f002 fea1 	bl	80093d8 <USB_InitFSLSPClkSel>
 8006696:	e00a      	b.n	80066ae <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d106      	bne.n	80066ae <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066a6:	461a      	mov	r2, r3
 80066a8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80066ac:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f013 fdde 	bl	801a270 <HAL_HCD_PortEnabled_Callback>
 80066b4:	e002      	b.n	80066bc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f013 fde8 	bl	801a28c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f003 0320 	and.w	r3, r3, #32
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	d103      	bne.n	80066ce <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f043 0320 	orr.w	r3, r3, #32
 80066cc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80066d4:	461a      	mov	r2, r3
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	6013      	str	r3, [r2, #0]
}
 80066da:	bf00      	nop
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
	...

080066e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e12b      	b.n	800694e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d106      	bne.n	8006710 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7fa fd08 	bl	8001120 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2224      	movs	r2, #36	; 0x24
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0201 	bic.w	r2, r2, #1
 8006726:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006736:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006746:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006748:	f001 ff16 	bl	8008578 <HAL_RCC_GetPCLK1Freq>
 800674c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	4a81      	ldr	r2, [pc, #516]	; (8006958 <HAL_I2C_Init+0x274>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d807      	bhi.n	8006768 <HAL_I2C_Init+0x84>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4a80      	ldr	r2, [pc, #512]	; (800695c <HAL_I2C_Init+0x278>)
 800675c:	4293      	cmp	r3, r2
 800675e:	bf94      	ite	ls
 8006760:	2301      	movls	r3, #1
 8006762:	2300      	movhi	r3, #0
 8006764:	b2db      	uxtb	r3, r3
 8006766:	e006      	b.n	8006776 <HAL_I2C_Init+0x92>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4a7d      	ldr	r2, [pc, #500]	; (8006960 <HAL_I2C_Init+0x27c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	bf94      	ite	ls
 8006770:	2301      	movls	r3, #1
 8006772:	2300      	movhi	r3, #0
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e0e7      	b.n	800694e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	4a78      	ldr	r2, [pc, #480]	; (8006964 <HAL_I2C_Init+0x280>)
 8006782:	fba2 2303 	umull	r2, r3, r2, r3
 8006786:	0c9b      	lsrs	r3, r3, #18
 8006788:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	430a      	orrs	r2, r1
 800679c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	4a6a      	ldr	r2, [pc, #424]	; (8006958 <HAL_I2C_Init+0x274>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d802      	bhi.n	80067b8 <HAL_I2C_Init+0xd4>
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	3301      	adds	r3, #1
 80067b6:	e009      	b.n	80067cc <HAL_I2C_Init+0xe8>
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80067be:	fb02 f303 	mul.w	r3, r2, r3
 80067c2:	4a69      	ldr	r2, [pc, #420]	; (8006968 <HAL_I2C_Init+0x284>)
 80067c4:	fba2 2303 	umull	r2, r3, r2, r3
 80067c8:	099b      	lsrs	r3, r3, #6
 80067ca:	3301      	adds	r3, #1
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	6812      	ldr	r2, [r2, #0]
 80067d0:	430b      	orrs	r3, r1
 80067d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80067de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	495c      	ldr	r1, [pc, #368]	; (8006958 <HAL_I2C_Init+0x274>)
 80067e8:	428b      	cmp	r3, r1
 80067ea:	d819      	bhi.n	8006820 <HAL_I2C_Init+0x13c>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	1e59      	subs	r1, r3, #1
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80067fa:	1c59      	adds	r1, r3, #1
 80067fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006800:	400b      	ands	r3, r1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <HAL_I2C_Init+0x138>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	1e59      	subs	r1, r3, #1
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	005b      	lsls	r3, r3, #1
 8006810:	fbb1 f3f3 	udiv	r3, r1, r3
 8006814:	3301      	adds	r3, #1
 8006816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800681a:	e051      	b.n	80068c0 <HAL_I2C_Init+0x1dc>
 800681c:	2304      	movs	r3, #4
 800681e:	e04f      	b.n	80068c0 <HAL_I2C_Init+0x1dc>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d111      	bne.n	800684c <HAL_I2C_Init+0x168>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	1e58      	subs	r0, r3, #1
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6859      	ldr	r1, [r3, #4]
 8006830:	460b      	mov	r3, r1
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	440b      	add	r3, r1
 8006836:	fbb0 f3f3 	udiv	r3, r0, r3
 800683a:	3301      	adds	r3, #1
 800683c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006840:	2b00      	cmp	r3, #0
 8006842:	bf0c      	ite	eq
 8006844:	2301      	moveq	r3, #1
 8006846:	2300      	movne	r3, #0
 8006848:	b2db      	uxtb	r3, r3
 800684a:	e012      	b.n	8006872 <HAL_I2C_Init+0x18e>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	1e58      	subs	r0, r3, #1
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6859      	ldr	r1, [r3, #4]
 8006854:	460b      	mov	r3, r1
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	440b      	add	r3, r1
 800685a:	0099      	lsls	r1, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006862:	3301      	adds	r3, #1
 8006864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006868:	2b00      	cmp	r3, #0
 800686a:	bf0c      	ite	eq
 800686c:	2301      	moveq	r3, #1
 800686e:	2300      	movne	r3, #0
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <HAL_I2C_Init+0x196>
 8006876:	2301      	movs	r3, #1
 8006878:	e022      	b.n	80068c0 <HAL_I2C_Init+0x1dc>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10e      	bne.n	80068a0 <HAL_I2C_Init+0x1bc>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	1e58      	subs	r0, r3, #1
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6859      	ldr	r1, [r3, #4]
 800688a:	460b      	mov	r3, r1
 800688c:	005b      	lsls	r3, r3, #1
 800688e:	440b      	add	r3, r1
 8006890:	fbb0 f3f3 	udiv	r3, r0, r3
 8006894:	3301      	adds	r3, #1
 8006896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800689a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800689e:	e00f      	b.n	80068c0 <HAL_I2C_Init+0x1dc>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	1e58      	subs	r0, r3, #1
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6859      	ldr	r1, [r3, #4]
 80068a8:	460b      	mov	r3, r1
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	440b      	add	r3, r1
 80068ae:	0099      	lsls	r1, r3, #2
 80068b0:	440b      	add	r3, r1
 80068b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80068b6:	3301      	adds	r3, #1
 80068b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	6809      	ldr	r1, [r1, #0]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	69da      	ldr	r2, [r3, #28]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80068ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6911      	ldr	r1, [r2, #16]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	68d2      	ldr	r2, [r2, #12]
 80068fa:	4311      	orrs	r1, r2
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	6812      	ldr	r2, [r2, #0]
 8006900:	430b      	orrs	r3, r1
 8006902:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	695a      	ldr	r2, [r3, #20]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	430a      	orrs	r2, r1
 800691e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f042 0201 	orr.w	r2, r2, #1
 800692e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2220      	movs	r2, #32
 800693a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	000186a0 	.word	0x000186a0
 800695c:	001e847f 	.word	0x001e847f
 8006960:	003d08ff 	.word	0x003d08ff
 8006964:	431bde83 	.word	0x431bde83
 8006968:	10624dd3 	.word	0x10624dd3

0800696c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b088      	sub	sp, #32
 8006970:	af02      	add	r7, sp, #8
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	607a      	str	r2, [r7, #4]
 8006976:	461a      	mov	r2, r3
 8006978:	460b      	mov	r3, r1
 800697a:	817b      	strh	r3, [r7, #10]
 800697c:	4613      	mov	r3, r2
 800697e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006980:	f7fa ffee 	bl	8001960 <HAL_GetTick>
 8006984:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b20      	cmp	r3, #32
 8006990:	f040 80e0 	bne.w	8006b54 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	2319      	movs	r3, #25
 800699a:	2201      	movs	r2, #1
 800699c:	4970      	ldr	r1, [pc, #448]	; (8006b60 <HAL_I2C_Master_Transmit+0x1f4>)
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 f964 	bl	8006c6c <I2C_WaitOnFlagUntilTimeout>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80069aa:	2302      	movs	r3, #2
 80069ac:	e0d3      	b.n	8006b56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d101      	bne.n	80069bc <HAL_I2C_Master_Transmit+0x50>
 80069b8:	2302      	movs	r3, #2
 80069ba:	e0cc      	b.n	8006b56 <HAL_I2C_Master_Transmit+0x1ea>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d007      	beq.n	80069e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f042 0201 	orr.w	r2, r2, #1
 80069e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2221      	movs	r2, #33	; 0x21
 80069f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2210      	movs	r2, #16
 80069fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	893a      	ldrh	r2, [r7, #8]
 8006a12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	4a50      	ldr	r2, [pc, #320]	; (8006b64 <HAL_I2C_Master_Transmit+0x1f8>)
 8006a22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006a24:	8979      	ldrh	r1, [r7, #10]
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	6a3a      	ldr	r2, [r7, #32]
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 f89c 	bl	8006b68 <I2C_MasterRequestWrite>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e08d      	b.n	8006b56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	613b      	str	r3, [r7, #16]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	613b      	str	r3, [r7, #16]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	613b      	str	r3, [r7, #16]
 8006a4e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006a50:	e066      	b.n	8006b20 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	6a39      	ldr	r1, [r7, #32]
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 f9de 	bl	8006e18 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00d      	beq.n	8006a7e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d107      	bne.n	8006a7a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e06b      	b.n	8006b56 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	781a      	ldrb	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	1c5a      	adds	r2, r3, #1
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	f003 0304 	and.w	r3, r3, #4
 8006ab8:	2b04      	cmp	r3, #4
 8006aba:	d11b      	bne.n	8006af4 <HAL_I2C_Master_Transmit+0x188>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d017      	beq.n	8006af4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	781a      	ldrb	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aec:	3b01      	subs	r3, #1
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	6a39      	ldr	r1, [r7, #32]
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 f9ce 	bl	8006e9a <I2C_WaitOnBTFFlagUntilTimeout>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00d      	beq.n	8006b20 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d107      	bne.n	8006b1c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b1a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e01a      	b.n	8006b56 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d194      	bne.n	8006a52 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	e000      	b.n	8006b56 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006b54:	2302      	movs	r3, #2
  }
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	00100002 	.word	0x00100002
 8006b64:	ffff0000 	.word	0xffff0000

08006b68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b088      	sub	sp, #32
 8006b6c:	af02      	add	r7, sp, #8
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	607a      	str	r2, [r7, #4]
 8006b72:	603b      	str	r3, [r7, #0]
 8006b74:	460b      	mov	r3, r1
 8006b76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	2b08      	cmp	r3, #8
 8006b82:	d006      	beq.n	8006b92 <I2C_MasterRequestWrite+0x2a>
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d003      	beq.n	8006b92 <I2C_MasterRequestWrite+0x2a>
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b90:	d108      	bne.n	8006ba4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	e00b      	b.n	8006bbc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba8:	2b12      	cmp	r3, #18
 8006baa:	d107      	bne.n	8006bbc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 f84f 	bl	8006c6c <I2C_WaitOnFlagUntilTimeout>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00d      	beq.n	8006bf0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006be2:	d103      	bne.n	8006bec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e035      	b.n	8006c5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bf8:	d108      	bne.n	8006c0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006bfa:	897b      	ldrh	r3, [r7, #10]
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	461a      	mov	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c08:	611a      	str	r2, [r3, #16]
 8006c0a:	e01b      	b.n	8006c44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006c0c:	897b      	ldrh	r3, [r7, #10]
 8006c0e:	11db      	asrs	r3, r3, #7
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	f003 0306 	and.w	r3, r3, #6
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	f063 030f 	orn	r3, r3, #15
 8006c1c:	b2da      	uxtb	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	490e      	ldr	r1, [pc, #56]	; (8006c64 <I2C_MasterRequestWrite+0xfc>)
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 f875 	bl	8006d1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d001      	beq.n	8006c3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e010      	b.n	8006c5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006c3a:	897b      	ldrh	r3, [r7, #10]
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	4907      	ldr	r1, [pc, #28]	; (8006c68 <I2C_MasterRequestWrite+0x100>)
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 f865 	bl	8006d1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e000      	b.n	8006c5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3718      	adds	r7, #24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	00010008 	.word	0x00010008
 8006c68:	00010002 	.word	0x00010002

08006c6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	603b      	str	r3, [r7, #0]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c7c:	e025      	b.n	8006cca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c84:	d021      	beq.n	8006cca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c86:	f7fa fe6b 	bl	8001960 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d302      	bcc.n	8006c9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d116      	bne.n	8006cca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	f043 0220 	orr.w	r2, r3, #32
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e023      	b.n	8006d12 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	0c1b      	lsrs	r3, r3, #16
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d10d      	bne.n	8006cf0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	43da      	mvns	r2, r3
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	bf0c      	ite	eq
 8006ce6:	2301      	moveq	r3, #1
 8006ce8:	2300      	movne	r3, #0
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	461a      	mov	r2, r3
 8006cee:	e00c      	b.n	8006d0a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	43da      	mvns	r2, r3
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	bf0c      	ite	eq
 8006d02:	2301      	moveq	r3, #1
 8006d04:	2300      	movne	r3, #0
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	461a      	mov	r2, r3
 8006d0a:	79fb      	ldrb	r3, [r7, #7]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d0b6      	beq.n	8006c7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	60f8      	str	r0, [r7, #12]
 8006d22:	60b9      	str	r1, [r7, #8]
 8006d24:	607a      	str	r2, [r7, #4]
 8006d26:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d28:	e051      	b.n	8006dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d38:	d123      	bne.n	8006d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d48:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d52:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6e:	f043 0204 	orr.w	r2, r3, #4
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e046      	b.n	8006e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d88:	d021      	beq.n	8006dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d8a:	f7fa fde9 	bl	8001960 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d302      	bcc.n	8006da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d116      	bne.n	8006dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2220      	movs	r2, #32
 8006daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	f043 0220 	orr.w	r2, r3, #32
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e020      	b.n	8006e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	0c1b      	lsrs	r3, r3, #16
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d10c      	bne.n	8006df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	43da      	mvns	r2, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	4013      	ands	r3, r2
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	bf14      	ite	ne
 8006dea:	2301      	movne	r3, #1
 8006dec:	2300      	moveq	r3, #0
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	e00b      	b.n	8006e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	43da      	mvns	r2, r3
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	bf14      	ite	ne
 8006e04:	2301      	movne	r3, #1
 8006e06:	2300      	moveq	r3, #0
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d18d      	bne.n	8006d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e24:	e02d      	b.n	8006e82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f000 f878 	bl	8006f1c <I2C_IsAcknowledgeFailed>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e02d      	b.n	8006e92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3c:	d021      	beq.n	8006e82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e3e:	f7fa fd8f 	bl	8001960 <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d302      	bcc.n	8006e54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d116      	bne.n	8006e82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	f043 0220 	orr.w	r2, r3, #32
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e007      	b.n	8006e92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e8c:	2b80      	cmp	r3, #128	; 0x80
 8006e8e:	d1ca      	bne.n	8006e26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b084      	sub	sp, #16
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	60f8      	str	r0, [r7, #12]
 8006ea2:	60b9      	str	r1, [r7, #8]
 8006ea4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ea6:	e02d      	b.n	8006f04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 f837 	bl	8006f1c <I2C_IsAcknowledgeFailed>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e02d      	b.n	8006f14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebe:	d021      	beq.n	8006f04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ec0:	f7fa fd4e 	bl	8001960 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d302      	bcc.n	8006ed6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d116      	bne.n	8006f04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef0:	f043 0220 	orr.w	r2, r3, #32
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e007      	b.n	8006f14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	f003 0304 	and.w	r3, r3, #4
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	d1ca      	bne.n	8006ea8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f32:	d11b      	bne.n	8006f6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2220      	movs	r2, #32
 8006f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f58:	f043 0204 	orr.w	r2, r3, #4
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e000      	b.n	8006f6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
	...

08006f7c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e128      	b.n	80071e0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d109      	bne.n	8006fae <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a90      	ldr	r2, [pc, #576]	; (80071e8 <HAL_I2S_Init+0x26c>)
 8006fa6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7fa f937 	bl	800121c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	69db      	ldr	r3, [r3, #28]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	6812      	ldr	r2, [r2, #0]
 8006fc0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006fc4:	f023 030f 	bic.w	r3, r3, #15
 8006fc8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2202      	movs	r2, #2
 8006fd0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d060      	beq.n	800709c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d102      	bne.n	8006fe8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006fe2:	2310      	movs	r3, #16
 8006fe4:	617b      	str	r3, [r7, #20]
 8006fe6:	e001      	b.n	8006fec <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006fe8:	2320      	movs	r3, #32
 8006fea:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	2b20      	cmp	r3, #32
 8006ff2:	d802      	bhi.n	8006ffa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	005b      	lsls	r3, r3, #1
 8006ff8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006ffa:	2001      	movs	r0, #1
 8006ffc:	f001 fbc6 	bl	800878c <HAL_RCCEx_GetPeriphCLKFreq>
 8007000:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800700a:	d125      	bne.n	8007058 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d010      	beq.n	8007036 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	fbb2 f2f3 	udiv	r2, r2, r3
 800701e:	4613      	mov	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	005b      	lsls	r3, r3, #1
 8007026:	461a      	mov	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007030:	3305      	adds	r3, #5
 8007032:	613b      	str	r3, [r7, #16]
 8007034:	e01f      	b.n	8007076 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	00db      	lsls	r3, r3, #3
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007040:	4613      	mov	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	005b      	lsls	r3, r3, #1
 8007048:	461a      	mov	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007052:	3305      	adds	r3, #5
 8007054:	613b      	str	r3, [r7, #16]
 8007056:	e00e      	b.n	8007076 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007060:	4613      	mov	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	461a      	mov	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007072:	3305      	adds	r3, #5
 8007074:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	4a5c      	ldr	r2, [pc, #368]	; (80071ec <HAL_I2S_Init+0x270>)
 800707a:	fba2 2303 	umull	r2, r3, r2, r3
 800707e:	08db      	lsrs	r3, r3, #3
 8007080:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	085b      	lsrs	r3, r3, #1
 8007092:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	021b      	lsls	r3, r3, #8
 8007098:	61bb      	str	r3, [r7, #24]
 800709a:	e003      	b.n	80070a4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800709c:	2302      	movs	r3, #2
 800709e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d902      	bls.n	80070b0 <HAL_I2S_Init+0x134>
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	2bff      	cmp	r3, #255	; 0xff
 80070ae:	d907      	bls.n	80070c0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b4:	f043 0210 	orr.w	r2, r3, #16
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e08f      	b.n	80071e0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	691a      	ldr	r2, [r3, #16]
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	ea42 0103 	orr.w	r1, r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	69fa      	ldr	r2, [r7, #28]
 80070d0:	430a      	orrs	r2, r1
 80070d2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80070de:	f023 030f 	bic.w	r3, r3, #15
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	6851      	ldr	r1, [r2, #4]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	6892      	ldr	r2, [r2, #8]
 80070ea:	4311      	orrs	r1, r2
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	68d2      	ldr	r2, [r2, #12]
 80070f0:	4311      	orrs	r1, r2
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6992      	ldr	r2, [r2, #24]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	431a      	orrs	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007102:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a1b      	ldr	r3, [r3, #32]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d161      	bne.n	80071d0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a38      	ldr	r2, [pc, #224]	; (80071f0 <HAL_I2S_Init+0x274>)
 8007110:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a37      	ldr	r2, [pc, #220]	; (80071f4 <HAL_I2S_Init+0x278>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d101      	bne.n	8007120 <HAL_I2S_Init+0x1a4>
 800711c:	4b36      	ldr	r3, [pc, #216]	; (80071f8 <HAL_I2S_Init+0x27c>)
 800711e:	e001      	b.n	8007124 <HAL_I2S_Init+0x1a8>
 8007120:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	6812      	ldr	r2, [r2, #0]
 800712a:	4932      	ldr	r1, [pc, #200]	; (80071f4 <HAL_I2S_Init+0x278>)
 800712c:	428a      	cmp	r2, r1
 800712e:	d101      	bne.n	8007134 <HAL_I2S_Init+0x1b8>
 8007130:	4a31      	ldr	r2, [pc, #196]	; (80071f8 <HAL_I2S_Init+0x27c>)
 8007132:	e001      	b.n	8007138 <HAL_I2S_Init+0x1bc>
 8007134:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8007138:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800713c:	f023 030f 	bic.w	r3, r3, #15
 8007140:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a2b      	ldr	r2, [pc, #172]	; (80071f4 <HAL_I2S_Init+0x278>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d101      	bne.n	8007150 <HAL_I2S_Init+0x1d4>
 800714c:	4b2a      	ldr	r3, [pc, #168]	; (80071f8 <HAL_I2S_Init+0x27c>)
 800714e:	e001      	b.n	8007154 <HAL_I2S_Init+0x1d8>
 8007150:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007154:	2202      	movs	r2, #2
 8007156:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a25      	ldr	r2, [pc, #148]	; (80071f4 <HAL_I2S_Init+0x278>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d101      	bne.n	8007166 <HAL_I2S_Init+0x1ea>
 8007162:	4b25      	ldr	r3, [pc, #148]	; (80071f8 <HAL_I2S_Init+0x27c>)
 8007164:	e001      	b.n	800716a <HAL_I2S_Init+0x1ee>
 8007166:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800716a:	69db      	ldr	r3, [r3, #28]
 800716c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007176:	d003      	beq.n	8007180 <HAL_I2S_Init+0x204>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d103      	bne.n	8007188 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8007180:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007184:	613b      	str	r3, [r7, #16]
 8007186:	e001      	b.n	800718c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8007188:	2300      	movs	r3, #0
 800718a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007196:	4313      	orrs	r3, r2
 8007198:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80071a0:	4313      	orrs	r3, r2
 80071a2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80071aa:	4313      	orrs	r3, r2
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	897b      	ldrh	r3, [r7, #10]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80071b8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a0d      	ldr	r2, [pc, #52]	; (80071f4 <HAL_I2S_Init+0x278>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d101      	bne.n	80071c8 <HAL_I2S_Init+0x24c>
 80071c4:	4b0c      	ldr	r3, [pc, #48]	; (80071f8 <HAL_I2S_Init+0x27c>)
 80071c6:	e001      	b.n	80071cc <HAL_I2S_Init+0x250>
 80071c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071cc:	897a      	ldrh	r2, [r7, #10]
 80071ce:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3720      	adds	r7, #32
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	080076a7 	.word	0x080076a7
 80071ec:	cccccccd 	.word	0xcccccccd
 80071f0:	0800782d 	.word	0x0800782d
 80071f4:	40003800 	.word	0x40003800
 80071f8:	40003400 	.word	0x40003400

080071fc <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b088      	sub	sp, #32
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007210:	d004      	beq.n	800721c <HAL_I2S_DMAStop+0x20>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	f040 80d1 	bne.w	80073be <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00f      	beq.n	8007244 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007228:	4618      	mov	r0, r3
 800722a:	f7fa fd89 	bl	8001d40 <HAL_DMA_Abort>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d007      	beq.n	8007244 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007238:	f043 0208 	orr.w	r2, r3, #8
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8007244:	2364      	movs	r3, #100	; 0x64
 8007246:	2201      	movs	r2, #1
 8007248:	2102      	movs	r1, #2
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fab5 	bl	80077ba <I2S_WaitFlagStateUntilTimeout>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00b      	beq.n	800726e <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800725a:	f043 0201 	orr.w	r2, r3, #1
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800726e:	2364      	movs	r3, #100	; 0x64
 8007270:	2200      	movs	r2, #0
 8007272:	2180      	movs	r1, #128	; 0x80
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 faa0 	bl	80077ba <I2S_WaitFlagStateUntilTimeout>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00b      	beq.n	8007298 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007284:	f043 0201 	orr.w	r2, r3, #1
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	69da      	ldr	r2, [r3, #28]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072a6:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80072a8:	2300      	movs	r3, #0
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 0202 	bic.w	r2, r2, #2
 80072c4:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b05      	cmp	r3, #5
 80072d0:	f040 8165 	bne.w	800759e <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00f      	beq.n	80072fc <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7fa fd2d 	bl	8001d40 <HAL_DMA_Abort>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d007      	beq.n	80072fc <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f0:	f043 0208 	orr.w	r2, r3, #8
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a8a      	ldr	r2, [pc, #552]	; (800752c <HAL_I2S_DMAStop+0x330>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d101      	bne.n	800730a <HAL_I2S_DMAStop+0x10e>
 8007306:	4b8a      	ldr	r3, [pc, #552]	; (8007530 <HAL_I2S_DMAStop+0x334>)
 8007308:	e001      	b.n	800730e <HAL_I2S_DMAStop+0x112>
 800730a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800730e:	69da      	ldr	r2, [r3, #28]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4985      	ldr	r1, [pc, #532]	; (800752c <HAL_I2S_DMAStop+0x330>)
 8007316:	428b      	cmp	r3, r1
 8007318:	d101      	bne.n	800731e <HAL_I2S_DMAStop+0x122>
 800731a:	4b85      	ldr	r3, [pc, #532]	; (8007530 <HAL_I2S_DMAStop+0x334>)
 800731c:	e001      	b.n	8007322 <HAL_I2S_DMAStop+0x126>
 800731e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007326:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8007328:	2300      	movs	r3, #0
 800732a:	613b      	str	r3, [r7, #16]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a7e      	ldr	r2, [pc, #504]	; (800752c <HAL_I2S_DMAStop+0x330>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d101      	bne.n	800733a <HAL_I2S_DMAStop+0x13e>
 8007336:	4b7e      	ldr	r3, [pc, #504]	; (8007530 <HAL_I2S_DMAStop+0x334>)
 8007338:	e001      	b.n	800733e <HAL_I2S_DMAStop+0x142>
 800733a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	613b      	str	r3, [r7, #16]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a79      	ldr	r2, [pc, #484]	; (800752c <HAL_I2S_DMAStop+0x330>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d101      	bne.n	8007350 <HAL_I2S_DMAStop+0x154>
 800734c:	4b78      	ldr	r3, [pc, #480]	; (8007530 <HAL_I2S_DMAStop+0x334>)
 800734e:	e001      	b.n	8007354 <HAL_I2S_DMAStop+0x158>
 8007350:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	613b      	str	r3, [r7, #16]
 8007358:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a73      	ldr	r2, [pc, #460]	; (800752c <HAL_I2S_DMAStop+0x330>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d101      	bne.n	8007368 <HAL_I2S_DMAStop+0x16c>
 8007364:	4b72      	ldr	r3, [pc, #456]	; (8007530 <HAL_I2S_DMAStop+0x334>)
 8007366:	e001      	b.n	800736c <HAL_I2S_DMAStop+0x170>
 8007368:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	496e      	ldr	r1, [pc, #440]	; (800752c <HAL_I2S_DMAStop+0x330>)
 8007374:	428b      	cmp	r3, r1
 8007376:	d101      	bne.n	800737c <HAL_I2S_DMAStop+0x180>
 8007378:	4b6d      	ldr	r3, [pc, #436]	; (8007530 <HAL_I2S_DMAStop+0x334>)
 800737a:	e001      	b.n	8007380 <HAL_I2S_DMAStop+0x184>
 800737c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007380:	f022 0201 	bic.w	r2, r2, #1
 8007384:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10c      	bne.n	80073a8 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007392:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80073a6:	e0fa      	b.n	800759e <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a5f      	ldr	r2, [pc, #380]	; (800752c <HAL_I2S_DMAStop+0x330>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d101      	bne.n	80073b6 <HAL_I2S_DMAStop+0x1ba>
 80073b2:	4b5f      	ldr	r3, [pc, #380]	; (8007530 <HAL_I2S_DMAStop+0x334>)
 80073b4:	e001      	b.n	80073ba <HAL_I2S_DMAStop+0x1be>
 80073b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073ba:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80073bc:	e0ef      	b.n	800759e <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073c6:	d005      	beq.n	80073d4 <HAL_I2S_DMAStop+0x1d8>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073d0:	f040 80e5 	bne.w	800759e <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00f      	beq.n	80073fc <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7fa fcad 	bl	8001d40 <HAL_DMA_Abort>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d007      	beq.n	80073fc <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f0:	f043 0208 	orr.w	r2, r3, #8
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b05      	cmp	r3, #5
 8007406:	f040 809a 	bne.w	800753e <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00f      	beq.n	8007432 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007416:	4618      	mov	r0, r3
 8007418:	f7fa fc92 	bl	8001d40 <HAL_DMA_Abort>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d007      	beq.n	8007432 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007426:	f043 0208 	orr.w	r2, r3, #8
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8007432:	f7fa fa95 	bl	8001960 <HAL_GetTick>
 8007436:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8007438:	e012      	b.n	8007460 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800743a:	f7fa fa91 	bl	8001960 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	2b64      	cmp	r3, #100	; 0x64
 8007446:	d90b      	bls.n	8007460 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800744c:	f043 0201 	orr.w	r2, r3, #1
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a31      	ldr	r2, [pc, #196]	; (800752c <HAL_I2S_DMAStop+0x330>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d101      	bne.n	800746e <HAL_I2S_DMAStop+0x272>
 800746a:	4b31      	ldr	r3, [pc, #196]	; (8007530 <HAL_I2S_DMAStop+0x334>)
 800746c:	e001      	b.n	8007472 <HAL_I2S_DMAStop+0x276>
 800746e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b02      	cmp	r3, #2
 800747a:	d1de      	bne.n	800743a <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 800747c:	e012      	b.n	80074a4 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800747e:	f7fa fa6f 	bl	8001960 <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	2b64      	cmp	r3, #100	; 0x64
 800748a:	d90b      	bls.n	80074a4 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007490:	f043 0201 	orr.w	r2, r3, #1
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a20      	ldr	r2, [pc, #128]	; (800752c <HAL_I2S_DMAStop+0x330>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d101      	bne.n	80074b2 <HAL_I2S_DMAStop+0x2b6>
 80074ae:	4b20      	ldr	r3, [pc, #128]	; (8007530 <HAL_I2S_DMAStop+0x334>)
 80074b0:	e001      	b.n	80074b6 <HAL_I2S_DMAStop+0x2ba>
 80074b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074bc:	2b80      	cmp	r3, #128	; 0x80
 80074be:	d0de      	beq.n	800747e <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a19      	ldr	r2, [pc, #100]	; (800752c <HAL_I2S_DMAStop+0x330>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d101      	bne.n	80074ce <HAL_I2S_DMAStop+0x2d2>
 80074ca:	4b19      	ldr	r3, [pc, #100]	; (8007530 <HAL_I2S_DMAStop+0x334>)
 80074cc:	e001      	b.n	80074d2 <HAL_I2S_DMAStop+0x2d6>
 80074ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074d2:	69da      	ldr	r2, [r3, #28]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4914      	ldr	r1, [pc, #80]	; (800752c <HAL_I2S_DMAStop+0x330>)
 80074da:	428b      	cmp	r3, r1
 80074dc:	d101      	bne.n	80074e2 <HAL_I2S_DMAStop+0x2e6>
 80074de:	4b14      	ldr	r3, [pc, #80]	; (8007530 <HAL_I2S_DMAStop+0x334>)
 80074e0:	e001      	b.n	80074e6 <HAL_I2S_DMAStop+0x2ea>
 80074e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074ea:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80074ec:	2300      	movs	r3, #0
 80074ee:	60fb      	str	r3, [r7, #12]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a0d      	ldr	r2, [pc, #52]	; (800752c <HAL_I2S_DMAStop+0x330>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d101      	bne.n	80074fe <HAL_I2S_DMAStop+0x302>
 80074fa:	4b0d      	ldr	r3, [pc, #52]	; (8007530 <HAL_I2S_DMAStop+0x334>)
 80074fc:	e001      	b.n	8007502 <HAL_I2S_DMAStop+0x306>
 80074fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	60fb      	str	r3, [r7, #12]
 8007506:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a07      	ldr	r2, [pc, #28]	; (800752c <HAL_I2S_DMAStop+0x330>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d101      	bne.n	8007516 <HAL_I2S_DMAStop+0x31a>
 8007512:	4b07      	ldr	r3, [pc, #28]	; (8007530 <HAL_I2S_DMAStop+0x334>)
 8007514:	e001      	b.n	800751a <HAL_I2S_DMAStop+0x31e>
 8007516:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4902      	ldr	r1, [pc, #8]	; (800752c <HAL_I2S_DMAStop+0x330>)
 8007522:	428b      	cmp	r3, r1
 8007524:	d106      	bne.n	8007534 <HAL_I2S_DMAStop+0x338>
 8007526:	4b02      	ldr	r3, [pc, #8]	; (8007530 <HAL_I2S_DMAStop+0x334>)
 8007528:	e006      	b.n	8007538 <HAL_I2S_DMAStop+0x33c>
 800752a:	bf00      	nop
 800752c:	40003800 	.word	0x40003800
 8007530:	40003400 	.word	0x40003400
 8007534:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007538:	f022 0202 	bic.w	r2, r2, #2
 800753c:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	69da      	ldr	r2, [r3, #28]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800754c:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800754e:	2300      	movs	r3, #0
 8007550:	60bb      	str	r3, [r7, #8]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	60bb      	str	r3, [r7, #8]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	60bb      	str	r3, [r7, #8]
 8007562:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 0201 	bic.w	r2, r2, #1
 8007572:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800757c:	d10c      	bne.n	8007598 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007582:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	77fb      	strb	r3, [r7, #31]
 8007596:	e002      	b.n	800759e <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 80075a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3720      	adds	r7, #32
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	881a      	ldrh	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	1c9a      	adds	r2, r3, #2
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800760e:	b29b      	uxth	r3, r3
 8007610:	3b01      	subs	r3, #1
 8007612:	b29a      	uxth	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800761c:	b29b      	uxth	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10e      	bne.n	8007640 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007630:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff ffb8 	bl	80075b0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007640:	bf00      	nop
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765a:	b292      	uxth	r2, r2
 800765c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007662:	1c9a      	adds	r2, r3, #2
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800766c:	b29b      	uxth	r3, r3
 800766e:	3b01      	subs	r3, #1
 8007670:	b29a      	uxth	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800767a:	b29b      	uxth	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10e      	bne.n	800769e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800768e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f7ff ff93 	bl	80075c4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800769e:	bf00      	nop
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b086      	sub	sp, #24
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b04      	cmp	r3, #4
 80076c0:	d13a      	bne.n	8007738 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d109      	bne.n	80076e0 <I2S_IRQHandler+0x3a>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d6:	2b40      	cmp	r3, #64	; 0x40
 80076d8:	d102      	bne.n	80076e0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7ff ffb4 	bl	8007648 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e6:	2b40      	cmp	r3, #64	; 0x40
 80076e8:	d126      	bne.n	8007738 <I2S_IRQHandler+0x92>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	f003 0320 	and.w	r3, r3, #32
 80076f4:	2b20      	cmp	r3, #32
 80076f6:	d11f      	bne.n	8007738 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007706:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007708:	2300      	movs	r3, #0
 800770a:	613b      	str	r3, [r7, #16]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	613b      	str	r3, [r7, #16]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	613b      	str	r3, [r7, #16]
 800771c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800772a:	f043 0202 	orr.w	r2, r3, #2
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7ff ff50 	bl	80075d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b03      	cmp	r3, #3
 8007742:	d136      	bne.n	80077b2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	f003 0302 	and.w	r3, r3, #2
 800774a:	2b02      	cmp	r3, #2
 800774c:	d109      	bne.n	8007762 <I2S_IRQHandler+0xbc>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007758:	2b80      	cmp	r3, #128	; 0x80
 800775a:	d102      	bne.n	8007762 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f7ff ff45 	bl	80075ec <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f003 0308 	and.w	r3, r3, #8
 8007768:	2b08      	cmp	r3, #8
 800776a:	d122      	bne.n	80077b2 <I2S_IRQHandler+0x10c>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f003 0320 	and.w	r3, r3, #32
 8007776:	2b20      	cmp	r3, #32
 8007778:	d11b      	bne.n	80077b2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007788:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800778a:	2300      	movs	r3, #0
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	60fb      	str	r3, [r7, #12]
 8007796:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a4:	f043 0204 	orr.w	r2, r3, #4
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f7ff ff13 	bl	80075d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80077b2:	bf00      	nop
 80077b4:	3718      	adds	r7, #24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b086      	sub	sp, #24
 80077be:	af00      	add	r7, sp, #0
 80077c0:	60f8      	str	r0, [r7, #12]
 80077c2:	60b9      	str	r1, [r7, #8]
 80077c4:	603b      	str	r3, [r7, #0]
 80077c6:	4613      	mov	r3, r2
 80077c8:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80077ca:	f7fa f8c9 	bl	8001960 <HAL_GetTick>
 80077ce:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80077d0:	e018      	b.n	8007804 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d8:	d014      	beq.n	8007804 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80077da:	f7fa f8c1 	bl	8001960 <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d902      	bls.n	80077f0 <I2S_WaitFlagStateUntilTimeout+0x36>
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d109      	bne.n	8007804 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e00f      	b.n	8007824 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689a      	ldr	r2, [r3, #8]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	4013      	ands	r3, r2
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	429a      	cmp	r2, r3
 8007812:	bf0c      	ite	eq
 8007814:	2301      	moveq	r3, #1
 8007816:	2300      	movne	r3, #0
 8007818:	b2db      	uxtb	r3, r3
 800781a:	461a      	mov	r2, r3
 800781c:	79fb      	ldrb	r3, [r7, #7]
 800781e:	429a      	cmp	r2, r3
 8007820:	d1d7      	bne.n	80077d2 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3718      	adds	r7, #24
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b088      	sub	sp, #32
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4aa2      	ldr	r2, [pc, #648]	; (8007acc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d101      	bne.n	800784a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007846:	4ba2      	ldr	r3, [pc, #648]	; (8007ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007848:	e001      	b.n	800784e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800784a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a9b      	ldr	r2, [pc, #620]	; (8007acc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d101      	bne.n	8007868 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007864:	4b9a      	ldr	r3, [pc, #616]	; (8007ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007866:	e001      	b.n	800786c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007868:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007878:	d004      	beq.n	8007884 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	f040 8099 	bne.w	80079b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b02      	cmp	r3, #2
 800788c:	d107      	bne.n	800789e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007894:	2b00      	cmp	r3, #0
 8007896:	d002      	beq.n	800789e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f925 	bl	8007ae8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d107      	bne.n	80078b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f9c8 	bl	8007c48 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078be:	2b40      	cmp	r3, #64	; 0x40
 80078c0:	d13a      	bne.n	8007938 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f003 0320 	and.w	r3, r3, #32
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d035      	beq.n	8007938 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a7e      	ldr	r2, [pc, #504]	; (8007acc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d101      	bne.n	80078da <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80078d6:	4b7e      	ldr	r3, [pc, #504]	; (8007ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80078d8:	e001      	b.n	80078de <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80078da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4979      	ldr	r1, [pc, #484]	; (8007acc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80078e6:	428b      	cmp	r3, r1
 80078e8:	d101      	bne.n	80078ee <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80078ea:	4b79      	ldr	r3, [pc, #484]	; (8007ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80078ec:	e001      	b.n	80078f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80078ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80078f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80078f6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007906:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007908:	2300      	movs	r3, #0
 800790a:	60fb      	str	r3, [r7, #12]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800792a:	f043 0202 	orr.w	r2, r3, #2
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7ff fe50 	bl	80075d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	f003 0308 	and.w	r3, r3, #8
 800793e:	2b08      	cmp	r3, #8
 8007940:	f040 80be 	bne.w	8007ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	f003 0320 	and.w	r3, r3, #32
 800794a:	2b00      	cmp	r3, #0
 800794c:	f000 80b8 	beq.w	8007ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800795e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a59      	ldr	r2, [pc, #356]	; (8007acc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d101      	bne.n	800796e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800796a:	4b59      	ldr	r3, [pc, #356]	; (8007ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800796c:	e001      	b.n	8007972 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800796e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007972:	685a      	ldr	r2, [r3, #4]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4954      	ldr	r1, [pc, #336]	; (8007acc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800797a:	428b      	cmp	r3, r1
 800797c:	d101      	bne.n	8007982 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800797e:	4b54      	ldr	r3, [pc, #336]	; (8007ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007980:	e001      	b.n	8007986 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007982:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007986:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800798a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800798c:	2300      	movs	r3, #0
 800798e:	60bb      	str	r3, [r7, #8]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	60bb      	str	r3, [r7, #8]
 8007998:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a6:	f043 0204 	orr.w	r2, r3, #4
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7ff fe12 	bl	80075d8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80079b4:	e084      	b.n	8007ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	f003 0302 	and.w	r3, r3, #2
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d107      	bne.n	80079d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f8be 	bl	8007b4c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	f003 0301 	and.w	r3, r3, #1
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d107      	bne.n	80079ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d002      	beq.n	80079ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f8fd 	bl	8007be4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f0:	2b40      	cmp	r3, #64	; 0x40
 80079f2:	d12f      	bne.n	8007a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f003 0320 	and.w	r3, r3, #32
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d02a      	beq.n	8007a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007a0c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a2e      	ldr	r2, [pc, #184]	; (8007acc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d101      	bne.n	8007a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007a18:	4b2d      	ldr	r3, [pc, #180]	; (8007ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007a1a:	e001      	b.n	8007a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007a1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4929      	ldr	r1, [pc, #164]	; (8007acc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007a28:	428b      	cmp	r3, r1
 8007a2a:	d101      	bne.n	8007a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007a2c:	4b28      	ldr	r3, [pc, #160]	; (8007ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007a2e:	e001      	b.n	8007a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007a30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007a38:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a46:	f043 0202 	orr.w	r2, r3, #2
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7ff fdc2 	bl	80075d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	f003 0308 	and.w	r3, r3, #8
 8007a5a:	2b08      	cmp	r3, #8
 8007a5c:	d131      	bne.n	8007ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f003 0320 	and.w	r3, r3, #32
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d02c      	beq.n	8007ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a17      	ldr	r2, [pc, #92]	; (8007acc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d101      	bne.n	8007a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007a72:	4b17      	ldr	r3, [pc, #92]	; (8007ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007a74:	e001      	b.n	8007a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007a76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4912      	ldr	r1, [pc, #72]	; (8007acc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007a82:	428b      	cmp	r3, r1
 8007a84:	d101      	bne.n	8007a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8007a86:	4b12      	ldr	r3, [pc, #72]	; (8007ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007a88:	e001      	b.n	8007a8e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8007a8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007a92:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	685a      	ldr	r2, [r3, #4]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007aa2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab0:	f043 0204 	orr.w	r2, r3, #4
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7ff fd8d 	bl	80075d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007abe:	e000      	b.n	8007ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007ac0:	bf00      	nop
}
 8007ac2:	bf00      	nop
 8007ac4:	3720      	adds	r7, #32
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	40003800 	.word	0x40003800
 8007ad0:	40003400 	.word	0x40003400

08007ad4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af4:	1c99      	adds	r1, r3, #2
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	6251      	str	r1, [r2, #36]	; 0x24
 8007afa:	881a      	ldrh	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d113      	bne.n	8007b42 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007b28:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d106      	bne.n	8007b42 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7ff ffc9 	bl	8007ad4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007b42:	bf00      	nop
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
	...

08007b4c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b58:	1c99      	adds	r1, r3, #2
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	6251      	str	r1, [r2, #36]	; 0x24
 8007b5e:	8819      	ldrh	r1, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a1d      	ldr	r2, [pc, #116]	; (8007bdc <I2SEx_TxISR_I2SExt+0x90>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d101      	bne.n	8007b6e <I2SEx_TxISR_I2SExt+0x22>
 8007b6a:	4b1d      	ldr	r3, [pc, #116]	; (8007be0 <I2SEx_TxISR_I2SExt+0x94>)
 8007b6c:	e001      	b.n	8007b72 <I2SEx_TxISR_I2SExt+0x26>
 8007b6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b72:	460a      	mov	r2, r1
 8007b74:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d121      	bne.n	8007bd2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a12      	ldr	r2, [pc, #72]	; (8007bdc <I2SEx_TxISR_I2SExt+0x90>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d101      	bne.n	8007b9c <I2SEx_TxISR_I2SExt+0x50>
 8007b98:	4b11      	ldr	r3, [pc, #68]	; (8007be0 <I2SEx_TxISR_I2SExt+0x94>)
 8007b9a:	e001      	b.n	8007ba0 <I2SEx_TxISR_I2SExt+0x54>
 8007b9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007ba0:	685a      	ldr	r2, [r3, #4]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	490d      	ldr	r1, [pc, #52]	; (8007bdc <I2SEx_TxISR_I2SExt+0x90>)
 8007ba8:	428b      	cmp	r3, r1
 8007baa:	d101      	bne.n	8007bb0 <I2SEx_TxISR_I2SExt+0x64>
 8007bac:	4b0c      	ldr	r3, [pc, #48]	; (8007be0 <I2SEx_TxISR_I2SExt+0x94>)
 8007bae:	e001      	b.n	8007bb4 <I2SEx_TxISR_I2SExt+0x68>
 8007bb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007bb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007bb8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d106      	bne.n	8007bd2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7ff ff81 	bl	8007ad4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	40003800 	.word	0x40003800
 8007be0:	40003400 	.word	0x40003400

08007be4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68d8      	ldr	r0, [r3, #12]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf6:	1c99      	adds	r1, r3, #2
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007bfc:	b282      	uxth	r2, r0
 8007bfe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	3b01      	subs	r3, #1
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d113      	bne.n	8007c40 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007c26:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d106      	bne.n	8007c40 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7ff ff4a 	bl	8007ad4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a20      	ldr	r2, [pc, #128]	; (8007cd8 <I2SEx_RxISR_I2SExt+0x90>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d101      	bne.n	8007c5e <I2SEx_RxISR_I2SExt+0x16>
 8007c5a:	4b20      	ldr	r3, [pc, #128]	; (8007cdc <I2SEx_RxISR_I2SExt+0x94>)
 8007c5c:	e001      	b.n	8007c62 <I2SEx_RxISR_I2SExt+0x1a>
 8007c5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c62:	68d8      	ldr	r0, [r3, #12]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c68:	1c99      	adds	r1, r3, #2
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007c6e:	b282      	uxth	r2, r0
 8007c70:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d121      	bne.n	8007cce <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a12      	ldr	r2, [pc, #72]	; (8007cd8 <I2SEx_RxISR_I2SExt+0x90>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d101      	bne.n	8007c98 <I2SEx_RxISR_I2SExt+0x50>
 8007c94:	4b11      	ldr	r3, [pc, #68]	; (8007cdc <I2SEx_RxISR_I2SExt+0x94>)
 8007c96:	e001      	b.n	8007c9c <I2SEx_RxISR_I2SExt+0x54>
 8007c98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c9c:	685a      	ldr	r2, [r3, #4]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	490d      	ldr	r1, [pc, #52]	; (8007cd8 <I2SEx_RxISR_I2SExt+0x90>)
 8007ca4:	428b      	cmp	r3, r1
 8007ca6:	d101      	bne.n	8007cac <I2SEx_RxISR_I2SExt+0x64>
 8007ca8:	4b0c      	ldr	r3, [pc, #48]	; (8007cdc <I2SEx_RxISR_I2SExt+0x94>)
 8007caa:	e001      	b.n	8007cb0 <I2SEx_RxISR_I2SExt+0x68>
 8007cac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007cb0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007cb4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d106      	bne.n	8007cce <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7ff ff03 	bl	8007ad4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007cce:	bf00      	nop
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	40003800 	.word	0x40003800
 8007cdc:	40003400 	.word	0x40003400

08007ce0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d101      	bne.n	8007cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e264      	b.n	80081bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d075      	beq.n	8007dea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cfe:	4ba3      	ldr	r3, [pc, #652]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f003 030c 	and.w	r3, r3, #12
 8007d06:	2b04      	cmp	r3, #4
 8007d08:	d00c      	beq.n	8007d24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d0a:	4ba0      	ldr	r3, [pc, #640]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d12:	2b08      	cmp	r3, #8
 8007d14:	d112      	bne.n	8007d3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d16:	4b9d      	ldr	r3, [pc, #628]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d22:	d10b      	bne.n	8007d3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d24:	4b99      	ldr	r3, [pc, #612]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d05b      	beq.n	8007de8 <HAL_RCC_OscConfig+0x108>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d157      	bne.n	8007de8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e23f      	b.n	80081bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d44:	d106      	bne.n	8007d54 <HAL_RCC_OscConfig+0x74>
 8007d46:	4b91      	ldr	r3, [pc, #580]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a90      	ldr	r2, [pc, #576]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d50:	6013      	str	r3, [r2, #0]
 8007d52:	e01d      	b.n	8007d90 <HAL_RCC_OscConfig+0xb0>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d5c:	d10c      	bne.n	8007d78 <HAL_RCC_OscConfig+0x98>
 8007d5e:	4b8b      	ldr	r3, [pc, #556]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a8a      	ldr	r2, [pc, #552]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d68:	6013      	str	r3, [r2, #0]
 8007d6a:	4b88      	ldr	r3, [pc, #544]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a87      	ldr	r2, [pc, #540]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d74:	6013      	str	r3, [r2, #0]
 8007d76:	e00b      	b.n	8007d90 <HAL_RCC_OscConfig+0xb0>
 8007d78:	4b84      	ldr	r3, [pc, #528]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a83      	ldr	r2, [pc, #524]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d82:	6013      	str	r3, [r2, #0]
 8007d84:	4b81      	ldr	r3, [pc, #516]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a80      	ldr	r2, [pc, #512]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d013      	beq.n	8007dc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d98:	f7f9 fde2 	bl	8001960 <HAL_GetTick>
 8007d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d9e:	e008      	b.n	8007db2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007da0:	f7f9 fdde 	bl	8001960 <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	2b64      	cmp	r3, #100	; 0x64
 8007dac:	d901      	bls.n	8007db2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e204      	b.n	80081bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007db2:	4b76      	ldr	r3, [pc, #472]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0f0      	beq.n	8007da0 <HAL_RCC_OscConfig+0xc0>
 8007dbe:	e014      	b.n	8007dea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dc0:	f7f9 fdce 	bl	8001960 <HAL_GetTick>
 8007dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007dc6:	e008      	b.n	8007dda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007dc8:	f7f9 fdca 	bl	8001960 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	2b64      	cmp	r3, #100	; 0x64
 8007dd4:	d901      	bls.n	8007dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e1f0      	b.n	80081bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007dda:	4b6c      	ldr	r3, [pc, #432]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1f0      	bne.n	8007dc8 <HAL_RCC_OscConfig+0xe8>
 8007de6:	e000      	b.n	8007dea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d063      	beq.n	8007ebe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007df6:	4b65      	ldr	r3, [pc, #404]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	f003 030c 	and.w	r3, r3, #12
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00b      	beq.n	8007e1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e02:	4b62      	ldr	r3, [pc, #392]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e0a:	2b08      	cmp	r3, #8
 8007e0c:	d11c      	bne.n	8007e48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e0e:	4b5f      	ldr	r3, [pc, #380]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d116      	bne.n	8007e48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e1a:	4b5c      	ldr	r3, [pc, #368]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d005      	beq.n	8007e32 <HAL_RCC_OscConfig+0x152>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d001      	beq.n	8007e32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e1c4      	b.n	80081bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e32:	4b56      	ldr	r3, [pc, #344]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	00db      	lsls	r3, r3, #3
 8007e40:	4952      	ldr	r1, [pc, #328]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e46:	e03a      	b.n	8007ebe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d020      	beq.n	8007e92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e50:	4b4f      	ldr	r3, [pc, #316]	; (8007f90 <HAL_RCC_OscConfig+0x2b0>)
 8007e52:	2201      	movs	r2, #1
 8007e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e56:	f7f9 fd83 	bl	8001960 <HAL_GetTick>
 8007e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e5c:	e008      	b.n	8007e70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e5e:	f7f9 fd7f 	bl	8001960 <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d901      	bls.n	8007e70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e1a5      	b.n	80081bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e70:	4b46      	ldr	r3, [pc, #280]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d0f0      	beq.n	8007e5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e7c:	4b43      	ldr	r3, [pc, #268]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	00db      	lsls	r3, r3, #3
 8007e8a:	4940      	ldr	r1, [pc, #256]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	600b      	str	r3, [r1, #0]
 8007e90:	e015      	b.n	8007ebe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e92:	4b3f      	ldr	r3, [pc, #252]	; (8007f90 <HAL_RCC_OscConfig+0x2b0>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e98:	f7f9 fd62 	bl	8001960 <HAL_GetTick>
 8007e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e9e:	e008      	b.n	8007eb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ea0:	f7f9 fd5e 	bl	8001960 <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d901      	bls.n	8007eb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e184      	b.n	80081bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007eb2:	4b36      	ldr	r3, [pc, #216]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0302 	and.w	r3, r3, #2
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1f0      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0308 	and.w	r3, r3, #8
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d030      	beq.n	8007f2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d016      	beq.n	8007f00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ed2:	4b30      	ldr	r3, [pc, #192]	; (8007f94 <HAL_RCC_OscConfig+0x2b4>)
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ed8:	f7f9 fd42 	bl	8001960 <HAL_GetTick>
 8007edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ede:	e008      	b.n	8007ef2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ee0:	f7f9 fd3e 	bl	8001960 <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d901      	bls.n	8007ef2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e164      	b.n	80081bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ef2:	4b26      	ldr	r3, [pc, #152]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ef6:	f003 0302 	and.w	r3, r3, #2
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d0f0      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x200>
 8007efe:	e015      	b.n	8007f2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f00:	4b24      	ldr	r3, [pc, #144]	; (8007f94 <HAL_RCC_OscConfig+0x2b4>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f06:	f7f9 fd2b 	bl	8001960 <HAL_GetTick>
 8007f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f0c:	e008      	b.n	8007f20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f0e:	f7f9 fd27 	bl	8001960 <HAL_GetTick>
 8007f12:	4602      	mov	r2, r0
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	1ad3      	subs	r3, r2, r3
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d901      	bls.n	8007f20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	e14d      	b.n	80081bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f20:	4b1a      	ldr	r3, [pc, #104]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f24:	f003 0302 	and.w	r3, r3, #2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1f0      	bne.n	8007f0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 0304 	and.w	r3, r3, #4
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 80a0 	beq.w	800807a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f3e:	4b13      	ldr	r3, [pc, #76]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10f      	bne.n	8007f6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	60bb      	str	r3, [r7, #8]
 8007f4e:	4b0f      	ldr	r3, [pc, #60]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f52:	4a0e      	ldr	r2, [pc, #56]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f58:	6413      	str	r3, [r2, #64]	; 0x40
 8007f5a:	4b0c      	ldr	r3, [pc, #48]	; (8007f8c <HAL_RCC_OscConfig+0x2ac>)
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f62:	60bb      	str	r3, [r7, #8]
 8007f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f66:	2301      	movs	r3, #1
 8007f68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f6a:	4b0b      	ldr	r3, [pc, #44]	; (8007f98 <HAL_RCC_OscConfig+0x2b8>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d121      	bne.n	8007fba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f76:	4b08      	ldr	r3, [pc, #32]	; (8007f98 <HAL_RCC_OscConfig+0x2b8>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a07      	ldr	r2, [pc, #28]	; (8007f98 <HAL_RCC_OscConfig+0x2b8>)
 8007f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f82:	f7f9 fced 	bl	8001960 <HAL_GetTick>
 8007f86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f88:	e011      	b.n	8007fae <HAL_RCC_OscConfig+0x2ce>
 8007f8a:	bf00      	nop
 8007f8c:	40023800 	.word	0x40023800
 8007f90:	42470000 	.word	0x42470000
 8007f94:	42470e80 	.word	0x42470e80
 8007f98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f9c:	f7f9 fce0 	bl	8001960 <HAL_GetTick>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d901      	bls.n	8007fae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007faa:	2303      	movs	r3, #3
 8007fac:	e106      	b.n	80081bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fae:	4b85      	ldr	r3, [pc, #532]	; (80081c4 <HAL_RCC_OscConfig+0x4e4>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d0f0      	beq.n	8007f9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d106      	bne.n	8007fd0 <HAL_RCC_OscConfig+0x2f0>
 8007fc2:	4b81      	ldr	r3, [pc, #516]	; (80081c8 <HAL_RCC_OscConfig+0x4e8>)
 8007fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc6:	4a80      	ldr	r2, [pc, #512]	; (80081c8 <HAL_RCC_OscConfig+0x4e8>)
 8007fc8:	f043 0301 	orr.w	r3, r3, #1
 8007fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8007fce:	e01c      	b.n	800800a <HAL_RCC_OscConfig+0x32a>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	2b05      	cmp	r3, #5
 8007fd6:	d10c      	bne.n	8007ff2 <HAL_RCC_OscConfig+0x312>
 8007fd8:	4b7b      	ldr	r3, [pc, #492]	; (80081c8 <HAL_RCC_OscConfig+0x4e8>)
 8007fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fdc:	4a7a      	ldr	r2, [pc, #488]	; (80081c8 <HAL_RCC_OscConfig+0x4e8>)
 8007fde:	f043 0304 	orr.w	r3, r3, #4
 8007fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8007fe4:	4b78      	ldr	r3, [pc, #480]	; (80081c8 <HAL_RCC_OscConfig+0x4e8>)
 8007fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe8:	4a77      	ldr	r2, [pc, #476]	; (80081c8 <HAL_RCC_OscConfig+0x4e8>)
 8007fea:	f043 0301 	orr.w	r3, r3, #1
 8007fee:	6713      	str	r3, [r2, #112]	; 0x70
 8007ff0:	e00b      	b.n	800800a <HAL_RCC_OscConfig+0x32a>
 8007ff2:	4b75      	ldr	r3, [pc, #468]	; (80081c8 <HAL_RCC_OscConfig+0x4e8>)
 8007ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff6:	4a74      	ldr	r2, [pc, #464]	; (80081c8 <HAL_RCC_OscConfig+0x4e8>)
 8007ff8:	f023 0301 	bic.w	r3, r3, #1
 8007ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8007ffe:	4b72      	ldr	r3, [pc, #456]	; (80081c8 <HAL_RCC_OscConfig+0x4e8>)
 8008000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008002:	4a71      	ldr	r2, [pc, #452]	; (80081c8 <HAL_RCC_OscConfig+0x4e8>)
 8008004:	f023 0304 	bic.w	r3, r3, #4
 8008008:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d015      	beq.n	800803e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008012:	f7f9 fca5 	bl	8001960 <HAL_GetTick>
 8008016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008018:	e00a      	b.n	8008030 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800801a:	f7f9 fca1 	bl	8001960 <HAL_GetTick>
 800801e:	4602      	mov	r2, r0
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	f241 3288 	movw	r2, #5000	; 0x1388
 8008028:	4293      	cmp	r3, r2
 800802a:	d901      	bls.n	8008030 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e0c5      	b.n	80081bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008030:	4b65      	ldr	r3, [pc, #404]	; (80081c8 <HAL_RCC_OscConfig+0x4e8>)
 8008032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008034:	f003 0302 	and.w	r3, r3, #2
 8008038:	2b00      	cmp	r3, #0
 800803a:	d0ee      	beq.n	800801a <HAL_RCC_OscConfig+0x33a>
 800803c:	e014      	b.n	8008068 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800803e:	f7f9 fc8f 	bl	8001960 <HAL_GetTick>
 8008042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008044:	e00a      	b.n	800805c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008046:	f7f9 fc8b 	bl	8001960 <HAL_GetTick>
 800804a:	4602      	mov	r2, r0
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	1ad3      	subs	r3, r2, r3
 8008050:	f241 3288 	movw	r2, #5000	; 0x1388
 8008054:	4293      	cmp	r3, r2
 8008056:	d901      	bls.n	800805c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008058:	2303      	movs	r3, #3
 800805a:	e0af      	b.n	80081bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800805c:	4b5a      	ldr	r3, [pc, #360]	; (80081c8 <HAL_RCC_OscConfig+0x4e8>)
 800805e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008060:	f003 0302 	and.w	r3, r3, #2
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1ee      	bne.n	8008046 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008068:	7dfb      	ldrb	r3, [r7, #23]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d105      	bne.n	800807a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800806e:	4b56      	ldr	r3, [pc, #344]	; (80081c8 <HAL_RCC_OscConfig+0x4e8>)
 8008070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008072:	4a55      	ldr	r2, [pc, #340]	; (80081c8 <HAL_RCC_OscConfig+0x4e8>)
 8008074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008078:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 809b 	beq.w	80081ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008084:	4b50      	ldr	r3, [pc, #320]	; (80081c8 <HAL_RCC_OscConfig+0x4e8>)
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f003 030c 	and.w	r3, r3, #12
 800808c:	2b08      	cmp	r3, #8
 800808e:	d05c      	beq.n	800814a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	2b02      	cmp	r3, #2
 8008096:	d141      	bne.n	800811c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008098:	4b4c      	ldr	r3, [pc, #304]	; (80081cc <HAL_RCC_OscConfig+0x4ec>)
 800809a:	2200      	movs	r2, #0
 800809c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800809e:	f7f9 fc5f 	bl	8001960 <HAL_GetTick>
 80080a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080a4:	e008      	b.n	80080b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080a6:	f7f9 fc5b 	bl	8001960 <HAL_GetTick>
 80080aa:	4602      	mov	r2, r0
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d901      	bls.n	80080b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e081      	b.n	80081bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080b8:	4b43      	ldr	r3, [pc, #268]	; (80081c8 <HAL_RCC_OscConfig+0x4e8>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1f0      	bne.n	80080a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	69da      	ldr	r2, [r3, #28]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	431a      	orrs	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d2:	019b      	lsls	r3, r3, #6
 80080d4:	431a      	orrs	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080da:	085b      	lsrs	r3, r3, #1
 80080dc:	3b01      	subs	r3, #1
 80080de:	041b      	lsls	r3, r3, #16
 80080e0:	431a      	orrs	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e6:	061b      	lsls	r3, r3, #24
 80080e8:	4937      	ldr	r1, [pc, #220]	; (80081c8 <HAL_RCC_OscConfig+0x4e8>)
 80080ea:	4313      	orrs	r3, r2
 80080ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080ee:	4b37      	ldr	r3, [pc, #220]	; (80081cc <HAL_RCC_OscConfig+0x4ec>)
 80080f0:	2201      	movs	r2, #1
 80080f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080f4:	f7f9 fc34 	bl	8001960 <HAL_GetTick>
 80080f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080fa:	e008      	b.n	800810e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080fc:	f7f9 fc30 	bl	8001960 <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b02      	cmp	r3, #2
 8008108:	d901      	bls.n	800810e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e056      	b.n	80081bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800810e:	4b2e      	ldr	r3, [pc, #184]	; (80081c8 <HAL_RCC_OscConfig+0x4e8>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008116:	2b00      	cmp	r3, #0
 8008118:	d0f0      	beq.n	80080fc <HAL_RCC_OscConfig+0x41c>
 800811a:	e04e      	b.n	80081ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800811c:	4b2b      	ldr	r3, [pc, #172]	; (80081cc <HAL_RCC_OscConfig+0x4ec>)
 800811e:	2200      	movs	r2, #0
 8008120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008122:	f7f9 fc1d 	bl	8001960 <HAL_GetTick>
 8008126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008128:	e008      	b.n	800813c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800812a:	f7f9 fc19 	bl	8001960 <HAL_GetTick>
 800812e:	4602      	mov	r2, r0
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	2b02      	cmp	r3, #2
 8008136:	d901      	bls.n	800813c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	e03f      	b.n	80081bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800813c:	4b22      	ldr	r3, [pc, #136]	; (80081c8 <HAL_RCC_OscConfig+0x4e8>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1f0      	bne.n	800812a <HAL_RCC_OscConfig+0x44a>
 8008148:	e037      	b.n	80081ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	699b      	ldr	r3, [r3, #24]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d101      	bne.n	8008156 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e032      	b.n	80081bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008156:	4b1c      	ldr	r3, [pc, #112]	; (80081c8 <HAL_RCC_OscConfig+0x4e8>)
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d028      	beq.n	80081b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800816e:	429a      	cmp	r2, r3
 8008170:	d121      	bne.n	80081b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800817c:	429a      	cmp	r2, r3
 800817e:	d11a      	bne.n	80081b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008186:	4013      	ands	r3, r2
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800818c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800818e:	4293      	cmp	r3, r2
 8008190:	d111      	bne.n	80081b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819c:	085b      	lsrs	r3, r3, #1
 800819e:	3b01      	subs	r3, #1
 80081a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d107      	bne.n	80081b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d001      	beq.n	80081ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e000      	b.n	80081bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3718      	adds	r7, #24
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	40007000 	.word	0x40007000
 80081c8:	40023800 	.word	0x40023800
 80081cc:	42470060 	.word	0x42470060

080081d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e0cc      	b.n	800837e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80081e4:	4b68      	ldr	r3, [pc, #416]	; (8008388 <HAL_RCC_ClockConfig+0x1b8>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0307 	and.w	r3, r3, #7
 80081ec:	683a      	ldr	r2, [r7, #0]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d90c      	bls.n	800820c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081f2:	4b65      	ldr	r3, [pc, #404]	; (8008388 <HAL_RCC_ClockConfig+0x1b8>)
 80081f4:	683a      	ldr	r2, [r7, #0]
 80081f6:	b2d2      	uxtb	r2, r2
 80081f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081fa:	4b63      	ldr	r3, [pc, #396]	; (8008388 <HAL_RCC_ClockConfig+0x1b8>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 0307 	and.w	r3, r3, #7
 8008202:	683a      	ldr	r2, [r7, #0]
 8008204:	429a      	cmp	r2, r3
 8008206:	d001      	beq.n	800820c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e0b8      	b.n	800837e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 0302 	and.w	r3, r3, #2
 8008214:	2b00      	cmp	r3, #0
 8008216:	d020      	beq.n	800825a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0304 	and.w	r3, r3, #4
 8008220:	2b00      	cmp	r3, #0
 8008222:	d005      	beq.n	8008230 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008224:	4b59      	ldr	r3, [pc, #356]	; (800838c <HAL_RCC_ClockConfig+0x1bc>)
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	4a58      	ldr	r2, [pc, #352]	; (800838c <HAL_RCC_ClockConfig+0x1bc>)
 800822a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800822e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0308 	and.w	r3, r3, #8
 8008238:	2b00      	cmp	r3, #0
 800823a:	d005      	beq.n	8008248 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800823c:	4b53      	ldr	r3, [pc, #332]	; (800838c <HAL_RCC_ClockConfig+0x1bc>)
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	4a52      	ldr	r2, [pc, #328]	; (800838c <HAL_RCC_ClockConfig+0x1bc>)
 8008242:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008246:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008248:	4b50      	ldr	r3, [pc, #320]	; (800838c <HAL_RCC_ClockConfig+0x1bc>)
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	494d      	ldr	r1, [pc, #308]	; (800838c <HAL_RCC_ClockConfig+0x1bc>)
 8008256:	4313      	orrs	r3, r2
 8008258:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 0301 	and.w	r3, r3, #1
 8008262:	2b00      	cmp	r3, #0
 8008264:	d044      	beq.n	80082f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d107      	bne.n	800827e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800826e:	4b47      	ldr	r3, [pc, #284]	; (800838c <HAL_RCC_ClockConfig+0x1bc>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008276:	2b00      	cmp	r3, #0
 8008278:	d119      	bne.n	80082ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e07f      	b.n	800837e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	2b02      	cmp	r3, #2
 8008284:	d003      	beq.n	800828e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800828a:	2b03      	cmp	r3, #3
 800828c:	d107      	bne.n	800829e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800828e:	4b3f      	ldr	r3, [pc, #252]	; (800838c <HAL_RCC_ClockConfig+0x1bc>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d109      	bne.n	80082ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e06f      	b.n	800837e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800829e:	4b3b      	ldr	r3, [pc, #236]	; (800838c <HAL_RCC_ClockConfig+0x1bc>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 0302 	and.w	r3, r3, #2
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e067      	b.n	800837e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082ae:	4b37      	ldr	r3, [pc, #220]	; (800838c <HAL_RCC_ClockConfig+0x1bc>)
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	f023 0203 	bic.w	r2, r3, #3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	4934      	ldr	r1, [pc, #208]	; (800838c <HAL_RCC_ClockConfig+0x1bc>)
 80082bc:	4313      	orrs	r3, r2
 80082be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80082c0:	f7f9 fb4e 	bl	8001960 <HAL_GetTick>
 80082c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082c6:	e00a      	b.n	80082de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082c8:	f7f9 fb4a 	bl	8001960 <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d901      	bls.n	80082de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80082da:	2303      	movs	r3, #3
 80082dc:	e04f      	b.n	800837e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082de:	4b2b      	ldr	r3, [pc, #172]	; (800838c <HAL_RCC_ClockConfig+0x1bc>)
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	f003 020c 	and.w	r2, r3, #12
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d1eb      	bne.n	80082c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082f0:	4b25      	ldr	r3, [pc, #148]	; (8008388 <HAL_RCC_ClockConfig+0x1b8>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0307 	and.w	r3, r3, #7
 80082f8:	683a      	ldr	r2, [r7, #0]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d20c      	bcs.n	8008318 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082fe:	4b22      	ldr	r3, [pc, #136]	; (8008388 <HAL_RCC_ClockConfig+0x1b8>)
 8008300:	683a      	ldr	r2, [r7, #0]
 8008302:	b2d2      	uxtb	r2, r2
 8008304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008306:	4b20      	ldr	r3, [pc, #128]	; (8008388 <HAL_RCC_ClockConfig+0x1b8>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0307 	and.w	r3, r3, #7
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	429a      	cmp	r2, r3
 8008312:	d001      	beq.n	8008318 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	e032      	b.n	800837e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	2b00      	cmp	r3, #0
 8008322:	d008      	beq.n	8008336 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008324:	4b19      	ldr	r3, [pc, #100]	; (800838c <HAL_RCC_ClockConfig+0x1bc>)
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	4916      	ldr	r1, [pc, #88]	; (800838c <HAL_RCC_ClockConfig+0x1bc>)
 8008332:	4313      	orrs	r3, r2
 8008334:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 0308 	and.w	r3, r3, #8
 800833e:	2b00      	cmp	r3, #0
 8008340:	d009      	beq.n	8008356 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008342:	4b12      	ldr	r3, [pc, #72]	; (800838c <HAL_RCC_ClockConfig+0x1bc>)
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	00db      	lsls	r3, r3, #3
 8008350:	490e      	ldr	r1, [pc, #56]	; (800838c <HAL_RCC_ClockConfig+0x1bc>)
 8008352:	4313      	orrs	r3, r2
 8008354:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008356:	f000 f821 	bl	800839c <HAL_RCC_GetSysClockFreq>
 800835a:	4602      	mov	r2, r0
 800835c:	4b0b      	ldr	r3, [pc, #44]	; (800838c <HAL_RCC_ClockConfig+0x1bc>)
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	091b      	lsrs	r3, r3, #4
 8008362:	f003 030f 	and.w	r3, r3, #15
 8008366:	490a      	ldr	r1, [pc, #40]	; (8008390 <HAL_RCC_ClockConfig+0x1c0>)
 8008368:	5ccb      	ldrb	r3, [r1, r3]
 800836a:	fa22 f303 	lsr.w	r3, r2, r3
 800836e:	4a09      	ldr	r2, [pc, #36]	; (8008394 <HAL_RCC_ClockConfig+0x1c4>)
 8008370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008372:	4b09      	ldr	r3, [pc, #36]	; (8008398 <HAL_RCC_ClockConfig+0x1c8>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4618      	mov	r0, r3
 8008378:	f7f9 faae 	bl	80018d8 <HAL_InitTick>

  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	40023c00 	.word	0x40023c00
 800838c:	40023800 	.word	0x40023800
 8008390:	08095220 	.word	0x08095220
 8008394:	20000018 	.word	0x20000018
 8008398:	2000001c 	.word	0x2000001c

0800839c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800839c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80083a0:	b084      	sub	sp, #16
 80083a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80083a4:	2300      	movs	r3, #0
 80083a6:	607b      	str	r3, [r7, #4]
 80083a8:	2300      	movs	r3, #0
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	2300      	movs	r3, #0
 80083ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80083b0:	2300      	movs	r3, #0
 80083b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083b4:	4b67      	ldr	r3, [pc, #412]	; (8008554 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	f003 030c 	and.w	r3, r3, #12
 80083bc:	2b08      	cmp	r3, #8
 80083be:	d00d      	beq.n	80083dc <HAL_RCC_GetSysClockFreq+0x40>
 80083c0:	2b08      	cmp	r3, #8
 80083c2:	f200 80bd 	bhi.w	8008540 <HAL_RCC_GetSysClockFreq+0x1a4>
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d002      	beq.n	80083d0 <HAL_RCC_GetSysClockFreq+0x34>
 80083ca:	2b04      	cmp	r3, #4
 80083cc:	d003      	beq.n	80083d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80083ce:	e0b7      	b.n	8008540 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80083d0:	4b61      	ldr	r3, [pc, #388]	; (8008558 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80083d2:	60bb      	str	r3, [r7, #8]
       break;
 80083d4:	e0b7      	b.n	8008546 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80083d6:	4b61      	ldr	r3, [pc, #388]	; (800855c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80083d8:	60bb      	str	r3, [r7, #8]
      break;
 80083da:	e0b4      	b.n	8008546 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80083dc:	4b5d      	ldr	r3, [pc, #372]	; (8008554 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80083e6:	4b5b      	ldr	r3, [pc, #364]	; (8008554 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d04d      	beq.n	800848e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083f2:	4b58      	ldr	r3, [pc, #352]	; (8008554 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	099b      	lsrs	r3, r3, #6
 80083f8:	461a      	mov	r2, r3
 80083fa:	f04f 0300 	mov.w	r3, #0
 80083fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008402:	f04f 0100 	mov.w	r1, #0
 8008406:	ea02 0800 	and.w	r8, r2, r0
 800840a:	ea03 0901 	and.w	r9, r3, r1
 800840e:	4640      	mov	r0, r8
 8008410:	4649      	mov	r1, r9
 8008412:	f04f 0200 	mov.w	r2, #0
 8008416:	f04f 0300 	mov.w	r3, #0
 800841a:	014b      	lsls	r3, r1, #5
 800841c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008420:	0142      	lsls	r2, r0, #5
 8008422:	4610      	mov	r0, r2
 8008424:	4619      	mov	r1, r3
 8008426:	ebb0 0008 	subs.w	r0, r0, r8
 800842a:	eb61 0109 	sbc.w	r1, r1, r9
 800842e:	f04f 0200 	mov.w	r2, #0
 8008432:	f04f 0300 	mov.w	r3, #0
 8008436:	018b      	lsls	r3, r1, #6
 8008438:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800843c:	0182      	lsls	r2, r0, #6
 800843e:	1a12      	subs	r2, r2, r0
 8008440:	eb63 0301 	sbc.w	r3, r3, r1
 8008444:	f04f 0000 	mov.w	r0, #0
 8008448:	f04f 0100 	mov.w	r1, #0
 800844c:	00d9      	lsls	r1, r3, #3
 800844e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008452:	00d0      	lsls	r0, r2, #3
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	eb12 0208 	adds.w	r2, r2, r8
 800845c:	eb43 0309 	adc.w	r3, r3, r9
 8008460:	f04f 0000 	mov.w	r0, #0
 8008464:	f04f 0100 	mov.w	r1, #0
 8008468:	0259      	lsls	r1, r3, #9
 800846a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800846e:	0250      	lsls	r0, r2, #9
 8008470:	4602      	mov	r2, r0
 8008472:	460b      	mov	r3, r1
 8008474:	4610      	mov	r0, r2
 8008476:	4619      	mov	r1, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	461a      	mov	r2, r3
 800847c:	f04f 0300 	mov.w	r3, #0
 8008480:	f7f7 fef6 	bl	8000270 <__aeabi_uldivmod>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	4613      	mov	r3, r2
 800848a:	60fb      	str	r3, [r7, #12]
 800848c:	e04a      	b.n	8008524 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800848e:	4b31      	ldr	r3, [pc, #196]	; (8008554 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	099b      	lsrs	r3, r3, #6
 8008494:	461a      	mov	r2, r3
 8008496:	f04f 0300 	mov.w	r3, #0
 800849a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800849e:	f04f 0100 	mov.w	r1, #0
 80084a2:	ea02 0400 	and.w	r4, r2, r0
 80084a6:	ea03 0501 	and.w	r5, r3, r1
 80084aa:	4620      	mov	r0, r4
 80084ac:	4629      	mov	r1, r5
 80084ae:	f04f 0200 	mov.w	r2, #0
 80084b2:	f04f 0300 	mov.w	r3, #0
 80084b6:	014b      	lsls	r3, r1, #5
 80084b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80084bc:	0142      	lsls	r2, r0, #5
 80084be:	4610      	mov	r0, r2
 80084c0:	4619      	mov	r1, r3
 80084c2:	1b00      	subs	r0, r0, r4
 80084c4:	eb61 0105 	sbc.w	r1, r1, r5
 80084c8:	f04f 0200 	mov.w	r2, #0
 80084cc:	f04f 0300 	mov.w	r3, #0
 80084d0:	018b      	lsls	r3, r1, #6
 80084d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80084d6:	0182      	lsls	r2, r0, #6
 80084d8:	1a12      	subs	r2, r2, r0
 80084da:	eb63 0301 	sbc.w	r3, r3, r1
 80084de:	f04f 0000 	mov.w	r0, #0
 80084e2:	f04f 0100 	mov.w	r1, #0
 80084e6:	00d9      	lsls	r1, r3, #3
 80084e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80084ec:	00d0      	lsls	r0, r2, #3
 80084ee:	4602      	mov	r2, r0
 80084f0:	460b      	mov	r3, r1
 80084f2:	1912      	adds	r2, r2, r4
 80084f4:	eb45 0303 	adc.w	r3, r5, r3
 80084f8:	f04f 0000 	mov.w	r0, #0
 80084fc:	f04f 0100 	mov.w	r1, #0
 8008500:	0299      	lsls	r1, r3, #10
 8008502:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008506:	0290      	lsls	r0, r2, #10
 8008508:	4602      	mov	r2, r0
 800850a:	460b      	mov	r3, r1
 800850c:	4610      	mov	r0, r2
 800850e:	4619      	mov	r1, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	461a      	mov	r2, r3
 8008514:	f04f 0300 	mov.w	r3, #0
 8008518:	f7f7 feaa 	bl	8000270 <__aeabi_uldivmod>
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	4613      	mov	r3, r2
 8008522:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008524:	4b0b      	ldr	r3, [pc, #44]	; (8008554 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	0c1b      	lsrs	r3, r3, #16
 800852a:	f003 0303 	and.w	r3, r3, #3
 800852e:	3301      	adds	r3, #1
 8008530:	005b      	lsls	r3, r3, #1
 8008532:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	fbb2 f3f3 	udiv	r3, r2, r3
 800853c:	60bb      	str	r3, [r7, #8]
      break;
 800853e:	e002      	b.n	8008546 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008540:	4b05      	ldr	r3, [pc, #20]	; (8008558 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008542:	60bb      	str	r3, [r7, #8]
      break;
 8008544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008546:	68bb      	ldr	r3, [r7, #8]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008552:	bf00      	nop
 8008554:	40023800 	.word	0x40023800
 8008558:	00f42400 	.word	0x00f42400
 800855c:	007a1200 	.word	0x007a1200

08008560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008560:	b480      	push	{r7}
 8008562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008564:	4b03      	ldr	r3, [pc, #12]	; (8008574 <HAL_RCC_GetHCLKFreq+0x14>)
 8008566:	681b      	ldr	r3, [r3, #0]
}
 8008568:	4618      	mov	r0, r3
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	20000018 	.word	0x20000018

08008578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800857c:	f7ff fff0 	bl	8008560 <HAL_RCC_GetHCLKFreq>
 8008580:	4602      	mov	r2, r0
 8008582:	4b05      	ldr	r3, [pc, #20]	; (8008598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	0a9b      	lsrs	r3, r3, #10
 8008588:	f003 0307 	and.w	r3, r3, #7
 800858c:	4903      	ldr	r1, [pc, #12]	; (800859c <HAL_RCC_GetPCLK1Freq+0x24>)
 800858e:	5ccb      	ldrb	r3, [r1, r3]
 8008590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008594:	4618      	mov	r0, r3
 8008596:	bd80      	pop	{r7, pc}
 8008598:	40023800 	.word	0x40023800
 800859c:	08095230 	.word	0x08095230

080085a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80085a4:	f7ff ffdc 	bl	8008560 <HAL_RCC_GetHCLKFreq>
 80085a8:	4602      	mov	r2, r0
 80085aa:	4b05      	ldr	r3, [pc, #20]	; (80085c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	0b5b      	lsrs	r3, r3, #13
 80085b0:	f003 0307 	and.w	r3, r3, #7
 80085b4:	4903      	ldr	r1, [pc, #12]	; (80085c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085b6:	5ccb      	ldrb	r3, [r1, r3]
 80085b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085bc:	4618      	mov	r0, r3
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	40023800 	.word	0x40023800
 80085c4:	08095230 	.word	0x08095230

080085c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80085d0:	2300      	movs	r3, #0
 80085d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80085d4:	2300      	movs	r3, #0
 80085d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d105      	bne.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d035      	beq.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80085f0:	4b62      	ldr	r3, [pc, #392]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80085f6:	f7f9 f9b3 	bl	8001960 <HAL_GetTick>
 80085fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80085fc:	e008      	b.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80085fe:	f7f9 f9af 	bl	8001960 <HAL_GetTick>
 8008602:	4602      	mov	r2, r0
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	2b02      	cmp	r3, #2
 800860a:	d901      	bls.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800860c:	2303      	movs	r3, #3
 800860e:	e0b0      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008610:	4b5b      	ldr	r3, [pc, #364]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1f0      	bne.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	019a      	lsls	r2, r3, #6
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	071b      	lsls	r3, r3, #28
 8008628:	4955      	ldr	r1, [pc, #340]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800862a:	4313      	orrs	r3, r2
 800862c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008630:	4b52      	ldr	r3, [pc, #328]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008632:	2201      	movs	r2, #1
 8008634:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008636:	f7f9 f993 	bl	8001960 <HAL_GetTick>
 800863a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800863c:	e008      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800863e:	f7f9 f98f 	bl	8001960 <HAL_GetTick>
 8008642:	4602      	mov	r2, r0
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	2b02      	cmp	r3, #2
 800864a:	d901      	bls.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800864c:	2303      	movs	r3, #3
 800864e:	e090      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008650:	4b4b      	ldr	r3, [pc, #300]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d0f0      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f003 0302 	and.w	r3, r3, #2
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 8083 	beq.w	8008770 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800866a:	2300      	movs	r3, #0
 800866c:	60fb      	str	r3, [r7, #12]
 800866e:	4b44      	ldr	r3, [pc, #272]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008672:	4a43      	ldr	r2, [pc, #268]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008678:	6413      	str	r3, [r2, #64]	; 0x40
 800867a:	4b41      	ldr	r3, [pc, #260]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800867c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008682:	60fb      	str	r3, [r7, #12]
 8008684:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008686:	4b3f      	ldr	r3, [pc, #252]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a3e      	ldr	r2, [pc, #248]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800868c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008690:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008692:	f7f9 f965 	bl	8001960 <HAL_GetTick>
 8008696:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008698:	e008      	b.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800869a:	f7f9 f961 	bl	8001960 <HAL_GetTick>
 800869e:	4602      	mov	r2, r0
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d901      	bls.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80086a8:	2303      	movs	r3, #3
 80086aa:	e062      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80086ac:	4b35      	ldr	r3, [pc, #212]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d0f0      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80086b8:	4b31      	ldr	r3, [pc, #196]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d02f      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d028      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086d6:	4b2a      	ldr	r3, [pc, #168]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80086e0:	4b29      	ldr	r3, [pc, #164]	; (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80086e2:	2201      	movs	r2, #1
 80086e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80086e6:	4b28      	ldr	r3, [pc, #160]	; (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80086e8:	2200      	movs	r2, #0
 80086ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80086ec:	4a24      	ldr	r2, [pc, #144]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80086f2:	4b23      	ldr	r3, [pc, #140]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d114      	bne.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80086fe:	f7f9 f92f 	bl	8001960 <HAL_GetTick>
 8008702:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008704:	e00a      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008706:	f7f9 f92b 	bl	8001960 <HAL_GetTick>
 800870a:	4602      	mov	r2, r0
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	f241 3288 	movw	r2, #5000	; 0x1388
 8008714:	4293      	cmp	r3, r2
 8008716:	d901      	bls.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	e02a      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800871c:	4b18      	ldr	r3, [pc, #96]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800871e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008720:	f003 0302 	and.w	r3, r3, #2
 8008724:	2b00      	cmp	r3, #0
 8008726:	d0ee      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008730:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008734:	d10d      	bne.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008736:	4b12      	ldr	r3, [pc, #72]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800874a:	490d      	ldr	r1, [pc, #52]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800874c:	4313      	orrs	r3, r2
 800874e:	608b      	str	r3, [r1, #8]
 8008750:	e005      	b.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008752:	4b0b      	ldr	r3, [pc, #44]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	4a0a      	ldr	r2, [pc, #40]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008758:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800875c:	6093      	str	r3, [r2, #8]
 800875e:	4b08      	ldr	r3, [pc, #32]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008760:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800876a:	4905      	ldr	r1, [pc, #20]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800876c:	4313      	orrs	r3, r2
 800876e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3718      	adds	r7, #24
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	42470068 	.word	0x42470068
 8008780:	40023800 	.word	0x40023800
 8008784:	40007000 	.word	0x40007000
 8008788:	42470e40 	.word	0x42470e40

0800878c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800878c:	b480      	push	{r7}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008794:	2300      	movs	r3, #0
 8008796:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008798:	2300      	movs	r3, #0
 800879a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800879c:	2300      	movs	r3, #0
 800879e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80087a0:	2300      	movs	r3, #0
 80087a2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d13e      	bne.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80087aa:	4b23      	ldr	r3, [pc, #140]	; (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087b2:	60fb      	str	r3, [r7, #12]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d005      	beq.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d12f      	bne.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80087c0:	4b1e      	ldr	r3, [pc, #120]	; (800883c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80087c2:	617b      	str	r3, [r7, #20]
          break;
 80087c4:	e02f      	b.n	8008826 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80087c6:	4b1c      	ldr	r3, [pc, #112]	; (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087d2:	d108      	bne.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80087d4:	4b18      	ldr	r3, [pc, #96]	; (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087dc:	4a18      	ldr	r2, [pc, #96]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80087de:	fbb2 f3f3 	udiv	r3, r2, r3
 80087e2:	613b      	str	r3, [r7, #16]
 80087e4:	e007      	b.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80087e6:	4b14      	ldr	r3, [pc, #80]	; (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087ee:	4a15      	ldr	r2, [pc, #84]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80087f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087f4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80087f6:	4b10      	ldr	r3, [pc, #64]	; (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80087f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087fc:	099b      	lsrs	r3, r3, #6
 80087fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	fb02 f303 	mul.w	r3, r2, r3
 8008808:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800880a:	4b0b      	ldr	r3, [pc, #44]	; (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800880c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008810:	0f1b      	lsrs	r3, r3, #28
 8008812:	f003 0307 	and.w	r3, r3, #7
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	fbb2 f3f3 	udiv	r3, r2, r3
 800881c:	617b      	str	r3, [r7, #20]
          break;
 800881e:	e002      	b.n	8008826 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008820:	2300      	movs	r3, #0
 8008822:	617b      	str	r3, [r7, #20]
          break;
 8008824:	bf00      	nop
        }
      }
      break;
 8008826:	bf00      	nop
    }
  }
  return frequency;
 8008828:	697b      	ldr	r3, [r7, #20]
}
 800882a:	4618      	mov	r0, r3
 800882c:	371c      	adds	r7, #28
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	40023800 	.word	0x40023800
 800883c:	00bb8000 	.word	0x00bb8000
 8008840:	007a1200 	.word	0x007a1200
 8008844:	00f42400 	.word	0x00f42400

08008848 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d101      	bne.n	800885a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e03f      	b.n	80088da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b00      	cmp	r3, #0
 8008864:	d106      	bne.n	8008874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f7f8 fe50 	bl	8001514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2224      	movs	r2, #36	; 0x24
 8008878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68da      	ldr	r2, [r3, #12]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800888a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f929 	bl	8008ae4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	691a      	ldr	r2, [r3, #16]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	695a      	ldr	r2, [r3, #20]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68da      	ldr	r2, [r3, #12]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80088c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2220      	movs	r2, #32
 80088cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2220      	movs	r2, #32
 80088d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b08a      	sub	sp, #40	; 0x28
 80088e6:	af02      	add	r7, sp, #8
 80088e8:	60f8      	str	r0, [r7, #12]
 80088ea:	60b9      	str	r1, [r7, #8]
 80088ec:	603b      	str	r3, [r7, #0]
 80088ee:	4613      	mov	r3, r2
 80088f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80088f2:	2300      	movs	r3, #0
 80088f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b20      	cmp	r3, #32
 8008900:	d17c      	bne.n	80089fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d002      	beq.n	800890e <HAL_UART_Transmit+0x2c>
 8008908:	88fb      	ldrh	r3, [r7, #6]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	e075      	b.n	80089fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008918:	2b01      	cmp	r3, #1
 800891a:	d101      	bne.n	8008920 <HAL_UART_Transmit+0x3e>
 800891c:	2302      	movs	r3, #2
 800891e:	e06e      	b.n	80089fe <HAL_UART_Transmit+0x11c>
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2221      	movs	r2, #33	; 0x21
 8008932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008936:	f7f9 f813 	bl	8001960 <HAL_GetTick>
 800893a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	88fa      	ldrh	r2, [r7, #6]
 8008940:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	88fa      	ldrh	r2, [r7, #6]
 8008946:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008950:	d108      	bne.n	8008964 <HAL_UART_Transmit+0x82>
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	691b      	ldr	r3, [r3, #16]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d104      	bne.n	8008964 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800895a:	2300      	movs	r3, #0
 800895c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	61bb      	str	r3, [r7, #24]
 8008962:	e003      	b.n	800896c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008968:	2300      	movs	r3, #0
 800896a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008974:	e02a      	b.n	80089cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	2200      	movs	r2, #0
 800897e:	2180      	movs	r1, #128	; 0x80
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 f840 	bl	8008a06 <UART_WaitOnFlagUntilTimeout>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d001      	beq.n	8008990 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800898c:	2303      	movs	r3, #3
 800898e:	e036      	b.n	80089fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d10b      	bne.n	80089ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	881b      	ldrh	r3, [r3, #0]
 800899a:	461a      	mov	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	3302      	adds	r3, #2
 80089aa:	61bb      	str	r3, [r7, #24]
 80089ac:	e007      	b.n	80089be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	781a      	ldrb	r2, [r3, #0]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	3301      	adds	r3, #1
 80089bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	3b01      	subs	r3, #1
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1cf      	bne.n	8008976 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	2200      	movs	r2, #0
 80089de:	2140      	movs	r1, #64	; 0x40
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f000 f810 	bl	8008a06 <UART_WaitOnFlagUntilTimeout>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d001      	beq.n	80089f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80089ec:	2303      	movs	r3, #3
 80089ee:	e006      	b.n	80089fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2220      	movs	r2, #32
 80089f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	e000      	b.n	80089fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80089fc:	2302      	movs	r3, #2
  }
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3720      	adds	r7, #32
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b090      	sub	sp, #64	; 0x40
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	60f8      	str	r0, [r7, #12]
 8008a0e:	60b9      	str	r1, [r7, #8]
 8008a10:	603b      	str	r3, [r7, #0]
 8008a12:	4613      	mov	r3, r2
 8008a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a16:	e050      	b.n	8008aba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a1e:	d04c      	beq.n	8008aba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d007      	beq.n	8008a36 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a26:	f7f8 ff9b 	bl	8001960 <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d241      	bcs.n	8008aba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	330c      	adds	r3, #12
 8008a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a40:	e853 3f00 	ldrex	r3, [r3]
 8008a44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	330c      	adds	r3, #12
 8008a54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a56:	637a      	str	r2, [r7, #52]	; 0x34
 8008a58:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a5e:	e841 2300 	strex	r3, r2, [r1]
 8008a62:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1e5      	bne.n	8008a36 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	3314      	adds	r3, #20
 8008a70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	e853 3f00 	ldrex	r3, [r3]
 8008a78:	613b      	str	r3, [r7, #16]
   return(result);
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	f023 0301 	bic.w	r3, r3, #1
 8008a80:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	3314      	adds	r3, #20
 8008a88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a8a:	623a      	str	r2, [r7, #32]
 8008a8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8e:	69f9      	ldr	r1, [r7, #28]
 8008a90:	6a3a      	ldr	r2, [r7, #32]
 8008a92:	e841 2300 	strex	r3, r2, [r1]
 8008a96:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1e5      	bne.n	8008a6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2220      	movs	r2, #32
 8008aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2220      	movs	r2, #32
 8008aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e00f      	b.n	8008ada <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	bf0c      	ite	eq
 8008aca:	2301      	moveq	r3, #1
 8008acc:	2300      	movne	r3, #0
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	79fb      	ldrb	r3, [r7, #7]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d09f      	beq.n	8008a18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3740      	adds	r7, #64	; 0x40
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
	...

08008ae4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae8:	b09f      	sub	sp, #124	; 0x7c
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008afa:	68d9      	ldr	r1, [r3, #12]
 8008afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	ea40 0301 	orr.w	r3, r0, r1
 8008b04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b08:	689a      	ldr	r2, [r3, #8]
 8008b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	431a      	orrs	r2, r3
 8008b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b12:	695b      	ldr	r3, [r3, #20]
 8008b14:	431a      	orrs	r2, r3
 8008b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b18:	69db      	ldr	r3, [r3, #28]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b28:	f021 010c 	bic.w	r1, r1, #12
 8008b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b32:	430b      	orrs	r3, r1
 8008b34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	695b      	ldr	r3, [r3, #20]
 8008b3c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b42:	6999      	ldr	r1, [r3, #24]
 8008b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	ea40 0301 	orr.w	r3, r0, r1
 8008b4c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	4bc5      	ldr	r3, [pc, #788]	; (8008e68 <UART_SetConfig+0x384>)
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d004      	beq.n	8008b62 <UART_SetConfig+0x7e>
 8008b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	4bc3      	ldr	r3, [pc, #780]	; (8008e6c <UART_SetConfig+0x388>)
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d103      	bne.n	8008b6a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b62:	f7ff fd1d 	bl	80085a0 <HAL_RCC_GetPCLK2Freq>
 8008b66:	6778      	str	r0, [r7, #116]	; 0x74
 8008b68:	e002      	b.n	8008b70 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b6a:	f7ff fd05 	bl	8008578 <HAL_RCC_GetPCLK1Freq>
 8008b6e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b72:	69db      	ldr	r3, [r3, #28]
 8008b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b78:	f040 80b6 	bne.w	8008ce8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b7e:	461c      	mov	r4, r3
 8008b80:	f04f 0500 	mov.w	r5, #0
 8008b84:	4622      	mov	r2, r4
 8008b86:	462b      	mov	r3, r5
 8008b88:	1891      	adds	r1, r2, r2
 8008b8a:	6439      	str	r1, [r7, #64]	; 0x40
 8008b8c:	415b      	adcs	r3, r3
 8008b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8008b90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b94:	1912      	adds	r2, r2, r4
 8008b96:	eb45 0303 	adc.w	r3, r5, r3
 8008b9a:	f04f 0000 	mov.w	r0, #0
 8008b9e:	f04f 0100 	mov.w	r1, #0
 8008ba2:	00d9      	lsls	r1, r3, #3
 8008ba4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008ba8:	00d0      	lsls	r0, r2, #3
 8008baa:	4602      	mov	r2, r0
 8008bac:	460b      	mov	r3, r1
 8008bae:	1911      	adds	r1, r2, r4
 8008bb0:	6639      	str	r1, [r7, #96]	; 0x60
 8008bb2:	416b      	adcs	r3, r5
 8008bb4:	667b      	str	r3, [r7, #100]	; 0x64
 8008bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	461a      	mov	r2, r3
 8008bbc:	f04f 0300 	mov.w	r3, #0
 8008bc0:	1891      	adds	r1, r2, r2
 8008bc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8008bc4:	415b      	adcs	r3, r3
 8008bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008bcc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008bd0:	f7f7 fb4e 	bl	8000270 <__aeabi_uldivmod>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	4ba5      	ldr	r3, [pc, #660]	; (8008e70 <UART_SetConfig+0x38c>)
 8008bda:	fba3 2302 	umull	r2, r3, r3, r2
 8008bde:	095b      	lsrs	r3, r3, #5
 8008be0:	011e      	lsls	r6, r3, #4
 8008be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008be4:	461c      	mov	r4, r3
 8008be6:	f04f 0500 	mov.w	r5, #0
 8008bea:	4622      	mov	r2, r4
 8008bec:	462b      	mov	r3, r5
 8008bee:	1891      	adds	r1, r2, r2
 8008bf0:	6339      	str	r1, [r7, #48]	; 0x30
 8008bf2:	415b      	adcs	r3, r3
 8008bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8008bf6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008bfa:	1912      	adds	r2, r2, r4
 8008bfc:	eb45 0303 	adc.w	r3, r5, r3
 8008c00:	f04f 0000 	mov.w	r0, #0
 8008c04:	f04f 0100 	mov.w	r1, #0
 8008c08:	00d9      	lsls	r1, r3, #3
 8008c0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c0e:	00d0      	lsls	r0, r2, #3
 8008c10:	4602      	mov	r2, r0
 8008c12:	460b      	mov	r3, r1
 8008c14:	1911      	adds	r1, r2, r4
 8008c16:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c18:	416b      	adcs	r3, r5
 8008c1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	461a      	mov	r2, r3
 8008c22:	f04f 0300 	mov.w	r3, #0
 8008c26:	1891      	adds	r1, r2, r2
 8008c28:	62b9      	str	r1, [r7, #40]	; 0x28
 8008c2a:	415b      	adcs	r3, r3
 8008c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c32:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008c36:	f7f7 fb1b 	bl	8000270 <__aeabi_uldivmod>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	4b8c      	ldr	r3, [pc, #560]	; (8008e70 <UART_SetConfig+0x38c>)
 8008c40:	fba3 1302 	umull	r1, r3, r3, r2
 8008c44:	095b      	lsrs	r3, r3, #5
 8008c46:	2164      	movs	r1, #100	; 0x64
 8008c48:	fb01 f303 	mul.w	r3, r1, r3
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	00db      	lsls	r3, r3, #3
 8008c50:	3332      	adds	r3, #50	; 0x32
 8008c52:	4a87      	ldr	r2, [pc, #540]	; (8008e70 <UART_SetConfig+0x38c>)
 8008c54:	fba2 2303 	umull	r2, r3, r2, r3
 8008c58:	095b      	lsrs	r3, r3, #5
 8008c5a:	005b      	lsls	r3, r3, #1
 8008c5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c60:	441e      	add	r6, r3
 8008c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c64:	4618      	mov	r0, r3
 8008c66:	f04f 0100 	mov.w	r1, #0
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	1894      	adds	r4, r2, r2
 8008c70:	623c      	str	r4, [r7, #32]
 8008c72:	415b      	adcs	r3, r3
 8008c74:	627b      	str	r3, [r7, #36]	; 0x24
 8008c76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c7a:	1812      	adds	r2, r2, r0
 8008c7c:	eb41 0303 	adc.w	r3, r1, r3
 8008c80:	f04f 0400 	mov.w	r4, #0
 8008c84:	f04f 0500 	mov.w	r5, #0
 8008c88:	00dd      	lsls	r5, r3, #3
 8008c8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c8e:	00d4      	lsls	r4, r2, #3
 8008c90:	4622      	mov	r2, r4
 8008c92:	462b      	mov	r3, r5
 8008c94:	1814      	adds	r4, r2, r0
 8008c96:	653c      	str	r4, [r7, #80]	; 0x50
 8008c98:	414b      	adcs	r3, r1
 8008c9a:	657b      	str	r3, [r7, #84]	; 0x54
 8008c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	f04f 0300 	mov.w	r3, #0
 8008ca6:	1891      	adds	r1, r2, r2
 8008ca8:	61b9      	str	r1, [r7, #24]
 8008caa:	415b      	adcs	r3, r3
 8008cac:	61fb      	str	r3, [r7, #28]
 8008cae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008cb2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008cb6:	f7f7 fadb 	bl	8000270 <__aeabi_uldivmod>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	4b6c      	ldr	r3, [pc, #432]	; (8008e70 <UART_SetConfig+0x38c>)
 8008cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8008cc4:	095b      	lsrs	r3, r3, #5
 8008cc6:	2164      	movs	r1, #100	; 0x64
 8008cc8:	fb01 f303 	mul.w	r3, r1, r3
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	00db      	lsls	r3, r3, #3
 8008cd0:	3332      	adds	r3, #50	; 0x32
 8008cd2:	4a67      	ldr	r2, [pc, #412]	; (8008e70 <UART_SetConfig+0x38c>)
 8008cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd8:	095b      	lsrs	r3, r3, #5
 8008cda:	f003 0207 	and.w	r2, r3, #7
 8008cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4432      	add	r2, r6
 8008ce4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ce6:	e0b9      	b.n	8008e5c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ce8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cea:	461c      	mov	r4, r3
 8008cec:	f04f 0500 	mov.w	r5, #0
 8008cf0:	4622      	mov	r2, r4
 8008cf2:	462b      	mov	r3, r5
 8008cf4:	1891      	adds	r1, r2, r2
 8008cf6:	6139      	str	r1, [r7, #16]
 8008cf8:	415b      	adcs	r3, r3
 8008cfa:	617b      	str	r3, [r7, #20]
 8008cfc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d00:	1912      	adds	r2, r2, r4
 8008d02:	eb45 0303 	adc.w	r3, r5, r3
 8008d06:	f04f 0000 	mov.w	r0, #0
 8008d0a:	f04f 0100 	mov.w	r1, #0
 8008d0e:	00d9      	lsls	r1, r3, #3
 8008d10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d14:	00d0      	lsls	r0, r2, #3
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	eb12 0804 	adds.w	r8, r2, r4
 8008d1e:	eb43 0905 	adc.w	r9, r3, r5
 8008d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f04f 0100 	mov.w	r1, #0
 8008d2c:	f04f 0200 	mov.w	r2, #0
 8008d30:	f04f 0300 	mov.w	r3, #0
 8008d34:	008b      	lsls	r3, r1, #2
 8008d36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d3a:	0082      	lsls	r2, r0, #2
 8008d3c:	4640      	mov	r0, r8
 8008d3e:	4649      	mov	r1, r9
 8008d40:	f7f7 fa96 	bl	8000270 <__aeabi_uldivmod>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	4b49      	ldr	r3, [pc, #292]	; (8008e70 <UART_SetConfig+0x38c>)
 8008d4a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d4e:	095b      	lsrs	r3, r3, #5
 8008d50:	011e      	lsls	r6, r3, #4
 8008d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d54:	4618      	mov	r0, r3
 8008d56:	f04f 0100 	mov.w	r1, #0
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	1894      	adds	r4, r2, r2
 8008d60:	60bc      	str	r4, [r7, #8]
 8008d62:	415b      	adcs	r3, r3
 8008d64:	60fb      	str	r3, [r7, #12]
 8008d66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d6a:	1812      	adds	r2, r2, r0
 8008d6c:	eb41 0303 	adc.w	r3, r1, r3
 8008d70:	f04f 0400 	mov.w	r4, #0
 8008d74:	f04f 0500 	mov.w	r5, #0
 8008d78:	00dd      	lsls	r5, r3, #3
 8008d7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008d7e:	00d4      	lsls	r4, r2, #3
 8008d80:	4622      	mov	r2, r4
 8008d82:	462b      	mov	r3, r5
 8008d84:	1814      	adds	r4, r2, r0
 8008d86:	64bc      	str	r4, [r7, #72]	; 0x48
 8008d88:	414b      	adcs	r3, r1
 8008d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f04f 0100 	mov.w	r1, #0
 8008d96:	f04f 0200 	mov.w	r2, #0
 8008d9a:	f04f 0300 	mov.w	r3, #0
 8008d9e:	008b      	lsls	r3, r1, #2
 8008da0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008da4:	0082      	lsls	r2, r0, #2
 8008da6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008daa:	f7f7 fa61 	bl	8000270 <__aeabi_uldivmod>
 8008dae:	4602      	mov	r2, r0
 8008db0:	460b      	mov	r3, r1
 8008db2:	4b2f      	ldr	r3, [pc, #188]	; (8008e70 <UART_SetConfig+0x38c>)
 8008db4:	fba3 1302 	umull	r1, r3, r3, r2
 8008db8:	095b      	lsrs	r3, r3, #5
 8008dba:	2164      	movs	r1, #100	; 0x64
 8008dbc:	fb01 f303 	mul.w	r3, r1, r3
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	011b      	lsls	r3, r3, #4
 8008dc4:	3332      	adds	r3, #50	; 0x32
 8008dc6:	4a2a      	ldr	r2, [pc, #168]	; (8008e70 <UART_SetConfig+0x38c>)
 8008dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8008dcc:	095b      	lsrs	r3, r3, #5
 8008dce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008dd2:	441e      	add	r6, r3
 8008dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f04f 0100 	mov.w	r1, #0
 8008ddc:	4602      	mov	r2, r0
 8008dde:	460b      	mov	r3, r1
 8008de0:	1894      	adds	r4, r2, r2
 8008de2:	603c      	str	r4, [r7, #0]
 8008de4:	415b      	adcs	r3, r3
 8008de6:	607b      	str	r3, [r7, #4]
 8008de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dec:	1812      	adds	r2, r2, r0
 8008dee:	eb41 0303 	adc.w	r3, r1, r3
 8008df2:	f04f 0400 	mov.w	r4, #0
 8008df6:	f04f 0500 	mov.w	r5, #0
 8008dfa:	00dd      	lsls	r5, r3, #3
 8008dfc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e00:	00d4      	lsls	r4, r2, #3
 8008e02:	4622      	mov	r2, r4
 8008e04:	462b      	mov	r3, r5
 8008e06:	eb12 0a00 	adds.w	sl, r2, r0
 8008e0a:	eb43 0b01 	adc.w	fp, r3, r1
 8008e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f04f 0100 	mov.w	r1, #0
 8008e18:	f04f 0200 	mov.w	r2, #0
 8008e1c:	f04f 0300 	mov.w	r3, #0
 8008e20:	008b      	lsls	r3, r1, #2
 8008e22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e26:	0082      	lsls	r2, r0, #2
 8008e28:	4650      	mov	r0, sl
 8008e2a:	4659      	mov	r1, fp
 8008e2c:	f7f7 fa20 	bl	8000270 <__aeabi_uldivmod>
 8008e30:	4602      	mov	r2, r0
 8008e32:	460b      	mov	r3, r1
 8008e34:	4b0e      	ldr	r3, [pc, #56]	; (8008e70 <UART_SetConfig+0x38c>)
 8008e36:	fba3 1302 	umull	r1, r3, r3, r2
 8008e3a:	095b      	lsrs	r3, r3, #5
 8008e3c:	2164      	movs	r1, #100	; 0x64
 8008e3e:	fb01 f303 	mul.w	r3, r1, r3
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	011b      	lsls	r3, r3, #4
 8008e46:	3332      	adds	r3, #50	; 0x32
 8008e48:	4a09      	ldr	r2, [pc, #36]	; (8008e70 <UART_SetConfig+0x38c>)
 8008e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e4e:	095b      	lsrs	r3, r3, #5
 8008e50:	f003 020f 	and.w	r2, r3, #15
 8008e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4432      	add	r2, r6
 8008e5a:	609a      	str	r2, [r3, #8]
}
 8008e5c:	bf00      	nop
 8008e5e:	377c      	adds	r7, #124	; 0x7c
 8008e60:	46bd      	mov	sp, r7
 8008e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e66:	bf00      	nop
 8008e68:	40011000 	.word	0x40011000
 8008e6c:	40011400 	.word	0x40011400
 8008e70:	51eb851f 	.word	0x51eb851f

08008e74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e74:	b084      	sub	sp, #16
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b084      	sub	sp, #16
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	f107 001c 	add.w	r0, r7, #28
 8008e82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d122      	bne.n	8008ed2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d105      	bne.n	8008ec6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f9a0 	bl	800920c <USB_CoreReset>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	73fb      	strb	r3, [r7, #15]
 8008ed0:	e01a      	b.n	8008f08 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f994 	bl	800920c <USB_CoreReset>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d106      	bne.n	8008efc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	639a      	str	r2, [r3, #56]	; 0x38
 8008efa:	e005      	b.n	8008f08 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d10b      	bne.n	8008f26 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	f043 0206 	orr.w	r2, r3, #6
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	f043 0220 	orr.w	r2, r3, #32
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f32:	b004      	add	sp, #16
 8008f34:	4770      	bx	lr

08008f36 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f36:	b480      	push	{r7}
 8008f38:	b083      	sub	sp, #12
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	f043 0201 	orr.w	r2, r3, #1
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f023 0201 	bic.w	r2, r3, #1
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	370c      	adds	r7, #12
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	460b      	mov	r3, r1
 8008f84:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008f86:	2300      	movs	r3, #0
 8008f88:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f96:	78fb      	ldrb	r3, [r7, #3]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d115      	bne.n	8008fc8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008fa8:	2001      	movs	r0, #1
 8008faa:	f7f8 fce5 	bl	8001978 <HAL_Delay>
      ms++;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f91a 	bl	80091ee <USB_GetMode>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d01e      	beq.n	8008ffe <USB_SetCurrentMode+0x84>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2b31      	cmp	r3, #49	; 0x31
 8008fc4:	d9f0      	bls.n	8008fa8 <USB_SetCurrentMode+0x2e>
 8008fc6:	e01a      	b.n	8008ffe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008fc8:	78fb      	ldrb	r3, [r7, #3]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d115      	bne.n	8008ffa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008fda:	2001      	movs	r0, #1
 8008fdc:	f7f8 fccc 	bl	8001978 <HAL_Delay>
      ms++;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f901 	bl	80091ee <USB_GetMode>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d005      	beq.n	8008ffe <USB_SetCurrentMode+0x84>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2b31      	cmp	r3, #49	; 0x31
 8008ff6:	d9f0      	bls.n	8008fda <USB_SetCurrentMode+0x60>
 8008ff8:	e001      	b.n	8008ffe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e005      	b.n	800900a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b32      	cmp	r3, #50	; 0x32
 8009002:	d101      	bne.n	8009008 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e000      	b.n	800900a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
	...

08009014 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800901e:	2300      	movs	r3, #0
 8009020:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	019b      	lsls	r3, r3, #6
 8009026:	f043 0220 	orr.w	r2, r3, #32
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	3301      	adds	r3, #1
 8009032:	60fb      	str	r3, [r7, #12]
 8009034:	4a08      	ldr	r2, [pc, #32]	; (8009058 <USB_FlushTxFifo+0x44>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d901      	bls.n	800903e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e006      	b.n	800904c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	f003 0320 	and.w	r3, r3, #32
 8009046:	2b20      	cmp	r3, #32
 8009048:	d0f1      	beq.n	800902e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800904a:	2300      	movs	r3, #0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3714      	adds	r7, #20
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr
 8009058:	00030d40 	.word	0x00030d40

0800905c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009064:	2300      	movs	r3, #0
 8009066:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2210      	movs	r2, #16
 800906c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	3301      	adds	r3, #1
 8009072:	60fb      	str	r3, [r7, #12]
 8009074:	4a08      	ldr	r2, [pc, #32]	; (8009098 <USB_FlushRxFifo+0x3c>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d901      	bls.n	800907e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800907a:	2303      	movs	r3, #3
 800907c:	e006      	b.n	800908c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	f003 0310 	and.w	r3, r3, #16
 8009086:	2b10      	cmp	r3, #16
 8009088:	d0f1      	beq.n	800906e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr
 8009098:	00030d40 	.word	0x00030d40

0800909c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800909c:	b480      	push	{r7}
 800909e:	b089      	sub	sp, #36	; 0x24
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	4611      	mov	r1, r2
 80090a8:	461a      	mov	r2, r3
 80090aa:	460b      	mov	r3, r1
 80090ac:	71fb      	strb	r3, [r7, #7]
 80090ae:	4613      	mov	r3, r2
 80090b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80090ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d123      	bne.n	800910a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80090c2:	88bb      	ldrh	r3, [r7, #4]
 80090c4:	3303      	adds	r3, #3
 80090c6:	089b      	lsrs	r3, r3, #2
 80090c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80090ca:	2300      	movs	r3, #0
 80090cc:	61bb      	str	r3, [r7, #24]
 80090ce:	e018      	b.n	8009102 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80090d0:	79fb      	ldrb	r3, [r7, #7]
 80090d2:	031a      	lsls	r2, r3, #12
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090dc:	461a      	mov	r2, r3
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	3301      	adds	r3, #1
 80090e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	3301      	adds	r3, #1
 80090ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	3301      	adds	r3, #1
 80090f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	3301      	adds	r3, #1
 80090fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	3301      	adds	r3, #1
 8009100:	61bb      	str	r3, [r7, #24]
 8009102:	69ba      	ldr	r2, [r7, #24]
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	429a      	cmp	r2, r3
 8009108:	d3e2      	bcc.n	80090d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3724      	adds	r7, #36	; 0x24
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009118:	b480      	push	{r7}
 800911a:	b08b      	sub	sp, #44	; 0x2c
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	4613      	mov	r3, r2
 8009124:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800912e:	88fb      	ldrh	r3, [r7, #6]
 8009130:	089b      	lsrs	r3, r3, #2
 8009132:	b29b      	uxth	r3, r3
 8009134:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009136:	88fb      	ldrh	r3, [r7, #6]
 8009138:	f003 0303 	and.w	r3, r3, #3
 800913c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800913e:	2300      	movs	r3, #0
 8009140:	623b      	str	r3, [r7, #32]
 8009142:	e014      	b.n	800916e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009152:	3301      	adds	r3, #1
 8009154:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009158:	3301      	adds	r3, #1
 800915a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800915c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915e:	3301      	adds	r3, #1
 8009160:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009164:	3301      	adds	r3, #1
 8009166:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009168:	6a3b      	ldr	r3, [r7, #32]
 800916a:	3301      	adds	r3, #1
 800916c:	623b      	str	r3, [r7, #32]
 800916e:	6a3a      	ldr	r2, [r7, #32]
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	429a      	cmp	r2, r3
 8009174:	d3e6      	bcc.n	8009144 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009176:	8bfb      	ldrh	r3, [r7, #30]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d01e      	beq.n	80091ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800917c:	2300      	movs	r3, #0
 800917e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009186:	461a      	mov	r2, r3
 8009188:	f107 0310 	add.w	r3, r7, #16
 800918c:	6812      	ldr	r2, [r2, #0]
 800918e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	6a3b      	ldr	r3, [r7, #32]
 8009194:	b2db      	uxtb	r3, r3
 8009196:	00db      	lsls	r3, r3, #3
 8009198:	fa22 f303 	lsr.w	r3, r2, r3
 800919c:	b2da      	uxtb	r2, r3
 800919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a0:	701a      	strb	r2, [r3, #0]
      i++;
 80091a2:	6a3b      	ldr	r3, [r7, #32]
 80091a4:	3301      	adds	r3, #1
 80091a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80091a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091aa:	3301      	adds	r3, #1
 80091ac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80091ae:	8bfb      	ldrh	r3, [r7, #30]
 80091b0:	3b01      	subs	r3, #1
 80091b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80091b4:	8bfb      	ldrh	r3, [r7, #30]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1ea      	bne.n	8009190 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80091ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091bc:	4618      	mov	r0, r3
 80091be:	372c      	adds	r7, #44	; 0x2c
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	695b      	ldr	r3, [r3, #20]
 80091d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	4013      	ands	r3, r2
 80091de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80091e0:	68fb      	ldr	r3, [r7, #12]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3714      	adds	r7, #20
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b083      	sub	sp, #12
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	f003 0301 	and.w	r3, r3, #1
}
 80091fe:	4618      	mov	r0, r3
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
	...

0800920c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009214:	2300      	movs	r3, #0
 8009216:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	3301      	adds	r3, #1
 800921c:	60fb      	str	r3, [r7, #12]
 800921e:	4a13      	ldr	r2, [pc, #76]	; (800926c <USB_CoreReset+0x60>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d901      	bls.n	8009228 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8009224:	2303      	movs	r3, #3
 8009226:	e01a      	b.n	800925e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	2b00      	cmp	r3, #0
 800922e:	daf3      	bge.n	8009218 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009230:	2300      	movs	r3, #0
 8009232:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	f043 0201 	orr.w	r2, r3, #1
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	3301      	adds	r3, #1
 8009244:	60fb      	str	r3, [r7, #12]
 8009246:	4a09      	ldr	r2, [pc, #36]	; (800926c <USB_CoreReset+0x60>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d901      	bls.n	8009250 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800924c:	2303      	movs	r3, #3
 800924e:	e006      	b.n	800925e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	f003 0301 	and.w	r3, r3, #1
 8009258:	2b01      	cmp	r3, #1
 800925a:	d0f1      	beq.n	8009240 <USB_CoreReset+0x34>

  return HAL_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3714      	adds	r7, #20
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	00030d40 	.word	0x00030d40

08009270 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009270:	b084      	sub	sp, #16
 8009272:	b580      	push	{r7, lr}
 8009274:	b084      	sub	sp, #16
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
 800927a:	f107 001c 	add.w	r0, r7, #28
 800927e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800928c:	461a      	mov	r2, r3
 800928e:	2300      	movs	r3, #0
 8009290:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009296:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ae:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d018      	beq.n	80092f4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80092c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d10a      	bne.n	80092de <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092d6:	f043 0304 	orr.w	r3, r3, #4
 80092da:	6013      	str	r3, [r2, #0]
 80092dc:	e014      	b.n	8009308 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092ec:	f023 0304 	bic.w	r3, r3, #4
 80092f0:	6013      	str	r3, [r2, #0]
 80092f2:	e009      	b.n	8009308 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009302:	f023 0304 	bic.w	r3, r3, #4
 8009306:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009308:	2110      	movs	r1, #16
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f7ff fe82 	bl	8009014 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f7ff fea3 	bl	800905c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009316:	2300      	movs	r3, #0
 8009318:	60fb      	str	r3, [r7, #12]
 800931a:	e015      	b.n	8009348 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	015a      	lsls	r2, r3, #5
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	4413      	add	r3, r2
 8009324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009328:	461a      	mov	r2, r3
 800932a:	f04f 33ff 	mov.w	r3, #4294967295
 800932e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	015a      	lsls	r2, r3, #5
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	4413      	add	r3, r2
 8009338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800933c:	461a      	mov	r2, r3
 800933e:	2300      	movs	r3, #0
 8009340:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	3301      	adds	r3, #1
 8009346:	60fb      	str	r3, [r7, #12]
 8009348:	6a3b      	ldr	r3, [r7, #32]
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	429a      	cmp	r2, r3
 800934e:	d3e5      	bcc.n	800931c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f04f 32ff 	mov.w	r2, #4294967295
 800935c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00b      	beq.n	8009382 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009370:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a13      	ldr	r2, [pc, #76]	; (80093c4 <USB_HostInit+0x154>)
 8009376:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a13      	ldr	r2, [pc, #76]	; (80093c8 <USB_HostInit+0x158>)
 800937c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009380:	e009      	b.n	8009396 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2280      	movs	r2, #128	; 0x80
 8009386:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a10      	ldr	r2, [pc, #64]	; (80093cc <USB_HostInit+0x15c>)
 800938c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a0f      	ldr	r2, [pc, #60]	; (80093d0 <USB_HostInit+0x160>)
 8009392:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009398:	2b00      	cmp	r3, #0
 800939a:	d105      	bne.n	80093a8 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	f043 0210 	orr.w	r2, r3, #16
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	699a      	ldr	r2, [r3, #24]
 80093ac:	4b09      	ldr	r3, [pc, #36]	; (80093d4 <USB_HostInit+0x164>)
 80093ae:	4313      	orrs	r3, r2
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093c0:	b004      	add	sp, #16
 80093c2:	4770      	bx	lr
 80093c4:	01000200 	.word	0x01000200
 80093c8:	00e00300 	.word	0x00e00300
 80093cc:	00600080 	.word	0x00600080
 80093d0:	004000e0 	.word	0x004000e0
 80093d4:	a3200008 	.word	0xa3200008

080093d8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	460b      	mov	r3, r1
 80093e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80093f6:	f023 0303 	bic.w	r3, r3, #3
 80093fa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	78fb      	ldrb	r3, [r7, #3]
 8009406:	f003 0303 	and.w	r3, r3, #3
 800940a:	68f9      	ldr	r1, [r7, #12]
 800940c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009410:	4313      	orrs	r3, r2
 8009412:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009414:	78fb      	ldrb	r3, [r7, #3]
 8009416:	2b01      	cmp	r3, #1
 8009418:	d107      	bne.n	800942a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009420:	461a      	mov	r2, r3
 8009422:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009426:	6053      	str	r3, [r2, #4]
 8009428:	e009      	b.n	800943e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800942a:	78fb      	ldrb	r3, [r7, #3]
 800942c:	2b02      	cmp	r3, #2
 800942e:	d106      	bne.n	800943e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009436:	461a      	mov	r2, r3
 8009438:	f241 7370 	movw	r3, #6000	; 0x1770
 800943c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3714      	adds	r7, #20
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009458:	2300      	movs	r3, #0
 800945a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800946c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	68fa      	ldr	r2, [r7, #12]
 8009472:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800947a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800947c:	2064      	movs	r0, #100	; 0x64
 800947e:	f7f8 fa7b 	bl	8001978 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800948a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800948e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009490:	200a      	movs	r0, #10
 8009492:	f7f8 fa71 	bl	8001978 <HAL_Delay>

  return HAL_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3710      	adds	r7, #16
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	460b      	mov	r3, r1
 80094aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80094b0:	2300      	movs	r3, #0
 80094b2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80094c4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d109      	bne.n	80094e4 <USB_DriveVbus+0x44>
 80094d0:	78fb      	ldrb	r3, [r7, #3]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d106      	bne.n	80094e4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80094de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80094e2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ee:	d109      	bne.n	8009504 <USB_DriveVbus+0x64>
 80094f0:	78fb      	ldrb	r3, [r7, #3]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d106      	bne.n	8009504 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80094fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009502:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr

08009512 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009512:	b480      	push	{r7}
 8009514:	b085      	sub	sp, #20
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800951e:	2300      	movs	r3, #0
 8009520:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	0c5b      	lsrs	r3, r3, #17
 8009530:	f003 0303 	and.w	r3, r3, #3
}
 8009534:	4618      	mov	r0, r3
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	b29b      	uxth	r3, r3
}
 8009556:	4618      	mov	r0, r3
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
	...

08009564 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b088      	sub	sp, #32
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	4608      	mov	r0, r1
 800956e:	4611      	mov	r1, r2
 8009570:	461a      	mov	r2, r3
 8009572:	4603      	mov	r3, r0
 8009574:	70fb      	strb	r3, [r7, #3]
 8009576:	460b      	mov	r3, r1
 8009578:	70bb      	strb	r3, [r7, #2]
 800957a:	4613      	mov	r3, r2
 800957c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009586:	78fb      	ldrb	r3, [r7, #3]
 8009588:	015a      	lsls	r2, r3, #5
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	4413      	add	r3, r2
 800958e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009592:	461a      	mov	r2, r3
 8009594:	f04f 33ff 	mov.w	r3, #4294967295
 8009598:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800959a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800959e:	2b03      	cmp	r3, #3
 80095a0:	d87e      	bhi.n	80096a0 <USB_HC_Init+0x13c>
 80095a2:	a201      	add	r2, pc, #4	; (adr r2, 80095a8 <USB_HC_Init+0x44>)
 80095a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a8:	080095b9 	.word	0x080095b9
 80095ac:	08009663 	.word	0x08009663
 80095b0:	080095b9 	.word	0x080095b9
 80095b4:	08009625 	.word	0x08009625
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80095b8:	78fb      	ldrb	r3, [r7, #3]
 80095ba:	015a      	lsls	r2, r3, #5
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	4413      	add	r3, r2
 80095c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095c4:	461a      	mov	r2, r3
 80095c6:	f240 439d 	movw	r3, #1181	; 0x49d
 80095ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80095cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	da10      	bge.n	80095f6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80095d4:	78fb      	ldrb	r3, [r7, #3]
 80095d6:	015a      	lsls	r2, r3, #5
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	4413      	add	r3, r2
 80095dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	78fa      	ldrb	r2, [r7, #3]
 80095e4:	0151      	lsls	r1, r2, #5
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	440a      	add	r2, r1
 80095ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095f2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80095f4:	e057      	b.n	80096a6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d051      	beq.n	80096a6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009602:	78fb      	ldrb	r3, [r7, #3]
 8009604:	015a      	lsls	r2, r3, #5
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	4413      	add	r3, r2
 800960a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	78fa      	ldrb	r2, [r7, #3]
 8009612:	0151      	lsls	r1, r2, #5
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	440a      	add	r2, r1
 8009618:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800961c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009620:	60d3      	str	r3, [r2, #12]
      break;
 8009622:	e040      	b.n	80096a6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009624:	78fb      	ldrb	r3, [r7, #3]
 8009626:	015a      	lsls	r2, r3, #5
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	4413      	add	r3, r2
 800962c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009630:	461a      	mov	r2, r3
 8009632:	f240 639d 	movw	r3, #1693	; 0x69d
 8009636:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009638:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800963c:	2b00      	cmp	r3, #0
 800963e:	da34      	bge.n	80096aa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009640:	78fb      	ldrb	r3, [r7, #3]
 8009642:	015a      	lsls	r2, r3, #5
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	4413      	add	r3, r2
 8009648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	78fa      	ldrb	r2, [r7, #3]
 8009650:	0151      	lsls	r1, r2, #5
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	440a      	add	r2, r1
 8009656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800965a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800965e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009660:	e023      	b.n	80096aa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009662:	78fb      	ldrb	r3, [r7, #3]
 8009664:	015a      	lsls	r2, r3, #5
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	4413      	add	r3, r2
 800966a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800966e:	461a      	mov	r2, r3
 8009670:	f240 2325 	movw	r3, #549	; 0x225
 8009674:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009676:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800967a:	2b00      	cmp	r3, #0
 800967c:	da17      	bge.n	80096ae <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800967e:	78fb      	ldrb	r3, [r7, #3]
 8009680:	015a      	lsls	r2, r3, #5
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	4413      	add	r3, r2
 8009686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	78fa      	ldrb	r2, [r7, #3]
 800968e:	0151      	lsls	r1, r2, #5
 8009690:	693a      	ldr	r2, [r7, #16]
 8009692:	440a      	add	r2, r1
 8009694:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009698:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800969c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800969e:	e006      	b.n	80096ae <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	77fb      	strb	r3, [r7, #31]
      break;
 80096a4:	e004      	b.n	80096b0 <USB_HC_Init+0x14c>
      break;
 80096a6:	bf00      	nop
 80096a8:	e002      	b.n	80096b0 <USB_HC_Init+0x14c>
      break;
 80096aa:	bf00      	nop
 80096ac:	e000      	b.n	80096b0 <USB_HC_Init+0x14c>
      break;
 80096ae:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096b6:	699a      	ldr	r2, [r3, #24]
 80096b8:	78fb      	ldrb	r3, [r7, #3]
 80096ba:	f003 030f 	and.w	r3, r3, #15
 80096be:	2101      	movs	r1, #1
 80096c0:	fa01 f303 	lsl.w	r3, r1, r3
 80096c4:	6939      	ldr	r1, [r7, #16]
 80096c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80096ca:	4313      	orrs	r3, r2
 80096cc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	699b      	ldr	r3, [r3, #24]
 80096d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80096da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	da03      	bge.n	80096ea <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80096e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096e6:	61bb      	str	r3, [r7, #24]
 80096e8:	e001      	b.n	80096ee <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80096ea:	2300      	movs	r3, #0
 80096ec:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f7ff ff0f 	bl	8009512 <USB_GetHostSpeed>
 80096f4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80096f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	d106      	bne.n	800970c <USB_HC_Init+0x1a8>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2b02      	cmp	r3, #2
 8009702:	d003      	beq.n	800970c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009704:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009708:	617b      	str	r3, [r7, #20]
 800970a:	e001      	b.n	8009710 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800970c:	2300      	movs	r3, #0
 800970e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009710:	787b      	ldrb	r3, [r7, #1]
 8009712:	059b      	lsls	r3, r3, #22
 8009714:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009718:	78bb      	ldrb	r3, [r7, #2]
 800971a:	02db      	lsls	r3, r3, #11
 800971c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009720:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009722:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009726:	049b      	lsls	r3, r3, #18
 8009728:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800972c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800972e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009730:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009734:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800973a:	78fb      	ldrb	r3, [r7, #3]
 800973c:	0159      	lsls	r1, r3, #5
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	440b      	add	r3, r1
 8009742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009746:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800974c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800974e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009752:	2b03      	cmp	r3, #3
 8009754:	d10f      	bne.n	8009776 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009756:	78fb      	ldrb	r3, [r7, #3]
 8009758:	015a      	lsls	r2, r3, #5
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	4413      	add	r3, r2
 800975e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	78fa      	ldrb	r2, [r7, #3]
 8009766:	0151      	lsls	r1, r2, #5
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	440a      	add	r2, r1
 800976c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009770:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009774:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009776:	7ffb      	ldrb	r3, [r7, #31]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3720      	adds	r7, #32
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b08c      	sub	sp, #48	; 0x30
 8009784:	af02      	add	r7, sp, #8
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	4613      	mov	r3, r2
 800978c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	785b      	ldrb	r3, [r3, #1]
 8009796:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009798:	f44f 7380 	mov.w	r3, #256	; 0x100
 800979c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d02d      	beq.n	8009806 <USB_HC_StartXfer+0x86>
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	791b      	ldrb	r3, [r3, #4]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d129      	bne.n	8009806 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80097b2:	79fb      	ldrb	r3, [r7, #7]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d117      	bne.n	80097e8 <USB_HC_StartXfer+0x68>
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	79db      	ldrb	r3, [r3, #7]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d003      	beq.n	80097c8 <USB_HC_StartXfer+0x48>
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	79db      	ldrb	r3, [r3, #7]
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d10f      	bne.n	80097e8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	6a3b      	ldr	r3, [r7, #32]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	69fa      	ldr	r2, [r7, #28]
 80097d8:	0151      	lsls	r1, r2, #5
 80097da:	6a3a      	ldr	r2, [r7, #32]
 80097dc:	440a      	add	r2, r1
 80097de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097e6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80097e8:	79fb      	ldrb	r3, [r7, #7]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10b      	bne.n	8009806 <USB_HC_StartXfer+0x86>
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	795b      	ldrb	r3, [r3, #5]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d107      	bne.n	8009806 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	785b      	ldrb	r3, [r3, #1]
 80097fa:	4619      	mov	r1, r3
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f000 fa2f 	bl	8009c60 <USB_DoPing>
      return HAL_OK;
 8009802:	2300      	movs	r3, #0
 8009804:	e0f8      	b.n	80099f8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d018      	beq.n	8009840 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	8912      	ldrh	r2, [r2, #8]
 8009816:	4413      	add	r3, r2
 8009818:	3b01      	subs	r3, #1
 800981a:	68ba      	ldr	r2, [r7, #8]
 800981c:	8912      	ldrh	r2, [r2, #8]
 800981e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009822:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009824:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009826:	8b7b      	ldrh	r3, [r7, #26]
 8009828:	429a      	cmp	r2, r3
 800982a:	d90b      	bls.n	8009844 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800982c:	8b7b      	ldrh	r3, [r7, #26]
 800982e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009830:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	8912      	ldrh	r2, [r2, #8]
 8009836:	fb02 f203 	mul.w	r2, r2, r3
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	611a      	str	r2, [r3, #16]
 800983e:	e001      	b.n	8009844 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009840:	2301      	movs	r3, #1
 8009842:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	78db      	ldrb	r3, [r3, #3]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d007      	beq.n	800985c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800984c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	8912      	ldrh	r2, [r2, #8]
 8009852:	fb02 f203 	mul.w	r2, r2, r3
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	611a      	str	r2, [r3, #16]
 800985a:	e003      	b.n	8009864 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	695a      	ldr	r2, [r3, #20]
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800986c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800986e:	04d9      	lsls	r1, r3, #19
 8009870:	4b63      	ldr	r3, [pc, #396]	; (8009a00 <USB_HC_StartXfer+0x280>)
 8009872:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009874:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	7a9b      	ldrb	r3, [r3, #10]
 800987a:	075b      	lsls	r3, r3, #29
 800987c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009880:	69f9      	ldr	r1, [r7, #28]
 8009882:	0148      	lsls	r0, r1, #5
 8009884:	6a39      	ldr	r1, [r7, #32]
 8009886:	4401      	add	r1, r0
 8009888:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800988c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800988e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009890:	79fb      	ldrb	r3, [r7, #7]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d009      	beq.n	80098aa <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	68d9      	ldr	r1, [r3, #12]
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	015a      	lsls	r2, r3, #5
 800989e:	6a3b      	ldr	r3, [r7, #32]
 80098a0:	4413      	add	r3, r2
 80098a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098a6:	460a      	mov	r2, r1
 80098a8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80098aa:	6a3b      	ldr	r3, [r7, #32]
 80098ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	f003 0301 	and.w	r3, r3, #1
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	bf0c      	ite	eq
 80098ba:	2301      	moveq	r3, #1
 80098bc:	2300      	movne	r3, #0
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	015a      	lsls	r2, r3, #5
 80098c6:	6a3b      	ldr	r3, [r7, #32]
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	69fa      	ldr	r2, [r7, #28]
 80098d2:	0151      	lsls	r1, r2, #5
 80098d4:	6a3a      	ldr	r2, [r7, #32]
 80098d6:	440a      	add	r2, r1
 80098d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80098e0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	015a      	lsls	r2, r3, #5
 80098e6:	6a3b      	ldr	r3, [r7, #32]
 80098e8:	4413      	add	r3, r2
 80098ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	7e7b      	ldrb	r3, [r7, #25]
 80098f2:	075b      	lsls	r3, r3, #29
 80098f4:	69f9      	ldr	r1, [r7, #28]
 80098f6:	0148      	lsls	r0, r1, #5
 80098f8:	6a39      	ldr	r1, [r7, #32]
 80098fa:	4401      	add	r1, r0
 80098fc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009900:	4313      	orrs	r3, r2
 8009902:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	015a      	lsls	r2, r3, #5
 8009908:	6a3b      	ldr	r3, [r7, #32]
 800990a:	4413      	add	r3, r2
 800990c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800991a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	78db      	ldrb	r3, [r3, #3]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d004      	beq.n	800992e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800992a:	613b      	str	r3, [r7, #16]
 800992c:	e003      	b.n	8009936 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009934:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800993c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	6a3b      	ldr	r3, [r7, #32]
 8009944:	4413      	add	r3, r2
 8009946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800994a:	461a      	mov	r2, r3
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009950:	79fb      	ldrb	r3, [r7, #7]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	e04e      	b.n	80099f8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	78db      	ldrb	r3, [r3, #3]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d149      	bne.n	80099f6 <USB_HC_StartXfer+0x276>
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	695b      	ldr	r3, [r3, #20]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d045      	beq.n	80099f6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	79db      	ldrb	r3, [r3, #7]
 800996e:	2b03      	cmp	r3, #3
 8009970:	d830      	bhi.n	80099d4 <USB_HC_StartXfer+0x254>
 8009972:	a201      	add	r2, pc, #4	; (adr r2, 8009978 <USB_HC_StartXfer+0x1f8>)
 8009974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009978:	08009989 	.word	0x08009989
 800997c:	080099ad 	.word	0x080099ad
 8009980:	08009989 	.word	0x08009989
 8009984:	080099ad 	.word	0x080099ad
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	695b      	ldr	r3, [r3, #20]
 800998c:	3303      	adds	r3, #3
 800998e:	089b      	lsrs	r3, r3, #2
 8009990:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009992:	8afa      	ldrh	r2, [r7, #22]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009998:	b29b      	uxth	r3, r3
 800999a:	429a      	cmp	r2, r3
 800999c:	d91c      	bls.n	80099d8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	f043 0220 	orr.w	r2, r3, #32
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80099aa:	e015      	b.n	80099d8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	695b      	ldr	r3, [r3, #20]
 80099b0:	3303      	adds	r3, #3
 80099b2:	089b      	lsrs	r3, r3, #2
 80099b4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80099b6:	8afa      	ldrh	r2, [r7, #22]
 80099b8:	6a3b      	ldr	r3, [r7, #32]
 80099ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d90a      	bls.n	80099dc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	699b      	ldr	r3, [r3, #24]
 80099ca:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80099d2:	e003      	b.n	80099dc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80099d4:	bf00      	nop
 80099d6:	e002      	b.n	80099de <USB_HC_StartXfer+0x25e>
        break;
 80099d8:	bf00      	nop
 80099da:	e000      	b.n	80099de <USB_HC_StartXfer+0x25e>
        break;
 80099dc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	68d9      	ldr	r1, [r3, #12]
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	785a      	ldrb	r2, [r3, #1]
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	2000      	movs	r0, #0
 80099ee:	9000      	str	r0, [sp, #0]
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f7ff fb53 	bl	800909c <USB_WritePacket>
  }

  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3728      	adds	r7, #40	; 0x28
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	1ff80000 	.word	0x1ff80000

08009a04 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a16:	695b      	ldr	r3, [r3, #20]
 8009a18:	b29b      	uxth	r3, r3
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3714      	adds	r7, #20
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr

08009a26 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009a26:	b480      	push	{r7}
 8009a28:	b089      	sub	sp, #36	; 0x24
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	460b      	mov	r3, r1
 8009a30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8009a36:	78fb      	ldrb	r3, [r7, #3]
 8009a38:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	015a      	lsls	r2, r3, #5
 8009a42:	69bb      	ldr	r3, [r7, #24]
 8009a44:	4413      	add	r3, r2
 8009a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	0c9b      	lsrs	r3, r3, #18
 8009a4e:	f003 0303 	and.w	r3, r3, #3
 8009a52:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	015a      	lsls	r2, r3, #5
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	0fdb      	lsrs	r3, r3, #31
 8009a64:	f003 0301 	and.w	r3, r3, #1
 8009a68:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	f003 0320 	and.w	r3, r3, #32
 8009a72:	2b20      	cmp	r3, #32
 8009a74:	d104      	bne.n	8009a80 <USB_HC_Halt+0x5a>
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d101      	bne.n	8009a80 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	e0e8      	b.n	8009c52 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d002      	beq.n	8009a8c <USB_HC_Halt+0x66>
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d173      	bne.n	8009b74 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	015a      	lsls	r2, r3, #5
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	4413      	add	r3, r2
 8009a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	697a      	ldr	r2, [r7, #20]
 8009a9c:	0151      	lsls	r1, r2, #5
 8009a9e:	69ba      	ldr	r2, [r7, #24]
 8009aa0:	440a      	add	r2, r1
 8009aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009aa6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009aaa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	f003 0320 	and.w	r3, r3, #32
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f040 80cb 	bne.w	8009c50 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d143      	bne.n	8009b4e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	015a      	lsls	r2, r3, #5
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	4413      	add	r3, r2
 8009ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	0151      	lsls	r1, r2, #5
 8009ad8:	69ba      	ldr	r2, [r7, #24]
 8009ada:	440a      	add	r2, r1
 8009adc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ae0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ae4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	015a      	lsls	r2, r3, #5
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	4413      	add	r3, r2
 8009aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	697a      	ldr	r2, [r7, #20]
 8009af6:	0151      	lsls	r1, r2, #5
 8009af8:	69ba      	ldr	r2, [r7, #24]
 8009afa:	440a      	add	r2, r1
 8009afc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b04:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	015a      	lsls	r2, r3, #5
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	697a      	ldr	r2, [r7, #20]
 8009b16:	0151      	lsls	r1, r2, #5
 8009b18:	69ba      	ldr	r2, [r7, #24]
 8009b1a:	440a      	add	r2, r1
 8009b1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b24:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	61fb      	str	r3, [r7, #28]
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b32:	d81d      	bhi.n	8009b70 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	015a      	lsls	r2, r3, #5
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b4a:	d0ec      	beq.n	8009b26 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009b4c:	e080      	b.n	8009c50 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	015a      	lsls	r2, r3, #5
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	4413      	add	r3, r2
 8009b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	697a      	ldr	r2, [r7, #20]
 8009b5e:	0151      	lsls	r1, r2, #5
 8009b60:	69ba      	ldr	r2, [r7, #24]
 8009b62:	440a      	add	r2, r1
 8009b64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b6c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009b6e:	e06f      	b.n	8009c50 <USB_HC_Halt+0x22a>
            break;
 8009b70:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009b72:	e06d      	b.n	8009c50 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	015a      	lsls	r2, r3, #5
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	697a      	ldr	r2, [r7, #20]
 8009b84:	0151      	lsls	r1, r2, #5
 8009b86:	69ba      	ldr	r2, [r7, #24]
 8009b88:	440a      	add	r2, r1
 8009b8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b92:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d143      	bne.n	8009c2c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	015a      	lsls	r2, r3, #5
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	4413      	add	r3, r2
 8009bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	697a      	ldr	r2, [r7, #20]
 8009bb4:	0151      	lsls	r1, r2, #5
 8009bb6:	69ba      	ldr	r2, [r7, #24]
 8009bb8:	440a      	add	r2, r1
 8009bba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bc2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	015a      	lsls	r2, r3, #5
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	4413      	add	r3, r2
 8009bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	0151      	lsls	r1, r2, #5
 8009bd6:	69ba      	ldr	r2, [r7, #24]
 8009bd8:	440a      	add	r2, r1
 8009bda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009be2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	015a      	lsls	r2, r3, #5
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	4413      	add	r3, r2
 8009bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	697a      	ldr	r2, [r7, #20]
 8009bf4:	0151      	lsls	r1, r2, #5
 8009bf6:	69ba      	ldr	r2, [r7, #24]
 8009bf8:	440a      	add	r2, r1
 8009bfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bfe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009c02:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	3301      	adds	r3, #1
 8009c08:	61fb      	str	r3, [r7, #28]
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c10:	d81d      	bhi.n	8009c4e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	015a      	lsls	r2, r3, #5
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	4413      	add	r3, r2
 8009c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c28:	d0ec      	beq.n	8009c04 <USB_HC_Halt+0x1de>
 8009c2a:	e011      	b.n	8009c50 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	015a      	lsls	r2, r3, #5
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	4413      	add	r3, r2
 8009c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	0151      	lsls	r1, r2, #5
 8009c3e:	69ba      	ldr	r2, [r7, #24]
 8009c40:	440a      	add	r2, r1
 8009c42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c4a:	6013      	str	r3, [r2, #0]
 8009c4c:	e000      	b.n	8009c50 <USB_HC_Halt+0x22a>
          break;
 8009c4e:	bf00      	nop
    }
  }

  return HAL_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3724      	adds	r7, #36	; 0x24
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
	...

08009c60 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b087      	sub	sp, #28
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	460b      	mov	r3, r1
 8009c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009c70:	78fb      	ldrb	r3, [r7, #3]
 8009c72:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009c74:	2301      	movs	r3, #1
 8009c76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	04da      	lsls	r2, r3, #19
 8009c7c:	4b15      	ldr	r3, [pc, #84]	; (8009cd4 <USB_DoPing+0x74>)
 8009c7e:	4013      	ands	r3, r2
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	0151      	lsls	r1, r2, #5
 8009c84:	697a      	ldr	r2, [r7, #20]
 8009c86:	440a      	add	r2, r1
 8009c88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c90:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	015a      	lsls	r2, r3, #5
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	4413      	add	r3, r2
 8009c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ca8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009cb0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	015a      	lsls	r2, r3, #5
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	4413      	add	r3, r2
 8009cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	371c      	adds	r7, #28
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	1ff80000 	.word	0x1ff80000

08009cd8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b086      	sub	sp, #24
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f7ff f935 	bl	8008f58 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009cee:	2110      	movs	r1, #16
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f7ff f98f 	bl	8009014 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f7ff f9b0 	bl	800905c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	613b      	str	r3, [r7, #16]
 8009d00:	e01f      	b.n	8009d42 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	015a      	lsls	r2, r3, #5
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	4413      	add	r3, r2
 8009d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d18:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d20:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d28:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	015a      	lsls	r2, r3, #5
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	4413      	add	r3, r2
 8009d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d36:	461a      	mov	r2, r3
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	613b      	str	r3, [r7, #16]
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	2b0f      	cmp	r3, #15
 8009d46:	d9dc      	bls.n	8009d02 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009d48:	2300      	movs	r3, #0
 8009d4a:	613b      	str	r3, [r7, #16]
 8009d4c:	e034      	b.n	8009db8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	015a      	lsls	r2, r3, #5
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	4413      	add	r3, r2
 8009d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d64:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d6c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d74:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	015a      	lsls	r2, r3, #5
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d82:	461a      	mov	r2, r3
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	617b      	str	r3, [r7, #20]
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d94:	d80c      	bhi.n	8009db0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	015a      	lsls	r2, r3, #5
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009da8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009dac:	d0ec      	beq.n	8009d88 <USB_StopHost+0xb0>
 8009dae:	e000      	b.n	8009db2 <USB_StopHost+0xda>
        break;
 8009db0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	3301      	adds	r3, #1
 8009db6:	613b      	str	r3, [r7, #16]
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	2b0f      	cmp	r3, #15
 8009dbc:	d9c7      	bls.n	8009d4e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009dca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f04f 32ff 	mov.w	r2, #4294967295
 8009dd2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f7ff f8ae 	bl	8008f36 <USB_EnableGlobalInt>

  return HAL_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3718      	adds	r7, #24
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8009de8:	4904      	ldr	r1, [pc, #16]	; (8009dfc <MX_FATFS_Init+0x18>)
 8009dea:	4805      	ldr	r0, [pc, #20]	; (8009e00 <MX_FATFS_Init+0x1c>)
 8009dec:	f006 fcdc 	bl	80107a8 <FATFS_LinkDriver>
 8009df0:	4603      	mov	r3, r0
 8009df2:	461a      	mov	r2, r3
 8009df4:	4b03      	ldr	r3, [pc, #12]	; (8009e04 <MX_FATFS_Init+0x20>)
 8009df6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009df8:	bf00      	nop
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	2000559c 	.word	0x2000559c
 8009e00:	08095240 	.word	0x08095240
 8009e04:	20007604 	.word	0x20007604

08009e08 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009e0c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	4603      	mov	r3, r0
 8009e20:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	4603      	mov	r3, r0
 8009e38:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8009e3e:	79fb      	ldrb	r3, [r7, #7]
 8009e40:	4619      	mov	r1, r3
 8009e42:	4808      	ldr	r0, [pc, #32]	; (8009e64 <USBH_status+0x34>)
 8009e44:	f001 fc6a 	bl	800b71c <USBH_MSC_UnitIsReady>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d002      	beq.n	8009e54 <USBH_status+0x24>
  {
    res = RES_OK;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	73fb      	strb	r3, [r7, #15]
 8009e52:	e001      	b.n	8009e58 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	2000dc9c 	.word	0x2000dc9c

08009e68 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b094      	sub	sp, #80	; 0x50
 8009e6c:	af02      	add	r7, sp, #8
 8009e6e:	60b9      	str	r1, [r7, #8]
 8009e70:	607a      	str	r2, [r7, #4]
 8009e72:	603b      	str	r3, [r7, #0]
 8009e74:	4603      	mov	r3, r0
 8009e76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8009e7e:	7bf9      	ldrb	r1, [r7, #15]
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	4818      	ldr	r0, [pc, #96]	; (8009eec <USBH_read+0x84>)
 8009e8a:	f001 fc91 	bl	800b7b0 <USBH_MSC_Read>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d103      	bne.n	8009e9c <USBH_read+0x34>
  {
    res = RES_OK;
 8009e94:	2300      	movs	r3, #0
 8009e96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009e9a:	e020      	b.n	8009ede <USBH_read+0x76>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009e9c:	f107 0210 	add.w	r2, r7, #16
 8009ea0:	7bfb      	ldrb	r3, [r7, #15]
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	4811      	ldr	r0, [pc, #68]	; (8009eec <USBH_read+0x84>)
 8009ea6:	f001 fc5f 	bl	800b768 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009eaa:	7f7b      	ldrb	r3, [r7, #29]
 8009eac:	2b3a      	cmp	r3, #58	; 0x3a
 8009eae:	d005      	beq.n	8009ebc <USBH_read+0x54>
 8009eb0:	2b3a      	cmp	r3, #58	; 0x3a
 8009eb2:	dc10      	bgt.n	8009ed6 <USBH_read+0x6e>
 8009eb4:	2b04      	cmp	r3, #4
 8009eb6:	d001      	beq.n	8009ebc <USBH_read+0x54>
 8009eb8:	2b28      	cmp	r3, #40	; 0x28
 8009eba:	d10c      	bne.n	8009ed6 <USBH_read+0x6e>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
 8009ebc:	480c      	ldr	r0, [pc, #48]	; (8009ef0 <USBH_read+0x88>)
 8009ebe:	f010 fcf3 	bl	801a8a8 <iprintf>
 8009ec2:	480c      	ldr	r0, [pc, #48]	; (8009ef4 <USBH_read+0x8c>)
 8009ec4:	f010 fcf0 	bl	801a8a8 <iprintf>
 8009ec8:	200a      	movs	r0, #10
 8009eca:	f010 fd05 	bl	801a8d8 <putchar>
      res = RES_NOTRDY;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009ed4:	e003      	b.n	8009ede <USBH_read+0x76>

    default:
      res = RES_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009edc:	bf00      	nop
    }
  }

  return res;
 8009ede:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3748      	adds	r7, #72	; 0x48
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	2000dc9c 	.word	0x2000dc9c
 8009ef0:	0801b870 	.word	0x0801b870
 8009ef4:	0801b878 	.word	0x0801b878

08009ef8 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b094      	sub	sp, #80	; 0x50
 8009efc:	af02      	add	r7, sp, #8
 8009efe:	60b9      	str	r1, [r7, #8]
 8009f00:	607a      	str	r2, [r7, #4]
 8009f02:	603b      	str	r3, [r7, #0]
 8009f04:	4603      	mov	r3, r0
 8009f06:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8009f0e:	7bf9      	ldrb	r1, [r7, #15]
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	9300      	str	r3, [sp, #0]
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	4820      	ldr	r0, [pc, #128]	; (8009f9c <USBH_write+0xa4>)
 8009f1a:	f001 fcb2 	bl	800b882 <USBH_MSC_Write>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d103      	bne.n	8009f2c <USBH_write+0x34>
  {
    res = RES_OK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009f2a:	e031      	b.n	8009f90 <USBH_write+0x98>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009f2c:	f107 0210 	add.w	r2, r7, #16
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
 8009f32:	4619      	mov	r1, r3
 8009f34:	4819      	ldr	r0, [pc, #100]	; (8009f9c <USBH_write+0xa4>)
 8009f36:	f001 fc17 	bl	800b768 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009f3a:	7f7b      	ldrb	r3, [r7, #29]
 8009f3c:	2b3a      	cmp	r3, #58	; 0x3a
 8009f3e:	d016      	beq.n	8009f6e <USBH_write+0x76>
 8009f40:	2b3a      	cmp	r3, #58	; 0x3a
 8009f42:	dc21      	bgt.n	8009f88 <USBH_write+0x90>
 8009f44:	2b28      	cmp	r3, #40	; 0x28
 8009f46:	d012      	beq.n	8009f6e <USBH_write+0x76>
 8009f48:	2b28      	cmp	r3, #40	; 0x28
 8009f4a:	dc1d      	bgt.n	8009f88 <USBH_write+0x90>
 8009f4c:	2b04      	cmp	r3, #4
 8009f4e:	d00e      	beq.n	8009f6e <USBH_write+0x76>
 8009f50:	2b27      	cmp	r3, #39	; 0x27
 8009f52:	d119      	bne.n	8009f88 <USBH_write+0x90>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
 8009f54:	4812      	ldr	r0, [pc, #72]	; (8009fa0 <USBH_write+0xa8>)
 8009f56:	f010 fca7 	bl	801a8a8 <iprintf>
 8009f5a:	4812      	ldr	r0, [pc, #72]	; (8009fa4 <USBH_write+0xac>)
 8009f5c:	f010 fca4 	bl	801a8a8 <iprintf>
 8009f60:	200a      	movs	r0, #10
 8009f62:	f010 fcb9 	bl	801a8d8 <putchar>
      res = RES_WRPRT;
 8009f66:	2302      	movs	r3, #2
 8009f68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009f6c:	e010      	b.n	8009f90 <USBH_write+0x98>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
 8009f6e:	480c      	ldr	r0, [pc, #48]	; (8009fa0 <USBH_write+0xa8>)
 8009f70:	f010 fc9a 	bl	801a8a8 <iprintf>
 8009f74:	480c      	ldr	r0, [pc, #48]	; (8009fa8 <USBH_write+0xb0>)
 8009f76:	f010 fc97 	bl	801a8a8 <iprintf>
 8009f7a:	200a      	movs	r0, #10
 8009f7c:	f010 fcac 	bl	801a8d8 <putchar>
      res = RES_NOTRDY;
 8009f80:	2303      	movs	r3, #3
 8009f82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009f86:	e003      	b.n	8009f90 <USBH_write+0x98>

    default:
      res = RES_ERROR;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009f8e:	bf00      	nop
    }
  }

  return res;
 8009f90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3748      	adds	r7, #72	; 0x48
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	2000dc9c 	.word	0x2000dc9c
 8009fa0:	0801b870 	.word	0x0801b870
 8009fa4:	0801b890 	.word	0x0801b890
 8009fa8:	0801b878 	.word	0x0801b878

08009fac <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b090      	sub	sp, #64	; 0x40
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	603a      	str	r2, [r7, #0]
 8009fb6:	71fb      	strb	r3, [r7, #7]
 8009fb8:	460b      	mov	r3, r1
 8009fba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8009fc2:	79bb      	ldrb	r3, [r7, #6]
 8009fc4:	2b03      	cmp	r3, #3
 8009fc6:	d852      	bhi.n	800a06e <USBH_ioctl+0xc2>
 8009fc8:	a201      	add	r2, pc, #4	; (adr r2, 8009fd0 <USBH_ioctl+0x24>)
 8009fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fce:	bf00      	nop
 8009fd0:	08009fe1 	.word	0x08009fe1
 8009fd4:	08009fe9 	.word	0x08009fe9
 8009fd8:	0800a013 	.word	0x0800a013
 8009fdc:	0800a03f 	.word	0x0800a03f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009fe6:	e045      	b.n	800a074 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009fe8:	f107 0208 	add.w	r2, r7, #8
 8009fec:	79fb      	ldrb	r3, [r7, #7]
 8009fee:	4619      	mov	r1, r3
 8009ff0:	4823      	ldr	r0, [pc, #140]	; (800a080 <USBH_ioctl+0xd4>)
 8009ff2:	f001 fbb9 	bl	800b768 <USBH_MSC_GetLUNInfo>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d106      	bne.n	800a00a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a002:	2300      	movs	r3, #0
 800a004:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a008:	e034      	b.n	800a074 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a010:	e030      	b.n	800a074 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a012:	f107 0208 	add.w	r2, r7, #8
 800a016:	79fb      	ldrb	r3, [r7, #7]
 800a018:	4619      	mov	r1, r3
 800a01a:	4819      	ldr	r0, [pc, #100]	; (800a080 <USBH_ioctl+0xd4>)
 800a01c:	f001 fba4 	bl	800b768 <USBH_MSC_GetLUNInfo>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d107      	bne.n	800a036 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800a026:	8a3b      	ldrh	r3, [r7, #16]
 800a028:	461a      	mov	r2, r3
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a034:	e01e      	b.n	800a074 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a036:	2301      	movs	r3, #1
 800a038:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a03c:	e01a      	b.n	800a074 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a03e:	f107 0208 	add.w	r2, r7, #8
 800a042:	79fb      	ldrb	r3, [r7, #7]
 800a044:	4619      	mov	r1, r3
 800a046:	480e      	ldr	r0, [pc, #56]	; (800a080 <USBH_ioctl+0xd4>)
 800a048:	f001 fb8e 	bl	800b768 <USBH_MSC_GetLUNInfo>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d109      	bne.n	800a066 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800a052:	8a3b      	ldrh	r3, [r7, #16]
 800a054:	0a5b      	lsrs	r3, r3, #9
 800a056:	b29b      	uxth	r3, r3
 800a058:	461a      	mov	r2, r3
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a05e:	2300      	movs	r3, #0
 800a060:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a064:	e006      	b.n	800a074 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a06c:	e002      	b.n	800a074 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800a06e:	2304      	movs	r3, #4
 800a070:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800a074:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3740      	adds	r7, #64	; 0x40
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	2000dc9c 	.word	0x2000dc9c

0800a084 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800a08a:	4b8d      	ldr	r3, [pc, #564]	; (800a2c0 <MX_LWIP_Init+0x23c>)
 800a08c:	22c0      	movs	r2, #192	; 0xc0
 800a08e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800a090:	4b8b      	ldr	r3, [pc, #556]	; (800a2c0 <MX_LWIP_Init+0x23c>)
 800a092:	22a8      	movs	r2, #168	; 0xa8
 800a094:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800a096:	4b8a      	ldr	r3, [pc, #552]	; (800a2c0 <MX_LWIP_Init+0x23c>)
 800a098:	2201      	movs	r2, #1
 800a09a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 200;
 800a09c:	4b88      	ldr	r3, [pc, #544]	; (800a2c0 <MX_LWIP_Init+0x23c>)
 800a09e:	22c8      	movs	r2, #200	; 0xc8
 800a0a0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a0a2:	4b88      	ldr	r3, [pc, #544]	; (800a2c4 <MX_LWIP_Init+0x240>)
 800a0a4:	22ff      	movs	r2, #255	; 0xff
 800a0a6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a0a8:	4b86      	ldr	r3, [pc, #536]	; (800a2c4 <MX_LWIP_Init+0x240>)
 800a0aa:	22ff      	movs	r2, #255	; 0xff
 800a0ac:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a0ae:	4b85      	ldr	r3, [pc, #532]	; (800a2c4 <MX_LWIP_Init+0x240>)
 800a0b0:	22ff      	movs	r2, #255	; 0xff
 800a0b2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a0b4:	4b83      	ldr	r3, [pc, #524]	; (800a2c4 <MX_LWIP_Init+0x240>)
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800a0ba:	4b83      	ldr	r3, [pc, #524]	; (800a2c8 <MX_LWIP_Init+0x244>)
 800a0bc:	22c0      	movs	r2, #192	; 0xc0
 800a0be:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800a0c0:	4b81      	ldr	r3, [pc, #516]	; (800a2c8 <MX_LWIP_Init+0x244>)
 800a0c2:	22a8      	movs	r2, #168	; 0xa8
 800a0c4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800a0c6:	4b80      	ldr	r3, [pc, #512]	; (800a2c8 <MX_LWIP_Init+0x244>)
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800a0cc:	4b7e      	ldr	r3, [pc, #504]	; (800a2c8 <MX_LWIP_Init+0x244>)
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800a0d2:	f006 fba6 	bl	8010822 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a0d6:	4b7a      	ldr	r3, [pc, #488]	; (800a2c0 <MX_LWIP_Init+0x23c>)
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	061a      	lsls	r2, r3, #24
 800a0dc:	4b78      	ldr	r3, [pc, #480]	; (800a2c0 <MX_LWIP_Init+0x23c>)
 800a0de:	785b      	ldrb	r3, [r3, #1]
 800a0e0:	041b      	lsls	r3, r3, #16
 800a0e2:	431a      	orrs	r2, r3
 800a0e4:	4b76      	ldr	r3, [pc, #472]	; (800a2c0 <MX_LWIP_Init+0x23c>)
 800a0e6:	789b      	ldrb	r3, [r3, #2]
 800a0e8:	021b      	lsls	r3, r3, #8
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	4a74      	ldr	r2, [pc, #464]	; (800a2c0 <MX_LWIP_Init+0x23c>)
 800a0ee:	78d2      	ldrb	r2, [r2, #3]
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	061a      	lsls	r2, r3, #24
 800a0f4:	4b72      	ldr	r3, [pc, #456]	; (800a2c0 <MX_LWIP_Init+0x23c>)
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	0619      	lsls	r1, r3, #24
 800a0fa:	4b71      	ldr	r3, [pc, #452]	; (800a2c0 <MX_LWIP_Init+0x23c>)
 800a0fc:	785b      	ldrb	r3, [r3, #1]
 800a0fe:	041b      	lsls	r3, r3, #16
 800a100:	4319      	orrs	r1, r3
 800a102:	4b6f      	ldr	r3, [pc, #444]	; (800a2c0 <MX_LWIP_Init+0x23c>)
 800a104:	789b      	ldrb	r3, [r3, #2]
 800a106:	021b      	lsls	r3, r3, #8
 800a108:	430b      	orrs	r3, r1
 800a10a:	496d      	ldr	r1, [pc, #436]	; (800a2c0 <MX_LWIP_Init+0x23c>)
 800a10c:	78c9      	ldrb	r1, [r1, #3]
 800a10e:	430b      	orrs	r3, r1
 800a110:	021b      	lsls	r3, r3, #8
 800a112:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a116:	431a      	orrs	r2, r3
 800a118:	4b69      	ldr	r3, [pc, #420]	; (800a2c0 <MX_LWIP_Init+0x23c>)
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	0619      	lsls	r1, r3, #24
 800a11e:	4b68      	ldr	r3, [pc, #416]	; (800a2c0 <MX_LWIP_Init+0x23c>)
 800a120:	785b      	ldrb	r3, [r3, #1]
 800a122:	041b      	lsls	r3, r3, #16
 800a124:	4319      	orrs	r1, r3
 800a126:	4b66      	ldr	r3, [pc, #408]	; (800a2c0 <MX_LWIP_Init+0x23c>)
 800a128:	789b      	ldrb	r3, [r3, #2]
 800a12a:	021b      	lsls	r3, r3, #8
 800a12c:	430b      	orrs	r3, r1
 800a12e:	4964      	ldr	r1, [pc, #400]	; (800a2c0 <MX_LWIP_Init+0x23c>)
 800a130:	78c9      	ldrb	r1, [r1, #3]
 800a132:	430b      	orrs	r3, r1
 800a134:	0a1b      	lsrs	r3, r3, #8
 800a136:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a13a:	431a      	orrs	r2, r3
 800a13c:	4b60      	ldr	r3, [pc, #384]	; (800a2c0 <MX_LWIP_Init+0x23c>)
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	0619      	lsls	r1, r3, #24
 800a142:	4b5f      	ldr	r3, [pc, #380]	; (800a2c0 <MX_LWIP_Init+0x23c>)
 800a144:	785b      	ldrb	r3, [r3, #1]
 800a146:	041b      	lsls	r3, r3, #16
 800a148:	4319      	orrs	r1, r3
 800a14a:	4b5d      	ldr	r3, [pc, #372]	; (800a2c0 <MX_LWIP_Init+0x23c>)
 800a14c:	789b      	ldrb	r3, [r3, #2]
 800a14e:	021b      	lsls	r3, r3, #8
 800a150:	430b      	orrs	r3, r1
 800a152:	495b      	ldr	r1, [pc, #364]	; (800a2c0 <MX_LWIP_Init+0x23c>)
 800a154:	78c9      	ldrb	r1, [r1, #3]
 800a156:	430b      	orrs	r3, r1
 800a158:	0e1b      	lsrs	r3, r3, #24
 800a15a:	4313      	orrs	r3, r2
 800a15c:	4a5b      	ldr	r2, [pc, #364]	; (800a2cc <MX_LWIP_Init+0x248>)
 800a15e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a160:	4b58      	ldr	r3, [pc, #352]	; (800a2c4 <MX_LWIP_Init+0x240>)
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	061a      	lsls	r2, r3, #24
 800a166:	4b57      	ldr	r3, [pc, #348]	; (800a2c4 <MX_LWIP_Init+0x240>)
 800a168:	785b      	ldrb	r3, [r3, #1]
 800a16a:	041b      	lsls	r3, r3, #16
 800a16c:	431a      	orrs	r2, r3
 800a16e:	4b55      	ldr	r3, [pc, #340]	; (800a2c4 <MX_LWIP_Init+0x240>)
 800a170:	789b      	ldrb	r3, [r3, #2]
 800a172:	021b      	lsls	r3, r3, #8
 800a174:	4313      	orrs	r3, r2
 800a176:	4a53      	ldr	r2, [pc, #332]	; (800a2c4 <MX_LWIP_Init+0x240>)
 800a178:	78d2      	ldrb	r2, [r2, #3]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	061a      	lsls	r2, r3, #24
 800a17e:	4b51      	ldr	r3, [pc, #324]	; (800a2c4 <MX_LWIP_Init+0x240>)
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	0619      	lsls	r1, r3, #24
 800a184:	4b4f      	ldr	r3, [pc, #316]	; (800a2c4 <MX_LWIP_Init+0x240>)
 800a186:	785b      	ldrb	r3, [r3, #1]
 800a188:	041b      	lsls	r3, r3, #16
 800a18a:	4319      	orrs	r1, r3
 800a18c:	4b4d      	ldr	r3, [pc, #308]	; (800a2c4 <MX_LWIP_Init+0x240>)
 800a18e:	789b      	ldrb	r3, [r3, #2]
 800a190:	021b      	lsls	r3, r3, #8
 800a192:	430b      	orrs	r3, r1
 800a194:	494b      	ldr	r1, [pc, #300]	; (800a2c4 <MX_LWIP_Init+0x240>)
 800a196:	78c9      	ldrb	r1, [r1, #3]
 800a198:	430b      	orrs	r3, r1
 800a19a:	021b      	lsls	r3, r3, #8
 800a19c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a1a0:	431a      	orrs	r2, r3
 800a1a2:	4b48      	ldr	r3, [pc, #288]	; (800a2c4 <MX_LWIP_Init+0x240>)
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	0619      	lsls	r1, r3, #24
 800a1a8:	4b46      	ldr	r3, [pc, #280]	; (800a2c4 <MX_LWIP_Init+0x240>)
 800a1aa:	785b      	ldrb	r3, [r3, #1]
 800a1ac:	041b      	lsls	r3, r3, #16
 800a1ae:	4319      	orrs	r1, r3
 800a1b0:	4b44      	ldr	r3, [pc, #272]	; (800a2c4 <MX_LWIP_Init+0x240>)
 800a1b2:	789b      	ldrb	r3, [r3, #2]
 800a1b4:	021b      	lsls	r3, r3, #8
 800a1b6:	430b      	orrs	r3, r1
 800a1b8:	4942      	ldr	r1, [pc, #264]	; (800a2c4 <MX_LWIP_Init+0x240>)
 800a1ba:	78c9      	ldrb	r1, [r1, #3]
 800a1bc:	430b      	orrs	r3, r1
 800a1be:	0a1b      	lsrs	r3, r3, #8
 800a1c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a1c4:	431a      	orrs	r2, r3
 800a1c6:	4b3f      	ldr	r3, [pc, #252]	; (800a2c4 <MX_LWIP_Init+0x240>)
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	0619      	lsls	r1, r3, #24
 800a1cc:	4b3d      	ldr	r3, [pc, #244]	; (800a2c4 <MX_LWIP_Init+0x240>)
 800a1ce:	785b      	ldrb	r3, [r3, #1]
 800a1d0:	041b      	lsls	r3, r3, #16
 800a1d2:	4319      	orrs	r1, r3
 800a1d4:	4b3b      	ldr	r3, [pc, #236]	; (800a2c4 <MX_LWIP_Init+0x240>)
 800a1d6:	789b      	ldrb	r3, [r3, #2]
 800a1d8:	021b      	lsls	r3, r3, #8
 800a1da:	430b      	orrs	r3, r1
 800a1dc:	4939      	ldr	r1, [pc, #228]	; (800a2c4 <MX_LWIP_Init+0x240>)
 800a1de:	78c9      	ldrb	r1, [r1, #3]
 800a1e0:	430b      	orrs	r3, r1
 800a1e2:	0e1b      	lsrs	r3, r3, #24
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	4a3a      	ldr	r2, [pc, #232]	; (800a2d0 <MX_LWIP_Init+0x24c>)
 800a1e8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a1ea:	4b37      	ldr	r3, [pc, #220]	; (800a2c8 <MX_LWIP_Init+0x244>)
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	061a      	lsls	r2, r3, #24
 800a1f0:	4b35      	ldr	r3, [pc, #212]	; (800a2c8 <MX_LWIP_Init+0x244>)
 800a1f2:	785b      	ldrb	r3, [r3, #1]
 800a1f4:	041b      	lsls	r3, r3, #16
 800a1f6:	431a      	orrs	r2, r3
 800a1f8:	4b33      	ldr	r3, [pc, #204]	; (800a2c8 <MX_LWIP_Init+0x244>)
 800a1fa:	789b      	ldrb	r3, [r3, #2]
 800a1fc:	021b      	lsls	r3, r3, #8
 800a1fe:	4313      	orrs	r3, r2
 800a200:	4a31      	ldr	r2, [pc, #196]	; (800a2c8 <MX_LWIP_Init+0x244>)
 800a202:	78d2      	ldrb	r2, [r2, #3]
 800a204:	4313      	orrs	r3, r2
 800a206:	061a      	lsls	r2, r3, #24
 800a208:	4b2f      	ldr	r3, [pc, #188]	; (800a2c8 <MX_LWIP_Init+0x244>)
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	0619      	lsls	r1, r3, #24
 800a20e:	4b2e      	ldr	r3, [pc, #184]	; (800a2c8 <MX_LWIP_Init+0x244>)
 800a210:	785b      	ldrb	r3, [r3, #1]
 800a212:	041b      	lsls	r3, r3, #16
 800a214:	4319      	orrs	r1, r3
 800a216:	4b2c      	ldr	r3, [pc, #176]	; (800a2c8 <MX_LWIP_Init+0x244>)
 800a218:	789b      	ldrb	r3, [r3, #2]
 800a21a:	021b      	lsls	r3, r3, #8
 800a21c:	430b      	orrs	r3, r1
 800a21e:	492a      	ldr	r1, [pc, #168]	; (800a2c8 <MX_LWIP_Init+0x244>)
 800a220:	78c9      	ldrb	r1, [r1, #3]
 800a222:	430b      	orrs	r3, r1
 800a224:	021b      	lsls	r3, r3, #8
 800a226:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a22a:	431a      	orrs	r2, r3
 800a22c:	4b26      	ldr	r3, [pc, #152]	; (800a2c8 <MX_LWIP_Init+0x244>)
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	0619      	lsls	r1, r3, #24
 800a232:	4b25      	ldr	r3, [pc, #148]	; (800a2c8 <MX_LWIP_Init+0x244>)
 800a234:	785b      	ldrb	r3, [r3, #1]
 800a236:	041b      	lsls	r3, r3, #16
 800a238:	4319      	orrs	r1, r3
 800a23a:	4b23      	ldr	r3, [pc, #140]	; (800a2c8 <MX_LWIP_Init+0x244>)
 800a23c:	789b      	ldrb	r3, [r3, #2]
 800a23e:	021b      	lsls	r3, r3, #8
 800a240:	430b      	orrs	r3, r1
 800a242:	4921      	ldr	r1, [pc, #132]	; (800a2c8 <MX_LWIP_Init+0x244>)
 800a244:	78c9      	ldrb	r1, [r1, #3]
 800a246:	430b      	orrs	r3, r1
 800a248:	0a1b      	lsrs	r3, r3, #8
 800a24a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a24e:	431a      	orrs	r2, r3
 800a250:	4b1d      	ldr	r3, [pc, #116]	; (800a2c8 <MX_LWIP_Init+0x244>)
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	0619      	lsls	r1, r3, #24
 800a256:	4b1c      	ldr	r3, [pc, #112]	; (800a2c8 <MX_LWIP_Init+0x244>)
 800a258:	785b      	ldrb	r3, [r3, #1]
 800a25a:	041b      	lsls	r3, r3, #16
 800a25c:	4319      	orrs	r1, r3
 800a25e:	4b1a      	ldr	r3, [pc, #104]	; (800a2c8 <MX_LWIP_Init+0x244>)
 800a260:	789b      	ldrb	r3, [r3, #2]
 800a262:	021b      	lsls	r3, r3, #8
 800a264:	430b      	orrs	r3, r1
 800a266:	4918      	ldr	r1, [pc, #96]	; (800a2c8 <MX_LWIP_Init+0x244>)
 800a268:	78c9      	ldrb	r1, [r1, #3]
 800a26a:	430b      	orrs	r3, r1
 800a26c:	0e1b      	lsrs	r3, r3, #24
 800a26e:	4313      	orrs	r3, r2
 800a270:	4a18      	ldr	r2, [pc, #96]	; (800a2d4 <MX_LWIP_Init+0x250>)
 800a272:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800a274:	4b18      	ldr	r3, [pc, #96]	; (800a2d8 <MX_LWIP_Init+0x254>)
 800a276:	9302      	str	r3, [sp, #8]
 800a278:	4b18      	ldr	r3, [pc, #96]	; (800a2dc <MX_LWIP_Init+0x258>)
 800a27a:	9301      	str	r3, [sp, #4]
 800a27c:	2300      	movs	r3, #0
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	4b14      	ldr	r3, [pc, #80]	; (800a2d4 <MX_LWIP_Init+0x250>)
 800a282:	4a13      	ldr	r2, [pc, #76]	; (800a2d0 <MX_LWIP_Init+0x24c>)
 800a284:	4911      	ldr	r1, [pc, #68]	; (800a2cc <MX_LWIP_Init+0x248>)
 800a286:	4816      	ldr	r0, [pc, #88]	; (800a2e0 <MX_LWIP_Init+0x25c>)
 800a288:	f006 ff70 	bl	801116c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a28c:	4814      	ldr	r0, [pc, #80]	; (800a2e0 <MX_LWIP_Init+0x25c>)
 800a28e:	f007 f91f 	bl	80114d0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a292:	4b13      	ldr	r3, [pc, #76]	; (800a2e0 <MX_LWIP_Init+0x25c>)
 800a294:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a298:	089b      	lsrs	r3, r3, #2
 800a29a:	f003 0301 	and.w	r3, r3, #1
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d003      	beq.n	800a2ac <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a2a4:	480e      	ldr	r0, [pc, #56]	; (800a2e0 <MX_LWIP_Init+0x25c>)
 800a2a6:	f007 f923 	bl	80114f0 <netif_set_up>
 800a2aa:	e002      	b.n	800a2b2 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800a2ac:	480c      	ldr	r0, [pc, #48]	; (800a2e0 <MX_LWIP_Init+0x25c>)
 800a2ae:	f007 f98b 	bl	80115c8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800a2b2:	490c      	ldr	r1, [pc, #48]	; (800a2e4 <MX_LWIP_Init+0x260>)
 800a2b4:	480a      	ldr	r0, [pc, #40]	; (800a2e0 <MX_LWIP_Init+0x25c>)
 800a2b6:	f007 f9b9 	bl	801162c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a2ba:	bf00      	nop
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	20007648 	.word	0x20007648
 800a2c4:	20007644 	.word	0x20007644
 800a2c8:	20007608 	.word	0x20007608
 800a2cc:	20007640 	.word	0x20007640
 800a2d0:	2000764c 	.word	0x2000764c
 800a2d4:	20007650 	.word	0x20007650
 800a2d8:	08019ed5 	.word	0x08019ed5
 800a2dc:	0800a8b1 	.word	0x0800a8b1
 800a2e0:	2000760c 	.word	0x2000760c
 800a2e4:	0800a91d 	.word	0x0800a91d

0800a2e8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800a2ec:	4803      	ldr	r0, [pc, #12]	; (800a2fc <MX_LWIP_Process+0x14>)
 800a2ee:	f000 fabf 	bl	800a870 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800a2f2:	f00d fa09 	bl	8017708 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800a2f6:	bf00      	nop
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	2000760c 	.word	0x2000760c

0800a300 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b08e      	sub	sp, #56	; 0x38
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a30c:	2200      	movs	r2, #0
 800a30e:	601a      	str	r2, [r3, #0]
 800a310:	605a      	str	r2, [r3, #4]
 800a312:	609a      	str	r2, [r3, #8]
 800a314:	60da      	str	r2, [r3, #12]
 800a316:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a4a      	ldr	r2, [pc, #296]	; (800a448 <HAL_ETH_MspInit+0x148>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	f040 808d 	bne.w	800a43e <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a324:	2300      	movs	r3, #0
 800a326:	623b      	str	r3, [r7, #32]
 800a328:	4b48      	ldr	r3, [pc, #288]	; (800a44c <HAL_ETH_MspInit+0x14c>)
 800a32a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a32c:	4a47      	ldr	r2, [pc, #284]	; (800a44c <HAL_ETH_MspInit+0x14c>)
 800a32e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a332:	6313      	str	r3, [r2, #48]	; 0x30
 800a334:	4b45      	ldr	r3, [pc, #276]	; (800a44c <HAL_ETH_MspInit+0x14c>)
 800a336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a33c:	623b      	str	r3, [r7, #32]
 800a33e:	6a3b      	ldr	r3, [r7, #32]
 800a340:	2300      	movs	r3, #0
 800a342:	61fb      	str	r3, [r7, #28]
 800a344:	4b41      	ldr	r3, [pc, #260]	; (800a44c <HAL_ETH_MspInit+0x14c>)
 800a346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a348:	4a40      	ldr	r2, [pc, #256]	; (800a44c <HAL_ETH_MspInit+0x14c>)
 800a34a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a34e:	6313      	str	r3, [r2, #48]	; 0x30
 800a350:	4b3e      	ldr	r3, [pc, #248]	; (800a44c <HAL_ETH_MspInit+0x14c>)
 800a352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a354:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a358:	61fb      	str	r3, [r7, #28]
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	2300      	movs	r3, #0
 800a35e:	61bb      	str	r3, [r7, #24]
 800a360:	4b3a      	ldr	r3, [pc, #232]	; (800a44c <HAL_ETH_MspInit+0x14c>)
 800a362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a364:	4a39      	ldr	r2, [pc, #228]	; (800a44c <HAL_ETH_MspInit+0x14c>)
 800a366:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a36a:	6313      	str	r3, [r2, #48]	; 0x30
 800a36c:	4b37      	ldr	r3, [pc, #220]	; (800a44c <HAL_ETH_MspInit+0x14c>)
 800a36e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a374:	61bb      	str	r3, [r7, #24]
 800a376:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a378:	2300      	movs	r3, #0
 800a37a:	617b      	str	r3, [r7, #20]
 800a37c:	4b33      	ldr	r3, [pc, #204]	; (800a44c <HAL_ETH_MspInit+0x14c>)
 800a37e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a380:	4a32      	ldr	r2, [pc, #200]	; (800a44c <HAL_ETH_MspInit+0x14c>)
 800a382:	f043 0304 	orr.w	r3, r3, #4
 800a386:	6313      	str	r3, [r2, #48]	; 0x30
 800a388:	4b30      	ldr	r3, [pc, #192]	; (800a44c <HAL_ETH_MspInit+0x14c>)
 800a38a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a38c:	f003 0304 	and.w	r3, r3, #4
 800a390:	617b      	str	r3, [r7, #20]
 800a392:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a394:	2300      	movs	r3, #0
 800a396:	613b      	str	r3, [r7, #16]
 800a398:	4b2c      	ldr	r3, [pc, #176]	; (800a44c <HAL_ETH_MspInit+0x14c>)
 800a39a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a39c:	4a2b      	ldr	r2, [pc, #172]	; (800a44c <HAL_ETH_MspInit+0x14c>)
 800a39e:	f043 0301 	orr.w	r3, r3, #1
 800a3a2:	6313      	str	r3, [r2, #48]	; 0x30
 800a3a4:	4b29      	ldr	r3, [pc, #164]	; (800a44c <HAL_ETH_MspInit+0x14c>)
 800a3a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3a8:	f003 0301 	and.w	r3, r3, #1
 800a3ac:	613b      	str	r3, [r7, #16]
 800a3ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	60fb      	str	r3, [r7, #12]
 800a3b4:	4b25      	ldr	r3, [pc, #148]	; (800a44c <HAL_ETH_MspInit+0x14c>)
 800a3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b8:	4a24      	ldr	r2, [pc, #144]	; (800a44c <HAL_ETH_MspInit+0x14c>)
 800a3ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3be:	6313      	str	r3, [r2, #48]	; 0x30
 800a3c0:	4b22      	ldr	r3, [pc, #136]	; (800a44c <HAL_ETH_MspInit+0x14c>)
 800a3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3c8:	60fb      	str	r3, [r7, #12]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a3cc:	2332      	movs	r3, #50	; 0x32
 800a3ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3d0:	2302      	movs	r3, #2
 800a3d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3d8:	2303      	movs	r3, #3
 800a3da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a3dc:	230b      	movs	r3, #11
 800a3de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a3e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	481a      	ldr	r0, [pc, #104]	; (800a450 <HAL_ETH_MspInit+0x150>)
 800a3e8:	f7fa fa70 	bl	80048cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a3ec:	2386      	movs	r3, #134	; 0x86
 800a3ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3f0:	2302      	movs	r3, #2
 800a3f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a3fc:	230b      	movs	r3, #11
 800a3fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a404:	4619      	mov	r1, r3
 800a406:	4813      	ldr	r0, [pc, #76]	; (800a454 <HAL_ETH_MspInit+0x154>)
 800a408:	f7fa fa60 	bl	80048cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800a40c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800a410:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a412:	2302      	movs	r3, #2
 800a414:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a416:	2300      	movs	r3, #0
 800a418:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a41a:	2303      	movs	r3, #3
 800a41c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a41e:	230b      	movs	r3, #11
 800a420:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a426:	4619      	mov	r1, r3
 800a428:	480b      	ldr	r0, [pc, #44]	; (800a458 <HAL_ETH_MspInit+0x158>)
 800a42a:	f7fa fa4f 	bl	80048cc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800a42e:	2200      	movs	r2, #0
 800a430:	2100      	movs	r1, #0
 800a432:	203d      	movs	r0, #61	; 0x3d
 800a434:	f7f7 fb9f 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a438:	203d      	movs	r0, #61	; 0x3d
 800a43a:	f7f7 fbb8 	bl	8001bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a43e:	bf00      	nop
 800a440:	3738      	adds	r7, #56	; 0x38
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	40028000 	.word	0x40028000
 800a44c:	40023800 	.word	0x40023800
 800a450:	40020800 	.word	0x40020800
 800a454:	40020000 	.word	0x40020000
 800a458:	40021800 	.word	0x40021800

0800a45c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800a464:	2300      	movs	r3, #0
 800a466:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a468:	4b52      	ldr	r3, [pc, #328]	; (800a5b4 <low_level_init+0x158>)
 800a46a:	4a53      	ldr	r2, [pc, #332]	; (800a5b8 <low_level_init+0x15c>)
 800a46c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800a46e:	4b51      	ldr	r3, [pc, #324]	; (800a5b4 <low_level_init+0x158>)
 800a470:	2201      	movs	r2, #1
 800a472:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800a474:	4b4f      	ldr	r3, [pc, #316]	; (800a5b4 <low_level_init+0x158>)
 800a476:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a47a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800a47c:	4b4d      	ldr	r3, [pc, #308]	; (800a5b4 <low_level_init+0x158>)
 800a47e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a482:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 800a484:	4b4b      	ldr	r3, [pc, #300]	; (800a5b4 <low_level_init+0x158>)
 800a486:	2201      	movs	r2, #1
 800a488:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800a48a:	2300      	movs	r3, #0
 800a48c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800a48e:	2380      	movs	r3, #128	; 0x80
 800a490:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800a492:	23e1      	movs	r3, #225	; 0xe1
 800a494:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800a496:	2300      	movs	r3, #0
 800a498:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800a49a:	2300      	movs	r3, #0
 800a49c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a4a2:	4a44      	ldr	r2, [pc, #272]	; (800a5b4 <low_level_init+0x158>)
 800a4a4:	f107 0308 	add.w	r3, r7, #8
 800a4a8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800a4aa:	4b42      	ldr	r3, [pc, #264]	; (800a5b4 <low_level_init+0x158>)
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800a4b0:	4b40      	ldr	r3, [pc, #256]	; (800a5b4 <low_level_init+0x158>)
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800a4b6:	4b3f      	ldr	r3, [pc, #252]	; (800a5b4 <low_level_init+0x158>)
 800a4b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a4bc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a4be:	483d      	ldr	r0, [pc, #244]	; (800a5b4 <low_level_init+0x158>)
 800a4c0:	f7f9 f858 	bl	8003574 <HAL_ETH_Init>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800a4c8:	7dfb      	ldrb	r3, [r7, #23]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d108      	bne.n	800a4e0 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a4d4:	f043 0304 	orr.w	r3, r3, #4
 800a4d8:	b2da      	uxtb	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800a4e0:	2304      	movs	r3, #4
 800a4e2:	4a36      	ldr	r2, [pc, #216]	; (800a5bc <low_level_init+0x160>)
 800a4e4:	4936      	ldr	r1, [pc, #216]	; (800a5c0 <low_level_init+0x164>)
 800a4e6:	4833      	ldr	r0, [pc, #204]	; (800a5b4 <low_level_init+0x158>)
 800a4e8:	f7f9 f9e0 	bl	80038ac <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800a4ec:	2304      	movs	r3, #4
 800a4ee:	4a35      	ldr	r2, [pc, #212]	; (800a5c4 <low_level_init+0x168>)
 800a4f0:	4935      	ldr	r1, [pc, #212]	; (800a5c8 <low_level_init+0x16c>)
 800a4f2:	4830      	ldr	r0, [pc, #192]	; (800a5b4 <low_level_init+0x158>)
 800a4f4:	f7f9 fa43 	bl	800397e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2206      	movs	r2, #6
 800a4fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a500:	4b2c      	ldr	r3, [pc, #176]	; (800a5b4 <low_level_init+0x158>)
 800a502:	695b      	ldr	r3, [r3, #20]
 800a504:	781a      	ldrb	r2, [r3, #0]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a50c:	4b29      	ldr	r3, [pc, #164]	; (800a5b4 <low_level_init+0x158>)
 800a50e:	695b      	ldr	r3, [r3, #20]
 800a510:	785a      	ldrb	r2, [r3, #1]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a518:	4b26      	ldr	r3, [pc, #152]	; (800a5b4 <low_level_init+0x158>)
 800a51a:	695b      	ldr	r3, [r3, #20]
 800a51c:	789a      	ldrb	r2, [r3, #2]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a524:	4b23      	ldr	r3, [pc, #140]	; (800a5b4 <low_level_init+0x158>)
 800a526:	695b      	ldr	r3, [r3, #20]
 800a528:	78da      	ldrb	r2, [r3, #3]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a530:	4b20      	ldr	r3, [pc, #128]	; (800a5b4 <low_level_init+0x158>)
 800a532:	695b      	ldr	r3, [r3, #20]
 800a534:	791a      	ldrb	r2, [r3, #4]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a53c:	4b1d      	ldr	r3, [pc, #116]	; (800a5b4 <low_level_init+0x158>)
 800a53e:	695b      	ldr	r3, [r3, #20]
 800a540:	795a      	ldrb	r2, [r3, #5]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a54e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a556:	f043 030a 	orr.w	r3, r3, #10
 800a55a:	b2da      	uxtb	r2, r3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800a562:	4814      	ldr	r0, [pc, #80]	; (800a5b4 <low_level_init+0x158>)
 800a564:	f7f9 fd39 	bl	8003fda <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 800a568:	f107 0310 	add.w	r3, r7, #16
 800a56c:	461a      	mov	r2, r3
 800a56e:	2111      	movs	r1, #17
 800a570:	4810      	ldr	r0, [pc, #64]	; (800a5b4 <low_level_init+0x158>)
 800a572:	f7f9 fc64 	bl	8003e3e <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	f043 0303 	orr.w	r3, r3, #3
 800a57c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	461a      	mov	r2, r3
 800a582:	2111      	movs	r1, #17
 800a584:	480b      	ldr	r0, [pc, #44]	; (800a5b4 <low_level_init+0x158>)
 800a586:	f7f9 fcc2 	bl	8003f0e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 800a58a:	f107 0310 	add.w	r3, r7, #16
 800a58e:	461a      	mov	r2, r3
 800a590:	2112      	movs	r1, #18
 800a592:	4808      	ldr	r0, [pc, #32]	; (800a5b4 <low_level_init+0x158>)
 800a594:	f7f9 fc53 	bl	8003e3e <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	f043 0320 	orr.w	r3, r3, #32
 800a59e:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	2112      	movs	r1, #18
 800a5a6:	4803      	ldr	r0, [pc, #12]	; (800a5b4 <low_level_init+0x158>)
 800a5a8:	f7f9 fcb1 	bl	8003f0e <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a5ac:	bf00      	nop
 800a5ae:	3718      	adds	r7, #24
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	20008f24 	.word	0x20008f24
 800a5b8:	40028000 	.word	0x40028000
 800a5bc:	20008f6c 	.word	0x20008f6c
 800a5c0:	20007654 	.word	0x20007654
 800a5c4:	200076d4 	.word	0x200076d4
 800a5c8:	20008ea4 	.word	0x20008ea4

0800a5cc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b08a      	sub	sp, #40	; 0x28
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800a5d6:	4b4b      	ldr	r3, [pc, #300]	; (800a704 <low_level_output+0x138>)
 800a5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800a5ee:	4b45      	ldr	r3, [pc, #276]	; (800a704 <low_level_output+0x138>)
 800a5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	623b      	str	r3, [r7, #32]
 800a5fc:	e05a      	b.n	800a6b4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	da03      	bge.n	800a60e <low_level_output+0x42>
      {
        errval = ERR_USE;
 800a606:	23f8      	movs	r3, #248	; 0xf8
 800a608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800a60c:	e05c      	b.n	800a6c8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800a60e:	6a3b      	ldr	r3, [r7, #32]
 800a610:	895b      	ldrh	r3, [r3, #10]
 800a612:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800a614:	2300      	movs	r3, #0
 800a616:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a618:	e02f      	b.n	800a67a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800a61a:	69fa      	ldr	r2, [r7, #28]
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	18d0      	adds	r0, r2, r3
 800a620:	6a3b      	ldr	r3, [r7, #32]
 800a622:	685a      	ldr	r2, [r3, #4]
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	18d1      	adds	r1, r2, r3
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800a62e:	3304      	adds	r3, #4
 800a630:	461a      	mov	r2, r3
 800a632:	f010 f879 	bl	801a728 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	da03      	bge.n	800a64c <low_level_output+0x80>
        {
          errval = ERR_USE;
 800a644:	23f8      	movs	r3, #248	; 0xf8
 800a646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800a64a:	e03d      	b.n	800a6c8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800a652:	693a      	ldr	r2, [r7, #16]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	4413      	add	r3, r2
 800a658:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800a65c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	1ad3      	subs	r3, r2, r3
 800a664:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a668:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800a66a:	697a      	ldr	r2, [r7, #20]
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	1ad3      	subs	r3, r2, r3
 800a670:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a674:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800a676:	2300      	movs	r3, #0
 800a678:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a67a:	68fa      	ldr	r2, [r7, #12]
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	4413      	add	r3, r2
 800a680:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a684:	4293      	cmp	r3, r2
 800a686:	d8c8      	bhi.n	800a61a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800a688:	69fa      	ldr	r2, [r7, #28]
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	18d0      	adds	r0, r2, r3
 800a68e:	6a3b      	ldr	r3, [r7, #32]
 800a690:	685a      	ldr	r2, [r3, #4]
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	4413      	add	r3, r2
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	4619      	mov	r1, r3
 800a69a:	f010 f845 	bl	801a728 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800a69e:	693a      	ldr	r2, [r7, #16]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800a6a6:	697a      	ldr	r2, [r7, #20]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800a6ae:	6a3b      	ldr	r3, [r7, #32]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	623b      	str	r3, [r7, #32]
 800a6b4:	6a3b      	ldr	r3, [r7, #32]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1a1      	bne.n	800a5fe <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800a6ba:	6979      	ldr	r1, [r7, #20]
 800a6bc:	4811      	ldr	r0, [pc, #68]	; (800a704 <low_level_output+0x138>)
 800a6be:	f7f9 f9cb 	bl	8003a58 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800a6c8:	4b0e      	ldr	r3, [pc, #56]	; (800a704 <low_level_output+0x138>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6d0:	3314      	adds	r3, #20
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f003 0320 	and.w	r3, r3, #32
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00d      	beq.n	800a6f8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800a6dc:	4b09      	ldr	r3, [pc, #36]	; (800a704 <low_level_output+0x138>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6e4:	3314      	adds	r3, #20
 800a6e6:	2220      	movs	r2, #32
 800a6e8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800a6ea:	4b06      	ldr	r3, [pc, #24]	; (800a704 <low_level_output+0x138>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6f2:	3304      	adds	r3, #4
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800a6f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3728      	adds	r7, #40	; 0x28
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	20008f24 	.word	0x20008f24

0800a708 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b08c      	sub	sp, #48	; 0x30
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a710:	2300      	movs	r3, #0
 800a712:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800a714:	2300      	movs	r3, #0
 800a716:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800a718:	2300      	movs	r3, #0
 800a71a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800a71c:	2300      	movs	r3, #0
 800a71e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800a720:	2300      	movs	r3, #0
 800a722:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800a724:	2300      	movs	r3, #0
 800a726:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800a728:	2300      	movs	r3, #0
 800a72a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800a72c:	484f      	ldr	r0, [pc, #316]	; (800a86c <low_level_input+0x164>)
 800a72e:	f7f9 fa7d 	bl	8003c2c <HAL_ETH_GetReceivedFrame>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d001      	beq.n	800a73c <low_level_input+0x34>

    return NULL;
 800a738:	2300      	movs	r3, #0
 800a73a:	e092      	b.n	800a862 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800a73c:	4b4b      	ldr	r3, [pc, #300]	; (800a86c <low_level_input+0x164>)
 800a73e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a740:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800a742:	4b4a      	ldr	r3, [pc, #296]	; (800a86c <low_level_input+0x164>)
 800a744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a746:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800a748:	89fb      	ldrh	r3, [r7, #14]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d007      	beq.n	800a75e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800a74e:	89fb      	ldrh	r3, [r7, #14]
 800a750:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800a754:	4619      	mov	r1, r3
 800a756:	2000      	movs	r0, #0
 800a758:	f007 f804 	bl	8011764 <pbuf_alloc>
 800a75c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800a75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a760:	2b00      	cmp	r3, #0
 800a762:	d04b      	beq.n	800a7fc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800a764:	4b41      	ldr	r3, [pc, #260]	; (800a86c <low_level_input+0x164>)
 800a766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a768:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800a76a:	2300      	movs	r3, #0
 800a76c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800a76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a770:	62bb      	str	r3, [r7, #40]	; 0x28
 800a772:	e040      	b.n	800a7f6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800a774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a776:	895b      	ldrh	r3, [r3, #10]
 800a778:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800a77a:	2300      	movs	r3, #0
 800a77c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800a77e:	e021      	b.n	800a7c4 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800a780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a782:	685a      	ldr	r2, [r3, #4]
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	18d0      	adds	r0, r2, r3
 800a788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	18d1      	adds	r1, r2, r3
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800a794:	3304      	adds	r3, #4
 800a796:	461a      	mov	r2, r3
 800a798:	f00f ffc6 	bl	801a728 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800a79c:	6a3b      	ldr	r3, [r7, #32]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800a7a2:	6a3b      	ldr	r3, [r7, #32]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800a7a8:	69fa      	ldr	r2, [r7, #28]
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800a7b2:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800a7b4:	69ba      	ldr	r2, [r7, #24]
 800a7b6:	69fb      	ldr	r3, [r7, #28]
 800a7b8:	1ad3      	subs	r3, r2, r3
 800a7ba:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a7be:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800a7c4:	697a      	ldr	r2, [r7, #20]
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d8d6      	bhi.n	800a780 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800a7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d4:	685a      	ldr	r2, [r3, #4]
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	18d0      	adds	r0, r2, r3
 800a7da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	4413      	add	r3, r2
 800a7e0:	697a      	ldr	r2, [r7, #20]
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	f00f ffa0 	bl	801a728 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800a7e8:	69fa      	ldr	r2, [r7, #28]
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	4413      	add	r3, r2
 800a7ee:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800a7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d1bb      	bne.n	800a774 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800a7fc:	4b1b      	ldr	r3, [pc, #108]	; (800a86c <low_level_input+0x164>)
 800a7fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a800:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800a802:	2300      	movs	r3, #0
 800a804:	613b      	str	r3, [r7, #16]
 800a806:	e00b      	b.n	800a820 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800a808:	6a3b      	ldr	r3, [r7, #32]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a810:	6a3b      	ldr	r3, [r7, #32]
 800a812:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800a814:	6a3b      	ldr	r3, [r7, #32]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	3301      	adds	r3, #1
 800a81e:	613b      	str	r3, [r7, #16]
 800a820:	4b12      	ldr	r3, [pc, #72]	; (800a86c <low_level_input+0x164>)
 800a822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a824:	693a      	ldr	r2, [r7, #16]
 800a826:	429a      	cmp	r2, r3
 800a828:	d3ee      	bcc.n	800a808 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800a82a:	4b10      	ldr	r3, [pc, #64]	; (800a86c <low_level_input+0x164>)
 800a82c:	2200      	movs	r2, #0
 800a82e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800a830:	4b0e      	ldr	r3, [pc, #56]	; (800a86c <low_level_input+0x164>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a838:	3314      	adds	r3, #20
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a840:	2b00      	cmp	r3, #0
 800a842:	d00d      	beq.n	800a860 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800a844:	4b09      	ldr	r3, [pc, #36]	; (800a86c <low_level_input+0x164>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a84c:	3314      	adds	r3, #20
 800a84e:	2280      	movs	r2, #128	; 0x80
 800a850:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800a852:	4b06      	ldr	r3, [pc, #24]	; (800a86c <low_level_input+0x164>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a85a:	3308      	adds	r3, #8
 800a85c:	2200      	movs	r2, #0
 800a85e:	601a      	str	r2, [r3, #0]
  }
  return p;
 800a860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a862:	4618      	mov	r0, r3
 800a864:	3730      	adds	r7, #48	; 0x30
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	20008f24 	.word	0x20008f24

0800a870 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f7ff ff45 	bl	800a708 <low_level_input>
 800a87e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d010      	beq.n	800a8a8 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	6879      	ldr	r1, [r7, #4]
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	4798      	blx	r3
 800a890:	4603      	mov	r3, r0
 800a892:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800a894:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d006      	beq.n	800a8aa <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800a89c:	68f8      	ldr	r0, [r7, #12]
 800a89e:	f007 fa45 	bl	8011d2c <pbuf_free>
    p = NULL;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	60fb      	str	r3, [r7, #12]
 800a8a6:	e000      	b.n	800a8aa <ethernetif_input+0x3a>
  if (p == NULL) return;
 800a8a8:	bf00      	nop
  }
}
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d106      	bne.n	800a8cc <ethernetif_init+0x1c>
 800a8be:	4b0e      	ldr	r3, [pc, #56]	; (800a8f8 <ethernetif_init+0x48>)
 800a8c0:	f240 2215 	movw	r2, #533	; 0x215
 800a8c4:	490d      	ldr	r1, [pc, #52]	; (800a8fc <ethernetif_init+0x4c>)
 800a8c6:	480e      	ldr	r0, [pc, #56]	; (800a900 <ethernetif_init+0x50>)
 800a8c8:	f00f ffee 	bl	801a8a8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2273      	movs	r2, #115	; 0x73
 800a8d0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2274      	movs	r2, #116	; 0x74
 800a8d8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4a09      	ldr	r2, [pc, #36]	; (800a904 <ethernetif_init+0x54>)
 800a8e0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	4a08      	ldr	r2, [pc, #32]	; (800a908 <ethernetif_init+0x58>)
 800a8e6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f7ff fdb7 	bl	800a45c <low_level_init>

  return ERR_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	0801b8b0 	.word	0x0801b8b0
 800a8fc:	0801b8cc 	.word	0x0801b8cc
 800a900:	0801b8dc 	.word	0x0801b8dc
 800a904:	08018399 	.word	0x08018399
 800a908:	0800a5cd 	.word	0x0800a5cd

0800a90c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a910:	f7f7 f826 	bl	8001960 <HAL_GetTick>
 800a914:	4603      	mov	r3, r0
}
 800a916:	4618      	mov	r0, r3
 800a918:	bd80      	pop	{r7, pc}
	...

0800a91c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800a924:	2300      	movs	r3, #0
 800a926:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800a928:	2300      	movs	r3, #0
 800a92a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a932:	089b      	lsrs	r3, r3, #2
 800a934:	f003 0301 	and.w	r3, r3, #1
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d05d      	beq.n	800a9fa <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800a93e:	4b34      	ldr	r3, [pc, #208]	; (800aa10 <ethernetif_update_config+0xf4>)
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d03f      	beq.n	800a9c6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800a946:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a94a:	2100      	movs	r1, #0
 800a94c:	4830      	ldr	r0, [pc, #192]	; (800aa10 <ethernetif_update_config+0xf4>)
 800a94e:	f7f9 fade 	bl	8003f0e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800a952:	f7f7 f805 	bl	8001960 <HAL_GetTick>
 800a956:	4603      	mov	r3, r0
 800a958:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800a95a:	f107 0308 	add.w	r3, r7, #8
 800a95e:	461a      	mov	r2, r3
 800a960:	2101      	movs	r1, #1
 800a962:	482b      	ldr	r0, [pc, #172]	; (800aa10 <ethernetif_update_config+0xf4>)
 800a964:	f7f9 fa6b 	bl	8003e3e <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800a968:	f7f6 fffa 	bl	8001960 <HAL_GetTick>
 800a96c:	4602      	mov	r2, r0
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a976:	d828      	bhi.n	800a9ca <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	f003 0320 	and.w	r3, r3, #32
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d0eb      	beq.n	800a95a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800a982:	f107 0308 	add.w	r3, r7, #8
 800a986:	461a      	mov	r2, r3
 800a988:	2110      	movs	r1, #16
 800a98a:	4821      	ldr	r0, [pc, #132]	; (800aa10 <ethernetif_update_config+0xf4>)
 800a98c:	f7f9 fa57 	bl	8003e3e <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	f003 0304 	and.w	r3, r3, #4
 800a996:	2b00      	cmp	r3, #0
 800a998:	d004      	beq.n	800a9a4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800a99a:	4b1d      	ldr	r3, [pc, #116]	; (800aa10 <ethernetif_update_config+0xf4>)
 800a99c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9a0:	60da      	str	r2, [r3, #12]
 800a9a2:	e002      	b.n	800a9aa <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800a9a4:	4b1a      	ldr	r3, [pc, #104]	; (800aa10 <ethernetif_update_config+0xf4>)
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	f003 0302 	and.w	r3, r3, #2
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d003      	beq.n	800a9bc <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800a9b4:	4b16      	ldr	r3, [pc, #88]	; (800aa10 <ethernetif_update_config+0xf4>)
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	609a      	str	r2, [r3, #8]
 800a9ba:	e016      	b.n	800a9ea <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800a9bc:	4b14      	ldr	r3, [pc, #80]	; (800aa10 <ethernetif_update_config+0xf4>)
 800a9be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a9c2:	609a      	str	r2, [r3, #8]
 800a9c4:	e011      	b.n	800a9ea <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800a9c6:	bf00      	nop
 800a9c8:	e000      	b.n	800a9cc <ethernetif_update_config+0xb0>
          goto error;
 800a9ca:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800a9cc:	4b10      	ldr	r3, [pc, #64]	; (800aa10 <ethernetif_update_config+0xf4>)
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	08db      	lsrs	r3, r3, #3
 800a9d2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800a9d4:	4b0e      	ldr	r3, [pc, #56]	; (800aa10 <ethernetif_update_config+0xf4>)
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	085b      	lsrs	r3, r3, #1
 800a9da:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	480a      	ldr	r0, [pc, #40]	; (800aa10 <ethernetif_update_config+0xf4>)
 800a9e6:	f7f9 fa92 	bl	8003f0e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800a9ea:	2100      	movs	r1, #0
 800a9ec:	4808      	ldr	r0, [pc, #32]	; (800aa10 <ethernetif_update_config+0xf4>)
 800a9ee:	f7f9 fb53 	bl	8004098 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800a9f2:	4807      	ldr	r0, [pc, #28]	; (800aa10 <ethernetif_update_config+0xf4>)
 800a9f4:	f7f9 faf1 	bl	8003fda <HAL_ETH_Start>
 800a9f8:	e002      	b.n	800aa00 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800a9fa:	4805      	ldr	r0, [pc, #20]	; (800aa10 <ethernetif_update_config+0xf4>)
 800a9fc:	f7f9 fb1c 	bl	8004038 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 f807 	bl	800aa14 <ethernetif_notify_conn_changed>
}
 800aa06:	bf00      	nop
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	20008f24 	.word	0x20008f24

0800aa14 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800aa1c:	bf00      	nop
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800aa28:	b590      	push	{r4, r7, lr}
 800aa2a:	b089      	sub	sp, #36	; 0x24
 800aa2c:	af04      	add	r7, sp, #16
 800aa2e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa36:	7919      	ldrb	r1, [r3, #4]
 800aa38:	2350      	movs	r3, #80	; 0x50
 800aa3a:	2206      	movs	r2, #6
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f001 fe1b 	bl	800c678 <USBH_FindInterface>
 800aa42:	4603      	mov	r3, r0
 800aa44:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800aa46:	7bfb      	ldrb	r3, [r7, #15]
 800aa48:	2bff      	cmp	r3, #255	; 0xff
 800aa4a:	d002      	beq.n	800aa52 <USBH_MSC_InterfaceInit+0x2a>
 800aa4c:	7bfb      	ldrb	r3, [r7, #15]
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d90f      	bls.n	800aa72 <USBH_MSC_InterfaceInit+0x4a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 800aa52:	4886      	ldr	r0, [pc, #536]	; (800ac6c <USBH_MSC_InterfaceInit+0x244>)
 800aa54:	f00f ff28 	bl	801a8a8 <iprintf>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4619      	mov	r1, r3
 800aa62:	4883      	ldr	r0, [pc, #524]	; (800ac70 <USBH_MSC_InterfaceInit+0x248>)
 800aa64:	f00f ff20 	bl	801a8a8 <iprintf>
 800aa68:	200a      	movs	r0, #10
 800aa6a:	f00f ff35 	bl	801a8d8 <putchar>
    return USBH_FAIL;
 800aa6e:	2302      	movs	r3, #2
 800aa70:	e0f8      	b.n	800ac64 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800aa72:	7bfb      	ldrb	r3, [r7, #15]
 800aa74:	4619      	mov	r1, r3
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f001 fd96 	bl	800c5a8 <USBH_SelectInterface>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800aa80:	7bbb      	ldrb	r3, [r7, #14]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d001      	beq.n	800aa8a <USBH_MSC_InterfaceInit+0x62>
  {
    return USBH_FAIL;
 800aa86:	2302      	movs	r3, #2
 800aa88:	e0ec      	b.n	800ac64 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800aa90:	f44f 7080 	mov.w	r0, #256	; 0x100
 800aa94:	f00f fe2a 	bl	801a6ec <malloc>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaa2:	69db      	ldr	r3, [r3, #28]
 800aaa4:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d10a      	bne.n	800aac2 <USBH_MSC_InterfaceInit+0x9a>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
 800aaac:	486f      	ldr	r0, [pc, #444]	; (800ac6c <USBH_MSC_InterfaceInit+0x244>)
 800aaae:	f00f fefb 	bl	801a8a8 <iprintf>
 800aab2:	4870      	ldr	r0, [pc, #448]	; (800ac74 <USBH_MSC_InterfaceInit+0x24c>)
 800aab4:	f00f fef8 	bl	801a8a8 <iprintf>
 800aab8:	200a      	movs	r0, #10
 800aaba:	f00f ff0d 	bl	801a8d8 <putchar>
    return USBH_FAIL;
 800aabe:	2302      	movs	r3, #2
 800aac0:	e0d0      	b.n	800ac64 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800aac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aac6:	2100      	movs	r1, #0
 800aac8:	68b8      	ldr	r0, [r7, #8]
 800aaca:	f00f fe3b 	bl	801a744 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800aace:	7bfb      	ldrb	r3, [r7, #15]
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	211a      	movs	r1, #26
 800aad4:	fb01 f303 	mul.w	r3, r1, r3
 800aad8:	4413      	add	r3, r2
 800aada:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	b25b      	sxtb	r3, r3
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	da16      	bge.n	800ab14 <USBH_MSC_InterfaceInit+0xec>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800aae6:	7bfb      	ldrb	r3, [r7, #15]
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	211a      	movs	r1, #26
 800aaec:	fb01 f303 	mul.w	r3, r1, r3
 800aaf0:	4413      	add	r3, r2
 800aaf2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800aaf6:	781a      	ldrb	r2, [r3, #0]
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800aafc:	7bfb      	ldrb	r3, [r7, #15]
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	211a      	movs	r1, #26
 800ab02:	fb01 f303 	mul.w	r3, r1, r3
 800ab06:	4413      	add	r3, r2
 800ab08:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ab0c:	881a      	ldrh	r2, [r3, #0]
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	815a      	strh	r2, [r3, #10]
 800ab12:	e015      	b.n	800ab40 <USBH_MSC_InterfaceInit+0x118>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800ab14:	7bfb      	ldrb	r3, [r7, #15]
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	211a      	movs	r1, #26
 800ab1a:	fb01 f303 	mul.w	r3, r1, r3
 800ab1e:	4413      	add	r3, r2
 800ab20:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ab24:	781a      	ldrb	r2, [r3, #0]
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ab2a:	7bfb      	ldrb	r3, [r7, #15]
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	211a      	movs	r1, #26
 800ab30:	fb01 f303 	mul.w	r3, r1, r3
 800ab34:	4413      	add	r3, r2
 800ab36:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ab3a:	881a      	ldrh	r2, [r3, #0]
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	211a      	movs	r1, #26
 800ab46:	fb01 f303 	mul.w	r3, r1, r3
 800ab4a:	4413      	add	r3, r2
 800ab4c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	b25b      	sxtb	r3, r3
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	da16      	bge.n	800ab86 <USBH_MSC_InterfaceInit+0x15e>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800ab58:	7bfb      	ldrb	r3, [r7, #15]
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	211a      	movs	r1, #26
 800ab5e:	fb01 f303 	mul.w	r3, r1, r3
 800ab62:	4413      	add	r3, r2
 800ab64:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ab68:	781a      	ldrb	r2, [r3, #0]
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ab6e:	7bfb      	ldrb	r3, [r7, #15]
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	211a      	movs	r1, #26
 800ab74:	fb01 f303 	mul.w	r3, r1, r3
 800ab78:	4413      	add	r3, r2
 800ab7a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ab7e:	881a      	ldrh	r2, [r3, #0]
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	815a      	strh	r2, [r3, #10]
 800ab84:	e015      	b.n	800abb2 <USBH_MSC_InterfaceInit+0x18a>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800ab86:	7bfb      	ldrb	r3, [r7, #15]
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	211a      	movs	r1, #26
 800ab8c:	fb01 f303 	mul.w	r3, r1, r3
 800ab90:	4413      	add	r3, r2
 800ab92:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ab96:	781a      	ldrb	r2, [r3, #0]
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ab9c:	7bfb      	ldrb	r3, [r7, #15]
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	211a      	movs	r1, #26
 800aba2:	fb01 f303 	mul.w	r3, r1, r3
 800aba6:	4413      	add	r3, r2
 800aba8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800abac:	881a      	ldrh	r2, [r3, #0]
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	2200      	movs	r2, #0
 800abb6:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	2200      	movs	r2, #0
 800abbc:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	2200      	movs	r2, #0
 800abc2:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	799b      	ldrb	r3, [r3, #6]
 800abc8:	4619      	mov	r1, r3
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f003 f8cf 	bl	800dd6e <USBH_AllocPipe>
 800abd0:	4603      	mov	r3, r0
 800abd2:	461a      	mov	r2, r3
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	79db      	ldrb	r3, [r3, #7]
 800abdc:	4619      	mov	r1, r3
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f003 f8c5 	bl	800dd6e <USBH_AllocPipe>
 800abe4:	4603      	mov	r3, r0
 800abe6:	461a      	mov	r2, r3
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 feed 	bl	800b9cc <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	7959      	ldrb	r1, [r3, #5]
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	7998      	ldrb	r0, [r3, #6]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	8912      	ldrh	r2, [r2, #8]
 800ac0a:	9202      	str	r2, [sp, #8]
 800ac0c:	2202      	movs	r2, #2
 800ac0e:	9201      	str	r2, [sp, #4]
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	4623      	mov	r3, r4
 800ac14:	4602      	mov	r2, r0
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f003 f87a 	bl	800dd10 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	7919      	ldrb	r1, [r3, #4]
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	79d8      	ldrb	r0, [r3, #7]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	8952      	ldrh	r2, [r2, #10]
 800ac34:	9202      	str	r2, [sp, #8]
 800ac36:	2202      	movs	r2, #2
 800ac38:	9201      	str	r2, [sp, #4]
 800ac3a:	9300      	str	r3, [sp, #0]
 800ac3c:	4623      	mov	r3, r4
 800ac3e:	4602      	mov	r2, r0
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f003 f865 	bl	800dd10 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	791b      	ldrb	r3, [r3, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f00f fc91 	bl	801a576 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	795b      	ldrb	r3, [r3, #5]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f00f fc8a 	bl	801a576 <USBH_LL_SetToggle>

  return USBH_OK;
 800ac62:	2300      	movs	r3, #0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3714      	adds	r7, #20
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd90      	pop	{r4, r7, pc}
 800ac6c:	0801b908 	.word	0x0801b908
 800ac70:	0801b914 	.word	0x0801b914
 800ac74:	0801b93c 	.word	0x0801b93c

0800ac78 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac86:	69db      	ldr	r3, [r3, #28]
 800ac88:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	795b      	ldrb	r3, [r3, #5]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d00e      	beq.n	800acb0 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	795b      	ldrb	r3, [r3, #5]
 800ac96:	4619      	mov	r1, r3
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f003 f858 	bl	800dd4e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	795b      	ldrb	r3, [r3, #5]
 800aca2:	4619      	mov	r1, r3
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f003 f883 	bl	800ddb0 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2200      	movs	r2, #0
 800acae:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	791b      	ldrb	r3, [r3, #4]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d00e      	beq.n	800acd6 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	791b      	ldrb	r3, [r3, #4]
 800acbc:	4619      	mov	r1, r3
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f003 f845 	bl	800dd4e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	791b      	ldrb	r3, [r3, #4]
 800acc8:	4619      	mov	r1, r3
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f003 f870 	bl	800ddb0 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2200      	movs	r2, #0
 800acd4:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acdc:	69db      	ldr	r3, [r3, #28]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d00b      	beq.n	800acfa <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ace8:	69db      	ldr	r3, [r3, #28]
 800acea:	4618      	mov	r0, r3
 800acec:	f00f fd06 	bl	801a6fc <free>
    phost->pActiveClass->pData = 0U;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acf6:	2200      	movs	r2, #0
 800acf8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3710      	adds	r7, #16
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad12:	69db      	ldr	r3, [r3, #28]
 800ad14:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ad16:	2301      	movs	r3, #1
 800ad18:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	7b9b      	ldrb	r3, [r3, #14]
 800ad1e:	2b03      	cmp	r3, #3
 800ad20:	d04a      	beq.n	800adb8 <USBH_MSC_ClassRequest+0xb4>
 800ad22:	2b03      	cmp	r3, #3
 800ad24:	dc54      	bgt.n	800add0 <USBH_MSC_ClassRequest+0xcc>
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d001      	beq.n	800ad2e <USBH_MSC_ClassRequest+0x2a>
 800ad2a:	2b02      	cmp	r3, #2
 800ad2c:	d150      	bne.n	800add0 <USBH_MSC_ClassRequest+0xcc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	4619      	mov	r1, r3
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 fe2b 	bl	800b98e <USBH_MSC_BOT_REQ_GetMaxLUN>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800ad3c:	7bfb      	ldrb	r3, [r7, #15]
 800ad3e:	2b03      	cmp	r3, #3
 800ad40:	d104      	bne.n	800ad4c <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	2200      	movs	r2, #0
 800ad46:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800ad4c:	7bfb      	ldrb	r3, [r7, #15]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d140      	bne.n	800add4 <USBH_MSC_ClassRequest+0xd0>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	2b02      	cmp	r3, #2
 800ad58:	d804      	bhi.n	800ad64 <USBH_MSC_ClassRequest+0x60>
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	e000      	b.n	800ad66 <USBH_MSC_ClassRequest+0x62>
 800ad64:	2202      	movs	r2, #2
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	4619      	mov	r1, r3
 800ad70:	481c      	ldr	r0, [pc, #112]	; (800ade4 <USBH_MSC_ClassRequest+0xe0>)
 800ad72:	f00f fd99 	bl	801a8a8 <iprintf>
 800ad76:	200a      	movs	r0, #10
 800ad78:	f00f fdae 	bl	801a8d8 <putchar>

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	73bb      	strb	r3, [r7, #14]
 800ad80:	e014      	b.n	800adac <USBH_MSC_ClassRequest+0xa8>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800ad82:	7bbb      	ldrb	r3, [r7, #14]
 800ad84:	68ba      	ldr	r2, [r7, #8]
 800ad86:	2134      	movs	r1, #52	; 0x34
 800ad88:	fb01 f303 	mul.w	r3, r1, r3
 800ad8c:	4413      	add	r3, r2
 800ad8e:	3392      	adds	r3, #146	; 0x92
 800ad90:	2202      	movs	r2, #2
 800ad92:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800ad94:	7bbb      	ldrb	r3, [r7, #14]
 800ad96:	68ba      	ldr	r2, [r7, #8]
 800ad98:	2134      	movs	r1, #52	; 0x34
 800ad9a:	fb01 f303 	mul.w	r3, r1, r3
 800ad9e:	4413      	add	r3, r2
 800ada0:	33c1      	adds	r3, #193	; 0xc1
 800ada2:	2200      	movs	r2, #0
 800ada4:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800ada6:	7bbb      	ldrb	r3, [r7, #14]
 800ada8:	3301      	adds	r3, #1
 800adaa:	73bb      	strb	r3, [r7, #14]
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	7bba      	ldrb	r2, [r7, #14]
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d3e5      	bcc.n	800ad82 <USBH_MSC_ClassRequest+0x7e>
        }
      }
      break;
 800adb6:	e00d      	b.n	800add4 <USBH_MSC_ClassRequest+0xd0>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800adb8:	2100      	movs	r1, #0
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f002 fb69 	bl	800d492 <USBH_ClrFeature>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d108      	bne.n	800add8 <USBH_MSC_ClassRequest+0xd4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	7bda      	ldrb	r2, [r3, #15]
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	739a      	strb	r2, [r3, #14]
      }
      break;
 800adce:	e003      	b.n	800add8 <USBH_MSC_ClassRequest+0xd4>

    default:
      break;
 800add0:	bf00      	nop
 800add2:	e002      	b.n	800adda <USBH_MSC_ClassRequest+0xd6>
      break;
 800add4:	bf00      	nop
 800add6:	e000      	b.n	800adda <USBH_MSC_ClassRequest+0xd6>
      break;
 800add8:	bf00      	nop
  }

  return status;
 800adda:	7bfb      	ldrb	r3, [r7, #15]
}
 800addc:	4618      	mov	r0, r3
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	0801b964 	.word	0x0801b964

0800ade8 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b086      	sub	sp, #24
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adf6:	69db      	ldr	r3, [r3, #28]
 800adf8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800adfa:	2301      	movs	r3, #1
 800adfc:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800adfe:	2301      	movs	r3, #1
 800ae00:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800ae02:	2301      	movs	r3, #1
 800ae04:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	7b1b      	ldrb	r3, [r3, #12]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d003      	beq.n	800ae16 <USBH_MSC_Process+0x2e>
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	f000 8355 	beq.w	800b4be <USBH_MSC_Process+0x6d6>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800ae14:	e356      	b.n	800b4c4 <USBH_MSC_Process+0x6dc>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	429a      	cmp	r2, r3
 800ae24:	f080 8333 	bcs.w	800b48e <USBH_MSC_Process+0x6a6>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae2e:	4619      	mov	r1, r3
 800ae30:	693a      	ldr	r2, [r7, #16]
 800ae32:	2334      	movs	r3, #52	; 0x34
 800ae34:	fb03 f301 	mul.w	r3, r3, r1
 800ae38:	4413      	add	r3, r2
 800ae3a:	3391      	adds	r3, #145	; 0x91
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae46:	4619      	mov	r1, r3
 800ae48:	693a      	ldr	r2, [r7, #16]
 800ae4a:	2334      	movs	r3, #52	; 0x34
 800ae4c:	fb03 f301 	mul.w	r3, r3, r1
 800ae50:	4413      	add	r3, r2
 800ae52:	3390      	adds	r3, #144	; 0x90
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	2b08      	cmp	r3, #8
 800ae58:	f200 8327 	bhi.w	800b4aa <USBH_MSC_Process+0x6c2>
 800ae5c:	a201      	add	r2, pc, #4	; (adr r2, 800ae64 <USBH_MSC_Process+0x7c>)
 800ae5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae62:	bf00      	nop
 800ae64:	0800ae89 	.word	0x0800ae89
 800ae68:	0800b4ab 	.word	0x0800b4ab
 800ae6c:	0800afd1 	.word	0x0800afd1
 800ae70:	0800b185 	.word	0x0800b185
 800ae74:	0800aec3 	.word	0x0800aec3
 800ae78:	0800b2f1 	.word	0x0800b2f1
 800ae7c:	0800b4ab 	.word	0x0800b4ab
 800ae80:	0800b4ab 	.word	0x0800b4ab
 800ae84:	0800b47d 	.word	0x0800b47d
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae8e:	4619      	mov	r1, r3
 800ae90:	48b6      	ldr	r0, [pc, #728]	; (800b16c <USBH_MSC_Process+0x384>)
 800ae92:	f00f fd09 	bl	801a8a8 <iprintf>
 800ae96:	200a      	movs	r0, #10
 800ae98:	f00f fd1e 	bl	801a8d8 <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aea2:	4619      	mov	r1, r3
 800aea4:	693a      	ldr	r2, [r7, #16]
 800aea6:	2334      	movs	r3, #52	; 0x34
 800aea8:	fb03 f301 	mul.w	r3, r3, r1
 800aeac:	4413      	add	r3, r2
 800aeae:	3390      	adds	r3, #144	; 0x90
 800aeb0:	2204      	movs	r2, #4
 800aeb2:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800aec0:	e2fc      	b.n	800b4bc <USBH_MSC_Process+0x6d4>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aec8:	b2d9      	uxtb	r1, r3
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aed0:	461a      	mov	r2, r3
 800aed2:	2334      	movs	r3, #52	; 0x34
 800aed4:	fb03 f302 	mul.w	r3, r3, r2
 800aed8:	3398      	adds	r3, #152	; 0x98
 800aeda:	693a      	ldr	r2, [r7, #16]
 800aedc:	4413      	add	r3, r2
 800aede:	3307      	adds	r3, #7
 800aee0:	461a      	mov	r2, r3
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f001 f890 	bl	800c008 <USBH_MSC_SCSI_Inquiry>
 800aee8:	4603      	mov	r3, r0
 800aeea:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d141      	bne.n	800af76 <USBH_MSC_Process+0x18e>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aef8:	461a      	mov	r2, r3
 800aefa:	2334      	movs	r3, #52	; 0x34
 800aefc:	fb03 f302 	mul.w	r3, r3, r2
 800af00:	3398      	adds	r3, #152	; 0x98
 800af02:	693a      	ldr	r2, [r7, #16]
 800af04:	4413      	add	r3, r2
 800af06:	330a      	adds	r3, #10
 800af08:	4619      	mov	r1, r3
 800af0a:	4899      	ldr	r0, [pc, #612]	; (800b170 <USBH_MSC_Process+0x388>)
 800af0c:	f00f fccc 	bl	801a8a8 <iprintf>
 800af10:	200a      	movs	r0, #10
 800af12:	f00f fce1 	bl	801a8d8 <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af1c:	461a      	mov	r2, r3
 800af1e:	2334      	movs	r3, #52	; 0x34
 800af20:	fb03 f302 	mul.w	r3, r3, r2
 800af24:	33a0      	adds	r3, #160	; 0xa0
 800af26:	693a      	ldr	r2, [r7, #16]
 800af28:	4413      	add	r3, r2
 800af2a:	330b      	adds	r3, #11
 800af2c:	4619      	mov	r1, r3
 800af2e:	4891      	ldr	r0, [pc, #580]	; (800b174 <USBH_MSC_Process+0x38c>)
 800af30:	f00f fcba 	bl	801a8a8 <iprintf>
 800af34:	200a      	movs	r0, #10
 800af36:	f00f fccf 	bl	801a8d8 <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af40:	461a      	mov	r2, r3
 800af42:	2334      	movs	r3, #52	; 0x34
 800af44:	fb03 f302 	mul.w	r3, r3, r2
 800af48:	33b0      	adds	r3, #176	; 0xb0
 800af4a:	693a      	ldr	r2, [r7, #16]
 800af4c:	4413      	add	r3, r2
 800af4e:	330c      	adds	r3, #12
 800af50:	4619      	mov	r1, r3
 800af52:	4889      	ldr	r0, [pc, #548]	; (800b178 <USBH_MSC_Process+0x390>)
 800af54:	f00f fca8 	bl	801a8a8 <iprintf>
 800af58:	200a      	movs	r0, #10
 800af5a:	f00f fcbd 	bl	801a8d8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af64:	4619      	mov	r1, r3
 800af66:	693a      	ldr	r2, [r7, #16]
 800af68:	2334      	movs	r3, #52	; 0x34
 800af6a:	fb03 f301 	mul.w	r3, r3, r1
 800af6e:	4413      	add	r3, r2
 800af70:	3390      	adds	r3, #144	; 0x90
 800af72:	2202      	movs	r2, #2
 800af74:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800af76:	7bfb      	ldrb	r3, [r7, #15]
 800af78:	2b02      	cmp	r3, #2
 800af7a:	d10c      	bne.n	800af96 <USBH_MSC_Process+0x1ae>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af82:	4619      	mov	r1, r3
 800af84:	693a      	ldr	r2, [r7, #16]
 800af86:	2334      	movs	r3, #52	; 0x34
 800af88:	fb03 f301 	mul.w	r3, r3, r1
 800af8c:	4413      	add	r3, r2
 800af8e:	3390      	adds	r3, #144	; 0x90
 800af90:	2205      	movs	r2, #5
 800af92:	701a      	strb	r2, [r3, #0]
            break;
 800af94:	e28b      	b.n	800b4ae <USBH_MSC_Process+0x6c6>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800af96:	7bfb      	ldrb	r3, [r7, #15]
 800af98:	2b04      	cmp	r3, #4
 800af9a:	f040 8288 	bne.w	800b4ae <USBH_MSC_Process+0x6c6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afa4:	4619      	mov	r1, r3
 800afa6:	693a      	ldr	r2, [r7, #16]
 800afa8:	2334      	movs	r3, #52	; 0x34
 800afaa:	fb03 f301 	mul.w	r3, r3, r1
 800afae:	4413      	add	r3, r2
 800afb0:	3390      	adds	r3, #144	; 0x90
 800afb2:	2201      	movs	r2, #1
 800afb4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afbc:	4619      	mov	r1, r3
 800afbe:	693a      	ldr	r2, [r7, #16]
 800afc0:	2334      	movs	r3, #52	; 0x34
 800afc2:	fb03 f301 	mul.w	r3, r3, r1
 800afc6:	4413      	add	r3, r2
 800afc8:	3391      	adds	r3, #145	; 0x91
 800afca:	2202      	movs	r2, #2
 800afcc:	701a      	strb	r2, [r3, #0]
            break;
 800afce:	e26e      	b.n	800b4ae <USBH_MSC_Process+0x6c6>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	4619      	mov	r1, r3
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 ff56 	bl	800be8c <USBH_MSC_SCSI_TestUnitReady>
 800afe0:	4603      	mov	r3, r0
 800afe2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800afe4:	7bbb      	ldrb	r3, [r7, #14]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d14f      	bne.n	800b08a <USBH_MSC_Process+0x2a2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aff0:	4619      	mov	r1, r3
 800aff2:	693a      	ldr	r2, [r7, #16]
 800aff4:	2334      	movs	r3, #52	; 0x34
 800aff6:	fb03 f301 	mul.w	r3, r3, r1
 800affa:	4413      	add	r3, r2
 800affc:	3392      	adds	r3, #146	; 0x92
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d012      	beq.n	800b02a <USBH_MSC_Process+0x242>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b00a:	4619      	mov	r1, r3
 800b00c:	693a      	ldr	r2, [r7, #16]
 800b00e:	2334      	movs	r3, #52	; 0x34
 800b010:	fb03 f301 	mul.w	r3, r3, r1
 800b014:	4413      	add	r3, r2
 800b016:	33c1      	adds	r3, #193	; 0xc1
 800b018:	2201      	movs	r2, #1
 800b01a:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device ready");
 800b01c:	4857      	ldr	r0, [pc, #348]	; (800b17c <USBH_MSC_Process+0x394>)
 800b01e:	f00f fc43 	bl	801a8a8 <iprintf>
 800b022:	200a      	movs	r0, #10
 800b024:	f00f fc58 	bl	801a8d8 <putchar>
 800b028:	e00b      	b.n	800b042 <USBH_MSC_Process+0x25a>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b030:	4619      	mov	r1, r3
 800b032:	693a      	ldr	r2, [r7, #16]
 800b034:	2334      	movs	r3, #52	; 0x34
 800b036:	fb03 f301 	mul.w	r3, r3, r1
 800b03a:	4413      	add	r3, r2
 800b03c:	33c1      	adds	r3, #193	; 0xc1
 800b03e:	2200      	movs	r2, #0
 800b040:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b048:	4619      	mov	r1, r3
 800b04a:	693a      	ldr	r2, [r7, #16]
 800b04c:	2334      	movs	r3, #52	; 0x34
 800b04e:	fb03 f301 	mul.w	r3, r3, r1
 800b052:	4413      	add	r3, r2
 800b054:	3390      	adds	r3, #144	; 0x90
 800b056:	2203      	movs	r2, #3
 800b058:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b060:	4619      	mov	r1, r3
 800b062:	693a      	ldr	r2, [r7, #16]
 800b064:	2334      	movs	r3, #52	; 0x34
 800b066:	fb03 f301 	mul.w	r3, r3, r1
 800b06a:	4413      	add	r3, r2
 800b06c:	3391      	adds	r3, #145	; 0x91
 800b06e:	2200      	movs	r2, #0
 800b070:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b078:	4619      	mov	r1, r3
 800b07a:	693a      	ldr	r2, [r7, #16]
 800b07c:	2334      	movs	r3, #52	; 0x34
 800b07e:	fb03 f301 	mul.w	r3, r3, r1
 800b082:	4413      	add	r3, r2
 800b084:	3392      	adds	r3, #146	; 0x92
 800b086:	2200      	movs	r2, #0
 800b088:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800b08a:	7bbb      	ldrb	r3, [r7, #14]
 800b08c:	2b02      	cmp	r3, #2
 800b08e:	d150      	bne.n	800b132 <USBH_MSC_Process+0x34a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b096:	4619      	mov	r1, r3
 800b098:	693a      	ldr	r2, [r7, #16]
 800b09a:	2334      	movs	r3, #52	; 0x34
 800b09c:	fb03 f301 	mul.w	r3, r3, r1
 800b0a0:	4413      	add	r3, r2
 800b0a2:	3392      	adds	r3, #146	; 0x92
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	2b02      	cmp	r3, #2
 800b0a8:	d012      	beq.n	800b0d0 <USBH_MSC_Process+0x2e8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	693a      	ldr	r2, [r7, #16]
 800b0b4:	2334      	movs	r3, #52	; 0x34
 800b0b6:	fb03 f301 	mul.w	r3, r3, r1
 800b0ba:	4413      	add	r3, r2
 800b0bc:	33c1      	adds	r3, #193	; 0xc1
 800b0be:	2201      	movs	r2, #1
 800b0c0:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device NOT ready");
 800b0c2:	482f      	ldr	r0, [pc, #188]	; (800b180 <USBH_MSC_Process+0x398>)
 800b0c4:	f00f fbf0 	bl	801a8a8 <iprintf>
 800b0c8:	200a      	movs	r0, #10
 800b0ca:	f00f fc05 	bl	801a8d8 <putchar>
 800b0ce:	e00b      	b.n	800b0e8 <USBH_MSC_Process+0x300>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	693a      	ldr	r2, [r7, #16]
 800b0da:	2334      	movs	r3, #52	; 0x34
 800b0dc:	fb03 f301 	mul.w	r3, r3, r1
 800b0e0:	4413      	add	r3, r2
 800b0e2:	33c1      	adds	r3, #193	; 0xc1
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	693a      	ldr	r2, [r7, #16]
 800b0f2:	2334      	movs	r3, #52	; 0x34
 800b0f4:	fb03 f301 	mul.w	r3, r3, r1
 800b0f8:	4413      	add	r3, r2
 800b0fa:	3390      	adds	r3, #144	; 0x90
 800b0fc:	2205      	movs	r2, #5
 800b0fe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b106:	4619      	mov	r1, r3
 800b108:	693a      	ldr	r2, [r7, #16]
 800b10a:	2334      	movs	r3, #52	; 0x34
 800b10c:	fb03 f301 	mul.w	r3, r3, r1
 800b110:	4413      	add	r3, r2
 800b112:	3391      	adds	r3, #145	; 0x91
 800b114:	2201      	movs	r2, #1
 800b116:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b11e:	4619      	mov	r1, r3
 800b120:	693a      	ldr	r2, [r7, #16]
 800b122:	2334      	movs	r3, #52	; 0x34
 800b124:	fb03 f301 	mul.w	r3, r3, r1
 800b128:	4413      	add	r3, r2
 800b12a:	3392      	adds	r3, #146	; 0x92
 800b12c:	2202      	movs	r2, #2
 800b12e:	701a      	strb	r2, [r3, #0]
            break;
 800b130:	e1bf      	b.n	800b4b2 <USBH_MSC_Process+0x6ca>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800b132:	7bbb      	ldrb	r3, [r7, #14]
 800b134:	2b04      	cmp	r3, #4
 800b136:	f040 81bc 	bne.w	800b4b2 <USBH_MSC_Process+0x6ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b140:	4619      	mov	r1, r3
 800b142:	693a      	ldr	r2, [r7, #16]
 800b144:	2334      	movs	r3, #52	; 0x34
 800b146:	fb03 f301 	mul.w	r3, r3, r1
 800b14a:	4413      	add	r3, r2
 800b14c:	3390      	adds	r3, #144	; 0x90
 800b14e:	2201      	movs	r2, #1
 800b150:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b158:	4619      	mov	r1, r3
 800b15a:	693a      	ldr	r2, [r7, #16]
 800b15c:	2334      	movs	r3, #52	; 0x34
 800b15e:	fb03 f301 	mul.w	r3, r3, r1
 800b162:	4413      	add	r3, r2
 800b164:	3391      	adds	r3, #145	; 0x91
 800b166:	2202      	movs	r2, #2
 800b168:	701a      	strb	r2, [r3, #0]
            break;
 800b16a:	e1a2      	b.n	800b4b2 <USBH_MSC_Process+0x6ca>
 800b16c:	0801b980 	.word	0x0801b980
 800b170:	0801b98c 	.word	0x0801b98c
 800b174:	0801b9a4 	.word	0x0801b9a4
 800b178:	0801b9bc 	.word	0x0801b9bc
 800b17c:	0801b9d4 	.word	0x0801b9d4
 800b180:	0801b9e8 	.word	0x0801b9e8
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b18a:	b2d9      	uxtb	r1, r3
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b192:	461a      	mov	r2, r3
 800b194:	2334      	movs	r3, #52	; 0x34
 800b196:	fb03 f302 	mul.w	r3, r3, r2
 800b19a:	3390      	adds	r3, #144	; 0x90
 800b19c:	693a      	ldr	r2, [r7, #16]
 800b19e:	4413      	add	r3, r2
 800b1a0:	3304      	adds	r3, #4
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 feb4 	bl	800bf12 <USBH_MSC_SCSI_ReadCapacity>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b1ae:	7bfb      	ldrb	r3, [r7, #15]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d170      	bne.n	800b296 <USBH_MSC_Process+0x4ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	693a      	ldr	r2, [r7, #16]
 800b1be:	2334      	movs	r3, #52	; 0x34
 800b1c0:	fb03 f301 	mul.w	r3, r3, r1
 800b1c4:	4413      	add	r3, r2
 800b1c6:	33c1      	adds	r3, #193	; 0xc1
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d142      	bne.n	800b254 <USBH_MSC_Process+0x46c>
                USBH_UsrLog("MSC Device capacity : %lu Bytes", \
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	693a      	ldr	r2, [r7, #16]
 800b1d8:	2334      	movs	r3, #52	; 0x34
 800b1da:	fb03 f301 	mul.w	r3, r3, r1
 800b1de:	4413      	add	r3, r2
 800b1e0:	3394      	adds	r3, #148	; 0x94
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	693a      	ldr	r2, [r7, #16]
 800b1e6:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 800b1ea:	4610      	mov	r0, r2
 800b1ec:	6939      	ldr	r1, [r7, #16]
 800b1ee:	2234      	movs	r2, #52	; 0x34
 800b1f0:	fb02 f200 	mul.w	r2, r2, r0
 800b1f4:	440a      	add	r2, r1
 800b1f6:	3298      	adds	r2, #152	; 0x98
 800b1f8:	8812      	ldrh	r2, [r2, #0]
 800b1fa:	fb02 f303 	mul.w	r3, r2, r3
 800b1fe:	4619      	mov	r1, r3
 800b200:	48b3      	ldr	r0, [pc, #716]	; (800b4d0 <USBH_MSC_Process+0x6e8>)
 800b202:	f00f fb51 	bl	801a8a8 <iprintf>
 800b206:	200a      	movs	r0, #10
 800b208:	f00f fb66 	bl	801a8d8 <putchar>
                USBH_UsrLog("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b212:	4619      	mov	r1, r3
 800b214:	693a      	ldr	r2, [r7, #16]
 800b216:	2334      	movs	r3, #52	; 0x34
 800b218:	fb03 f301 	mul.w	r3, r3, r1
 800b21c:	4413      	add	r3, r2
 800b21e:	3394      	adds	r3, #148	; 0x94
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4619      	mov	r1, r3
 800b224:	48ab      	ldr	r0, [pc, #684]	; (800b4d4 <USBH_MSC_Process+0x6ec>)
 800b226:	f00f fb3f 	bl	801a8a8 <iprintf>
 800b22a:	200a      	movs	r0, #10
 800b22c:	f00f fb54 	bl	801a8d8 <putchar>
                USBH_UsrLog("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b236:	4619      	mov	r1, r3
 800b238:	693a      	ldr	r2, [r7, #16]
 800b23a:	2334      	movs	r3, #52	; 0x34
 800b23c:	fb03 f301 	mul.w	r3, r3, r1
 800b240:	4413      	add	r3, r2
 800b242:	3398      	adds	r3, #152	; 0x98
 800b244:	881b      	ldrh	r3, [r3, #0]
 800b246:	4619      	mov	r1, r3
 800b248:	48a3      	ldr	r0, [pc, #652]	; (800b4d8 <USBH_MSC_Process+0x6f0>)
 800b24a:	f00f fb2d 	bl	801a8a8 <iprintf>
 800b24e:	200a      	movs	r0, #10
 800b250:	f00f fb42 	bl	801a8d8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b25a:	4619      	mov	r1, r3
 800b25c:	693a      	ldr	r2, [r7, #16]
 800b25e:	2334      	movs	r3, #52	; 0x34
 800b260:	fb03 f301 	mul.w	r3, r3, r1
 800b264:	4413      	add	r3, r2
 800b266:	3390      	adds	r3, #144	; 0x90
 800b268:	2201      	movs	r2, #1
 800b26a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b272:	4619      	mov	r1, r3
 800b274:	693a      	ldr	r2, [r7, #16]
 800b276:	2334      	movs	r3, #52	; 0x34
 800b278:	fb03 f301 	mul.w	r3, r3, r1
 800b27c:	4413      	add	r3, r2
 800b27e:	3391      	adds	r3, #145	; 0x91
 800b280:	2200      	movs	r2, #0
 800b282:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b28a:	3301      	adds	r3, #1
 800b28c:	b29a      	uxth	r2, r3
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b294:	e10f      	b.n	800b4b6 <USBH_MSC_Process+0x6ce>
            else if (scsi_status == USBH_FAIL)
 800b296:	7bfb      	ldrb	r3, [r7, #15]
 800b298:	2b02      	cmp	r3, #2
 800b29a:	d10c      	bne.n	800b2b6 <USBH_MSC_Process+0x4ce>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	693a      	ldr	r2, [r7, #16]
 800b2a6:	2334      	movs	r3, #52	; 0x34
 800b2a8:	fb03 f301 	mul.w	r3, r3, r1
 800b2ac:	4413      	add	r3, r2
 800b2ae:	3390      	adds	r3, #144	; 0x90
 800b2b0:	2205      	movs	r2, #5
 800b2b2:	701a      	strb	r2, [r3, #0]
            break;
 800b2b4:	e0ff      	b.n	800b4b6 <USBH_MSC_Process+0x6ce>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b2b6:	7bfb      	ldrb	r3, [r7, #15]
 800b2b8:	2b04      	cmp	r3, #4
 800b2ba:	f040 80fc 	bne.w	800b4b6 <USBH_MSC_Process+0x6ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	693a      	ldr	r2, [r7, #16]
 800b2c8:	2334      	movs	r3, #52	; 0x34
 800b2ca:	fb03 f301 	mul.w	r3, r3, r1
 800b2ce:	4413      	add	r3, r2
 800b2d0:	3390      	adds	r3, #144	; 0x90
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b2dc:	4619      	mov	r1, r3
 800b2de:	693a      	ldr	r2, [r7, #16]
 800b2e0:	2334      	movs	r3, #52	; 0x34
 800b2e2:	fb03 f301 	mul.w	r3, r3, r1
 800b2e6:	4413      	add	r3, r2
 800b2e8:	3391      	adds	r3, #145	; 0x91
 800b2ea:	2202      	movs	r2, #2
 800b2ec:	701a      	strb	r2, [r3, #0]
            break;
 800b2ee:	e0e2      	b.n	800b4b6 <USBH_MSC_Process+0x6ce>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b2f6:	b2d9      	uxtb	r1, r3
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b2fe:	461a      	mov	r2, r3
 800b300:	2334      	movs	r3, #52	; 0x34
 800b302:	fb03 f302 	mul.w	r3, r3, r2
 800b306:	3398      	adds	r3, #152	; 0x98
 800b308:	693a      	ldr	r2, [r7, #16]
 800b30a:	4413      	add	r3, r2
 800b30c:	3304      	adds	r3, #4
 800b30e:	461a      	mov	r2, r3
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 ff1e 	bl	800c152 <USBH_MSC_SCSI_RequestSense>
 800b316:	4603      	mov	r3, r0
 800b318:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b31a:	7bfb      	ldrb	r3, [r7, #15]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d17b      	bne.n	800b418 <USBH_MSC_Process+0x630>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b326:	4619      	mov	r1, r3
 800b328:	693a      	ldr	r2, [r7, #16]
 800b32a:	2334      	movs	r3, #52	; 0x34
 800b32c:	fb03 f301 	mul.w	r3, r3, r1
 800b330:	4413      	add	r3, r2
 800b332:	339c      	adds	r3, #156	; 0x9c
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	2b06      	cmp	r3, #6
 800b338:	d00c      	beq.n	800b354 <USBH_MSC_Process+0x56c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b340:	4619      	mov	r1, r3
 800b342:	693a      	ldr	r2, [r7, #16]
 800b344:	2334      	movs	r3, #52	; 0x34
 800b346:	fb03 f301 	mul.w	r3, r3, r1
 800b34a:	4413      	add	r3, r2
 800b34c:	339c      	adds	r3, #156	; 0x9c
 800b34e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b350:	2b02      	cmp	r3, #2
 800b352:	d117      	bne.n	800b384 <USBH_MSC_Process+0x59c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b360:	1ad3      	subs	r3, r2, r3
 800b362:	f242 720f 	movw	r2, #9999	; 0x270f
 800b366:	4293      	cmp	r3, r2
 800b368:	d80c      	bhi.n	800b384 <USBH_MSC_Process+0x59c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b370:	4619      	mov	r1, r3
 800b372:	693a      	ldr	r2, [r7, #16]
 800b374:	2334      	movs	r3, #52	; 0x34
 800b376:	fb03 f301 	mul.w	r3, r3, r1
 800b37a:	4413      	add	r3, r2
 800b37c:	3390      	adds	r3, #144	; 0x90
 800b37e:	2202      	movs	r2, #2
 800b380:	701a      	strb	r2, [r3, #0]
                  break;
 800b382:	e09b      	b.n	800b4bc <USBH_MSC_Process+0x6d4>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b38a:	4619      	mov	r1, r3
 800b38c:	693a      	ldr	r2, [r7, #16]
 800b38e:	2334      	movs	r3, #52	; 0x34
 800b390:	fb03 f301 	mul.w	r3, r3, r1
 800b394:	4413      	add	r3, r2
 800b396:	339c      	adds	r3, #156	; 0x9c
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	4619      	mov	r1, r3
 800b39c:	484f      	ldr	r0, [pc, #316]	; (800b4dc <USBH_MSC_Process+0x6f4>)
 800b39e:	f00f fa83 	bl	801a8a8 <iprintf>
 800b3a2:	200a      	movs	r0, #10
 800b3a4:	f00f fa98 	bl	801a8d8 <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	693a      	ldr	r2, [r7, #16]
 800b3b2:	2334      	movs	r3, #52	; 0x34
 800b3b4:	fb03 f301 	mul.w	r3, r3, r1
 800b3b8:	4413      	add	r3, r2
 800b3ba:	339d      	adds	r3, #157	; 0x9d
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	4619      	mov	r1, r3
 800b3c0:	4847      	ldr	r0, [pc, #284]	; (800b4e0 <USBH_MSC_Process+0x6f8>)
 800b3c2:	f00f fa71 	bl	801a8a8 <iprintf>
 800b3c6:	200a      	movs	r0, #10
 800b3c8:	f00f fa86 	bl	801a8d8 <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	693a      	ldr	r2, [r7, #16]
 800b3d6:	2334      	movs	r3, #52	; 0x34
 800b3d8:	fb03 f301 	mul.w	r3, r3, r1
 800b3dc:	4413      	add	r3, r2
 800b3de:	339e      	adds	r3, #158	; 0x9e
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	483f      	ldr	r0, [pc, #252]	; (800b4e4 <USBH_MSC_Process+0x6fc>)
 800b3e6:	f00f fa5f 	bl	801a8a8 <iprintf>
 800b3ea:	200a      	movs	r0, #10
 800b3ec:	f00f fa74 	bl	801a8d8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	693a      	ldr	r2, [r7, #16]
 800b3fa:	2334      	movs	r3, #52	; 0x34
 800b3fc:	fb03 f301 	mul.w	r3, r3, r1
 800b400:	4413      	add	r3, r2
 800b402:	3390      	adds	r3, #144	; 0x90
 800b404:	2201      	movs	r2, #1
 800b406:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b40e:	3301      	adds	r3, #1
 800b410:	b29a      	uxth	r2, r3
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800b418:	7bfb      	ldrb	r3, [r7, #15]
 800b41a:	2b02      	cmp	r3, #2
 800b41c:	d112      	bne.n	800b444 <USBH_MSC_Process+0x65c>
              USBH_UsrLog("MSC Device NOT ready");
 800b41e:	4832      	ldr	r0, [pc, #200]	; (800b4e8 <USBH_MSC_Process+0x700>)
 800b420:	f00f fa42 	bl	801a8a8 <iprintf>
 800b424:	200a      	movs	r0, #10
 800b426:	f00f fa57 	bl	801a8d8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b430:	4619      	mov	r1, r3
 800b432:	693a      	ldr	r2, [r7, #16]
 800b434:	2334      	movs	r3, #52	; 0x34
 800b436:	fb03 f301 	mul.w	r3, r3, r1
 800b43a:	4413      	add	r3, r2
 800b43c:	3390      	adds	r3, #144	; 0x90
 800b43e:	2208      	movs	r2, #8
 800b440:	701a      	strb	r2, [r3, #0]
            break;
 800b442:	e03a      	b.n	800b4ba <USBH_MSC_Process+0x6d2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b444:	7bfb      	ldrb	r3, [r7, #15]
 800b446:	2b04      	cmp	r3, #4
 800b448:	d137      	bne.n	800b4ba <USBH_MSC_Process+0x6d2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b450:	4619      	mov	r1, r3
 800b452:	693a      	ldr	r2, [r7, #16]
 800b454:	2334      	movs	r3, #52	; 0x34
 800b456:	fb03 f301 	mul.w	r3, r3, r1
 800b45a:	4413      	add	r3, r2
 800b45c:	3390      	adds	r3, #144	; 0x90
 800b45e:	2201      	movs	r2, #1
 800b460:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b468:	4619      	mov	r1, r3
 800b46a:	693a      	ldr	r2, [r7, #16]
 800b46c:	2334      	movs	r3, #52	; 0x34
 800b46e:	fb03 f301 	mul.w	r3, r3, r1
 800b472:	4413      	add	r3, r2
 800b474:	3391      	adds	r3, #145	; 0x91
 800b476:	2202      	movs	r2, #2
 800b478:	701a      	strb	r2, [r3, #0]
            break;
 800b47a:	e01e      	b.n	800b4ba <USBH_MSC_Process+0x6d2>
            MSC_Handle->current_lun++;
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b482:	3301      	adds	r3, #1
 800b484:	b29a      	uxth	r2, r3
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b48c:	e016      	b.n	800b4bc <USBH_MSC_Process+0x6d4>
        MSC_Handle->current_lun = 0U;
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	2200      	movs	r2, #0
 800b492:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	2201      	movs	r2, #1
 800b49a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b4a2:	2102      	movs	r1, #2
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	4798      	blx	r3
      break;
 800b4a8:	e00c      	b.n	800b4c4 <USBH_MSC_Process+0x6dc>
            break;
 800b4aa:	bf00      	nop
 800b4ac:	e00a      	b.n	800b4c4 <USBH_MSC_Process+0x6dc>
            break;
 800b4ae:	bf00      	nop
 800b4b0:	e008      	b.n	800b4c4 <USBH_MSC_Process+0x6dc>
            break;
 800b4b2:	bf00      	nop
 800b4b4:	e006      	b.n	800b4c4 <USBH_MSC_Process+0x6dc>
            break;
 800b4b6:	bf00      	nop
 800b4b8:	e004      	b.n	800b4c4 <USBH_MSC_Process+0x6dc>
            break;
 800b4ba:	bf00      	nop
      break;
 800b4bc:	e002      	b.n	800b4c4 <USBH_MSC_Process+0x6dc>
      error = USBH_OK;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	75fb      	strb	r3, [r7, #23]
      break;
 800b4c2:	bf00      	nop
  }
  return error;
 800b4c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3718      	adds	r7, #24
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	0801ba00 	.word	0x0801ba00
 800b4d4:	0801ba20 	.word	0x0801ba20
 800b4d8:	0801ba34 	.word	0x0801ba34
 800b4dc:	0801ba48 	.word	0x0801ba48
 800b4e0:	0801ba58 	.word	0x0801ba58
 800b4e4:	0801ba74 	.word	0x0801ba74
 800b4e8:	0801b9e8 	.word	0x0801b9e8

0800b4ec <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	370c      	adds	r7, #12
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr
	...

0800b504 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b088      	sub	sp, #32
 800b508:	af02      	add	r7, sp, #8
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	460b      	mov	r3, r1
 800b50e:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b516:	69db      	ldr	r3, [r3, #28]
 800b518:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800b51a:	2301      	movs	r3, #1
 800b51c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800b51e:	2301      	movs	r3, #1
 800b520:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800b522:	78fb      	ldrb	r3, [r7, #3]
 800b524:	693a      	ldr	r2, [r7, #16]
 800b526:	2134      	movs	r1, #52	; 0x34
 800b528:	fb01 f303 	mul.w	r3, r1, r3
 800b52c:	4413      	add	r3, r2
 800b52e:	3390      	adds	r3, #144	; 0x90
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	2b07      	cmp	r3, #7
 800b534:	d03d      	beq.n	800b5b2 <USBH_MSC_RdWrProcess+0xae>
 800b536:	2b07      	cmp	r3, #7
 800b538:	f300 80dc 	bgt.w	800b6f4 <USBH_MSC_RdWrProcess+0x1f0>
 800b53c:	2b05      	cmp	r3, #5
 800b53e:	d06d      	beq.n	800b61c <USBH_MSC_RdWrProcess+0x118>
 800b540:	2b06      	cmp	r3, #6
 800b542:	f040 80d7 	bne.w	800b6f4 <USBH_MSC_RdWrProcess+0x1f0>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800b546:	78f9      	ldrb	r1, [r7, #3]
 800b548:	2300      	movs	r3, #0
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	2300      	movs	r3, #0
 800b54e:	2200      	movs	r2, #0
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 fee2 	bl	800c31a <USBH_MSC_SCSI_Read>
 800b556:	4603      	mov	r3, r0
 800b558:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b55a:	7bfb      	ldrb	r3, [r7, #15]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10b      	bne.n	800b578 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b560:	78fb      	ldrb	r3, [r7, #3]
 800b562:	693a      	ldr	r2, [r7, #16]
 800b564:	2134      	movs	r1, #52	; 0x34
 800b566:	fb01 f303 	mul.w	r3, r1, r3
 800b56a:	4413      	add	r3, r2
 800b56c:	3390      	adds	r3, #144	; 0x90
 800b56e:	2201      	movs	r2, #1
 800b570:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b572:	2300      	movs	r3, #0
 800b574:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b576:	e0bf      	b.n	800b6f8 <USBH_MSC_RdWrProcess+0x1f4>
      else if (scsi_status == USBH_FAIL)
 800b578:	7bfb      	ldrb	r3, [r7, #15]
 800b57a:	2b02      	cmp	r3, #2
 800b57c:	d109      	bne.n	800b592 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b57e:	78fb      	ldrb	r3, [r7, #3]
 800b580:	693a      	ldr	r2, [r7, #16]
 800b582:	2134      	movs	r1, #52	; 0x34
 800b584:	fb01 f303 	mul.w	r3, r1, r3
 800b588:	4413      	add	r3, r2
 800b58a:	3390      	adds	r3, #144	; 0x90
 800b58c:	2205      	movs	r2, #5
 800b58e:	701a      	strb	r2, [r3, #0]
      break;
 800b590:	e0b2      	b.n	800b6f8 <USBH_MSC_RdWrProcess+0x1f4>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b592:	7bfb      	ldrb	r3, [r7, #15]
 800b594:	2b04      	cmp	r3, #4
 800b596:	f040 80af 	bne.w	800b6f8 <USBH_MSC_RdWrProcess+0x1f4>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b59a:	78fb      	ldrb	r3, [r7, #3]
 800b59c:	693a      	ldr	r2, [r7, #16]
 800b59e:	2134      	movs	r1, #52	; 0x34
 800b5a0:	fb01 f303 	mul.w	r3, r1, r3
 800b5a4:	4413      	add	r3, r2
 800b5a6:	3390      	adds	r3, #144	; 0x90
 800b5a8:	2208      	movs	r2, #8
 800b5aa:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b5ac:	2302      	movs	r3, #2
 800b5ae:	75fb      	strb	r3, [r7, #23]
      break;
 800b5b0:	e0a2      	b.n	800b6f8 <USBH_MSC_RdWrProcess+0x1f4>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800b5b2:	78f9      	ldrb	r1, [r7, #3]
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	9300      	str	r3, [sp, #0]
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 fe41 	bl	800c244 <USBH_MSC_SCSI_Write>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b5c6:	7bfb      	ldrb	r3, [r7, #15]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d10b      	bne.n	800b5e4 <USBH_MSC_RdWrProcess+0xe0>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b5cc:	78fb      	ldrb	r3, [r7, #3]
 800b5ce:	693a      	ldr	r2, [r7, #16]
 800b5d0:	2134      	movs	r1, #52	; 0x34
 800b5d2:	fb01 f303 	mul.w	r3, r1, r3
 800b5d6:	4413      	add	r3, r2
 800b5d8:	3390      	adds	r3, #144	; 0x90
 800b5da:	2201      	movs	r2, #1
 800b5dc:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b5e2:	e08b      	b.n	800b6fc <USBH_MSC_RdWrProcess+0x1f8>
      else if (scsi_status == USBH_FAIL)
 800b5e4:	7bfb      	ldrb	r3, [r7, #15]
 800b5e6:	2b02      	cmp	r3, #2
 800b5e8:	d109      	bne.n	800b5fe <USBH_MSC_RdWrProcess+0xfa>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b5ea:	78fb      	ldrb	r3, [r7, #3]
 800b5ec:	693a      	ldr	r2, [r7, #16]
 800b5ee:	2134      	movs	r1, #52	; 0x34
 800b5f0:	fb01 f303 	mul.w	r3, r1, r3
 800b5f4:	4413      	add	r3, r2
 800b5f6:	3390      	adds	r3, #144	; 0x90
 800b5f8:	2205      	movs	r2, #5
 800b5fa:	701a      	strb	r2, [r3, #0]
      break;
 800b5fc:	e07e      	b.n	800b6fc <USBH_MSC_RdWrProcess+0x1f8>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b5fe:	7bfb      	ldrb	r3, [r7, #15]
 800b600:	2b04      	cmp	r3, #4
 800b602:	d17b      	bne.n	800b6fc <USBH_MSC_RdWrProcess+0x1f8>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b604:	78fb      	ldrb	r3, [r7, #3]
 800b606:	693a      	ldr	r2, [r7, #16]
 800b608:	2134      	movs	r1, #52	; 0x34
 800b60a:	fb01 f303 	mul.w	r3, r1, r3
 800b60e:	4413      	add	r3, r2
 800b610:	3390      	adds	r3, #144	; 0x90
 800b612:	2208      	movs	r2, #8
 800b614:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b616:	2302      	movs	r3, #2
 800b618:	75fb      	strb	r3, [r7, #23]
      break;
 800b61a:	e06f      	b.n	800b6fc <USBH_MSC_RdWrProcess+0x1f8>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800b61c:	78fb      	ldrb	r3, [r7, #3]
 800b61e:	2234      	movs	r2, #52	; 0x34
 800b620:	fb02 f303 	mul.w	r3, r2, r3
 800b624:	3398      	adds	r3, #152	; 0x98
 800b626:	693a      	ldr	r2, [r7, #16]
 800b628:	4413      	add	r3, r2
 800b62a:	1d1a      	adds	r2, r3, #4
 800b62c:	78fb      	ldrb	r3, [r7, #3]
 800b62e:	4619      	mov	r1, r3
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 fd8e 	bl	800c152 <USBH_MSC_SCSI_RequestSense>
 800b636:	4603      	mov	r3, r0
 800b638:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b63a:	7bfb      	ldrb	r3, [r7, #15]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d140      	bne.n	800b6c2 <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 800b640:	78fb      	ldrb	r3, [r7, #3]
 800b642:	693a      	ldr	r2, [r7, #16]
 800b644:	2134      	movs	r1, #52	; 0x34
 800b646:	fb01 f303 	mul.w	r3, r1, r3
 800b64a:	4413      	add	r3, r2
 800b64c:	339c      	adds	r3, #156	; 0x9c
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	4619      	mov	r1, r3
 800b652:	482e      	ldr	r0, [pc, #184]	; (800b70c <USBH_MSC_RdWrProcess+0x208>)
 800b654:	f00f f928 	bl	801a8a8 <iprintf>
 800b658:	200a      	movs	r0, #10
 800b65a:	f00f f93d 	bl	801a8d8 <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
 800b65e:	78fb      	ldrb	r3, [r7, #3]
 800b660:	693a      	ldr	r2, [r7, #16]
 800b662:	2134      	movs	r1, #52	; 0x34
 800b664:	fb01 f303 	mul.w	r3, r1, r3
 800b668:	4413      	add	r3, r2
 800b66a:	339d      	adds	r3, #157	; 0x9d
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	4619      	mov	r1, r3
 800b670:	4827      	ldr	r0, [pc, #156]	; (800b710 <USBH_MSC_RdWrProcess+0x20c>)
 800b672:	f00f f919 	bl	801a8a8 <iprintf>
 800b676:	200a      	movs	r0, #10
 800b678:	f00f f92e 	bl	801a8d8 <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
 800b67c:	78fb      	ldrb	r3, [r7, #3]
 800b67e:	693a      	ldr	r2, [r7, #16]
 800b680:	2134      	movs	r1, #52	; 0x34
 800b682:	fb01 f303 	mul.w	r3, r1, r3
 800b686:	4413      	add	r3, r2
 800b688:	339e      	adds	r3, #158	; 0x9e
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	4619      	mov	r1, r3
 800b68e:	4821      	ldr	r0, [pc, #132]	; (800b714 <USBH_MSC_RdWrProcess+0x210>)
 800b690:	f00f f90a 	bl	801a8a8 <iprintf>
 800b694:	200a      	movs	r0, #10
 800b696:	f00f f91f 	bl	801a8d8 <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b69a:	78fb      	ldrb	r3, [r7, #3]
 800b69c:	693a      	ldr	r2, [r7, #16]
 800b69e:	2134      	movs	r1, #52	; 0x34
 800b6a0:	fb01 f303 	mul.w	r3, r1, r3
 800b6a4:	4413      	add	r3, r2
 800b6a6:	3390      	adds	r3, #144	; 0x90
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800b6ac:	78fb      	ldrb	r3, [r7, #3]
 800b6ae:	693a      	ldr	r2, [r7, #16]
 800b6b0:	2134      	movs	r1, #52	; 0x34
 800b6b2:	fb01 f303 	mul.w	r3, r1, r3
 800b6b6:	4413      	add	r3, r2
 800b6b8:	3391      	adds	r3, #145	; 0x91
 800b6ba:	2202      	movs	r2, #2
 800b6bc:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800b6be:	2302      	movs	r3, #2
 800b6c0:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800b6c2:	7bfb      	ldrb	r3, [r7, #15]
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	d106      	bne.n	800b6d6 <USBH_MSC_RdWrProcess+0x1d2>
      {
        USBH_UsrLog("MSC Device NOT ready");
 800b6c8:	4813      	ldr	r0, [pc, #76]	; (800b718 <USBH_MSC_RdWrProcess+0x214>)
 800b6ca:	f00f f8ed 	bl	801a8a8 <iprintf>
 800b6ce:	200a      	movs	r0, #10
 800b6d0:	f00f f902 	bl	801a8d8 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b6d4:	e014      	b.n	800b700 <USBH_MSC_RdWrProcess+0x1fc>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b6d6:	7bfb      	ldrb	r3, [r7, #15]
 800b6d8:	2b04      	cmp	r3, #4
 800b6da:	d111      	bne.n	800b700 <USBH_MSC_RdWrProcess+0x1fc>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b6dc:	78fb      	ldrb	r3, [r7, #3]
 800b6de:	693a      	ldr	r2, [r7, #16]
 800b6e0:	2134      	movs	r1, #52	; 0x34
 800b6e2:	fb01 f303 	mul.w	r3, r1, r3
 800b6e6:	4413      	add	r3, r2
 800b6e8:	3390      	adds	r3, #144	; 0x90
 800b6ea:	2208      	movs	r2, #8
 800b6ec:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b6ee:	2302      	movs	r3, #2
 800b6f0:	75fb      	strb	r3, [r7, #23]
      break;
 800b6f2:	e005      	b.n	800b700 <USBH_MSC_RdWrProcess+0x1fc>

    default:
      break;
 800b6f4:	bf00      	nop
 800b6f6:	e004      	b.n	800b702 <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800b6f8:	bf00      	nop
 800b6fa:	e002      	b.n	800b702 <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800b6fc:	bf00      	nop
 800b6fe:	e000      	b.n	800b702 <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800b700:	bf00      	nop

  }
  return error;
 800b702:	7dfb      	ldrb	r3, [r7, #23]
}
 800b704:	4618      	mov	r0, r3
 800b706:	3718      	adds	r7, #24
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	0801ba48 	.word	0x0801ba48
 800b710:	0801ba58 	.word	0x0801ba58
 800b714:	0801ba74 	.word	0x0801ba74
 800b718:	0801b9e8 	.word	0x0801b9e8

0800b71c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b085      	sub	sp, #20
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	460b      	mov	r3, r1
 800b726:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b72e:	69db      	ldr	r3, [r3, #28]
 800b730:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	b2db      	uxtb	r3, r3
 800b738:	2b0b      	cmp	r3, #11
 800b73a:	d10c      	bne.n	800b756 <USBH_MSC_UnitIsReady+0x3a>
 800b73c:	78fb      	ldrb	r3, [r7, #3]
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	2134      	movs	r1, #52	; 0x34
 800b742:	fb01 f303 	mul.w	r3, r1, r3
 800b746:	4413      	add	r3, r2
 800b748:	3391      	adds	r3, #145	; 0x91
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d102      	bne.n	800b756 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800b750:	2301      	movs	r3, #1
 800b752:	73fb      	strb	r3, [r7, #15]
 800b754:	e001      	b.n	800b75a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800b756:	2300      	movs	r3, #0
 800b758:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800b75a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3714      	adds	r7, #20
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b086      	sub	sp, #24
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	460b      	mov	r3, r1
 800b772:	607a      	str	r2, [r7, #4]
 800b774:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b77c:	69db      	ldr	r3, [r3, #28]
 800b77e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	b2db      	uxtb	r3, r3
 800b786:	2b0b      	cmp	r3, #11
 800b788:	d10d      	bne.n	800b7a6 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800b78a:	7afb      	ldrb	r3, [r7, #11]
 800b78c:	2234      	movs	r2, #52	; 0x34
 800b78e:	fb02 f303 	mul.w	r3, r2, r3
 800b792:	3390      	adds	r3, #144	; 0x90
 800b794:	697a      	ldr	r2, [r7, #20]
 800b796:	4413      	add	r3, r2
 800b798:	2234      	movs	r2, #52	; 0x34
 800b79a:	4619      	mov	r1, r3
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f00e ffc3 	bl	801a728 <memcpy>
    return USBH_OK;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	e000      	b.n	800b7a8 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800b7a6:	2302      	movs	r3, #2
  }
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3718      	adds	r7, #24
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b088      	sub	sp, #32
 800b7b4:	af02      	add	r7, sp, #8
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	607a      	str	r2, [r7, #4]
 800b7ba:	603b      	str	r3, [r7, #0]
 800b7bc:	460b      	mov	r3, r1
 800b7be:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7c6:	69db      	ldr	r3, [r3, #28]
 800b7c8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d00e      	beq.n	800b7f4 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800b7dc:	2b0b      	cmp	r3, #11
 800b7de:	d109      	bne.n	800b7f4 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800b7e0:	7afb      	ldrb	r3, [r7, #11]
 800b7e2:	697a      	ldr	r2, [r7, #20]
 800b7e4:	2134      	movs	r1, #52	; 0x34
 800b7e6:	fb01 f303 	mul.w	r3, r1, r3
 800b7ea:	4413      	add	r3, r2
 800b7ec:	3390      	adds	r3, #144	; 0x90
 800b7ee:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d001      	beq.n	800b7f8 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	e040      	b.n	800b87a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	2206      	movs	r2, #6
 800b7fc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800b7fe:	7afb      	ldrb	r3, [r7, #11]
 800b800:	697a      	ldr	r2, [r7, #20]
 800b802:	2134      	movs	r1, #52	; 0x34
 800b804:	fb01 f303 	mul.w	r3, r1, r3
 800b808:	4413      	add	r3, r2
 800b80a:	3390      	adds	r3, #144	; 0x90
 800b80c:	2206      	movs	r2, #6
 800b80e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800b810:	7afb      	ldrb	r3, [r7, #11]
 800b812:	b29a      	uxth	r2, r3
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800b81a:	7af9      	ldrb	r1, [r7, #11]
 800b81c:	6a3b      	ldr	r3, [r7, #32]
 800b81e:	9300      	str	r3, [sp, #0]
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	68f8      	ldr	r0, [r7, #12]
 800b826:	f000 fd78 	bl	800c31a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b830:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b832:	e016      	b.n	800b862 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	1ad2      	subs	r2, r2, r3
 800b83e:	6a3b      	ldr	r3, [r7, #32]
 800b840:	f242 7110 	movw	r1, #10000	; 0x2710
 800b844:	fb01 f303 	mul.w	r3, r1, r3
 800b848:	429a      	cmp	r2, r3
 800b84a:	d805      	bhi.n	800b858 <USBH_MSC_Read+0xa8>
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b852:	b2db      	uxtb	r3, r3
 800b854:	2b00      	cmp	r3, #0
 800b856:	d104      	bne.n	800b862 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	2201      	movs	r2, #1
 800b85c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b85e:	2302      	movs	r3, #2
 800b860:	e00b      	b.n	800b87a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b862:	7afb      	ldrb	r3, [r7, #11]
 800b864:	4619      	mov	r1, r3
 800b866:	68f8      	ldr	r0, [r7, #12]
 800b868:	f7ff fe4c 	bl	800b504 <USBH_MSC_RdWrProcess>
 800b86c:	4603      	mov	r3, r0
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d0e0      	beq.n	800b834 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	2201      	movs	r2, #1
 800b876:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800b878:	2300      	movs	r3, #0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3718      	adds	r7, #24
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}

0800b882 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800b882:	b580      	push	{r7, lr}
 800b884:	b088      	sub	sp, #32
 800b886:	af02      	add	r7, sp, #8
 800b888:	60f8      	str	r0, [r7, #12]
 800b88a:	607a      	str	r2, [r7, #4]
 800b88c:	603b      	str	r3, [r7, #0]
 800b88e:	460b      	mov	r3, r1
 800b890:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b898:	69db      	ldr	r3, [r3, #28]
 800b89a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d00e      	beq.n	800b8c6 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800b8ae:	2b0b      	cmp	r3, #11
 800b8b0:	d109      	bne.n	800b8c6 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800b8b2:	7afb      	ldrb	r3, [r7, #11]
 800b8b4:	697a      	ldr	r2, [r7, #20]
 800b8b6:	2134      	movs	r1, #52	; 0x34
 800b8b8:	fb01 f303 	mul.w	r3, r1, r3
 800b8bc:	4413      	add	r3, r2
 800b8be:	3390      	adds	r3, #144	; 0x90
 800b8c0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d001      	beq.n	800b8ca <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800b8c6:	2302      	movs	r3, #2
 800b8c8:	e040      	b.n	800b94c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	2207      	movs	r2, #7
 800b8ce:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800b8d0:	7afb      	ldrb	r3, [r7, #11]
 800b8d2:	697a      	ldr	r2, [r7, #20]
 800b8d4:	2134      	movs	r1, #52	; 0x34
 800b8d6:	fb01 f303 	mul.w	r3, r1, r3
 800b8da:	4413      	add	r3, r2
 800b8dc:	3390      	adds	r3, #144	; 0x90
 800b8de:	2207      	movs	r2, #7
 800b8e0:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800b8e2:	7afb      	ldrb	r3, [r7, #11]
 800b8e4:	b29a      	uxth	r2, r3
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800b8ec:	7af9      	ldrb	r1, [r7, #11]
 800b8ee:	6a3b      	ldr	r3, [r7, #32]
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	687a      	ldr	r2, [r7, #4]
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	f000 fca4 	bl	800c244 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b902:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b904:	e016      	b.n	800b934 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	1ad2      	subs	r2, r2, r3
 800b910:	6a3b      	ldr	r3, [r7, #32]
 800b912:	f242 7110 	movw	r1, #10000	; 0x2710
 800b916:	fb01 f303 	mul.w	r3, r1, r3
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d805      	bhi.n	800b92a <USBH_MSC_Write+0xa8>
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b924:	b2db      	uxtb	r3, r3
 800b926:	2b00      	cmp	r3, #0
 800b928:	d104      	bne.n	800b934 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	2201      	movs	r2, #1
 800b92e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b930:	2302      	movs	r3, #2
 800b932:	e00b      	b.n	800b94c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b934:	7afb      	ldrb	r3, [r7, #11]
 800b936:	4619      	mov	r1, r3
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f7ff fde3 	bl	800b504 <USBH_MSC_RdWrProcess>
 800b93e:	4603      	mov	r3, r0
 800b940:	2b01      	cmp	r3, #1
 800b942:	d0e0      	beq.n	800b906 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	2201      	movs	r2, #1
 800b948:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800b94a:	2300      	movs	r3, #0
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3718      	adds	r7, #24
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2221      	movs	r2, #33	; 0x21
 800b960:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	22ff      	movs	r2, #255	; 0xff
 800b966:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2200      	movs	r2, #0
 800b96c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800b97a:	2200      	movs	r2, #0
 800b97c:	2100      	movs	r1, #0
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f001 ff67 	bl	800d852 <USBH_CtlReq>
 800b984:	4603      	mov	r3, r0
}
 800b986:	4618      	mov	r0, r3
 800b988:	3708      	adds	r7, #8
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b082      	sub	sp, #8
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
 800b996:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	22a1      	movs	r2, #161	; 0xa1
 800b99c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	22fe      	movs	r2, #254	; 0xfe
 800b9a2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	6839      	ldr	r1, [r7, #0]
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f001 ff49 	bl	800d852 <USBH_CtlReq>
 800b9c0:	4603      	mov	r3, r0
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3708      	adds	r7, #8
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
	...

0800b9cc <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9da:	69db      	ldr	r3, [r3, #28]
 800b9dc:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	4a09      	ldr	r2, [pc, #36]	; (800ba08 <USBH_MSC_BOT_Init+0x3c>)
 800b9e2:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	4a09      	ldr	r2, [pc, #36]	; (800ba0c <USBH_MSC_BOT_Init+0x40>)
 800b9e8:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800b9fa:	2300      	movs	r3, #0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3714      	adds	r7, #20
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr
 800ba08:	43425355 	.word	0x43425355
 800ba0c:	20304050 	.word	0x20304050

0800ba10 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b088      	sub	sp, #32
 800ba14:	af02      	add	r7, sp, #8
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	460b      	mov	r3, r1
 800ba1a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800ba20:	2301      	movs	r3, #1
 800ba22:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800ba24:	2301      	movs	r3, #1
 800ba26:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba32:	69db      	ldr	r3, [r3, #28]
 800ba34:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800ba36:	2300      	movs	r3, #0
 800ba38:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ba40:	3b01      	subs	r3, #1
 800ba42:	2b0a      	cmp	r3, #10
 800ba44:	f200 819e 	bhi.w	800bd84 <USBH_MSC_BOT_Process+0x374>
 800ba48:	a201      	add	r2, pc, #4	; (adr r2, 800ba50 <USBH_MSC_BOT_Process+0x40>)
 800ba4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba4e:	bf00      	nop
 800ba50:	0800ba7d 	.word	0x0800ba7d
 800ba54:	0800baa5 	.word	0x0800baa5
 800ba58:	0800bb0f 	.word	0x0800bb0f
 800ba5c:	0800bb2d 	.word	0x0800bb2d
 800ba60:	0800bbb1 	.word	0x0800bbb1
 800ba64:	0800bbd3 	.word	0x0800bbd3
 800ba68:	0800bc6b 	.word	0x0800bc6b
 800ba6c:	0800bc87 	.word	0x0800bc87
 800ba70:	0800bcd9 	.word	0x0800bcd9
 800ba74:	0800bd09 	.word	0x0800bd09
 800ba78:	0800bd6b 	.word	0x0800bd6b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	78fa      	ldrb	r2, [r7, #3]
 800ba80:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	2202      	movs	r2, #2
 800ba88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	795b      	ldrb	r3, [r3, #5]
 800ba96:	2201      	movs	r2, #1
 800ba98:	9200      	str	r2, [sp, #0]
 800ba9a:	221f      	movs	r2, #31
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f002 f8f4 	bl	800dc8a <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800baa2:	e17e      	b.n	800bda2 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	795b      	ldrb	r3, [r3, #5]
 800baa8:	4619      	mov	r1, r3
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f00e fd42 	bl	801a534 <USBH_LL_GetURBState>
 800bab0:	4603      	mov	r3, r0
 800bab2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800bab4:	7d3b      	ldrb	r3, [r7, #20]
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d118      	bne.n	800baec <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00f      	beq.n	800bae2 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800bac8:	b25b      	sxtb	r3, r3
 800baca:	2b00      	cmp	r3, #0
 800bacc:	da04      	bge.n	800bad8 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	2203      	movs	r2, #3
 800bad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bad6:	e157      	b.n	800bd88 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	2205      	movs	r2, #5
 800badc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bae0:	e152      	b.n	800bd88 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	2207      	movs	r2, #7
 800bae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800baea:	e14d      	b.n	800bd88 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800baec:	7d3b      	ldrb	r3, [r7, #20]
 800baee:	2b02      	cmp	r3, #2
 800baf0:	d104      	bne.n	800bafc <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	2201      	movs	r2, #1
 800baf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bafa:	e145      	b.n	800bd88 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800bafc:	7d3b      	ldrb	r3, [r7, #20]
 800bafe:	2b05      	cmp	r3, #5
 800bb00:	f040 8142 	bne.w	800bd88 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	220a      	movs	r2, #10
 800bb08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bb0c:	e13c      	b.n	800bd88 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	895a      	ldrh	r2, [r3, #10]
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	791b      	ldrb	r3, [r3, #4]
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f002 f8d9 	bl	800dcd4 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	2204      	movs	r2, #4
 800bb26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800bb2a:	e13a      	b.n	800bda2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	791b      	ldrb	r3, [r3, #4]
 800bb30:	4619      	mov	r1, r3
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f00e fcfe 	bl	801a534 <USBH_LL_GetURBState>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800bb3c:	7d3b      	ldrb	r3, [r7, #20]
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d12d      	bne.n	800bb9e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb46:	693a      	ldr	r2, [r7, #16]
 800bb48:	8952      	ldrh	r2, [r2, #10]
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d910      	bls.n	800bb70 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb54:	693a      	ldr	r2, [r7, #16]
 800bb56:	8952      	ldrh	r2, [r2, #10]
 800bb58:	441a      	add	r2, r3
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb64:	693a      	ldr	r2, [r7, #16]
 800bb66:	8952      	ldrh	r2, [r2, #10]
 800bb68:	1a9a      	subs	r2, r3, r2
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	65da      	str	r2, [r3, #92]	; 0x5c
 800bb6e:	e002      	b.n	800bb76 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	2200      	movs	r2, #0
 800bb74:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d00a      	beq.n	800bb94 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	895a      	ldrh	r2, [r3, #10]
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	791b      	ldrb	r3, [r3, #4]
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f002 f8a1 	bl	800dcd4 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800bb92:	e0fb      	b.n	800bd8c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	2207      	movs	r2, #7
 800bb98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bb9c:	e0f6      	b.n	800bd8c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800bb9e:	7d3b      	ldrb	r3, [r7, #20]
 800bba0:	2b05      	cmp	r3, #5
 800bba2:	f040 80f3 	bne.w	800bd8c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	2209      	movs	r2, #9
 800bbaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bbae:	e0ed      	b.n	800bd8c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	891a      	ldrh	r2, [r3, #8]
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	795b      	ldrb	r3, [r3, #5]
 800bbbe:	2001      	movs	r0, #1
 800bbc0:	9000      	str	r0, [sp, #0]
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f002 f861 	bl	800dc8a <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	2206      	movs	r2, #6
 800bbcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bbd0:	e0e7      	b.n	800bda2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	795b      	ldrb	r3, [r3, #5]
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f00e fcab 	bl	801a534 <USBH_LL_GetURBState>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800bbe2:	7d3b      	ldrb	r3, [r7, #20]
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d12f      	bne.n	800bc48 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbec:	693a      	ldr	r2, [r7, #16]
 800bbee:	8912      	ldrh	r2, [r2, #8]
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d910      	bls.n	800bc16 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbfa:	693a      	ldr	r2, [r7, #16]
 800bbfc:	8912      	ldrh	r2, [r2, #8]
 800bbfe:	441a      	add	r2, r3
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc0a:	693a      	ldr	r2, [r7, #16]
 800bc0c:	8912      	ldrh	r2, [r2, #8]
 800bc0e:	1a9a      	subs	r2, r3, r2
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	65da      	str	r2, [r3, #92]	; 0x5c
 800bc14:	e002      	b.n	800bc1c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d00c      	beq.n	800bc3e <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	891a      	ldrh	r2, [r3, #8]
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	795b      	ldrb	r3, [r3, #5]
 800bc32:	2001      	movs	r0, #1
 800bc34:	9000      	str	r0, [sp, #0]
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f002 f827 	bl	800dc8a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800bc3c:	e0a8      	b.n	800bd90 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	2207      	movs	r2, #7
 800bc42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bc46:	e0a3      	b.n	800bd90 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bc48:	7d3b      	ldrb	r3, [r7, #20]
 800bc4a:	2b02      	cmp	r3, #2
 800bc4c:	d104      	bne.n	800bc58 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	2205      	movs	r2, #5
 800bc52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bc56:	e09b      	b.n	800bd90 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800bc58:	7d3b      	ldrb	r3, [r7, #20]
 800bc5a:	2b05      	cmp	r3, #5
 800bc5c:	f040 8098 	bne.w	800bd90 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	220a      	movs	r2, #10
 800bc64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bc68:	e092      	b.n	800bd90 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	791b      	ldrb	r3, [r3, #4]
 800bc74:	220d      	movs	r2, #13
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f002 f82c 	bl	800dcd4 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	2208      	movs	r2, #8
 800bc80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bc84:	e08d      	b.n	800bda2 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	791b      	ldrb	r3, [r3, #4]
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f00e fc51 	bl	801a534 <USBH_LL_GetURBState>
 800bc92:	4603      	mov	r3, r0
 800bc94:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800bc96:	7d3b      	ldrb	r3, [r7, #20]
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d115      	bne.n	800bcc8 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	2201      	movs	r2, #1
 800bca0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	2201      	movs	r2, #1
 800bca8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 f8a9 	bl	800be04 <USBH_MSC_DecodeCSW>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800bcb6:	7d7b      	ldrb	r3, [r7, #21]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d102      	bne.n	800bcc2 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800bcc0:	e068      	b.n	800bd94 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800bcc2:	2302      	movs	r3, #2
 800bcc4:	75fb      	strb	r3, [r7, #23]
      break;
 800bcc6:	e065      	b.n	800bd94 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800bcc8:	7d3b      	ldrb	r3, [r7, #20]
 800bcca:	2b05      	cmp	r3, #5
 800bccc:	d162      	bne.n	800bd94 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	2209      	movs	r2, #9
 800bcd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bcd6:	e05d      	b.n	800bd94 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800bcd8:	78fb      	ldrb	r3, [r7, #3]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	4619      	mov	r1, r3
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 f864 	bl	800bdac <USBH_MSC_BOT_Abort>
 800bce4:	4603      	mov	r3, r0
 800bce6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800bce8:	7dbb      	ldrb	r3, [r7, #22]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d104      	bne.n	800bcf8 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	2207      	movs	r2, #7
 800bcf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800bcf6:	e04f      	b.n	800bd98 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800bcf8:	7dbb      	ldrb	r3, [r7, #22]
 800bcfa:	2b04      	cmp	r3, #4
 800bcfc:	d14c      	bne.n	800bd98 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	220b      	movs	r2, #11
 800bd02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bd06:	e047      	b.n	800bd98 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800bd08:	78fb      	ldrb	r3, [r7, #3]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 f84c 	bl	800bdac <USBH_MSC_BOT_Abort>
 800bd14:	4603      	mov	r3, r0
 800bd16:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800bd18:	7dbb      	ldrb	r3, [r7, #22]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d11d      	bne.n	800bd5a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	795b      	ldrb	r3, [r3, #5]
 800bd22:	4619      	mov	r1, r3
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f00e fc56 	bl	801a5d6 <USBH_LL_GetToggle>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	7959      	ldrb	r1, [r3, #5]
 800bd32:	7bfb      	ldrb	r3, [r7, #15]
 800bd34:	f1c3 0301 	rsb	r3, r3, #1
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f00e fc1a 	bl	801a576 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	791b      	ldrb	r3, [r3, #4]
 800bd46:	2200      	movs	r2, #0
 800bd48:	4619      	mov	r1, r3
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f00e fc13 	bl	801a576 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	2209      	movs	r2, #9
 800bd54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800bd58:	e020      	b.n	800bd9c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800bd5a:	7dbb      	ldrb	r3, [r7, #22]
 800bd5c:	2b04      	cmp	r3, #4
 800bd5e:	d11d      	bne.n	800bd9c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	220b      	movs	r2, #11
 800bd64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bd68:	e018      	b.n	800bd9c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f7ff fdf2 	bl	800b954 <USBH_MSC_BOT_REQ_Reset>
 800bd70:	4603      	mov	r3, r0
 800bd72:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800bd74:	7dfb      	ldrb	r3, [r7, #23]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d112      	bne.n	800bda0 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800bd82:	e00d      	b.n	800bda0 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800bd84:	bf00      	nop
 800bd86:	e00c      	b.n	800bda2 <USBH_MSC_BOT_Process+0x392>
      break;
 800bd88:	bf00      	nop
 800bd8a:	e00a      	b.n	800bda2 <USBH_MSC_BOT_Process+0x392>
      break;
 800bd8c:	bf00      	nop
 800bd8e:	e008      	b.n	800bda2 <USBH_MSC_BOT_Process+0x392>
      break;
 800bd90:	bf00      	nop
 800bd92:	e006      	b.n	800bda2 <USBH_MSC_BOT_Process+0x392>
      break;
 800bd94:	bf00      	nop
 800bd96:	e004      	b.n	800bda2 <USBH_MSC_BOT_Process+0x392>
      break;
 800bd98:	bf00      	nop
 800bd9a:	e002      	b.n	800bda2 <USBH_MSC_BOT_Process+0x392>
      break;
 800bd9c:	bf00      	nop
 800bd9e:	e000      	b.n	800bda2 <USBH_MSC_BOT_Process+0x392>
      break;
 800bda0:	bf00      	nop
  }
  return status;
 800bda2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3718      	adds	r7, #24
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	70fb      	strb	r3, [r7, #3]
 800bdb8:	4613      	mov	r3, r2
 800bdba:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800bdbc:	2302      	movs	r3, #2
 800bdbe:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bdc6:	69db      	ldr	r3, [r3, #28]
 800bdc8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800bdca:	78bb      	ldrb	r3, [r7, #2]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d002      	beq.n	800bdd6 <USBH_MSC_BOT_Abort+0x2a>
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d009      	beq.n	800bde8 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800bdd4:	e011      	b.n	800bdfa <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	79db      	ldrb	r3, [r3, #7]
 800bdda:	4619      	mov	r1, r3
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f001 fb58 	bl	800d492 <USBH_ClrFeature>
 800bde2:	4603      	mov	r3, r0
 800bde4:	73fb      	strb	r3, [r7, #15]
      break;
 800bde6:	e008      	b.n	800bdfa <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	799b      	ldrb	r3, [r3, #6]
 800bdec:	4619      	mov	r1, r3
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f001 fb4f 	bl	800d492 <USBH_ClrFeature>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	73fb      	strb	r3, [r7, #15]
      break;
 800bdf8:	bf00      	nop
  }
  return status;
 800bdfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3710      	adds	r7, #16
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be12:	69db      	ldr	r3, [r3, #28]
 800be14:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800be16:	2301      	movs	r3, #1
 800be18:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	791b      	ldrb	r3, [r3, #4]
 800be1e:	4619      	mov	r1, r3
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f00e faf5 	bl	801a410 <USBH_LL_GetLastXferSize>
 800be26:	4603      	mov	r3, r0
 800be28:	2b0d      	cmp	r3, #13
 800be2a:	d002      	beq.n	800be32 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800be2c:	2302      	movs	r3, #2
 800be2e:	73fb      	strb	r3, [r7, #15]
 800be30:	e024      	b.n	800be7c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be36:	4a14      	ldr	r2, [pc, #80]	; (800be88 <USBH_MSC_DecodeCSW+0x84>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d11d      	bne.n	800be78 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be44:	429a      	cmp	r2, r3
 800be46:	d119      	bne.n	800be7c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d102      	bne.n	800be58 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800be52:	2300      	movs	r3, #0
 800be54:	73fb      	strb	r3, [r7, #15]
 800be56:	e011      	b.n	800be7c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d102      	bne.n	800be68 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800be62:	2301      	movs	r3, #1
 800be64:	73fb      	strb	r3, [r7, #15]
 800be66:	e009      	b.n	800be7c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800be6e:	2b02      	cmp	r3, #2
 800be70:	d104      	bne.n	800be7c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800be72:	2302      	movs	r3, #2
 800be74:	73fb      	strb	r3, [r7, #15]
 800be76:	e001      	b.n	800be7c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800be78:	2302      	movs	r3, #2
 800be7a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800be7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3710      	adds	r7, #16
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	53425355 	.word	0x53425355

0800be8c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	460b      	mov	r3, r1
 800be96:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800be98:	2302      	movs	r3, #2
 800be9a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bea2:	69db      	ldr	r3, [r3, #28]
 800bea4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800beac:	2b01      	cmp	r3, #1
 800beae:	d002      	beq.n	800beb6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800beb0:	2b02      	cmp	r3, #2
 800beb2:	d021      	beq.n	800bef8 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800beb4:	e028      	b.n	800bf08 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	2200      	movs	r2, #0
 800beba:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	2200      	movs	r2, #0
 800bec0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	220a      	movs	r2, #10
 800bec8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	3363      	adds	r3, #99	; 0x63
 800bed0:	2210      	movs	r2, #16
 800bed2:	2100      	movs	r1, #0
 800bed4:	4618      	mov	r0, r3
 800bed6:	f00e fc35 	bl	801a744 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	2200      	movs	r2, #0
 800bede:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	2201      	movs	r2, #1
 800bee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	2202      	movs	r2, #2
 800beee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800bef2:	2301      	movs	r3, #1
 800bef4:	73fb      	strb	r3, [r7, #15]
      break;
 800bef6:	e007      	b.n	800bf08 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bef8:	78fb      	ldrb	r3, [r7, #3]
 800befa:	4619      	mov	r1, r3
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f7ff fd87 	bl	800ba10 <USBH_MSC_BOT_Process>
 800bf02:	4603      	mov	r3, r0
 800bf04:	73fb      	strb	r3, [r7, #15]
      break;
 800bf06:	bf00      	nop
  }

  return error;
 800bf08:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3710      	adds	r7, #16
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b086      	sub	sp, #24
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	60f8      	str	r0, [r7, #12]
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	607a      	str	r2, [r7, #4]
 800bf1e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800bf20:	2301      	movs	r3, #1
 800bf22:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf2a:	69db      	ldr	r3, [r3, #28]
 800bf2c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d002      	beq.n	800bf3e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800bf38:	2b02      	cmp	r3, #2
 800bf3a:	d027      	beq.n	800bf8c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800bf3c:	e05f      	b.n	800bffe <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	2208      	movs	r2, #8
 800bf42:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	2280      	movs	r2, #128	; 0x80
 800bf48:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	220a      	movs	r2, #10
 800bf50:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	3363      	adds	r3, #99	; 0x63
 800bf58:	2210      	movs	r2, #16
 800bf5a:	2100      	movs	r1, #0
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f00e fbf1 	bl	801a744 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	2225      	movs	r2, #37	; 0x25
 800bf66:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	2202      	movs	r2, #2
 800bf76:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	f103 0210 	add.w	r2, r3, #16
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bf86:	2301      	movs	r3, #1
 800bf88:	75fb      	strb	r3, [r7, #23]
      break;
 800bf8a:	e038      	b.n	800bffe <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bf8c:	7afb      	ldrb	r3, [r7, #11]
 800bf8e:	4619      	mov	r1, r3
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	f7ff fd3d 	bl	800ba10 <USBH_MSC_BOT_Process>
 800bf96:	4603      	mov	r3, r0
 800bf98:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800bf9a:	7dfb      	ldrb	r3, [r7, #23]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d12d      	bne.n	800bffc <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfa6:	3303      	adds	r3, #3
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	461a      	mov	r2, r3
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfb2:	3302      	adds	r3, #2
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	021b      	lsls	r3, r3, #8
 800bfb8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bfc6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	061b      	lsls	r3, r3, #24
 800bfd2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfde:	3307      	adds	r3, #7
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	b29a      	uxth	r2, r3
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfea:	3306      	adds	r3, #6
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	021b      	lsls	r3, r3, #8
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	4313      	orrs	r3, r2
 800bff6:	b29a      	uxth	r2, r3
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	809a      	strh	r2, [r3, #4]
      break;
 800bffc:	bf00      	nop
  }

  return error;
 800bffe:	7dfb      	ldrb	r3, [r7, #23]
}
 800c000:	4618      	mov	r0, r3
 800c002:	3718      	adds	r7, #24
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b086      	sub	sp, #24
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	460b      	mov	r3, r1
 800c012:	607a      	str	r2, [r7, #4]
 800c014:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800c016:	2302      	movs	r3, #2
 800c018:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c020:	69db      	ldr	r3, [r3, #28]
 800c022:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d002      	beq.n	800c034 <USBH_MSC_SCSI_Inquiry+0x2c>
 800c02e:	2b02      	cmp	r3, #2
 800c030:	d03d      	beq.n	800c0ae <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800c032:	e089      	b.n	800c148 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	2224      	movs	r2, #36	; 0x24
 800c038:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	2280      	movs	r2, #128	; 0x80
 800c03e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	220a      	movs	r2, #10
 800c046:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	3363      	adds	r3, #99	; 0x63
 800c04e:	220a      	movs	r2, #10
 800c050:	2100      	movs	r1, #0
 800c052:	4618      	mov	r0, r3
 800c054:	f00e fb76 	bl	801a744 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	2212      	movs	r2, #18
 800c05c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c060:	7afb      	ldrb	r3, [r7, #11]
 800c062:	015b      	lsls	r3, r3, #5
 800c064:	b2da      	uxtb	r2, r3
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	2200      	movs	r2, #0
 800c070:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	2200      	movs	r2, #0
 800c078:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	2224      	movs	r2, #36	; 0x24
 800c080:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	2200      	movs	r2, #0
 800c088:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	2201      	movs	r2, #1
 800c090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	2202      	movs	r2, #2
 800c098:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	f103 0210 	add.w	r2, r3, #16
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	75fb      	strb	r3, [r7, #23]
      break;
 800c0ac:	e04c      	b.n	800c148 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c0ae:	7afb      	ldrb	r3, [r7, #11]
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	f7ff fcac 	bl	800ba10 <USBH_MSC_BOT_Process>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c0bc:	7dfb      	ldrb	r3, [r7, #23]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d141      	bne.n	800c146 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800c0c2:	2222      	movs	r2, #34	; 0x22
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f00e fb3c 	bl	801a744 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	f003 031f 	and.w	r3, r3, #31
 800c0d8:	b2da      	uxtb	r2, r3
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	095b      	lsrs	r3, r3, #5
 800c0e8:	b2da      	uxtb	r2, r3
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	b25b      	sxtb	r3, r3
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	da03      	bge.n	800c106 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2201      	movs	r2, #1
 800c102:	709a      	strb	r2, [r3, #2]
 800c104:	e002      	b.n	800c10c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2200      	movs	r2, #0
 800c10a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	1cd8      	adds	r0, r3, #3
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c116:	3308      	adds	r3, #8
 800c118:	2208      	movs	r2, #8
 800c11a:	4619      	mov	r1, r3
 800c11c:	f00e fb04 	bl	801a728 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f103 000c 	add.w	r0, r3, #12
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c12c:	3310      	adds	r3, #16
 800c12e:	2210      	movs	r2, #16
 800c130:	4619      	mov	r1, r3
 800c132:	f00e faf9 	bl	801a728 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	331d      	adds	r3, #29
 800c13a:	693a      	ldr	r2, [r7, #16]
 800c13c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800c140:	3220      	adds	r2, #32
 800c142:	6812      	ldr	r2, [r2, #0]
 800c144:	601a      	str	r2, [r3, #0]
      break;
 800c146:	bf00      	nop
  }

  return error;
 800c148:	7dfb      	ldrb	r3, [r7, #23]
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3718      	adds	r7, #24
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800c152:	b580      	push	{r7, lr}
 800c154:	b086      	sub	sp, #24
 800c156:	af00      	add	r7, sp, #0
 800c158:	60f8      	str	r0, [r7, #12]
 800c15a:	460b      	mov	r3, r1
 800c15c:	607a      	str	r2, [r7, #4]
 800c15e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c160:	2302      	movs	r3, #2
 800c162:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c16a:	69db      	ldr	r3, [r3, #28]
 800c16c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c174:	2b01      	cmp	r3, #1
 800c176:	d002      	beq.n	800c17e <USBH_MSC_SCSI_RequestSense+0x2c>
 800c178:	2b02      	cmp	r3, #2
 800c17a:	d03d      	beq.n	800c1f8 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800c17c:	e05d      	b.n	800c23a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	220e      	movs	r2, #14
 800c182:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	2280      	movs	r2, #128	; 0x80
 800c188:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	220a      	movs	r2, #10
 800c190:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	3363      	adds	r3, #99	; 0x63
 800c198:	2210      	movs	r2, #16
 800c19a:	2100      	movs	r1, #0
 800c19c:	4618      	mov	r0, r3
 800c19e:	f00e fad1 	bl	801a744 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	2203      	movs	r2, #3
 800c1a6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c1aa:	7afb      	ldrb	r3, [r7, #11]
 800c1ac:	015b      	lsls	r3, r3, #5
 800c1ae:	b2da      	uxtb	r2, r3
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	220e      	movs	r2, #14
 800c1ca:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	2201      	movs	r2, #1
 800c1da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	2202      	movs	r2, #2
 800c1e2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	f103 0210 	add.w	r2, r3, #16
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	75fb      	strb	r3, [r7, #23]
      break;
 800c1f6:	e020      	b.n	800c23a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c1f8:	7afb      	ldrb	r3, [r7, #11]
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	68f8      	ldr	r0, [r7, #12]
 800c1fe:	f7ff fc07 	bl	800ba10 <USBH_MSC_BOT_Process>
 800c202:	4603      	mov	r3, r0
 800c204:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c206:	7dfb      	ldrb	r3, [r7, #23]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d115      	bne.n	800c238 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c212:	3302      	adds	r3, #2
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	f003 030f 	and.w	r3, r3, #15
 800c21a:	b2da      	uxtb	r2, r3
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c226:	7b1a      	ldrb	r2, [r3, #12]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c232:	7b5a      	ldrb	r2, [r3, #13]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	709a      	strb	r2, [r3, #2]
      break;
 800c238:	bf00      	nop
  }

  return error;
 800c23a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3718      	adds	r7, #24
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b086      	sub	sp, #24
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	607a      	str	r2, [r7, #4]
 800c24e:	603b      	str	r3, [r7, #0]
 800c250:	460b      	mov	r3, r1
 800c252:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c254:	2302      	movs	r3, #2
 800c256:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c25e:	69db      	ldr	r3, [r3, #28]
 800c260:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d002      	beq.n	800c272 <USBH_MSC_SCSI_Write+0x2e>
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	d047      	beq.n	800c300 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c270:	e04e      	b.n	800c310 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c278:	461a      	mov	r2, r3
 800c27a:	6a3b      	ldr	r3, [r7, #32]
 800c27c:	fb03 f202 	mul.w	r2, r3, r2
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	2200      	movs	r2, #0
 800c288:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	220a      	movs	r2, #10
 800c290:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	3363      	adds	r3, #99	; 0x63
 800c298:	2210      	movs	r2, #16
 800c29a:	2100      	movs	r1, #0
 800c29c:	4618      	mov	r0, r3
 800c29e:	f00e fa51 	bl	801a744 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	222a      	movs	r2, #42	; 0x2a
 800c2a6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c2aa:	79fa      	ldrb	r2, [r7, #7]
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c2b2:	79ba      	ldrb	r2, [r7, #6]
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c2ba:	797a      	ldrb	r2, [r7, #5]
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c2c2:	1d3b      	adds	r3, r7, #4
 800c2c4:	781a      	ldrb	r2, [r3, #0]
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c2cc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c2d6:	f107 0320 	add.w	r3, r7, #32
 800c2da:	781a      	ldrb	r2, [r3, #0]
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	2202      	movs	r2, #2
 800c2ee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	683a      	ldr	r2, [r7, #0]
 800c2f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	75fb      	strb	r3, [r7, #23]
      break;
 800c2fe:	e007      	b.n	800c310 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c300:	7afb      	ldrb	r3, [r7, #11]
 800c302:	4619      	mov	r1, r3
 800c304:	68f8      	ldr	r0, [r7, #12]
 800c306:	f7ff fb83 	bl	800ba10 <USBH_MSC_BOT_Process>
 800c30a:	4603      	mov	r3, r0
 800c30c:	75fb      	strb	r3, [r7, #23]
      break;
 800c30e:	bf00      	nop
  }

  return error;
 800c310:	7dfb      	ldrb	r3, [r7, #23]
}
 800c312:	4618      	mov	r0, r3
 800c314:	3718      	adds	r7, #24
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}

0800c31a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800c31a:	b580      	push	{r7, lr}
 800c31c:	b086      	sub	sp, #24
 800c31e:	af00      	add	r7, sp, #0
 800c320:	60f8      	str	r0, [r7, #12]
 800c322:	607a      	str	r2, [r7, #4]
 800c324:	603b      	str	r3, [r7, #0]
 800c326:	460b      	mov	r3, r1
 800c328:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c32a:	2302      	movs	r3, #2
 800c32c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c334:	69db      	ldr	r3, [r3, #28]
 800c336:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d002      	beq.n	800c348 <USBH_MSC_SCSI_Read+0x2e>
 800c342:	2b02      	cmp	r3, #2
 800c344:	d047      	beq.n	800c3d6 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c346:	e04e      	b.n	800c3e6 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c34e:	461a      	mov	r2, r3
 800c350:	6a3b      	ldr	r3, [r7, #32]
 800c352:	fb03 f202 	mul.w	r2, r3, r2
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	2280      	movs	r2, #128	; 0x80
 800c35e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	220a      	movs	r2, #10
 800c366:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	3363      	adds	r3, #99	; 0x63
 800c36e:	2210      	movs	r2, #16
 800c370:	2100      	movs	r1, #0
 800c372:	4618      	mov	r0, r3
 800c374:	f00e f9e6 	bl	801a744 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	2228      	movs	r2, #40	; 0x28
 800c37c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c380:	79fa      	ldrb	r2, [r7, #7]
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c388:	79ba      	ldrb	r2, [r7, #6]
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c390:	797a      	ldrb	r2, [r7, #5]
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c398:	1d3b      	adds	r3, r7, #4
 800c39a:	781a      	ldrb	r2, [r3, #0]
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c3a2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c3ac:	f107 0320 	add.w	r3, r7, #32
 800c3b0:	781a      	ldrb	r2, [r3, #0]
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	2202      	movs	r2, #2
 800c3c4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	683a      	ldr	r2, [r7, #0]
 800c3cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	75fb      	strb	r3, [r7, #23]
      break;
 800c3d4:	e007      	b.n	800c3e6 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c3d6:	7afb      	ldrb	r3, [r7, #11]
 800c3d8:	4619      	mov	r1, r3
 800c3da:	68f8      	ldr	r0, [r7, #12]
 800c3dc:	f7ff fb18 	bl	800ba10 <USBH_MSC_BOT_Process>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	75fb      	strb	r3, [r7, #23]
      break;
 800c3e4:	bf00      	nop
  }

  return error;
 800c3e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3718      	adds	r7, #24
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	60f8      	str	r0, [r7, #12]
 800c3f8:	60b9      	str	r1, [r7, #8]
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d10a      	bne.n	800c41a <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800c404:	481c      	ldr	r0, [pc, #112]	; (800c478 <USBH_Init+0x88>)
 800c406:	f00e fa4f 	bl	801a8a8 <iprintf>
 800c40a:	481c      	ldr	r0, [pc, #112]	; (800c47c <USBH_Init+0x8c>)
 800c40c:	f00e fa4c 	bl	801a8a8 <iprintf>
 800c410:	200a      	movs	r0, #10
 800c412:	f00e fa61 	bl	801a8d8 <putchar>
    return USBH_FAIL;
 800c416:	2302      	movs	r3, #2
 800c418:	e029      	b.n	800c46e <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	79fa      	ldrb	r2, [r7, #7]
 800c41e:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2200      	movs	r2, #0
 800c426:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2200      	movs	r2, #0
 800c42e:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800c432:	68f8      	ldr	r0, [r7, #12]
 800c434:	f000 f824 	bl	800c480 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2200      	movs	r2, #0
 800c43c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2200      	movs	r2, #0
 800c444:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2200      	movs	r2, #0
 800c44c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2200      	movs	r2, #0
 800c454:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d003      	beq.n	800c466 <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	68ba      	ldr	r2, [r7, #8]
 800c462:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800c466:	68f8      	ldr	r0, [r7, #12]
 800c468:	f00d ff1e 	bl	801a2a8 <USBH_LL_Init>

  return USBH_OK;
 800c46c:	2300      	movs	r3, #0
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3710      	adds	r7, #16
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	0801ba98 	.word	0x0801ba98
 800c47c:	0801baa0 	.word	0x0801baa0

0800c480 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c480:	b480      	push	{r7}
 800c482:	b085      	sub	sp, #20
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c488:	2300      	movs	r3, #0
 800c48a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c48c:	2300      	movs	r3, #0
 800c48e:	60fb      	str	r3, [r7, #12]
 800c490:	e009      	b.n	800c4a6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	33e0      	adds	r3, #224	; 0xe0
 800c498:	009b      	lsls	r3, r3, #2
 800c49a:	4413      	add	r3, r2
 800c49c:	2200      	movs	r2, #0
 800c49e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	60fb      	str	r3, [r7, #12]
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2b0e      	cmp	r3, #14
 800c4aa:	d9f2      	bls.n	800c492 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	60fb      	str	r3, [r7, #12]
 800c4b0:	e009      	b.n	800c4c6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	4413      	add	r3, r2
 800c4b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c4bc:	2200      	movs	r2, #0
 800c4be:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	60fb      	str	r3, [r7, #12]
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4cc:	d3f1      	bcc.n	800c4b2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2201      	movs	r2, #1
 800c4de:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2240      	movs	r2, #64	; 0x40
 800c4f2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2201      	movs	r2, #1
 800c506:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2200      	movs	r2, #0
 800c50e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3714      	adds	r7, #20
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr

0800c528 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b084      	sub	sp, #16
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c532:	2300      	movs	r3, #0
 800c534:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d01f      	beq.n	800c57c <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c542:	2b00      	cmp	r3, #0
 800c544:	d10e      	bne.n	800c564 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c54c:	1c59      	adds	r1, r3, #1
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	33de      	adds	r3, #222	; 0xde
 800c558:	6839      	ldr	r1, [r7, #0]
 800c55a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c55e:	2300      	movs	r3, #0
 800c560:	73fb      	strb	r3, [r7, #15]
 800c562:	e016      	b.n	800c592 <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800c564:	480d      	ldr	r0, [pc, #52]	; (800c59c <USBH_RegisterClass+0x74>)
 800c566:	f00e f99f 	bl	801a8a8 <iprintf>
 800c56a:	480d      	ldr	r0, [pc, #52]	; (800c5a0 <USBH_RegisterClass+0x78>)
 800c56c:	f00e f99c 	bl	801a8a8 <iprintf>
 800c570:	200a      	movs	r0, #10
 800c572:	f00e f9b1 	bl	801a8d8 <putchar>
      status = USBH_FAIL;
 800c576:	2302      	movs	r3, #2
 800c578:	73fb      	strb	r3, [r7, #15]
 800c57a:	e00a      	b.n	800c592 <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800c57c:	4807      	ldr	r0, [pc, #28]	; (800c59c <USBH_RegisterClass+0x74>)
 800c57e:	f00e f993 	bl	801a8a8 <iprintf>
 800c582:	4808      	ldr	r0, [pc, #32]	; (800c5a4 <USBH_RegisterClass+0x7c>)
 800c584:	f00e f990 	bl	801a8a8 <iprintf>
 800c588:	200a      	movs	r0, #10
 800c58a:	f00e f9a5 	bl	801a8d8 <putchar>
    status = USBH_FAIL;
 800c58e:	2302      	movs	r3, #2
 800c590:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c592:	7bfb      	ldrb	r3, [r7, #15]
}
 800c594:	4618      	mov	r0, r3
 800c596:	3710      	adds	r7, #16
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}
 800c59c:	0801ba98 	.word	0x0801ba98
 800c5a0:	0801bab4 	.word	0x0801bab4
 800c5a4:	0801bad0 	.word	0x0801bad0

0800c5a8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c5be:	78fa      	ldrb	r2, [r7, #3]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d23c      	bcs.n	800c63e <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	78fa      	ldrb	r2, [r7, #3]
 800c5c8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800c5cc:	78fb      	ldrb	r3, [r7, #3]
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	4823      	ldr	r0, [pc, #140]	; (800c660 <USBH_SelectInterface+0xb8>)
 800c5d2:	f00e f969 	bl	801a8a8 <iprintf>
 800c5d6:	200a      	movs	r0, #10
 800c5d8:	f00e f97e 	bl	801a8d8 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800c5dc:	78fb      	ldrb	r3, [r7, #3]
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	211a      	movs	r1, #26
 800c5e2:	fb01 f303 	mul.w	r3, r1, r3
 800c5e6:	4413      	add	r3, r2
 800c5e8:	f203 3347 	addw	r3, r3, #839	; 0x347
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	4619      	mov	r1, r3
 800c5f0:	481c      	ldr	r0, [pc, #112]	; (800c664 <USBH_SelectInterface+0xbc>)
 800c5f2:	f00e f959 	bl	801a8a8 <iprintf>
 800c5f6:	200a      	movs	r0, #10
 800c5f8:	f00e f96e 	bl	801a8d8 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800c5fc:	78fb      	ldrb	r3, [r7, #3]
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	211a      	movs	r1, #26
 800c602:	fb01 f303 	mul.w	r3, r1, r3
 800c606:	4413      	add	r3, r2
 800c608:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	4619      	mov	r1, r3
 800c610:	4815      	ldr	r0, [pc, #84]	; (800c668 <USBH_SelectInterface+0xc0>)
 800c612:	f00e f949 	bl	801a8a8 <iprintf>
 800c616:	200a      	movs	r0, #10
 800c618:	f00e f95e 	bl	801a8d8 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800c61c:	78fb      	ldrb	r3, [r7, #3]
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	211a      	movs	r1, #26
 800c622:	fb01 f303 	mul.w	r3, r1, r3
 800c626:	4413      	add	r3, r2
 800c628:	f203 3349 	addw	r3, r3, #841	; 0x349
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	4619      	mov	r1, r3
 800c630:	480e      	ldr	r0, [pc, #56]	; (800c66c <USBH_SelectInterface+0xc4>)
 800c632:	f00e f939 	bl	801a8a8 <iprintf>
 800c636:	200a      	movs	r0, #10
 800c638:	f00e f94e 	bl	801a8d8 <putchar>
 800c63c:	e00a      	b.n	800c654 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800c63e:	480c      	ldr	r0, [pc, #48]	; (800c670 <USBH_SelectInterface+0xc8>)
 800c640:	f00e f932 	bl	801a8a8 <iprintf>
 800c644:	480b      	ldr	r0, [pc, #44]	; (800c674 <USBH_SelectInterface+0xcc>)
 800c646:	f00e f92f 	bl	801a8a8 <iprintf>
 800c64a:	200a      	movs	r0, #10
 800c64c:	f00e f944 	bl	801a8d8 <putchar>
    status = USBH_FAIL;
 800c650:	2302      	movs	r3, #2
 800c652:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c654:	7bfb      	ldrb	r3, [r7, #15]
}
 800c656:	4618      	mov	r0, r3
 800c658:	3710      	adds	r7, #16
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop
 800c660:	0801bae8 	.word	0x0801bae8
 800c664:	0801bb08 	.word	0x0801bb08
 800c668:	0801bb18 	.word	0x0801bb18
 800c66c:	0801bb28 	.word	0x0801bb28
 800c670:	0801ba98 	.word	0x0801ba98
 800c674:	0801bb38 	.word	0x0801bb38

0800c678 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c678:	b480      	push	{r7}
 800c67a:	b087      	sub	sp, #28
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	4608      	mov	r0, r1
 800c682:	4611      	mov	r1, r2
 800c684:	461a      	mov	r2, r3
 800c686:	4603      	mov	r3, r0
 800c688:	70fb      	strb	r3, [r7, #3]
 800c68a:	460b      	mov	r3, r1
 800c68c:	70bb      	strb	r3, [r7, #2]
 800c68e:	4613      	mov	r3, r2
 800c690:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c692:	2300      	movs	r3, #0
 800c694:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c696:	2300      	movs	r3, #0
 800c698:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c6a0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c6a2:	e025      	b.n	800c6f0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c6a4:	7dfb      	ldrb	r3, [r7, #23]
 800c6a6:	221a      	movs	r2, #26
 800c6a8:	fb02 f303 	mul.w	r3, r2, r3
 800c6ac:	3308      	adds	r3, #8
 800c6ae:	68fa      	ldr	r2, [r7, #12]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	3302      	adds	r3, #2
 800c6b4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	795b      	ldrb	r3, [r3, #5]
 800c6ba:	78fa      	ldrb	r2, [r7, #3]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d002      	beq.n	800c6c6 <USBH_FindInterface+0x4e>
 800c6c0:	78fb      	ldrb	r3, [r7, #3]
 800c6c2:	2bff      	cmp	r3, #255	; 0xff
 800c6c4:	d111      	bne.n	800c6ea <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c6ca:	78ba      	ldrb	r2, [r7, #2]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d002      	beq.n	800c6d6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c6d0:	78bb      	ldrb	r3, [r7, #2]
 800c6d2:	2bff      	cmp	r3, #255	; 0xff
 800c6d4:	d109      	bne.n	800c6ea <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c6da:	787a      	ldrb	r2, [r7, #1]
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d002      	beq.n	800c6e6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c6e0:	787b      	ldrb	r3, [r7, #1]
 800c6e2:	2bff      	cmp	r3, #255	; 0xff
 800c6e4:	d101      	bne.n	800c6ea <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c6e6:	7dfb      	ldrb	r3, [r7, #23]
 800c6e8:	e006      	b.n	800c6f8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c6ea:	7dfb      	ldrb	r3, [r7, #23]
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c6f0:	7dfb      	ldrb	r3, [r7, #23]
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	d9d6      	bls.n	800c6a4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c6f6:	23ff      	movs	r3, #255	; 0xff
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	371c      	adds	r7, #28
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f00d fe07 	bl	801a320 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800c712:	2101      	movs	r1, #1
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f00d ff20 	bl	801a55a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c71a:	2300      	movs	r3, #0
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3708      	adds	r7, #8
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b088      	sub	sp, #32
 800c728:	af04      	add	r7, sp, #16
 800c72a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c72c:	2302      	movs	r3, #2
 800c72e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c730:	2300      	movs	r3, #0
 800c732:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d102      	bne.n	800c746 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2203      	movs	r2, #3
 800c744:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	b2db      	uxtb	r3, r3
 800c74c:	2b0b      	cmp	r3, #11
 800c74e:	f200 822b 	bhi.w	800cba8 <USBH_Process+0x484>
 800c752:	a201      	add	r2, pc, #4	; (adr r2, 800c758 <USBH_Process+0x34>)
 800c754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c758:	0800c789 	.word	0x0800c789
 800c75c:	0800c7c7 	.word	0x0800c7c7
 800c760:	0800c847 	.word	0x0800c847
 800c764:	0800cb37 	.word	0x0800cb37
 800c768:	0800cba9 	.word	0x0800cba9
 800c76c:	0800c8eb 	.word	0x0800c8eb
 800c770:	0800cab9 	.word	0x0800cab9
 800c774:	0800c939 	.word	0x0800c939
 800c778:	0800c959 	.word	0x0800c959
 800c77c:	0800c985 	.word	0x0800c985
 800c780:	0800c9bf 	.word	0x0800c9bf
 800c784:	0800cb1f 	.word	0x0800cb1f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	2b00      	cmp	r3, #0
 800c792:	f000 820b 	beq.w	800cbac <USBH_Process+0x488>
      {
        USBH_UsrLog("USB Device Connected");
 800c796:	48b9      	ldr	r0, [pc, #740]	; (800ca7c <USBH_Process+0x358>)
 800c798:	f00e f886 	bl	801a8a8 <iprintf>
 800c79c:	200a      	movs	r0, #10
 800c79e:	f00e f89b 	bl	801a8d8 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c7a8:	20c8      	movs	r0, #200	; 0xc8
 800c7aa:	f00d ff44 	bl	801a636 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f00d fe13 	bl	801a3da <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c7c4:	e1f2      	b.n	800cbac <USBH_Process+0x488>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d10d      	bne.n	800c7ec <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800c7d0:	48ab      	ldr	r0, [pc, #684]	; (800ca80 <USBH_Process+0x35c>)
 800c7d2:	f00e f869 	bl	801a8a8 <iprintf>
 800c7d6:	200a      	movs	r0, #10
 800c7d8:	f00e f87e 	bl	801a8d8 <putchar>
        phost->device.RstCnt = 0U;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2202      	movs	r2, #2
 800c7e8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c7ea:	e1ec      	b.n	800cbc6 <USBH_Process+0x4a2>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c7f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c7f6:	d91a      	bls.n	800c82e <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c7fe:	3301      	adds	r3, #1
 800c800:	b2da      	uxtb	r2, r3
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c80e:	2b03      	cmp	r3, #3
 800c810:	d909      	bls.n	800c826 <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800c812:	489c      	ldr	r0, [pc, #624]	; (800ca84 <USBH_Process+0x360>)
 800c814:	f00e f848 	bl	801a8a8 <iprintf>
 800c818:	200a      	movs	r0, #10
 800c81a:	f00e f85d 	bl	801a8d8 <putchar>
            phost->gState = HOST_ABORT_STATE;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	220d      	movs	r2, #13
 800c822:	701a      	strb	r2, [r3, #0]
      break;
 800c824:	e1cf      	b.n	800cbc6 <USBH_Process+0x4a2>
            phost->gState = HOST_IDLE;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2200      	movs	r2, #0
 800c82a:	701a      	strb	r2, [r3, #0]
      break;
 800c82c:	e1cb      	b.n	800cbc6 <USBH_Process+0x4a2>
          phost->Timeout += 10U;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c834:	f103 020a 	add.w	r2, r3, #10
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c83e:	200a      	movs	r0, #10
 800c840:	f00d fef9 	bl	801a636 <USBH_Delay>
      break;
 800c844:	e1bf      	b.n	800cbc6 <USBH_Process+0x4a2>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d005      	beq.n	800c85c <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c856:	2104      	movs	r1, #4
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c85c:	2064      	movs	r0, #100	; 0x64
 800c85e:	f00d feea 	bl	801a636 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f00d fd92 	bl	801a38c <USBH_LL_GetSpeed>
 800c868:	4603      	mov	r3, r0
 800c86a:	461a      	mov	r2, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2205      	movs	r2, #5
 800c876:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c878:	2100      	movs	r1, #0
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f001 fa77 	bl	800dd6e <USBH_AllocPipe>
 800c880:	4603      	mov	r3, r0
 800c882:	461a      	mov	r2, r3
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c888:	2180      	movs	r1, #128	; 0x80
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f001 fa6f 	bl	800dd6e <USBH_AllocPipe>
 800c890:	4603      	mov	r3, r0
 800c892:	461a      	mov	r2, r3
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	7919      	ldrb	r1, [r3, #4]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c8ac:	b292      	uxth	r2, r2
 800c8ae:	9202      	str	r2, [sp, #8]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	9201      	str	r2, [sp, #4]
 800c8b4:	9300      	str	r3, [sp, #0]
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	2280      	movs	r2, #128	; 0x80
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f001 fa28 	bl	800dd10 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	7959      	ldrb	r1, [r3, #5]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c8d4:	b292      	uxth	r2, r2
 800c8d6:	9202      	str	r2, [sp, #8]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	9201      	str	r2, [sp, #4]
 800c8dc:	9300      	str	r3, [sp, #0]
 800c8de:	4603      	mov	r3, r0
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f001 fa14 	bl	800dd10 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c8e8:	e16d      	b.n	800cbc6 <USBH_Process+0x4a2>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 f97a 	bl	800cbe4 <USBH_HandleEnum>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c8f4:	7bbb      	ldrb	r3, [r7, #14]
 800c8f6:	b2db      	uxtb	r3, r3
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	f040 8159 	bne.w	800cbb0 <USBH_Process+0x48c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800c8fe:	4862      	ldr	r0, [pc, #392]	; (800ca88 <USBH_Process+0x364>)
 800c900:	f00d ffd2 	bl	801a8a8 <iprintf>
 800c904:	200a      	movs	r0, #10
 800c906:	f00d ffe7 	bl	801a8d8 <putchar>

        phost->device.current_interface = 0U;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2200      	movs	r2, #0
 800c90e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d109      	bne.n	800c930 <USBH_Process+0x20c>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800c91c:	485b      	ldr	r0, [pc, #364]	; (800ca8c <USBH_Process+0x368>)
 800c91e:	f00d ffc3 	bl	801a8a8 <iprintf>
 800c922:	200a      	movs	r0, #10
 800c924:	f00d ffd8 	bl	801a8d8 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2208      	movs	r2, #8
 800c92c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c92e:	e13f      	b.n	800cbb0 <USBH_Process+0x48c>
          phost->gState = HOST_INPUT;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2207      	movs	r2, #7
 800c934:	701a      	strb	r2, [r3, #0]
      break;
 800c936:	e13b      	b.n	800cbb0 <USBH_Process+0x48c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c93e:	2b00      	cmp	r3, #0
 800c940:	f000 8138 	beq.w	800cbb4 <USBH_Process+0x490>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c94a:	2101      	movs	r1, #1
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2208      	movs	r2, #8
 800c954:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800c956:	e12d      	b.n	800cbb4 <USBH_Process+0x490>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c95e:	b29b      	uxth	r3, r3
 800c960:	4619      	mov	r1, r3
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f000 fd4e 	bl	800d404 <USBH_SetCfg>
 800c968:	4603      	mov	r3, r0
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f040 8124 	bne.w	800cbb8 <USBH_Process+0x494>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2209      	movs	r2, #9
 800c974:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800c976:	4846      	ldr	r0, [pc, #280]	; (800ca90 <USBH_Process+0x36c>)
 800c978:	f00d ff96 	bl	801a8a8 <iprintf>
 800c97c:	200a      	movs	r0, #10
 800c97e:	f00d ffab 	bl	801a8d8 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c982:	e119      	b.n	800cbb8 <USBH_Process+0x494>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c98a:	f003 0320 	and.w	r3, r3, #32
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d011      	beq.n	800c9b6 <USBH_Process+0x292>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800c992:	2101      	movs	r1, #1
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f000 fd58 	bl	800d44a <USBH_SetFeature>
 800c99a:	4603      	mov	r3, r0
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	f040 810d 	bne.w	800cbbc <USBH_Process+0x498>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800c9a2:	483c      	ldr	r0, [pc, #240]	; (800ca94 <USBH_Process+0x370>)
 800c9a4:	f00d ff80 	bl	801a8a8 <iprintf>
 800c9a8:	200a      	movs	r0, #10
 800c9aa:	f00d ff95 	bl	801a8d8 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	220a      	movs	r2, #10
 800c9b2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c9b4:	e102      	b.n	800cbbc <USBH_Process+0x498>
        phost->gState = HOST_CHECK_CLASS;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	220a      	movs	r2, #10
 800c9ba:	701a      	strb	r2, [r3, #0]
      break;
 800c9bc:	e0fe      	b.n	800cbbc <USBH_Process+0x498>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d106      	bne.n	800c9d6 <USBH_Process+0x2b2>
      {
        USBH_UsrLog("No Class has been registered.");
 800c9c8:	4833      	ldr	r0, [pc, #204]	; (800ca98 <USBH_Process+0x374>)
 800c9ca:	f00d ff6d 	bl	801a8a8 <iprintf>
 800c9ce:	200a      	movs	r0, #10
 800c9d0:	f00d ff82 	bl	801a8d8 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c9d4:	e0f7      	b.n	800cbc6 <USBH_Process+0x4a2>
        phost->pActiveClass = NULL;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c9de:	2300      	movs	r3, #0
 800c9e0:	73fb      	strb	r3, [r7, #15]
 800c9e2:	e016      	b.n	800ca12 <USBH_Process+0x2ee>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c9e4:	7bfa      	ldrb	r2, [r7, #15]
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	32de      	adds	r2, #222	; 0xde
 800c9ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9ee:	791a      	ldrb	r2, [r3, #4]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d108      	bne.n	800ca0c <USBH_Process+0x2e8>
            phost->pActiveClass = phost->pClass[idx];
 800c9fa:	7bfa      	ldrb	r2, [r7, #15]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	32de      	adds	r2, #222	; 0xde
 800ca00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ca0a:	e005      	b.n	800ca18 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ca0c:	7bfb      	ldrb	r3, [r7, #15]
 800ca0e:	3301      	adds	r3, #1
 800ca10:	73fb      	strb	r3, [r7, #15]
 800ca12:	7bfb      	ldrb	r3, [r7, #15]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d0e5      	beq.n	800c9e4 <USBH_Process+0x2c0>
        if (phost->pActiveClass != NULL)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d040      	beq.n	800caa4 <USBH_Process+0x380>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca28:	689b      	ldr	r3, [r3, #8]
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	4798      	blx	r3
 800ca2e:	4603      	mov	r3, r0
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d114      	bne.n	800ca5e <USBH_Process+0x33a>
            phost->gState = HOST_CLASS_REQUEST;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2206      	movs	r2, #6
 800ca38:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4619      	mov	r1, r3
 800ca44:	4815      	ldr	r0, [pc, #84]	; (800ca9c <USBH_Process+0x378>)
 800ca46:	f00d ff2f 	bl	801a8a8 <iprintf>
 800ca4a:	200a      	movs	r0, #10
 800ca4c:	f00d ff44 	bl	801a8d8 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ca56:	2103      	movs	r1, #3
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	4798      	blx	r3
      break;
 800ca5c:	e0b3      	b.n	800cbc6 <USBH_Process+0x4a2>
            phost->gState = HOST_ABORT_STATE;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	220d      	movs	r2, #13
 800ca62:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	480c      	ldr	r0, [pc, #48]	; (800caa0 <USBH_Process+0x37c>)
 800ca70:	f00d ff1a 	bl	801a8a8 <iprintf>
 800ca74:	200a      	movs	r0, #10
 800ca76:	f00d ff2f 	bl	801a8d8 <putchar>
      break;
 800ca7a:	e0a4      	b.n	800cbc6 <USBH_Process+0x4a2>
 800ca7c:	0801bb58 	.word	0x0801bb58
 800ca80:	0801bb70 	.word	0x0801bb70
 800ca84:	0801bb8c 	.word	0x0801bb8c
 800ca88:	0801bbb8 	.word	0x0801bbb8
 800ca8c:	0801bbcc 	.word	0x0801bbcc
 800ca90:	0801bbf4 	.word	0x0801bbf4
 800ca94:	0801bc10 	.word	0x0801bc10
 800ca98:	0801bc30 	.word	0x0801bc30
 800ca9c:	0801bc50 	.word	0x0801bc50
 800caa0:	0801bc64 	.word	0x0801bc64
          phost->gState = HOST_ABORT_STATE;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	220d      	movs	r2, #13
 800caa8:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800caaa:	4849      	ldr	r0, [pc, #292]	; (800cbd0 <USBH_Process+0x4ac>)
 800caac:	f00d fefc 	bl	801a8a8 <iprintf>
 800cab0:	200a      	movs	r0, #10
 800cab2:	f00d ff11 	bl	801a8d8 <putchar>
      break;
 800cab6:	e086      	b.n	800cbc6 <USBH_Process+0x4a2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d020      	beq.n	800cb04 <USBH_Process+0x3e0>
      {
        status = phost->pActiveClass->Requests(phost);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cac8:	691b      	ldr	r3, [r3, #16]
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	4798      	blx	r3
 800cace:	4603      	mov	r3, r0
 800cad0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cad2:	7bbb      	ldrb	r3, [r7, #14]
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d103      	bne.n	800cae2 <USBH_Process+0x3be>
        {
          phost->gState = HOST_CLASS;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	220b      	movs	r2, #11
 800cade:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cae0:	e06e      	b.n	800cbc0 <USBH_Process+0x49c>
        else if (status == USBH_FAIL)
 800cae2:	7bbb      	ldrb	r3, [r7, #14]
 800cae4:	b2db      	uxtb	r3, r3
 800cae6:	2b02      	cmp	r3, #2
 800cae8:	d16a      	bne.n	800cbc0 <USBH_Process+0x49c>
          phost->gState = HOST_ABORT_STATE;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	220d      	movs	r2, #13
 800caee:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800caf0:	4838      	ldr	r0, [pc, #224]	; (800cbd4 <USBH_Process+0x4b0>)
 800caf2:	f00d fed9 	bl	801a8a8 <iprintf>
 800caf6:	4838      	ldr	r0, [pc, #224]	; (800cbd8 <USBH_Process+0x4b4>)
 800caf8:	f00d fed6 	bl	801a8a8 <iprintf>
 800cafc:	200a      	movs	r0, #10
 800cafe:	f00d feeb 	bl	801a8d8 <putchar>
      break;
 800cb02:	e05d      	b.n	800cbc0 <USBH_Process+0x49c>
        phost->gState = HOST_ABORT_STATE;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	220d      	movs	r2, #13
 800cb08:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800cb0a:	4832      	ldr	r0, [pc, #200]	; (800cbd4 <USBH_Process+0x4b0>)
 800cb0c:	f00d fecc 	bl	801a8a8 <iprintf>
 800cb10:	4832      	ldr	r0, [pc, #200]	; (800cbdc <USBH_Process+0x4b8>)
 800cb12:	f00d fec9 	bl	801a8a8 <iprintf>
 800cb16:	200a      	movs	r0, #10
 800cb18:	f00d fede 	bl	801a8d8 <putchar>
      break;
 800cb1c:	e050      	b.n	800cbc0 <USBH_Process+0x49c>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d04d      	beq.n	800cbc4 <USBH_Process+0x4a0>
      {
        phost->pActiveClass->BgndProcess(phost);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb2e:	695b      	ldr	r3, [r3, #20]
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	4798      	blx	r3
      }
      break;
 800cb34:	e046      	b.n	800cbc4 <USBH_Process+0x4a0>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f7ff fc9e 	bl	800c480 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d009      	beq.n	800cb62 <USBH_Process+0x43e>
      {
        phost->pActiveClass->DeInit(phost);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb54:	68db      	ldr	r3, [r3, #12]
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d005      	beq.n	800cb78 <USBH_Process+0x454>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb72:	2105      	movs	r1, #5
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800cb78:	4819      	ldr	r0, [pc, #100]	; (800cbe0 <USBH_Process+0x4bc>)
 800cb7a:	f00d fe95 	bl	801a8a8 <iprintf>
 800cb7e:	200a      	movs	r0, #10
 800cb80:	f00d feaa 	bl	801a8d8 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	d107      	bne.n	800cba0 <USBH_Process+0x47c>
      {
        phost->device.is_ReEnumerated = 0U;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f7ff fdb3 	bl	800c704 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cb9e:	e012      	b.n	800cbc6 <USBH_Process+0x4a2>
        USBH_LL_Start(phost);
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f00d fbbd 	bl	801a320 <USBH_LL_Start>
      break;
 800cba6:	e00e      	b.n	800cbc6 <USBH_Process+0x4a2>

    case HOST_ABORT_STATE:
    default :
      break;
 800cba8:	bf00      	nop
 800cbaa:	e00c      	b.n	800cbc6 <USBH_Process+0x4a2>
      break;
 800cbac:	bf00      	nop
 800cbae:	e00a      	b.n	800cbc6 <USBH_Process+0x4a2>
      break;
 800cbb0:	bf00      	nop
 800cbb2:	e008      	b.n	800cbc6 <USBH_Process+0x4a2>
    break;
 800cbb4:	bf00      	nop
 800cbb6:	e006      	b.n	800cbc6 <USBH_Process+0x4a2>
      break;
 800cbb8:	bf00      	nop
 800cbba:	e004      	b.n	800cbc6 <USBH_Process+0x4a2>
      break;
 800cbbc:	bf00      	nop
 800cbbe:	e002      	b.n	800cbc6 <USBH_Process+0x4a2>
      break;
 800cbc0:	bf00      	nop
 800cbc2:	e000      	b.n	800cbc6 <USBH_Process+0x4a2>
      break;
 800cbc4:	bf00      	nop
  }
  return USBH_OK;
 800cbc6:	2300      	movs	r3, #0
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3710      	adds	r7, #16
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	0801bc84 	.word	0x0801bc84
 800cbd4:	0801ba98 	.word	0x0801ba98
 800cbd8:	0801bcac 	.word	0x0801bcac
 800cbdc:	0801bcd4 	.word	0x0801bcd4
 800cbe0:	0801bcec 	.word	0x0801bcec

0800cbe4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b088      	sub	sp, #32
 800cbe8:	af04      	add	r7, sp, #16
 800cbea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800cbec:	2301      	movs	r3, #1
 800cbee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	785b      	ldrb	r3, [r3, #1]
 800cbf8:	2b07      	cmp	r3, #7
 800cbfa:	f200 8280 	bhi.w	800d0fe <USBH_HandleEnum+0x51a>
 800cbfe:	a201      	add	r2, pc, #4	; (adr r2, 800cc04 <USBH_HandleEnum+0x20>)
 800cc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc04:	0800cc25 	.word	0x0800cc25
 800cc08:	0800cd01 	.word	0x0800cd01
 800cc0c:	0800cdb1 	.word	0x0800cdb1
 800cc10:	0800ce71 	.word	0x0800ce71
 800cc14:	0800cef9 	.word	0x0800cef9
 800cc18:	0800cfad 	.word	0x0800cfad
 800cc1c:	0800d021 	.word	0x0800d021
 800cc20:	0800d093 	.word	0x0800d093
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800cc24:	2108      	movs	r1, #8
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 fb1c 	bl	800d264 <USBH_Get_DevDesc>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cc30:	7bbb      	ldrb	r3, [r7, #14]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d130      	bne.n	800cc98 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2201      	movs	r2, #1
 800cc44:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	7919      	ldrb	r1, [r3, #4]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cc56:	687a      	ldr	r2, [r7, #4]
 800cc58:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cc5a:	b292      	uxth	r2, r2
 800cc5c:	9202      	str	r2, [sp, #8]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	9201      	str	r2, [sp, #4]
 800cc62:	9300      	str	r3, [sp, #0]
 800cc64:	4603      	mov	r3, r0
 800cc66:	2280      	movs	r2, #128	; 0x80
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f001 f851 	bl	800dd10 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	7959      	ldrb	r1, [r3, #5]
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cc82:	b292      	uxth	r2, r2
 800cc84:	9202      	str	r2, [sp, #8]
 800cc86:	2200      	movs	r2, #0
 800cc88:	9201      	str	r2, [sp, #4]
 800cc8a:	9300      	str	r3, [sp, #0]
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	2200      	movs	r2, #0
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f001 f83d 	bl	800dd10 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cc96:	e234      	b.n	800d102 <USBH_HandleEnum+0x51e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cc98:	7bbb      	ldrb	r3, [r7, #14]
 800cc9a:	2b03      	cmp	r3, #3
 800cc9c:	f040 8231 	bne.w	800d102 <USBH_HandleEnum+0x51e>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800cca0:	48b9      	ldr	r0, [pc, #740]	; (800cf88 <USBH_HandleEnum+0x3a4>)
 800cca2:	f00d fe01 	bl	801a8a8 <iprintf>
 800cca6:	48b9      	ldr	r0, [pc, #740]	; (800cf8c <USBH_HandleEnum+0x3a8>)
 800cca8:	f00d fdfe 	bl	801a8a8 <iprintf>
 800ccac:	200a      	movs	r0, #10
 800ccae:	f00d fe13 	bl	801a8d8 <putchar>
        phost->device.EnumCnt++;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ccb8:	3301      	adds	r3, #1
 800ccba:	b2da      	uxtb	r2, r3
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ccc8:	2b03      	cmp	r3, #3
 800ccca:	d909      	bls.n	800cce0 <USBH_HandleEnum+0xfc>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800cccc:	48b0      	ldr	r0, [pc, #704]	; (800cf90 <USBH_HandleEnum+0x3ac>)
 800ccce:	f00d fdeb 	bl	801a8a8 <iprintf>
 800ccd2:	200a      	movs	r0, #10
 800ccd4:	f00d fe00 	bl	801a8d8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	220d      	movs	r2, #13
 800ccdc:	701a      	strb	r2, [r3, #0]
      break;
 800ccde:	e210      	b.n	800d102 <USBH_HandleEnum+0x51e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	795b      	ldrb	r3, [r3, #5]
 800cce4:	4619      	mov	r1, r3
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f001 f862 	bl	800ddb0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	791b      	ldrb	r3, [r3, #4]
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f001 f85c 	bl	800ddb0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	701a      	strb	r2, [r3, #0]
      break;
 800ccfe:	e200      	b.n	800d102 <USBH_HandleEnum+0x51e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800cd00:	2112      	movs	r1, #18
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 faae 	bl	800d264 <USBH_Get_DevDesc>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cd0c:	7bbb      	ldrb	r3, [r7, #14]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d117      	bne.n	800cd42 <USBH_HandleEnum+0x15e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 800cd18:	4619      	mov	r1, r3
 800cd1a:	489e      	ldr	r0, [pc, #632]	; (800cf94 <USBH_HandleEnum+0x3b0>)
 800cd1c:	f00d fdc4 	bl	801a8a8 <iprintf>
 800cd20:	200a      	movs	r0, #10
 800cd22:	f00d fdd9 	bl	801a8d8 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	489a      	ldr	r0, [pc, #616]	; (800cf98 <USBH_HandleEnum+0x3b4>)
 800cd30:	f00d fdba 	bl	801a8a8 <iprintf>
 800cd34:	200a      	movs	r0, #10
 800cd36:	f00d fdcf 	bl	801a8d8 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2202      	movs	r2, #2
 800cd3e:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cd40:	e1e1      	b.n	800d106 <USBH_HandleEnum+0x522>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cd42:	7bbb      	ldrb	r3, [r7, #14]
 800cd44:	2b03      	cmp	r3, #3
 800cd46:	f040 81de 	bne.w	800d106 <USBH_HandleEnum+0x522>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800cd4a:	488f      	ldr	r0, [pc, #572]	; (800cf88 <USBH_HandleEnum+0x3a4>)
 800cd4c:	f00d fdac 	bl	801a8a8 <iprintf>
 800cd50:	4892      	ldr	r0, [pc, #584]	; (800cf9c <USBH_HandleEnum+0x3b8>)
 800cd52:	f00d fda9 	bl	801a8a8 <iprintf>
 800cd56:	200a      	movs	r0, #10
 800cd58:	f00d fdbe 	bl	801a8d8 <putchar>
        phost->device.EnumCnt++;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cd62:	3301      	adds	r3, #1
 800cd64:	b2da      	uxtb	r2, r3
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cd72:	2b03      	cmp	r3, #3
 800cd74:	d909      	bls.n	800cd8a <USBH_HandleEnum+0x1a6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800cd76:	4886      	ldr	r0, [pc, #536]	; (800cf90 <USBH_HandleEnum+0x3ac>)
 800cd78:	f00d fd96 	bl	801a8a8 <iprintf>
 800cd7c:	200a      	movs	r0, #10
 800cd7e:	f00d fdab 	bl	801a8d8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	220d      	movs	r2, #13
 800cd86:	701a      	strb	r2, [r3, #0]
      break;
 800cd88:	e1bd      	b.n	800d106 <USBH_HandleEnum+0x522>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	795b      	ldrb	r3, [r3, #5]
 800cd8e:	4619      	mov	r1, r3
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f001 f80d 	bl	800ddb0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	791b      	ldrb	r3, [r3, #4]
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f001 f807 	bl	800ddb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2200      	movs	r2, #0
 800cda6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	701a      	strb	r2, [r3, #0]
      break;
 800cdae:	e1aa      	b.n	800d106 <USBH_HandleEnum+0x522>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800cdb0:	2101      	movs	r1, #1
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f000 fb02 	bl	800d3bc <USBH_SetAddress>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cdbc:	7bbb      	ldrb	r3, [r7, #14]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d13c      	bne.n	800ce3c <USBH_HandleEnum+0x258>
      {
        USBH_Delay(2U);
 800cdc2:	2002      	movs	r0, #2
 800cdc4:	f00d fc37 	bl	801a636 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	4871      	ldr	r0, [pc, #452]	; (800cfa0 <USBH_HandleEnum+0x3bc>)
 800cdda:	f00d fd65 	bl	801a8a8 <iprintf>
 800cdde:	200a      	movs	r0, #10
 800cde0:	f00d fd7a 	bl	801a8d8 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2203      	movs	r2, #3
 800cde8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	7919      	ldrb	r1, [r3, #4]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cdfa:	687a      	ldr	r2, [r7, #4]
 800cdfc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cdfe:	b292      	uxth	r2, r2
 800ce00:	9202      	str	r2, [sp, #8]
 800ce02:	2200      	movs	r2, #0
 800ce04:	9201      	str	r2, [sp, #4]
 800ce06:	9300      	str	r3, [sp, #0]
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2280      	movs	r2, #128	; 0x80
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 ff7f 	bl	800dd10 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	7959      	ldrb	r1, [r3, #5]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ce26:	b292      	uxth	r2, r2
 800ce28:	9202      	str	r2, [sp, #8]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	9201      	str	r2, [sp, #4]
 800ce2e:	9300      	str	r3, [sp, #0]
 800ce30:	4603      	mov	r3, r0
 800ce32:	2200      	movs	r2, #0
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f000 ff6b 	bl	800dd10 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ce3a:	e166      	b.n	800d10a <USBH_HandleEnum+0x526>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce3c:	7bbb      	ldrb	r3, [r7, #14]
 800ce3e:	2b03      	cmp	r3, #3
 800ce40:	f040 8163 	bne.w	800d10a <USBH_HandleEnum+0x526>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800ce44:	4850      	ldr	r0, [pc, #320]	; (800cf88 <USBH_HandleEnum+0x3a4>)
 800ce46:	f00d fd2f 	bl	801a8a8 <iprintf>
 800ce4a:	4856      	ldr	r0, [pc, #344]	; (800cfa4 <USBH_HandleEnum+0x3c0>)
 800ce4c:	f00d fd2c 	bl	801a8a8 <iprintf>
 800ce50:	200a      	movs	r0, #10
 800ce52:	f00d fd41 	bl	801a8d8 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800ce56:	484e      	ldr	r0, [pc, #312]	; (800cf90 <USBH_HandleEnum+0x3ac>)
 800ce58:	f00d fd26 	bl	801a8a8 <iprintf>
 800ce5c:	200a      	movs	r0, #10
 800ce5e:	f00d fd3b 	bl	801a8d8 <putchar>
        phost->gState = HOST_ABORT_STATE;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	220d      	movs	r2, #13
 800ce66:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	705a      	strb	r2, [r3, #1]
      break;
 800ce6e:	e14c      	b.n	800d10a <USBH_HandleEnum+0x526>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ce70:	2109      	movs	r1, #9
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f000 fa1e 	bl	800d2b4 <USBH_Get_CfgDesc>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ce7c:	7bbb      	ldrb	r3, [r7, #14]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d103      	bne.n	800ce8a <USBH_HandleEnum+0x2a6>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2204      	movs	r2, #4
 800ce86:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ce88:	e141      	b.n	800d10e <USBH_HandleEnum+0x52a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce8a:	7bbb      	ldrb	r3, [r7, #14]
 800ce8c:	2b03      	cmp	r3, #3
 800ce8e:	f040 813e 	bne.w	800d10e <USBH_HandleEnum+0x52a>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800ce92:	483d      	ldr	r0, [pc, #244]	; (800cf88 <USBH_HandleEnum+0x3a4>)
 800ce94:	f00d fd08 	bl	801a8a8 <iprintf>
 800ce98:	4843      	ldr	r0, [pc, #268]	; (800cfa8 <USBH_HandleEnum+0x3c4>)
 800ce9a:	f00d fd05 	bl	801a8a8 <iprintf>
 800ce9e:	200a      	movs	r0, #10
 800cea0:	f00d fd1a 	bl	801a8d8 <putchar>
        phost->device.EnumCnt++;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ceaa:	3301      	adds	r3, #1
 800ceac:	b2da      	uxtb	r2, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ceba:	2b03      	cmp	r3, #3
 800cebc:	d909      	bls.n	800ced2 <USBH_HandleEnum+0x2ee>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800cebe:	4834      	ldr	r0, [pc, #208]	; (800cf90 <USBH_HandleEnum+0x3ac>)
 800cec0:	f00d fcf2 	bl	801a8a8 <iprintf>
 800cec4:	200a      	movs	r0, #10
 800cec6:	f00d fd07 	bl	801a8d8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	220d      	movs	r2, #13
 800cece:	701a      	strb	r2, [r3, #0]
      break;
 800ced0:	e11d      	b.n	800d10e <USBH_HandleEnum+0x52a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	795b      	ldrb	r3, [r3, #5]
 800ced6:	4619      	mov	r1, r3
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f000 ff69 	bl	800ddb0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	791b      	ldrb	r3, [r3, #4]
 800cee2:	4619      	mov	r1, r3
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f000 ff63 	bl	800ddb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2200      	movs	r2, #0
 800ceee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	701a      	strb	r2, [r3, #0]
      break;
 800cef6:	e10a      	b.n	800d10e <USBH_HandleEnum+0x52a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800cefe:	4619      	mov	r1, r3
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f000 f9d7 	bl	800d2b4 <USBH_Get_CfgDesc>
 800cf06:	4603      	mov	r3, r0
 800cf08:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cf0a:	7bbb      	ldrb	r3, [r7, #14]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d103      	bne.n	800cf18 <USBH_HandleEnum+0x334>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2205      	movs	r2, #5
 800cf14:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cf16:	e0fc      	b.n	800d112 <USBH_HandleEnum+0x52e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf18:	7bbb      	ldrb	r3, [r7, #14]
 800cf1a:	2b03      	cmp	r3, #3
 800cf1c:	f040 80f9 	bne.w	800d112 <USBH_HandleEnum+0x52e>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800cf20:	4819      	ldr	r0, [pc, #100]	; (800cf88 <USBH_HandleEnum+0x3a4>)
 800cf22:	f00d fcc1 	bl	801a8a8 <iprintf>
 800cf26:	4820      	ldr	r0, [pc, #128]	; (800cfa8 <USBH_HandleEnum+0x3c4>)
 800cf28:	f00d fcbe 	bl	801a8a8 <iprintf>
 800cf2c:	200a      	movs	r0, #10
 800cf2e:	f00d fcd3 	bl	801a8d8 <putchar>
        phost->device.EnumCnt++;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cf38:	3301      	adds	r3, #1
 800cf3a:	b2da      	uxtb	r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cf48:	2b03      	cmp	r3, #3
 800cf4a:	d909      	bls.n	800cf60 <USBH_HandleEnum+0x37c>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800cf4c:	4810      	ldr	r0, [pc, #64]	; (800cf90 <USBH_HandleEnum+0x3ac>)
 800cf4e:	f00d fcab 	bl	801a8a8 <iprintf>
 800cf52:	200a      	movs	r0, #10
 800cf54:	f00d fcc0 	bl	801a8d8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	220d      	movs	r2, #13
 800cf5c:	701a      	strb	r2, [r3, #0]
      break;
 800cf5e:	e0d8      	b.n	800d112 <USBH_HandleEnum+0x52e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	795b      	ldrb	r3, [r3, #5]
 800cf64:	4619      	mov	r1, r3
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 ff22 	bl	800ddb0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	791b      	ldrb	r3, [r3, #4]
 800cf70:	4619      	mov	r1, r3
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f000 ff1c 	bl	800ddb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2200      	movs	r2, #0
 800cf82:	701a      	strb	r2, [r3, #0]
      break;
 800cf84:	e0c5      	b.n	800d112 <USBH_HandleEnum+0x52e>
 800cf86:	bf00      	nop
 800cf88:	0801ba98 	.word	0x0801ba98
 800cf8c:	0801bd04 	.word	0x0801bd04
 800cf90:	0801bd38 	.word	0x0801bd38
 800cf94:	0801bd78 	.word	0x0801bd78
 800cf98:	0801bd84 	.word	0x0801bd84
 800cf9c:	0801bd90 	.word	0x0801bd90
 800cfa0:	0801bdcc 	.word	0x0801bdcc
 800cfa4:	0801bde4 	.word	0x0801bde4
 800cfa8:	0801be18 	.word	0x0801be18

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d02a      	beq.n	800d00c <USBH_HandleEnum+0x428>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cfc2:	23ff      	movs	r3, #255	; 0xff
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f000 f999 	bl	800d2fc <USBH_Get_StringDesc>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cfce:	7bbb      	ldrb	r3, [r7, #14]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d10d      	bne.n	800cff0 <USBH_HandleEnum+0x40c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cfda:	4619      	mov	r1, r3
 800cfdc:	4853      	ldr	r0, [pc, #332]	; (800d12c <USBH_HandleEnum+0x548>)
 800cfde:	f00d fc63 	bl	801a8a8 <iprintf>
 800cfe2:	200a      	movs	r0, #10
 800cfe4:	f00d fc78 	bl	801a8d8 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2206      	movs	r2, #6
 800cfec:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cfee:	e092      	b.n	800d116 <USBH_HandleEnum+0x532>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cff0:	7bbb      	ldrb	r3, [r7, #14]
 800cff2:	2b03      	cmp	r3, #3
 800cff4:	f040 808f 	bne.w	800d116 <USBH_HandleEnum+0x532>
          USBH_UsrLog("Manufacturer : N/A");
 800cff8:	484d      	ldr	r0, [pc, #308]	; (800d130 <USBH_HandleEnum+0x54c>)
 800cffa:	f00d fc55 	bl	801a8a8 <iprintf>
 800cffe:	200a      	movs	r0, #10
 800d000:	f00d fc6a 	bl	801a8d8 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2206      	movs	r2, #6
 800d008:	705a      	strb	r2, [r3, #1]
      break;
 800d00a:	e084      	b.n	800d116 <USBH_HandleEnum+0x532>
        USBH_UsrLog("Manufacturer : N/A");
 800d00c:	4848      	ldr	r0, [pc, #288]	; (800d130 <USBH_HandleEnum+0x54c>)
 800d00e:	f00d fc4b 	bl	801a8a8 <iprintf>
 800d012:	200a      	movs	r0, #10
 800d014:	f00d fc60 	bl	801a8d8 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2206      	movs	r2, #6
 800d01c:	705a      	strb	r2, [r3, #1]
      break;
 800d01e:	e07a      	b.n	800d116 <USBH_HandleEnum+0x532>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d026:	2b00      	cmp	r3, #0
 800d028:	d029      	beq.n	800d07e <USBH_HandleEnum+0x49a>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d036:	23ff      	movs	r3, #255	; 0xff
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f000 f95f 	bl	800d2fc <USBH_Get_StringDesc>
 800d03e:	4603      	mov	r3, r0
 800d040:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d042:	7bbb      	ldrb	r3, [r7, #14]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d10d      	bne.n	800d064 <USBH_HandleEnum+0x480>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d04e:	4619      	mov	r1, r3
 800d050:	4838      	ldr	r0, [pc, #224]	; (800d134 <USBH_HandleEnum+0x550>)
 800d052:	f00d fc29 	bl	801a8a8 <iprintf>
 800d056:	200a      	movs	r0, #10
 800d058:	f00d fc3e 	bl	801a8d8 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2207      	movs	r2, #7
 800d060:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d062:	e05a      	b.n	800d11a <USBH_HandleEnum+0x536>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d064:	7bbb      	ldrb	r3, [r7, #14]
 800d066:	2b03      	cmp	r3, #3
 800d068:	d157      	bne.n	800d11a <USBH_HandleEnum+0x536>
          USBH_UsrLog("Product : N/A");
 800d06a:	4833      	ldr	r0, [pc, #204]	; (800d138 <USBH_HandleEnum+0x554>)
 800d06c:	f00d fc1c 	bl	801a8a8 <iprintf>
 800d070:	200a      	movs	r0, #10
 800d072:	f00d fc31 	bl	801a8d8 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2207      	movs	r2, #7
 800d07a:	705a      	strb	r2, [r3, #1]
      break;
 800d07c:	e04d      	b.n	800d11a <USBH_HandleEnum+0x536>
        USBH_UsrLog("Product : N/A");
 800d07e:	482e      	ldr	r0, [pc, #184]	; (800d138 <USBH_HandleEnum+0x554>)
 800d080:	f00d fc12 	bl	801a8a8 <iprintf>
 800d084:	200a      	movs	r0, #10
 800d086:	f00d fc27 	bl	801a8d8 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2207      	movs	r2, #7
 800d08e:	705a      	strb	r2, [r3, #1]
      break;
 800d090:	e043      	b.n	800d11a <USBH_HandleEnum+0x536>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d027      	beq.n	800d0ec <USBH_HandleEnum+0x508>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d0a8:	23ff      	movs	r3, #255	; 0xff
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f000 f926 	bl	800d2fc <USBH_Get_StringDesc>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d0b4:	7bbb      	ldrb	r3, [r7, #14]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d10c      	bne.n	800d0d4 <USBH_HandleEnum+0x4f0>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	481e      	ldr	r0, [pc, #120]	; (800d13c <USBH_HandleEnum+0x558>)
 800d0c4:	f00d fbf0 	bl	801a8a8 <iprintf>
 800d0c8:	200a      	movs	r0, #10
 800d0ca:	f00d fc05 	bl	801a8d8 <putchar>
          Status = USBH_OK;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d0d2:	e024      	b.n	800d11e <USBH_HandleEnum+0x53a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d0d4:	7bbb      	ldrb	r3, [r7, #14]
 800d0d6:	2b03      	cmp	r3, #3
 800d0d8:	d121      	bne.n	800d11e <USBH_HandleEnum+0x53a>
          USBH_UsrLog("Serial Number : N/A");
 800d0da:	4819      	ldr	r0, [pc, #100]	; (800d140 <USBH_HandleEnum+0x55c>)
 800d0dc:	f00d fbe4 	bl	801a8a8 <iprintf>
 800d0e0:	200a      	movs	r0, #10
 800d0e2:	f00d fbf9 	bl	801a8d8 <putchar>
          Status = USBH_OK;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	73fb      	strb	r3, [r7, #15]
      break;
 800d0ea:	e018      	b.n	800d11e <USBH_HandleEnum+0x53a>
        USBH_UsrLog("Serial Number : N/A");
 800d0ec:	4814      	ldr	r0, [pc, #80]	; (800d140 <USBH_HandleEnum+0x55c>)
 800d0ee:	f00d fbdb 	bl	801a8a8 <iprintf>
 800d0f2:	200a      	movs	r0, #10
 800d0f4:	f00d fbf0 	bl	801a8d8 <putchar>
        Status = USBH_OK;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	73fb      	strb	r3, [r7, #15]
      break;
 800d0fc:	e00f      	b.n	800d11e <USBH_HandleEnum+0x53a>

    default:
      break;
 800d0fe:	bf00      	nop
 800d100:	e00e      	b.n	800d120 <USBH_HandleEnum+0x53c>
      break;
 800d102:	bf00      	nop
 800d104:	e00c      	b.n	800d120 <USBH_HandleEnum+0x53c>
      break;
 800d106:	bf00      	nop
 800d108:	e00a      	b.n	800d120 <USBH_HandleEnum+0x53c>
      break;
 800d10a:	bf00      	nop
 800d10c:	e008      	b.n	800d120 <USBH_HandleEnum+0x53c>
      break;
 800d10e:	bf00      	nop
 800d110:	e006      	b.n	800d120 <USBH_HandleEnum+0x53c>
      break;
 800d112:	bf00      	nop
 800d114:	e004      	b.n	800d120 <USBH_HandleEnum+0x53c>
      break;
 800d116:	bf00      	nop
 800d118:	e002      	b.n	800d120 <USBH_HandleEnum+0x53c>
      break;
 800d11a:	bf00      	nop
 800d11c:	e000      	b.n	800d120 <USBH_HandleEnum+0x53c>
      break;
 800d11e:	bf00      	nop
  }
  return Status;
 800d120:	7bfb      	ldrb	r3, [r7, #15]
}
 800d122:	4618      	mov	r0, r3
 800d124:	3710      	adds	r7, #16
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
 800d12a:	bf00      	nop
 800d12c:	0801be5c 	.word	0x0801be5c
 800d130:	0801be70 	.word	0x0801be70
 800d134:	0801be84 	.word	0x0801be84
 800d138:	0801be94 	.word	0x0801be94
 800d13c:	0801bea4 	.word	0x0801bea4
 800d140:	0801beb8 	.word	0x0801beb8

0800d144 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d144:	b480      	push	{r7}
 800d146:	b083      	sub	sp, #12
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	683a      	ldr	r2, [r7, #0]
 800d152:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d156:	bf00      	nop
 800d158:	370c      	adds	r7, #12
 800d15a:	46bd      	mov	sp, r7
 800d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d160:	4770      	bx	lr

0800d162 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d162:	b580      	push	{r7, lr}
 800d164:	b082      	sub	sp, #8
 800d166:	af00      	add	r7, sp, #0
 800d168:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d170:	1c5a      	adds	r2, r3, #1
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f000 f804 	bl	800d186 <USBH_HandleSof>
}
 800d17e:	bf00      	nop
 800d180:	3708      	adds	r7, #8
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}

0800d186 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d186:	b580      	push	{r7, lr}
 800d188:	b082      	sub	sp, #8
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	b2db      	uxtb	r3, r3
 800d194:	2b0b      	cmp	r3, #11
 800d196:	d10a      	bne.n	800d1ae <USBH_HandleSof+0x28>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d005      	beq.n	800d1ae <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d1a8:	699b      	ldr	r3, [r3, #24]
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	4798      	blx	r3
  }
}
 800d1ae:	bf00      	nop
 800d1b0:	3708      	adds	r7, #8
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}

0800d1b6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d1b6:	b480      	push	{r7}
 800d1b8:	b083      	sub	sp, #12
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800d1c6:	bf00      	nop
}
 800d1c8:	370c      	adds	r7, #12
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d0:	4770      	bx	lr

0800d1d2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d1d2:	b480      	push	{r7}
 800d1d4:	b083      	sub	sp, #12
 800d1d6:	af00      	add	r7, sp, #0
 800d1d8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d1e2:	bf00      	nop
}
 800d1e4:	370c      	adds	r7, #12
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr

0800d1ee <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d1ee:	b480      	push	{r7}
 800d1f0:	b083      	sub	sp, #12
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2200      	movs	r2, #0
 800d202:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2200      	movs	r2, #0
 800d20a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d20e:	2300      	movs	r3, #0
}
 800d210:	4618      	mov	r0, r3
 800d212:	370c      	adds	r7, #12
 800d214:	46bd      	mov	sp, r7
 800d216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21a:	4770      	bx	lr

0800d21c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b082      	sub	sp, #8
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2201      	movs	r2, #1
 800d228:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2200      	movs	r2, #0
 800d230:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2200      	movs	r2, #0
 800d238:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f00d f88a 	bl	801a356 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	791b      	ldrb	r3, [r3, #4]
 800d246:	4619      	mov	r1, r3
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 fdb1 	bl	800ddb0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	795b      	ldrb	r3, [r3, #5]
 800d252:	4619      	mov	r1, r3
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 fdab 	bl	800ddb0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d25a:	2300      	movs	r3, #0
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3708      	adds	r7, #8
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b086      	sub	sp, #24
 800d268:	af02      	add	r7, sp, #8
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	460b      	mov	r3, r1
 800d26e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d276:	78fb      	ldrb	r3, [r7, #3]
 800d278:	b29b      	uxth	r3, r3
 800d27a:	9300      	str	r3, [sp, #0]
 800d27c:	4613      	mov	r3, r2
 800d27e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d282:	2100      	movs	r1, #0
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f000 f864 	bl	800d352 <USBH_GetDescriptor>
 800d28a:	4603      	mov	r3, r0
 800d28c:	73fb      	strb	r3, [r7, #15]
 800d28e:	7bfb      	ldrb	r3, [r7, #15]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d10a      	bne.n	800d2aa <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f203 3026 	addw	r0, r3, #806	; 0x326
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d2a0:	78fa      	ldrb	r2, [r7, #3]
 800d2a2:	b292      	uxth	r2, r2
 800d2a4:	4619      	mov	r1, r3
 800d2a6:	f000 f918 	bl	800d4da <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3710      	adds	r7, #16
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b086      	sub	sp, #24
 800d2b8:	af02      	add	r7, sp, #8
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	460b      	mov	r3, r1
 800d2be:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	331c      	adds	r3, #28
 800d2c4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d2c6:	887b      	ldrh	r3, [r7, #2]
 800d2c8:	9300      	str	r3, [sp, #0]
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2d0:	2100      	movs	r1, #0
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f000 f83d 	bl	800d352 <USBH_GetDescriptor>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	72fb      	strb	r3, [r7, #11]
 800d2dc:	7afb      	ldrb	r3, [r7, #11]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d107      	bne.n	800d2f2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d2e8:	887a      	ldrh	r2, [r7, #2]
 800d2ea:	68f9      	ldr	r1, [r7, #12]
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f000 f964 	bl	800d5ba <USBH_ParseCfgDesc>
  }

  return status;
 800d2f2:	7afb      	ldrb	r3, [r7, #11]
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3710      	adds	r7, #16
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b088      	sub	sp, #32
 800d300:	af02      	add	r7, sp, #8
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	607a      	str	r2, [r7, #4]
 800d306:	461a      	mov	r2, r3
 800d308:	460b      	mov	r3, r1
 800d30a:	72fb      	strb	r3, [r7, #11]
 800d30c:	4613      	mov	r3, r2
 800d30e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800d310:	7afb      	ldrb	r3, [r7, #11]
 800d312:	b29b      	uxth	r3, r3
 800d314:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d318:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d320:	893b      	ldrh	r3, [r7, #8]
 800d322:	9300      	str	r3, [sp, #0]
 800d324:	460b      	mov	r3, r1
 800d326:	2100      	movs	r1, #0
 800d328:	68f8      	ldr	r0, [r7, #12]
 800d32a:	f000 f812 	bl	800d352 <USBH_GetDescriptor>
 800d32e:	4603      	mov	r3, r0
 800d330:	75fb      	strb	r3, [r7, #23]
 800d332:	7dfb      	ldrb	r3, [r7, #23]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d107      	bne.n	800d348 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d33e:	893a      	ldrh	r2, [r7, #8]
 800d340:	6879      	ldr	r1, [r7, #4]
 800d342:	4618      	mov	r0, r3
 800d344:	f000 fa37 	bl	800d7b6 <USBH_ParseStringDesc>
  }

  return status;
 800d348:	7dfb      	ldrb	r3, [r7, #23]
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3718      	adds	r7, #24
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}

0800d352 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d352:	b580      	push	{r7, lr}
 800d354:	b084      	sub	sp, #16
 800d356:	af00      	add	r7, sp, #0
 800d358:	60f8      	str	r0, [r7, #12]
 800d35a:	607b      	str	r3, [r7, #4]
 800d35c:	460b      	mov	r3, r1
 800d35e:	72fb      	strb	r3, [r7, #11]
 800d360:	4613      	mov	r3, r2
 800d362:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	789b      	ldrb	r3, [r3, #2]
 800d368:	2b01      	cmp	r3, #1
 800d36a:	d11c      	bne.n	800d3a6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d36c:	7afb      	ldrb	r3, [r7, #11]
 800d36e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d372:	b2da      	uxtb	r2, r3
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2206      	movs	r2, #6
 800d37c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	893a      	ldrh	r2, [r7, #8]
 800d382:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d384:	893b      	ldrh	r3, [r7, #8]
 800d386:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d38a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d38e:	d104      	bne.n	800d39a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	f240 4209 	movw	r2, #1033	; 0x409
 800d396:	829a      	strh	r2, [r3, #20]
 800d398:	e002      	b.n	800d3a0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2200      	movs	r2, #0
 800d39e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	8b3a      	ldrh	r2, [r7, #24]
 800d3a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d3a6:	8b3b      	ldrh	r3, [r7, #24]
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	6879      	ldr	r1, [r7, #4]
 800d3ac:	68f8      	ldr	r0, [r7, #12]
 800d3ae:	f000 fa50 	bl	800d852 <USBH_CtlReq>
 800d3b2:	4603      	mov	r3, r0
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3710      	adds	r7, #16
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	789b      	ldrb	r3, [r3, #2]
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d10f      	bne.n	800d3f0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2205      	movs	r2, #5
 800d3da:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d3dc:	78fb      	ldrb	r3, [r7, #3]
 800d3de:	b29a      	uxth	r2, r3
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	2100      	movs	r1, #0
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f000 fa2c 	bl	800d852 <USBH_CtlReq>
 800d3fa:	4603      	mov	r3, r0
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3708      	adds	r7, #8
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}

0800d404 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	460b      	mov	r3, r1
 800d40e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	789b      	ldrb	r3, [r3, #2]
 800d414:	2b01      	cmp	r3, #1
 800d416:	d10e      	bne.n	800d436 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2200      	movs	r2, #0
 800d41c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2209      	movs	r2, #9
 800d422:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	887a      	ldrh	r2, [r7, #2]
 800d428:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2200      	movs	r2, #0
 800d42e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2200      	movs	r2, #0
 800d434:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d436:	2200      	movs	r2, #0
 800d438:	2100      	movs	r1, #0
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f000 fa09 	bl	800d852 <USBH_CtlReq>
 800d440:	4603      	mov	r3, r0
}
 800d442:	4618      	mov	r0, r3
 800d444:	3708      	adds	r7, #8
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}

0800d44a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d44a:	b580      	push	{r7, lr}
 800d44c:	b082      	sub	sp, #8
 800d44e:	af00      	add	r7, sp, #0
 800d450:	6078      	str	r0, [r7, #4]
 800d452:	460b      	mov	r3, r1
 800d454:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	789b      	ldrb	r3, [r3, #2]
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	d10f      	bne.n	800d47e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2200      	movs	r2, #0
 800d462:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2203      	movs	r2, #3
 800d468:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d46a:	78fb      	ldrb	r3, [r7, #3]
 800d46c:	b29a      	uxth	r2, r3
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2200      	movs	r2, #0
 800d476:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2200      	movs	r2, #0
 800d47c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d47e:	2200      	movs	r2, #0
 800d480:	2100      	movs	r1, #0
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f000 f9e5 	bl	800d852 <USBH_CtlReq>
 800d488:	4603      	mov	r3, r0
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3708      	adds	r7, #8
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}

0800d492 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d492:	b580      	push	{r7, lr}
 800d494:	b082      	sub	sp, #8
 800d496:	af00      	add	r7, sp, #0
 800d498:	6078      	str	r0, [r7, #4]
 800d49a:	460b      	mov	r3, r1
 800d49c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	789b      	ldrb	r3, [r3, #2]
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	d10f      	bne.n	800d4c6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2202      	movs	r2, #2
 800d4aa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d4b8:	78fb      	ldrb	r3, [r7, #3]
 800d4ba:	b29a      	uxth	r2, r3
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	2100      	movs	r1, #0
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 f9c1 	bl	800d852 <USBH_CtlReq>
 800d4d0:	4603      	mov	r3, r0
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3708      	adds	r7, #8
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}

0800d4da <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800d4da:	b480      	push	{r7}
 800d4dc:	b085      	sub	sp, #20
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	60f8      	str	r0, [r7, #12]
 800d4e2:	60b9      	str	r1, [r7, #8]
 800d4e4:	4613      	mov	r3, r2
 800d4e6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	781a      	ldrb	r2, [r3, #0]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	785a      	ldrb	r2, [r3, #1]
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	3302      	adds	r3, #2
 800d4fc:	781b      	ldrb	r3, [r3, #0]
 800d4fe:	b29a      	uxth	r2, r3
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	3303      	adds	r3, #3
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	b29b      	uxth	r3, r3
 800d508:	021b      	lsls	r3, r3, #8
 800d50a:	b29b      	uxth	r3, r3
 800d50c:	4313      	orrs	r3, r2
 800d50e:	b29a      	uxth	r2, r3
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	791a      	ldrb	r2, [r3, #4]
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	795a      	ldrb	r2, [r3, #5]
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	799a      	ldrb	r2, [r3, #6]
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	79da      	ldrb	r2, [r3, #7]
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d534:	88fb      	ldrh	r3, [r7, #6]
 800d536:	2b08      	cmp	r3, #8
 800d538:	d939      	bls.n	800d5ae <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	3308      	adds	r3, #8
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	b29a      	uxth	r2, r3
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	3309      	adds	r3, #9
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	b29b      	uxth	r3, r3
 800d54a:	021b      	lsls	r3, r3, #8
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	4313      	orrs	r3, r2
 800d550:	b29a      	uxth	r2, r3
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	330a      	adds	r3, #10
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	b29a      	uxth	r2, r3
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	330b      	adds	r3, #11
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	b29b      	uxth	r3, r3
 800d566:	021b      	lsls	r3, r3, #8
 800d568:	b29b      	uxth	r3, r3
 800d56a:	4313      	orrs	r3, r2
 800d56c:	b29a      	uxth	r2, r3
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	330c      	adds	r3, #12
 800d576:	781b      	ldrb	r3, [r3, #0]
 800d578:	b29a      	uxth	r2, r3
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	330d      	adds	r3, #13
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	b29b      	uxth	r3, r3
 800d582:	021b      	lsls	r3, r3, #8
 800d584:	b29b      	uxth	r3, r3
 800d586:	4313      	orrs	r3, r2
 800d588:	b29a      	uxth	r2, r3
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	7b9a      	ldrb	r2, [r3, #14]
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	7bda      	ldrb	r2, [r3, #15]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	7c1a      	ldrb	r2, [r3, #16]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	7c5a      	ldrb	r2, [r3, #17]
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	745a      	strb	r2, [r3, #17]
  }
}
 800d5ae:	bf00      	nop
 800d5b0:	3714      	adds	r7, #20
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b8:	4770      	bx	lr

0800d5ba <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b08a      	sub	sp, #40	; 0x28
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	60f8      	str	r0, [r7, #12]
 800d5c2:	60b9      	str	r1, [r7, #8]
 800d5c4:	4613      	mov	r3, r2
 800d5c6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	781a      	ldrb	r2, [r3, #0]
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	785a      	ldrb	r2, [r3, #1]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	3302      	adds	r3, #2
 800d5f0:	781b      	ldrb	r3, [r3, #0]
 800d5f2:	b29a      	uxth	r2, r3
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	3303      	adds	r3, #3
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	b29b      	uxth	r3, r3
 800d5fc:	021b      	lsls	r3, r3, #8
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	4313      	orrs	r3, r2
 800d602:	b29a      	uxth	r2, r3
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	791a      	ldrb	r2, [r3, #4]
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	795a      	ldrb	r2, [r3, #5]
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	799a      	ldrb	r2, [r3, #6]
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	79da      	ldrb	r2, [r3, #7]
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	7a1a      	ldrb	r2, [r3, #8]
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d630:	88fb      	ldrh	r3, [r7, #6]
 800d632:	2b09      	cmp	r3, #9
 800d634:	d95f      	bls.n	800d6f6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800d636:	2309      	movs	r3, #9
 800d638:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800d63a:	2300      	movs	r3, #0
 800d63c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d63e:	e051      	b.n	800d6e4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d640:	f107 0316 	add.w	r3, r7, #22
 800d644:	4619      	mov	r1, r3
 800d646:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d648:	f000 f8e8 	bl	800d81c <USBH_GetNextDesc>
 800d64c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800d64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d650:	785b      	ldrb	r3, [r3, #1]
 800d652:	2b04      	cmp	r3, #4
 800d654:	d146      	bne.n	800d6e4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800d656:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d65a:	221a      	movs	r2, #26
 800d65c:	fb02 f303 	mul.w	r3, r2, r3
 800d660:	3308      	adds	r3, #8
 800d662:	68fa      	ldr	r2, [r7, #12]
 800d664:	4413      	add	r3, r2
 800d666:	3302      	adds	r3, #2
 800d668:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d66a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d66c:	69f8      	ldr	r0, [r7, #28]
 800d66e:	f000 f846 	bl	800d6fe <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d672:	2300      	movs	r3, #0
 800d674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800d678:	2300      	movs	r3, #0
 800d67a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d67c:	e022      	b.n	800d6c4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d67e:	f107 0316 	add.w	r3, r7, #22
 800d682:	4619      	mov	r1, r3
 800d684:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d686:	f000 f8c9 	bl	800d81c <USBH_GetNextDesc>
 800d68a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800d68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68e:	785b      	ldrb	r3, [r3, #1]
 800d690:	2b05      	cmp	r3, #5
 800d692:	d117      	bne.n	800d6c4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d694:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d698:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d69c:	3201      	adds	r2, #1
 800d69e:	00d2      	lsls	r2, r2, #3
 800d6a0:	211a      	movs	r1, #26
 800d6a2:	fb01 f303 	mul.w	r3, r1, r3
 800d6a6:	4413      	add	r3, r2
 800d6a8:	3308      	adds	r3, #8
 800d6aa:	68fa      	ldr	r2, [r7, #12]
 800d6ac:	4413      	add	r3, r2
 800d6ae:	3304      	adds	r3, #4
 800d6b0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800d6b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d6b4:	69b8      	ldr	r0, [r7, #24]
 800d6b6:	f000 f851 	bl	800d75c <USBH_ParseEPDesc>
            ep_ix++;
 800d6ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d6be:	3301      	adds	r3, #1
 800d6c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d6c4:	69fb      	ldr	r3, [r7, #28]
 800d6c6:	791b      	ldrb	r3, [r3, #4]
 800d6c8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d204      	bcs.n	800d6da <USBH_ParseCfgDesc+0x120>
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	885a      	ldrh	r2, [r3, #2]
 800d6d4:	8afb      	ldrh	r3, [r7, #22]
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d8d1      	bhi.n	800d67e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800d6da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d6de:	3301      	adds	r3, #1
 800d6e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d6e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d804      	bhi.n	800d6f6 <USBH_ParseCfgDesc+0x13c>
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	885a      	ldrh	r2, [r3, #2]
 800d6f0:	8afb      	ldrh	r3, [r7, #22]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d8a4      	bhi.n	800d640 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800d6f6:	bf00      	nop
 800d6f8:	3728      	adds	r7, #40	; 0x28
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}

0800d6fe <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d6fe:	b480      	push	{r7}
 800d700:	b083      	sub	sp, #12
 800d702:	af00      	add	r7, sp, #0
 800d704:	6078      	str	r0, [r7, #4]
 800d706:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	781a      	ldrb	r2, [r3, #0]
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	785a      	ldrb	r2, [r3, #1]
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	789a      	ldrb	r2, [r3, #2]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	78da      	ldrb	r2, [r3, #3]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	791a      	ldrb	r2, [r3, #4]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	795a      	ldrb	r2, [r3, #5]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	799a      	ldrb	r2, [r3, #6]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	79da      	ldrb	r2, [r3, #7]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	7a1a      	ldrb	r2, [r3, #8]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	721a      	strb	r2, [r3, #8]
}
 800d750:	bf00      	nop
 800d752:	370c      	adds	r7, #12
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr

0800d75c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b083      	sub	sp, #12
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	781a      	ldrb	r2, [r3, #0]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	785a      	ldrb	r2, [r3, #1]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	789a      	ldrb	r2, [r3, #2]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	78da      	ldrb	r2, [r3, #3]
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	3304      	adds	r3, #4
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	b29a      	uxth	r2, r3
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	3305      	adds	r3, #5
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	b29b      	uxth	r3, r3
 800d796:	021b      	lsls	r3, r3, #8
 800d798:	b29b      	uxth	r3, r3
 800d79a:	4313      	orrs	r3, r2
 800d79c:	b29a      	uxth	r2, r3
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	799a      	ldrb	r2, [r3, #6]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	719a      	strb	r2, [r3, #6]
}
 800d7aa:	bf00      	nop
 800d7ac:	370c      	adds	r7, #12
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b4:	4770      	bx	lr

0800d7b6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d7b6:	b480      	push	{r7}
 800d7b8:	b087      	sub	sp, #28
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	60f8      	str	r0, [r7, #12]
 800d7be:	60b9      	str	r1, [r7, #8]
 800d7c0:	4613      	mov	r3, r2
 800d7c2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	3301      	adds	r3, #1
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	2b03      	cmp	r3, #3
 800d7cc:	d120      	bne.n	800d810 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	1e9a      	subs	r2, r3, #2
 800d7d4:	88fb      	ldrh	r3, [r7, #6]
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	bf28      	it	cs
 800d7da:	4613      	movcs	r3, r2
 800d7dc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	3302      	adds	r3, #2
 800d7e2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	82fb      	strh	r3, [r7, #22]
 800d7e8:	e00b      	b.n	800d802 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d7ea:	8afb      	ldrh	r3, [r7, #22]
 800d7ec:	68fa      	ldr	r2, [r7, #12]
 800d7ee:	4413      	add	r3, r2
 800d7f0:	781a      	ldrb	r2, [r3, #0]
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d7fc:	8afb      	ldrh	r3, [r7, #22]
 800d7fe:	3302      	adds	r3, #2
 800d800:	82fb      	strh	r3, [r7, #22]
 800d802:	8afa      	ldrh	r2, [r7, #22]
 800d804:	8abb      	ldrh	r3, [r7, #20]
 800d806:	429a      	cmp	r2, r3
 800d808:	d3ef      	bcc.n	800d7ea <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	2200      	movs	r2, #0
 800d80e:	701a      	strb	r2, [r3, #0]
  }
}
 800d810:	bf00      	nop
 800d812:	371c      	adds	r7, #28
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr

0800d81c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b085      	sub	sp, #20
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	881a      	ldrh	r2, [r3, #0]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	781b      	ldrb	r3, [r3, #0]
 800d82e:	b29b      	uxth	r3, r3
 800d830:	4413      	add	r3, r2
 800d832:	b29a      	uxth	r2, r3
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	781b      	ldrb	r3, [r3, #0]
 800d83c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	4413      	add	r3, r2
 800d842:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d844:	68fb      	ldr	r3, [r7, #12]
}
 800d846:	4618      	mov	r0, r3
 800d848:	3714      	adds	r7, #20
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr

0800d852 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d852:	b580      	push	{r7, lr}
 800d854:	b086      	sub	sp, #24
 800d856:	af00      	add	r7, sp, #0
 800d858:	60f8      	str	r0, [r7, #12]
 800d85a:	60b9      	str	r1, [r7, #8]
 800d85c:	4613      	mov	r3, r2
 800d85e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d860:	2301      	movs	r3, #1
 800d862:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	789b      	ldrb	r3, [r3, #2]
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d002      	beq.n	800d872 <USBH_CtlReq+0x20>
 800d86c:	2b02      	cmp	r3, #2
 800d86e:	d00f      	beq.n	800d890 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d870:	e027      	b.n	800d8c2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	68ba      	ldr	r2, [r7, #8]
 800d876:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	88fa      	ldrh	r2, [r7, #6]
 800d87c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	2201      	movs	r2, #1
 800d882:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2202      	movs	r2, #2
 800d888:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d88a:	2301      	movs	r3, #1
 800d88c:	75fb      	strb	r3, [r7, #23]
      break;
 800d88e:	e018      	b.n	800d8c2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d890:	68f8      	ldr	r0, [r7, #12]
 800d892:	f000 f81b 	bl	800d8cc <USBH_HandleControl>
 800d896:	4603      	mov	r3, r0
 800d898:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d89a:	7dfb      	ldrb	r3, [r7, #23]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d002      	beq.n	800d8a6 <USBH_CtlReq+0x54>
 800d8a0:	7dfb      	ldrb	r3, [r7, #23]
 800d8a2:	2b03      	cmp	r3, #3
 800d8a4:	d106      	bne.n	800d8b4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	761a      	strb	r2, [r3, #24]
      break;
 800d8b2:	e005      	b.n	800d8c0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d8b4:	7dfb      	ldrb	r3, [r7, #23]
 800d8b6:	2b02      	cmp	r3, #2
 800d8b8:	d102      	bne.n	800d8c0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2201      	movs	r2, #1
 800d8be:	709a      	strb	r2, [r3, #2]
      break;
 800d8c0:	bf00      	nop
  }
  return status;
 800d8c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3718      	adds	r7, #24
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b086      	sub	sp, #24
 800d8d0:	af02      	add	r7, sp, #8
 800d8d2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	7e1b      	ldrb	r3, [r3, #24]
 800d8e0:	3b01      	subs	r3, #1
 800d8e2:	2b0a      	cmp	r3, #10
 800d8e4:	f200 815f 	bhi.w	800dba6 <USBH_HandleControl+0x2da>
 800d8e8:	a201      	add	r2, pc, #4	; (adr r2, 800d8f0 <USBH_HandleControl+0x24>)
 800d8ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8ee:	bf00      	nop
 800d8f0:	0800d91d 	.word	0x0800d91d
 800d8f4:	0800d937 	.word	0x0800d937
 800d8f8:	0800d9a1 	.word	0x0800d9a1
 800d8fc:	0800d9c7 	.word	0x0800d9c7
 800d900:	0800d9ff 	.word	0x0800d9ff
 800d904:	0800da29 	.word	0x0800da29
 800d908:	0800da7b 	.word	0x0800da7b
 800d90c:	0800da9d 	.word	0x0800da9d
 800d910:	0800dad9 	.word	0x0800dad9
 800d914:	0800daff 	.word	0x0800daff
 800d918:	0800db3d 	.word	0x0800db3d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f103 0110 	add.w	r1, r3, #16
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	795b      	ldrb	r3, [r3, #5]
 800d926:	461a      	mov	r2, r3
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f000 f951 	bl	800dbd0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2202      	movs	r2, #2
 800d932:	761a      	strb	r2, [r3, #24]
      break;
 800d934:	e142      	b.n	800dbbc <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	795b      	ldrb	r3, [r3, #5]
 800d93a:	4619      	mov	r1, r3
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f00c fdf9 	bl	801a534 <USBH_LL_GetURBState>
 800d942:	4603      	mov	r3, r0
 800d944:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d946:	7bbb      	ldrb	r3, [r7, #14]
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d11e      	bne.n	800d98a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	7c1b      	ldrb	r3, [r3, #16]
 800d950:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d954:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	8adb      	ldrh	r3, [r3, #22]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d00a      	beq.n	800d974 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d95e:	7b7b      	ldrb	r3, [r7, #13]
 800d960:	2b80      	cmp	r3, #128	; 0x80
 800d962:	d103      	bne.n	800d96c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2203      	movs	r2, #3
 800d968:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d96a:	e11e      	b.n	800dbaa <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2205      	movs	r2, #5
 800d970:	761a      	strb	r2, [r3, #24]
      break;
 800d972:	e11a      	b.n	800dbaa <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 800d974:	7b7b      	ldrb	r3, [r7, #13]
 800d976:	2b80      	cmp	r3, #128	; 0x80
 800d978:	d103      	bne.n	800d982 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2209      	movs	r2, #9
 800d97e:	761a      	strb	r2, [r3, #24]
      break;
 800d980:	e113      	b.n	800dbaa <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2207      	movs	r2, #7
 800d986:	761a      	strb	r2, [r3, #24]
      break;
 800d988:	e10f      	b.n	800dbaa <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d98a:	7bbb      	ldrb	r3, [r7, #14]
 800d98c:	2b04      	cmp	r3, #4
 800d98e:	d003      	beq.n	800d998 <USBH_HandleControl+0xcc>
 800d990:	7bbb      	ldrb	r3, [r7, #14]
 800d992:	2b02      	cmp	r3, #2
 800d994:	f040 8109 	bne.w	800dbaa <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	220b      	movs	r2, #11
 800d99c:	761a      	strb	r2, [r3, #24]
      break;
 800d99e:	e104      	b.n	800dbaa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d9a6:	b29a      	uxth	r2, r3
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6899      	ldr	r1, [r3, #8]
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	899a      	ldrh	r2, [r3, #12]
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	791b      	ldrb	r3, [r3, #4]
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f000 f948 	bl	800dc4e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2204      	movs	r2, #4
 800d9c2:	761a      	strb	r2, [r3, #24]
      break;
 800d9c4:	e0fa      	b.n	800dbbc <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	791b      	ldrb	r3, [r3, #4]
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f00c fdb1 	bl	801a534 <USBH_LL_GetURBState>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d9d6:	7bbb      	ldrb	r3, [r7, #14]
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d102      	bne.n	800d9e2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2209      	movs	r2, #9
 800d9e0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d9e2:	7bbb      	ldrb	r3, [r7, #14]
 800d9e4:	2b05      	cmp	r3, #5
 800d9e6:	d102      	bne.n	800d9ee <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d9e8:	2303      	movs	r3, #3
 800d9ea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d9ec:	e0df      	b.n	800dbae <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800d9ee:	7bbb      	ldrb	r3, [r7, #14]
 800d9f0:	2b04      	cmp	r3, #4
 800d9f2:	f040 80dc 	bne.w	800dbae <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	220b      	movs	r2, #11
 800d9fa:	761a      	strb	r2, [r3, #24]
      break;
 800d9fc:	e0d7      	b.n	800dbae <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6899      	ldr	r1, [r3, #8]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	899a      	ldrh	r2, [r3, #12]
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	795b      	ldrb	r3, [r3, #5]
 800da0a:	2001      	movs	r0, #1
 800da0c:	9000      	str	r0, [sp, #0]
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f000 f8f8 	bl	800dc04 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800da1a:	b29a      	uxth	r2, r3
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2206      	movs	r2, #6
 800da24:	761a      	strb	r2, [r3, #24]
      break;
 800da26:	e0c9      	b.n	800dbbc <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	795b      	ldrb	r3, [r3, #5]
 800da2c:	4619      	mov	r1, r3
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f00c fd80 	bl	801a534 <USBH_LL_GetURBState>
 800da34:	4603      	mov	r3, r0
 800da36:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800da38:	7bbb      	ldrb	r3, [r7, #14]
 800da3a:	2b01      	cmp	r3, #1
 800da3c:	d103      	bne.n	800da46 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2207      	movs	r2, #7
 800da42:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800da44:	e0b5      	b.n	800dbb2 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 800da46:	7bbb      	ldrb	r3, [r7, #14]
 800da48:	2b05      	cmp	r3, #5
 800da4a:	d105      	bne.n	800da58 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	220c      	movs	r2, #12
 800da50:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800da52:	2303      	movs	r3, #3
 800da54:	73fb      	strb	r3, [r7, #15]
      break;
 800da56:	e0ac      	b.n	800dbb2 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800da58:	7bbb      	ldrb	r3, [r7, #14]
 800da5a:	2b02      	cmp	r3, #2
 800da5c:	d103      	bne.n	800da66 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2205      	movs	r2, #5
 800da62:	761a      	strb	r2, [r3, #24]
      break;
 800da64:	e0a5      	b.n	800dbb2 <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 800da66:	7bbb      	ldrb	r3, [r7, #14]
 800da68:	2b04      	cmp	r3, #4
 800da6a:	f040 80a2 	bne.w	800dbb2 <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	220b      	movs	r2, #11
 800da72:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800da74:	2302      	movs	r3, #2
 800da76:	73fb      	strb	r3, [r7, #15]
      break;
 800da78:	e09b      	b.n	800dbb2 <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	791b      	ldrb	r3, [r3, #4]
 800da7e:	2200      	movs	r2, #0
 800da80:	2100      	movs	r1, #0
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 f8e3 	bl	800dc4e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800da8e:	b29a      	uxth	r2, r3
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2208      	movs	r2, #8
 800da98:	761a      	strb	r2, [r3, #24]

      break;
 800da9a:	e08f      	b.n	800dbbc <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	791b      	ldrb	r3, [r3, #4]
 800daa0:	4619      	mov	r1, r3
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f00c fd46 	bl	801a534 <USBH_LL_GetURBState>
 800daa8:	4603      	mov	r3, r0
 800daaa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800daac:	7bbb      	ldrb	r3, [r7, #14]
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d105      	bne.n	800dabe <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	220d      	movs	r2, #13
 800dab6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800dab8:	2300      	movs	r3, #0
 800daba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dabc:	e07b      	b.n	800dbb6 <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 800dabe:	7bbb      	ldrb	r3, [r7, #14]
 800dac0:	2b04      	cmp	r3, #4
 800dac2:	d103      	bne.n	800dacc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	220b      	movs	r2, #11
 800dac8:	761a      	strb	r2, [r3, #24]
      break;
 800daca:	e074      	b.n	800dbb6 <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 800dacc:	7bbb      	ldrb	r3, [r7, #14]
 800dace:	2b05      	cmp	r3, #5
 800dad0:	d171      	bne.n	800dbb6 <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 800dad2:	2303      	movs	r3, #3
 800dad4:	73fb      	strb	r3, [r7, #15]
      break;
 800dad6:	e06e      	b.n	800dbb6 <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	795b      	ldrb	r3, [r3, #5]
 800dadc:	2201      	movs	r2, #1
 800dade:	9200      	str	r2, [sp, #0]
 800dae0:	2200      	movs	r2, #0
 800dae2:	2100      	movs	r1, #0
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f000 f88d 	bl	800dc04 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800daf0:	b29a      	uxth	r2, r3
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	220a      	movs	r2, #10
 800dafa:	761a      	strb	r2, [r3, #24]
      break;
 800dafc:	e05e      	b.n	800dbbc <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	795b      	ldrb	r3, [r3, #5]
 800db02:	4619      	mov	r1, r3
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f00c fd15 	bl	801a534 <USBH_LL_GetURBState>
 800db0a:	4603      	mov	r3, r0
 800db0c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800db0e:	7bbb      	ldrb	r3, [r7, #14]
 800db10:	2b01      	cmp	r3, #1
 800db12:	d105      	bne.n	800db20 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800db14:	2300      	movs	r3, #0
 800db16:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	220d      	movs	r2, #13
 800db1c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800db1e:	e04c      	b.n	800dbba <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800db20:	7bbb      	ldrb	r3, [r7, #14]
 800db22:	2b02      	cmp	r3, #2
 800db24:	d103      	bne.n	800db2e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2209      	movs	r2, #9
 800db2a:	761a      	strb	r2, [r3, #24]
      break;
 800db2c:	e045      	b.n	800dbba <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800db2e:	7bbb      	ldrb	r3, [r7, #14]
 800db30:	2b04      	cmp	r3, #4
 800db32:	d142      	bne.n	800dbba <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	220b      	movs	r2, #11
 800db38:	761a      	strb	r2, [r3, #24]
      break;
 800db3a:	e03e      	b.n	800dbba <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	7e5b      	ldrb	r3, [r3, #25]
 800db40:	3301      	adds	r3, #1
 800db42:	b2da      	uxtb	r2, r3
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	765a      	strb	r2, [r3, #25]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	7e5b      	ldrb	r3, [r3, #25]
 800db4c:	2b02      	cmp	r3, #2
 800db4e:	d806      	bhi.n	800db5e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2201      	movs	r2, #1
 800db54:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2201      	movs	r2, #1
 800db5a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800db5c:	e02e      	b.n	800dbbc <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800db64:	2106      	movs	r1, #6
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2200      	movs	r2, #0
 800db6e:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800db70:	4815      	ldr	r0, [pc, #84]	; (800dbc8 <USBH_HandleControl+0x2fc>)
 800db72:	f00c fe99 	bl	801a8a8 <iprintf>
 800db76:	4815      	ldr	r0, [pc, #84]	; (800dbcc <USBH_HandleControl+0x300>)
 800db78:	f00c fe96 	bl	801a8a8 <iprintf>
 800db7c:	200a      	movs	r0, #10
 800db7e:	f00c feab 	bl	801a8d8 <putchar>
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	795b      	ldrb	r3, [r3, #5]
 800db86:	4619      	mov	r1, r3
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f000 f911 	bl	800ddb0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	791b      	ldrb	r3, [r3, #4]
 800db92:	4619      	mov	r1, r3
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f000 f90b 	bl	800ddb0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2200      	movs	r2, #0
 800db9e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800dba0:	2302      	movs	r3, #2
 800dba2:	73fb      	strb	r3, [r7, #15]
      break;
 800dba4:	e00a      	b.n	800dbbc <USBH_HandleControl+0x2f0>

    default:
      break;
 800dba6:	bf00      	nop
 800dba8:	e008      	b.n	800dbbc <USBH_HandleControl+0x2f0>
      break;
 800dbaa:	bf00      	nop
 800dbac:	e006      	b.n	800dbbc <USBH_HandleControl+0x2f0>
      break;
 800dbae:	bf00      	nop
 800dbb0:	e004      	b.n	800dbbc <USBH_HandleControl+0x2f0>
      break;
 800dbb2:	bf00      	nop
 800dbb4:	e002      	b.n	800dbbc <USBH_HandleControl+0x2f0>
      break;
 800dbb6:	bf00      	nop
 800dbb8:	e000      	b.n	800dbbc <USBH_HandleControl+0x2f0>
      break;
 800dbba:	bf00      	nop
  }

  return status;
 800dbbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3710      	adds	r7, #16
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	0801becc 	.word	0x0801becc
 800dbcc:	0801bed4 	.word	0x0801bed4

0800dbd0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b088      	sub	sp, #32
 800dbd4:	af04      	add	r7, sp, #16
 800dbd6:	60f8      	str	r0, [r7, #12]
 800dbd8:	60b9      	str	r1, [r7, #8]
 800dbda:	4613      	mov	r3, r2
 800dbdc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dbde:	79f9      	ldrb	r1, [r7, #7]
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	9303      	str	r3, [sp, #12]
 800dbe4:	2308      	movs	r3, #8
 800dbe6:	9302      	str	r3, [sp, #8]
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	9301      	str	r3, [sp, #4]
 800dbec:	2300      	movs	r3, #0
 800dbee:	9300      	str	r3, [sp, #0]
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	68f8      	ldr	r0, [r7, #12]
 800dbf6:	f00c fc6c 	bl	801a4d2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800dbfa:	2300      	movs	r3, #0
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3710      	adds	r7, #16
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}

0800dc04 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b088      	sub	sp, #32
 800dc08:	af04      	add	r7, sp, #16
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	4611      	mov	r1, r2
 800dc10:	461a      	mov	r2, r3
 800dc12:	460b      	mov	r3, r1
 800dc14:	80fb      	strh	r3, [r7, #6]
 800dc16:	4613      	mov	r3, r2
 800dc18:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d001      	beq.n	800dc28 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800dc24:	2300      	movs	r3, #0
 800dc26:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dc28:	7979      	ldrb	r1, [r7, #5]
 800dc2a:	7e3b      	ldrb	r3, [r7, #24]
 800dc2c:	9303      	str	r3, [sp, #12]
 800dc2e:	88fb      	ldrh	r3, [r7, #6]
 800dc30:	9302      	str	r3, [sp, #8]
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	9301      	str	r3, [sp, #4]
 800dc36:	2301      	movs	r3, #1
 800dc38:	9300      	str	r3, [sp, #0]
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	68f8      	ldr	r0, [r7, #12]
 800dc40:	f00c fc47 	bl	801a4d2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800dc44:	2300      	movs	r3, #0
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3710      	adds	r7, #16
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}

0800dc4e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800dc4e:	b580      	push	{r7, lr}
 800dc50:	b088      	sub	sp, #32
 800dc52:	af04      	add	r7, sp, #16
 800dc54:	60f8      	str	r0, [r7, #12]
 800dc56:	60b9      	str	r1, [r7, #8]
 800dc58:	4611      	mov	r1, r2
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	460b      	mov	r3, r1
 800dc5e:	80fb      	strh	r3, [r7, #6]
 800dc60:	4613      	mov	r3, r2
 800dc62:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dc64:	7979      	ldrb	r1, [r7, #5]
 800dc66:	2300      	movs	r3, #0
 800dc68:	9303      	str	r3, [sp, #12]
 800dc6a:	88fb      	ldrh	r3, [r7, #6]
 800dc6c:	9302      	str	r3, [sp, #8]
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	9301      	str	r3, [sp, #4]
 800dc72:	2301      	movs	r3, #1
 800dc74:	9300      	str	r3, [sp, #0]
 800dc76:	2300      	movs	r3, #0
 800dc78:	2201      	movs	r2, #1
 800dc7a:	68f8      	ldr	r0, [r7, #12]
 800dc7c:	f00c fc29 	bl	801a4d2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800dc80:	2300      	movs	r3, #0

}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3710      	adds	r7, #16
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}

0800dc8a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800dc8a:	b580      	push	{r7, lr}
 800dc8c:	b088      	sub	sp, #32
 800dc8e:	af04      	add	r7, sp, #16
 800dc90:	60f8      	str	r0, [r7, #12]
 800dc92:	60b9      	str	r1, [r7, #8]
 800dc94:	4611      	mov	r1, r2
 800dc96:	461a      	mov	r2, r3
 800dc98:	460b      	mov	r3, r1
 800dc9a:	80fb      	strh	r3, [r7, #6]
 800dc9c:	4613      	mov	r3, r2
 800dc9e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d001      	beq.n	800dcae <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dcae:	7979      	ldrb	r1, [r7, #5]
 800dcb0:	7e3b      	ldrb	r3, [r7, #24]
 800dcb2:	9303      	str	r3, [sp, #12]
 800dcb4:	88fb      	ldrh	r3, [r7, #6]
 800dcb6:	9302      	str	r3, [sp, #8]
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	9301      	str	r3, [sp, #4]
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	9300      	str	r3, [sp, #0]
 800dcc0:	2302      	movs	r3, #2
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	68f8      	ldr	r0, [r7, #12]
 800dcc6:	f00c fc04 	bl	801a4d2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800dcca:	2300      	movs	r3, #0
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3710      	adds	r7, #16
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b088      	sub	sp, #32
 800dcd8:	af04      	add	r7, sp, #16
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	4611      	mov	r1, r2
 800dce0:	461a      	mov	r2, r3
 800dce2:	460b      	mov	r3, r1
 800dce4:	80fb      	strh	r3, [r7, #6]
 800dce6:	4613      	mov	r3, r2
 800dce8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dcea:	7979      	ldrb	r1, [r7, #5]
 800dcec:	2300      	movs	r3, #0
 800dcee:	9303      	str	r3, [sp, #12]
 800dcf0:	88fb      	ldrh	r3, [r7, #6]
 800dcf2:	9302      	str	r3, [sp, #8]
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	9301      	str	r3, [sp, #4]
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	9300      	str	r3, [sp, #0]
 800dcfc:	2302      	movs	r3, #2
 800dcfe:	2201      	movs	r2, #1
 800dd00:	68f8      	ldr	r0, [r7, #12]
 800dd02:	f00c fbe6 	bl	801a4d2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800dd06:	2300      	movs	r3, #0
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3710      	adds	r7, #16
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}

0800dd10 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b086      	sub	sp, #24
 800dd14:	af04      	add	r7, sp, #16
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	4608      	mov	r0, r1
 800dd1a:	4611      	mov	r1, r2
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	4603      	mov	r3, r0
 800dd20:	70fb      	strb	r3, [r7, #3]
 800dd22:	460b      	mov	r3, r1
 800dd24:	70bb      	strb	r3, [r7, #2]
 800dd26:	4613      	mov	r3, r2
 800dd28:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800dd2a:	7878      	ldrb	r0, [r7, #1]
 800dd2c:	78ba      	ldrb	r2, [r7, #2]
 800dd2e:	78f9      	ldrb	r1, [r7, #3]
 800dd30:	8b3b      	ldrh	r3, [r7, #24]
 800dd32:	9302      	str	r3, [sp, #8]
 800dd34:	7d3b      	ldrb	r3, [r7, #20]
 800dd36:	9301      	str	r3, [sp, #4]
 800dd38:	7c3b      	ldrb	r3, [r7, #16]
 800dd3a:	9300      	str	r3, [sp, #0]
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f00c fb79 	bl	801a436 <USBH_LL_OpenPipe>

  return USBH_OK;
 800dd44:	2300      	movs	r3, #0
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3708      	adds	r7, #8
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}

0800dd4e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800dd4e:	b580      	push	{r7, lr}
 800dd50:	b082      	sub	sp, #8
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	6078      	str	r0, [r7, #4]
 800dd56:	460b      	mov	r3, r1
 800dd58:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800dd5a:	78fb      	ldrb	r3, [r7, #3]
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f00c fb98 	bl	801a494 <USBH_LL_ClosePipe>

  return USBH_OK;
 800dd64:	2300      	movs	r3, #0
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3708      	adds	r7, #8
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800dd6e:	b580      	push	{r7, lr}
 800dd70:	b084      	sub	sp, #16
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	6078      	str	r0, [r7, #4]
 800dd76:	460b      	mov	r3, r1
 800dd78:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f000 f836 	bl	800ddec <USBH_GetFreePipe>
 800dd80:	4603      	mov	r3, r0
 800dd82:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800dd84:	89fb      	ldrh	r3, [r7, #14]
 800dd86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d00a      	beq.n	800dda4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800dd8e:	78fa      	ldrb	r2, [r7, #3]
 800dd90:	89fb      	ldrh	r3, [r7, #14]
 800dd92:	f003 030f 	and.w	r3, r3, #15
 800dd96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dd9a:	6879      	ldr	r1, [r7, #4]
 800dd9c:	33e0      	adds	r3, #224	; 0xe0
 800dd9e:	009b      	lsls	r3, r3, #2
 800dda0:	440b      	add	r3, r1
 800dda2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800dda4:	89fb      	ldrh	r3, [r7, #14]
 800dda6:	b2db      	uxtb	r3, r3
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3710      	adds	r7, #16
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b083      	sub	sp, #12
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	460b      	mov	r3, r1
 800ddba:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800ddbc:	78fb      	ldrb	r3, [r7, #3]
 800ddbe:	2b0a      	cmp	r3, #10
 800ddc0:	d80d      	bhi.n	800ddde <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ddc2:	78fb      	ldrb	r3, [r7, #3]
 800ddc4:	687a      	ldr	r2, [r7, #4]
 800ddc6:	33e0      	adds	r3, #224	; 0xe0
 800ddc8:	009b      	lsls	r3, r3, #2
 800ddca:	4413      	add	r3, r2
 800ddcc:	685a      	ldr	r2, [r3, #4]
 800ddce:	78fb      	ldrb	r3, [r7, #3]
 800ddd0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ddd4:	6879      	ldr	r1, [r7, #4]
 800ddd6:	33e0      	adds	r3, #224	; 0xe0
 800ddd8:	009b      	lsls	r3, r3, #2
 800ddda:	440b      	add	r3, r1
 800dddc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ddde:	2300      	movs	r3, #0
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	370c      	adds	r7, #12
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr

0800ddec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b085      	sub	sp, #20
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	73fb      	strb	r3, [r7, #15]
 800ddfc:	e00f      	b.n	800de1e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ddfe:	7bfb      	ldrb	r3, [r7, #15]
 800de00:	687a      	ldr	r2, [r7, #4]
 800de02:	33e0      	adds	r3, #224	; 0xe0
 800de04:	009b      	lsls	r3, r3, #2
 800de06:	4413      	add	r3, r2
 800de08:	685b      	ldr	r3, [r3, #4]
 800de0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d102      	bne.n	800de18 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800de12:	7bfb      	ldrb	r3, [r7, #15]
 800de14:	b29b      	uxth	r3, r3
 800de16:	e007      	b.n	800de28 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800de18:	7bfb      	ldrb	r3, [r7, #15]
 800de1a:	3301      	adds	r3, #1
 800de1c:	73fb      	strb	r3, [r7, #15]
 800de1e:	7bfb      	ldrb	r3, [r7, #15]
 800de20:	2b0a      	cmp	r3, #10
 800de22:	d9ec      	bls.n	800ddfe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800de24:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3714      	adds	r7, #20
 800de2c:	46bd      	mov	sp, r7
 800de2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de32:	4770      	bx	lr

0800de34 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b084      	sub	sp, #16
 800de38:	af00      	add	r7, sp, #0
 800de3a:	4603      	mov	r3, r0
 800de3c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800de3e:	79fb      	ldrb	r3, [r7, #7]
 800de40:	4a08      	ldr	r2, [pc, #32]	; (800de64 <disk_status+0x30>)
 800de42:	009b      	lsls	r3, r3, #2
 800de44:	4413      	add	r3, r2
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	685b      	ldr	r3, [r3, #4]
 800de4a:	79fa      	ldrb	r2, [r7, #7]
 800de4c:	4905      	ldr	r1, [pc, #20]	; (800de64 <disk_status+0x30>)
 800de4e:	440a      	add	r2, r1
 800de50:	7a12      	ldrb	r2, [r2, #8]
 800de52:	4610      	mov	r0, r2
 800de54:	4798      	blx	r3
 800de56:	4603      	mov	r3, r0
 800de58:	73fb      	strb	r3, [r7, #15]
  return stat;
 800de5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3710      	adds	r7, #16
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	2000313c 	.word	0x2000313c

0800de68 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b084      	sub	sp, #16
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	4603      	mov	r3, r0
 800de70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800de72:	2300      	movs	r3, #0
 800de74:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800de76:	79fb      	ldrb	r3, [r7, #7]
 800de78:	4a0d      	ldr	r2, [pc, #52]	; (800deb0 <disk_initialize+0x48>)
 800de7a:	5cd3      	ldrb	r3, [r2, r3]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d111      	bne.n	800dea4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800de80:	79fb      	ldrb	r3, [r7, #7]
 800de82:	4a0b      	ldr	r2, [pc, #44]	; (800deb0 <disk_initialize+0x48>)
 800de84:	2101      	movs	r1, #1
 800de86:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800de88:	79fb      	ldrb	r3, [r7, #7]
 800de8a:	4a09      	ldr	r2, [pc, #36]	; (800deb0 <disk_initialize+0x48>)
 800de8c:	009b      	lsls	r3, r3, #2
 800de8e:	4413      	add	r3, r2
 800de90:	685b      	ldr	r3, [r3, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	79fa      	ldrb	r2, [r7, #7]
 800de96:	4906      	ldr	r1, [pc, #24]	; (800deb0 <disk_initialize+0x48>)
 800de98:	440a      	add	r2, r1
 800de9a:	7a12      	ldrb	r2, [r2, #8]
 800de9c:	4610      	mov	r0, r2
 800de9e:	4798      	blx	r3
 800dea0:	4603      	mov	r3, r0
 800dea2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800dea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3710      	adds	r7, #16
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}
 800deae:	bf00      	nop
 800deb0:	2000313c 	.word	0x2000313c

0800deb4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800deb4:	b590      	push	{r4, r7, lr}
 800deb6:	b087      	sub	sp, #28
 800deb8:	af00      	add	r7, sp, #0
 800deba:	60b9      	str	r1, [r7, #8]
 800debc:	607a      	str	r2, [r7, #4]
 800debe:	603b      	str	r3, [r7, #0]
 800dec0:	4603      	mov	r3, r0
 800dec2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800dec4:	7bfb      	ldrb	r3, [r7, #15]
 800dec6:	4a0a      	ldr	r2, [pc, #40]	; (800def0 <disk_read+0x3c>)
 800dec8:	009b      	lsls	r3, r3, #2
 800deca:	4413      	add	r3, r2
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	689c      	ldr	r4, [r3, #8]
 800ded0:	7bfb      	ldrb	r3, [r7, #15]
 800ded2:	4a07      	ldr	r2, [pc, #28]	; (800def0 <disk_read+0x3c>)
 800ded4:	4413      	add	r3, r2
 800ded6:	7a18      	ldrb	r0, [r3, #8]
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	68b9      	ldr	r1, [r7, #8]
 800dede:	47a0      	blx	r4
 800dee0:	4603      	mov	r3, r0
 800dee2:	75fb      	strb	r3, [r7, #23]
  return res;
 800dee4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	371c      	adds	r7, #28
 800deea:	46bd      	mov	sp, r7
 800deec:	bd90      	pop	{r4, r7, pc}
 800deee:	bf00      	nop
 800def0:	2000313c 	.word	0x2000313c

0800def4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800def4:	b590      	push	{r4, r7, lr}
 800def6:	b087      	sub	sp, #28
 800def8:	af00      	add	r7, sp, #0
 800defa:	60b9      	str	r1, [r7, #8]
 800defc:	607a      	str	r2, [r7, #4]
 800defe:	603b      	str	r3, [r7, #0]
 800df00:	4603      	mov	r3, r0
 800df02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800df04:	7bfb      	ldrb	r3, [r7, #15]
 800df06:	4a0a      	ldr	r2, [pc, #40]	; (800df30 <disk_write+0x3c>)
 800df08:	009b      	lsls	r3, r3, #2
 800df0a:	4413      	add	r3, r2
 800df0c:	685b      	ldr	r3, [r3, #4]
 800df0e:	68dc      	ldr	r4, [r3, #12]
 800df10:	7bfb      	ldrb	r3, [r7, #15]
 800df12:	4a07      	ldr	r2, [pc, #28]	; (800df30 <disk_write+0x3c>)
 800df14:	4413      	add	r3, r2
 800df16:	7a18      	ldrb	r0, [r3, #8]
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	687a      	ldr	r2, [r7, #4]
 800df1c:	68b9      	ldr	r1, [r7, #8]
 800df1e:	47a0      	blx	r4
 800df20:	4603      	mov	r3, r0
 800df22:	75fb      	strb	r3, [r7, #23]
  return res;
 800df24:	7dfb      	ldrb	r3, [r7, #23]
}
 800df26:	4618      	mov	r0, r3
 800df28:	371c      	adds	r7, #28
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd90      	pop	{r4, r7, pc}
 800df2e:	bf00      	nop
 800df30:	2000313c 	.word	0x2000313c

0800df34 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	4603      	mov	r3, r0
 800df3c:	603a      	str	r2, [r7, #0]
 800df3e:	71fb      	strb	r3, [r7, #7]
 800df40:	460b      	mov	r3, r1
 800df42:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800df44:	79fb      	ldrb	r3, [r7, #7]
 800df46:	4a09      	ldr	r2, [pc, #36]	; (800df6c <disk_ioctl+0x38>)
 800df48:	009b      	lsls	r3, r3, #2
 800df4a:	4413      	add	r3, r2
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	691b      	ldr	r3, [r3, #16]
 800df50:	79fa      	ldrb	r2, [r7, #7]
 800df52:	4906      	ldr	r1, [pc, #24]	; (800df6c <disk_ioctl+0x38>)
 800df54:	440a      	add	r2, r1
 800df56:	7a10      	ldrb	r0, [r2, #8]
 800df58:	79b9      	ldrb	r1, [r7, #6]
 800df5a:	683a      	ldr	r2, [r7, #0]
 800df5c:	4798      	blx	r3
 800df5e:	4603      	mov	r3, r0
 800df60:	73fb      	strb	r3, [r7, #15]
  return res;
 800df62:	7bfb      	ldrb	r3, [r7, #15]
}
 800df64:	4618      	mov	r0, r3
 800df66:	3710      	adds	r7, #16
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	2000313c 	.word	0x2000313c

0800df70 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800df70:	b480      	push	{r7}
 800df72:	b085      	sub	sp, #20
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	3301      	adds	r3, #1
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800df80:	89fb      	ldrh	r3, [r7, #14]
 800df82:	021b      	lsls	r3, r3, #8
 800df84:	b21a      	sxth	r2, r3
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	b21b      	sxth	r3, r3
 800df8c:	4313      	orrs	r3, r2
 800df8e:	b21b      	sxth	r3, r3
 800df90:	81fb      	strh	r3, [r7, #14]
	return rv;
 800df92:	89fb      	ldrh	r3, [r7, #14]
}
 800df94:	4618      	mov	r0, r3
 800df96:	3714      	adds	r7, #20
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b085      	sub	sp, #20
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	3303      	adds	r3, #3
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	021b      	lsls	r3, r3, #8
 800dfb4:	687a      	ldr	r2, [r7, #4]
 800dfb6:	3202      	adds	r2, #2
 800dfb8:	7812      	ldrb	r2, [r2, #0]
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	021b      	lsls	r3, r3, #8
 800dfc2:	687a      	ldr	r2, [r7, #4]
 800dfc4:	3201      	adds	r2, #1
 800dfc6:	7812      	ldrb	r2, [r2, #0]
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	021b      	lsls	r3, r3, #8
 800dfd0:	687a      	ldr	r2, [r7, #4]
 800dfd2:	7812      	ldrb	r2, [r2, #0]
 800dfd4:	4313      	orrs	r3, r2
 800dfd6:	60fb      	str	r3, [r7, #12]
	return rv;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3714      	adds	r7, #20
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr

0800dfe6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800dfe6:	b480      	push	{r7}
 800dfe8:	b083      	sub	sp, #12
 800dfea:	af00      	add	r7, sp, #0
 800dfec:	6078      	str	r0, [r7, #4]
 800dfee:	460b      	mov	r3, r1
 800dff0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	1c5a      	adds	r2, r3, #1
 800dff6:	607a      	str	r2, [r7, #4]
 800dff8:	887a      	ldrh	r2, [r7, #2]
 800dffa:	b2d2      	uxtb	r2, r2
 800dffc:	701a      	strb	r2, [r3, #0]
 800dffe:	887b      	ldrh	r3, [r7, #2]
 800e000:	0a1b      	lsrs	r3, r3, #8
 800e002:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	1c5a      	adds	r2, r3, #1
 800e008:	607a      	str	r2, [r7, #4]
 800e00a:	887a      	ldrh	r2, [r7, #2]
 800e00c:	b2d2      	uxtb	r2, r2
 800e00e:	701a      	strb	r2, [r3, #0]
}
 800e010:	bf00      	nop
 800e012:	370c      	adds	r7, #12
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e01c:	b480      	push	{r7}
 800e01e:	b083      	sub	sp, #12
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	1c5a      	adds	r2, r3, #1
 800e02a:	607a      	str	r2, [r7, #4]
 800e02c:	683a      	ldr	r2, [r7, #0]
 800e02e:	b2d2      	uxtb	r2, r2
 800e030:	701a      	strb	r2, [r3, #0]
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	0a1b      	lsrs	r3, r3, #8
 800e036:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	1c5a      	adds	r2, r3, #1
 800e03c:	607a      	str	r2, [r7, #4]
 800e03e:	683a      	ldr	r2, [r7, #0]
 800e040:	b2d2      	uxtb	r2, r2
 800e042:	701a      	strb	r2, [r3, #0]
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	0a1b      	lsrs	r3, r3, #8
 800e048:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	1c5a      	adds	r2, r3, #1
 800e04e:	607a      	str	r2, [r7, #4]
 800e050:	683a      	ldr	r2, [r7, #0]
 800e052:	b2d2      	uxtb	r2, r2
 800e054:	701a      	strb	r2, [r3, #0]
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	0a1b      	lsrs	r3, r3, #8
 800e05a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	1c5a      	adds	r2, r3, #1
 800e060:	607a      	str	r2, [r7, #4]
 800e062:	683a      	ldr	r2, [r7, #0]
 800e064:	b2d2      	uxtb	r2, r2
 800e066:	701a      	strb	r2, [r3, #0]
}
 800e068:	bf00      	nop
 800e06a:	370c      	adds	r7, #12
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e074:	b480      	push	{r7}
 800e076:	b087      	sub	sp, #28
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	60b9      	str	r1, [r7, #8]
 800e07e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d00d      	beq.n	800e0aa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e08e:	693a      	ldr	r2, [r7, #16]
 800e090:	1c53      	adds	r3, r2, #1
 800e092:	613b      	str	r3, [r7, #16]
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	1c59      	adds	r1, r3, #1
 800e098:	6179      	str	r1, [r7, #20]
 800e09a:	7812      	ldrb	r2, [r2, #0]
 800e09c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	3b01      	subs	r3, #1
 800e0a2:	607b      	str	r3, [r7, #4]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d1f1      	bne.n	800e08e <mem_cpy+0x1a>
	}
}
 800e0aa:	bf00      	nop
 800e0ac:	371c      	adds	r7, #28
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b4:	4770      	bx	lr

0800e0b6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e0b6:	b480      	push	{r7}
 800e0b8:	b087      	sub	sp, #28
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	60f8      	str	r0, [r7, #12]
 800e0be:	60b9      	str	r1, [r7, #8]
 800e0c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	1c5a      	adds	r2, r3, #1
 800e0ca:	617a      	str	r2, [r7, #20]
 800e0cc:	68ba      	ldr	r2, [r7, #8]
 800e0ce:	b2d2      	uxtb	r2, r2
 800e0d0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	3b01      	subs	r3, #1
 800e0d6:	607b      	str	r3, [r7, #4]
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d1f3      	bne.n	800e0c6 <mem_set+0x10>
}
 800e0de:	bf00      	nop
 800e0e0:	bf00      	nop
 800e0e2:	371c      	adds	r7, #28
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr

0800e0ec <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e0ec:	b480      	push	{r7}
 800e0ee:	b089      	sub	sp, #36	; 0x24
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	61fb      	str	r3, [r7, #28]
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e100:	2300      	movs	r3, #0
 800e102:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e104:	69fb      	ldr	r3, [r7, #28]
 800e106:	1c5a      	adds	r2, r3, #1
 800e108:	61fa      	str	r2, [r7, #28]
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	4619      	mov	r1, r3
 800e10e:	69bb      	ldr	r3, [r7, #24]
 800e110:	1c5a      	adds	r2, r3, #1
 800e112:	61ba      	str	r2, [r7, #24]
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	1acb      	subs	r3, r1, r3
 800e118:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	3b01      	subs	r3, #1
 800e11e:	607b      	str	r3, [r7, #4]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d002      	beq.n	800e12c <mem_cmp+0x40>
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d0eb      	beq.n	800e104 <mem_cmp+0x18>

	return r;
 800e12c:	697b      	ldr	r3, [r7, #20]
}
 800e12e:	4618      	mov	r0, r3
 800e130:	3724      	adds	r7, #36	; 0x24
 800e132:	46bd      	mov	sp, r7
 800e134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e138:	4770      	bx	lr

0800e13a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e13a:	b480      	push	{r7}
 800e13c:	b083      	sub	sp, #12
 800e13e:	af00      	add	r7, sp, #0
 800e140:	6078      	str	r0, [r7, #4]
 800e142:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e144:	e002      	b.n	800e14c <chk_chr+0x12>
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	3301      	adds	r3, #1
 800e14a:	607b      	str	r3, [r7, #4]
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d005      	beq.n	800e160 <chk_chr+0x26>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	781b      	ldrb	r3, [r3, #0]
 800e158:	461a      	mov	r2, r3
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d1f2      	bne.n	800e146 <chk_chr+0xc>
	return *str;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	781b      	ldrb	r3, [r3, #0]
}
 800e164:	4618      	mov	r0, r3
 800e166:	370c      	adds	r7, #12
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr

0800e170 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e170:	b480      	push	{r7}
 800e172:	b085      	sub	sp, #20
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e17a:	2300      	movs	r3, #0
 800e17c:	60bb      	str	r3, [r7, #8]
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	60fb      	str	r3, [r7, #12]
 800e182:	e029      	b.n	800e1d8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e184:	4a27      	ldr	r2, [pc, #156]	; (800e224 <chk_lock+0xb4>)
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	011b      	lsls	r3, r3, #4
 800e18a:	4413      	add	r3, r2
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d01d      	beq.n	800e1ce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e192:	4a24      	ldr	r2, [pc, #144]	; (800e224 <chk_lock+0xb4>)
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	011b      	lsls	r3, r3, #4
 800e198:	4413      	add	r3, r2
 800e19a:	681a      	ldr	r2, [r3, #0]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d116      	bne.n	800e1d2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e1a4:	4a1f      	ldr	r2, [pc, #124]	; (800e224 <chk_lock+0xb4>)
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	011b      	lsls	r3, r3, #4
 800e1aa:	4413      	add	r3, r2
 800e1ac:	3304      	adds	r3, #4
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d10c      	bne.n	800e1d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e1b8:	4a1a      	ldr	r2, [pc, #104]	; (800e224 <chk_lock+0xb4>)
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	011b      	lsls	r3, r3, #4
 800e1be:	4413      	add	r3, r2
 800e1c0:	3308      	adds	r3, #8
 800e1c2:	681a      	ldr	r2, [r3, #0]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d102      	bne.n	800e1d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e1cc:	e007      	b.n	800e1de <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	60fb      	str	r3, [r7, #12]
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2b01      	cmp	r3, #1
 800e1dc:	d9d2      	bls.n	800e184 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	2b02      	cmp	r3, #2
 800e1e2:	d109      	bne.n	800e1f8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d102      	bne.n	800e1f0 <chk_lock+0x80>
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	2b02      	cmp	r3, #2
 800e1ee:	d101      	bne.n	800e1f4 <chk_lock+0x84>
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	e010      	b.n	800e216 <chk_lock+0xa6>
 800e1f4:	2312      	movs	r3, #18
 800e1f6:	e00e      	b.n	800e216 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d108      	bne.n	800e210 <chk_lock+0xa0>
 800e1fe:	4a09      	ldr	r2, [pc, #36]	; (800e224 <chk_lock+0xb4>)
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	011b      	lsls	r3, r3, #4
 800e204:	4413      	add	r3, r2
 800e206:	330c      	adds	r3, #12
 800e208:	881b      	ldrh	r3, [r3, #0]
 800e20a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e20e:	d101      	bne.n	800e214 <chk_lock+0xa4>
 800e210:	2310      	movs	r3, #16
 800e212:	e000      	b.n	800e216 <chk_lock+0xa6>
 800e214:	2300      	movs	r3, #0
}
 800e216:	4618      	mov	r0, r3
 800e218:	3714      	adds	r7, #20
 800e21a:	46bd      	mov	sp, r7
 800e21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e220:	4770      	bx	lr
 800e222:	bf00      	nop
 800e224:	2000311c 	.word	0x2000311c

0800e228 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e228:	b480      	push	{r7}
 800e22a:	b083      	sub	sp, #12
 800e22c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e22e:	2300      	movs	r3, #0
 800e230:	607b      	str	r3, [r7, #4]
 800e232:	e002      	b.n	800e23a <enq_lock+0x12>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	3301      	adds	r3, #1
 800e238:	607b      	str	r3, [r7, #4]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	d806      	bhi.n	800e24e <enq_lock+0x26>
 800e240:	4a09      	ldr	r2, [pc, #36]	; (800e268 <enq_lock+0x40>)
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	011b      	lsls	r3, r3, #4
 800e246:	4413      	add	r3, r2
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d1f2      	bne.n	800e234 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2b02      	cmp	r3, #2
 800e252:	bf14      	ite	ne
 800e254:	2301      	movne	r3, #1
 800e256:	2300      	moveq	r3, #0
 800e258:	b2db      	uxtb	r3, r3
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	370c      	adds	r7, #12
 800e25e:	46bd      	mov	sp, r7
 800e260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e264:	4770      	bx	lr
 800e266:	bf00      	nop
 800e268:	2000311c 	.word	0x2000311c

0800e26c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e26c:	b480      	push	{r7}
 800e26e:	b085      	sub	sp, #20
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e276:	2300      	movs	r3, #0
 800e278:	60fb      	str	r3, [r7, #12]
 800e27a:	e01f      	b.n	800e2bc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e27c:	4a41      	ldr	r2, [pc, #260]	; (800e384 <inc_lock+0x118>)
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	011b      	lsls	r3, r3, #4
 800e282:	4413      	add	r3, r2
 800e284:	681a      	ldr	r2, [r3, #0]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d113      	bne.n	800e2b6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e28e:	4a3d      	ldr	r2, [pc, #244]	; (800e384 <inc_lock+0x118>)
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	011b      	lsls	r3, r3, #4
 800e294:	4413      	add	r3, r2
 800e296:	3304      	adds	r3, #4
 800e298:	681a      	ldr	r2, [r3, #0]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d109      	bne.n	800e2b6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e2a2:	4a38      	ldr	r2, [pc, #224]	; (800e384 <inc_lock+0x118>)
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	011b      	lsls	r3, r3, #4
 800e2a8:	4413      	add	r3, r2
 800e2aa:	3308      	adds	r3, #8
 800e2ac:	681a      	ldr	r2, [r3, #0]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d006      	beq.n	800e2c4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	3301      	adds	r3, #1
 800e2ba:	60fb      	str	r3, [r7, #12]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	2b01      	cmp	r3, #1
 800e2c0:	d9dc      	bls.n	800e27c <inc_lock+0x10>
 800e2c2:	e000      	b.n	800e2c6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e2c4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	2b02      	cmp	r3, #2
 800e2ca:	d132      	bne.n	800e332 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	60fb      	str	r3, [r7, #12]
 800e2d0:	e002      	b.n	800e2d8 <inc_lock+0x6c>
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	60fb      	str	r3, [r7, #12]
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2b01      	cmp	r3, #1
 800e2dc:	d806      	bhi.n	800e2ec <inc_lock+0x80>
 800e2de:	4a29      	ldr	r2, [pc, #164]	; (800e384 <inc_lock+0x118>)
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	011b      	lsls	r3, r3, #4
 800e2e4:	4413      	add	r3, r2
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d1f2      	bne.n	800e2d2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	2b02      	cmp	r3, #2
 800e2f0:	d101      	bne.n	800e2f6 <inc_lock+0x8a>
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	e040      	b.n	800e378 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681a      	ldr	r2, [r3, #0]
 800e2fa:	4922      	ldr	r1, [pc, #136]	; (800e384 <inc_lock+0x118>)
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	011b      	lsls	r3, r3, #4
 800e300:	440b      	add	r3, r1
 800e302:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	689a      	ldr	r2, [r3, #8]
 800e308:	491e      	ldr	r1, [pc, #120]	; (800e384 <inc_lock+0x118>)
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	011b      	lsls	r3, r3, #4
 800e30e:	440b      	add	r3, r1
 800e310:	3304      	adds	r3, #4
 800e312:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	695a      	ldr	r2, [r3, #20]
 800e318:	491a      	ldr	r1, [pc, #104]	; (800e384 <inc_lock+0x118>)
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	011b      	lsls	r3, r3, #4
 800e31e:	440b      	add	r3, r1
 800e320:	3308      	adds	r3, #8
 800e322:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e324:	4a17      	ldr	r2, [pc, #92]	; (800e384 <inc_lock+0x118>)
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	011b      	lsls	r3, r3, #4
 800e32a:	4413      	add	r3, r2
 800e32c:	330c      	adds	r3, #12
 800e32e:	2200      	movs	r2, #0
 800e330:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d009      	beq.n	800e34c <inc_lock+0xe0>
 800e338:	4a12      	ldr	r2, [pc, #72]	; (800e384 <inc_lock+0x118>)
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	011b      	lsls	r3, r3, #4
 800e33e:	4413      	add	r3, r2
 800e340:	330c      	adds	r3, #12
 800e342:	881b      	ldrh	r3, [r3, #0]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d001      	beq.n	800e34c <inc_lock+0xe0>
 800e348:	2300      	movs	r3, #0
 800e34a:	e015      	b.n	800e378 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d108      	bne.n	800e364 <inc_lock+0xf8>
 800e352:	4a0c      	ldr	r2, [pc, #48]	; (800e384 <inc_lock+0x118>)
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	011b      	lsls	r3, r3, #4
 800e358:	4413      	add	r3, r2
 800e35a:	330c      	adds	r3, #12
 800e35c:	881b      	ldrh	r3, [r3, #0]
 800e35e:	3301      	adds	r3, #1
 800e360:	b29a      	uxth	r2, r3
 800e362:	e001      	b.n	800e368 <inc_lock+0xfc>
 800e364:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e368:	4906      	ldr	r1, [pc, #24]	; (800e384 <inc_lock+0x118>)
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	011b      	lsls	r3, r3, #4
 800e36e:	440b      	add	r3, r1
 800e370:	330c      	adds	r3, #12
 800e372:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	3301      	adds	r3, #1
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3714      	adds	r7, #20
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr
 800e384:	2000311c 	.word	0x2000311c

0800e388 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e388:	b480      	push	{r7}
 800e38a:	b085      	sub	sp, #20
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	3b01      	subs	r3, #1
 800e394:	607b      	str	r3, [r7, #4]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d825      	bhi.n	800e3e8 <dec_lock+0x60>
		n = Files[i].ctr;
 800e39c:	4a17      	ldr	r2, [pc, #92]	; (800e3fc <dec_lock+0x74>)
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	011b      	lsls	r3, r3, #4
 800e3a2:	4413      	add	r3, r2
 800e3a4:	330c      	adds	r3, #12
 800e3a6:	881b      	ldrh	r3, [r3, #0]
 800e3a8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e3aa:	89fb      	ldrh	r3, [r7, #14]
 800e3ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3b0:	d101      	bne.n	800e3b6 <dec_lock+0x2e>
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e3b6:	89fb      	ldrh	r3, [r7, #14]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d002      	beq.n	800e3c2 <dec_lock+0x3a>
 800e3bc:	89fb      	ldrh	r3, [r7, #14]
 800e3be:	3b01      	subs	r3, #1
 800e3c0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e3c2:	4a0e      	ldr	r2, [pc, #56]	; (800e3fc <dec_lock+0x74>)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	011b      	lsls	r3, r3, #4
 800e3c8:	4413      	add	r3, r2
 800e3ca:	330c      	adds	r3, #12
 800e3cc:	89fa      	ldrh	r2, [r7, #14]
 800e3ce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e3d0:	89fb      	ldrh	r3, [r7, #14]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d105      	bne.n	800e3e2 <dec_lock+0x5a>
 800e3d6:	4a09      	ldr	r2, [pc, #36]	; (800e3fc <dec_lock+0x74>)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	011b      	lsls	r3, r3, #4
 800e3dc:	4413      	add	r3, r2
 800e3de:	2200      	movs	r2, #0
 800e3e0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	737b      	strb	r3, [r7, #13]
 800e3e6:	e001      	b.n	800e3ec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e3e8:	2302      	movs	r3, #2
 800e3ea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e3ec:	7b7b      	ldrb	r3, [r7, #13]
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3714      	adds	r7, #20
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f8:	4770      	bx	lr
 800e3fa:	bf00      	nop
 800e3fc:	2000311c 	.word	0x2000311c

0800e400 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e400:	b480      	push	{r7}
 800e402:	b085      	sub	sp, #20
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e408:	2300      	movs	r3, #0
 800e40a:	60fb      	str	r3, [r7, #12]
 800e40c:	e010      	b.n	800e430 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e40e:	4a0d      	ldr	r2, [pc, #52]	; (800e444 <clear_lock+0x44>)
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	011b      	lsls	r3, r3, #4
 800e414:	4413      	add	r3, r2
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	687a      	ldr	r2, [r7, #4]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d105      	bne.n	800e42a <clear_lock+0x2a>
 800e41e:	4a09      	ldr	r2, [pc, #36]	; (800e444 <clear_lock+0x44>)
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	011b      	lsls	r3, r3, #4
 800e424:	4413      	add	r3, r2
 800e426:	2200      	movs	r2, #0
 800e428:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	3301      	adds	r3, #1
 800e42e:	60fb      	str	r3, [r7, #12]
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2b01      	cmp	r3, #1
 800e434:	d9eb      	bls.n	800e40e <clear_lock+0xe>
	}
}
 800e436:	bf00      	nop
 800e438:	bf00      	nop
 800e43a:	3714      	adds	r7, #20
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr
 800e444:	2000311c 	.word	0x2000311c

0800e448 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b086      	sub	sp, #24
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e450:	2300      	movs	r3, #0
 800e452:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	78db      	ldrb	r3, [r3, #3]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d034      	beq.n	800e4c6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e460:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	7858      	ldrb	r0, [r3, #1]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e46c:	2301      	movs	r3, #1
 800e46e:	697a      	ldr	r2, [r7, #20]
 800e470:	f7ff fd40 	bl	800def4 <disk_write>
 800e474:	4603      	mov	r3, r0
 800e476:	2b00      	cmp	r3, #0
 800e478:	d002      	beq.n	800e480 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e47a:	2301      	movs	r3, #1
 800e47c:	73fb      	strb	r3, [r7, #15]
 800e47e:	e022      	b.n	800e4c6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2200      	movs	r2, #0
 800e484:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e48a:	697a      	ldr	r2, [r7, #20]
 800e48c:	1ad2      	subs	r2, r2, r3
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	69db      	ldr	r3, [r3, #28]
 800e492:	429a      	cmp	r2, r3
 800e494:	d217      	bcs.n	800e4c6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	789b      	ldrb	r3, [r3, #2]
 800e49a:	613b      	str	r3, [r7, #16]
 800e49c:	e010      	b.n	800e4c0 <sync_window+0x78>
					wsect += fs->fsize;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	69db      	ldr	r3, [r3, #28]
 800e4a2:	697a      	ldr	r2, [r7, #20]
 800e4a4:	4413      	add	r3, r2
 800e4a6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	7858      	ldrb	r0, [r3, #1]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	697a      	ldr	r2, [r7, #20]
 800e4b6:	f7ff fd1d 	bl	800def4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	3b01      	subs	r3, #1
 800e4be:	613b      	str	r3, [r7, #16]
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	2b01      	cmp	r3, #1
 800e4c4:	d8eb      	bhi.n	800e49e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e4c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3718      	adds	r7, #24
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}

0800e4d0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b084      	sub	sp, #16
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
 800e4d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4e2:	683a      	ldr	r2, [r7, #0]
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	d01b      	beq.n	800e520 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f7ff ffad 	bl	800e448 <sync_window>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e4f2:	7bfb      	ldrb	r3, [r7, #15]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d113      	bne.n	800e520 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	7858      	ldrb	r0, [r3, #1]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e502:	2301      	movs	r3, #1
 800e504:	683a      	ldr	r2, [r7, #0]
 800e506:	f7ff fcd5 	bl	800deb4 <disk_read>
 800e50a:	4603      	mov	r3, r0
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d004      	beq.n	800e51a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e510:	f04f 33ff 	mov.w	r3, #4294967295
 800e514:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e516:	2301      	movs	r3, #1
 800e518:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	683a      	ldr	r2, [r7, #0]
 800e51e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800e520:	7bfb      	ldrb	r3, [r7, #15]
}
 800e522:	4618      	mov	r0, r3
 800e524:	3710      	adds	r7, #16
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
	...

0800e52c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b084      	sub	sp, #16
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f7ff ff87 	bl	800e448 <sync_window>
 800e53a:	4603      	mov	r3, r0
 800e53c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e53e:	7bfb      	ldrb	r3, [r7, #15]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d159      	bne.n	800e5f8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	2b03      	cmp	r3, #3
 800e54a:	d149      	bne.n	800e5e0 <sync_fs+0xb4>
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	791b      	ldrb	r3, [r3, #4]
 800e550:	2b01      	cmp	r3, #1
 800e552:	d145      	bne.n	800e5e0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	899b      	ldrh	r3, [r3, #12]
 800e55e:	461a      	mov	r2, r3
 800e560:	2100      	movs	r1, #0
 800e562:	f7ff fda8 	bl	800e0b6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	3334      	adds	r3, #52	; 0x34
 800e56a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e56e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e572:	4618      	mov	r0, r3
 800e574:	f7ff fd37 	bl	800dfe6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	3334      	adds	r3, #52	; 0x34
 800e57c:	4921      	ldr	r1, [pc, #132]	; (800e604 <sync_fs+0xd8>)
 800e57e:	4618      	mov	r0, r3
 800e580:	f7ff fd4c 	bl	800e01c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	3334      	adds	r3, #52	; 0x34
 800e588:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e58c:	491e      	ldr	r1, [pc, #120]	; (800e608 <sync_fs+0xdc>)
 800e58e:	4618      	mov	r0, r3
 800e590:	f7ff fd44 	bl	800e01c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	3334      	adds	r3, #52	; 0x34
 800e598:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	695b      	ldr	r3, [r3, #20]
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	4610      	mov	r0, r2
 800e5a4:	f7ff fd3a 	bl	800e01c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	3334      	adds	r3, #52	; 0x34
 800e5ac:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	691b      	ldr	r3, [r3, #16]
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	4610      	mov	r0, r2
 800e5b8:	f7ff fd30 	bl	800e01c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6a1b      	ldr	r3, [r3, #32]
 800e5c0:	1c5a      	adds	r2, r3, #1
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	7858      	ldrb	r0, [r3, #1]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	f7ff fc8d 	bl	800def4 <disk_write>
			fs->fsi_flag = 0;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	785b      	ldrb	r3, [r3, #1]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	2100      	movs	r1, #0
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7ff fca3 	bl	800df34 <disk_ioctl>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d001      	beq.n	800e5f8 <sync_fs+0xcc>
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3710      	adds	r7, #16
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop
 800e604:	41615252 	.word	0x41615252
 800e608:	61417272 	.word	0x61417272

0800e60c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e60c:	b480      	push	{r7}
 800e60e:	b083      	sub	sp, #12
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	3b02      	subs	r3, #2
 800e61a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	699b      	ldr	r3, [r3, #24]
 800e620:	3b02      	subs	r3, #2
 800e622:	683a      	ldr	r2, [r7, #0]
 800e624:	429a      	cmp	r2, r3
 800e626:	d301      	bcc.n	800e62c <clust2sect+0x20>
 800e628:	2300      	movs	r3, #0
 800e62a:	e008      	b.n	800e63e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	895b      	ldrh	r3, [r3, #10]
 800e630:	461a      	mov	r2, r3
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	fb03 f202 	mul.w	r2, r3, r2
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e63c:	4413      	add	r3, r2
}
 800e63e:	4618      	mov	r0, r3
 800e640:	370c      	adds	r7, #12
 800e642:	46bd      	mov	sp, r7
 800e644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e648:	4770      	bx	lr

0800e64a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e64a:	b580      	push	{r7, lr}
 800e64c:	b086      	sub	sp, #24
 800e64e:	af00      	add	r7, sp, #0
 800e650:	6078      	str	r0, [r7, #4]
 800e652:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	2b01      	cmp	r3, #1
 800e65e:	d904      	bls.n	800e66a <get_fat+0x20>
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	699b      	ldr	r3, [r3, #24]
 800e664:	683a      	ldr	r2, [r7, #0]
 800e666:	429a      	cmp	r2, r3
 800e668:	d302      	bcc.n	800e670 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e66a:	2301      	movs	r3, #1
 800e66c:	617b      	str	r3, [r7, #20]
 800e66e:	e0bb      	b.n	800e7e8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e670:	f04f 33ff 	mov.w	r3, #4294967295
 800e674:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	2b03      	cmp	r3, #3
 800e67c:	f000 8083 	beq.w	800e786 <get_fat+0x13c>
 800e680:	2b03      	cmp	r3, #3
 800e682:	f300 80a7 	bgt.w	800e7d4 <get_fat+0x18a>
 800e686:	2b01      	cmp	r3, #1
 800e688:	d002      	beq.n	800e690 <get_fat+0x46>
 800e68a:	2b02      	cmp	r3, #2
 800e68c:	d056      	beq.n	800e73c <get_fat+0xf2>
 800e68e:	e0a1      	b.n	800e7d4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	60fb      	str	r3, [r7, #12]
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	085b      	lsrs	r3, r3, #1
 800e698:	68fa      	ldr	r2, [r7, #12]
 800e69a:	4413      	add	r3, r2
 800e69c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e69e:	693b      	ldr	r3, [r7, #16]
 800e6a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6a2:	693b      	ldr	r3, [r7, #16]
 800e6a4:	899b      	ldrh	r3, [r3, #12]
 800e6a6:	4619      	mov	r1, r3
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	fbb3 f3f1 	udiv	r3, r3, r1
 800e6ae:	4413      	add	r3, r2
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	6938      	ldr	r0, [r7, #16]
 800e6b4:	f7ff ff0c 	bl	800e4d0 <move_window>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	f040 808d 	bne.w	800e7da <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	1c5a      	adds	r2, r3, #1
 800e6c4:	60fa      	str	r2, [r7, #12]
 800e6c6:	693a      	ldr	r2, [r7, #16]
 800e6c8:	8992      	ldrh	r2, [r2, #12]
 800e6ca:	fbb3 f1f2 	udiv	r1, r3, r2
 800e6ce:	fb02 f201 	mul.w	r2, r2, r1
 800e6d2:	1a9b      	subs	r3, r3, r2
 800e6d4:	693a      	ldr	r2, [r7, #16]
 800e6d6:	4413      	add	r3, r2
 800e6d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e6dc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e6de:	693b      	ldr	r3, [r7, #16]
 800e6e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	899b      	ldrh	r3, [r3, #12]
 800e6e6:	4619      	mov	r1, r3
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800e6ee:	4413      	add	r3, r2
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	6938      	ldr	r0, [r7, #16]
 800e6f4:	f7ff feec 	bl	800e4d0 <move_window>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d16f      	bne.n	800e7de <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	899b      	ldrh	r3, [r3, #12]
 800e702:	461a      	mov	r2, r3
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	fbb3 f1f2 	udiv	r1, r3, r2
 800e70a:	fb02 f201 	mul.w	r2, r2, r1
 800e70e:	1a9b      	subs	r3, r3, r2
 800e710:	693a      	ldr	r2, [r7, #16]
 800e712:	4413      	add	r3, r2
 800e714:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e718:	021b      	lsls	r3, r3, #8
 800e71a:	461a      	mov	r2, r3
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	4313      	orrs	r3, r2
 800e720:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	f003 0301 	and.w	r3, r3, #1
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d002      	beq.n	800e732 <get_fat+0xe8>
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	091b      	lsrs	r3, r3, #4
 800e730:	e002      	b.n	800e738 <get_fat+0xee>
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e738:	617b      	str	r3, [r7, #20]
			break;
 800e73a:	e055      	b.n	800e7e8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	899b      	ldrh	r3, [r3, #12]
 800e744:	085b      	lsrs	r3, r3, #1
 800e746:	b29b      	uxth	r3, r3
 800e748:	4619      	mov	r1, r3
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	fbb3 f3f1 	udiv	r3, r3, r1
 800e750:	4413      	add	r3, r2
 800e752:	4619      	mov	r1, r3
 800e754:	6938      	ldr	r0, [r7, #16]
 800e756:	f7ff febb 	bl	800e4d0 <move_window>
 800e75a:	4603      	mov	r3, r0
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d140      	bne.n	800e7e2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	005b      	lsls	r3, r3, #1
 800e76a:	693a      	ldr	r2, [r7, #16]
 800e76c:	8992      	ldrh	r2, [r2, #12]
 800e76e:	fbb3 f0f2 	udiv	r0, r3, r2
 800e772:	fb02 f200 	mul.w	r2, r2, r0
 800e776:	1a9b      	subs	r3, r3, r2
 800e778:	440b      	add	r3, r1
 800e77a:	4618      	mov	r0, r3
 800e77c:	f7ff fbf8 	bl	800df70 <ld_word>
 800e780:	4603      	mov	r3, r0
 800e782:	617b      	str	r3, [r7, #20]
			break;
 800e784:	e030      	b.n	800e7e8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e78a:	693b      	ldr	r3, [r7, #16]
 800e78c:	899b      	ldrh	r3, [r3, #12]
 800e78e:	089b      	lsrs	r3, r3, #2
 800e790:	b29b      	uxth	r3, r3
 800e792:	4619      	mov	r1, r3
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	fbb3 f3f1 	udiv	r3, r3, r1
 800e79a:	4413      	add	r3, r2
 800e79c:	4619      	mov	r1, r3
 800e79e:	6938      	ldr	r0, [r7, #16]
 800e7a0:	f7ff fe96 	bl	800e4d0 <move_window>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d11d      	bne.n	800e7e6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e7aa:	693b      	ldr	r3, [r7, #16]
 800e7ac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	009b      	lsls	r3, r3, #2
 800e7b4:	693a      	ldr	r2, [r7, #16]
 800e7b6:	8992      	ldrh	r2, [r2, #12]
 800e7b8:	fbb3 f0f2 	udiv	r0, r3, r2
 800e7bc:	fb02 f200 	mul.w	r2, r2, r0
 800e7c0:	1a9b      	subs	r3, r3, r2
 800e7c2:	440b      	add	r3, r1
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7ff fbeb 	bl	800dfa0 <ld_dword>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e7d0:	617b      	str	r3, [r7, #20]
			break;
 800e7d2:	e009      	b.n	800e7e8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	617b      	str	r3, [r7, #20]
 800e7d8:	e006      	b.n	800e7e8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e7da:	bf00      	nop
 800e7dc:	e004      	b.n	800e7e8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e7de:	bf00      	nop
 800e7e0:	e002      	b.n	800e7e8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e7e2:	bf00      	nop
 800e7e4:	e000      	b.n	800e7e8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e7e6:	bf00      	nop
		}
	}

	return val;
 800e7e8:	697b      	ldr	r3, [r7, #20]
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3718      	adds	r7, #24
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e7f2:	b590      	push	{r4, r7, lr}
 800e7f4:	b089      	sub	sp, #36	; 0x24
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	60f8      	str	r0, [r7, #12]
 800e7fa:	60b9      	str	r1, [r7, #8]
 800e7fc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e7fe:	2302      	movs	r3, #2
 800e800:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	2b01      	cmp	r3, #1
 800e806:	f240 8102 	bls.w	800ea0e <put_fat+0x21c>
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	699b      	ldr	r3, [r3, #24]
 800e80e:	68ba      	ldr	r2, [r7, #8]
 800e810:	429a      	cmp	r2, r3
 800e812:	f080 80fc 	bcs.w	800ea0e <put_fat+0x21c>
		switch (fs->fs_type) {
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	2b03      	cmp	r3, #3
 800e81c:	f000 80b6 	beq.w	800e98c <put_fat+0x19a>
 800e820:	2b03      	cmp	r3, #3
 800e822:	f300 80fd 	bgt.w	800ea20 <put_fat+0x22e>
 800e826:	2b01      	cmp	r3, #1
 800e828:	d003      	beq.n	800e832 <put_fat+0x40>
 800e82a:	2b02      	cmp	r3, #2
 800e82c:	f000 8083 	beq.w	800e936 <put_fat+0x144>
 800e830:	e0f6      	b.n	800ea20 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	61bb      	str	r3, [r7, #24]
 800e836:	69bb      	ldr	r3, [r7, #24]
 800e838:	085b      	lsrs	r3, r3, #1
 800e83a:	69ba      	ldr	r2, [r7, #24]
 800e83c:	4413      	add	r3, r2
 800e83e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	899b      	ldrh	r3, [r3, #12]
 800e848:	4619      	mov	r1, r3
 800e84a:	69bb      	ldr	r3, [r7, #24]
 800e84c:	fbb3 f3f1 	udiv	r3, r3, r1
 800e850:	4413      	add	r3, r2
 800e852:	4619      	mov	r1, r3
 800e854:	68f8      	ldr	r0, [r7, #12]
 800e856:	f7ff fe3b 	bl	800e4d0 <move_window>
 800e85a:	4603      	mov	r3, r0
 800e85c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e85e:	7ffb      	ldrb	r3, [r7, #31]
 800e860:	2b00      	cmp	r3, #0
 800e862:	f040 80d6 	bne.w	800ea12 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e86c:	69bb      	ldr	r3, [r7, #24]
 800e86e:	1c5a      	adds	r2, r3, #1
 800e870:	61ba      	str	r2, [r7, #24]
 800e872:	68fa      	ldr	r2, [r7, #12]
 800e874:	8992      	ldrh	r2, [r2, #12]
 800e876:	fbb3 f0f2 	udiv	r0, r3, r2
 800e87a:	fb02 f200 	mul.w	r2, r2, r0
 800e87e:	1a9b      	subs	r3, r3, r2
 800e880:	440b      	add	r3, r1
 800e882:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	f003 0301 	and.w	r3, r3, #1
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d00d      	beq.n	800e8aa <put_fat+0xb8>
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	781b      	ldrb	r3, [r3, #0]
 800e892:	b25b      	sxtb	r3, r3
 800e894:	f003 030f 	and.w	r3, r3, #15
 800e898:	b25a      	sxtb	r2, r3
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	b2db      	uxtb	r3, r3
 800e89e:	011b      	lsls	r3, r3, #4
 800e8a0:	b25b      	sxtb	r3, r3
 800e8a2:	4313      	orrs	r3, r2
 800e8a4:	b25b      	sxtb	r3, r3
 800e8a6:	b2db      	uxtb	r3, r3
 800e8a8:	e001      	b.n	800e8ae <put_fat+0xbc>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	b2db      	uxtb	r3, r3
 800e8ae:	697a      	ldr	r2, [r7, #20]
 800e8b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2201      	movs	r2, #1
 800e8b6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	899b      	ldrh	r3, [r3, #12]
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	69bb      	ldr	r3, [r7, #24]
 800e8c4:	fbb3 f3f1 	udiv	r3, r3, r1
 800e8c8:	4413      	add	r3, r2
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	68f8      	ldr	r0, [r7, #12]
 800e8ce:	f7ff fdff 	bl	800e4d0 <move_window>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e8d6:	7ffb      	ldrb	r3, [r7, #31]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	f040 809c 	bne.w	800ea16 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	899b      	ldrh	r3, [r3, #12]
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	69bb      	ldr	r3, [r7, #24]
 800e8ec:	fbb3 f0f2 	udiv	r0, r3, r2
 800e8f0:	fb02 f200 	mul.w	r2, r2, r0
 800e8f4:	1a9b      	subs	r3, r3, r2
 800e8f6:	440b      	add	r3, r1
 800e8f8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	f003 0301 	and.w	r3, r3, #1
 800e900:	2b00      	cmp	r3, #0
 800e902:	d003      	beq.n	800e90c <put_fat+0x11a>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	091b      	lsrs	r3, r3, #4
 800e908:	b2db      	uxtb	r3, r3
 800e90a:	e00e      	b.n	800e92a <put_fat+0x138>
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	781b      	ldrb	r3, [r3, #0]
 800e910:	b25b      	sxtb	r3, r3
 800e912:	f023 030f 	bic.w	r3, r3, #15
 800e916:	b25a      	sxtb	r2, r3
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	0a1b      	lsrs	r3, r3, #8
 800e91c:	b25b      	sxtb	r3, r3
 800e91e:	f003 030f 	and.w	r3, r3, #15
 800e922:	b25b      	sxtb	r3, r3
 800e924:	4313      	orrs	r3, r2
 800e926:	b25b      	sxtb	r3, r3
 800e928:	b2db      	uxtb	r3, r3
 800e92a:	697a      	ldr	r2, [r7, #20]
 800e92c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	2201      	movs	r2, #1
 800e932:	70da      	strb	r2, [r3, #3]
			break;
 800e934:	e074      	b.n	800ea20 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	899b      	ldrh	r3, [r3, #12]
 800e93e:	085b      	lsrs	r3, r3, #1
 800e940:	b29b      	uxth	r3, r3
 800e942:	4619      	mov	r1, r3
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	fbb3 f3f1 	udiv	r3, r3, r1
 800e94a:	4413      	add	r3, r2
 800e94c:	4619      	mov	r1, r3
 800e94e:	68f8      	ldr	r0, [r7, #12]
 800e950:	f7ff fdbe 	bl	800e4d0 <move_window>
 800e954:	4603      	mov	r3, r0
 800e956:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e958:	7ffb      	ldrb	r3, [r7, #31]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d15d      	bne.n	800ea1a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	005b      	lsls	r3, r3, #1
 800e968:	68fa      	ldr	r2, [r7, #12]
 800e96a:	8992      	ldrh	r2, [r2, #12]
 800e96c:	fbb3 f0f2 	udiv	r0, r3, r2
 800e970:	fb02 f200 	mul.w	r2, r2, r0
 800e974:	1a9b      	subs	r3, r3, r2
 800e976:	440b      	add	r3, r1
 800e978:	687a      	ldr	r2, [r7, #4]
 800e97a:	b292      	uxth	r2, r2
 800e97c:	4611      	mov	r1, r2
 800e97e:	4618      	mov	r0, r3
 800e980:	f7ff fb31 	bl	800dfe6 <st_word>
			fs->wflag = 1;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2201      	movs	r2, #1
 800e988:	70da      	strb	r2, [r3, #3]
			break;
 800e98a:	e049      	b.n	800ea20 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	899b      	ldrh	r3, [r3, #12]
 800e994:	089b      	lsrs	r3, r3, #2
 800e996:	b29b      	uxth	r3, r3
 800e998:	4619      	mov	r1, r3
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	fbb3 f3f1 	udiv	r3, r3, r1
 800e9a0:	4413      	add	r3, r2
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	68f8      	ldr	r0, [r7, #12]
 800e9a6:	f7ff fd93 	bl	800e4d0 <move_window>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e9ae:	7ffb      	ldrb	r3, [r7, #31]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d134      	bne.n	800ea1e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	009b      	lsls	r3, r3, #2
 800e9c4:	68fa      	ldr	r2, [r7, #12]
 800e9c6:	8992      	ldrh	r2, [r2, #12]
 800e9c8:	fbb3 f0f2 	udiv	r0, r3, r2
 800e9cc:	fb02 f200 	mul.w	r2, r2, r0
 800e9d0:	1a9b      	subs	r3, r3, r2
 800e9d2:	440b      	add	r3, r1
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f7ff fae3 	bl	800dfa0 <ld_dword>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e9e0:	4323      	orrs	r3, r4
 800e9e2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	009b      	lsls	r3, r3, #2
 800e9ee:	68fa      	ldr	r2, [r7, #12]
 800e9f0:	8992      	ldrh	r2, [r2, #12]
 800e9f2:	fbb3 f0f2 	udiv	r0, r3, r2
 800e9f6:	fb02 f200 	mul.w	r2, r2, r0
 800e9fa:	1a9b      	subs	r3, r3, r2
 800e9fc:	440b      	add	r3, r1
 800e9fe:	6879      	ldr	r1, [r7, #4]
 800ea00:	4618      	mov	r0, r3
 800ea02:	f7ff fb0b 	bl	800e01c <st_dword>
			fs->wflag = 1;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	2201      	movs	r2, #1
 800ea0a:	70da      	strb	r2, [r3, #3]
			break;
 800ea0c:	e008      	b.n	800ea20 <put_fat+0x22e>
		}
	}
 800ea0e:	bf00      	nop
 800ea10:	e006      	b.n	800ea20 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ea12:	bf00      	nop
 800ea14:	e004      	b.n	800ea20 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ea16:	bf00      	nop
 800ea18:	e002      	b.n	800ea20 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ea1a:	bf00      	nop
 800ea1c:	e000      	b.n	800ea20 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ea1e:	bf00      	nop
	return res;
 800ea20:	7ffb      	ldrb	r3, [r7, #31]
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3724      	adds	r7, #36	; 0x24
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd90      	pop	{r4, r7, pc}

0800ea2a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ea2a:	b580      	push	{r7, lr}
 800ea2c:	b088      	sub	sp, #32
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	60f8      	str	r0, [r7, #12]
 800ea32:	60b9      	str	r1, [r7, #8]
 800ea34:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ea36:	2300      	movs	r3, #0
 800ea38:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	2b01      	cmp	r3, #1
 800ea44:	d904      	bls.n	800ea50 <remove_chain+0x26>
 800ea46:	69bb      	ldr	r3, [r7, #24]
 800ea48:	699b      	ldr	r3, [r3, #24]
 800ea4a:	68ba      	ldr	r2, [r7, #8]
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	d301      	bcc.n	800ea54 <remove_chain+0x2a>
 800ea50:	2302      	movs	r3, #2
 800ea52:	e04b      	b.n	800eaec <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d00c      	beq.n	800ea74 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ea5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea5e:	6879      	ldr	r1, [r7, #4]
 800ea60:	69b8      	ldr	r0, [r7, #24]
 800ea62:	f7ff fec6 	bl	800e7f2 <put_fat>
 800ea66:	4603      	mov	r3, r0
 800ea68:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ea6a:	7ffb      	ldrb	r3, [r7, #31]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d001      	beq.n	800ea74 <remove_chain+0x4a>
 800ea70:	7ffb      	ldrb	r3, [r7, #31]
 800ea72:	e03b      	b.n	800eaec <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ea74:	68b9      	ldr	r1, [r7, #8]
 800ea76:	68f8      	ldr	r0, [r7, #12]
 800ea78:	f7ff fde7 	bl	800e64a <get_fat>
 800ea7c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d031      	beq.n	800eae8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	2b01      	cmp	r3, #1
 800ea88:	d101      	bne.n	800ea8e <remove_chain+0x64>
 800ea8a:	2302      	movs	r3, #2
 800ea8c:	e02e      	b.n	800eaec <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea94:	d101      	bne.n	800ea9a <remove_chain+0x70>
 800ea96:	2301      	movs	r3, #1
 800ea98:	e028      	b.n	800eaec <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	68b9      	ldr	r1, [r7, #8]
 800ea9e:	69b8      	ldr	r0, [r7, #24]
 800eaa0:	f7ff fea7 	bl	800e7f2 <put_fat>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800eaa8:	7ffb      	ldrb	r3, [r7, #31]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d001      	beq.n	800eab2 <remove_chain+0x88>
 800eaae:	7ffb      	ldrb	r3, [r7, #31]
 800eab0:	e01c      	b.n	800eaec <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800eab2:	69bb      	ldr	r3, [r7, #24]
 800eab4:	695a      	ldr	r2, [r3, #20]
 800eab6:	69bb      	ldr	r3, [r7, #24]
 800eab8:	699b      	ldr	r3, [r3, #24]
 800eaba:	3b02      	subs	r3, #2
 800eabc:	429a      	cmp	r2, r3
 800eabe:	d20b      	bcs.n	800ead8 <remove_chain+0xae>
			fs->free_clst++;
 800eac0:	69bb      	ldr	r3, [r7, #24]
 800eac2:	695b      	ldr	r3, [r3, #20]
 800eac4:	1c5a      	adds	r2, r3, #1
 800eac6:	69bb      	ldr	r3, [r7, #24]
 800eac8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800eaca:	69bb      	ldr	r3, [r7, #24]
 800eacc:	791b      	ldrb	r3, [r3, #4]
 800eace:	f043 0301 	orr.w	r3, r3, #1
 800ead2:	b2da      	uxtb	r2, r3
 800ead4:	69bb      	ldr	r3, [r7, #24]
 800ead6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800eadc:	69bb      	ldr	r3, [r7, #24]
 800eade:	699b      	ldr	r3, [r3, #24]
 800eae0:	68ba      	ldr	r2, [r7, #8]
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d3c6      	bcc.n	800ea74 <remove_chain+0x4a>
 800eae6:	e000      	b.n	800eaea <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800eae8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800eaea:	2300      	movs	r3, #0
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	3720      	adds	r7, #32
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}

0800eaf4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b088      	sub	sp, #32
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d10d      	bne.n	800eb26 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	691b      	ldr	r3, [r3, #16]
 800eb0e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800eb10:	69bb      	ldr	r3, [r7, #24]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d004      	beq.n	800eb20 <create_chain+0x2c>
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	699b      	ldr	r3, [r3, #24]
 800eb1a:	69ba      	ldr	r2, [r7, #24]
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d31b      	bcc.n	800eb58 <create_chain+0x64>
 800eb20:	2301      	movs	r3, #1
 800eb22:	61bb      	str	r3, [r7, #24]
 800eb24:	e018      	b.n	800eb58 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800eb26:	6839      	ldr	r1, [r7, #0]
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f7ff fd8e 	bl	800e64a <get_fat>
 800eb2e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	2b01      	cmp	r3, #1
 800eb34:	d801      	bhi.n	800eb3a <create_chain+0x46>
 800eb36:	2301      	movs	r3, #1
 800eb38:	e070      	b.n	800ec1c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb40:	d101      	bne.n	800eb46 <create_chain+0x52>
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	e06a      	b.n	800ec1c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800eb46:	693b      	ldr	r3, [r7, #16]
 800eb48:	699b      	ldr	r3, [r3, #24]
 800eb4a:	68fa      	ldr	r2, [r7, #12]
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	d201      	bcs.n	800eb54 <create_chain+0x60>
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	e063      	b.n	800ec1c <create_chain+0x128>
		scl = clst;
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800eb58:	69bb      	ldr	r3, [r7, #24]
 800eb5a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800eb5c:	69fb      	ldr	r3, [r7, #28]
 800eb5e:	3301      	adds	r3, #1
 800eb60:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	699b      	ldr	r3, [r3, #24]
 800eb66:	69fa      	ldr	r2, [r7, #28]
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d307      	bcc.n	800eb7c <create_chain+0x88>
				ncl = 2;
 800eb6c:	2302      	movs	r3, #2
 800eb6e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800eb70:	69fa      	ldr	r2, [r7, #28]
 800eb72:	69bb      	ldr	r3, [r7, #24]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d901      	bls.n	800eb7c <create_chain+0x88>
 800eb78:	2300      	movs	r3, #0
 800eb7a:	e04f      	b.n	800ec1c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800eb7c:	69f9      	ldr	r1, [r7, #28]
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f7ff fd63 	bl	800e64a <get_fat>
 800eb84:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d00e      	beq.n	800ebaa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	2b01      	cmp	r3, #1
 800eb90:	d003      	beq.n	800eb9a <create_chain+0xa6>
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb98:	d101      	bne.n	800eb9e <create_chain+0xaa>
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	e03e      	b.n	800ec1c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800eb9e:	69fa      	ldr	r2, [r7, #28]
 800eba0:	69bb      	ldr	r3, [r7, #24]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d1da      	bne.n	800eb5c <create_chain+0x68>
 800eba6:	2300      	movs	r3, #0
 800eba8:	e038      	b.n	800ec1c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ebaa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ebac:	f04f 32ff 	mov.w	r2, #4294967295
 800ebb0:	69f9      	ldr	r1, [r7, #28]
 800ebb2:	6938      	ldr	r0, [r7, #16]
 800ebb4:	f7ff fe1d 	bl	800e7f2 <put_fat>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ebbc:	7dfb      	ldrb	r3, [r7, #23]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d109      	bne.n	800ebd6 <create_chain+0xe2>
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d006      	beq.n	800ebd6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ebc8:	69fa      	ldr	r2, [r7, #28]
 800ebca:	6839      	ldr	r1, [r7, #0]
 800ebcc:	6938      	ldr	r0, [r7, #16]
 800ebce:	f7ff fe10 	bl	800e7f2 <put_fat>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ebd6:	7dfb      	ldrb	r3, [r7, #23]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d116      	bne.n	800ec0a <create_chain+0x116>
		fs->last_clst = ncl;
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	69fa      	ldr	r2, [r7, #28]
 800ebe0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	695a      	ldr	r2, [r3, #20]
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	699b      	ldr	r3, [r3, #24]
 800ebea:	3b02      	subs	r3, #2
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d804      	bhi.n	800ebfa <create_chain+0x106>
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	695b      	ldr	r3, [r3, #20]
 800ebf4:	1e5a      	subs	r2, r3, #1
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	791b      	ldrb	r3, [r3, #4]
 800ebfe:	f043 0301 	orr.w	r3, r3, #1
 800ec02:	b2da      	uxtb	r2, r3
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	711a      	strb	r2, [r3, #4]
 800ec08:	e007      	b.n	800ec1a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ec0a:	7dfb      	ldrb	r3, [r7, #23]
 800ec0c:	2b01      	cmp	r3, #1
 800ec0e:	d102      	bne.n	800ec16 <create_chain+0x122>
 800ec10:	f04f 33ff 	mov.w	r3, #4294967295
 800ec14:	e000      	b.n	800ec18 <create_chain+0x124>
 800ec16:	2301      	movs	r3, #1
 800ec18:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ec1a:	69fb      	ldr	r3, [r7, #28]
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3720      	adds	r7, #32
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}

0800ec24 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b087      	sub	sp, #28
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
 800ec2c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec38:	3304      	adds	r3, #4
 800ec3a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	899b      	ldrh	r3, [r3, #12]
 800ec40:	461a      	mov	r2, r3
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec48:	68fa      	ldr	r2, [r7, #12]
 800ec4a:	8952      	ldrh	r2, [r2, #10]
 800ec4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec50:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ec52:	693b      	ldr	r3, [r7, #16]
 800ec54:	1d1a      	adds	r2, r3, #4
 800ec56:	613a      	str	r2, [r7, #16]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d101      	bne.n	800ec66 <clmt_clust+0x42>
 800ec62:	2300      	movs	r3, #0
 800ec64:	e010      	b.n	800ec88 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800ec66:	697a      	ldr	r2, [r7, #20]
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d307      	bcc.n	800ec7e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800ec6e:	697a      	ldr	r2, [r7, #20]
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	1ad3      	subs	r3, r2, r3
 800ec74:	617b      	str	r3, [r7, #20]
 800ec76:	693b      	ldr	r3, [r7, #16]
 800ec78:	3304      	adds	r3, #4
 800ec7a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ec7c:	e7e9      	b.n	800ec52 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800ec7e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ec80:	693b      	ldr	r3, [r7, #16]
 800ec82:	681a      	ldr	r2, [r3, #0]
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	4413      	add	r3, r2
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	371c      	adds	r7, #28
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec92:	4770      	bx	lr

0800ec94 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b086      	sub	sp, #24
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ecaa:	d204      	bcs.n	800ecb6 <dir_sdi+0x22>
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	f003 031f 	and.w	r3, r3, #31
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d001      	beq.n	800ecba <dir_sdi+0x26>
		return FR_INT_ERR;
 800ecb6:	2302      	movs	r3, #2
 800ecb8:	e071      	b.n	800ed9e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	683a      	ldr	r2, [r7, #0]
 800ecbe:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	689b      	ldr	r3, [r3, #8]
 800ecc4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d106      	bne.n	800ecda <dir_sdi+0x46>
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	781b      	ldrb	r3, [r3, #0]
 800ecd0:	2b02      	cmp	r3, #2
 800ecd2:	d902      	bls.n	800ecda <dir_sdi+0x46>
		clst = fs->dirbase;
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecd8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d10c      	bne.n	800ecfa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	095b      	lsrs	r3, r3, #5
 800ece4:	693a      	ldr	r2, [r7, #16]
 800ece6:	8912      	ldrh	r2, [r2, #8]
 800ece8:	4293      	cmp	r3, r2
 800ecea:	d301      	bcc.n	800ecf0 <dir_sdi+0x5c>
 800ecec:	2302      	movs	r3, #2
 800ecee:	e056      	b.n	800ed9e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	61da      	str	r2, [r3, #28]
 800ecf8:	e02d      	b.n	800ed56 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	895b      	ldrh	r3, [r3, #10]
 800ecfe:	461a      	mov	r2, r3
 800ed00:	693b      	ldr	r3, [r7, #16]
 800ed02:	899b      	ldrh	r3, [r3, #12]
 800ed04:	fb03 f302 	mul.w	r3, r3, r2
 800ed08:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ed0a:	e019      	b.n	800ed40 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6979      	ldr	r1, [r7, #20]
 800ed10:	4618      	mov	r0, r3
 800ed12:	f7ff fc9a 	bl	800e64a <get_fat>
 800ed16:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed1e:	d101      	bne.n	800ed24 <dir_sdi+0x90>
 800ed20:	2301      	movs	r3, #1
 800ed22:	e03c      	b.n	800ed9e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	2b01      	cmp	r3, #1
 800ed28:	d904      	bls.n	800ed34 <dir_sdi+0xa0>
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	699b      	ldr	r3, [r3, #24]
 800ed2e:	697a      	ldr	r2, [r7, #20]
 800ed30:	429a      	cmp	r2, r3
 800ed32:	d301      	bcc.n	800ed38 <dir_sdi+0xa4>
 800ed34:	2302      	movs	r3, #2
 800ed36:	e032      	b.n	800ed9e <dir_sdi+0x10a>
			ofs -= csz;
 800ed38:	683a      	ldr	r2, [r7, #0]
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	1ad3      	subs	r3, r2, r3
 800ed3e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ed40:	683a      	ldr	r2, [r7, #0]
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d2e1      	bcs.n	800ed0c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800ed48:	6979      	ldr	r1, [r7, #20]
 800ed4a:	6938      	ldr	r0, [r7, #16]
 800ed4c:	f7ff fc5e 	bl	800e60c <clust2sect>
 800ed50:	4602      	mov	r2, r0
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	697a      	ldr	r2, [r7, #20]
 800ed5a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	69db      	ldr	r3, [r3, #28]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d101      	bne.n	800ed68 <dir_sdi+0xd4>
 800ed64:	2302      	movs	r3, #2
 800ed66:	e01a      	b.n	800ed9e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	69da      	ldr	r2, [r3, #28]
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	899b      	ldrh	r3, [r3, #12]
 800ed70:	4619      	mov	r1, r3
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	fbb3 f3f1 	udiv	r3, r3, r1
 800ed78:	441a      	add	r2, r3
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	899b      	ldrh	r3, [r3, #12]
 800ed88:	461a      	mov	r2, r3
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ed90:	fb02 f200 	mul.w	r2, r2, r0
 800ed94:	1a9b      	subs	r3, r3, r2
 800ed96:	18ca      	adds	r2, r1, r3
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ed9c:	2300      	movs	r3, #0
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3718      	adds	r7, #24
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}

0800eda6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800eda6:	b580      	push	{r7, lr}
 800eda8:	b086      	sub	sp, #24
 800edaa:	af00      	add	r7, sp, #0
 800edac:	6078      	str	r0, [r7, #4]
 800edae:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	695b      	ldr	r3, [r3, #20]
 800edba:	3320      	adds	r3, #32
 800edbc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	69db      	ldr	r3, [r3, #28]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d003      	beq.n	800edce <dir_next+0x28>
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800edcc:	d301      	bcc.n	800edd2 <dir_next+0x2c>
 800edce:	2304      	movs	r3, #4
 800edd0:	e0bb      	b.n	800ef4a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	899b      	ldrh	r3, [r3, #12]
 800edd6:	461a      	mov	r2, r3
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	fbb3 f1f2 	udiv	r1, r3, r2
 800edde:	fb02 f201 	mul.w	r2, r2, r1
 800ede2:	1a9b      	subs	r3, r3, r2
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	f040 809d 	bne.w	800ef24 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	69db      	ldr	r3, [r3, #28]
 800edee:	1c5a      	adds	r2, r3, #1
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	699b      	ldr	r3, [r3, #24]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d10b      	bne.n	800ee14 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	095b      	lsrs	r3, r3, #5
 800ee00:	68fa      	ldr	r2, [r7, #12]
 800ee02:	8912      	ldrh	r2, [r2, #8]
 800ee04:	4293      	cmp	r3, r2
 800ee06:	f0c0 808d 	bcc.w	800ef24 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	61da      	str	r2, [r3, #28]
 800ee10:	2304      	movs	r3, #4
 800ee12:	e09a      	b.n	800ef4a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	899b      	ldrh	r3, [r3, #12]
 800ee18:	461a      	mov	r2, r3
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee20:	68fa      	ldr	r2, [r7, #12]
 800ee22:	8952      	ldrh	r2, [r2, #10]
 800ee24:	3a01      	subs	r2, #1
 800ee26:	4013      	ands	r3, r2
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d17b      	bne.n	800ef24 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ee2c:	687a      	ldr	r2, [r7, #4]
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	699b      	ldr	r3, [r3, #24]
 800ee32:	4619      	mov	r1, r3
 800ee34:	4610      	mov	r0, r2
 800ee36:	f7ff fc08 	bl	800e64a <get_fat>
 800ee3a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	2b01      	cmp	r3, #1
 800ee40:	d801      	bhi.n	800ee46 <dir_next+0xa0>
 800ee42:	2302      	movs	r3, #2
 800ee44:	e081      	b.n	800ef4a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee4c:	d101      	bne.n	800ee52 <dir_next+0xac>
 800ee4e:	2301      	movs	r3, #1
 800ee50:	e07b      	b.n	800ef4a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	699b      	ldr	r3, [r3, #24]
 800ee56:	697a      	ldr	r2, [r7, #20]
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d359      	bcc.n	800ef10 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d104      	bne.n	800ee6c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2200      	movs	r2, #0
 800ee66:	61da      	str	r2, [r3, #28]
 800ee68:	2304      	movs	r3, #4
 800ee6a:	e06e      	b.n	800ef4a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ee6c:	687a      	ldr	r2, [r7, #4]
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	699b      	ldr	r3, [r3, #24]
 800ee72:	4619      	mov	r1, r3
 800ee74:	4610      	mov	r0, r2
 800ee76:	f7ff fe3d 	bl	800eaf4 <create_chain>
 800ee7a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d101      	bne.n	800ee86 <dir_next+0xe0>
 800ee82:	2307      	movs	r3, #7
 800ee84:	e061      	b.n	800ef4a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	2b01      	cmp	r3, #1
 800ee8a:	d101      	bne.n	800ee90 <dir_next+0xea>
 800ee8c:	2302      	movs	r3, #2
 800ee8e:	e05c      	b.n	800ef4a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee96:	d101      	bne.n	800ee9c <dir_next+0xf6>
 800ee98:	2301      	movs	r3, #1
 800ee9a:	e056      	b.n	800ef4a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ee9c:	68f8      	ldr	r0, [r7, #12]
 800ee9e:	f7ff fad3 	bl	800e448 <sync_window>
 800eea2:	4603      	mov	r3, r0
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d001      	beq.n	800eeac <dir_next+0x106>
 800eea8:	2301      	movs	r3, #1
 800eeaa:	e04e      	b.n	800ef4a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	899b      	ldrh	r3, [r3, #12]
 800eeb6:	461a      	mov	r2, r3
 800eeb8:	2100      	movs	r1, #0
 800eeba:	f7ff f8fc 	bl	800e0b6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800eebe:	2300      	movs	r3, #0
 800eec0:	613b      	str	r3, [r7, #16]
 800eec2:	6979      	ldr	r1, [r7, #20]
 800eec4:	68f8      	ldr	r0, [r7, #12]
 800eec6:	f7ff fba1 	bl	800e60c <clust2sect>
 800eeca:	4602      	mov	r2, r0
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	631a      	str	r2, [r3, #48]	; 0x30
 800eed0:	e012      	b.n	800eef8 <dir_next+0x152>
						fs->wflag = 1;
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	2201      	movs	r2, #1
 800eed6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800eed8:	68f8      	ldr	r0, [r7, #12]
 800eeda:	f7ff fab5 	bl	800e448 <sync_window>
 800eede:	4603      	mov	r3, r0
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d001      	beq.n	800eee8 <dir_next+0x142>
 800eee4:	2301      	movs	r3, #1
 800eee6:	e030      	b.n	800ef4a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800eee8:	693b      	ldr	r3, [r7, #16]
 800eeea:	3301      	adds	r3, #1
 800eeec:	613b      	str	r3, [r7, #16]
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eef2:	1c5a      	adds	r2, r3, #1
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	631a      	str	r2, [r3, #48]	; 0x30
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	895b      	ldrh	r3, [r3, #10]
 800eefc:	461a      	mov	r2, r3
 800eefe:	693b      	ldr	r3, [r7, #16]
 800ef00:	4293      	cmp	r3, r2
 800ef02:	d3e6      	bcc.n	800eed2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	1ad2      	subs	r2, r2, r3
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	697a      	ldr	r2, [r7, #20]
 800ef14:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ef16:	6979      	ldr	r1, [r7, #20]
 800ef18:	68f8      	ldr	r0, [r7, #12]
 800ef1a:	f7ff fb77 	bl	800e60c <clust2sect>
 800ef1e:	4602      	mov	r2, r0
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	68ba      	ldr	r2, [r7, #8]
 800ef28:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	899b      	ldrh	r3, [r3, #12]
 800ef34:	461a      	mov	r2, r3
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	fbb3 f0f2 	udiv	r0, r3, r2
 800ef3c:	fb02 f200 	mul.w	r2, r2, r0
 800ef40:	1a9b      	subs	r3, r3, r2
 800ef42:	18ca      	adds	r2, r1, r3
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ef48:	2300      	movs	r3, #0
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3718      	adds	r7, #24
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ef52:	b580      	push	{r7, lr}
 800ef54:	b086      	sub	sp, #24
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
 800ef5a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ef62:	2100      	movs	r1, #0
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f7ff fe95 	bl	800ec94 <dir_sdi>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ef6e:	7dfb      	ldrb	r3, [r7, #23]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d12b      	bne.n	800efcc <dir_alloc+0x7a>
		n = 0;
 800ef74:	2300      	movs	r3, #0
 800ef76:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	69db      	ldr	r3, [r3, #28]
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	68f8      	ldr	r0, [r7, #12]
 800ef80:	f7ff faa6 	bl	800e4d0 <move_window>
 800ef84:	4603      	mov	r3, r0
 800ef86:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ef88:	7dfb      	ldrb	r3, [r7, #23]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d11d      	bne.n	800efca <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6a1b      	ldr	r3, [r3, #32]
 800ef92:	781b      	ldrb	r3, [r3, #0]
 800ef94:	2be5      	cmp	r3, #229	; 0xe5
 800ef96:	d004      	beq.n	800efa2 <dir_alloc+0x50>
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	6a1b      	ldr	r3, [r3, #32]
 800ef9c:	781b      	ldrb	r3, [r3, #0]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d107      	bne.n	800efb2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800efa2:	693b      	ldr	r3, [r7, #16]
 800efa4:	3301      	adds	r3, #1
 800efa6:	613b      	str	r3, [r7, #16]
 800efa8:	693a      	ldr	r2, [r7, #16]
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	429a      	cmp	r2, r3
 800efae:	d102      	bne.n	800efb6 <dir_alloc+0x64>
 800efb0:	e00c      	b.n	800efcc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800efb2:	2300      	movs	r3, #0
 800efb4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800efb6:	2101      	movs	r1, #1
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f7ff fef4 	bl	800eda6 <dir_next>
 800efbe:	4603      	mov	r3, r0
 800efc0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800efc2:	7dfb      	ldrb	r3, [r7, #23]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d0d7      	beq.n	800ef78 <dir_alloc+0x26>
 800efc8:	e000      	b.n	800efcc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800efca:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800efcc:	7dfb      	ldrb	r3, [r7, #23]
 800efce:	2b04      	cmp	r3, #4
 800efd0:	d101      	bne.n	800efd6 <dir_alloc+0x84>
 800efd2:	2307      	movs	r3, #7
 800efd4:	75fb      	strb	r3, [r7, #23]
	return res;
 800efd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800efd8:	4618      	mov	r0, r3
 800efda:	3718      	adds	r7, #24
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}

0800efe0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b084      	sub	sp, #16
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	331a      	adds	r3, #26
 800efee:	4618      	mov	r0, r3
 800eff0:	f7fe ffbe 	bl	800df70 <ld_word>
 800eff4:	4603      	mov	r3, r0
 800eff6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	2b03      	cmp	r3, #3
 800effe:	d109      	bne.n	800f014 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	3314      	adds	r3, #20
 800f004:	4618      	mov	r0, r3
 800f006:	f7fe ffb3 	bl	800df70 <ld_word>
 800f00a:	4603      	mov	r3, r0
 800f00c:	041b      	lsls	r3, r3, #16
 800f00e:	68fa      	ldr	r2, [r7, #12]
 800f010:	4313      	orrs	r3, r2
 800f012:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f014:	68fb      	ldr	r3, [r7, #12]
}
 800f016:	4618      	mov	r0, r3
 800f018:	3710      	adds	r7, #16
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}

0800f01e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f01e:	b580      	push	{r7, lr}
 800f020:	b084      	sub	sp, #16
 800f022:	af00      	add	r7, sp, #0
 800f024:	60f8      	str	r0, [r7, #12]
 800f026:	60b9      	str	r1, [r7, #8]
 800f028:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	331a      	adds	r3, #26
 800f02e:	687a      	ldr	r2, [r7, #4]
 800f030:	b292      	uxth	r2, r2
 800f032:	4611      	mov	r1, r2
 800f034:	4618      	mov	r0, r3
 800f036:	f7fe ffd6 	bl	800dfe6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	2b03      	cmp	r3, #3
 800f040:	d109      	bne.n	800f056 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	f103 0214 	add.w	r2, r3, #20
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	0c1b      	lsrs	r3, r3, #16
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	4619      	mov	r1, r3
 800f050:	4610      	mov	r0, r2
 800f052:	f7fe ffc8 	bl	800dfe6 <st_word>
	}
}
 800f056:	bf00      	nop
 800f058:	3710      	adds	r7, #16
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}

0800f05e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f05e:	b580      	push	{r7, lr}
 800f060:	b086      	sub	sp, #24
 800f062:	af00      	add	r7, sp, #0
 800f064:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f06c:	2100      	movs	r1, #0
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f7ff fe10 	bl	800ec94 <dir_sdi>
 800f074:	4603      	mov	r3, r0
 800f076:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f078:	7dfb      	ldrb	r3, [r7, #23]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d001      	beq.n	800f082 <dir_find+0x24>
 800f07e:	7dfb      	ldrb	r3, [r7, #23]
 800f080:	e03e      	b.n	800f100 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	69db      	ldr	r3, [r3, #28]
 800f086:	4619      	mov	r1, r3
 800f088:	6938      	ldr	r0, [r7, #16]
 800f08a:	f7ff fa21 	bl	800e4d0 <move_window>
 800f08e:	4603      	mov	r3, r0
 800f090:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f092:	7dfb      	ldrb	r3, [r7, #23]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d12f      	bne.n	800f0f8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6a1b      	ldr	r3, [r3, #32]
 800f09c:	781b      	ldrb	r3, [r3, #0]
 800f09e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f0a0:	7bfb      	ldrb	r3, [r7, #15]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d102      	bne.n	800f0ac <dir_find+0x4e>
 800f0a6:	2304      	movs	r3, #4
 800f0a8:	75fb      	strb	r3, [r7, #23]
 800f0aa:	e028      	b.n	800f0fe <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	6a1b      	ldr	r3, [r3, #32]
 800f0b0:	330b      	adds	r3, #11
 800f0b2:	781b      	ldrb	r3, [r3, #0]
 800f0b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0b8:	b2da      	uxtb	r2, r3
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6a1b      	ldr	r3, [r3, #32]
 800f0c2:	330b      	adds	r3, #11
 800f0c4:	781b      	ldrb	r3, [r3, #0]
 800f0c6:	f003 0308 	and.w	r3, r3, #8
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d10a      	bne.n	800f0e4 <dir_find+0x86>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6a18      	ldr	r0, [r3, #32]
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	3324      	adds	r3, #36	; 0x24
 800f0d6:	220b      	movs	r2, #11
 800f0d8:	4619      	mov	r1, r3
 800f0da:	f7ff f807 	bl	800e0ec <mem_cmp>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d00b      	beq.n	800f0fc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f0e4:	2100      	movs	r1, #0
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f7ff fe5d 	bl	800eda6 <dir_next>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f0f0:	7dfb      	ldrb	r3, [r7, #23]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d0c5      	beq.n	800f082 <dir_find+0x24>
 800f0f6:	e002      	b.n	800f0fe <dir_find+0xa0>
		if (res != FR_OK) break;
 800f0f8:	bf00      	nop
 800f0fa:	e000      	b.n	800f0fe <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f0fc:	bf00      	nop

	return res;
 800f0fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800f100:	4618      	mov	r0, r3
 800f102:	3718      	adds	r7, #24
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}

0800f108 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f116:	2101      	movs	r1, #1
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f7ff ff1a 	bl	800ef52 <dir_alloc>
 800f11e:	4603      	mov	r3, r0
 800f120:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f122:	7bfb      	ldrb	r3, [r7, #15]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d11c      	bne.n	800f162 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	69db      	ldr	r3, [r3, #28]
 800f12c:	4619      	mov	r1, r3
 800f12e:	68b8      	ldr	r0, [r7, #8]
 800f130:	f7ff f9ce 	bl	800e4d0 <move_window>
 800f134:	4603      	mov	r3, r0
 800f136:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f138:	7bfb      	ldrb	r3, [r7, #15]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d111      	bne.n	800f162 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6a1b      	ldr	r3, [r3, #32]
 800f142:	2220      	movs	r2, #32
 800f144:	2100      	movs	r1, #0
 800f146:	4618      	mov	r0, r3
 800f148:	f7fe ffb5 	bl	800e0b6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6a18      	ldr	r0, [r3, #32]
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	3324      	adds	r3, #36	; 0x24
 800f154:	220b      	movs	r2, #11
 800f156:	4619      	mov	r1, r3
 800f158:	f7fe ff8c 	bl	800e074 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	2201      	movs	r2, #1
 800f160:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f162:	7bfb      	ldrb	r3, [r7, #15]
}
 800f164:	4618      	mov	r0, r3
 800f166:	3710      	adds	r7, #16
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b08a      	sub	sp, #40	; 0x28
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	617b      	str	r3, [r7, #20]
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	3324      	adds	r3, #36	; 0x24
 800f180:	613b      	str	r3, [r7, #16]
	mem_set(sfn, ' ', 11);
 800f182:	220b      	movs	r2, #11
 800f184:	2120      	movs	r1, #32
 800f186:	6938      	ldr	r0, [r7, #16]
 800f188:	f7fe ff95 	bl	800e0b6 <mem_set>
	si = i = 0; ni = 8;
 800f18c:	2300      	movs	r3, #0
 800f18e:	61bb      	str	r3, [r7, #24]
 800f190:	69bb      	ldr	r3, [r7, #24]
 800f192:	61fb      	str	r3, [r7, #28]
 800f194:	2308      	movs	r3, #8
 800f196:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f198:	69fb      	ldr	r3, [r7, #28]
 800f19a:	1c5a      	adds	r2, r3, #1
 800f19c:	61fa      	str	r2, [r7, #28]
 800f19e:	697a      	ldr	r2, [r7, #20]
 800f1a0:	4413      	add	r3, r2
 800f1a2:	781b      	ldrb	r3, [r3, #0]
 800f1a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f1a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1ac:	2b20      	cmp	r3, #32
 800f1ae:	f240 8083 	bls.w	800f2b8 <create_name+0x14c>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f1b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1b6:	2b2f      	cmp	r3, #47	; 0x2f
 800f1b8:	d007      	beq.n	800f1ca <create_name+0x5e>
 800f1ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1be:	2b5c      	cmp	r3, #92	; 0x5c
 800f1c0:	d110      	bne.n	800f1e4 <create_name+0x78>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f1c2:	e002      	b.n	800f1ca <create_name+0x5e>
 800f1c4:	69fb      	ldr	r3, [r7, #28]
 800f1c6:	3301      	adds	r3, #1
 800f1c8:	61fb      	str	r3, [r7, #28]
 800f1ca:	697a      	ldr	r2, [r7, #20]
 800f1cc:	69fb      	ldr	r3, [r7, #28]
 800f1ce:	4413      	add	r3, r2
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	2b2f      	cmp	r3, #47	; 0x2f
 800f1d4:	d0f6      	beq.n	800f1c4 <create_name+0x58>
 800f1d6:	697a      	ldr	r2, [r7, #20]
 800f1d8:	69fb      	ldr	r3, [r7, #28]
 800f1da:	4413      	add	r3, r2
 800f1dc:	781b      	ldrb	r3, [r3, #0]
 800f1de:	2b5c      	cmp	r3, #92	; 0x5c
 800f1e0:	d0f0      	beq.n	800f1c4 <create_name+0x58>
			break;
 800f1e2:	e06a      	b.n	800f2ba <create_name+0x14e>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f1e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1e8:	2b2e      	cmp	r3, #46	; 0x2e
 800f1ea:	d003      	beq.n	800f1f4 <create_name+0x88>
 800f1ec:	69ba      	ldr	r2, [r7, #24]
 800f1ee:	6a3b      	ldr	r3, [r7, #32]
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d30d      	bcc.n	800f210 <create_name+0xa4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f1f4:	6a3b      	ldr	r3, [r7, #32]
 800f1f6:	2b0b      	cmp	r3, #11
 800f1f8:	d003      	beq.n	800f202 <create_name+0x96>
 800f1fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1fe:	2b2e      	cmp	r3, #46	; 0x2e
 800f200:	d001      	beq.n	800f206 <create_name+0x9a>
 800f202:	2306      	movs	r3, #6
 800f204:	e075      	b.n	800f2f2 <create_name+0x186>
			i = 8; ni = 11;				/* Goto extension */
 800f206:	2308      	movs	r3, #8
 800f208:	61bb      	str	r3, [r7, #24]
 800f20a:	230b      	movs	r3, #11
 800f20c:	623b      	str	r3, [r7, #32]
			continue;
 800f20e:	e052      	b.n	800f2b6 <create_name+0x14a>
#if !_DF1S
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false at SBCS cfg.) */
 800f210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f214:	2b80      	cmp	r3, #128	; 0x80
 800f216:	d92e      	bls.n	800f276 <create_name+0x10a>
 800f218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f21c:	2bff      	cmp	r3, #255	; 0xff
 800f21e:	d02a      	beq.n	800f276 <create_name+0x10a>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 800f220:	69fb      	ldr	r3, [r7, #28]
 800f222:	1c5a      	adds	r2, r3, #1
 800f224:	61fa      	str	r2, [r7, #28]
 800f226:	697a      	ldr	r2, [r7, #20]
 800f228:	4413      	add	r3, r2
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	73fb      	strb	r3, [r7, #15]
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 800f22e:	7bfb      	ldrb	r3, [r7, #15]
 800f230:	2b3f      	cmp	r3, #63	; 0x3f
 800f232:	d902      	bls.n	800f23a <create_name+0xce>
 800f234:	7bfb      	ldrb	r3, [r7, #15]
 800f236:	2b7e      	cmp	r3, #126	; 0x7e
 800f238:	d906      	bls.n	800f248 <create_name+0xdc>
 800f23a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	da07      	bge.n	800f252 <create_name+0xe6>
 800f242:	7bfb      	ldrb	r3, [r7, #15]
 800f244:	2bff      	cmp	r3, #255	; 0xff
 800f246:	d004      	beq.n	800f252 <create_name+0xe6>
 800f248:	6a3b      	ldr	r3, [r7, #32]
 800f24a:	3b01      	subs	r3, #1
 800f24c:	69ba      	ldr	r2, [r7, #24]
 800f24e:	429a      	cmp	r2, r3
 800f250:	d301      	bcc.n	800f256 <create_name+0xea>
 800f252:	2306      	movs	r3, #6
 800f254:	e04d      	b.n	800f2f2 <create_name+0x186>
			sfn[i++] = c;
 800f256:	69bb      	ldr	r3, [r7, #24]
 800f258:	1c5a      	adds	r2, r3, #1
 800f25a:	61ba      	str	r2, [r7, #24]
 800f25c:	693a      	ldr	r2, [r7, #16]
 800f25e:	4413      	add	r3, r2
 800f260:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f264:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 800f266:	69bb      	ldr	r3, [r7, #24]
 800f268:	1c5a      	adds	r2, r3, #1
 800f26a:	61ba      	str	r2, [r7, #24]
 800f26c:	693a      	ldr	r2, [r7, #16]
 800f26e:	4413      	add	r3, r2
 800f270:	7bfa      	ldrb	r2, [r7, #15]
 800f272:	701a      	strb	r2, [r3, #0]
 800f274:	e01f      	b.n	800f2b6 <create_name+0x14a>
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f276:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f27a:	4619      	mov	r1, r3
 800f27c:	481f      	ldr	r0, [pc, #124]	; (800f2fc <create_name+0x190>)
 800f27e:	f7fe ff5c 	bl	800e13a <chk_chr>
 800f282:	4603      	mov	r3, r0
 800f284:	2b00      	cmp	r3, #0
 800f286:	d001      	beq.n	800f28c <create_name+0x120>
 800f288:	2306      	movs	r3, #6
 800f28a:	e032      	b.n	800f2f2 <create_name+0x186>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f28c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f290:	2b60      	cmp	r3, #96	; 0x60
 800f292:	d908      	bls.n	800f2a6 <create_name+0x13a>
 800f294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f298:	2b7a      	cmp	r3, #122	; 0x7a
 800f29a:	d804      	bhi.n	800f2a6 <create_name+0x13a>
 800f29c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2a0:	3b20      	subs	r3, #32
 800f2a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 800f2a6:	69bb      	ldr	r3, [r7, #24]
 800f2a8:	1c5a      	adds	r2, r3, #1
 800f2aa:	61ba      	str	r2, [r7, #24]
 800f2ac:	693a      	ldr	r2, [r7, #16]
 800f2ae:	4413      	add	r3, r2
 800f2b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f2b4:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f2b6:	e76f      	b.n	800f198 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f2b8:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f2ba:	697a      	ldr	r2, [r7, #20]
 800f2bc:	69fb      	ldr	r3, [r7, #28]
 800f2be:	441a      	add	r2, r3
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f2c4:	69bb      	ldr	r3, [r7, #24]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d101      	bne.n	800f2ce <create_name+0x162>
 800f2ca:	2306      	movs	r3, #6
 800f2cc:	e011      	b.n	800f2f2 <create_name+0x186>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f2ce:	693b      	ldr	r3, [r7, #16]
 800f2d0:	781b      	ldrb	r3, [r3, #0]
 800f2d2:	2be5      	cmp	r3, #229	; 0xe5
 800f2d4:	d102      	bne.n	800f2dc <create_name+0x170>
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	2205      	movs	r2, #5
 800f2da:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f2dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2e0:	2b20      	cmp	r3, #32
 800f2e2:	d801      	bhi.n	800f2e8 <create_name+0x17c>
 800f2e4:	2204      	movs	r2, #4
 800f2e6:	e000      	b.n	800f2ea <create_name+0x17e>
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	330b      	adds	r3, #11
 800f2ee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f2f0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3728      	adds	r7, #40	; 0x28
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}
 800f2fa:	bf00      	nop
 800f2fc:	0801befc 	.word	0x0801befc

0800f300 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b086      	sub	sp, #24
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
 800f308:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f314:	e002      	b.n	800f31c <follow_path+0x1c>
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	3301      	adds	r3, #1
 800f31a:	603b      	str	r3, [r7, #0]
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	781b      	ldrb	r3, [r3, #0]
 800f320:	2b2f      	cmp	r3, #47	; 0x2f
 800f322:	d0f8      	beq.n	800f316 <follow_path+0x16>
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	781b      	ldrb	r3, [r3, #0]
 800f328:	2b5c      	cmp	r3, #92	; 0x5c
 800f32a:	d0f4      	beq.n	800f316 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	2200      	movs	r2, #0
 800f330:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	781b      	ldrb	r3, [r3, #0]
 800f336:	2b1f      	cmp	r3, #31
 800f338:	d80a      	bhi.n	800f350 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2280      	movs	r2, #128	; 0x80
 800f33e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f342:	2100      	movs	r1, #0
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f7ff fca5 	bl	800ec94 <dir_sdi>
 800f34a:	4603      	mov	r3, r0
 800f34c:	75fb      	strb	r3, [r7, #23]
 800f34e:	e048      	b.n	800f3e2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f350:	463b      	mov	r3, r7
 800f352:	4619      	mov	r1, r3
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f7ff ff09 	bl	800f16c <create_name>
 800f35a:	4603      	mov	r3, r0
 800f35c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f35e:	7dfb      	ldrb	r3, [r7, #23]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d139      	bne.n	800f3d8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f364:	6878      	ldr	r0, [r7, #4]
 800f366:	f7ff fe7a 	bl	800f05e <dir_find>
 800f36a:	4603      	mov	r3, r0
 800f36c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f374:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f376:	7dfb      	ldrb	r3, [r7, #23]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d00a      	beq.n	800f392 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f37c:	7dfb      	ldrb	r3, [r7, #23]
 800f37e:	2b04      	cmp	r3, #4
 800f380:	d12c      	bne.n	800f3dc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f382:	7afb      	ldrb	r3, [r7, #11]
 800f384:	f003 0304 	and.w	r3, r3, #4
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d127      	bne.n	800f3dc <follow_path+0xdc>
 800f38c:	2305      	movs	r3, #5
 800f38e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f390:	e024      	b.n	800f3dc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f392:	7afb      	ldrb	r3, [r7, #11]
 800f394:	f003 0304 	and.w	r3, r3, #4
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d121      	bne.n	800f3e0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f39c:	693b      	ldr	r3, [r7, #16]
 800f39e:	799b      	ldrb	r3, [r3, #6]
 800f3a0:	f003 0310 	and.w	r3, r3, #16
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d102      	bne.n	800f3ae <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f3a8:	2305      	movs	r3, #5
 800f3aa:	75fb      	strb	r3, [r7, #23]
 800f3ac:	e019      	b.n	800f3e2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	695b      	ldr	r3, [r3, #20]
 800f3b8:	68fa      	ldr	r2, [r7, #12]
 800f3ba:	8992      	ldrh	r2, [r2, #12]
 800f3bc:	fbb3 f0f2 	udiv	r0, r3, r2
 800f3c0:	fb02 f200 	mul.w	r2, r2, r0
 800f3c4:	1a9b      	subs	r3, r3, r2
 800f3c6:	440b      	add	r3, r1
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	68f8      	ldr	r0, [r7, #12]
 800f3cc:	f7ff fe08 	bl	800efe0 <ld_clust>
 800f3d0:	4602      	mov	r2, r0
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f3d6:	e7bb      	b.n	800f350 <follow_path+0x50>
			if (res != FR_OK) break;
 800f3d8:	bf00      	nop
 800f3da:	e002      	b.n	800f3e2 <follow_path+0xe2>
				break;
 800f3dc:	bf00      	nop
 800f3de:	e000      	b.n	800f3e2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f3e0:	bf00      	nop
			}
		}
	}

	return res;
 800f3e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3718      	adds	r7, #24
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}

0800f3ec <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f3ec:	b480      	push	{r7}
 800f3ee:	b087      	sub	sp, #28
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f3f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f3f8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d031      	beq.n	800f466 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	617b      	str	r3, [r7, #20]
 800f408:	e002      	b.n	800f410 <get_ldnumber+0x24>
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	3301      	adds	r3, #1
 800f40e:	617b      	str	r3, [r7, #20]
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	781b      	ldrb	r3, [r3, #0]
 800f414:	2b20      	cmp	r3, #32
 800f416:	d903      	bls.n	800f420 <get_ldnumber+0x34>
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	781b      	ldrb	r3, [r3, #0]
 800f41c:	2b3a      	cmp	r3, #58	; 0x3a
 800f41e:	d1f4      	bne.n	800f40a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	2b3a      	cmp	r3, #58	; 0x3a
 800f426:	d11c      	bne.n	800f462 <get_ldnumber+0x76>
			tp = *path;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	1c5a      	adds	r2, r3, #1
 800f432:	60fa      	str	r2, [r7, #12]
 800f434:	781b      	ldrb	r3, [r3, #0]
 800f436:	3b30      	subs	r3, #48	; 0x30
 800f438:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	2b09      	cmp	r3, #9
 800f43e:	d80e      	bhi.n	800f45e <get_ldnumber+0x72>
 800f440:	68fa      	ldr	r2, [r7, #12]
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	429a      	cmp	r2, r3
 800f446:	d10a      	bne.n	800f45e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d107      	bne.n	800f45e <get_ldnumber+0x72>
					vol = (int)i;
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	3301      	adds	r3, #1
 800f456:	617b      	str	r3, [r7, #20]
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	697a      	ldr	r2, [r7, #20]
 800f45c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f45e:	693b      	ldr	r3, [r7, #16]
 800f460:	e002      	b.n	800f468 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f462:	2300      	movs	r3, #0
 800f464:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f466:	693b      	ldr	r3, [r7, #16]
}
 800f468:	4618      	mov	r0, r3
 800f46a:	371c      	adds	r7, #28
 800f46c:	46bd      	mov	sp, r7
 800f46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f472:	4770      	bx	lr

0800f474 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b082      	sub	sp, #8
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2200      	movs	r2, #0
 800f482:	70da      	strb	r2, [r3, #3]
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f04f 32ff 	mov.w	r2, #4294967295
 800f48a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f48c:	6839      	ldr	r1, [r7, #0]
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f7ff f81e 	bl	800e4d0 <move_window>
 800f494:	4603      	mov	r3, r0
 800f496:	2b00      	cmp	r3, #0
 800f498:	d001      	beq.n	800f49e <check_fs+0x2a>
 800f49a:	2304      	movs	r3, #4
 800f49c:	e038      	b.n	800f510 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	3334      	adds	r3, #52	; 0x34
 800f4a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7fe fd62 	bl	800df70 <ld_word>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	461a      	mov	r2, r3
 800f4b0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	d001      	beq.n	800f4bc <check_fs+0x48>
 800f4b8:	2303      	movs	r3, #3
 800f4ba:	e029      	b.n	800f510 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f4c2:	2be9      	cmp	r3, #233	; 0xe9
 800f4c4:	d009      	beq.n	800f4da <check_fs+0x66>
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f4cc:	2beb      	cmp	r3, #235	; 0xeb
 800f4ce:	d11e      	bne.n	800f50e <check_fs+0x9a>
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800f4d6:	2b90      	cmp	r3, #144	; 0x90
 800f4d8:	d119      	bne.n	800f50e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	3334      	adds	r3, #52	; 0x34
 800f4de:	3336      	adds	r3, #54	; 0x36
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7fe fd5d 	bl	800dfa0 <ld_dword>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f4ec:	4a0a      	ldr	r2, [pc, #40]	; (800f518 <check_fs+0xa4>)
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	d101      	bne.n	800f4f6 <check_fs+0x82>
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	e00c      	b.n	800f510 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	3334      	adds	r3, #52	; 0x34
 800f4fa:	3352      	adds	r3, #82	; 0x52
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f7fe fd4f 	bl	800dfa0 <ld_dword>
 800f502:	4603      	mov	r3, r0
 800f504:	4a05      	ldr	r2, [pc, #20]	; (800f51c <check_fs+0xa8>)
 800f506:	4293      	cmp	r3, r2
 800f508:	d101      	bne.n	800f50e <check_fs+0x9a>
 800f50a:	2300      	movs	r3, #0
 800f50c:	e000      	b.n	800f510 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f50e:	2302      	movs	r3, #2
}
 800f510:	4618      	mov	r0, r3
 800f512:	3708      	adds	r7, #8
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}
 800f518:	00544146 	.word	0x00544146
 800f51c:	33544146 	.word	0x33544146

0800f520 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b096      	sub	sp, #88	; 0x58
 800f524:	af00      	add	r7, sp, #0
 800f526:	60f8      	str	r0, [r7, #12]
 800f528:	60b9      	str	r1, [r7, #8]
 800f52a:	4613      	mov	r3, r2
 800f52c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	2200      	movs	r2, #0
 800f532:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f534:	68f8      	ldr	r0, [r7, #12]
 800f536:	f7ff ff59 	bl	800f3ec <get_ldnumber>
 800f53a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f53c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f53e:	2b00      	cmp	r3, #0
 800f540:	da01      	bge.n	800f546 <find_volume+0x26>
 800f542:	230b      	movs	r3, #11
 800f544:	e265      	b.n	800fa12 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f546:	4ab0      	ldr	r2, [pc, #704]	; (800f808 <find_volume+0x2e8>)
 800f548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f54a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f54e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f552:	2b00      	cmp	r3, #0
 800f554:	d101      	bne.n	800f55a <find_volume+0x3a>
 800f556:	230c      	movs	r3, #12
 800f558:	e25b      	b.n	800fa12 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f55e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f560:	79fb      	ldrb	r3, [r7, #7]
 800f562:	f023 0301 	bic.w	r3, r3, #1
 800f566:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f56a:	781b      	ldrb	r3, [r3, #0]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d01a      	beq.n	800f5a6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f572:	785b      	ldrb	r3, [r3, #1]
 800f574:	4618      	mov	r0, r3
 800f576:	f7fe fc5d 	bl	800de34 <disk_status>
 800f57a:	4603      	mov	r3, r0
 800f57c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f580:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f584:	f003 0301 	and.w	r3, r3, #1
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d10c      	bne.n	800f5a6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f58c:	79fb      	ldrb	r3, [r7, #7]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d007      	beq.n	800f5a2 <find_volume+0x82>
 800f592:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f596:	f003 0304 	and.w	r3, r3, #4
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d001      	beq.n	800f5a2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f59e:	230a      	movs	r3, #10
 800f5a0:	e237      	b.n	800fa12 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	e235      	b.n	800fa12 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f5ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5ae:	b2da      	uxtb	r2, r3
 800f5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b6:	785b      	ldrb	r3, [r3, #1]
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7fe fc55 	bl	800de68 <disk_initialize>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f5c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f5c8:	f003 0301 	and.w	r3, r3, #1
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d001      	beq.n	800f5d4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f5d0:	2303      	movs	r3, #3
 800f5d2:	e21e      	b.n	800fa12 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f5d4:	79fb      	ldrb	r3, [r7, #7]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d007      	beq.n	800f5ea <find_volume+0xca>
 800f5da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f5de:	f003 0304 	and.w	r3, r3, #4
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d001      	beq.n	800f5ea <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f5e6:	230a      	movs	r3, #10
 800f5e8:	e213      	b.n	800fa12 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ec:	7858      	ldrb	r0, [r3, #1]
 800f5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f0:	330c      	adds	r3, #12
 800f5f2:	461a      	mov	r2, r3
 800f5f4:	2102      	movs	r1, #2
 800f5f6:	f7fe fc9d 	bl	800df34 <disk_ioctl>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d001      	beq.n	800f604 <find_volume+0xe4>
 800f600:	2301      	movs	r3, #1
 800f602:	e206      	b.n	800fa12 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f606:	899b      	ldrh	r3, [r3, #12]
 800f608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f60c:	d80d      	bhi.n	800f62a <find_volume+0x10a>
 800f60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f610:	899b      	ldrh	r3, [r3, #12]
 800f612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f616:	d308      	bcc.n	800f62a <find_volume+0x10a>
 800f618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f61a:	899b      	ldrh	r3, [r3, #12]
 800f61c:	461a      	mov	r2, r3
 800f61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f620:	899b      	ldrh	r3, [r3, #12]
 800f622:	3b01      	subs	r3, #1
 800f624:	4013      	ands	r3, r2
 800f626:	2b00      	cmp	r3, #0
 800f628:	d001      	beq.n	800f62e <find_volume+0x10e>
 800f62a:	2301      	movs	r3, #1
 800f62c:	e1f1      	b.n	800fa12 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f62e:	2300      	movs	r3, #0
 800f630:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f632:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f634:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f636:	f7ff ff1d 	bl	800f474 <check_fs>
 800f63a:	4603      	mov	r3, r0
 800f63c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f640:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f644:	2b02      	cmp	r3, #2
 800f646:	d14b      	bne.n	800f6e0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f648:	2300      	movs	r3, #0
 800f64a:	643b      	str	r3, [r7, #64]	; 0x40
 800f64c:	e01f      	b.n	800f68e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f650:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f656:	011b      	lsls	r3, r3, #4
 800f658:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f65c:	4413      	add	r3, r2
 800f65e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f662:	3304      	adds	r3, #4
 800f664:	781b      	ldrb	r3, [r3, #0]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d006      	beq.n	800f678 <find_volume+0x158>
 800f66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f66c:	3308      	adds	r3, #8
 800f66e:	4618      	mov	r0, r3
 800f670:	f7fe fc96 	bl	800dfa0 <ld_dword>
 800f674:	4602      	mov	r2, r0
 800f676:	e000      	b.n	800f67a <find_volume+0x15a>
 800f678:	2200      	movs	r2, #0
 800f67a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f67c:	009b      	lsls	r3, r3, #2
 800f67e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f682:	440b      	add	r3, r1
 800f684:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f68a:	3301      	adds	r3, #1
 800f68c:	643b      	str	r3, [r7, #64]	; 0x40
 800f68e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f690:	2b03      	cmp	r3, #3
 800f692:	d9dc      	bls.n	800f64e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f694:	2300      	movs	r3, #0
 800f696:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d002      	beq.n	800f6a4 <find_volume+0x184>
 800f69e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6a0:	3b01      	subs	r3, #1
 800f6a2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f6a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6a6:	009b      	lsls	r3, r3, #2
 800f6a8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f6ac:	4413      	add	r3, r2
 800f6ae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f6b2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f6b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d005      	beq.n	800f6c6 <find_volume+0x1a6>
 800f6ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f6bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f6be:	f7ff fed9 	bl	800f474 <check_fs>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	e000      	b.n	800f6c8 <find_volume+0x1a8>
 800f6c6:	2303      	movs	r3, #3
 800f6c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f6cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f6d0:	2b01      	cmp	r3, #1
 800f6d2:	d905      	bls.n	800f6e0 <find_volume+0x1c0>
 800f6d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6d6:	3301      	adds	r3, #1
 800f6d8:	643b      	str	r3, [r7, #64]	; 0x40
 800f6da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6dc:	2b03      	cmp	r3, #3
 800f6de:	d9e1      	bls.n	800f6a4 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f6e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f6e4:	2b04      	cmp	r3, #4
 800f6e6:	d101      	bne.n	800f6ec <find_volume+0x1cc>
 800f6e8:	2301      	movs	r3, #1
 800f6ea:	e192      	b.n	800fa12 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f6ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f6f0:	2b01      	cmp	r3, #1
 800f6f2:	d901      	bls.n	800f6f8 <find_volume+0x1d8>
 800f6f4:	230d      	movs	r3, #13
 800f6f6:	e18c      	b.n	800fa12 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6fa:	3334      	adds	r3, #52	; 0x34
 800f6fc:	330b      	adds	r3, #11
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7fe fc36 	bl	800df70 <ld_word>
 800f704:	4603      	mov	r3, r0
 800f706:	461a      	mov	r2, r3
 800f708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f70a:	899b      	ldrh	r3, [r3, #12]
 800f70c:	429a      	cmp	r2, r3
 800f70e:	d001      	beq.n	800f714 <find_volume+0x1f4>
 800f710:	230d      	movs	r3, #13
 800f712:	e17e      	b.n	800fa12 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f716:	3334      	adds	r3, #52	; 0x34
 800f718:	3316      	adds	r3, #22
 800f71a:	4618      	mov	r0, r3
 800f71c:	f7fe fc28 	bl	800df70 <ld_word>
 800f720:	4603      	mov	r3, r0
 800f722:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f726:	2b00      	cmp	r3, #0
 800f728:	d106      	bne.n	800f738 <find_volume+0x218>
 800f72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f72c:	3334      	adds	r3, #52	; 0x34
 800f72e:	3324      	adds	r3, #36	; 0x24
 800f730:	4618      	mov	r0, r3
 800f732:	f7fe fc35 	bl	800dfa0 <ld_dword>
 800f736:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f73a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f73c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f740:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800f744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f746:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f74a:	789b      	ldrb	r3, [r3, #2]
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d005      	beq.n	800f75c <find_volume+0x23c>
 800f750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f752:	789b      	ldrb	r3, [r3, #2]
 800f754:	2b02      	cmp	r3, #2
 800f756:	d001      	beq.n	800f75c <find_volume+0x23c>
 800f758:	230d      	movs	r3, #13
 800f75a:	e15a      	b.n	800fa12 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f75e:	789b      	ldrb	r3, [r3, #2]
 800f760:	461a      	mov	r2, r3
 800f762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f764:	fb02 f303 	mul.w	r3, r2, r3
 800f768:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f76c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f770:	b29a      	uxth	r2, r3
 800f772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f774:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f778:	895b      	ldrh	r3, [r3, #10]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d008      	beq.n	800f790 <find_volume+0x270>
 800f77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f780:	895b      	ldrh	r3, [r3, #10]
 800f782:	461a      	mov	r2, r3
 800f784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f786:	895b      	ldrh	r3, [r3, #10]
 800f788:	3b01      	subs	r3, #1
 800f78a:	4013      	ands	r3, r2
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d001      	beq.n	800f794 <find_volume+0x274>
 800f790:	230d      	movs	r3, #13
 800f792:	e13e      	b.n	800fa12 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f796:	3334      	adds	r3, #52	; 0x34
 800f798:	3311      	adds	r3, #17
 800f79a:	4618      	mov	r0, r3
 800f79c:	f7fe fbe8 	bl	800df70 <ld_word>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7a6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7aa:	891b      	ldrh	r3, [r3, #8]
 800f7ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f7ae:	8992      	ldrh	r2, [r2, #12]
 800f7b0:	0952      	lsrs	r2, r2, #5
 800f7b2:	b292      	uxth	r2, r2
 800f7b4:	fbb3 f1f2 	udiv	r1, r3, r2
 800f7b8:	fb02 f201 	mul.w	r2, r2, r1
 800f7bc:	1a9b      	subs	r3, r3, r2
 800f7be:	b29b      	uxth	r3, r3
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d001      	beq.n	800f7c8 <find_volume+0x2a8>
 800f7c4:	230d      	movs	r3, #13
 800f7c6:	e124      	b.n	800fa12 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ca:	3334      	adds	r3, #52	; 0x34
 800f7cc:	3313      	adds	r3, #19
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7fe fbce 	bl	800df70 <ld_word>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f7d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d106      	bne.n	800f7ec <find_volume+0x2cc>
 800f7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e0:	3334      	adds	r3, #52	; 0x34
 800f7e2:	3320      	adds	r3, #32
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f7fe fbdb 	bl	800dfa0 <ld_dword>
 800f7ea:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ee:	3334      	adds	r3, #52	; 0x34
 800f7f0:	330e      	adds	r3, #14
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f7fe fbbc 	bl	800df70 <ld_word>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f7fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d104      	bne.n	800f80c <find_volume+0x2ec>
 800f802:	230d      	movs	r3, #13
 800f804:	e105      	b.n	800fa12 <find_volume+0x4f2>
 800f806:	bf00      	nop
 800f808:	20003114 	.word	0x20003114

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f80c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f80e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f810:	4413      	add	r3, r2
 800f812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f814:	8911      	ldrh	r1, [r2, #8]
 800f816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f818:	8992      	ldrh	r2, [r2, #12]
 800f81a:	0952      	lsrs	r2, r2, #5
 800f81c:	b292      	uxth	r2, r2
 800f81e:	fbb1 f2f2 	udiv	r2, r1, r2
 800f822:	b292      	uxth	r2, r2
 800f824:	4413      	add	r3, r2
 800f826:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f82c:	429a      	cmp	r2, r3
 800f82e:	d201      	bcs.n	800f834 <find_volume+0x314>
 800f830:	230d      	movs	r3, #13
 800f832:	e0ee      	b.n	800fa12 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f834:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f838:	1ad3      	subs	r3, r2, r3
 800f83a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f83c:	8952      	ldrh	r2, [r2, #10]
 800f83e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f842:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f846:	2b00      	cmp	r3, #0
 800f848:	d101      	bne.n	800f84e <find_volume+0x32e>
 800f84a:	230d      	movs	r3, #13
 800f84c:	e0e1      	b.n	800fa12 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800f84e:	2303      	movs	r3, #3
 800f850:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f856:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f85a:	4293      	cmp	r3, r2
 800f85c:	d802      	bhi.n	800f864 <find_volume+0x344>
 800f85e:	2302      	movs	r3, #2
 800f860:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f866:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f86a:	4293      	cmp	r3, r2
 800f86c:	d802      	bhi.n	800f874 <find_volume+0x354>
 800f86e:	2301      	movs	r3, #1
 800f870:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f876:	1c9a      	adds	r2, r3, #2
 800f878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f87a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800f87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f87e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f880:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f882:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f886:	441a      	add	r2, r3
 800f888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f88a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f88c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f890:	441a      	add	r2, r3
 800f892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f894:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800f896:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f89a:	2b03      	cmp	r3, #3
 800f89c:	d11e      	bne.n	800f8dc <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a0:	3334      	adds	r3, #52	; 0x34
 800f8a2:	332a      	adds	r3, #42	; 0x2a
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f7fe fb63 	bl	800df70 <ld_word>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d001      	beq.n	800f8b4 <find_volume+0x394>
 800f8b0:	230d      	movs	r3, #13
 800f8b2:	e0ae      	b.n	800fa12 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b6:	891b      	ldrh	r3, [r3, #8]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d001      	beq.n	800f8c0 <find_volume+0x3a0>
 800f8bc:	230d      	movs	r3, #13
 800f8be:	e0a8      	b.n	800fa12 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c2:	3334      	adds	r3, #52	; 0x34
 800f8c4:	332c      	adds	r3, #44	; 0x2c
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f7fe fb6a 	bl	800dfa0 <ld_dword>
 800f8cc:	4602      	mov	r2, r0
 800f8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d4:	699b      	ldr	r3, [r3, #24]
 800f8d6:	009b      	lsls	r3, r3, #2
 800f8d8:	647b      	str	r3, [r7, #68]	; 0x44
 800f8da:	e01f      	b.n	800f91c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8de:	891b      	ldrh	r3, [r3, #8]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d101      	bne.n	800f8e8 <find_volume+0x3c8>
 800f8e4:	230d      	movs	r3, #13
 800f8e6:	e094      	b.n	800fa12 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8ee:	441a      	add	r2, r3
 800f8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f8f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f8f8:	2b02      	cmp	r3, #2
 800f8fa:	d103      	bne.n	800f904 <find_volume+0x3e4>
 800f8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8fe:	699b      	ldr	r3, [r3, #24]
 800f900:	005b      	lsls	r3, r3, #1
 800f902:	e00a      	b.n	800f91a <find_volume+0x3fa>
 800f904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f906:	699a      	ldr	r2, [r3, #24]
 800f908:	4613      	mov	r3, r2
 800f90a:	005b      	lsls	r3, r3, #1
 800f90c:	4413      	add	r3, r2
 800f90e:	085a      	lsrs	r2, r3, #1
 800f910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f912:	699b      	ldr	r3, [r3, #24]
 800f914:	f003 0301 	and.w	r3, r3, #1
 800f918:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f91a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f91e:	69da      	ldr	r2, [r3, #28]
 800f920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f922:	899b      	ldrh	r3, [r3, #12]
 800f924:	4619      	mov	r1, r3
 800f926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f928:	440b      	add	r3, r1
 800f92a:	3b01      	subs	r3, #1
 800f92c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f92e:	8989      	ldrh	r1, [r1, #12]
 800f930:	fbb3 f3f1 	udiv	r3, r3, r1
 800f934:	429a      	cmp	r2, r3
 800f936:	d201      	bcs.n	800f93c <find_volume+0x41c>
 800f938:	230d      	movs	r3, #13
 800f93a:	e06a      	b.n	800fa12 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f93e:	f04f 32ff 	mov.w	r2, #4294967295
 800f942:	615a      	str	r2, [r3, #20]
 800f944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f946:	695a      	ldr	r2, [r3, #20]
 800f948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f94a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f94e:	2280      	movs	r2, #128	; 0x80
 800f950:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f952:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f956:	2b03      	cmp	r3, #3
 800f958:	d149      	bne.n	800f9ee <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f95c:	3334      	adds	r3, #52	; 0x34
 800f95e:	3330      	adds	r3, #48	; 0x30
 800f960:	4618      	mov	r0, r3
 800f962:	f7fe fb05 	bl	800df70 <ld_word>
 800f966:	4603      	mov	r3, r0
 800f968:	2b01      	cmp	r3, #1
 800f96a:	d140      	bne.n	800f9ee <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f96c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f96e:	3301      	adds	r3, #1
 800f970:	4619      	mov	r1, r3
 800f972:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f974:	f7fe fdac 	bl	800e4d0 <move_window>
 800f978:	4603      	mov	r3, r0
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d137      	bne.n	800f9ee <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800f97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f980:	2200      	movs	r2, #0
 800f982:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f986:	3334      	adds	r3, #52	; 0x34
 800f988:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f98c:	4618      	mov	r0, r3
 800f98e:	f7fe faef 	bl	800df70 <ld_word>
 800f992:	4603      	mov	r3, r0
 800f994:	461a      	mov	r2, r3
 800f996:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d127      	bne.n	800f9ee <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a0:	3334      	adds	r3, #52	; 0x34
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f7fe fafc 	bl	800dfa0 <ld_dword>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	4a1c      	ldr	r2, [pc, #112]	; (800fa1c <find_volume+0x4fc>)
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	d11e      	bne.n	800f9ee <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b2:	3334      	adds	r3, #52	; 0x34
 800f9b4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7fe faf1 	bl	800dfa0 <ld_dword>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	4a17      	ldr	r2, [pc, #92]	; (800fa20 <find_volume+0x500>)
 800f9c2:	4293      	cmp	r3, r2
 800f9c4:	d113      	bne.n	800f9ee <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c8:	3334      	adds	r3, #52	; 0x34
 800f9ca:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7fe fae6 	bl	800dfa0 <ld_dword>
 800f9d4:	4602      	mov	r2, r0
 800f9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9dc:	3334      	adds	r3, #52	; 0x34
 800f9de:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f7fe fadc 	bl	800dfa0 <ld_dword>
 800f9e8:	4602      	mov	r2, r0
 800f9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ec:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9f0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f9f4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f9f6:	4b0b      	ldr	r3, [pc, #44]	; (800fa24 <find_volume+0x504>)
 800f9f8:	881b      	ldrh	r3, [r3, #0]
 800f9fa:	3301      	adds	r3, #1
 800f9fc:	b29a      	uxth	r2, r3
 800f9fe:	4b09      	ldr	r3, [pc, #36]	; (800fa24 <find_volume+0x504>)
 800fa00:	801a      	strh	r2, [r3, #0]
 800fa02:	4b08      	ldr	r3, [pc, #32]	; (800fa24 <find_volume+0x504>)
 800fa04:	881a      	ldrh	r2, [r3, #0]
 800fa06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa08:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fa0a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fa0c:	f7fe fcf8 	bl	800e400 <clear_lock>
#endif
	return FR_OK;
 800fa10:	2300      	movs	r3, #0
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3758      	adds	r7, #88	; 0x58
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}
 800fa1a:	bf00      	nop
 800fa1c:	41615252 	.word	0x41615252
 800fa20:	61417272 	.word	0x61417272
 800fa24:	20003118 	.word	0x20003118

0800fa28 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b084      	sub	sp, #16
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
 800fa30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fa32:	2309      	movs	r3, #9
 800fa34:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d01c      	beq.n	800fa76 <validate+0x4e>
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d018      	beq.n	800fa76 <validate+0x4e>
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d013      	beq.n	800fa76 <validate+0x4e>
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	889a      	ldrh	r2, [r3, #4]
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	88db      	ldrh	r3, [r3, #6]
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	d10c      	bne.n	800fa76 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	785b      	ldrb	r3, [r3, #1]
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7fe f9e6 	bl	800de34 <disk_status>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	f003 0301 	and.w	r3, r3, #1
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d101      	bne.n	800fa76 <validate+0x4e>
			res = FR_OK;
 800fa72:	2300      	movs	r3, #0
 800fa74:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fa76:	7bfb      	ldrb	r3, [r7, #15]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d102      	bne.n	800fa82 <validate+0x5a>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	e000      	b.n	800fa84 <validate+0x5c>
 800fa82:	2300      	movs	r3, #0
 800fa84:	683a      	ldr	r2, [r7, #0]
 800fa86:	6013      	str	r3, [r2, #0]
	return res;
 800fa88:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	3710      	adds	r7, #16
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}
	...

0800fa94 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b088      	sub	sp, #32
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	60f8      	str	r0, [r7, #12]
 800fa9c:	60b9      	str	r1, [r7, #8]
 800fa9e:	4613      	mov	r3, r2
 800faa0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800faa6:	f107 0310 	add.w	r3, r7, #16
 800faaa:	4618      	mov	r0, r3
 800faac:	f7ff fc9e 	bl	800f3ec <get_ldnumber>
 800fab0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fab2:	69fb      	ldr	r3, [r7, #28]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	da01      	bge.n	800fabc <f_mount+0x28>
 800fab8:	230b      	movs	r3, #11
 800faba:	e02b      	b.n	800fb14 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fabc:	4a17      	ldr	r2, [pc, #92]	; (800fb1c <f_mount+0x88>)
 800fabe:	69fb      	ldr	r3, [r7, #28]
 800fac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fac4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fac6:	69bb      	ldr	r3, [r7, #24]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d005      	beq.n	800fad8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800facc:	69b8      	ldr	r0, [r7, #24]
 800face:	f7fe fc97 	bl	800e400 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fad2:	69bb      	ldr	r3, [r7, #24]
 800fad4:	2200      	movs	r2, #0
 800fad6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d002      	beq.n	800fae4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	2200      	movs	r2, #0
 800fae2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fae4:	68fa      	ldr	r2, [r7, #12]
 800fae6:	490d      	ldr	r1, [pc, #52]	; (800fb1c <f_mount+0x88>)
 800fae8:	69fb      	ldr	r3, [r7, #28]
 800faea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d002      	beq.n	800fafa <f_mount+0x66>
 800faf4:	79fb      	ldrb	r3, [r7, #7]
 800faf6:	2b01      	cmp	r3, #1
 800faf8:	d001      	beq.n	800fafe <f_mount+0x6a>
 800fafa:	2300      	movs	r3, #0
 800fafc:	e00a      	b.n	800fb14 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fafe:	f107 010c 	add.w	r1, r7, #12
 800fb02:	f107 0308 	add.w	r3, r7, #8
 800fb06:	2200      	movs	r2, #0
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7ff fd09 	bl	800f520 <find_volume>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fb12:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3720      	adds	r7, #32
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}
 800fb1c:	20003114 	.word	0x20003114

0800fb20 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b098      	sub	sp, #96	; 0x60
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	4613      	mov	r3, r2
 800fb2c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d101      	bne.n	800fb38 <f_open+0x18>
 800fb34:	2309      	movs	r3, #9
 800fb36:	e1bb      	b.n	800feb0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fb38:	79fb      	ldrb	r3, [r7, #7]
 800fb3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb3e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fb40:	79fa      	ldrb	r2, [r7, #7]
 800fb42:	f107 0110 	add.w	r1, r7, #16
 800fb46:	f107 0308 	add.w	r3, r7, #8
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7ff fce8 	bl	800f520 <find_volume>
 800fb50:	4603      	mov	r3, r0
 800fb52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800fb56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	f040 819f 	bne.w	800fe9e <f_open+0x37e>
		dj.obj.fs = fs;
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fb64:	68ba      	ldr	r2, [r7, #8]
 800fb66:	f107 0314 	add.w	r3, r7, #20
 800fb6a:	4611      	mov	r1, r2
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f7ff fbc7 	bl	800f300 <follow_path>
 800fb72:	4603      	mov	r3, r0
 800fb74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fb78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d11a      	bne.n	800fbb6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fb80:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fb84:	b25b      	sxtb	r3, r3
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	da03      	bge.n	800fb92 <f_open+0x72>
				res = FR_INVALID_NAME;
 800fb8a:	2306      	movs	r3, #6
 800fb8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fb90:	e011      	b.n	800fbb6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fb92:	79fb      	ldrb	r3, [r7, #7]
 800fb94:	f023 0301 	bic.w	r3, r3, #1
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	bf14      	ite	ne
 800fb9c:	2301      	movne	r3, #1
 800fb9e:	2300      	moveq	r3, #0
 800fba0:	b2db      	uxtb	r3, r3
 800fba2:	461a      	mov	r2, r3
 800fba4:	f107 0314 	add.w	r3, r7, #20
 800fba8:	4611      	mov	r1, r2
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7fe fae0 	bl	800e170 <chk_lock>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fbb6:	79fb      	ldrb	r3, [r7, #7]
 800fbb8:	f003 031c 	and.w	r3, r3, #28
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d07f      	beq.n	800fcc0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800fbc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d017      	beq.n	800fbf8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fbc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fbcc:	2b04      	cmp	r3, #4
 800fbce:	d10e      	bne.n	800fbee <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fbd0:	f7fe fb2a 	bl	800e228 <enq_lock>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d006      	beq.n	800fbe8 <f_open+0xc8>
 800fbda:	f107 0314 	add.w	r3, r7, #20
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7ff fa92 	bl	800f108 <dir_register>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	e000      	b.n	800fbea <f_open+0xca>
 800fbe8:	2312      	movs	r3, #18
 800fbea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fbee:	79fb      	ldrb	r3, [r7, #7]
 800fbf0:	f043 0308 	orr.w	r3, r3, #8
 800fbf4:	71fb      	strb	r3, [r7, #7]
 800fbf6:	e010      	b.n	800fc1a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fbf8:	7ebb      	ldrb	r3, [r7, #26]
 800fbfa:	f003 0311 	and.w	r3, r3, #17
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d003      	beq.n	800fc0a <f_open+0xea>
					res = FR_DENIED;
 800fc02:	2307      	movs	r3, #7
 800fc04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fc08:	e007      	b.n	800fc1a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fc0a:	79fb      	ldrb	r3, [r7, #7]
 800fc0c:	f003 0304 	and.w	r3, r3, #4
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d002      	beq.n	800fc1a <f_open+0xfa>
 800fc14:	2308      	movs	r3, #8
 800fc16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fc1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d168      	bne.n	800fcf4 <f_open+0x1d4>
 800fc22:	79fb      	ldrb	r3, [r7, #7]
 800fc24:	f003 0308 	and.w	r3, r3, #8
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d063      	beq.n	800fcf4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800fc2c:	f7fa f8ec 	bl	8009e08 <get_fattime>
 800fc30:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fc32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc34:	330e      	adds	r3, #14
 800fc36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fc38:	4618      	mov	r0, r3
 800fc3a:	f7fe f9ef 	bl	800e01c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fc3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc40:	3316      	adds	r3, #22
 800fc42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7fe f9e9 	bl	800e01c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fc4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc4c:	330b      	adds	r3, #11
 800fc4e:	2220      	movs	r2, #32
 800fc50:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fc52:	693b      	ldr	r3, [r7, #16]
 800fc54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc56:	4611      	mov	r1, r2
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f7ff f9c1 	bl	800efe0 <ld_clust>
 800fc5e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fc60:	693b      	ldr	r3, [r7, #16]
 800fc62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fc64:	2200      	movs	r2, #0
 800fc66:	4618      	mov	r0, r3
 800fc68:	f7ff f9d9 	bl	800f01e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fc6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc6e:	331c      	adds	r3, #28
 800fc70:	2100      	movs	r1, #0
 800fc72:	4618      	mov	r0, r3
 800fc74:	f7fe f9d2 	bl	800e01c <st_dword>
					fs->wflag = 1;
 800fc78:	693b      	ldr	r3, [r7, #16]
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fc7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d037      	beq.n	800fcf4 <f_open+0x1d4>
						dw = fs->winsect;
 800fc84:	693b      	ldr	r3, [r7, #16]
 800fc86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc88:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800fc8a:	f107 0314 	add.w	r3, r7, #20
 800fc8e:	2200      	movs	r2, #0
 800fc90:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fc92:	4618      	mov	r0, r3
 800fc94:	f7fe fec9 	bl	800ea2a <remove_chain>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800fc9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d126      	bne.n	800fcf4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800fca6:	693b      	ldr	r3, [r7, #16]
 800fca8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f7fe fc10 	bl	800e4d0 <move_window>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fcb6:	693b      	ldr	r3, [r7, #16]
 800fcb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fcba:	3a01      	subs	r2, #1
 800fcbc:	611a      	str	r2, [r3, #16]
 800fcbe:	e019      	b.n	800fcf4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fcc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d115      	bne.n	800fcf4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fcc8:	7ebb      	ldrb	r3, [r7, #26]
 800fcca:	f003 0310 	and.w	r3, r3, #16
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d003      	beq.n	800fcda <f_open+0x1ba>
					res = FR_NO_FILE;
 800fcd2:	2304      	movs	r3, #4
 800fcd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fcd8:	e00c      	b.n	800fcf4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fcda:	79fb      	ldrb	r3, [r7, #7]
 800fcdc:	f003 0302 	and.w	r3, r3, #2
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d007      	beq.n	800fcf4 <f_open+0x1d4>
 800fce4:	7ebb      	ldrb	r3, [r7, #26]
 800fce6:	f003 0301 	and.w	r3, r3, #1
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d002      	beq.n	800fcf4 <f_open+0x1d4>
						res = FR_DENIED;
 800fcee:	2307      	movs	r3, #7
 800fcf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800fcf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d128      	bne.n	800fd4e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fcfc:	79fb      	ldrb	r3, [r7, #7]
 800fcfe:	f003 0308 	and.w	r3, r3, #8
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d003      	beq.n	800fd0e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800fd06:	79fb      	ldrb	r3, [r7, #7]
 800fd08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd0c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800fd16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fd1c:	79fb      	ldrb	r3, [r7, #7]
 800fd1e:	f023 0301 	bic.w	r3, r3, #1
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	bf14      	ite	ne
 800fd26:	2301      	movne	r3, #1
 800fd28:	2300      	moveq	r3, #0
 800fd2a:	b2db      	uxtb	r3, r3
 800fd2c:	461a      	mov	r2, r3
 800fd2e:	f107 0314 	add.w	r3, r7, #20
 800fd32:	4611      	mov	r1, r2
 800fd34:	4618      	mov	r0, r3
 800fd36:	f7fe fa99 	bl	800e26c <inc_lock>
 800fd3a:	4602      	mov	r2, r0
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	691b      	ldr	r3, [r3, #16]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d102      	bne.n	800fd4e <f_open+0x22e>
 800fd48:	2302      	movs	r3, #2
 800fd4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fd4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	f040 80a3 	bne.w	800fe9e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fd58:	693b      	ldr	r3, [r7, #16]
 800fd5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd5c:	4611      	mov	r1, r2
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7ff f93e 	bl	800efe0 <ld_clust>
 800fd64:	4602      	mov	r2, r0
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fd6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd6c:	331c      	adds	r3, #28
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7fe f916 	bl	800dfa0 <ld_dword>
 800fd74:	4602      	mov	r2, r0
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fd80:	693a      	ldr	r2, [r7, #16]
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fd86:	693b      	ldr	r3, [r7, #16]
 800fd88:	88da      	ldrh	r2, [r3, #6]
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	79fa      	ldrb	r2, [r7, #7]
 800fd92:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	2200      	movs	r2, #0
 800fd98:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	2200      	movs	r2, #0
 800fda4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	3330      	adds	r3, #48	; 0x30
 800fdaa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fdae:	2100      	movs	r1, #0
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7fe f980 	bl	800e0b6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fdb6:	79fb      	ldrb	r3, [r7, #7]
 800fdb8:	f003 0320 	and.w	r3, r3, #32
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d06e      	beq.n	800fe9e <f_open+0x37e>
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	68db      	ldr	r3, [r3, #12]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d06a      	beq.n	800fe9e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	68da      	ldr	r2, [r3, #12]
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fdd0:	693b      	ldr	r3, [r7, #16]
 800fdd2:	895b      	ldrh	r3, [r3, #10]
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	693b      	ldr	r3, [r7, #16]
 800fdd8:	899b      	ldrh	r3, [r3, #12]
 800fdda:	fb03 f302 	mul.w	r3, r3, r2
 800fdde:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	689b      	ldr	r3, [r3, #8]
 800fde4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	68db      	ldr	r3, [r3, #12]
 800fdea:	657b      	str	r3, [r7, #84]	; 0x54
 800fdec:	e016      	b.n	800fe1c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f7fe fc29 	bl	800e64a <get_fat>
 800fdf8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800fdfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fdfc:	2b01      	cmp	r3, #1
 800fdfe:	d802      	bhi.n	800fe06 <f_open+0x2e6>
 800fe00:	2302      	movs	r3, #2
 800fe02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fe06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fe08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe0c:	d102      	bne.n	800fe14 <f_open+0x2f4>
 800fe0e:	2301      	movs	r3, #1
 800fe10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fe14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fe16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe18:	1ad3      	subs	r3, r2, r3
 800fe1a:	657b      	str	r3, [r7, #84]	; 0x54
 800fe1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d103      	bne.n	800fe2c <f_open+0x30c>
 800fe24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fe26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	d8e0      	bhi.n	800fdee <f_open+0x2ce>
				}
				fp->clust = clst;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fe30:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fe32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d131      	bne.n	800fe9e <f_open+0x37e>
 800fe3a:	693b      	ldr	r3, [r7, #16]
 800fe3c:	899b      	ldrh	r3, [r3, #12]
 800fe3e:	461a      	mov	r2, r3
 800fe40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe42:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe46:	fb02 f201 	mul.w	r2, r2, r1
 800fe4a:	1a9b      	subs	r3, r3, r2
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d026      	beq.n	800fe9e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fe54:	4618      	mov	r0, r3
 800fe56:	f7fe fbd9 	bl	800e60c <clust2sect>
 800fe5a:	6478      	str	r0, [r7, #68]	; 0x44
 800fe5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d103      	bne.n	800fe6a <f_open+0x34a>
						res = FR_INT_ERR;
 800fe62:	2302      	movs	r3, #2
 800fe64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fe68:	e019      	b.n	800fe9e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fe6a:	693b      	ldr	r3, [r7, #16]
 800fe6c:	899b      	ldrh	r3, [r3, #12]
 800fe6e:	461a      	mov	r2, r3
 800fe70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe72:	fbb3 f2f2 	udiv	r2, r3, r2
 800fe76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe78:	441a      	add	r2, r3
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fe7e:	693b      	ldr	r3, [r7, #16]
 800fe80:	7858      	ldrb	r0, [r3, #1]
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	6a1a      	ldr	r2, [r3, #32]
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	f7fe f811 	bl	800deb4 <disk_read>
 800fe92:	4603      	mov	r3, r0
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d002      	beq.n	800fe9e <f_open+0x37e>
 800fe98:	2301      	movs	r3, #1
 800fe9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fe9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d002      	beq.n	800feac <f_open+0x38c>
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	2200      	movs	r2, #0
 800feaa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800feac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800feb0:	4618      	mov	r0, r3
 800feb2:	3760      	adds	r7, #96	; 0x60
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}

0800feb8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b08e      	sub	sp, #56	; 0x38
 800febc:	af00      	add	r7, sp, #0
 800febe:	60f8      	str	r0, [r7, #12]
 800fec0:	60b9      	str	r1, [r7, #8]
 800fec2:	607a      	str	r2, [r7, #4]
 800fec4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	2200      	movs	r2, #0
 800fece:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	f107 0214 	add.w	r2, r7, #20
 800fed6:	4611      	mov	r1, r2
 800fed8:	4618      	mov	r0, r3
 800feda:	f7ff fda5 	bl	800fa28 <validate>
 800fede:	4603      	mov	r3, r0
 800fee0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fee4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d107      	bne.n	800fefc <f_read+0x44>
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	7d5b      	ldrb	r3, [r3, #21]
 800fef0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fef4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d002      	beq.n	800ff02 <f_read+0x4a>
 800fefc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff00:	e135      	b.n	801016e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	7d1b      	ldrb	r3, [r3, #20]
 800ff06:	f003 0301 	and.w	r3, r3, #1
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d101      	bne.n	800ff12 <f_read+0x5a>
 800ff0e:	2307      	movs	r3, #7
 800ff10:	e12d      	b.n	801016e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	68da      	ldr	r2, [r3, #12]
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	699b      	ldr	r3, [r3, #24]
 800ff1a:	1ad3      	subs	r3, r2, r3
 800ff1c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ff1e:	687a      	ldr	r2, [r7, #4]
 800ff20:	6a3b      	ldr	r3, [r7, #32]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	f240 811e 	bls.w	8010164 <f_read+0x2ac>
 800ff28:	6a3b      	ldr	r3, [r7, #32]
 800ff2a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ff2c:	e11a      	b.n	8010164 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	699b      	ldr	r3, [r3, #24]
 800ff32:	697a      	ldr	r2, [r7, #20]
 800ff34:	8992      	ldrh	r2, [r2, #12]
 800ff36:	fbb3 f1f2 	udiv	r1, r3, r2
 800ff3a:	fb02 f201 	mul.w	r2, r2, r1
 800ff3e:	1a9b      	subs	r3, r3, r2
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	f040 80d5 	bne.w	80100f0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	699b      	ldr	r3, [r3, #24]
 800ff4a:	697a      	ldr	r2, [r7, #20]
 800ff4c:	8992      	ldrh	r2, [r2, #12]
 800ff4e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff52:	697a      	ldr	r2, [r7, #20]
 800ff54:	8952      	ldrh	r2, [r2, #10]
 800ff56:	3a01      	subs	r2, #1
 800ff58:	4013      	ands	r3, r2
 800ff5a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ff5c:	69fb      	ldr	r3, [r7, #28]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d12f      	bne.n	800ffc2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	699b      	ldr	r3, [r3, #24]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d103      	bne.n	800ff72 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	689b      	ldr	r3, [r3, #8]
 800ff6e:	633b      	str	r3, [r7, #48]	; 0x30
 800ff70:	e013      	b.n	800ff9a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d007      	beq.n	800ff8a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	699b      	ldr	r3, [r3, #24]
 800ff7e:	4619      	mov	r1, r3
 800ff80:	68f8      	ldr	r0, [r7, #12]
 800ff82:	f7fe fe4f 	bl	800ec24 <clmt_clust>
 800ff86:	6338      	str	r0, [r7, #48]	; 0x30
 800ff88:	e007      	b.n	800ff9a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ff8a:	68fa      	ldr	r2, [r7, #12]
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	69db      	ldr	r3, [r3, #28]
 800ff90:	4619      	mov	r1, r3
 800ff92:	4610      	mov	r0, r2
 800ff94:	f7fe fb59 	bl	800e64a <get_fat>
 800ff98:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ff9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff9c:	2b01      	cmp	r3, #1
 800ff9e:	d804      	bhi.n	800ffaa <f_read+0xf2>
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	2202      	movs	r2, #2
 800ffa4:	755a      	strb	r2, [r3, #21]
 800ffa6:	2302      	movs	r3, #2
 800ffa8:	e0e1      	b.n	801016e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ffaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffb0:	d104      	bne.n	800ffbc <f_read+0x104>
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	2201      	movs	r2, #1
 800ffb6:	755a      	strb	r2, [r3, #21]
 800ffb8:	2301      	movs	r3, #1
 800ffba:	e0d8      	b.n	801016e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffc0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ffc2:	697a      	ldr	r2, [r7, #20]
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	69db      	ldr	r3, [r3, #28]
 800ffc8:	4619      	mov	r1, r3
 800ffca:	4610      	mov	r0, r2
 800ffcc:	f7fe fb1e 	bl	800e60c <clust2sect>
 800ffd0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ffd2:	69bb      	ldr	r3, [r7, #24]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d104      	bne.n	800ffe2 <f_read+0x12a>
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	2202      	movs	r2, #2
 800ffdc:	755a      	strb	r2, [r3, #21]
 800ffde:	2302      	movs	r3, #2
 800ffe0:	e0c5      	b.n	801016e <f_read+0x2b6>
			sect += csect;
 800ffe2:	69ba      	ldr	r2, [r7, #24]
 800ffe4:	69fb      	ldr	r3, [r7, #28]
 800ffe6:	4413      	add	r3, r2
 800ffe8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ffea:	697b      	ldr	r3, [r7, #20]
 800ffec:	899b      	ldrh	r3, [r3, #12]
 800ffee:	461a      	mov	r2, r3
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	fbb3 f3f2 	udiv	r3, r3, r2
 800fff6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800fff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d041      	beq.n	8010082 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fffe:	69fa      	ldr	r2, [r7, #28]
 8010000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010002:	4413      	add	r3, r2
 8010004:	697a      	ldr	r2, [r7, #20]
 8010006:	8952      	ldrh	r2, [r2, #10]
 8010008:	4293      	cmp	r3, r2
 801000a:	d905      	bls.n	8010018 <f_read+0x160>
					cc = fs->csize - csect;
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	895b      	ldrh	r3, [r3, #10]
 8010010:	461a      	mov	r2, r3
 8010012:	69fb      	ldr	r3, [r7, #28]
 8010014:	1ad3      	subs	r3, r2, r3
 8010016:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	7858      	ldrb	r0, [r3, #1]
 801001c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801001e:	69ba      	ldr	r2, [r7, #24]
 8010020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010022:	f7fd ff47 	bl	800deb4 <disk_read>
 8010026:	4603      	mov	r3, r0
 8010028:	2b00      	cmp	r3, #0
 801002a:	d004      	beq.n	8010036 <f_read+0x17e>
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	2201      	movs	r2, #1
 8010030:	755a      	strb	r2, [r3, #21]
 8010032:	2301      	movs	r3, #1
 8010034:	e09b      	b.n	801016e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	7d1b      	ldrb	r3, [r3, #20]
 801003a:	b25b      	sxtb	r3, r3
 801003c:	2b00      	cmp	r3, #0
 801003e:	da18      	bge.n	8010072 <f_read+0x1ba>
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	6a1a      	ldr	r2, [r3, #32]
 8010044:	69bb      	ldr	r3, [r7, #24]
 8010046:	1ad3      	subs	r3, r2, r3
 8010048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801004a:	429a      	cmp	r2, r3
 801004c:	d911      	bls.n	8010072 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	6a1a      	ldr	r2, [r3, #32]
 8010052:	69bb      	ldr	r3, [r7, #24]
 8010054:	1ad3      	subs	r3, r2, r3
 8010056:	697a      	ldr	r2, [r7, #20]
 8010058:	8992      	ldrh	r2, [r2, #12]
 801005a:	fb02 f303 	mul.w	r3, r2, r3
 801005e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010060:	18d0      	adds	r0, r2, r3
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	899b      	ldrh	r3, [r3, #12]
 801006c:	461a      	mov	r2, r3
 801006e:	f7fe f801 	bl	800e074 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	899b      	ldrh	r3, [r3, #12]
 8010076:	461a      	mov	r2, r3
 8010078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801007a:	fb02 f303 	mul.w	r3, r2, r3
 801007e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010080:	e05c      	b.n	801013c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	6a1b      	ldr	r3, [r3, #32]
 8010086:	69ba      	ldr	r2, [r7, #24]
 8010088:	429a      	cmp	r2, r3
 801008a:	d02e      	beq.n	80100ea <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	7d1b      	ldrb	r3, [r3, #20]
 8010090:	b25b      	sxtb	r3, r3
 8010092:	2b00      	cmp	r3, #0
 8010094:	da18      	bge.n	80100c8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010096:	697b      	ldr	r3, [r7, #20]
 8010098:	7858      	ldrb	r0, [r3, #1]
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	6a1a      	ldr	r2, [r3, #32]
 80100a4:	2301      	movs	r3, #1
 80100a6:	f7fd ff25 	bl	800def4 <disk_write>
 80100aa:	4603      	mov	r3, r0
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d004      	beq.n	80100ba <f_read+0x202>
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	2201      	movs	r2, #1
 80100b4:	755a      	strb	r2, [r3, #21]
 80100b6:	2301      	movs	r3, #1
 80100b8:	e059      	b.n	801016e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	7d1b      	ldrb	r3, [r3, #20]
 80100be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80100c2:	b2da      	uxtb	r2, r3
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	7858      	ldrb	r0, [r3, #1]
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80100d2:	2301      	movs	r3, #1
 80100d4:	69ba      	ldr	r2, [r7, #24]
 80100d6:	f7fd feed 	bl	800deb4 <disk_read>
 80100da:	4603      	mov	r3, r0
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d004      	beq.n	80100ea <f_read+0x232>
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	2201      	movs	r2, #1
 80100e4:	755a      	strb	r2, [r3, #21]
 80100e6:	2301      	movs	r3, #1
 80100e8:	e041      	b.n	801016e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	69ba      	ldr	r2, [r7, #24]
 80100ee:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	899b      	ldrh	r3, [r3, #12]
 80100f4:	4618      	mov	r0, r3
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	699b      	ldr	r3, [r3, #24]
 80100fa:	697a      	ldr	r2, [r7, #20]
 80100fc:	8992      	ldrh	r2, [r2, #12]
 80100fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8010102:	fb02 f201 	mul.w	r2, r2, r1
 8010106:	1a9b      	subs	r3, r3, r2
 8010108:	1ac3      	subs	r3, r0, r3
 801010a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801010c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	429a      	cmp	r2, r3
 8010112:	d901      	bls.n	8010118 <f_read+0x260>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	699b      	ldr	r3, [r3, #24]
 8010122:	697a      	ldr	r2, [r7, #20]
 8010124:	8992      	ldrh	r2, [r2, #12]
 8010126:	fbb3 f0f2 	udiv	r0, r3, r2
 801012a:	fb02 f200 	mul.w	r2, r2, r0
 801012e:	1a9b      	subs	r3, r3, r2
 8010130:	440b      	add	r3, r1
 8010132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010134:	4619      	mov	r1, r3
 8010136:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010138:	f7fd ff9c 	bl	800e074 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801013c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801013e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010140:	4413      	add	r3, r2
 8010142:	627b      	str	r3, [r7, #36]	; 0x24
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	699a      	ldr	r2, [r3, #24]
 8010148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801014a:	441a      	add	r2, r3
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	619a      	str	r2, [r3, #24]
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	681a      	ldr	r2, [r3, #0]
 8010154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010156:	441a      	add	r2, r3
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	601a      	str	r2, [r3, #0]
 801015c:	687a      	ldr	r2, [r7, #4]
 801015e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010160:	1ad3      	subs	r3, r2, r3
 8010162:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2b00      	cmp	r3, #0
 8010168:	f47f aee1 	bne.w	800ff2e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801016c:	2300      	movs	r3, #0
}
 801016e:	4618      	mov	r0, r3
 8010170:	3738      	adds	r7, #56	; 0x38
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}

08010176 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010176:	b580      	push	{r7, lr}
 8010178:	b086      	sub	sp, #24
 801017a:	af00      	add	r7, sp, #0
 801017c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	f107 0208 	add.w	r2, r7, #8
 8010184:	4611      	mov	r1, r2
 8010186:	4618      	mov	r0, r3
 8010188:	f7ff fc4e 	bl	800fa28 <validate>
 801018c:	4603      	mov	r3, r0
 801018e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010190:	7dfb      	ldrb	r3, [r7, #23]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d168      	bne.n	8010268 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	7d1b      	ldrb	r3, [r3, #20]
 801019a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d062      	beq.n	8010268 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	7d1b      	ldrb	r3, [r3, #20]
 80101a6:	b25b      	sxtb	r3, r3
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	da15      	bge.n	80101d8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	7858      	ldrb	r0, [r3, #1]
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6a1a      	ldr	r2, [r3, #32]
 80101ba:	2301      	movs	r3, #1
 80101bc:	f7fd fe9a 	bl	800def4 <disk_write>
 80101c0:	4603      	mov	r3, r0
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d001      	beq.n	80101ca <f_sync+0x54>
 80101c6:	2301      	movs	r3, #1
 80101c8:	e04f      	b.n	801026a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	7d1b      	ldrb	r3, [r3, #20]
 80101ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101d2:	b2da      	uxtb	r2, r3
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80101d8:	f7f9 fe16 	bl	8009e08 <get_fattime>
 80101dc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80101de:	68ba      	ldr	r2, [r7, #8]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101e4:	4619      	mov	r1, r3
 80101e6:	4610      	mov	r0, r2
 80101e8:	f7fe f972 	bl	800e4d0 <move_window>
 80101ec:	4603      	mov	r3, r0
 80101ee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80101f0:	7dfb      	ldrb	r3, [r7, #23]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d138      	bne.n	8010268 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101fa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	330b      	adds	r3, #11
 8010200:	781a      	ldrb	r2, [r3, #0]
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	330b      	adds	r3, #11
 8010206:	f042 0220 	orr.w	r2, r2, #32
 801020a:	b2d2      	uxtb	r2, r2
 801020c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6818      	ldr	r0, [r3, #0]
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	689b      	ldr	r3, [r3, #8]
 8010216:	461a      	mov	r2, r3
 8010218:	68f9      	ldr	r1, [r7, #12]
 801021a:	f7fe ff00 	bl	800f01e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	f103 021c 	add.w	r2, r3, #28
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	68db      	ldr	r3, [r3, #12]
 8010228:	4619      	mov	r1, r3
 801022a:	4610      	mov	r0, r2
 801022c:	f7fd fef6 	bl	800e01c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	3316      	adds	r3, #22
 8010234:	6939      	ldr	r1, [r7, #16]
 8010236:	4618      	mov	r0, r3
 8010238:	f7fd fef0 	bl	800e01c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	3312      	adds	r3, #18
 8010240:	2100      	movs	r1, #0
 8010242:	4618      	mov	r0, r3
 8010244:	f7fd fecf 	bl	800dfe6 <st_word>
					fs->wflag = 1;
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	2201      	movs	r2, #1
 801024c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	4618      	mov	r0, r3
 8010252:	f7fe f96b 	bl	800e52c <sync_fs>
 8010256:	4603      	mov	r3, r0
 8010258:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	7d1b      	ldrb	r3, [r3, #20]
 801025e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010262:	b2da      	uxtb	r2, r3
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010268:	7dfb      	ldrb	r3, [r7, #23]
}
 801026a:	4618      	mov	r0, r3
 801026c:	3718      	adds	r7, #24
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}

08010272 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010272:	b580      	push	{r7, lr}
 8010274:	b084      	sub	sp, #16
 8010276:	af00      	add	r7, sp, #0
 8010278:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f7ff ff7b 	bl	8010176 <f_sync>
 8010280:	4603      	mov	r3, r0
 8010282:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010284:	7bfb      	ldrb	r3, [r7, #15]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d118      	bne.n	80102bc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f107 0208 	add.w	r2, r7, #8
 8010290:	4611      	mov	r1, r2
 8010292:	4618      	mov	r0, r3
 8010294:	f7ff fbc8 	bl	800fa28 <validate>
 8010298:	4603      	mov	r3, r0
 801029a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801029c:	7bfb      	ldrb	r3, [r7, #15]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d10c      	bne.n	80102bc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	691b      	ldr	r3, [r3, #16]
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7fe f86e 	bl	800e388 <dec_lock>
 80102ac:	4603      	mov	r3, r0
 80102ae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80102b0:	7bfb      	ldrb	r3, [r7, #15]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d102      	bne.n	80102bc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2200      	movs	r2, #0
 80102ba:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80102bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80102be:	4618      	mov	r0, r3
 80102c0:	3710      	adds	r7, #16
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd80      	pop	{r7, pc}

080102c6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80102c6:	b580      	push	{r7, lr}
 80102c8:	b090      	sub	sp, #64	; 0x40
 80102ca:	af00      	add	r7, sp, #0
 80102cc:	6078      	str	r0, [r7, #4]
 80102ce:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	f107 0208 	add.w	r2, r7, #8
 80102d6:	4611      	mov	r1, r2
 80102d8:	4618      	mov	r0, r3
 80102da:	f7ff fba5 	bl	800fa28 <validate>
 80102de:	4603      	mov	r3, r0
 80102e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80102e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d103      	bne.n	80102f4 <f_lseek+0x2e>
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	7d5b      	ldrb	r3, [r3, #21]
 80102f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80102f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d002      	beq.n	8010302 <f_lseek+0x3c>
 80102fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010300:	e201      	b.n	8010706 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010306:	2b00      	cmp	r3, #0
 8010308:	f000 80d9 	beq.w	80104be <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010312:	d15a      	bne.n	80103ca <f_lseek+0x104>
			tbl = fp->cltbl;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010318:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801031a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801031c:	1d1a      	adds	r2, r3, #4
 801031e:	627a      	str	r2, [r7, #36]	; 0x24
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	617b      	str	r3, [r7, #20]
 8010324:	2302      	movs	r3, #2
 8010326:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	689b      	ldr	r3, [r3, #8]
 801032c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801032e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010330:	2b00      	cmp	r3, #0
 8010332:	d03a      	beq.n	80103aa <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010336:	613b      	str	r3, [r7, #16]
 8010338:	2300      	movs	r3, #0
 801033a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801033c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801033e:	3302      	adds	r3, #2
 8010340:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010344:	60fb      	str	r3, [r7, #12]
 8010346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010348:	3301      	adds	r3, #1
 801034a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010350:	4618      	mov	r0, r3
 8010352:	f7fe f97a 	bl	800e64a <get_fat>
 8010356:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801035a:	2b01      	cmp	r3, #1
 801035c:	d804      	bhi.n	8010368 <f_lseek+0xa2>
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	2202      	movs	r2, #2
 8010362:	755a      	strb	r2, [r3, #21]
 8010364:	2302      	movs	r3, #2
 8010366:	e1ce      	b.n	8010706 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801036a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801036e:	d104      	bne.n	801037a <f_lseek+0xb4>
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2201      	movs	r2, #1
 8010374:	755a      	strb	r2, [r3, #21]
 8010376:	2301      	movs	r3, #1
 8010378:	e1c5      	b.n	8010706 <f_lseek+0x440>
					} while (cl == pcl + 1);
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	3301      	adds	r3, #1
 801037e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010380:	429a      	cmp	r2, r3
 8010382:	d0de      	beq.n	8010342 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	429a      	cmp	r2, r3
 801038a:	d809      	bhi.n	80103a0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801038c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801038e:	1d1a      	adds	r2, r3, #4
 8010390:	627a      	str	r2, [r7, #36]	; 0x24
 8010392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010394:	601a      	str	r2, [r3, #0]
 8010396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010398:	1d1a      	adds	r2, r3, #4
 801039a:	627a      	str	r2, [r7, #36]	; 0x24
 801039c:	693a      	ldr	r2, [r7, #16]
 801039e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	699b      	ldr	r3, [r3, #24]
 80103a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d3c4      	bcc.n	8010334 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103b0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80103b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	429a      	cmp	r2, r3
 80103b8:	d803      	bhi.n	80103c2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80103ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103bc:	2200      	movs	r2, #0
 80103be:	601a      	str	r2, [r3, #0]
 80103c0:	e19f      	b.n	8010702 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80103c2:	2311      	movs	r3, #17
 80103c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80103c8:	e19b      	b.n	8010702 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	68db      	ldr	r3, [r3, #12]
 80103ce:	683a      	ldr	r2, [r7, #0]
 80103d0:	429a      	cmp	r2, r3
 80103d2:	d902      	bls.n	80103da <f_lseek+0x114>
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	68db      	ldr	r3, [r3, #12]
 80103d8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	683a      	ldr	r2, [r7, #0]
 80103de:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	f000 818d 	beq.w	8010702 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	3b01      	subs	r3, #1
 80103ec:	4619      	mov	r1, r3
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f7fe fc18 	bl	800ec24 <clmt_clust>
 80103f4:	4602      	mov	r2, r0
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80103fa:	68ba      	ldr	r2, [r7, #8]
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	69db      	ldr	r3, [r3, #28]
 8010400:	4619      	mov	r1, r3
 8010402:	4610      	mov	r0, r2
 8010404:	f7fe f902 	bl	800e60c <clust2sect>
 8010408:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801040a:	69bb      	ldr	r3, [r7, #24]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d104      	bne.n	801041a <f_lseek+0x154>
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	2202      	movs	r2, #2
 8010414:	755a      	strb	r2, [r3, #21]
 8010416:	2302      	movs	r3, #2
 8010418:	e175      	b.n	8010706 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	3b01      	subs	r3, #1
 801041e:	68ba      	ldr	r2, [r7, #8]
 8010420:	8992      	ldrh	r2, [r2, #12]
 8010422:	fbb3 f3f2 	udiv	r3, r3, r2
 8010426:	68ba      	ldr	r2, [r7, #8]
 8010428:	8952      	ldrh	r2, [r2, #10]
 801042a:	3a01      	subs	r2, #1
 801042c:	4013      	ands	r3, r2
 801042e:	69ba      	ldr	r2, [r7, #24]
 8010430:	4413      	add	r3, r2
 8010432:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	699b      	ldr	r3, [r3, #24]
 8010438:	68ba      	ldr	r2, [r7, #8]
 801043a:	8992      	ldrh	r2, [r2, #12]
 801043c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010440:	fb02 f201 	mul.w	r2, r2, r1
 8010444:	1a9b      	subs	r3, r3, r2
 8010446:	2b00      	cmp	r3, #0
 8010448:	f000 815b 	beq.w	8010702 <f_lseek+0x43c>
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	6a1b      	ldr	r3, [r3, #32]
 8010450:	69ba      	ldr	r2, [r7, #24]
 8010452:	429a      	cmp	r2, r3
 8010454:	f000 8155 	beq.w	8010702 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	7d1b      	ldrb	r3, [r3, #20]
 801045c:	b25b      	sxtb	r3, r3
 801045e:	2b00      	cmp	r3, #0
 8010460:	da18      	bge.n	8010494 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010462:	68bb      	ldr	r3, [r7, #8]
 8010464:	7858      	ldrb	r0, [r3, #1]
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	6a1a      	ldr	r2, [r3, #32]
 8010470:	2301      	movs	r3, #1
 8010472:	f7fd fd3f 	bl	800def4 <disk_write>
 8010476:	4603      	mov	r3, r0
 8010478:	2b00      	cmp	r3, #0
 801047a:	d004      	beq.n	8010486 <f_lseek+0x1c0>
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2201      	movs	r2, #1
 8010480:	755a      	strb	r2, [r3, #21]
 8010482:	2301      	movs	r3, #1
 8010484:	e13f      	b.n	8010706 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	7d1b      	ldrb	r3, [r3, #20]
 801048a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801048e:	b2da      	uxtb	r2, r3
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	7858      	ldrb	r0, [r3, #1]
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801049e:	2301      	movs	r3, #1
 80104a0:	69ba      	ldr	r2, [r7, #24]
 80104a2:	f7fd fd07 	bl	800deb4 <disk_read>
 80104a6:	4603      	mov	r3, r0
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d004      	beq.n	80104b6 <f_lseek+0x1f0>
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2201      	movs	r2, #1
 80104b0:	755a      	strb	r2, [r3, #21]
 80104b2:	2301      	movs	r3, #1
 80104b4:	e127      	b.n	8010706 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	69ba      	ldr	r2, [r7, #24]
 80104ba:	621a      	str	r2, [r3, #32]
 80104bc:	e121      	b.n	8010702 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	68db      	ldr	r3, [r3, #12]
 80104c2:	683a      	ldr	r2, [r7, #0]
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d908      	bls.n	80104da <f_lseek+0x214>
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	7d1b      	ldrb	r3, [r3, #20]
 80104cc:	f003 0302 	and.w	r3, r3, #2
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d102      	bne.n	80104da <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	68db      	ldr	r3, [r3, #12]
 80104d8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	699b      	ldr	r3, [r3, #24]
 80104de:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80104e0:	2300      	movs	r3, #0
 80104e2:	637b      	str	r3, [r7, #52]	; 0x34
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104e8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	f000 80b5 	beq.w	801065c <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80104f2:	68bb      	ldr	r3, [r7, #8]
 80104f4:	895b      	ldrh	r3, [r3, #10]
 80104f6:	461a      	mov	r2, r3
 80104f8:	68bb      	ldr	r3, [r7, #8]
 80104fa:	899b      	ldrh	r3, [r3, #12]
 80104fc:	fb03 f302 	mul.w	r3, r3, r2
 8010500:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010502:	6a3b      	ldr	r3, [r7, #32]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d01b      	beq.n	8010540 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	1e5a      	subs	r2, r3, #1
 801050c:	69fb      	ldr	r3, [r7, #28]
 801050e:	fbb2 f2f3 	udiv	r2, r2, r3
 8010512:	6a3b      	ldr	r3, [r7, #32]
 8010514:	1e59      	subs	r1, r3, #1
 8010516:	69fb      	ldr	r3, [r7, #28]
 8010518:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801051c:	429a      	cmp	r2, r3
 801051e:	d30f      	bcc.n	8010540 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010520:	6a3b      	ldr	r3, [r7, #32]
 8010522:	1e5a      	subs	r2, r3, #1
 8010524:	69fb      	ldr	r3, [r7, #28]
 8010526:	425b      	negs	r3, r3
 8010528:	401a      	ands	r2, r3
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	699b      	ldr	r3, [r3, #24]
 8010532:	683a      	ldr	r2, [r7, #0]
 8010534:	1ad3      	subs	r3, r2, r3
 8010536:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	69db      	ldr	r3, [r3, #28]
 801053c:	63bb      	str	r3, [r7, #56]	; 0x38
 801053e:	e022      	b.n	8010586 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	689b      	ldr	r3, [r3, #8]
 8010544:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010548:	2b00      	cmp	r3, #0
 801054a:	d119      	bne.n	8010580 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2100      	movs	r1, #0
 8010550:	4618      	mov	r0, r3
 8010552:	f7fe facf 	bl	800eaf4 <create_chain>
 8010556:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801055a:	2b01      	cmp	r3, #1
 801055c:	d104      	bne.n	8010568 <f_lseek+0x2a2>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2202      	movs	r2, #2
 8010562:	755a      	strb	r2, [r3, #21]
 8010564:	2302      	movs	r3, #2
 8010566:	e0ce      	b.n	8010706 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801056a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801056e:	d104      	bne.n	801057a <f_lseek+0x2b4>
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2201      	movs	r2, #1
 8010574:	755a      	strb	r2, [r3, #21]
 8010576:	2301      	movs	r3, #1
 8010578:	e0c5      	b.n	8010706 <f_lseek+0x440>
					fp->obj.sclust = clst;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801057e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010584:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010588:	2b00      	cmp	r3, #0
 801058a:	d067      	beq.n	801065c <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 801058c:	e03a      	b.n	8010604 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 801058e:	683a      	ldr	r2, [r7, #0]
 8010590:	69fb      	ldr	r3, [r7, #28]
 8010592:	1ad3      	subs	r3, r2, r3
 8010594:	603b      	str	r3, [r7, #0]
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	699a      	ldr	r2, [r3, #24]
 801059a:	69fb      	ldr	r3, [r7, #28]
 801059c:	441a      	add	r2, r3
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	7d1b      	ldrb	r3, [r3, #20]
 80105a6:	f003 0302 	and.w	r3, r3, #2
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d00b      	beq.n	80105c6 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80105b2:	4618      	mov	r0, r3
 80105b4:	f7fe fa9e 	bl	800eaf4 <create_chain>
 80105b8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80105ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d108      	bne.n	80105d2 <f_lseek+0x30c>
							ofs = 0; break;
 80105c0:	2300      	movs	r3, #0
 80105c2:	603b      	str	r3, [r7, #0]
 80105c4:	e022      	b.n	801060c <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80105ca:	4618      	mov	r0, r3
 80105cc:	f7fe f83d 	bl	800e64a <get_fat>
 80105d0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80105d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105d8:	d104      	bne.n	80105e4 <f_lseek+0x31e>
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2201      	movs	r2, #1
 80105de:	755a      	strb	r2, [r3, #21]
 80105e0:	2301      	movs	r3, #1
 80105e2:	e090      	b.n	8010706 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80105e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e6:	2b01      	cmp	r3, #1
 80105e8:	d904      	bls.n	80105f4 <f_lseek+0x32e>
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	699b      	ldr	r3, [r3, #24]
 80105ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d304      	bcc.n	80105fe <f_lseek+0x338>
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2202      	movs	r2, #2
 80105f8:	755a      	strb	r2, [r3, #21]
 80105fa:	2302      	movs	r3, #2
 80105fc:	e083      	b.n	8010706 <f_lseek+0x440>
					fp->clust = clst;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010602:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010604:	683a      	ldr	r2, [r7, #0]
 8010606:	69fb      	ldr	r3, [r7, #28]
 8010608:	429a      	cmp	r2, r3
 801060a:	d8c0      	bhi.n	801058e <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	699a      	ldr	r2, [r3, #24]
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	441a      	add	r2, r3
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	899b      	ldrh	r3, [r3, #12]
 801061c:	461a      	mov	r2, r3
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	fbb3 f1f2 	udiv	r1, r3, r2
 8010624:	fb02 f201 	mul.w	r2, r2, r1
 8010628:	1a9b      	subs	r3, r3, r2
 801062a:	2b00      	cmp	r3, #0
 801062c:	d016      	beq.n	801065c <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010632:	4618      	mov	r0, r3
 8010634:	f7fd ffea 	bl	800e60c <clust2sect>
 8010638:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801063a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801063c:	2b00      	cmp	r3, #0
 801063e:	d104      	bne.n	801064a <f_lseek+0x384>
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2202      	movs	r2, #2
 8010644:	755a      	strb	r2, [r3, #21]
 8010646:	2302      	movs	r3, #2
 8010648:	e05d      	b.n	8010706 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	899b      	ldrh	r3, [r3, #12]
 801064e:	461a      	mov	r2, r3
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	fbb3 f3f2 	udiv	r3, r3, r2
 8010656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010658:	4413      	add	r3, r2
 801065a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	699a      	ldr	r2, [r3, #24]
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	68db      	ldr	r3, [r3, #12]
 8010664:	429a      	cmp	r2, r3
 8010666:	d90a      	bls.n	801067e <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	699a      	ldr	r2, [r3, #24]
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	7d1b      	ldrb	r3, [r3, #20]
 8010674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010678:	b2da      	uxtb	r2, r3
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	699b      	ldr	r3, [r3, #24]
 8010682:	68ba      	ldr	r2, [r7, #8]
 8010684:	8992      	ldrh	r2, [r2, #12]
 8010686:	fbb3 f1f2 	udiv	r1, r3, r2
 801068a:	fb02 f201 	mul.w	r2, r2, r1
 801068e:	1a9b      	subs	r3, r3, r2
 8010690:	2b00      	cmp	r3, #0
 8010692:	d036      	beq.n	8010702 <f_lseek+0x43c>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	6a1b      	ldr	r3, [r3, #32]
 8010698:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801069a:	429a      	cmp	r2, r3
 801069c:	d031      	beq.n	8010702 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	7d1b      	ldrb	r3, [r3, #20]
 80106a2:	b25b      	sxtb	r3, r3
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	da18      	bge.n	80106da <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	7858      	ldrb	r0, [r3, #1]
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	6a1a      	ldr	r2, [r3, #32]
 80106b6:	2301      	movs	r3, #1
 80106b8:	f7fd fc1c 	bl	800def4 <disk_write>
 80106bc:	4603      	mov	r3, r0
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d004      	beq.n	80106cc <f_lseek+0x406>
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2201      	movs	r2, #1
 80106c6:	755a      	strb	r2, [r3, #21]
 80106c8:	2301      	movs	r3, #1
 80106ca:	e01c      	b.n	8010706 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	7d1b      	ldrb	r3, [r3, #20]
 80106d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80106d4:	b2da      	uxtb	r2, r3
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	7858      	ldrb	r0, [r3, #1]
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80106e4:	2301      	movs	r3, #1
 80106e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80106e8:	f7fd fbe4 	bl	800deb4 <disk_read>
 80106ec:	4603      	mov	r3, r0
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d004      	beq.n	80106fc <f_lseek+0x436>
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	2201      	movs	r2, #1
 80106f6:	755a      	strb	r2, [r3, #21]
 80106f8:	2301      	movs	r3, #1
 80106fa:	e004      	b.n	8010706 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010700:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010702:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010706:	4618      	mov	r0, r3
 8010708:	3740      	adds	r7, #64	; 0x40
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}
	...

08010710 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010710:	b480      	push	{r7}
 8010712:	b087      	sub	sp, #28
 8010714:	af00      	add	r7, sp, #0
 8010716:	60f8      	str	r0, [r7, #12]
 8010718:	60b9      	str	r1, [r7, #8]
 801071a:	4613      	mov	r3, r2
 801071c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801071e:	2301      	movs	r3, #1
 8010720:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010722:	2300      	movs	r3, #0
 8010724:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010726:	4b1f      	ldr	r3, [pc, #124]	; (80107a4 <FATFS_LinkDriverEx+0x94>)
 8010728:	7a5b      	ldrb	r3, [r3, #9]
 801072a:	b2db      	uxtb	r3, r3
 801072c:	2b00      	cmp	r3, #0
 801072e:	d131      	bne.n	8010794 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010730:	4b1c      	ldr	r3, [pc, #112]	; (80107a4 <FATFS_LinkDriverEx+0x94>)
 8010732:	7a5b      	ldrb	r3, [r3, #9]
 8010734:	b2db      	uxtb	r3, r3
 8010736:	461a      	mov	r2, r3
 8010738:	4b1a      	ldr	r3, [pc, #104]	; (80107a4 <FATFS_LinkDriverEx+0x94>)
 801073a:	2100      	movs	r1, #0
 801073c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801073e:	4b19      	ldr	r3, [pc, #100]	; (80107a4 <FATFS_LinkDriverEx+0x94>)
 8010740:	7a5b      	ldrb	r3, [r3, #9]
 8010742:	b2db      	uxtb	r3, r3
 8010744:	4a17      	ldr	r2, [pc, #92]	; (80107a4 <FATFS_LinkDriverEx+0x94>)
 8010746:	009b      	lsls	r3, r3, #2
 8010748:	4413      	add	r3, r2
 801074a:	68fa      	ldr	r2, [r7, #12]
 801074c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801074e:	4b15      	ldr	r3, [pc, #84]	; (80107a4 <FATFS_LinkDriverEx+0x94>)
 8010750:	7a5b      	ldrb	r3, [r3, #9]
 8010752:	b2db      	uxtb	r3, r3
 8010754:	461a      	mov	r2, r3
 8010756:	4b13      	ldr	r3, [pc, #76]	; (80107a4 <FATFS_LinkDriverEx+0x94>)
 8010758:	4413      	add	r3, r2
 801075a:	79fa      	ldrb	r2, [r7, #7]
 801075c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801075e:	4b11      	ldr	r3, [pc, #68]	; (80107a4 <FATFS_LinkDriverEx+0x94>)
 8010760:	7a5b      	ldrb	r3, [r3, #9]
 8010762:	b2db      	uxtb	r3, r3
 8010764:	1c5a      	adds	r2, r3, #1
 8010766:	b2d1      	uxtb	r1, r2
 8010768:	4a0e      	ldr	r2, [pc, #56]	; (80107a4 <FATFS_LinkDriverEx+0x94>)
 801076a:	7251      	strb	r1, [r2, #9]
 801076c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801076e:	7dbb      	ldrb	r3, [r7, #22]
 8010770:	3330      	adds	r3, #48	; 0x30
 8010772:	b2da      	uxtb	r2, r3
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	3301      	adds	r3, #1
 801077c:	223a      	movs	r2, #58	; 0x3a
 801077e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	3302      	adds	r3, #2
 8010784:	222f      	movs	r2, #47	; 0x2f
 8010786:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	3303      	adds	r3, #3
 801078c:	2200      	movs	r2, #0
 801078e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010790:	2300      	movs	r3, #0
 8010792:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010794:	7dfb      	ldrb	r3, [r7, #23]
}
 8010796:	4618      	mov	r0, r3
 8010798:	371c      	adds	r7, #28
 801079a:	46bd      	mov	sp, r7
 801079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a0:	4770      	bx	lr
 80107a2:	bf00      	nop
 80107a4:	2000313c 	.word	0x2000313c

080107a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b082      	sub	sp, #8
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80107b2:	2200      	movs	r2, #0
 80107b4:	6839      	ldr	r1, [r7, #0]
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f7ff ffaa 	bl	8010710 <FATFS_LinkDriverEx>
 80107bc:	4603      	mov	r3, r0
}
 80107be:	4618      	mov	r0, r3
 80107c0:	3708      	adds	r7, #8
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bd80      	pop	{r7, pc}

080107c6 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80107c6:	b480      	push	{r7}
 80107c8:	b083      	sub	sp, #12
 80107ca:	af00      	add	r7, sp, #0
 80107cc:	4603      	mov	r3, r0
 80107ce:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80107d0:	88fb      	ldrh	r3, [r7, #6]
 80107d2:	021b      	lsls	r3, r3, #8
 80107d4:	b21a      	sxth	r2, r3
 80107d6:	88fb      	ldrh	r3, [r7, #6]
 80107d8:	0a1b      	lsrs	r3, r3, #8
 80107da:	b29b      	uxth	r3, r3
 80107dc:	b21b      	sxth	r3, r3
 80107de:	4313      	orrs	r3, r2
 80107e0:	b21b      	sxth	r3, r3
 80107e2:	b29b      	uxth	r3, r3
}
 80107e4:	4618      	mov	r0, r3
 80107e6:	370c      	adds	r7, #12
 80107e8:	46bd      	mov	sp, r7
 80107ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ee:	4770      	bx	lr

080107f0 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80107f0:	b480      	push	{r7}
 80107f2:	b083      	sub	sp, #12
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	061a      	lsls	r2, r3, #24
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	021b      	lsls	r3, r3, #8
 8010800:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010804:	431a      	orrs	r2, r3
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	0a1b      	lsrs	r3, r3, #8
 801080a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801080e:	431a      	orrs	r2, r3
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	0e1b      	lsrs	r3, r3, #24
 8010814:	4313      	orrs	r3, r2
}
 8010816:	4618      	mov	r0, r3
 8010818:	370c      	adds	r7, #12
 801081a:	46bd      	mov	sp, r7
 801081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010820:	4770      	bx	lr

08010822 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010822:	b580      	push	{r7, lr}
 8010824:	b082      	sub	sp, #8
 8010826:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010828:	2300      	movs	r3, #0
 801082a:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 801082c:	f000 f8d4 	bl	80109d8 <mem_init>
  memp_init();
 8010830:	f000 fbda 	bl	8010fe8 <memp_init>
  pbuf_init();
  netif_init();
 8010834:	f000 fc92 	bl	801115c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8010838:	f006 ffa8 	bl	801778c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801083c:	f001 fd04 	bl	8012248 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010840:	f006 ff1a 	bl	8017678 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010844:	bf00      	nop
 8010846:	3708      	adds	r7, #8
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}

0801084c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801084c:	b480      	push	{r7}
 801084e:	b083      	sub	sp, #12
 8010850:	af00      	add	r7, sp, #0
 8010852:	4603      	mov	r3, r0
 8010854:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8010856:	4b05      	ldr	r3, [pc, #20]	; (801086c <ptr_to_mem+0x20>)
 8010858:	681a      	ldr	r2, [r3, #0]
 801085a:	88fb      	ldrh	r3, [r7, #6]
 801085c:	4413      	add	r3, r2
}
 801085e:	4618      	mov	r0, r3
 8010860:	370c      	adds	r7, #12
 8010862:	46bd      	mov	sp, r7
 8010864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010868:	4770      	bx	lr
 801086a:	bf00      	nop
 801086c:	20003148 	.word	0x20003148

08010870 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010870:	b480      	push	{r7}
 8010872:	b083      	sub	sp, #12
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8010878:	4b05      	ldr	r3, [pc, #20]	; (8010890 <mem_to_ptr+0x20>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	687a      	ldr	r2, [r7, #4]
 801087e:	1ad3      	subs	r3, r2, r3
 8010880:	b29b      	uxth	r3, r3
}
 8010882:	4618      	mov	r0, r3
 8010884:	370c      	adds	r7, #12
 8010886:	46bd      	mov	sp, r7
 8010888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088c:	4770      	bx	lr
 801088e:	bf00      	nop
 8010890:	20003148 	.word	0x20003148

08010894 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8010894:	b590      	push	{r4, r7, lr}
 8010896:	b085      	sub	sp, #20
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801089c:	4b45      	ldr	r3, [pc, #276]	; (80109b4 <plug_holes+0x120>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	687a      	ldr	r2, [r7, #4]
 80108a2:	429a      	cmp	r2, r3
 80108a4:	d206      	bcs.n	80108b4 <plug_holes+0x20>
 80108a6:	4b44      	ldr	r3, [pc, #272]	; (80109b8 <plug_holes+0x124>)
 80108a8:	f240 12df 	movw	r2, #479	; 0x1df
 80108ac:	4943      	ldr	r1, [pc, #268]	; (80109bc <plug_holes+0x128>)
 80108ae:	4844      	ldr	r0, [pc, #272]	; (80109c0 <plug_holes+0x12c>)
 80108b0:	f009 fffa 	bl	801a8a8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80108b4:	4b43      	ldr	r3, [pc, #268]	; (80109c4 <plug_holes+0x130>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	687a      	ldr	r2, [r7, #4]
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d306      	bcc.n	80108cc <plug_holes+0x38>
 80108be:	4b3e      	ldr	r3, [pc, #248]	; (80109b8 <plug_holes+0x124>)
 80108c0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80108c4:	4940      	ldr	r1, [pc, #256]	; (80109c8 <plug_holes+0x134>)
 80108c6:	483e      	ldr	r0, [pc, #248]	; (80109c0 <plug_holes+0x12c>)
 80108c8:	f009 ffee 	bl	801a8a8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	791b      	ldrb	r3, [r3, #4]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d006      	beq.n	80108e2 <plug_holes+0x4e>
 80108d4:	4b38      	ldr	r3, [pc, #224]	; (80109b8 <plug_holes+0x124>)
 80108d6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80108da:	493c      	ldr	r1, [pc, #240]	; (80109cc <plug_holes+0x138>)
 80108dc:	4838      	ldr	r0, [pc, #224]	; (80109c0 <plug_holes+0x12c>)
 80108de:	f009 ffe3 	bl	801a8a8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	881b      	ldrh	r3, [r3, #0]
 80108e6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80108ea:	d906      	bls.n	80108fa <plug_holes+0x66>
 80108ec:	4b32      	ldr	r3, [pc, #200]	; (80109b8 <plug_holes+0x124>)
 80108ee:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80108f2:	4937      	ldr	r1, [pc, #220]	; (80109d0 <plug_holes+0x13c>)
 80108f4:	4832      	ldr	r0, [pc, #200]	; (80109c0 <plug_holes+0x12c>)
 80108f6:	f009 ffd7 	bl	801a8a8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	881b      	ldrh	r3, [r3, #0]
 80108fe:	4618      	mov	r0, r3
 8010900:	f7ff ffa4 	bl	801084c <ptr_to_mem>
 8010904:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8010906:	687a      	ldr	r2, [r7, #4]
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	429a      	cmp	r2, r3
 801090c:	d024      	beq.n	8010958 <plug_holes+0xc4>
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	791b      	ldrb	r3, [r3, #4]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d120      	bne.n	8010958 <plug_holes+0xc4>
 8010916:	4b2b      	ldr	r3, [pc, #172]	; (80109c4 <plug_holes+0x130>)
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	68fa      	ldr	r2, [r7, #12]
 801091c:	429a      	cmp	r2, r3
 801091e:	d01b      	beq.n	8010958 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010920:	4b2c      	ldr	r3, [pc, #176]	; (80109d4 <plug_holes+0x140>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	68fa      	ldr	r2, [r7, #12]
 8010926:	429a      	cmp	r2, r3
 8010928:	d102      	bne.n	8010930 <plug_holes+0x9c>
      lfree = mem;
 801092a:	4a2a      	ldr	r2, [pc, #168]	; (80109d4 <plug_holes+0x140>)
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	881a      	ldrh	r2, [r3, #0]
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	881b      	ldrh	r3, [r3, #0]
 801093c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010940:	d00a      	beq.n	8010958 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	881b      	ldrh	r3, [r3, #0]
 8010946:	4618      	mov	r0, r3
 8010948:	f7ff ff80 	bl	801084c <ptr_to_mem>
 801094c:	4604      	mov	r4, r0
 801094e:	6878      	ldr	r0, [r7, #4]
 8010950:	f7ff ff8e 	bl	8010870 <mem_to_ptr>
 8010954:	4603      	mov	r3, r0
 8010956:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	885b      	ldrh	r3, [r3, #2]
 801095c:	4618      	mov	r0, r3
 801095e:	f7ff ff75 	bl	801084c <ptr_to_mem>
 8010962:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010964:	68ba      	ldr	r2, [r7, #8]
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	429a      	cmp	r2, r3
 801096a:	d01f      	beq.n	80109ac <plug_holes+0x118>
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	791b      	ldrb	r3, [r3, #4]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d11b      	bne.n	80109ac <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010974:	4b17      	ldr	r3, [pc, #92]	; (80109d4 <plug_holes+0x140>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	687a      	ldr	r2, [r7, #4]
 801097a:	429a      	cmp	r2, r3
 801097c:	d102      	bne.n	8010984 <plug_holes+0xf0>
      lfree = pmem;
 801097e:	4a15      	ldr	r2, [pc, #84]	; (80109d4 <plug_holes+0x140>)
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	881a      	ldrh	r2, [r3, #0]
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	881b      	ldrh	r3, [r3, #0]
 8010990:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010994:	d00a      	beq.n	80109ac <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	881b      	ldrh	r3, [r3, #0]
 801099a:	4618      	mov	r0, r3
 801099c:	f7ff ff56 	bl	801084c <ptr_to_mem>
 80109a0:	4604      	mov	r4, r0
 80109a2:	68b8      	ldr	r0, [r7, #8]
 80109a4:	f7ff ff64 	bl	8010870 <mem_to_ptr>
 80109a8:	4603      	mov	r3, r0
 80109aa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80109ac:	bf00      	nop
 80109ae:	3714      	adds	r7, #20
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd90      	pop	{r4, r7, pc}
 80109b4:	20003148 	.word	0x20003148
 80109b8:	0801bf40 	.word	0x0801bf40
 80109bc:	0801bf70 	.word	0x0801bf70
 80109c0:	0801bf88 	.word	0x0801bf88
 80109c4:	2000314c 	.word	0x2000314c
 80109c8:	0801bfb0 	.word	0x0801bfb0
 80109cc:	0801bfcc 	.word	0x0801bfcc
 80109d0:	0801bfe8 	.word	0x0801bfe8
 80109d4:	20003150 	.word	0x20003150

080109d8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b082      	sub	sp, #8
 80109dc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80109de:	4b18      	ldr	r3, [pc, #96]	; (8010a40 <mem_init+0x68>)
 80109e0:	3303      	adds	r3, #3
 80109e2:	f023 0303 	bic.w	r3, r3, #3
 80109e6:	461a      	mov	r2, r3
 80109e8:	4b16      	ldr	r3, [pc, #88]	; (8010a44 <mem_init+0x6c>)
 80109ea:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80109ec:	4b15      	ldr	r3, [pc, #84]	; (8010a44 <mem_init+0x6c>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80109f8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	2200      	movs	r2, #0
 80109fe:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2200      	movs	r2, #0
 8010a04:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010a06:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8010a0a:	f7ff ff1f 	bl	801084c <ptr_to_mem>
 8010a0e:	4603      	mov	r3, r0
 8010a10:	4a0d      	ldr	r2, [pc, #52]	; (8010a48 <mem_init+0x70>)
 8010a12:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010a14:	4b0c      	ldr	r3, [pc, #48]	; (8010a48 <mem_init+0x70>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	2201      	movs	r2, #1
 8010a1a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010a1c:	4b0a      	ldr	r3, [pc, #40]	; (8010a48 <mem_init+0x70>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010a24:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010a26:	4b08      	ldr	r3, [pc, #32]	; (8010a48 <mem_init+0x70>)
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010a2e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010a30:	4b04      	ldr	r3, [pc, #16]	; (8010a44 <mem_init+0x6c>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	4a05      	ldr	r2, [pc, #20]	; (8010a4c <mem_init+0x74>)
 8010a36:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8010a38:	bf00      	nop
 8010a3a:	3708      	adds	r7, #8
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	bd80      	pop	{r7, pc}
 8010a40:	2000a754 	.word	0x2000a754
 8010a44:	20003148 	.word	0x20003148
 8010a48:	2000314c 	.word	0x2000314c
 8010a4c:	20003150 	.word	0x20003150

08010a50 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b086      	sub	sp, #24
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010a58:	6878      	ldr	r0, [r7, #4]
 8010a5a:	f7ff ff09 	bl	8010870 <mem_to_ptr>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	881b      	ldrh	r3, [r3, #0]
 8010a66:	4618      	mov	r0, r3
 8010a68:	f7ff fef0 	bl	801084c <ptr_to_mem>
 8010a6c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	885b      	ldrh	r3, [r3, #2]
 8010a72:	4618      	mov	r0, r3
 8010a74:	f7ff feea 	bl	801084c <ptr_to_mem>
 8010a78:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	881b      	ldrh	r3, [r3, #0]
 8010a7e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010a82:	d818      	bhi.n	8010ab6 <mem_link_valid+0x66>
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	885b      	ldrh	r3, [r3, #2]
 8010a88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010a8c:	d813      	bhi.n	8010ab6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010a92:	8afa      	ldrh	r2, [r7, #22]
 8010a94:	429a      	cmp	r2, r3
 8010a96:	d004      	beq.n	8010aa2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	881b      	ldrh	r3, [r3, #0]
 8010a9c:	8afa      	ldrh	r2, [r7, #22]
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	d109      	bne.n	8010ab6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010aa2:	4b08      	ldr	r3, [pc, #32]	; (8010ac4 <mem_link_valid+0x74>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010aa6:	693a      	ldr	r2, [r7, #16]
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	d006      	beq.n	8010aba <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010aac:	693b      	ldr	r3, [r7, #16]
 8010aae:	885b      	ldrh	r3, [r3, #2]
 8010ab0:	8afa      	ldrh	r2, [r7, #22]
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	d001      	beq.n	8010aba <mem_link_valid+0x6a>
    return 0;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	e000      	b.n	8010abc <mem_link_valid+0x6c>
  }
  return 1;
 8010aba:	2301      	movs	r3, #1
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	3718      	adds	r7, #24
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}
 8010ac4:	2000314c 	.word	0x2000314c

08010ac8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b084      	sub	sp, #16
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d04c      	beq.n	8010b70 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f003 0303 	and.w	r3, r3, #3
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d007      	beq.n	8010af0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8010ae0:	4b25      	ldr	r3, [pc, #148]	; (8010b78 <mem_free+0xb0>)
 8010ae2:	f240 2273 	movw	r2, #627	; 0x273
 8010ae6:	4925      	ldr	r1, [pc, #148]	; (8010b7c <mem_free+0xb4>)
 8010ae8:	4825      	ldr	r0, [pc, #148]	; (8010b80 <mem_free+0xb8>)
 8010aea:	f009 fedd 	bl	801a8a8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8010aee:	e040      	b.n	8010b72 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	3b08      	subs	r3, #8
 8010af4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8010af6:	4b23      	ldr	r3, [pc, #140]	; (8010b84 <mem_free+0xbc>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	68fa      	ldr	r2, [r7, #12]
 8010afc:	429a      	cmp	r2, r3
 8010afe:	d306      	bcc.n	8010b0e <mem_free+0x46>
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f103 020c 	add.w	r2, r3, #12
 8010b06:	4b20      	ldr	r3, [pc, #128]	; (8010b88 <mem_free+0xc0>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d907      	bls.n	8010b1e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8010b0e:	4b1a      	ldr	r3, [pc, #104]	; (8010b78 <mem_free+0xb0>)
 8010b10:	f240 227f 	movw	r2, #639	; 0x27f
 8010b14:	491d      	ldr	r1, [pc, #116]	; (8010b8c <mem_free+0xc4>)
 8010b16:	481a      	ldr	r0, [pc, #104]	; (8010b80 <mem_free+0xb8>)
 8010b18:	f009 fec6 	bl	801a8a8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8010b1c:	e029      	b.n	8010b72 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	791b      	ldrb	r3, [r3, #4]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d107      	bne.n	8010b36 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8010b26:	4b14      	ldr	r3, [pc, #80]	; (8010b78 <mem_free+0xb0>)
 8010b28:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8010b2c:	4918      	ldr	r1, [pc, #96]	; (8010b90 <mem_free+0xc8>)
 8010b2e:	4814      	ldr	r0, [pc, #80]	; (8010b80 <mem_free+0xb8>)
 8010b30:	f009 feba 	bl	801a8a8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8010b34:	e01d      	b.n	8010b72 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8010b36:	68f8      	ldr	r0, [r7, #12]
 8010b38:	f7ff ff8a 	bl	8010a50 <mem_link_valid>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d107      	bne.n	8010b52 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8010b42:	4b0d      	ldr	r3, [pc, #52]	; (8010b78 <mem_free+0xb0>)
 8010b44:	f240 2295 	movw	r2, #661	; 0x295
 8010b48:	4912      	ldr	r1, [pc, #72]	; (8010b94 <mem_free+0xcc>)
 8010b4a:	480d      	ldr	r0, [pc, #52]	; (8010b80 <mem_free+0xb8>)
 8010b4c:	f009 feac 	bl	801a8a8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8010b50:	e00f      	b.n	8010b72 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	2200      	movs	r2, #0
 8010b56:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8010b58:	4b0f      	ldr	r3, [pc, #60]	; (8010b98 <mem_free+0xd0>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	68fa      	ldr	r2, [r7, #12]
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	d202      	bcs.n	8010b68 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8010b62:	4a0d      	ldr	r2, [pc, #52]	; (8010b98 <mem_free+0xd0>)
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8010b68:	68f8      	ldr	r0, [r7, #12]
 8010b6a:	f7ff fe93 	bl	8010894 <plug_holes>
 8010b6e:	e000      	b.n	8010b72 <mem_free+0xaa>
    return;
 8010b70:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8010b72:	3710      	adds	r7, #16
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}
 8010b78:	0801bf40 	.word	0x0801bf40
 8010b7c:	0801c014 	.word	0x0801c014
 8010b80:	0801bf88 	.word	0x0801bf88
 8010b84:	20003148 	.word	0x20003148
 8010b88:	2000314c 	.word	0x2000314c
 8010b8c:	0801c038 	.word	0x0801c038
 8010b90:	0801c054 	.word	0x0801c054
 8010b94:	0801c07c 	.word	0x0801c07c
 8010b98:	20003150 	.word	0x20003150

08010b9c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b088      	sub	sp, #32
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	460b      	mov	r3, r1
 8010ba6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8010ba8:	887b      	ldrh	r3, [r7, #2]
 8010baa:	3303      	adds	r3, #3
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	f023 0303 	bic.w	r3, r3, #3
 8010bb2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8010bb4:	8bfb      	ldrh	r3, [r7, #30]
 8010bb6:	2b0b      	cmp	r3, #11
 8010bb8:	d801      	bhi.n	8010bbe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8010bba:	230c      	movs	r3, #12
 8010bbc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8010bbe:	8bfb      	ldrh	r3, [r7, #30]
 8010bc0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010bc4:	d803      	bhi.n	8010bce <mem_trim+0x32>
 8010bc6:	8bfa      	ldrh	r2, [r7, #30]
 8010bc8:	887b      	ldrh	r3, [r7, #2]
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	d201      	bcs.n	8010bd2 <mem_trim+0x36>
    return NULL;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	e0cc      	b.n	8010d6c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8010bd2:	4b68      	ldr	r3, [pc, #416]	; (8010d74 <mem_trim+0x1d8>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	687a      	ldr	r2, [r7, #4]
 8010bd8:	429a      	cmp	r2, r3
 8010bda:	d304      	bcc.n	8010be6 <mem_trim+0x4a>
 8010bdc:	4b66      	ldr	r3, [pc, #408]	; (8010d78 <mem_trim+0x1dc>)
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	687a      	ldr	r2, [r7, #4]
 8010be2:	429a      	cmp	r2, r3
 8010be4:	d306      	bcc.n	8010bf4 <mem_trim+0x58>
 8010be6:	4b65      	ldr	r3, [pc, #404]	; (8010d7c <mem_trim+0x1e0>)
 8010be8:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010bec:	4964      	ldr	r1, [pc, #400]	; (8010d80 <mem_trim+0x1e4>)
 8010bee:	4865      	ldr	r0, [pc, #404]	; (8010d84 <mem_trim+0x1e8>)
 8010bf0:	f009 fe5a 	bl	801a8a8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010bf4:	4b5f      	ldr	r3, [pc, #380]	; (8010d74 <mem_trim+0x1d8>)
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	687a      	ldr	r2, [r7, #4]
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d304      	bcc.n	8010c08 <mem_trim+0x6c>
 8010bfe:	4b5e      	ldr	r3, [pc, #376]	; (8010d78 <mem_trim+0x1dc>)
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	687a      	ldr	r2, [r7, #4]
 8010c04:	429a      	cmp	r2, r3
 8010c06:	d301      	bcc.n	8010c0c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	e0af      	b.n	8010d6c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	3b08      	subs	r3, #8
 8010c10:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8010c12:	69b8      	ldr	r0, [r7, #24]
 8010c14:	f7ff fe2c 	bl	8010870 <mem_to_ptr>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8010c1c:	69bb      	ldr	r3, [r7, #24]
 8010c1e:	881a      	ldrh	r2, [r3, #0]
 8010c20:	8afb      	ldrh	r3, [r7, #22]
 8010c22:	1ad3      	subs	r3, r2, r3
 8010c24:	b29b      	uxth	r3, r3
 8010c26:	3b08      	subs	r3, #8
 8010c28:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8010c2a:	8bfa      	ldrh	r2, [r7, #30]
 8010c2c:	8abb      	ldrh	r3, [r7, #20]
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	d906      	bls.n	8010c40 <mem_trim+0xa4>
 8010c32:	4b52      	ldr	r3, [pc, #328]	; (8010d7c <mem_trim+0x1e0>)
 8010c34:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8010c38:	4953      	ldr	r1, [pc, #332]	; (8010d88 <mem_trim+0x1ec>)
 8010c3a:	4852      	ldr	r0, [pc, #328]	; (8010d84 <mem_trim+0x1e8>)
 8010c3c:	f009 fe34 	bl	801a8a8 <iprintf>
  if (newsize > size) {
 8010c40:	8bfa      	ldrh	r2, [r7, #30]
 8010c42:	8abb      	ldrh	r3, [r7, #20]
 8010c44:	429a      	cmp	r2, r3
 8010c46:	d901      	bls.n	8010c4c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8010c48:	2300      	movs	r3, #0
 8010c4a:	e08f      	b.n	8010d6c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8010c4c:	8bfa      	ldrh	r2, [r7, #30]
 8010c4e:	8abb      	ldrh	r3, [r7, #20]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d101      	bne.n	8010c58 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	e089      	b.n	8010d6c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8010c58:	69bb      	ldr	r3, [r7, #24]
 8010c5a:	881b      	ldrh	r3, [r3, #0]
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f7ff fdf5 	bl	801084c <ptr_to_mem>
 8010c62:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8010c64:	693b      	ldr	r3, [r7, #16]
 8010c66:	791b      	ldrb	r3, [r3, #4]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d13f      	bne.n	8010cec <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010c6c:	69bb      	ldr	r3, [r7, #24]
 8010c6e:	881b      	ldrh	r3, [r3, #0]
 8010c70:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010c74:	d106      	bne.n	8010c84 <mem_trim+0xe8>
 8010c76:	4b41      	ldr	r3, [pc, #260]	; (8010d7c <mem_trim+0x1e0>)
 8010c78:	f240 22f5 	movw	r2, #757	; 0x2f5
 8010c7c:	4943      	ldr	r1, [pc, #268]	; (8010d8c <mem_trim+0x1f0>)
 8010c7e:	4841      	ldr	r0, [pc, #260]	; (8010d84 <mem_trim+0x1e8>)
 8010c80:	f009 fe12 	bl	801a8a8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8010c84:	693b      	ldr	r3, [r7, #16]
 8010c86:	881b      	ldrh	r3, [r3, #0]
 8010c88:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010c8a:	8afa      	ldrh	r2, [r7, #22]
 8010c8c:	8bfb      	ldrh	r3, [r7, #30]
 8010c8e:	4413      	add	r3, r2
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	3308      	adds	r3, #8
 8010c94:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8010c96:	4b3e      	ldr	r3, [pc, #248]	; (8010d90 <mem_trim+0x1f4>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	693a      	ldr	r2, [r7, #16]
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	d106      	bne.n	8010cae <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8010ca0:	89fb      	ldrh	r3, [r7, #14]
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	f7ff fdd2 	bl	801084c <ptr_to_mem>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	4a39      	ldr	r2, [pc, #228]	; (8010d90 <mem_trim+0x1f4>)
 8010cac:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010cae:	89fb      	ldrh	r3, [r7, #14]
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	f7ff fdcb 	bl	801084c <ptr_to_mem>
 8010cb6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8010cb8:	693b      	ldr	r3, [r7, #16]
 8010cba:	2200      	movs	r2, #0
 8010cbc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8010cbe:	693b      	ldr	r3, [r7, #16]
 8010cc0:	89ba      	ldrh	r2, [r7, #12]
 8010cc2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8010cc4:	693b      	ldr	r3, [r7, #16]
 8010cc6:	8afa      	ldrh	r2, [r7, #22]
 8010cc8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8010cca:	69bb      	ldr	r3, [r7, #24]
 8010ccc:	89fa      	ldrh	r2, [r7, #14]
 8010cce:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010cd0:	693b      	ldr	r3, [r7, #16]
 8010cd2:	881b      	ldrh	r3, [r3, #0]
 8010cd4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010cd8:	d047      	beq.n	8010d6a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010cda:	693b      	ldr	r3, [r7, #16]
 8010cdc:	881b      	ldrh	r3, [r3, #0]
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f7ff fdb4 	bl	801084c <ptr_to_mem>
 8010ce4:	4602      	mov	r2, r0
 8010ce6:	89fb      	ldrh	r3, [r7, #14]
 8010ce8:	8053      	strh	r3, [r2, #2]
 8010cea:	e03e      	b.n	8010d6a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8010cec:	8bfb      	ldrh	r3, [r7, #30]
 8010cee:	f103 0214 	add.w	r2, r3, #20
 8010cf2:	8abb      	ldrh	r3, [r7, #20]
 8010cf4:	429a      	cmp	r2, r3
 8010cf6:	d838      	bhi.n	8010d6a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010cf8:	8afa      	ldrh	r2, [r7, #22]
 8010cfa:	8bfb      	ldrh	r3, [r7, #30]
 8010cfc:	4413      	add	r3, r2
 8010cfe:	b29b      	uxth	r3, r3
 8010d00:	3308      	adds	r3, #8
 8010d02:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010d04:	69bb      	ldr	r3, [r7, #24]
 8010d06:	881b      	ldrh	r3, [r3, #0]
 8010d08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010d0c:	d106      	bne.n	8010d1c <mem_trim+0x180>
 8010d0e:	4b1b      	ldr	r3, [pc, #108]	; (8010d7c <mem_trim+0x1e0>)
 8010d10:	f240 3216 	movw	r2, #790	; 0x316
 8010d14:	491d      	ldr	r1, [pc, #116]	; (8010d8c <mem_trim+0x1f0>)
 8010d16:	481b      	ldr	r0, [pc, #108]	; (8010d84 <mem_trim+0x1e8>)
 8010d18:	f009 fdc6 	bl	801a8a8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8010d1c:	89fb      	ldrh	r3, [r7, #14]
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f7ff fd94 	bl	801084c <ptr_to_mem>
 8010d24:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8010d26:	4b1a      	ldr	r3, [pc, #104]	; (8010d90 <mem_trim+0x1f4>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	693a      	ldr	r2, [r7, #16]
 8010d2c:	429a      	cmp	r2, r3
 8010d2e:	d202      	bcs.n	8010d36 <mem_trim+0x19a>
      lfree = mem2;
 8010d30:	4a17      	ldr	r2, [pc, #92]	; (8010d90 <mem_trim+0x1f4>)
 8010d32:	693b      	ldr	r3, [r7, #16]
 8010d34:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	2200      	movs	r2, #0
 8010d3a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8010d3c:	69bb      	ldr	r3, [r7, #24]
 8010d3e:	881a      	ldrh	r2, [r3, #0]
 8010d40:	693b      	ldr	r3, [r7, #16]
 8010d42:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8010d44:	693b      	ldr	r3, [r7, #16]
 8010d46:	8afa      	ldrh	r2, [r7, #22]
 8010d48:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010d4a:	69bb      	ldr	r3, [r7, #24]
 8010d4c:	89fa      	ldrh	r2, [r7, #14]
 8010d4e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010d50:	693b      	ldr	r3, [r7, #16]
 8010d52:	881b      	ldrh	r3, [r3, #0]
 8010d54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010d58:	d007      	beq.n	8010d6a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010d5a:	693b      	ldr	r3, [r7, #16]
 8010d5c:	881b      	ldrh	r3, [r3, #0]
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f7ff fd74 	bl	801084c <ptr_to_mem>
 8010d64:	4602      	mov	r2, r0
 8010d66:	89fb      	ldrh	r3, [r7, #14]
 8010d68:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8010d6a:	687b      	ldr	r3, [r7, #4]
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3720      	adds	r7, #32
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}
 8010d74:	20003148 	.word	0x20003148
 8010d78:	2000314c 	.word	0x2000314c
 8010d7c:	0801bf40 	.word	0x0801bf40
 8010d80:	0801c0b0 	.word	0x0801c0b0
 8010d84:	0801bf88 	.word	0x0801bf88
 8010d88:	0801c0c8 	.word	0x0801c0c8
 8010d8c:	0801c0e8 	.word	0x0801c0e8
 8010d90:	20003150 	.word	0x20003150

08010d94 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b088      	sub	sp, #32
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8010d9e:	88fb      	ldrh	r3, [r7, #6]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d101      	bne.n	8010da8 <mem_malloc+0x14>
    return NULL;
 8010da4:	2300      	movs	r3, #0
 8010da6:	e0d9      	b.n	8010f5c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010da8:	88fb      	ldrh	r3, [r7, #6]
 8010daa:	3303      	adds	r3, #3
 8010dac:	b29b      	uxth	r3, r3
 8010dae:	f023 0303 	bic.w	r3, r3, #3
 8010db2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010db4:	8bbb      	ldrh	r3, [r7, #28]
 8010db6:	2b0b      	cmp	r3, #11
 8010db8:	d801      	bhi.n	8010dbe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8010dba:	230c      	movs	r3, #12
 8010dbc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8010dbe:	8bbb      	ldrh	r3, [r7, #28]
 8010dc0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010dc4:	d803      	bhi.n	8010dce <mem_malloc+0x3a>
 8010dc6:	8bba      	ldrh	r2, [r7, #28]
 8010dc8:	88fb      	ldrh	r3, [r7, #6]
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	d201      	bcs.n	8010dd2 <mem_malloc+0x3e>
    return NULL;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	e0c4      	b.n	8010f5c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010dd2:	4b64      	ldr	r3, [pc, #400]	; (8010f64 <mem_malloc+0x1d0>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f7ff fd4a 	bl	8010870 <mem_to_ptr>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	83fb      	strh	r3, [r7, #30]
 8010de0:	e0b4      	b.n	8010f4c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8010de2:	8bfb      	ldrh	r3, [r7, #30]
 8010de4:	4618      	mov	r0, r3
 8010de6:	f7ff fd31 	bl	801084c <ptr_to_mem>
 8010dea:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010dec:	697b      	ldr	r3, [r7, #20]
 8010dee:	791b      	ldrb	r3, [r3, #4]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	f040 80a4 	bne.w	8010f3e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	881b      	ldrh	r3, [r3, #0]
 8010dfa:	461a      	mov	r2, r3
 8010dfc:	8bfb      	ldrh	r3, [r7, #30]
 8010dfe:	1ad3      	subs	r3, r2, r3
 8010e00:	f1a3 0208 	sub.w	r2, r3, #8
 8010e04:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8010e06:	429a      	cmp	r2, r3
 8010e08:	f0c0 8099 	bcc.w	8010f3e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	881b      	ldrh	r3, [r3, #0]
 8010e10:	461a      	mov	r2, r3
 8010e12:	8bfb      	ldrh	r3, [r7, #30]
 8010e14:	1ad3      	subs	r3, r2, r3
 8010e16:	f1a3 0208 	sub.w	r2, r3, #8
 8010e1a:	8bbb      	ldrh	r3, [r7, #28]
 8010e1c:	3314      	adds	r3, #20
 8010e1e:	429a      	cmp	r2, r3
 8010e20:	d333      	bcc.n	8010e8a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010e22:	8bfa      	ldrh	r2, [r7, #30]
 8010e24:	8bbb      	ldrh	r3, [r7, #28]
 8010e26:	4413      	add	r3, r2
 8010e28:	b29b      	uxth	r3, r3
 8010e2a:	3308      	adds	r3, #8
 8010e2c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010e2e:	8a7b      	ldrh	r3, [r7, #18]
 8010e30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010e34:	d106      	bne.n	8010e44 <mem_malloc+0xb0>
 8010e36:	4b4c      	ldr	r3, [pc, #304]	; (8010f68 <mem_malloc+0x1d4>)
 8010e38:	f240 3287 	movw	r2, #903	; 0x387
 8010e3c:	494b      	ldr	r1, [pc, #300]	; (8010f6c <mem_malloc+0x1d8>)
 8010e3e:	484c      	ldr	r0, [pc, #304]	; (8010f70 <mem_malloc+0x1dc>)
 8010e40:	f009 fd32 	bl	801a8a8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8010e44:	8a7b      	ldrh	r3, [r7, #18]
 8010e46:	4618      	mov	r0, r3
 8010e48:	f7ff fd00 	bl	801084c <ptr_to_mem>
 8010e4c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	2200      	movs	r2, #0
 8010e52:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8010e54:	697b      	ldr	r3, [r7, #20]
 8010e56:	881a      	ldrh	r2, [r3, #0]
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	8bfa      	ldrh	r2, [r7, #30]
 8010e60:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010e62:	697b      	ldr	r3, [r7, #20]
 8010e64:	8a7a      	ldrh	r2, [r7, #18]
 8010e66:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8010e68:	697b      	ldr	r3, [r7, #20]
 8010e6a:	2201      	movs	r2, #1
 8010e6c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	881b      	ldrh	r3, [r3, #0]
 8010e72:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010e76:	d00b      	beq.n	8010e90 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	881b      	ldrh	r3, [r3, #0]
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f7ff fce5 	bl	801084c <ptr_to_mem>
 8010e82:	4602      	mov	r2, r0
 8010e84:	8a7b      	ldrh	r3, [r7, #18]
 8010e86:	8053      	strh	r3, [r2, #2]
 8010e88:	e002      	b.n	8010e90 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	2201      	movs	r2, #1
 8010e8e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010e90:	4b34      	ldr	r3, [pc, #208]	; (8010f64 <mem_malloc+0x1d0>)
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	697a      	ldr	r2, [r7, #20]
 8010e96:	429a      	cmp	r2, r3
 8010e98:	d127      	bne.n	8010eea <mem_malloc+0x156>
          struct mem *cur = lfree;
 8010e9a:	4b32      	ldr	r3, [pc, #200]	; (8010f64 <mem_malloc+0x1d0>)
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010ea0:	e005      	b.n	8010eae <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010ea2:	69bb      	ldr	r3, [r7, #24]
 8010ea4:	881b      	ldrh	r3, [r3, #0]
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f7ff fcd0 	bl	801084c <ptr_to_mem>
 8010eac:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010eae:	69bb      	ldr	r3, [r7, #24]
 8010eb0:	791b      	ldrb	r3, [r3, #4]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d004      	beq.n	8010ec0 <mem_malloc+0x12c>
 8010eb6:	4b2f      	ldr	r3, [pc, #188]	; (8010f74 <mem_malloc+0x1e0>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	69ba      	ldr	r2, [r7, #24]
 8010ebc:	429a      	cmp	r2, r3
 8010ebe:	d1f0      	bne.n	8010ea2 <mem_malloc+0x10e>
          }
          lfree = cur;
 8010ec0:	4a28      	ldr	r2, [pc, #160]	; (8010f64 <mem_malloc+0x1d0>)
 8010ec2:	69bb      	ldr	r3, [r7, #24]
 8010ec4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010ec6:	4b27      	ldr	r3, [pc, #156]	; (8010f64 <mem_malloc+0x1d0>)
 8010ec8:	681a      	ldr	r2, [r3, #0]
 8010eca:	4b2a      	ldr	r3, [pc, #168]	; (8010f74 <mem_malloc+0x1e0>)
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	429a      	cmp	r2, r3
 8010ed0:	d00b      	beq.n	8010eea <mem_malloc+0x156>
 8010ed2:	4b24      	ldr	r3, [pc, #144]	; (8010f64 <mem_malloc+0x1d0>)
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	791b      	ldrb	r3, [r3, #4]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d006      	beq.n	8010eea <mem_malloc+0x156>
 8010edc:	4b22      	ldr	r3, [pc, #136]	; (8010f68 <mem_malloc+0x1d4>)
 8010ede:	f240 32b5 	movw	r2, #949	; 0x3b5
 8010ee2:	4925      	ldr	r1, [pc, #148]	; (8010f78 <mem_malloc+0x1e4>)
 8010ee4:	4822      	ldr	r0, [pc, #136]	; (8010f70 <mem_malloc+0x1dc>)
 8010ee6:	f009 fcdf 	bl	801a8a8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8010eea:	8bba      	ldrh	r2, [r7, #28]
 8010eec:	697b      	ldr	r3, [r7, #20]
 8010eee:	4413      	add	r3, r2
 8010ef0:	3308      	adds	r3, #8
 8010ef2:	4a20      	ldr	r2, [pc, #128]	; (8010f74 <mem_malloc+0x1e0>)
 8010ef4:	6812      	ldr	r2, [r2, #0]
 8010ef6:	4293      	cmp	r3, r2
 8010ef8:	d906      	bls.n	8010f08 <mem_malloc+0x174>
 8010efa:	4b1b      	ldr	r3, [pc, #108]	; (8010f68 <mem_malloc+0x1d4>)
 8010efc:	f240 32b9 	movw	r2, #953	; 0x3b9
 8010f00:	491e      	ldr	r1, [pc, #120]	; (8010f7c <mem_malloc+0x1e8>)
 8010f02:	481b      	ldr	r0, [pc, #108]	; (8010f70 <mem_malloc+0x1dc>)
 8010f04:	f009 fcd0 	bl	801a8a8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	f003 0303 	and.w	r3, r3, #3
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d006      	beq.n	8010f20 <mem_malloc+0x18c>
 8010f12:	4b15      	ldr	r3, [pc, #84]	; (8010f68 <mem_malloc+0x1d4>)
 8010f14:	f240 32bb 	movw	r2, #955	; 0x3bb
 8010f18:	4919      	ldr	r1, [pc, #100]	; (8010f80 <mem_malloc+0x1ec>)
 8010f1a:	4815      	ldr	r0, [pc, #84]	; (8010f70 <mem_malloc+0x1dc>)
 8010f1c:	f009 fcc4 	bl	801a8a8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010f20:	697b      	ldr	r3, [r7, #20]
 8010f22:	f003 0303 	and.w	r3, r3, #3
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d006      	beq.n	8010f38 <mem_malloc+0x1a4>
 8010f2a:	4b0f      	ldr	r3, [pc, #60]	; (8010f68 <mem_malloc+0x1d4>)
 8010f2c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010f30:	4914      	ldr	r1, [pc, #80]	; (8010f84 <mem_malloc+0x1f0>)
 8010f32:	480f      	ldr	r0, [pc, #60]	; (8010f70 <mem_malloc+0x1dc>)
 8010f34:	f009 fcb8 	bl	801a8a8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	3308      	adds	r3, #8
 8010f3c:	e00e      	b.n	8010f5c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8010f3e:	8bfb      	ldrh	r3, [r7, #30]
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7ff fc83 	bl	801084c <ptr_to_mem>
 8010f46:	4603      	mov	r3, r0
 8010f48:	881b      	ldrh	r3, [r3, #0]
 8010f4a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010f4c:	8bfa      	ldrh	r2, [r7, #30]
 8010f4e:	8bbb      	ldrh	r3, [r7, #28]
 8010f50:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8010f54:	429a      	cmp	r2, r3
 8010f56:	f4ff af44 	bcc.w	8010de2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8010f5a:	2300      	movs	r3, #0
}
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	3720      	adds	r7, #32
 8010f60:	46bd      	mov	sp, r7
 8010f62:	bd80      	pop	{r7, pc}
 8010f64:	20003150 	.word	0x20003150
 8010f68:	0801bf40 	.word	0x0801bf40
 8010f6c:	0801c0e8 	.word	0x0801c0e8
 8010f70:	0801bf88 	.word	0x0801bf88
 8010f74:	2000314c 	.word	0x2000314c
 8010f78:	0801c0fc 	.word	0x0801c0fc
 8010f7c:	0801c118 	.word	0x0801c118
 8010f80:	0801c148 	.word	0x0801c148
 8010f84:	0801c178 	.word	0x0801c178

08010f88 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8010f88:	b480      	push	{r7}
 8010f8a:	b085      	sub	sp, #20
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	689b      	ldr	r3, [r3, #8]
 8010f94:	2200      	movs	r2, #0
 8010f96:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	685b      	ldr	r3, [r3, #4]
 8010f9c:	3303      	adds	r3, #3
 8010f9e:	f023 0303 	bic.w	r3, r3, #3
 8010fa2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	60fb      	str	r3, [r7, #12]
 8010fa8:	e011      	b.n	8010fce <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	689b      	ldr	r3, [r3, #8]
 8010fae:	681a      	ldr	r2, [r3, #0]
 8010fb0:	68bb      	ldr	r3, [r7, #8]
 8010fb2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	689b      	ldr	r3, [r3, #8]
 8010fb8:	68ba      	ldr	r2, [r7, #8]
 8010fba:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	881b      	ldrh	r3, [r3, #0]
 8010fc0:	461a      	mov	r2, r3
 8010fc2:	68bb      	ldr	r3, [r7, #8]
 8010fc4:	4413      	add	r3, r2
 8010fc6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	3301      	adds	r3, #1
 8010fcc:	60fb      	str	r3, [r7, #12]
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	885b      	ldrh	r3, [r3, #2]
 8010fd2:	461a      	mov	r2, r3
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	4293      	cmp	r3, r2
 8010fd8:	dbe7      	blt.n	8010faa <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8010fda:	bf00      	nop
 8010fdc:	bf00      	nop
 8010fde:	3714      	adds	r7, #20
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe6:	4770      	bx	lr

08010fe8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b082      	sub	sp, #8
 8010fec:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010fee:	2300      	movs	r3, #0
 8010ff0:	80fb      	strh	r3, [r7, #6]
 8010ff2:	e009      	b.n	8011008 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010ff4:	88fb      	ldrh	r3, [r7, #6]
 8010ff6:	4a08      	ldr	r2, [pc, #32]	; (8011018 <memp_init+0x30>)
 8010ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7ff ffc3 	bl	8010f88 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011002:	88fb      	ldrh	r3, [r7, #6]
 8011004:	3301      	adds	r3, #1
 8011006:	80fb      	strh	r3, [r7, #6]
 8011008:	88fb      	ldrh	r3, [r7, #6]
 801100a:	2b08      	cmp	r3, #8
 801100c:	d9f2      	bls.n	8010ff4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801100e:	bf00      	nop
 8011010:	bf00      	nop
 8011012:	3708      	adds	r7, #8
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}
 8011018:	080952c0 	.word	0x080952c0

0801101c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b084      	sub	sp, #16
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	689b      	ldr	r3, [r3, #8]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d012      	beq.n	8011058 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	689b      	ldr	r3, [r3, #8]
 8011036:	68fa      	ldr	r2, [r7, #12]
 8011038:	6812      	ldr	r2, [r2, #0]
 801103a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	f003 0303 	and.w	r3, r3, #3
 8011042:	2b00      	cmp	r3, #0
 8011044:	d006      	beq.n	8011054 <do_memp_malloc_pool+0x38>
 8011046:	4b07      	ldr	r3, [pc, #28]	; (8011064 <do_memp_malloc_pool+0x48>)
 8011048:	f44f 728c 	mov.w	r2, #280	; 0x118
 801104c:	4906      	ldr	r1, [pc, #24]	; (8011068 <do_memp_malloc_pool+0x4c>)
 801104e:	4807      	ldr	r0, [pc, #28]	; (801106c <do_memp_malloc_pool+0x50>)
 8011050:	f009 fc2a 	bl	801a8a8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	e000      	b.n	801105a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011058:	2300      	movs	r3, #0
}
 801105a:	4618      	mov	r0, r3
 801105c:	3710      	adds	r7, #16
 801105e:	46bd      	mov	sp, r7
 8011060:	bd80      	pop	{r7, pc}
 8011062:	bf00      	nop
 8011064:	0801c19c 	.word	0x0801c19c
 8011068:	0801c1cc 	.word	0x0801c1cc
 801106c:	0801c1f0 	.word	0x0801c1f0

08011070 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b084      	sub	sp, #16
 8011074:	af00      	add	r7, sp, #0
 8011076:	4603      	mov	r3, r0
 8011078:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801107a:	79fb      	ldrb	r3, [r7, #7]
 801107c:	2b08      	cmp	r3, #8
 801107e:	d908      	bls.n	8011092 <memp_malloc+0x22>
 8011080:	4b0a      	ldr	r3, [pc, #40]	; (80110ac <memp_malloc+0x3c>)
 8011082:	f240 1257 	movw	r2, #343	; 0x157
 8011086:	490a      	ldr	r1, [pc, #40]	; (80110b0 <memp_malloc+0x40>)
 8011088:	480a      	ldr	r0, [pc, #40]	; (80110b4 <memp_malloc+0x44>)
 801108a:	f009 fc0d 	bl	801a8a8 <iprintf>
 801108e:	2300      	movs	r3, #0
 8011090:	e008      	b.n	80110a4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8011092:	79fb      	ldrb	r3, [r7, #7]
 8011094:	4a08      	ldr	r2, [pc, #32]	; (80110b8 <memp_malloc+0x48>)
 8011096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801109a:	4618      	mov	r0, r3
 801109c:	f7ff ffbe 	bl	801101c <do_memp_malloc_pool>
 80110a0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80110a2:	68fb      	ldr	r3, [r7, #12]
}
 80110a4:	4618      	mov	r0, r3
 80110a6:	3710      	adds	r7, #16
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bd80      	pop	{r7, pc}
 80110ac:	0801c19c 	.word	0x0801c19c
 80110b0:	0801c22c 	.word	0x0801c22c
 80110b4:	0801c1f0 	.word	0x0801c1f0
 80110b8:	080952c0 	.word	0x080952c0

080110bc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b084      	sub	sp, #16
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
 80110c4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	f003 0303 	and.w	r3, r3, #3
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d006      	beq.n	80110de <do_memp_free_pool+0x22>
 80110d0:	4b0a      	ldr	r3, [pc, #40]	; (80110fc <do_memp_free_pool+0x40>)
 80110d2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80110d6:	490a      	ldr	r1, [pc, #40]	; (8011100 <do_memp_free_pool+0x44>)
 80110d8:	480a      	ldr	r0, [pc, #40]	; (8011104 <do_memp_free_pool+0x48>)
 80110da:	f009 fbe5 	bl	801a8a8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	689b      	ldr	r3, [r3, #8]
 80110e6:	681a      	ldr	r2, [r3, #0]
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	689b      	ldr	r3, [r3, #8]
 80110f0:	68fa      	ldr	r2, [r7, #12]
 80110f2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80110f4:	bf00      	nop
 80110f6:	3710      	adds	r7, #16
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}
 80110fc:	0801c19c 	.word	0x0801c19c
 8011100:	0801c24c 	.word	0x0801c24c
 8011104:	0801c1f0 	.word	0x0801c1f0

08011108 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b082      	sub	sp, #8
 801110c:	af00      	add	r7, sp, #0
 801110e:	4603      	mov	r3, r0
 8011110:	6039      	str	r1, [r7, #0]
 8011112:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8011114:	79fb      	ldrb	r3, [r7, #7]
 8011116:	2b08      	cmp	r3, #8
 8011118:	d907      	bls.n	801112a <memp_free+0x22>
 801111a:	4b0c      	ldr	r3, [pc, #48]	; (801114c <memp_free+0x44>)
 801111c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8011120:	490b      	ldr	r1, [pc, #44]	; (8011150 <memp_free+0x48>)
 8011122:	480c      	ldr	r0, [pc, #48]	; (8011154 <memp_free+0x4c>)
 8011124:	f009 fbc0 	bl	801a8a8 <iprintf>
 8011128:	e00c      	b.n	8011144 <memp_free+0x3c>

  if (mem == NULL) {
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d008      	beq.n	8011142 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8011130:	79fb      	ldrb	r3, [r7, #7]
 8011132:	4a09      	ldr	r2, [pc, #36]	; (8011158 <memp_free+0x50>)
 8011134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011138:	6839      	ldr	r1, [r7, #0]
 801113a:	4618      	mov	r0, r3
 801113c:	f7ff ffbe 	bl	80110bc <do_memp_free_pool>
 8011140:	e000      	b.n	8011144 <memp_free+0x3c>
    return;
 8011142:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8011144:	3708      	adds	r7, #8
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}
 801114a:	bf00      	nop
 801114c:	0801c19c 	.word	0x0801c19c
 8011150:	0801c26c 	.word	0x0801c26c
 8011154:	0801c1f0 	.word	0x0801c1f0
 8011158:	080952c0 	.word	0x080952c0

0801115c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801115c:	b480      	push	{r7}
 801115e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8011160:	bf00      	nop
 8011162:	46bd      	mov	sp, r7
 8011164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011168:	4770      	bx	lr
	...

0801116c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b086      	sub	sp, #24
 8011170:	af00      	add	r7, sp, #0
 8011172:	60f8      	str	r0, [r7, #12]
 8011174:	60b9      	str	r1, [r7, #8]
 8011176:	607a      	str	r2, [r7, #4]
 8011178:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d108      	bne.n	8011192 <netif_add+0x26>
 8011180:	4b57      	ldr	r3, [pc, #348]	; (80112e0 <netif_add+0x174>)
 8011182:	f240 1227 	movw	r2, #295	; 0x127
 8011186:	4957      	ldr	r1, [pc, #348]	; (80112e4 <netif_add+0x178>)
 8011188:	4857      	ldr	r0, [pc, #348]	; (80112e8 <netif_add+0x17c>)
 801118a:	f009 fb8d 	bl	801a8a8 <iprintf>
 801118e:	2300      	movs	r3, #0
 8011190:	e0a2      	b.n	80112d8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8011192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011194:	2b00      	cmp	r3, #0
 8011196:	d108      	bne.n	80111aa <netif_add+0x3e>
 8011198:	4b51      	ldr	r3, [pc, #324]	; (80112e0 <netif_add+0x174>)
 801119a:	f44f 7294 	mov.w	r2, #296	; 0x128
 801119e:	4953      	ldr	r1, [pc, #332]	; (80112ec <netif_add+0x180>)
 80111a0:	4851      	ldr	r0, [pc, #324]	; (80112e8 <netif_add+0x17c>)
 80111a2:	f009 fb81 	bl	801a8a8 <iprintf>
 80111a6:	2300      	movs	r3, #0
 80111a8:	e096      	b.n	80112d8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d101      	bne.n	80111b4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80111b0:	4b4f      	ldr	r3, [pc, #316]	; (80112f0 <netif_add+0x184>)
 80111b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d101      	bne.n	80111be <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80111ba:	4b4d      	ldr	r3, [pc, #308]	; (80112f0 <netif_add+0x184>)
 80111bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80111be:	683b      	ldr	r3, [r7, #0]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d101      	bne.n	80111c8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80111c4:	4b4a      	ldr	r3, [pc, #296]	; (80112f0 <netif_add+0x184>)
 80111c6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	2200      	movs	r2, #0
 80111cc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	2200      	movs	r2, #0
 80111d2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	2200      	movs	r2, #0
 80111d8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	4a45      	ldr	r2, [pc, #276]	; (80112f4 <netif_add+0x188>)
 80111de:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	2200      	movs	r2, #0
 80111e4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	2200      	movs	r2, #0
 80111ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	2200      	movs	r2, #0
 80111f2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	6a3a      	ldr	r2, [r7, #32]
 80111f8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80111fa:	4b3f      	ldr	r3, [pc, #252]	; (80112f8 <netif_add+0x18c>)
 80111fc:	781a      	ldrb	r2, [r3, #0]
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011208:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	687a      	ldr	r2, [r7, #4]
 801120e:	68b9      	ldr	r1, [r7, #8]
 8011210:	68f8      	ldr	r0, [r7, #12]
 8011212:	f000 f913 	bl	801143c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8011216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011218:	68f8      	ldr	r0, [r7, #12]
 801121a:	4798      	blx	r3
 801121c:	4603      	mov	r3, r0
 801121e:	2b00      	cmp	r3, #0
 8011220:	d001      	beq.n	8011226 <netif_add+0xba>
    return NULL;
 8011222:	2300      	movs	r3, #0
 8011224:	e058      	b.n	80112d8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801122c:	2bff      	cmp	r3, #255	; 0xff
 801122e:	d103      	bne.n	8011238 <netif_add+0xcc>
        netif->num = 0;
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	2200      	movs	r2, #0
 8011234:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8011238:	2300      	movs	r3, #0
 801123a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801123c:	4b2f      	ldr	r3, [pc, #188]	; (80112fc <netif_add+0x190>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	617b      	str	r3, [r7, #20]
 8011242:	e02b      	b.n	801129c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8011244:	697a      	ldr	r2, [r7, #20]
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	429a      	cmp	r2, r3
 801124a:	d106      	bne.n	801125a <netif_add+0xee>
 801124c:	4b24      	ldr	r3, [pc, #144]	; (80112e0 <netif_add+0x174>)
 801124e:	f240 128b 	movw	r2, #395	; 0x18b
 8011252:	492b      	ldr	r1, [pc, #172]	; (8011300 <netif_add+0x194>)
 8011254:	4824      	ldr	r0, [pc, #144]	; (80112e8 <netif_add+0x17c>)
 8011256:	f009 fb27 	bl	801a8a8 <iprintf>
        num_netifs++;
 801125a:	693b      	ldr	r3, [r7, #16]
 801125c:	3301      	adds	r3, #1
 801125e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8011260:	693b      	ldr	r3, [r7, #16]
 8011262:	2bff      	cmp	r3, #255	; 0xff
 8011264:	dd06      	ble.n	8011274 <netif_add+0x108>
 8011266:	4b1e      	ldr	r3, [pc, #120]	; (80112e0 <netif_add+0x174>)
 8011268:	f240 128d 	movw	r2, #397	; 0x18d
 801126c:	4925      	ldr	r1, [pc, #148]	; (8011304 <netif_add+0x198>)
 801126e:	481e      	ldr	r0, [pc, #120]	; (80112e8 <netif_add+0x17c>)
 8011270:	f009 fb1a 	bl	801a8a8 <iprintf>
        if (netif2->num == netif->num) {
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011280:	429a      	cmp	r2, r3
 8011282:	d108      	bne.n	8011296 <netif_add+0x12a>
          netif->num++;
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801128a:	3301      	adds	r3, #1
 801128c:	b2da      	uxtb	r2, r3
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8011294:	e005      	b.n	80112a2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	617b      	str	r3, [r7, #20]
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d1d0      	bne.n	8011244 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80112a2:	697b      	ldr	r3, [r7, #20]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d1be      	bne.n	8011226 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80112ae:	2bfe      	cmp	r3, #254	; 0xfe
 80112b0:	d103      	bne.n	80112ba <netif_add+0x14e>
    netif_num = 0;
 80112b2:	4b11      	ldr	r3, [pc, #68]	; (80112f8 <netif_add+0x18c>)
 80112b4:	2200      	movs	r2, #0
 80112b6:	701a      	strb	r2, [r3, #0]
 80112b8:	e006      	b.n	80112c8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80112c0:	3301      	adds	r3, #1
 80112c2:	b2da      	uxtb	r2, r3
 80112c4:	4b0c      	ldr	r3, [pc, #48]	; (80112f8 <netif_add+0x18c>)
 80112c6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80112c8:	4b0c      	ldr	r3, [pc, #48]	; (80112fc <netif_add+0x190>)
 80112ca:	681a      	ldr	r2, [r3, #0]
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80112d0:	4a0a      	ldr	r2, [pc, #40]	; (80112fc <netif_add+0x190>)
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80112d6:	68fb      	ldr	r3, [r7, #12]
}
 80112d8:	4618      	mov	r0, r3
 80112da:	3718      	adds	r7, #24
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd80      	pop	{r7, pc}
 80112e0:	0801c288 	.word	0x0801c288
 80112e4:	0801c31c 	.word	0x0801c31c
 80112e8:	0801c2d8 	.word	0x0801c2d8
 80112ec:	0801c338 	.word	0x0801c338
 80112f0:	08095324 	.word	0x08095324
 80112f4:	0801164f 	.word	0x0801164f
 80112f8:	20003178 	.word	0x20003178
 80112fc:	2000dc70 	.word	0x2000dc70
 8011300:	0801c35c 	.word	0x0801c35c
 8011304:	0801c370 	.word	0x0801c370

08011308 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b082      	sub	sp, #8
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8011312:	6839      	ldr	r1, [r7, #0]
 8011314:	6878      	ldr	r0, [r7, #4]
 8011316:	f002 fadf 	bl	80138d8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801131a:	6839      	ldr	r1, [r7, #0]
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	f006 fbbf 	bl	8017aa0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8011322:	bf00      	nop
 8011324:	3708      	adds	r7, #8
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}
	...

0801132c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b086      	sub	sp, #24
 8011330:	af00      	add	r7, sp, #0
 8011332:	60f8      	str	r0, [r7, #12]
 8011334:	60b9      	str	r1, [r7, #8]
 8011336:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d106      	bne.n	801134c <netif_do_set_ipaddr+0x20>
 801133e:	4b1d      	ldr	r3, [pc, #116]	; (80113b4 <netif_do_set_ipaddr+0x88>)
 8011340:	f240 12cb 	movw	r2, #459	; 0x1cb
 8011344:	491c      	ldr	r1, [pc, #112]	; (80113b8 <netif_do_set_ipaddr+0x8c>)
 8011346:	481d      	ldr	r0, [pc, #116]	; (80113bc <netif_do_set_ipaddr+0x90>)
 8011348:	f009 faae 	bl	801a8a8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d106      	bne.n	8011360 <netif_do_set_ipaddr+0x34>
 8011352:	4b18      	ldr	r3, [pc, #96]	; (80113b4 <netif_do_set_ipaddr+0x88>)
 8011354:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8011358:	4917      	ldr	r1, [pc, #92]	; (80113b8 <netif_do_set_ipaddr+0x8c>)
 801135a:	4818      	ldr	r0, [pc, #96]	; (80113bc <netif_do_set_ipaddr+0x90>)
 801135c:	f009 faa4 	bl	801a8a8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8011360:	68bb      	ldr	r3, [r7, #8]
 8011362:	681a      	ldr	r2, [r3, #0]
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	3304      	adds	r3, #4
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	429a      	cmp	r2, r3
 801136c:	d01c      	beq.n	80113a8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	3304      	adds	r3, #4
 8011378:	681a      	ldr	r2, [r3, #0]
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801137e:	f107 0314 	add.w	r3, r7, #20
 8011382:	4619      	mov	r1, r3
 8011384:	6878      	ldr	r0, [r7, #4]
 8011386:	f7ff ffbf 	bl	8011308 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d002      	beq.n	8011396 <netif_do_set_ipaddr+0x6a>
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	e000      	b.n	8011398 <netif_do_set_ipaddr+0x6c>
 8011396:	2300      	movs	r3, #0
 8011398:	68fa      	ldr	r2, [r7, #12]
 801139a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801139c:	2101      	movs	r1, #1
 801139e:	68f8      	ldr	r0, [r7, #12]
 80113a0:	f000 f8d2 	bl	8011548 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80113a4:	2301      	movs	r3, #1
 80113a6:	e000      	b.n	80113aa <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80113a8:	2300      	movs	r3, #0
}
 80113aa:	4618      	mov	r0, r3
 80113ac:	3718      	adds	r7, #24
 80113ae:	46bd      	mov	sp, r7
 80113b0:	bd80      	pop	{r7, pc}
 80113b2:	bf00      	nop
 80113b4:	0801c288 	.word	0x0801c288
 80113b8:	0801c3a0 	.word	0x0801c3a0
 80113bc:	0801c2d8 	.word	0x0801c2d8

080113c0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80113c0:	b480      	push	{r7}
 80113c2:	b085      	sub	sp, #20
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	60f8      	str	r0, [r7, #12]
 80113c8:	60b9      	str	r1, [r7, #8]
 80113ca:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	681a      	ldr	r2, [r3, #0]
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	3308      	adds	r3, #8
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	429a      	cmp	r2, r3
 80113d8:	d00a      	beq.n	80113f0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d002      	beq.n	80113e6 <netif_do_set_netmask+0x26>
 80113e0:	68bb      	ldr	r3, [r7, #8]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	e000      	b.n	80113e8 <netif_do_set_netmask+0x28>
 80113e6:	2300      	movs	r3, #0
 80113e8:	68fa      	ldr	r2, [r7, #12]
 80113ea:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80113ec:	2301      	movs	r3, #1
 80113ee:	e000      	b.n	80113f2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80113f0:	2300      	movs	r3, #0
}
 80113f2:	4618      	mov	r0, r3
 80113f4:	3714      	adds	r7, #20
 80113f6:	46bd      	mov	sp, r7
 80113f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fc:	4770      	bx	lr

080113fe <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80113fe:	b480      	push	{r7}
 8011400:	b085      	sub	sp, #20
 8011402:	af00      	add	r7, sp, #0
 8011404:	60f8      	str	r0, [r7, #12]
 8011406:	60b9      	str	r1, [r7, #8]
 8011408:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801140a:	68bb      	ldr	r3, [r7, #8]
 801140c:	681a      	ldr	r2, [r3, #0]
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	330c      	adds	r3, #12
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	429a      	cmp	r2, r3
 8011416:	d00a      	beq.n	801142e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d002      	beq.n	8011424 <netif_do_set_gw+0x26>
 801141e:	68bb      	ldr	r3, [r7, #8]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	e000      	b.n	8011426 <netif_do_set_gw+0x28>
 8011424:	2300      	movs	r3, #0
 8011426:	68fa      	ldr	r2, [r7, #12]
 8011428:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801142a:	2301      	movs	r3, #1
 801142c:	e000      	b.n	8011430 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801142e:	2300      	movs	r3, #0
}
 8011430:	4618      	mov	r0, r3
 8011432:	3714      	adds	r7, #20
 8011434:	46bd      	mov	sp, r7
 8011436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143a:	4770      	bx	lr

0801143c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b088      	sub	sp, #32
 8011440:	af00      	add	r7, sp, #0
 8011442:	60f8      	str	r0, [r7, #12]
 8011444:	60b9      	str	r1, [r7, #8]
 8011446:	607a      	str	r2, [r7, #4]
 8011448:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801144a:	2300      	movs	r3, #0
 801144c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801144e:	2300      	movs	r3, #0
 8011450:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d101      	bne.n	801145c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8011458:	4b1c      	ldr	r3, [pc, #112]	; (80114cc <netif_set_addr+0x90>)
 801145a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d101      	bne.n	8011466 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8011462:	4b1a      	ldr	r3, [pc, #104]	; (80114cc <netif_set_addr+0x90>)
 8011464:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011466:	683b      	ldr	r3, [r7, #0]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d101      	bne.n	8011470 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801146c:	4b17      	ldr	r3, [pc, #92]	; (80114cc <netif_set_addr+0x90>)
 801146e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d003      	beq.n	801147e <netif_set_addr+0x42>
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d101      	bne.n	8011482 <netif_set_addr+0x46>
 801147e:	2301      	movs	r3, #1
 8011480:	e000      	b.n	8011484 <netif_set_addr+0x48>
 8011482:	2300      	movs	r3, #0
 8011484:	617b      	str	r3, [r7, #20]
  if (remove) {
 8011486:	697b      	ldr	r3, [r7, #20]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d006      	beq.n	801149a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801148c:	f107 0310 	add.w	r3, r7, #16
 8011490:	461a      	mov	r2, r3
 8011492:	68b9      	ldr	r1, [r7, #8]
 8011494:	68f8      	ldr	r0, [r7, #12]
 8011496:	f7ff ff49 	bl	801132c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801149a:	69fa      	ldr	r2, [r7, #28]
 801149c:	6879      	ldr	r1, [r7, #4]
 801149e:	68f8      	ldr	r0, [r7, #12]
 80114a0:	f7ff ff8e 	bl	80113c0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80114a4:	69ba      	ldr	r2, [r7, #24]
 80114a6:	6839      	ldr	r1, [r7, #0]
 80114a8:	68f8      	ldr	r0, [r7, #12]
 80114aa:	f7ff ffa8 	bl	80113fe <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d106      	bne.n	80114c2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80114b4:	f107 0310 	add.w	r3, r7, #16
 80114b8:	461a      	mov	r2, r3
 80114ba:	68b9      	ldr	r1, [r7, #8]
 80114bc:	68f8      	ldr	r0, [r7, #12]
 80114be:	f7ff ff35 	bl	801132c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80114c2:	bf00      	nop
 80114c4:	3720      	adds	r7, #32
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}
 80114ca:	bf00      	nop
 80114cc:	08095324 	.word	0x08095324

080114d0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80114d0:	b480      	push	{r7}
 80114d2:	b083      	sub	sp, #12
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80114d8:	4a04      	ldr	r2, [pc, #16]	; (80114ec <netif_set_default+0x1c>)
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80114de:	bf00      	nop
 80114e0:	370c      	adds	r7, #12
 80114e2:	46bd      	mov	sp, r7
 80114e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e8:	4770      	bx	lr
 80114ea:	bf00      	nop
 80114ec:	2000dc74 	.word	0x2000dc74

080114f0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b082      	sub	sp, #8
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d107      	bne.n	801150e <netif_set_up+0x1e>
 80114fe:	4b0f      	ldr	r3, [pc, #60]	; (801153c <netif_set_up+0x4c>)
 8011500:	f44f 7254 	mov.w	r2, #848	; 0x350
 8011504:	490e      	ldr	r1, [pc, #56]	; (8011540 <netif_set_up+0x50>)
 8011506:	480f      	ldr	r0, [pc, #60]	; (8011544 <netif_set_up+0x54>)
 8011508:	f009 f9ce 	bl	801a8a8 <iprintf>
 801150c:	e013      	b.n	8011536 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011514:	f003 0301 	and.w	r3, r3, #1
 8011518:	2b00      	cmp	r3, #0
 801151a:	d10c      	bne.n	8011536 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011522:	f043 0301 	orr.w	r3, r3, #1
 8011526:	b2da      	uxtb	r2, r3
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801152e:	2103      	movs	r1, #3
 8011530:	6878      	ldr	r0, [r7, #4]
 8011532:	f000 f809 	bl	8011548 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8011536:	3708      	adds	r7, #8
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}
 801153c:	0801c288 	.word	0x0801c288
 8011540:	0801c410 	.word	0x0801c410
 8011544:	0801c2d8 	.word	0x0801c2d8

08011548 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b082      	sub	sp, #8
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
 8011550:	460b      	mov	r3, r1
 8011552:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d106      	bne.n	8011568 <netif_issue_reports+0x20>
 801155a:	4b18      	ldr	r3, [pc, #96]	; (80115bc <netif_issue_reports+0x74>)
 801155c:	f240 326d 	movw	r2, #877	; 0x36d
 8011560:	4917      	ldr	r1, [pc, #92]	; (80115c0 <netif_issue_reports+0x78>)
 8011562:	4818      	ldr	r0, [pc, #96]	; (80115c4 <netif_issue_reports+0x7c>)
 8011564:	f009 f9a0 	bl	801a8a8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801156e:	f003 0304 	and.w	r3, r3, #4
 8011572:	2b00      	cmp	r3, #0
 8011574:	d01e      	beq.n	80115b4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801157c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011580:	2b00      	cmp	r3, #0
 8011582:	d017      	beq.n	80115b4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011584:	78fb      	ldrb	r3, [r7, #3]
 8011586:	f003 0301 	and.w	r3, r3, #1
 801158a:	2b00      	cmp	r3, #0
 801158c:	d013      	beq.n	80115b6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	3304      	adds	r3, #4
 8011592:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011594:	2b00      	cmp	r3, #0
 8011596:	d00e      	beq.n	80115b6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801159e:	f003 0308 	and.w	r3, r3, #8
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d007      	beq.n	80115b6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	3304      	adds	r3, #4
 80115aa:	4619      	mov	r1, r3
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	f007 f9e1 	bl	8018974 <etharp_request>
 80115b2:	e000      	b.n	80115b6 <netif_issue_reports+0x6e>
    return;
 80115b4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80115b6:	3708      	adds	r7, #8
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bd80      	pop	{r7, pc}
 80115bc:	0801c288 	.word	0x0801c288
 80115c0:	0801c42c 	.word	0x0801c42c
 80115c4:	0801c2d8 	.word	0x0801c2d8

080115c8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b082      	sub	sp, #8
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d107      	bne.n	80115e6 <netif_set_down+0x1e>
 80115d6:	4b12      	ldr	r3, [pc, #72]	; (8011620 <netif_set_down+0x58>)
 80115d8:	f240 329b 	movw	r2, #923	; 0x39b
 80115dc:	4911      	ldr	r1, [pc, #68]	; (8011624 <netif_set_down+0x5c>)
 80115de:	4812      	ldr	r0, [pc, #72]	; (8011628 <netif_set_down+0x60>)
 80115e0:	f009 f962 	bl	801a8a8 <iprintf>
 80115e4:	e019      	b.n	801161a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80115ec:	f003 0301 	and.w	r3, r3, #1
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d012      	beq.n	801161a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80115fa:	f023 0301 	bic.w	r3, r3, #1
 80115fe:	b2da      	uxtb	r2, r3
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801160c:	f003 0308 	and.w	r3, r3, #8
 8011610:	2b00      	cmp	r3, #0
 8011612:	d002      	beq.n	801161a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8011614:	6878      	ldr	r0, [r7, #4]
 8011616:	f006 fd6b 	bl	80180f0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801161a:	3708      	adds	r7, #8
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}
 8011620:	0801c288 	.word	0x0801c288
 8011624:	0801c450 	.word	0x0801c450
 8011628:	0801c2d8 	.word	0x0801c2d8

0801162c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801162c:	b480      	push	{r7}
 801162e:	b083      	sub	sp, #12
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d002      	beq.n	8011642 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	683a      	ldr	r2, [r7, #0]
 8011640:	61da      	str	r2, [r3, #28]
  }
}
 8011642:	bf00      	nop
 8011644:	370c      	adds	r7, #12
 8011646:	46bd      	mov	sp, r7
 8011648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164c:	4770      	bx	lr

0801164e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801164e:	b480      	push	{r7}
 8011650:	b085      	sub	sp, #20
 8011652:	af00      	add	r7, sp, #0
 8011654:	60f8      	str	r0, [r7, #12]
 8011656:	60b9      	str	r1, [r7, #8]
 8011658:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801165a:	f06f 030b 	mvn.w	r3, #11
}
 801165e:	4618      	mov	r0, r3
 8011660:	3714      	adds	r7, #20
 8011662:	46bd      	mov	sp, r7
 8011664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011668:	4770      	bx	lr
	...

0801166c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801166c:	b480      	push	{r7}
 801166e:	b085      	sub	sp, #20
 8011670:	af00      	add	r7, sp, #0
 8011672:	4603      	mov	r3, r0
 8011674:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8011676:	79fb      	ldrb	r3, [r7, #7]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d013      	beq.n	80116a4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801167c:	4b0d      	ldr	r3, [pc, #52]	; (80116b4 <netif_get_by_index+0x48>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	60fb      	str	r3, [r7, #12]
 8011682:	e00c      	b.n	801169e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801168a:	3301      	adds	r3, #1
 801168c:	b2db      	uxtb	r3, r3
 801168e:	79fa      	ldrb	r2, [r7, #7]
 8011690:	429a      	cmp	r2, r3
 8011692:	d101      	bne.n	8011698 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	e006      	b.n	80116a6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	60fb      	str	r3, [r7, #12]
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d1ef      	bne.n	8011684 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80116a4:	2300      	movs	r3, #0
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	3714      	adds	r7, #20
 80116aa:	46bd      	mov	sp, r7
 80116ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b0:	4770      	bx	lr
 80116b2:	bf00      	nop
 80116b4:	2000dc70 	.word	0x2000dc70

080116b8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b082      	sub	sp, #8
 80116bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80116be:	4b0c      	ldr	r3, [pc, #48]	; (80116f0 <pbuf_free_ooseq+0x38>)
 80116c0:	2200      	movs	r2, #0
 80116c2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80116c4:	4b0b      	ldr	r3, [pc, #44]	; (80116f4 <pbuf_free_ooseq+0x3c>)
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	607b      	str	r3, [r7, #4]
 80116ca:	e00a      	b.n	80116e2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d003      	beq.n	80116dc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	f002 f93d 	bl	8013954 <tcp_free_ooseq>
      return;
 80116da:	e005      	b.n	80116e8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	68db      	ldr	r3, [r3, #12]
 80116e0:	607b      	str	r3, [r7, #4]
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d1f1      	bne.n	80116cc <pbuf_free_ooseq+0x14>
    }
  }
}
 80116e8:	3708      	adds	r7, #8
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}
 80116ee:	bf00      	nop
 80116f0:	2000dc78 	.word	0x2000dc78
 80116f4:	2000dc80 	.word	0x2000dc80

080116f8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80116f8:	b480      	push	{r7}
 80116fa:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80116fc:	4b03      	ldr	r3, [pc, #12]	; (801170c <pbuf_pool_is_empty+0x14>)
 80116fe:	2201      	movs	r2, #1
 8011700:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8011702:	bf00      	nop
 8011704:	46bd      	mov	sp, r7
 8011706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170a:	4770      	bx	lr
 801170c:	2000dc78 	.word	0x2000dc78

08011710 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8011710:	b480      	push	{r7}
 8011712:	b085      	sub	sp, #20
 8011714:	af00      	add	r7, sp, #0
 8011716:	60f8      	str	r0, [r7, #12]
 8011718:	60b9      	str	r1, [r7, #8]
 801171a:	4611      	mov	r1, r2
 801171c:	461a      	mov	r2, r3
 801171e:	460b      	mov	r3, r1
 8011720:	80fb      	strh	r3, [r7, #6]
 8011722:	4613      	mov	r3, r2
 8011724:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	2200      	movs	r2, #0
 801172a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	68ba      	ldr	r2, [r7, #8]
 8011730:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	88fa      	ldrh	r2, [r7, #6]
 8011736:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	88ba      	ldrh	r2, [r7, #4]
 801173c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801173e:	8b3b      	ldrh	r3, [r7, #24]
 8011740:	b2da      	uxtb	r2, r3
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	7f3a      	ldrb	r2, [r7, #28]
 801174a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	2201      	movs	r2, #1
 8011750:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	2200      	movs	r2, #0
 8011756:	73da      	strb	r2, [r3, #15]
}
 8011758:	bf00      	nop
 801175a:	3714      	adds	r7, #20
 801175c:	46bd      	mov	sp, r7
 801175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011762:	4770      	bx	lr

08011764 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b08c      	sub	sp, #48	; 0x30
 8011768:	af02      	add	r7, sp, #8
 801176a:	4603      	mov	r3, r0
 801176c:	71fb      	strb	r3, [r7, #7]
 801176e:	460b      	mov	r3, r1
 8011770:	80bb      	strh	r3, [r7, #4]
 8011772:	4613      	mov	r3, r2
 8011774:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8011776:	79fb      	ldrb	r3, [r7, #7]
 8011778:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801177a:	887b      	ldrh	r3, [r7, #2]
 801177c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8011780:	d07f      	beq.n	8011882 <pbuf_alloc+0x11e>
 8011782:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8011786:	f300 80c8 	bgt.w	801191a <pbuf_alloc+0x1b6>
 801178a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801178e:	d010      	beq.n	80117b2 <pbuf_alloc+0x4e>
 8011790:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8011794:	f300 80c1 	bgt.w	801191a <pbuf_alloc+0x1b6>
 8011798:	2b01      	cmp	r3, #1
 801179a:	d002      	beq.n	80117a2 <pbuf_alloc+0x3e>
 801179c:	2b41      	cmp	r3, #65	; 0x41
 801179e:	f040 80bc 	bne.w	801191a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80117a2:	887a      	ldrh	r2, [r7, #2]
 80117a4:	88bb      	ldrh	r3, [r7, #4]
 80117a6:	4619      	mov	r1, r3
 80117a8:	2000      	movs	r0, #0
 80117aa:	f000 f8d1 	bl	8011950 <pbuf_alloc_reference>
 80117ae:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80117b0:	e0bd      	b.n	801192e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80117b2:	2300      	movs	r3, #0
 80117b4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80117b6:	2300      	movs	r3, #0
 80117b8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80117ba:	88bb      	ldrh	r3, [r7, #4]
 80117bc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80117be:	2008      	movs	r0, #8
 80117c0:	f7ff fc56 	bl	8011070 <memp_malloc>
 80117c4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80117c6:	693b      	ldr	r3, [r7, #16]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d109      	bne.n	80117e0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80117cc:	f7ff ff94 	bl	80116f8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80117d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d002      	beq.n	80117dc <pbuf_alloc+0x78>
            pbuf_free(p);
 80117d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80117d8:	f000 faa8 	bl	8011d2c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80117dc:	2300      	movs	r3, #0
 80117de:	e0a7      	b.n	8011930 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80117e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80117e2:	3303      	adds	r3, #3
 80117e4:	b29b      	uxth	r3, r3
 80117e6:	f023 0303 	bic.w	r3, r3, #3
 80117ea:	b29b      	uxth	r3, r3
 80117ec:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80117f0:	b29b      	uxth	r3, r3
 80117f2:	8b7a      	ldrh	r2, [r7, #26]
 80117f4:	4293      	cmp	r3, r2
 80117f6:	bf28      	it	cs
 80117f8:	4613      	movcs	r3, r2
 80117fa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80117fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80117fe:	3310      	adds	r3, #16
 8011800:	693a      	ldr	r2, [r7, #16]
 8011802:	4413      	add	r3, r2
 8011804:	3303      	adds	r3, #3
 8011806:	f023 0303 	bic.w	r3, r3, #3
 801180a:	4618      	mov	r0, r3
 801180c:	89f9      	ldrh	r1, [r7, #14]
 801180e:	8b7a      	ldrh	r2, [r7, #26]
 8011810:	2300      	movs	r3, #0
 8011812:	9301      	str	r3, [sp, #4]
 8011814:	887b      	ldrh	r3, [r7, #2]
 8011816:	9300      	str	r3, [sp, #0]
 8011818:	460b      	mov	r3, r1
 801181a:	4601      	mov	r1, r0
 801181c:	6938      	ldr	r0, [r7, #16]
 801181e:	f7ff ff77 	bl	8011710 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8011822:	693b      	ldr	r3, [r7, #16]
 8011824:	685b      	ldr	r3, [r3, #4]
 8011826:	f003 0303 	and.w	r3, r3, #3
 801182a:	2b00      	cmp	r3, #0
 801182c:	d006      	beq.n	801183c <pbuf_alloc+0xd8>
 801182e:	4b42      	ldr	r3, [pc, #264]	; (8011938 <pbuf_alloc+0x1d4>)
 8011830:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011834:	4941      	ldr	r1, [pc, #260]	; (801193c <pbuf_alloc+0x1d8>)
 8011836:	4842      	ldr	r0, [pc, #264]	; (8011940 <pbuf_alloc+0x1dc>)
 8011838:	f009 f836 	bl	801a8a8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801183c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801183e:	3303      	adds	r3, #3
 8011840:	f023 0303 	bic.w	r3, r3, #3
 8011844:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8011848:	d106      	bne.n	8011858 <pbuf_alloc+0xf4>
 801184a:	4b3b      	ldr	r3, [pc, #236]	; (8011938 <pbuf_alloc+0x1d4>)
 801184c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011850:	493c      	ldr	r1, [pc, #240]	; (8011944 <pbuf_alloc+0x1e0>)
 8011852:	483b      	ldr	r0, [pc, #236]	; (8011940 <pbuf_alloc+0x1dc>)
 8011854:	f009 f828 	bl	801a8a8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8011858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185a:	2b00      	cmp	r3, #0
 801185c:	d102      	bne.n	8011864 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801185e:	693b      	ldr	r3, [r7, #16]
 8011860:	627b      	str	r3, [r7, #36]	; 0x24
 8011862:	e002      	b.n	801186a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011864:	69fb      	ldr	r3, [r7, #28]
 8011866:	693a      	ldr	r2, [r7, #16]
 8011868:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801186a:	693b      	ldr	r3, [r7, #16]
 801186c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801186e:	8b7a      	ldrh	r2, [r7, #26]
 8011870:	89fb      	ldrh	r3, [r7, #14]
 8011872:	1ad3      	subs	r3, r2, r3
 8011874:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8011876:	2300      	movs	r3, #0
 8011878:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801187a:	8b7b      	ldrh	r3, [r7, #26]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d19e      	bne.n	80117be <pbuf_alloc+0x5a>
      break;
 8011880:	e055      	b.n	801192e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8011882:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011884:	3303      	adds	r3, #3
 8011886:	b29b      	uxth	r3, r3
 8011888:	f023 0303 	bic.w	r3, r3, #3
 801188c:	b29a      	uxth	r2, r3
 801188e:	88bb      	ldrh	r3, [r7, #4]
 8011890:	3303      	adds	r3, #3
 8011892:	b29b      	uxth	r3, r3
 8011894:	f023 0303 	bic.w	r3, r3, #3
 8011898:	b29b      	uxth	r3, r3
 801189a:	4413      	add	r3, r2
 801189c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801189e:	8b3b      	ldrh	r3, [r7, #24]
 80118a0:	3310      	adds	r3, #16
 80118a2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80118a4:	8b3a      	ldrh	r2, [r7, #24]
 80118a6:	88bb      	ldrh	r3, [r7, #4]
 80118a8:	3303      	adds	r3, #3
 80118aa:	f023 0303 	bic.w	r3, r3, #3
 80118ae:	429a      	cmp	r2, r3
 80118b0:	d306      	bcc.n	80118c0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80118b2:	8afa      	ldrh	r2, [r7, #22]
 80118b4:	88bb      	ldrh	r3, [r7, #4]
 80118b6:	3303      	adds	r3, #3
 80118b8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80118bc:	429a      	cmp	r2, r3
 80118be:	d201      	bcs.n	80118c4 <pbuf_alloc+0x160>
        return NULL;
 80118c0:	2300      	movs	r3, #0
 80118c2:	e035      	b.n	8011930 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80118c4:	8afb      	ldrh	r3, [r7, #22]
 80118c6:	4618      	mov	r0, r3
 80118c8:	f7ff fa64 	bl	8010d94 <mem_malloc>
 80118cc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80118ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d101      	bne.n	80118d8 <pbuf_alloc+0x174>
        return NULL;
 80118d4:	2300      	movs	r3, #0
 80118d6:	e02b      	b.n	8011930 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80118d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80118da:	3310      	adds	r3, #16
 80118dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118de:	4413      	add	r3, r2
 80118e0:	3303      	adds	r3, #3
 80118e2:	f023 0303 	bic.w	r3, r3, #3
 80118e6:	4618      	mov	r0, r3
 80118e8:	88b9      	ldrh	r1, [r7, #4]
 80118ea:	88ba      	ldrh	r2, [r7, #4]
 80118ec:	2300      	movs	r3, #0
 80118ee:	9301      	str	r3, [sp, #4]
 80118f0:	887b      	ldrh	r3, [r7, #2]
 80118f2:	9300      	str	r3, [sp, #0]
 80118f4:	460b      	mov	r3, r1
 80118f6:	4601      	mov	r1, r0
 80118f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80118fa:	f7ff ff09 	bl	8011710 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80118fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011900:	685b      	ldr	r3, [r3, #4]
 8011902:	f003 0303 	and.w	r3, r3, #3
 8011906:	2b00      	cmp	r3, #0
 8011908:	d010      	beq.n	801192c <pbuf_alloc+0x1c8>
 801190a:	4b0b      	ldr	r3, [pc, #44]	; (8011938 <pbuf_alloc+0x1d4>)
 801190c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8011910:	490d      	ldr	r1, [pc, #52]	; (8011948 <pbuf_alloc+0x1e4>)
 8011912:	480b      	ldr	r0, [pc, #44]	; (8011940 <pbuf_alloc+0x1dc>)
 8011914:	f008 ffc8 	bl	801a8a8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011918:	e008      	b.n	801192c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801191a:	4b07      	ldr	r3, [pc, #28]	; (8011938 <pbuf_alloc+0x1d4>)
 801191c:	f240 1227 	movw	r2, #295	; 0x127
 8011920:	490a      	ldr	r1, [pc, #40]	; (801194c <pbuf_alloc+0x1e8>)
 8011922:	4807      	ldr	r0, [pc, #28]	; (8011940 <pbuf_alloc+0x1dc>)
 8011924:	f008 ffc0 	bl	801a8a8 <iprintf>
      return NULL;
 8011928:	2300      	movs	r3, #0
 801192a:	e001      	b.n	8011930 <pbuf_alloc+0x1cc>
      break;
 801192c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011930:	4618      	mov	r0, r3
 8011932:	3728      	adds	r7, #40	; 0x28
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}
 8011938:	0801c4b8 	.word	0x0801c4b8
 801193c:	0801c4e8 	.word	0x0801c4e8
 8011940:	0801c518 	.word	0x0801c518
 8011944:	0801c540 	.word	0x0801c540
 8011948:	0801c574 	.word	0x0801c574
 801194c:	0801c5a0 	.word	0x0801c5a0

08011950 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b086      	sub	sp, #24
 8011954:	af02      	add	r7, sp, #8
 8011956:	6078      	str	r0, [r7, #4]
 8011958:	460b      	mov	r3, r1
 801195a:	807b      	strh	r3, [r7, #2]
 801195c:	4613      	mov	r3, r2
 801195e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8011960:	883b      	ldrh	r3, [r7, #0]
 8011962:	2b41      	cmp	r3, #65	; 0x41
 8011964:	d009      	beq.n	801197a <pbuf_alloc_reference+0x2a>
 8011966:	883b      	ldrh	r3, [r7, #0]
 8011968:	2b01      	cmp	r3, #1
 801196a:	d006      	beq.n	801197a <pbuf_alloc_reference+0x2a>
 801196c:	4b0f      	ldr	r3, [pc, #60]	; (80119ac <pbuf_alloc_reference+0x5c>)
 801196e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8011972:	490f      	ldr	r1, [pc, #60]	; (80119b0 <pbuf_alloc_reference+0x60>)
 8011974:	480f      	ldr	r0, [pc, #60]	; (80119b4 <pbuf_alloc_reference+0x64>)
 8011976:	f008 ff97 	bl	801a8a8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801197a:	2007      	movs	r0, #7
 801197c:	f7ff fb78 	bl	8011070 <memp_malloc>
 8011980:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d101      	bne.n	801198c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8011988:	2300      	movs	r3, #0
 801198a:	e00b      	b.n	80119a4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801198c:	8879      	ldrh	r1, [r7, #2]
 801198e:	887a      	ldrh	r2, [r7, #2]
 8011990:	2300      	movs	r3, #0
 8011992:	9301      	str	r3, [sp, #4]
 8011994:	883b      	ldrh	r3, [r7, #0]
 8011996:	9300      	str	r3, [sp, #0]
 8011998:	460b      	mov	r3, r1
 801199a:	6879      	ldr	r1, [r7, #4]
 801199c:	68f8      	ldr	r0, [r7, #12]
 801199e:	f7ff feb7 	bl	8011710 <pbuf_init_alloced_pbuf>
  return p;
 80119a2:	68fb      	ldr	r3, [r7, #12]
}
 80119a4:	4618      	mov	r0, r3
 80119a6:	3710      	adds	r7, #16
 80119a8:	46bd      	mov	sp, r7
 80119aa:	bd80      	pop	{r7, pc}
 80119ac:	0801c4b8 	.word	0x0801c4b8
 80119b0:	0801c5bc 	.word	0x0801c5bc
 80119b4:	0801c518 	.word	0x0801c518

080119b8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b088      	sub	sp, #32
 80119bc:	af02      	add	r7, sp, #8
 80119be:	607b      	str	r3, [r7, #4]
 80119c0:	4603      	mov	r3, r0
 80119c2:	73fb      	strb	r3, [r7, #15]
 80119c4:	460b      	mov	r3, r1
 80119c6:	81bb      	strh	r3, [r7, #12]
 80119c8:	4613      	mov	r3, r2
 80119ca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80119cc:	7bfb      	ldrb	r3, [r7, #15]
 80119ce:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80119d0:	8a7b      	ldrh	r3, [r7, #18]
 80119d2:	3303      	adds	r3, #3
 80119d4:	f023 0203 	bic.w	r2, r3, #3
 80119d8:	89bb      	ldrh	r3, [r7, #12]
 80119da:	441a      	add	r2, r3
 80119dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80119de:	429a      	cmp	r2, r3
 80119e0:	d901      	bls.n	80119e6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80119e2:	2300      	movs	r3, #0
 80119e4:	e018      	b.n	8011a18 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80119e6:	6a3b      	ldr	r3, [r7, #32]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d007      	beq.n	80119fc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80119ec:	8a7b      	ldrh	r3, [r7, #18]
 80119ee:	3303      	adds	r3, #3
 80119f0:	f023 0303 	bic.w	r3, r3, #3
 80119f4:	6a3a      	ldr	r2, [r7, #32]
 80119f6:	4413      	add	r3, r2
 80119f8:	617b      	str	r3, [r7, #20]
 80119fa:	e001      	b.n	8011a00 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80119fc:	2300      	movs	r3, #0
 80119fe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	89b9      	ldrh	r1, [r7, #12]
 8011a04:	89ba      	ldrh	r2, [r7, #12]
 8011a06:	2302      	movs	r3, #2
 8011a08:	9301      	str	r3, [sp, #4]
 8011a0a:	897b      	ldrh	r3, [r7, #10]
 8011a0c:	9300      	str	r3, [sp, #0]
 8011a0e:	460b      	mov	r3, r1
 8011a10:	6979      	ldr	r1, [r7, #20]
 8011a12:	f7ff fe7d 	bl	8011710 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8011a16:	687b      	ldr	r3, [r7, #4]
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	3718      	adds	r7, #24
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}

08011a20 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b084      	sub	sp, #16
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
 8011a28:	460b      	mov	r3, r1
 8011a2a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d106      	bne.n	8011a40 <pbuf_realloc+0x20>
 8011a32:	4b3a      	ldr	r3, [pc, #232]	; (8011b1c <pbuf_realloc+0xfc>)
 8011a34:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8011a38:	4939      	ldr	r1, [pc, #228]	; (8011b20 <pbuf_realloc+0x100>)
 8011a3a:	483a      	ldr	r0, [pc, #232]	; (8011b24 <pbuf_realloc+0x104>)
 8011a3c:	f008 ff34 	bl	801a8a8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	891b      	ldrh	r3, [r3, #8]
 8011a44:	887a      	ldrh	r2, [r7, #2]
 8011a46:	429a      	cmp	r2, r3
 8011a48:	d263      	bcs.n	8011b12 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	891a      	ldrh	r2, [r3, #8]
 8011a4e:	887b      	ldrh	r3, [r7, #2]
 8011a50:	1ad3      	subs	r3, r2, r3
 8011a52:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8011a54:	887b      	ldrh	r3, [r7, #2]
 8011a56:	817b      	strh	r3, [r7, #10]
  q = p;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011a5c:	e018      	b.n	8011a90 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	895b      	ldrh	r3, [r3, #10]
 8011a62:	897a      	ldrh	r2, [r7, #10]
 8011a64:	1ad3      	subs	r3, r2, r3
 8011a66:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	891a      	ldrh	r2, [r3, #8]
 8011a6c:	893b      	ldrh	r3, [r7, #8]
 8011a6e:	1ad3      	subs	r3, r2, r3
 8011a70:	b29a      	uxth	r2, r3
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d106      	bne.n	8011a90 <pbuf_realloc+0x70>
 8011a82:	4b26      	ldr	r3, [pc, #152]	; (8011b1c <pbuf_realloc+0xfc>)
 8011a84:	f240 12af 	movw	r2, #431	; 0x1af
 8011a88:	4927      	ldr	r1, [pc, #156]	; (8011b28 <pbuf_realloc+0x108>)
 8011a8a:	4826      	ldr	r0, [pc, #152]	; (8011b24 <pbuf_realloc+0x104>)
 8011a8c:	f008 ff0c 	bl	801a8a8 <iprintf>
  while (rem_len > q->len) {
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	895b      	ldrh	r3, [r3, #10]
 8011a94:	897a      	ldrh	r2, [r7, #10]
 8011a96:	429a      	cmp	r2, r3
 8011a98:	d8e1      	bhi.n	8011a5e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	7b1b      	ldrb	r3, [r3, #12]
 8011a9e:	f003 030f 	and.w	r3, r3, #15
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d121      	bne.n	8011aea <pbuf_realloc+0xca>
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	895b      	ldrh	r3, [r3, #10]
 8011aaa:	897a      	ldrh	r2, [r7, #10]
 8011aac:	429a      	cmp	r2, r3
 8011aae:	d01c      	beq.n	8011aea <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	7b5b      	ldrb	r3, [r3, #13]
 8011ab4:	f003 0302 	and.w	r3, r3, #2
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d116      	bne.n	8011aea <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	685a      	ldr	r2, [r3, #4]
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	1ad3      	subs	r3, r2, r3
 8011ac4:	b29a      	uxth	r2, r3
 8011ac6:	897b      	ldrh	r3, [r7, #10]
 8011ac8:	4413      	add	r3, r2
 8011aca:	b29b      	uxth	r3, r3
 8011acc:	4619      	mov	r1, r3
 8011ace:	68f8      	ldr	r0, [r7, #12]
 8011ad0:	f7ff f864 	bl	8010b9c <mem_trim>
 8011ad4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d106      	bne.n	8011aea <pbuf_realloc+0xca>
 8011adc:	4b0f      	ldr	r3, [pc, #60]	; (8011b1c <pbuf_realloc+0xfc>)
 8011ade:	f240 12bd 	movw	r2, #445	; 0x1bd
 8011ae2:	4912      	ldr	r1, [pc, #72]	; (8011b2c <pbuf_realloc+0x10c>)
 8011ae4:	480f      	ldr	r0, [pc, #60]	; (8011b24 <pbuf_realloc+0x104>)
 8011ae6:	f008 fedf 	bl	801a8a8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	897a      	ldrh	r2, [r7, #10]
 8011aee:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	895a      	ldrh	r2, [r3, #10]
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d004      	beq.n	8011b0a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	4618      	mov	r0, r3
 8011b06:	f000 f911 	bl	8011d2c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	601a      	str	r2, [r3, #0]
 8011b10:	e000      	b.n	8011b14 <pbuf_realloc+0xf4>
    return;
 8011b12:	bf00      	nop

}
 8011b14:	3710      	adds	r7, #16
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd80      	pop	{r7, pc}
 8011b1a:	bf00      	nop
 8011b1c:	0801c4b8 	.word	0x0801c4b8
 8011b20:	0801c5d0 	.word	0x0801c5d0
 8011b24:	0801c518 	.word	0x0801c518
 8011b28:	0801c5e8 	.word	0x0801c5e8
 8011b2c:	0801c600 	.word	0x0801c600

08011b30 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b086      	sub	sp, #24
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	60f8      	str	r0, [r7, #12]
 8011b38:	60b9      	str	r1, [r7, #8]
 8011b3a:	4613      	mov	r3, r2
 8011b3c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d106      	bne.n	8011b52 <pbuf_add_header_impl+0x22>
 8011b44:	4b2b      	ldr	r3, [pc, #172]	; (8011bf4 <pbuf_add_header_impl+0xc4>)
 8011b46:	f240 12df 	movw	r2, #479	; 0x1df
 8011b4a:	492b      	ldr	r1, [pc, #172]	; (8011bf8 <pbuf_add_header_impl+0xc8>)
 8011b4c:	482b      	ldr	r0, [pc, #172]	; (8011bfc <pbuf_add_header_impl+0xcc>)
 8011b4e:	f008 feab 	bl	801a8a8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d003      	beq.n	8011b60 <pbuf_add_header_impl+0x30>
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b5e:	d301      	bcc.n	8011b64 <pbuf_add_header_impl+0x34>
    return 1;
 8011b60:	2301      	movs	r3, #1
 8011b62:	e043      	b.n	8011bec <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d101      	bne.n	8011b6e <pbuf_add_header_impl+0x3e>
    return 0;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	e03e      	b.n	8011bec <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8011b6e:	68bb      	ldr	r3, [r7, #8]
 8011b70:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	891a      	ldrh	r2, [r3, #8]
 8011b76:	8a7b      	ldrh	r3, [r7, #18]
 8011b78:	4413      	add	r3, r2
 8011b7a:	b29b      	uxth	r3, r3
 8011b7c:	8a7a      	ldrh	r2, [r7, #18]
 8011b7e:	429a      	cmp	r2, r3
 8011b80:	d901      	bls.n	8011b86 <pbuf_add_header_impl+0x56>
    return 1;
 8011b82:	2301      	movs	r3, #1
 8011b84:	e032      	b.n	8011bec <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	7b1b      	ldrb	r3, [r3, #12]
 8011b8a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011b8c:	8a3b      	ldrh	r3, [r7, #16]
 8011b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d00c      	beq.n	8011bb0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	685a      	ldr	r2, [r3, #4]
 8011b9a:	68bb      	ldr	r3, [r7, #8]
 8011b9c:	425b      	negs	r3, r3
 8011b9e:	4413      	add	r3, r2
 8011ba0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	3310      	adds	r3, #16
 8011ba6:	697a      	ldr	r2, [r7, #20]
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	d20d      	bcs.n	8011bc8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011bac:	2301      	movs	r3, #1
 8011bae:	e01d      	b.n	8011bec <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011bb0:	79fb      	ldrb	r3, [r7, #7]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d006      	beq.n	8011bc4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	685a      	ldr	r2, [r3, #4]
 8011bba:	68bb      	ldr	r3, [r7, #8]
 8011bbc:	425b      	negs	r3, r3
 8011bbe:	4413      	add	r3, r2
 8011bc0:	617b      	str	r3, [r7, #20]
 8011bc2:	e001      	b.n	8011bc8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011bc4:	2301      	movs	r3, #1
 8011bc6:	e011      	b.n	8011bec <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	697a      	ldr	r2, [r7, #20]
 8011bcc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	895a      	ldrh	r2, [r3, #10]
 8011bd2:	8a7b      	ldrh	r3, [r7, #18]
 8011bd4:	4413      	add	r3, r2
 8011bd6:	b29a      	uxth	r2, r3
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	891a      	ldrh	r2, [r3, #8]
 8011be0:	8a7b      	ldrh	r3, [r7, #18]
 8011be2:	4413      	add	r3, r2
 8011be4:	b29a      	uxth	r2, r3
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	811a      	strh	r2, [r3, #8]


  return 0;
 8011bea:	2300      	movs	r3, #0
}
 8011bec:	4618      	mov	r0, r3
 8011bee:	3718      	adds	r7, #24
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd80      	pop	{r7, pc}
 8011bf4:	0801c4b8 	.word	0x0801c4b8
 8011bf8:	0801c61c 	.word	0x0801c61c
 8011bfc:	0801c518 	.word	0x0801c518

08011c00 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b082      	sub	sp, #8
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
 8011c08:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	6839      	ldr	r1, [r7, #0]
 8011c0e:	6878      	ldr	r0, [r7, #4]
 8011c10:	f7ff ff8e 	bl	8011b30 <pbuf_add_header_impl>
 8011c14:	4603      	mov	r3, r0
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3708      	adds	r7, #8
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}
	...

08011c20 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b084      	sub	sp, #16
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
 8011c28:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d106      	bne.n	8011c3e <pbuf_remove_header+0x1e>
 8011c30:	4b20      	ldr	r3, [pc, #128]	; (8011cb4 <pbuf_remove_header+0x94>)
 8011c32:	f240 224b 	movw	r2, #587	; 0x24b
 8011c36:	4920      	ldr	r1, [pc, #128]	; (8011cb8 <pbuf_remove_header+0x98>)
 8011c38:	4820      	ldr	r0, [pc, #128]	; (8011cbc <pbuf_remove_header+0x9c>)
 8011c3a:	f008 fe35 	bl	801a8a8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d003      	beq.n	8011c4c <pbuf_remove_header+0x2c>
 8011c44:	683b      	ldr	r3, [r7, #0]
 8011c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c4a:	d301      	bcc.n	8011c50 <pbuf_remove_header+0x30>
    return 1;
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	e02c      	b.n	8011caa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011c50:	683b      	ldr	r3, [r7, #0]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d101      	bne.n	8011c5a <pbuf_remove_header+0x3a>
    return 0;
 8011c56:	2300      	movs	r3, #0
 8011c58:	e027      	b.n	8011caa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	895b      	ldrh	r3, [r3, #10]
 8011c62:	89fa      	ldrh	r2, [r7, #14]
 8011c64:	429a      	cmp	r2, r3
 8011c66:	d908      	bls.n	8011c7a <pbuf_remove_header+0x5a>
 8011c68:	4b12      	ldr	r3, [pc, #72]	; (8011cb4 <pbuf_remove_header+0x94>)
 8011c6a:	f240 2255 	movw	r2, #597	; 0x255
 8011c6e:	4914      	ldr	r1, [pc, #80]	; (8011cc0 <pbuf_remove_header+0xa0>)
 8011c70:	4812      	ldr	r0, [pc, #72]	; (8011cbc <pbuf_remove_header+0x9c>)
 8011c72:	f008 fe19 	bl	801a8a8 <iprintf>
 8011c76:	2301      	movs	r3, #1
 8011c78:	e017      	b.n	8011caa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	685b      	ldr	r3, [r3, #4]
 8011c7e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	685a      	ldr	r2, [r3, #4]
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	441a      	add	r2, r3
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	895a      	ldrh	r2, [r3, #10]
 8011c90:	89fb      	ldrh	r3, [r7, #14]
 8011c92:	1ad3      	subs	r3, r2, r3
 8011c94:	b29a      	uxth	r2, r3
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	891a      	ldrh	r2, [r3, #8]
 8011c9e:	89fb      	ldrh	r3, [r7, #14]
 8011ca0:	1ad3      	subs	r3, r2, r3
 8011ca2:	b29a      	uxth	r2, r3
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8011ca8:	2300      	movs	r3, #0
}
 8011caa:	4618      	mov	r0, r3
 8011cac:	3710      	adds	r7, #16
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	bd80      	pop	{r7, pc}
 8011cb2:	bf00      	nop
 8011cb4:	0801c4b8 	.word	0x0801c4b8
 8011cb8:	0801c61c 	.word	0x0801c61c
 8011cbc:	0801c518 	.word	0x0801c518
 8011cc0:	0801c628 	.word	0x0801c628

08011cc4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b082      	sub	sp, #8
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
 8011ccc:	460b      	mov	r3, r1
 8011cce:	807b      	strh	r3, [r7, #2]
 8011cd0:	4613      	mov	r3, r2
 8011cd2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011cd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	da08      	bge.n	8011cee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011cdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011ce0:	425b      	negs	r3, r3
 8011ce2:	4619      	mov	r1, r3
 8011ce4:	6878      	ldr	r0, [r7, #4]
 8011ce6:	f7ff ff9b 	bl	8011c20 <pbuf_remove_header>
 8011cea:	4603      	mov	r3, r0
 8011cec:	e007      	b.n	8011cfe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8011cee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011cf2:	787a      	ldrb	r2, [r7, #1]
 8011cf4:	4619      	mov	r1, r3
 8011cf6:	6878      	ldr	r0, [r7, #4]
 8011cf8:	f7ff ff1a 	bl	8011b30 <pbuf_add_header_impl>
 8011cfc:	4603      	mov	r3, r0
  }
}
 8011cfe:	4618      	mov	r0, r3
 8011d00:	3708      	adds	r7, #8
 8011d02:	46bd      	mov	sp, r7
 8011d04:	bd80      	pop	{r7, pc}

08011d06 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8011d06:	b580      	push	{r7, lr}
 8011d08:	b082      	sub	sp, #8
 8011d0a:	af00      	add	r7, sp, #0
 8011d0c:	6078      	str	r0, [r7, #4]
 8011d0e:	460b      	mov	r3, r1
 8011d10:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8011d12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011d16:	2201      	movs	r2, #1
 8011d18:	4619      	mov	r1, r3
 8011d1a:	6878      	ldr	r0, [r7, #4]
 8011d1c:	f7ff ffd2 	bl	8011cc4 <pbuf_header_impl>
 8011d20:	4603      	mov	r3, r0
}
 8011d22:	4618      	mov	r0, r3
 8011d24:	3708      	adds	r7, #8
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd80      	pop	{r7, pc}
	...

08011d2c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b086      	sub	sp, #24
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d10b      	bne.n	8011d52 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d106      	bne.n	8011d4e <pbuf_free+0x22>
 8011d40:	4b38      	ldr	r3, [pc, #224]	; (8011e24 <pbuf_free+0xf8>)
 8011d42:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8011d46:	4938      	ldr	r1, [pc, #224]	; (8011e28 <pbuf_free+0xfc>)
 8011d48:	4838      	ldr	r0, [pc, #224]	; (8011e2c <pbuf_free+0x100>)
 8011d4a:	f008 fdad 	bl	801a8a8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	e063      	b.n	8011e1a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8011d52:	2300      	movs	r3, #0
 8011d54:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011d56:	e05c      	b.n	8011e12 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	7b9b      	ldrb	r3, [r3, #14]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d106      	bne.n	8011d6e <pbuf_free+0x42>
 8011d60:	4b30      	ldr	r3, [pc, #192]	; (8011e24 <pbuf_free+0xf8>)
 8011d62:	f240 22f1 	movw	r2, #753	; 0x2f1
 8011d66:	4932      	ldr	r1, [pc, #200]	; (8011e30 <pbuf_free+0x104>)
 8011d68:	4830      	ldr	r0, [pc, #192]	; (8011e2c <pbuf_free+0x100>)
 8011d6a:	f008 fd9d 	bl	801a8a8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	7b9b      	ldrb	r3, [r3, #14]
 8011d72:	3b01      	subs	r3, #1
 8011d74:	b2da      	uxtb	r2, r3
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	739a      	strb	r2, [r3, #14]
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	7b9b      	ldrb	r3, [r3, #14]
 8011d7e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011d80:	7dbb      	ldrb	r3, [r7, #22]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d143      	bne.n	8011e0e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	7b1b      	ldrb	r3, [r3, #12]
 8011d90:	f003 030f 	and.w	r3, r3, #15
 8011d94:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	7b5b      	ldrb	r3, [r3, #13]
 8011d9a:	f003 0302 	and.w	r3, r3, #2
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d011      	beq.n	8011dc6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	691b      	ldr	r3, [r3, #16]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d106      	bne.n	8011dbc <pbuf_free+0x90>
 8011dae:	4b1d      	ldr	r3, [pc, #116]	; (8011e24 <pbuf_free+0xf8>)
 8011db0:	f240 22ff 	movw	r2, #767	; 0x2ff
 8011db4:	491f      	ldr	r1, [pc, #124]	; (8011e34 <pbuf_free+0x108>)
 8011db6:	481d      	ldr	r0, [pc, #116]	; (8011e2c <pbuf_free+0x100>)
 8011db8:	f008 fd76 	bl	801a8a8 <iprintf>
        pc->custom_free_function(p);
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	691b      	ldr	r3, [r3, #16]
 8011dc0:	6878      	ldr	r0, [r7, #4]
 8011dc2:	4798      	blx	r3
 8011dc4:	e01d      	b.n	8011e02 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8011dc6:	7bfb      	ldrb	r3, [r7, #15]
 8011dc8:	2b02      	cmp	r3, #2
 8011dca:	d104      	bne.n	8011dd6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8011dcc:	6879      	ldr	r1, [r7, #4]
 8011dce:	2008      	movs	r0, #8
 8011dd0:	f7ff f99a 	bl	8011108 <memp_free>
 8011dd4:	e015      	b.n	8011e02 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8011dd6:	7bfb      	ldrb	r3, [r7, #15]
 8011dd8:	2b01      	cmp	r3, #1
 8011dda:	d104      	bne.n	8011de6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8011ddc:	6879      	ldr	r1, [r7, #4]
 8011dde:	2007      	movs	r0, #7
 8011de0:	f7ff f992 	bl	8011108 <memp_free>
 8011de4:	e00d      	b.n	8011e02 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8011de6:	7bfb      	ldrb	r3, [r7, #15]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d103      	bne.n	8011df4 <pbuf_free+0xc8>
          mem_free(p);
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f7fe fe6b 	bl	8010ac8 <mem_free>
 8011df2:	e006      	b.n	8011e02 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011df4:	4b0b      	ldr	r3, [pc, #44]	; (8011e24 <pbuf_free+0xf8>)
 8011df6:	f240 320f 	movw	r2, #783	; 0x30f
 8011dfa:	490f      	ldr	r1, [pc, #60]	; (8011e38 <pbuf_free+0x10c>)
 8011dfc:	480b      	ldr	r0, [pc, #44]	; (8011e2c <pbuf_free+0x100>)
 8011dfe:	f008 fd53 	bl	801a8a8 <iprintf>
        }
      }
      count++;
 8011e02:	7dfb      	ldrb	r3, [r7, #23]
 8011e04:	3301      	adds	r3, #1
 8011e06:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8011e08:	693b      	ldr	r3, [r7, #16]
 8011e0a:	607b      	str	r3, [r7, #4]
 8011e0c:	e001      	b.n	8011e12 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8011e0e:	2300      	movs	r3, #0
 8011e10:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d19f      	bne.n	8011d58 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	3718      	adds	r7, #24
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bd80      	pop	{r7, pc}
 8011e22:	bf00      	nop
 8011e24:	0801c4b8 	.word	0x0801c4b8
 8011e28:	0801c61c 	.word	0x0801c61c
 8011e2c:	0801c518 	.word	0x0801c518
 8011e30:	0801c648 	.word	0x0801c648
 8011e34:	0801c660 	.word	0x0801c660
 8011e38:	0801c684 	.word	0x0801c684

08011e3c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011e3c:	b480      	push	{r7}
 8011e3e:	b085      	sub	sp, #20
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8011e44:	2300      	movs	r3, #0
 8011e46:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011e48:	e005      	b.n	8011e56 <pbuf_clen+0x1a>
    ++len;
 8011e4a:	89fb      	ldrh	r3, [r7, #14]
 8011e4c:	3301      	adds	r3, #1
 8011e4e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d1f6      	bne.n	8011e4a <pbuf_clen+0xe>
  }
  return len;
 8011e5c:	89fb      	ldrh	r3, [r7, #14]
}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	3714      	adds	r7, #20
 8011e62:	46bd      	mov	sp, r7
 8011e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e68:	4770      	bx	lr
	...

08011e6c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b082      	sub	sp, #8
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d010      	beq.n	8011e9c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	7b9b      	ldrb	r3, [r3, #14]
 8011e7e:	3301      	adds	r3, #1
 8011e80:	b2da      	uxtb	r2, r3
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	7b9b      	ldrb	r3, [r3, #14]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d106      	bne.n	8011e9c <pbuf_ref+0x30>
 8011e8e:	4b05      	ldr	r3, [pc, #20]	; (8011ea4 <pbuf_ref+0x38>)
 8011e90:	f240 3242 	movw	r2, #834	; 0x342
 8011e94:	4904      	ldr	r1, [pc, #16]	; (8011ea8 <pbuf_ref+0x3c>)
 8011e96:	4805      	ldr	r0, [pc, #20]	; (8011eac <pbuf_ref+0x40>)
 8011e98:	f008 fd06 	bl	801a8a8 <iprintf>
  }
}
 8011e9c:	bf00      	nop
 8011e9e:	3708      	adds	r7, #8
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd80      	pop	{r7, pc}
 8011ea4:	0801c4b8 	.word	0x0801c4b8
 8011ea8:	0801c698 	.word	0x0801c698
 8011eac:	0801c518 	.word	0x0801c518

08011eb0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b084      	sub	sp, #16
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
 8011eb8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d002      	beq.n	8011ec6 <pbuf_cat+0x16>
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d107      	bne.n	8011ed6 <pbuf_cat+0x26>
 8011ec6:	4b20      	ldr	r3, [pc, #128]	; (8011f48 <pbuf_cat+0x98>)
 8011ec8:	f240 3259 	movw	r2, #857	; 0x359
 8011ecc:	491f      	ldr	r1, [pc, #124]	; (8011f4c <pbuf_cat+0x9c>)
 8011ece:	4820      	ldr	r0, [pc, #128]	; (8011f50 <pbuf_cat+0xa0>)
 8011ed0:	f008 fcea 	bl	801a8a8 <iprintf>
 8011ed4:	e034      	b.n	8011f40 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	60fb      	str	r3, [r7, #12]
 8011eda:	e00a      	b.n	8011ef2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	891a      	ldrh	r2, [r3, #8]
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	891b      	ldrh	r3, [r3, #8]
 8011ee4:	4413      	add	r3, r2
 8011ee6:	b29a      	uxth	r2, r3
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	60fb      	str	r3, [r7, #12]
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d1f0      	bne.n	8011edc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	891a      	ldrh	r2, [r3, #8]
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	895b      	ldrh	r3, [r3, #10]
 8011f02:	429a      	cmp	r2, r3
 8011f04:	d006      	beq.n	8011f14 <pbuf_cat+0x64>
 8011f06:	4b10      	ldr	r3, [pc, #64]	; (8011f48 <pbuf_cat+0x98>)
 8011f08:	f240 3262 	movw	r2, #866	; 0x362
 8011f0c:	4911      	ldr	r1, [pc, #68]	; (8011f54 <pbuf_cat+0xa4>)
 8011f0e:	4810      	ldr	r0, [pc, #64]	; (8011f50 <pbuf_cat+0xa0>)
 8011f10:	f008 fcca 	bl	801a8a8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d006      	beq.n	8011f2a <pbuf_cat+0x7a>
 8011f1c:	4b0a      	ldr	r3, [pc, #40]	; (8011f48 <pbuf_cat+0x98>)
 8011f1e:	f240 3263 	movw	r2, #867	; 0x363
 8011f22:	490d      	ldr	r1, [pc, #52]	; (8011f58 <pbuf_cat+0xa8>)
 8011f24:	480a      	ldr	r0, [pc, #40]	; (8011f50 <pbuf_cat+0xa0>)
 8011f26:	f008 fcbf 	bl	801a8a8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	891a      	ldrh	r2, [r3, #8]
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	891b      	ldrh	r3, [r3, #8]
 8011f32:	4413      	add	r3, r2
 8011f34:	b29a      	uxth	r2, r3
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	683a      	ldr	r2, [r7, #0]
 8011f3e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011f40:	3710      	adds	r7, #16
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}
 8011f46:	bf00      	nop
 8011f48:	0801c4b8 	.word	0x0801c4b8
 8011f4c:	0801c6ac 	.word	0x0801c6ac
 8011f50:	0801c518 	.word	0x0801c518
 8011f54:	0801c6e4 	.word	0x0801c6e4
 8011f58:	0801c714 	.word	0x0801c714

08011f5c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b086      	sub	sp, #24
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
 8011f64:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8011f66:	2300      	movs	r3, #0
 8011f68:	617b      	str	r3, [r7, #20]
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d008      	beq.n	8011f86 <pbuf_copy+0x2a>
 8011f74:	683b      	ldr	r3, [r7, #0]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d005      	beq.n	8011f86 <pbuf_copy+0x2a>
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	891a      	ldrh	r2, [r3, #8]
 8011f7e:	683b      	ldr	r3, [r7, #0]
 8011f80:	891b      	ldrh	r3, [r3, #8]
 8011f82:	429a      	cmp	r2, r3
 8011f84:	d209      	bcs.n	8011f9a <pbuf_copy+0x3e>
 8011f86:	4b57      	ldr	r3, [pc, #348]	; (80120e4 <pbuf_copy+0x188>)
 8011f88:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011f8c:	4956      	ldr	r1, [pc, #344]	; (80120e8 <pbuf_copy+0x18c>)
 8011f8e:	4857      	ldr	r0, [pc, #348]	; (80120ec <pbuf_copy+0x190>)
 8011f90:	f008 fc8a 	bl	801a8a8 <iprintf>
 8011f94:	f06f 030f 	mvn.w	r3, #15
 8011f98:	e09f      	b.n	80120da <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	895b      	ldrh	r3, [r3, #10]
 8011f9e:	461a      	mov	r2, r3
 8011fa0:	697b      	ldr	r3, [r7, #20]
 8011fa2:	1ad2      	subs	r2, r2, r3
 8011fa4:	683b      	ldr	r3, [r7, #0]
 8011fa6:	895b      	ldrh	r3, [r3, #10]
 8011fa8:	4619      	mov	r1, r3
 8011faa:	693b      	ldr	r3, [r7, #16]
 8011fac:	1acb      	subs	r3, r1, r3
 8011fae:	429a      	cmp	r2, r3
 8011fb0:	d306      	bcc.n	8011fc0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8011fb2:	683b      	ldr	r3, [r7, #0]
 8011fb4:	895b      	ldrh	r3, [r3, #10]
 8011fb6:	461a      	mov	r2, r3
 8011fb8:	693b      	ldr	r3, [r7, #16]
 8011fba:	1ad3      	subs	r3, r2, r3
 8011fbc:	60fb      	str	r3, [r7, #12]
 8011fbe:	e005      	b.n	8011fcc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	895b      	ldrh	r3, [r3, #10]
 8011fc4:	461a      	mov	r2, r3
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	1ad3      	subs	r3, r2, r3
 8011fca:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	685a      	ldr	r2, [r3, #4]
 8011fd0:	697b      	ldr	r3, [r7, #20]
 8011fd2:	18d0      	adds	r0, r2, r3
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	685a      	ldr	r2, [r3, #4]
 8011fd8:	693b      	ldr	r3, [r7, #16]
 8011fda:	4413      	add	r3, r2
 8011fdc:	68fa      	ldr	r2, [r7, #12]
 8011fde:	4619      	mov	r1, r3
 8011fe0:	f008 fba2 	bl	801a728 <memcpy>
    offset_to += len;
 8011fe4:	697a      	ldr	r2, [r7, #20]
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	4413      	add	r3, r2
 8011fea:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011fec:	693a      	ldr	r2, [r7, #16]
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	4413      	add	r3, r2
 8011ff2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	895b      	ldrh	r3, [r3, #10]
 8011ff8:	461a      	mov	r2, r3
 8011ffa:	697b      	ldr	r3, [r7, #20]
 8011ffc:	4293      	cmp	r3, r2
 8011ffe:	d906      	bls.n	801200e <pbuf_copy+0xb2>
 8012000:	4b38      	ldr	r3, [pc, #224]	; (80120e4 <pbuf_copy+0x188>)
 8012002:	f240 32d9 	movw	r2, #985	; 0x3d9
 8012006:	493a      	ldr	r1, [pc, #232]	; (80120f0 <pbuf_copy+0x194>)
 8012008:	4838      	ldr	r0, [pc, #224]	; (80120ec <pbuf_copy+0x190>)
 801200a:	f008 fc4d 	bl	801a8a8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	895b      	ldrh	r3, [r3, #10]
 8012012:	461a      	mov	r2, r3
 8012014:	693b      	ldr	r3, [r7, #16]
 8012016:	4293      	cmp	r3, r2
 8012018:	d906      	bls.n	8012028 <pbuf_copy+0xcc>
 801201a:	4b32      	ldr	r3, [pc, #200]	; (80120e4 <pbuf_copy+0x188>)
 801201c:	f240 32da 	movw	r2, #986	; 0x3da
 8012020:	4934      	ldr	r1, [pc, #208]	; (80120f4 <pbuf_copy+0x198>)
 8012022:	4832      	ldr	r0, [pc, #200]	; (80120ec <pbuf_copy+0x190>)
 8012024:	f008 fc40 	bl	801a8a8 <iprintf>
    if (offset_from >= p_from->len) {
 8012028:	683b      	ldr	r3, [r7, #0]
 801202a:	895b      	ldrh	r3, [r3, #10]
 801202c:	461a      	mov	r2, r3
 801202e:	693b      	ldr	r3, [r7, #16]
 8012030:	4293      	cmp	r3, r2
 8012032:	d304      	bcc.n	801203e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8012034:	2300      	movs	r3, #0
 8012036:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8012038:	683b      	ldr	r3, [r7, #0]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	895b      	ldrh	r3, [r3, #10]
 8012042:	461a      	mov	r2, r3
 8012044:	697b      	ldr	r3, [r7, #20]
 8012046:	4293      	cmp	r3, r2
 8012048:	d114      	bne.n	8012074 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801204a:	2300      	movs	r3, #0
 801204c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d10c      	bne.n	8012074 <pbuf_copy+0x118>
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d009      	beq.n	8012074 <pbuf_copy+0x118>
 8012060:	4b20      	ldr	r3, [pc, #128]	; (80120e4 <pbuf_copy+0x188>)
 8012062:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8012066:	4924      	ldr	r1, [pc, #144]	; (80120f8 <pbuf_copy+0x19c>)
 8012068:	4820      	ldr	r0, [pc, #128]	; (80120ec <pbuf_copy+0x190>)
 801206a:	f008 fc1d 	bl	801a8a8 <iprintf>
 801206e:	f06f 030f 	mvn.w	r3, #15
 8012072:	e032      	b.n	80120da <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8012074:	683b      	ldr	r3, [r7, #0]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d013      	beq.n	80120a2 <pbuf_copy+0x146>
 801207a:	683b      	ldr	r3, [r7, #0]
 801207c:	895a      	ldrh	r2, [r3, #10]
 801207e:	683b      	ldr	r3, [r7, #0]
 8012080:	891b      	ldrh	r3, [r3, #8]
 8012082:	429a      	cmp	r2, r3
 8012084:	d10d      	bne.n	80120a2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d009      	beq.n	80120a2 <pbuf_copy+0x146>
 801208e:	4b15      	ldr	r3, [pc, #84]	; (80120e4 <pbuf_copy+0x188>)
 8012090:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8012094:	4919      	ldr	r1, [pc, #100]	; (80120fc <pbuf_copy+0x1a0>)
 8012096:	4815      	ldr	r0, [pc, #84]	; (80120ec <pbuf_copy+0x190>)
 8012098:	f008 fc06 	bl	801a8a8 <iprintf>
 801209c:	f06f 0305 	mvn.w	r3, #5
 80120a0:	e01b      	b.n	80120da <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d013      	beq.n	80120d0 <pbuf_copy+0x174>
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	895a      	ldrh	r2, [r3, #10]
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	891b      	ldrh	r3, [r3, #8]
 80120b0:	429a      	cmp	r2, r3
 80120b2:	d10d      	bne.n	80120d0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d009      	beq.n	80120d0 <pbuf_copy+0x174>
 80120bc:	4b09      	ldr	r3, [pc, #36]	; (80120e4 <pbuf_copy+0x188>)
 80120be:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80120c2:	490e      	ldr	r1, [pc, #56]	; (80120fc <pbuf_copy+0x1a0>)
 80120c4:	4809      	ldr	r0, [pc, #36]	; (80120ec <pbuf_copy+0x190>)
 80120c6:	f008 fbef 	bl	801a8a8 <iprintf>
 80120ca:	f06f 0305 	mvn.w	r3, #5
 80120ce:	e004      	b.n	80120da <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80120d0:	683b      	ldr	r3, [r7, #0]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	f47f af61 	bne.w	8011f9a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80120d8:	2300      	movs	r3, #0
}
 80120da:	4618      	mov	r0, r3
 80120dc:	3718      	adds	r7, #24
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}
 80120e2:	bf00      	nop
 80120e4:	0801c4b8 	.word	0x0801c4b8
 80120e8:	0801c760 	.word	0x0801c760
 80120ec:	0801c518 	.word	0x0801c518
 80120f0:	0801c790 	.word	0x0801c790
 80120f4:	0801c7a8 	.word	0x0801c7a8
 80120f8:	0801c7c4 	.word	0x0801c7c4
 80120fc:	0801c7d4 	.word	0x0801c7d4

08012100 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b088      	sub	sp, #32
 8012104:	af00      	add	r7, sp, #0
 8012106:	60f8      	str	r0, [r7, #12]
 8012108:	60b9      	str	r1, [r7, #8]
 801210a:	4611      	mov	r1, r2
 801210c:	461a      	mov	r2, r3
 801210e:	460b      	mov	r3, r1
 8012110:	80fb      	strh	r3, [r7, #6]
 8012112:	4613      	mov	r3, r2
 8012114:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8012116:	2300      	movs	r3, #0
 8012118:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801211a:	2300      	movs	r3, #0
 801211c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d108      	bne.n	8012136 <pbuf_copy_partial+0x36>
 8012124:	4b2b      	ldr	r3, [pc, #172]	; (80121d4 <pbuf_copy_partial+0xd4>)
 8012126:	f240 420a 	movw	r2, #1034	; 0x40a
 801212a:	492b      	ldr	r1, [pc, #172]	; (80121d8 <pbuf_copy_partial+0xd8>)
 801212c:	482b      	ldr	r0, [pc, #172]	; (80121dc <pbuf_copy_partial+0xdc>)
 801212e:	f008 fbbb 	bl	801a8a8 <iprintf>
 8012132:	2300      	movs	r3, #0
 8012134:	e04a      	b.n	80121cc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d108      	bne.n	801214e <pbuf_copy_partial+0x4e>
 801213c:	4b25      	ldr	r3, [pc, #148]	; (80121d4 <pbuf_copy_partial+0xd4>)
 801213e:	f240 420b 	movw	r2, #1035	; 0x40b
 8012142:	4927      	ldr	r1, [pc, #156]	; (80121e0 <pbuf_copy_partial+0xe0>)
 8012144:	4825      	ldr	r0, [pc, #148]	; (80121dc <pbuf_copy_partial+0xdc>)
 8012146:	f008 fbaf 	bl	801a8a8 <iprintf>
 801214a:	2300      	movs	r3, #0
 801214c:	e03e      	b.n	80121cc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	61fb      	str	r3, [r7, #28]
 8012152:	e034      	b.n	80121be <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8012154:	88bb      	ldrh	r3, [r7, #4]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d00a      	beq.n	8012170 <pbuf_copy_partial+0x70>
 801215a:	69fb      	ldr	r3, [r7, #28]
 801215c:	895b      	ldrh	r3, [r3, #10]
 801215e:	88ba      	ldrh	r2, [r7, #4]
 8012160:	429a      	cmp	r2, r3
 8012162:	d305      	bcc.n	8012170 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8012164:	69fb      	ldr	r3, [r7, #28]
 8012166:	895b      	ldrh	r3, [r3, #10]
 8012168:	88ba      	ldrh	r2, [r7, #4]
 801216a:	1ad3      	subs	r3, r2, r3
 801216c:	80bb      	strh	r3, [r7, #4]
 801216e:	e023      	b.n	80121b8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8012170:	69fb      	ldr	r3, [r7, #28]
 8012172:	895a      	ldrh	r2, [r3, #10]
 8012174:	88bb      	ldrh	r3, [r7, #4]
 8012176:	1ad3      	subs	r3, r2, r3
 8012178:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801217a:	8b3a      	ldrh	r2, [r7, #24]
 801217c:	88fb      	ldrh	r3, [r7, #6]
 801217e:	429a      	cmp	r2, r3
 8012180:	d901      	bls.n	8012186 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8012182:	88fb      	ldrh	r3, [r7, #6]
 8012184:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8012186:	8b7b      	ldrh	r3, [r7, #26]
 8012188:	68ba      	ldr	r2, [r7, #8]
 801218a:	18d0      	adds	r0, r2, r3
 801218c:	69fb      	ldr	r3, [r7, #28]
 801218e:	685a      	ldr	r2, [r3, #4]
 8012190:	88bb      	ldrh	r3, [r7, #4]
 8012192:	4413      	add	r3, r2
 8012194:	8b3a      	ldrh	r2, [r7, #24]
 8012196:	4619      	mov	r1, r3
 8012198:	f008 fac6 	bl	801a728 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801219c:	8afa      	ldrh	r2, [r7, #22]
 801219e:	8b3b      	ldrh	r3, [r7, #24]
 80121a0:	4413      	add	r3, r2
 80121a2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80121a4:	8b7a      	ldrh	r2, [r7, #26]
 80121a6:	8b3b      	ldrh	r3, [r7, #24]
 80121a8:	4413      	add	r3, r2
 80121aa:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80121ac:	88fa      	ldrh	r2, [r7, #6]
 80121ae:	8b3b      	ldrh	r3, [r7, #24]
 80121b0:	1ad3      	subs	r3, r2, r3
 80121b2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80121b4:	2300      	movs	r3, #0
 80121b6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80121b8:	69fb      	ldr	r3, [r7, #28]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	61fb      	str	r3, [r7, #28]
 80121be:	88fb      	ldrh	r3, [r7, #6]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d002      	beq.n	80121ca <pbuf_copy_partial+0xca>
 80121c4:	69fb      	ldr	r3, [r7, #28]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d1c4      	bne.n	8012154 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80121ca:	8afb      	ldrh	r3, [r7, #22]
}
 80121cc:	4618      	mov	r0, r3
 80121ce:	3720      	adds	r7, #32
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd80      	pop	{r7, pc}
 80121d4:	0801c4b8 	.word	0x0801c4b8
 80121d8:	0801c800 	.word	0x0801c800
 80121dc:	0801c518 	.word	0x0801c518
 80121e0:	0801c820 	.word	0x0801c820

080121e4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b084      	sub	sp, #16
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	4603      	mov	r3, r0
 80121ec:	603a      	str	r2, [r7, #0]
 80121ee:	71fb      	strb	r3, [r7, #7]
 80121f0:	460b      	mov	r3, r1
 80121f2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80121f4:	683b      	ldr	r3, [r7, #0]
 80121f6:	8919      	ldrh	r1, [r3, #8]
 80121f8:	88ba      	ldrh	r2, [r7, #4]
 80121fa:	79fb      	ldrb	r3, [r7, #7]
 80121fc:	4618      	mov	r0, r3
 80121fe:	f7ff fab1 	bl	8011764 <pbuf_alloc>
 8012202:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d101      	bne.n	801220e <pbuf_clone+0x2a>
    return NULL;
 801220a:	2300      	movs	r3, #0
 801220c:	e011      	b.n	8012232 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801220e:	6839      	ldr	r1, [r7, #0]
 8012210:	68f8      	ldr	r0, [r7, #12]
 8012212:	f7ff fea3 	bl	8011f5c <pbuf_copy>
 8012216:	4603      	mov	r3, r0
 8012218:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801221a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d006      	beq.n	8012230 <pbuf_clone+0x4c>
 8012222:	4b06      	ldr	r3, [pc, #24]	; (801223c <pbuf_clone+0x58>)
 8012224:	f240 5224 	movw	r2, #1316	; 0x524
 8012228:	4905      	ldr	r1, [pc, #20]	; (8012240 <pbuf_clone+0x5c>)
 801222a:	4806      	ldr	r0, [pc, #24]	; (8012244 <pbuf_clone+0x60>)
 801222c:	f008 fb3c 	bl	801a8a8 <iprintf>
  return q;
 8012230:	68fb      	ldr	r3, [r7, #12]
}
 8012232:	4618      	mov	r0, r3
 8012234:	3710      	adds	r7, #16
 8012236:	46bd      	mov	sp, r7
 8012238:	bd80      	pop	{r7, pc}
 801223a:	bf00      	nop
 801223c:	0801c4b8 	.word	0x0801c4b8
 8012240:	0801c92c 	.word	0x0801c92c
 8012244:	0801c518 	.word	0x0801c518

08012248 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801224c:	f008 fb5a 	bl	801a904 <rand>
 8012250:	4603      	mov	r3, r0
 8012252:	b29b      	uxth	r3, r3
 8012254:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012258:	b29b      	uxth	r3, r3
 801225a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801225e:	b29a      	uxth	r2, r3
 8012260:	4b01      	ldr	r3, [pc, #4]	; (8012268 <tcp_init+0x20>)
 8012262:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012264:	bf00      	nop
 8012266:	bd80      	pop	{r7, pc}
 8012268:	20000044 	.word	0x20000044

0801226c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b082      	sub	sp, #8
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	7d1b      	ldrb	r3, [r3, #20]
 8012278:	2b01      	cmp	r3, #1
 801227a:	d105      	bne.n	8012288 <tcp_free+0x1c>
 801227c:	4b06      	ldr	r3, [pc, #24]	; (8012298 <tcp_free+0x2c>)
 801227e:	22d4      	movs	r2, #212	; 0xd4
 8012280:	4906      	ldr	r1, [pc, #24]	; (801229c <tcp_free+0x30>)
 8012282:	4807      	ldr	r0, [pc, #28]	; (80122a0 <tcp_free+0x34>)
 8012284:	f008 fb10 	bl	801a8a8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8012288:	6879      	ldr	r1, [r7, #4]
 801228a:	2001      	movs	r0, #1
 801228c:	f7fe ff3c 	bl	8011108 <memp_free>
}
 8012290:	bf00      	nop
 8012292:	3708      	adds	r7, #8
 8012294:	46bd      	mov	sp, r7
 8012296:	bd80      	pop	{r7, pc}
 8012298:	0801c9b8 	.word	0x0801c9b8
 801229c:	0801c9e8 	.word	0x0801c9e8
 80122a0:	0801c9fc 	.word	0x0801c9fc

080122a4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b082      	sub	sp, #8
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	7d1b      	ldrb	r3, [r3, #20]
 80122b0:	2b01      	cmp	r3, #1
 80122b2:	d105      	bne.n	80122c0 <tcp_free_listen+0x1c>
 80122b4:	4b06      	ldr	r3, [pc, #24]	; (80122d0 <tcp_free_listen+0x2c>)
 80122b6:	22df      	movs	r2, #223	; 0xdf
 80122b8:	4906      	ldr	r1, [pc, #24]	; (80122d4 <tcp_free_listen+0x30>)
 80122ba:	4807      	ldr	r0, [pc, #28]	; (80122d8 <tcp_free_listen+0x34>)
 80122bc:	f008 faf4 	bl	801a8a8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80122c0:	6879      	ldr	r1, [r7, #4]
 80122c2:	2002      	movs	r0, #2
 80122c4:	f7fe ff20 	bl	8011108 <memp_free>
}
 80122c8:	bf00      	nop
 80122ca:	3708      	adds	r7, #8
 80122cc:	46bd      	mov	sp, r7
 80122ce:	bd80      	pop	{r7, pc}
 80122d0:	0801c9b8 	.word	0x0801c9b8
 80122d4:	0801ca24 	.word	0x0801ca24
 80122d8:	0801c9fc 	.word	0x0801c9fc

080122dc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80122e0:	f000 fea2 	bl	8013028 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80122e4:	4b07      	ldr	r3, [pc, #28]	; (8012304 <tcp_tmr+0x28>)
 80122e6:	781b      	ldrb	r3, [r3, #0]
 80122e8:	3301      	adds	r3, #1
 80122ea:	b2da      	uxtb	r2, r3
 80122ec:	4b05      	ldr	r3, [pc, #20]	; (8012304 <tcp_tmr+0x28>)
 80122ee:	701a      	strb	r2, [r3, #0]
 80122f0:	4b04      	ldr	r3, [pc, #16]	; (8012304 <tcp_tmr+0x28>)
 80122f2:	781b      	ldrb	r3, [r3, #0]
 80122f4:	f003 0301 	and.w	r3, r3, #1
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d001      	beq.n	8012300 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80122fc:	f000 fb54 	bl	80129a8 <tcp_slowtmr>
  }
}
 8012300:	bf00      	nop
 8012302:	bd80      	pop	{r7, pc}
 8012304:	20003179 	.word	0x20003179

08012308 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b084      	sub	sp, #16
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
 8012310:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d105      	bne.n	8012324 <tcp_remove_listener+0x1c>
 8012318:	4b0d      	ldr	r3, [pc, #52]	; (8012350 <tcp_remove_listener+0x48>)
 801231a:	22ff      	movs	r2, #255	; 0xff
 801231c:	490d      	ldr	r1, [pc, #52]	; (8012354 <tcp_remove_listener+0x4c>)
 801231e:	480e      	ldr	r0, [pc, #56]	; (8012358 <tcp_remove_listener+0x50>)
 8012320:	f008 fac2 	bl	801a8a8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	60fb      	str	r3, [r7, #12]
 8012328:	e00a      	b.n	8012340 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801232e:	683a      	ldr	r2, [r7, #0]
 8012330:	429a      	cmp	r2, r3
 8012332:	d102      	bne.n	801233a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	2200      	movs	r2, #0
 8012338:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	68db      	ldr	r3, [r3, #12]
 801233e:	60fb      	str	r3, [r7, #12]
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d1f1      	bne.n	801232a <tcp_remove_listener+0x22>
    }
  }
}
 8012346:	bf00      	nop
 8012348:	bf00      	nop
 801234a:	3710      	adds	r7, #16
 801234c:	46bd      	mov	sp, r7
 801234e:	bd80      	pop	{r7, pc}
 8012350:	0801c9b8 	.word	0x0801c9b8
 8012354:	0801ca40 	.word	0x0801ca40
 8012358:	0801c9fc 	.word	0x0801c9fc

0801235c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b084      	sub	sp, #16
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d106      	bne.n	8012378 <tcp_listen_closed+0x1c>
 801236a:	4b14      	ldr	r3, [pc, #80]	; (80123bc <tcp_listen_closed+0x60>)
 801236c:	f240 1211 	movw	r2, #273	; 0x111
 8012370:	4913      	ldr	r1, [pc, #76]	; (80123c0 <tcp_listen_closed+0x64>)
 8012372:	4814      	ldr	r0, [pc, #80]	; (80123c4 <tcp_listen_closed+0x68>)
 8012374:	f008 fa98 	bl	801a8a8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	7d1b      	ldrb	r3, [r3, #20]
 801237c:	2b01      	cmp	r3, #1
 801237e:	d006      	beq.n	801238e <tcp_listen_closed+0x32>
 8012380:	4b0e      	ldr	r3, [pc, #56]	; (80123bc <tcp_listen_closed+0x60>)
 8012382:	f44f 7289 	mov.w	r2, #274	; 0x112
 8012386:	4910      	ldr	r1, [pc, #64]	; (80123c8 <tcp_listen_closed+0x6c>)
 8012388:	480e      	ldr	r0, [pc, #56]	; (80123c4 <tcp_listen_closed+0x68>)
 801238a:	f008 fa8d 	bl	801a8a8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801238e:	2301      	movs	r3, #1
 8012390:	60fb      	str	r3, [r7, #12]
 8012392:	e00b      	b.n	80123ac <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8012394:	4a0d      	ldr	r2, [pc, #52]	; (80123cc <tcp_listen_closed+0x70>)
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	6879      	ldr	r1, [r7, #4]
 80123a0:	4618      	mov	r0, r3
 80123a2:	f7ff ffb1 	bl	8012308 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	3301      	adds	r3, #1
 80123aa:	60fb      	str	r3, [r7, #12]
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	2b03      	cmp	r3, #3
 80123b0:	d9f0      	bls.n	8012394 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80123b2:	bf00      	nop
 80123b4:	bf00      	nop
 80123b6:	3710      	adds	r7, #16
 80123b8:	46bd      	mov	sp, r7
 80123ba:	bd80      	pop	{r7, pc}
 80123bc:	0801c9b8 	.word	0x0801c9b8
 80123c0:	0801ca68 	.word	0x0801ca68
 80123c4:	0801c9fc 	.word	0x0801c9fc
 80123c8:	0801ca74 	.word	0x0801ca74
 80123cc:	080952fc 	.word	0x080952fc

080123d0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80123d0:	b5b0      	push	{r4, r5, r7, lr}
 80123d2:	b088      	sub	sp, #32
 80123d4:	af04      	add	r7, sp, #16
 80123d6:	6078      	str	r0, [r7, #4]
 80123d8:	460b      	mov	r3, r1
 80123da:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d106      	bne.n	80123f0 <tcp_close_shutdown+0x20>
 80123e2:	4b63      	ldr	r3, [pc, #396]	; (8012570 <tcp_close_shutdown+0x1a0>)
 80123e4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80123e8:	4962      	ldr	r1, [pc, #392]	; (8012574 <tcp_close_shutdown+0x1a4>)
 80123ea:	4863      	ldr	r0, [pc, #396]	; (8012578 <tcp_close_shutdown+0x1a8>)
 80123ec:	f008 fa5c 	bl	801a8a8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80123f0:	78fb      	ldrb	r3, [r7, #3]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d066      	beq.n	80124c4 <tcp_close_shutdown+0xf4>
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	7d1b      	ldrb	r3, [r3, #20]
 80123fa:	2b04      	cmp	r3, #4
 80123fc:	d003      	beq.n	8012406 <tcp_close_shutdown+0x36>
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	7d1b      	ldrb	r3, [r3, #20]
 8012402:	2b07      	cmp	r3, #7
 8012404:	d15e      	bne.n	80124c4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801240a:	2b00      	cmp	r3, #0
 801240c:	d104      	bne.n	8012418 <tcp_close_shutdown+0x48>
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012412:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012416:	d055      	beq.n	80124c4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	8b5b      	ldrh	r3, [r3, #26]
 801241c:	f003 0310 	and.w	r3, r3, #16
 8012420:	2b00      	cmp	r3, #0
 8012422:	d106      	bne.n	8012432 <tcp_close_shutdown+0x62>
 8012424:	4b52      	ldr	r3, [pc, #328]	; (8012570 <tcp_close_shutdown+0x1a0>)
 8012426:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801242a:	4954      	ldr	r1, [pc, #336]	; (801257c <tcp_close_shutdown+0x1ac>)
 801242c:	4852      	ldr	r0, [pc, #328]	; (8012578 <tcp_close_shutdown+0x1a8>)
 801242e:	f008 fa3b 	bl	801a8a8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801243a:	687d      	ldr	r5, [r7, #4]
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	3304      	adds	r3, #4
 8012440:	687a      	ldr	r2, [r7, #4]
 8012442:	8ad2      	ldrh	r2, [r2, #22]
 8012444:	6879      	ldr	r1, [r7, #4]
 8012446:	8b09      	ldrh	r1, [r1, #24]
 8012448:	9102      	str	r1, [sp, #8]
 801244a:	9201      	str	r2, [sp, #4]
 801244c:	9300      	str	r3, [sp, #0]
 801244e:	462b      	mov	r3, r5
 8012450:	4622      	mov	r2, r4
 8012452:	4601      	mov	r1, r0
 8012454:	6878      	ldr	r0, [r7, #4]
 8012456:	f004 fe8d 	bl	8017174 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801245a:	6878      	ldr	r0, [r7, #4]
 801245c:	f001 f8c6 	bl	80135ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012460:	4b47      	ldr	r3, [pc, #284]	; (8012580 <tcp_close_shutdown+0x1b0>)
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	687a      	ldr	r2, [r7, #4]
 8012466:	429a      	cmp	r2, r3
 8012468:	d105      	bne.n	8012476 <tcp_close_shutdown+0xa6>
 801246a:	4b45      	ldr	r3, [pc, #276]	; (8012580 <tcp_close_shutdown+0x1b0>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	68db      	ldr	r3, [r3, #12]
 8012470:	4a43      	ldr	r2, [pc, #268]	; (8012580 <tcp_close_shutdown+0x1b0>)
 8012472:	6013      	str	r3, [r2, #0]
 8012474:	e013      	b.n	801249e <tcp_close_shutdown+0xce>
 8012476:	4b42      	ldr	r3, [pc, #264]	; (8012580 <tcp_close_shutdown+0x1b0>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	60fb      	str	r3, [r7, #12]
 801247c:	e00c      	b.n	8012498 <tcp_close_shutdown+0xc8>
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	68db      	ldr	r3, [r3, #12]
 8012482:	687a      	ldr	r2, [r7, #4]
 8012484:	429a      	cmp	r2, r3
 8012486:	d104      	bne.n	8012492 <tcp_close_shutdown+0xc2>
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	68da      	ldr	r2, [r3, #12]
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	60da      	str	r2, [r3, #12]
 8012490:	e005      	b.n	801249e <tcp_close_shutdown+0xce>
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	68db      	ldr	r3, [r3, #12]
 8012496:	60fb      	str	r3, [r7, #12]
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d1ef      	bne.n	801247e <tcp_close_shutdown+0xae>
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2200      	movs	r2, #0
 80124a2:	60da      	str	r2, [r3, #12]
 80124a4:	4b37      	ldr	r3, [pc, #220]	; (8012584 <tcp_close_shutdown+0x1b4>)
 80124a6:	2201      	movs	r2, #1
 80124a8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80124aa:	4b37      	ldr	r3, [pc, #220]	; (8012588 <tcp_close_shutdown+0x1b8>)
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	687a      	ldr	r2, [r7, #4]
 80124b0:	429a      	cmp	r2, r3
 80124b2:	d102      	bne.n	80124ba <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80124b4:	f003 fd5a 	bl	8015f6c <tcp_trigger_input_pcb_close>
 80124b8:	e002      	b.n	80124c0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	f7ff fed6 	bl	801226c <tcp_free>
      }
      return ERR_OK;
 80124c0:	2300      	movs	r3, #0
 80124c2:	e050      	b.n	8012566 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	7d1b      	ldrb	r3, [r3, #20]
 80124c8:	2b02      	cmp	r3, #2
 80124ca:	d03b      	beq.n	8012544 <tcp_close_shutdown+0x174>
 80124cc:	2b02      	cmp	r3, #2
 80124ce:	dc44      	bgt.n	801255a <tcp_close_shutdown+0x18a>
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d002      	beq.n	80124da <tcp_close_shutdown+0x10a>
 80124d4:	2b01      	cmp	r3, #1
 80124d6:	d02a      	beq.n	801252e <tcp_close_shutdown+0x15e>
 80124d8:	e03f      	b.n	801255a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	8adb      	ldrh	r3, [r3, #22]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d021      	beq.n	8012526 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80124e2:	4b2a      	ldr	r3, [pc, #168]	; (801258c <tcp_close_shutdown+0x1bc>)
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	687a      	ldr	r2, [r7, #4]
 80124e8:	429a      	cmp	r2, r3
 80124ea:	d105      	bne.n	80124f8 <tcp_close_shutdown+0x128>
 80124ec:	4b27      	ldr	r3, [pc, #156]	; (801258c <tcp_close_shutdown+0x1bc>)
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	68db      	ldr	r3, [r3, #12]
 80124f2:	4a26      	ldr	r2, [pc, #152]	; (801258c <tcp_close_shutdown+0x1bc>)
 80124f4:	6013      	str	r3, [r2, #0]
 80124f6:	e013      	b.n	8012520 <tcp_close_shutdown+0x150>
 80124f8:	4b24      	ldr	r3, [pc, #144]	; (801258c <tcp_close_shutdown+0x1bc>)
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	60bb      	str	r3, [r7, #8]
 80124fe:	e00c      	b.n	801251a <tcp_close_shutdown+0x14a>
 8012500:	68bb      	ldr	r3, [r7, #8]
 8012502:	68db      	ldr	r3, [r3, #12]
 8012504:	687a      	ldr	r2, [r7, #4]
 8012506:	429a      	cmp	r2, r3
 8012508:	d104      	bne.n	8012514 <tcp_close_shutdown+0x144>
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	68da      	ldr	r2, [r3, #12]
 801250e:	68bb      	ldr	r3, [r7, #8]
 8012510:	60da      	str	r2, [r3, #12]
 8012512:	e005      	b.n	8012520 <tcp_close_shutdown+0x150>
 8012514:	68bb      	ldr	r3, [r7, #8]
 8012516:	68db      	ldr	r3, [r3, #12]
 8012518:	60bb      	str	r3, [r7, #8]
 801251a:	68bb      	ldr	r3, [r7, #8]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d1ef      	bne.n	8012500 <tcp_close_shutdown+0x130>
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	2200      	movs	r2, #0
 8012524:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8012526:	6878      	ldr	r0, [r7, #4]
 8012528:	f7ff fea0 	bl	801226c <tcp_free>
      break;
 801252c:	e01a      	b.n	8012564 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f7ff ff14 	bl	801235c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8012534:	6879      	ldr	r1, [r7, #4]
 8012536:	4816      	ldr	r0, [pc, #88]	; (8012590 <tcp_close_shutdown+0x1c0>)
 8012538:	f001 f8a8 	bl	801368c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801253c:	6878      	ldr	r0, [r7, #4]
 801253e:	f7ff feb1 	bl	80122a4 <tcp_free_listen>
      break;
 8012542:	e00f      	b.n	8012564 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012544:	6879      	ldr	r1, [r7, #4]
 8012546:	480e      	ldr	r0, [pc, #56]	; (8012580 <tcp_close_shutdown+0x1b0>)
 8012548:	f001 f8a0 	bl	801368c <tcp_pcb_remove>
 801254c:	4b0d      	ldr	r3, [pc, #52]	; (8012584 <tcp_close_shutdown+0x1b4>)
 801254e:	2201      	movs	r2, #1
 8012550:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012552:	6878      	ldr	r0, [r7, #4]
 8012554:	f7ff fe8a 	bl	801226c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8012558:	e004      	b.n	8012564 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	f000 f81a 	bl	8012594 <tcp_close_shutdown_fin>
 8012560:	4603      	mov	r3, r0
 8012562:	e000      	b.n	8012566 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8012564:	2300      	movs	r3, #0
}
 8012566:	4618      	mov	r0, r3
 8012568:	3710      	adds	r7, #16
 801256a:	46bd      	mov	sp, r7
 801256c:	bdb0      	pop	{r4, r5, r7, pc}
 801256e:	bf00      	nop
 8012570:	0801c9b8 	.word	0x0801c9b8
 8012574:	0801ca8c 	.word	0x0801ca8c
 8012578:	0801c9fc 	.word	0x0801c9fc
 801257c:	0801caac 	.word	0x0801caac
 8012580:	2000dc80 	.word	0x2000dc80
 8012584:	2000dc7c 	.word	0x2000dc7c
 8012588:	2000dc94 	.word	0x2000dc94
 801258c:	2000dc8c 	.word	0x2000dc8c
 8012590:	2000dc88 	.word	0x2000dc88

08012594 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b084      	sub	sp, #16
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d106      	bne.n	80125b0 <tcp_close_shutdown_fin+0x1c>
 80125a2:	4b2e      	ldr	r3, [pc, #184]	; (801265c <tcp_close_shutdown_fin+0xc8>)
 80125a4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80125a8:	492d      	ldr	r1, [pc, #180]	; (8012660 <tcp_close_shutdown_fin+0xcc>)
 80125aa:	482e      	ldr	r0, [pc, #184]	; (8012664 <tcp_close_shutdown_fin+0xd0>)
 80125ac:	f008 f97c 	bl	801a8a8 <iprintf>

  switch (pcb->state) {
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	7d1b      	ldrb	r3, [r3, #20]
 80125b4:	2b07      	cmp	r3, #7
 80125b6:	d020      	beq.n	80125fa <tcp_close_shutdown_fin+0x66>
 80125b8:	2b07      	cmp	r3, #7
 80125ba:	dc2b      	bgt.n	8012614 <tcp_close_shutdown_fin+0x80>
 80125bc:	2b03      	cmp	r3, #3
 80125be:	d002      	beq.n	80125c6 <tcp_close_shutdown_fin+0x32>
 80125c0:	2b04      	cmp	r3, #4
 80125c2:	d00d      	beq.n	80125e0 <tcp_close_shutdown_fin+0x4c>
 80125c4:	e026      	b.n	8012614 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80125c6:	6878      	ldr	r0, [r7, #4]
 80125c8:	f003 fee2 	bl	8016390 <tcp_send_fin>
 80125cc:	4603      	mov	r3, r0
 80125ce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80125d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d11f      	bne.n	8012618 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2205      	movs	r2, #5
 80125dc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80125de:	e01b      	b.n	8012618 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80125e0:	6878      	ldr	r0, [r7, #4]
 80125e2:	f003 fed5 	bl	8016390 <tcp_send_fin>
 80125e6:	4603      	mov	r3, r0
 80125e8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80125ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d114      	bne.n	801261c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	2205      	movs	r2, #5
 80125f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80125f8:	e010      	b.n	801261c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f003 fec8 	bl	8016390 <tcp_send_fin>
 8012600:	4603      	mov	r3, r0
 8012602:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d109      	bne.n	8012620 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	2209      	movs	r2, #9
 8012610:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012612:	e005      	b.n	8012620 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012614:	2300      	movs	r3, #0
 8012616:	e01c      	b.n	8012652 <tcp_close_shutdown_fin+0xbe>
      break;
 8012618:	bf00      	nop
 801261a:	e002      	b.n	8012622 <tcp_close_shutdown_fin+0x8e>
      break;
 801261c:	bf00      	nop
 801261e:	e000      	b.n	8012622 <tcp_close_shutdown_fin+0x8e>
      break;
 8012620:	bf00      	nop
  }

  if (err == ERR_OK) {
 8012622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d103      	bne.n	8012632 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f003 ffee 	bl	801660c <tcp_output>
 8012630:	e00d      	b.n	801264e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8012632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012636:	f1b3 3fff 	cmp.w	r3, #4294967295
 801263a:	d108      	bne.n	801264e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	8b5b      	ldrh	r3, [r3, #26]
 8012640:	f043 0308 	orr.w	r3, r3, #8
 8012644:	b29a      	uxth	r2, r3
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801264a:	2300      	movs	r3, #0
 801264c:	e001      	b.n	8012652 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801264e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012652:	4618      	mov	r0, r3
 8012654:	3710      	adds	r7, #16
 8012656:	46bd      	mov	sp, r7
 8012658:	bd80      	pop	{r7, pc}
 801265a:	bf00      	nop
 801265c:	0801c9b8 	.word	0x0801c9b8
 8012660:	0801ca68 	.word	0x0801ca68
 8012664:	0801c9fc 	.word	0x0801c9fc

08012668 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b082      	sub	sp, #8
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d109      	bne.n	801268a <tcp_close+0x22>
 8012676:	4b0f      	ldr	r3, [pc, #60]	; (80126b4 <tcp_close+0x4c>)
 8012678:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801267c:	490e      	ldr	r1, [pc, #56]	; (80126b8 <tcp_close+0x50>)
 801267e:	480f      	ldr	r0, [pc, #60]	; (80126bc <tcp_close+0x54>)
 8012680:	f008 f912 	bl	801a8a8 <iprintf>
 8012684:	f06f 030f 	mvn.w	r3, #15
 8012688:	e00f      	b.n	80126aa <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	7d1b      	ldrb	r3, [r3, #20]
 801268e:	2b01      	cmp	r3, #1
 8012690:	d006      	beq.n	80126a0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	8b5b      	ldrh	r3, [r3, #26]
 8012696:	f043 0310 	orr.w	r3, r3, #16
 801269a:	b29a      	uxth	r2, r3
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80126a0:	2101      	movs	r1, #1
 80126a2:	6878      	ldr	r0, [r7, #4]
 80126a4:	f7ff fe94 	bl	80123d0 <tcp_close_shutdown>
 80126a8:	4603      	mov	r3, r0
}
 80126aa:	4618      	mov	r0, r3
 80126ac:	3708      	adds	r7, #8
 80126ae:	46bd      	mov	sp, r7
 80126b0:	bd80      	pop	{r7, pc}
 80126b2:	bf00      	nop
 80126b4:	0801c9b8 	.word	0x0801c9b8
 80126b8:	0801cac8 	.word	0x0801cac8
 80126bc:	0801c9fc 	.word	0x0801c9fc

080126c0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b08e      	sub	sp, #56	; 0x38
 80126c4:	af04      	add	r7, sp, #16
 80126c6:	6078      	str	r0, [r7, #4]
 80126c8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d107      	bne.n	80126e0 <tcp_abandon+0x20>
 80126d0:	4b52      	ldr	r3, [pc, #328]	; (801281c <tcp_abandon+0x15c>)
 80126d2:	f240 223d 	movw	r2, #573	; 0x23d
 80126d6:	4952      	ldr	r1, [pc, #328]	; (8012820 <tcp_abandon+0x160>)
 80126d8:	4852      	ldr	r0, [pc, #328]	; (8012824 <tcp_abandon+0x164>)
 80126da:	f008 f8e5 	bl	801a8a8 <iprintf>
 80126de:	e099      	b.n	8012814 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	7d1b      	ldrb	r3, [r3, #20]
 80126e4:	2b01      	cmp	r3, #1
 80126e6:	d106      	bne.n	80126f6 <tcp_abandon+0x36>
 80126e8:	4b4c      	ldr	r3, [pc, #304]	; (801281c <tcp_abandon+0x15c>)
 80126ea:	f44f 7210 	mov.w	r2, #576	; 0x240
 80126ee:	494e      	ldr	r1, [pc, #312]	; (8012828 <tcp_abandon+0x168>)
 80126f0:	484c      	ldr	r0, [pc, #304]	; (8012824 <tcp_abandon+0x164>)
 80126f2:	f008 f8d9 	bl	801a8a8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	7d1b      	ldrb	r3, [r3, #20]
 80126fa:	2b0a      	cmp	r3, #10
 80126fc:	d107      	bne.n	801270e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80126fe:	6879      	ldr	r1, [r7, #4]
 8012700:	484a      	ldr	r0, [pc, #296]	; (801282c <tcp_abandon+0x16c>)
 8012702:	f000 ffc3 	bl	801368c <tcp_pcb_remove>
    tcp_free(pcb);
 8012706:	6878      	ldr	r0, [r7, #4]
 8012708:	f7ff fdb0 	bl	801226c <tcp_free>
 801270c:	e082      	b.n	8012814 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801270e:	2300      	movs	r3, #0
 8012710:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8012712:	2300      	movs	r3, #0
 8012714:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801271a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012720:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012728:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	691b      	ldr	r3, [r3, #16]
 801272e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	7d1b      	ldrb	r3, [r3, #20]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d126      	bne.n	8012786 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	8adb      	ldrh	r3, [r3, #22]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d02e      	beq.n	801279e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012740:	4b3b      	ldr	r3, [pc, #236]	; (8012830 <tcp_abandon+0x170>)
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	687a      	ldr	r2, [r7, #4]
 8012746:	429a      	cmp	r2, r3
 8012748:	d105      	bne.n	8012756 <tcp_abandon+0x96>
 801274a:	4b39      	ldr	r3, [pc, #228]	; (8012830 <tcp_abandon+0x170>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	68db      	ldr	r3, [r3, #12]
 8012750:	4a37      	ldr	r2, [pc, #220]	; (8012830 <tcp_abandon+0x170>)
 8012752:	6013      	str	r3, [r2, #0]
 8012754:	e013      	b.n	801277e <tcp_abandon+0xbe>
 8012756:	4b36      	ldr	r3, [pc, #216]	; (8012830 <tcp_abandon+0x170>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	61fb      	str	r3, [r7, #28]
 801275c:	e00c      	b.n	8012778 <tcp_abandon+0xb8>
 801275e:	69fb      	ldr	r3, [r7, #28]
 8012760:	68db      	ldr	r3, [r3, #12]
 8012762:	687a      	ldr	r2, [r7, #4]
 8012764:	429a      	cmp	r2, r3
 8012766:	d104      	bne.n	8012772 <tcp_abandon+0xb2>
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	68da      	ldr	r2, [r3, #12]
 801276c:	69fb      	ldr	r3, [r7, #28]
 801276e:	60da      	str	r2, [r3, #12]
 8012770:	e005      	b.n	801277e <tcp_abandon+0xbe>
 8012772:	69fb      	ldr	r3, [r7, #28]
 8012774:	68db      	ldr	r3, [r3, #12]
 8012776:	61fb      	str	r3, [r7, #28]
 8012778:	69fb      	ldr	r3, [r7, #28]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d1ef      	bne.n	801275e <tcp_abandon+0x9e>
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	2200      	movs	r2, #0
 8012782:	60da      	str	r2, [r3, #12]
 8012784:	e00b      	b.n	801279e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8012786:	683b      	ldr	r3, [r7, #0]
 8012788:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	8adb      	ldrh	r3, [r3, #22]
 801278e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012790:	6879      	ldr	r1, [r7, #4]
 8012792:	4828      	ldr	r0, [pc, #160]	; (8012834 <tcp_abandon+0x174>)
 8012794:	f000 ff7a 	bl	801368c <tcp_pcb_remove>
 8012798:	4b27      	ldr	r3, [pc, #156]	; (8012838 <tcp_abandon+0x178>)
 801279a:	2201      	movs	r2, #1
 801279c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d004      	beq.n	80127b0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127aa:	4618      	mov	r0, r3
 80127ac:	f000 fd1c 	bl	80131e8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d004      	beq.n	80127c2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127bc:	4618      	mov	r0, r3
 80127be:	f000 fd13 	bl	80131e8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d004      	beq.n	80127d4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127ce:	4618      	mov	r0, r3
 80127d0:	f000 fd0a 	bl	80131e8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80127d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d00e      	beq.n	80127f8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80127da:	6879      	ldr	r1, [r7, #4]
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	3304      	adds	r3, #4
 80127e0:	687a      	ldr	r2, [r7, #4]
 80127e2:	8b12      	ldrh	r2, [r2, #24]
 80127e4:	9202      	str	r2, [sp, #8]
 80127e6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80127e8:	9201      	str	r2, [sp, #4]
 80127ea:	9300      	str	r3, [sp, #0]
 80127ec:	460b      	mov	r3, r1
 80127ee:	697a      	ldr	r2, [r7, #20]
 80127f0:	69b9      	ldr	r1, [r7, #24]
 80127f2:	6878      	ldr	r0, [r7, #4]
 80127f4:	f004 fcbe 	bl	8017174 <tcp_rst>
    }
    last_state = pcb->state;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	7d1b      	ldrb	r3, [r3, #20]
 80127fc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80127fe:	6878      	ldr	r0, [r7, #4]
 8012800:	f7ff fd34 	bl	801226c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012804:	693b      	ldr	r3, [r7, #16]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d004      	beq.n	8012814 <tcp_abandon+0x154>
 801280a:	693b      	ldr	r3, [r7, #16]
 801280c:	f06f 010c 	mvn.w	r1, #12
 8012810:	68f8      	ldr	r0, [r7, #12]
 8012812:	4798      	blx	r3
  }
}
 8012814:	3728      	adds	r7, #40	; 0x28
 8012816:	46bd      	mov	sp, r7
 8012818:	bd80      	pop	{r7, pc}
 801281a:	bf00      	nop
 801281c:	0801c9b8 	.word	0x0801c9b8
 8012820:	0801cafc 	.word	0x0801cafc
 8012824:	0801c9fc 	.word	0x0801c9fc
 8012828:	0801cb18 	.word	0x0801cb18
 801282c:	2000dc90 	.word	0x2000dc90
 8012830:	2000dc8c 	.word	0x2000dc8c
 8012834:	2000dc80 	.word	0x2000dc80
 8012838:	2000dc7c 	.word	0x2000dc7c

0801283c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801283c:	b580      	push	{r7, lr}
 801283e:	b082      	sub	sp, #8
 8012840:	af00      	add	r7, sp, #0
 8012842:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012844:	2101      	movs	r1, #1
 8012846:	6878      	ldr	r0, [r7, #4]
 8012848:	f7ff ff3a 	bl	80126c0 <tcp_abandon>
}
 801284c:	bf00      	nop
 801284e:	3708      	adds	r7, #8
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}

08012854 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b084      	sub	sp, #16
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d106      	bne.n	8012870 <tcp_update_rcv_ann_wnd+0x1c>
 8012862:	4b25      	ldr	r3, [pc, #148]	; (80128f8 <tcp_update_rcv_ann_wnd+0xa4>)
 8012864:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012868:	4924      	ldr	r1, [pc, #144]	; (80128fc <tcp_update_rcv_ann_wnd+0xa8>)
 801286a:	4825      	ldr	r0, [pc, #148]	; (8012900 <tcp_update_rcv_ann_wnd+0xac>)
 801286c:	f008 f81c 	bl	801a8a8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012874:	687a      	ldr	r2, [r7, #4]
 8012876:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012878:	4413      	add	r3, r2
 801287a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012880:	687a      	ldr	r2, [r7, #4]
 8012882:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8012884:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8012888:	bf28      	it	cs
 801288a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801288e:	b292      	uxth	r2, r2
 8012890:	4413      	add	r3, r2
 8012892:	68fa      	ldr	r2, [r7, #12]
 8012894:	1ad3      	subs	r3, r2, r3
 8012896:	2b00      	cmp	r3, #0
 8012898:	db08      	blt.n	80128ac <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128a6:	68fa      	ldr	r2, [r7, #12]
 80128a8:	1ad3      	subs	r3, r2, r3
 80128aa:	e020      	b.n	80128ee <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128b4:	1ad3      	subs	r3, r2, r3
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	dd03      	ble.n	80128c2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	2200      	movs	r2, #0
 80128be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80128c0:	e014      	b.n	80128ec <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128ca:	1ad3      	subs	r3, r2, r3
 80128cc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80128d4:	d306      	bcc.n	80128e4 <tcp_update_rcv_ann_wnd+0x90>
 80128d6:	4b08      	ldr	r3, [pc, #32]	; (80128f8 <tcp_update_rcv_ann_wnd+0xa4>)
 80128d8:	f240 32b6 	movw	r2, #950	; 0x3b6
 80128dc:	4909      	ldr	r1, [pc, #36]	; (8012904 <tcp_update_rcv_ann_wnd+0xb0>)
 80128de:	4808      	ldr	r0, [pc, #32]	; (8012900 <tcp_update_rcv_ann_wnd+0xac>)
 80128e0:	f007 ffe2 	bl	801a8a8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80128e4:	68bb      	ldr	r3, [r7, #8]
 80128e6:	b29a      	uxth	r2, r3
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80128ec:	2300      	movs	r3, #0
  }
}
 80128ee:	4618      	mov	r0, r3
 80128f0:	3710      	adds	r7, #16
 80128f2:	46bd      	mov	sp, r7
 80128f4:	bd80      	pop	{r7, pc}
 80128f6:	bf00      	nop
 80128f8:	0801c9b8 	.word	0x0801c9b8
 80128fc:	0801cc14 	.word	0x0801cc14
 8012900:	0801c9fc 	.word	0x0801c9fc
 8012904:	0801cc38 	.word	0x0801cc38

08012908 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b084      	sub	sp, #16
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
 8012910:	460b      	mov	r3, r1
 8012912:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d107      	bne.n	801292a <tcp_recved+0x22>
 801291a:	4b1f      	ldr	r3, [pc, #124]	; (8012998 <tcp_recved+0x90>)
 801291c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8012920:	491e      	ldr	r1, [pc, #120]	; (801299c <tcp_recved+0x94>)
 8012922:	481f      	ldr	r0, [pc, #124]	; (80129a0 <tcp_recved+0x98>)
 8012924:	f007 ffc0 	bl	801a8a8 <iprintf>
 8012928:	e032      	b.n	8012990 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	7d1b      	ldrb	r3, [r3, #20]
 801292e:	2b01      	cmp	r3, #1
 8012930:	d106      	bne.n	8012940 <tcp_recved+0x38>
 8012932:	4b19      	ldr	r3, [pc, #100]	; (8012998 <tcp_recved+0x90>)
 8012934:	f240 32d2 	movw	r2, #978	; 0x3d2
 8012938:	491a      	ldr	r1, [pc, #104]	; (80129a4 <tcp_recved+0x9c>)
 801293a:	4819      	ldr	r0, [pc, #100]	; (80129a0 <tcp_recved+0x98>)
 801293c:	f007 ffb4 	bl	801a8a8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012944:	887b      	ldrh	r3, [r7, #2]
 8012946:	4413      	add	r3, r2
 8012948:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801294a:	89fb      	ldrh	r3, [r7, #14]
 801294c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012950:	d804      	bhi.n	801295c <tcp_recved+0x54>
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012956:	89fa      	ldrh	r2, [r7, #14]
 8012958:	429a      	cmp	r2, r3
 801295a:	d204      	bcs.n	8012966 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012962:	851a      	strh	r2, [r3, #40]	; 0x28
 8012964:	e002      	b.n	801296c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	89fa      	ldrh	r2, [r7, #14]
 801296a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801296c:	6878      	ldr	r0, [r7, #4]
 801296e:	f7ff ff71 	bl	8012854 <tcp_update_rcv_ann_wnd>
 8012972:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012974:	68bb      	ldr	r3, [r7, #8]
 8012976:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801297a:	d309      	bcc.n	8012990 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	8b5b      	ldrh	r3, [r3, #26]
 8012980:	f043 0302 	orr.w	r3, r3, #2
 8012984:	b29a      	uxth	r2, r3
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801298a:	6878      	ldr	r0, [r7, #4]
 801298c:	f003 fe3e 	bl	801660c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012990:	3710      	adds	r7, #16
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}
 8012996:	bf00      	nop
 8012998:	0801c9b8 	.word	0x0801c9b8
 801299c:	0801cc54 	.word	0x0801cc54
 80129a0:	0801c9fc 	.word	0x0801c9fc
 80129a4:	0801cc6c 	.word	0x0801cc6c

080129a8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80129a8:	b5b0      	push	{r4, r5, r7, lr}
 80129aa:	b090      	sub	sp, #64	; 0x40
 80129ac:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80129ae:	2300      	movs	r3, #0
 80129b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80129b4:	4b94      	ldr	r3, [pc, #592]	; (8012c08 <tcp_slowtmr+0x260>)
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	3301      	adds	r3, #1
 80129ba:	4a93      	ldr	r2, [pc, #588]	; (8012c08 <tcp_slowtmr+0x260>)
 80129bc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80129be:	4b93      	ldr	r3, [pc, #588]	; (8012c0c <tcp_slowtmr+0x264>)
 80129c0:	781b      	ldrb	r3, [r3, #0]
 80129c2:	3301      	adds	r3, #1
 80129c4:	b2da      	uxtb	r2, r3
 80129c6:	4b91      	ldr	r3, [pc, #580]	; (8012c0c <tcp_slowtmr+0x264>)
 80129c8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80129ca:	2300      	movs	r3, #0
 80129cc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80129ce:	4b90      	ldr	r3, [pc, #576]	; (8012c10 <tcp_slowtmr+0x268>)
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80129d4:	e29f      	b.n	8012f16 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80129d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d8:	7d1b      	ldrb	r3, [r3, #20]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d106      	bne.n	80129ec <tcp_slowtmr+0x44>
 80129de:	4b8d      	ldr	r3, [pc, #564]	; (8012c14 <tcp_slowtmr+0x26c>)
 80129e0:	f240 42be 	movw	r2, #1214	; 0x4be
 80129e4:	498c      	ldr	r1, [pc, #560]	; (8012c18 <tcp_slowtmr+0x270>)
 80129e6:	488d      	ldr	r0, [pc, #564]	; (8012c1c <tcp_slowtmr+0x274>)
 80129e8:	f007 ff5e 	bl	801a8a8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80129ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ee:	7d1b      	ldrb	r3, [r3, #20]
 80129f0:	2b01      	cmp	r3, #1
 80129f2:	d106      	bne.n	8012a02 <tcp_slowtmr+0x5a>
 80129f4:	4b87      	ldr	r3, [pc, #540]	; (8012c14 <tcp_slowtmr+0x26c>)
 80129f6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80129fa:	4989      	ldr	r1, [pc, #548]	; (8012c20 <tcp_slowtmr+0x278>)
 80129fc:	4887      	ldr	r0, [pc, #540]	; (8012c1c <tcp_slowtmr+0x274>)
 80129fe:	f007 ff53 	bl	801a8a8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a04:	7d1b      	ldrb	r3, [r3, #20]
 8012a06:	2b0a      	cmp	r3, #10
 8012a08:	d106      	bne.n	8012a18 <tcp_slowtmr+0x70>
 8012a0a:	4b82      	ldr	r3, [pc, #520]	; (8012c14 <tcp_slowtmr+0x26c>)
 8012a0c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8012a10:	4984      	ldr	r1, [pc, #528]	; (8012c24 <tcp_slowtmr+0x27c>)
 8012a12:	4882      	ldr	r0, [pc, #520]	; (8012c1c <tcp_slowtmr+0x274>)
 8012a14:	f007 ff48 	bl	801a8a8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a1a:	7f9a      	ldrb	r2, [r3, #30]
 8012a1c:	4b7b      	ldr	r3, [pc, #492]	; (8012c0c <tcp_slowtmr+0x264>)
 8012a1e:	781b      	ldrb	r3, [r3, #0]
 8012a20:	429a      	cmp	r2, r3
 8012a22:	d105      	bne.n	8012a30 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8012a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a26:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a2a:	68db      	ldr	r3, [r3, #12]
 8012a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8012a2e:	e272      	b.n	8012f16 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8012a30:	4b76      	ldr	r3, [pc, #472]	; (8012c0c <tcp_slowtmr+0x264>)
 8012a32:	781a      	ldrb	r2, [r3, #0]
 8012a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a36:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8012a38:	2300      	movs	r3, #0
 8012a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a46:	7d1b      	ldrb	r3, [r3, #20]
 8012a48:	2b02      	cmp	r3, #2
 8012a4a:	d10a      	bne.n	8012a62 <tcp_slowtmr+0xba>
 8012a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012a52:	2b05      	cmp	r3, #5
 8012a54:	d905      	bls.n	8012a62 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8012a56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a5a:	3301      	adds	r3, #1
 8012a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012a60:	e11e      	b.n	8012ca0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8012a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012a68:	2b0b      	cmp	r3, #11
 8012a6a:	d905      	bls.n	8012a78 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8012a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a70:	3301      	adds	r3, #1
 8012a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012a76:	e113      	b.n	8012ca0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8012a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a7a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d075      	beq.n	8012b6e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8012a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d006      	beq.n	8012a98 <tcp_slowtmr+0xf0>
 8012a8a:	4b62      	ldr	r3, [pc, #392]	; (8012c14 <tcp_slowtmr+0x26c>)
 8012a8c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8012a90:	4965      	ldr	r1, [pc, #404]	; (8012c28 <tcp_slowtmr+0x280>)
 8012a92:	4862      	ldr	r0, [pc, #392]	; (8012c1c <tcp_slowtmr+0x274>)
 8012a94:	f007 ff08 	bl	801a8a8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d106      	bne.n	8012aae <tcp_slowtmr+0x106>
 8012aa0:	4b5c      	ldr	r3, [pc, #368]	; (8012c14 <tcp_slowtmr+0x26c>)
 8012aa2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8012aa6:	4961      	ldr	r1, [pc, #388]	; (8012c2c <tcp_slowtmr+0x284>)
 8012aa8:	485c      	ldr	r0, [pc, #368]	; (8012c1c <tcp_slowtmr+0x274>)
 8012aaa:	f007 fefd 	bl	801a8a8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8012aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ab0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012ab4:	2b0b      	cmp	r3, #11
 8012ab6:	d905      	bls.n	8012ac4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8012ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012abc:	3301      	adds	r3, #1
 8012abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012ac2:	e0ed      	b.n	8012ca0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8012ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ac6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012aca:	3b01      	subs	r3, #1
 8012acc:	4a58      	ldr	r2, [pc, #352]	; (8012c30 <tcp_slowtmr+0x288>)
 8012ace:	5cd3      	ldrb	r3, [r2, r3]
 8012ad0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8012ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ad4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012ad8:	7c7a      	ldrb	r2, [r7, #17]
 8012ada:	429a      	cmp	r2, r3
 8012adc:	d907      	bls.n	8012aee <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8012ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ae0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012ae4:	3301      	adds	r3, #1
 8012ae6:	b2da      	uxtb	r2, r3
 8012ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8012aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012af0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012af4:	7c7a      	ldrb	r2, [r7, #17]
 8012af6:	429a      	cmp	r2, r3
 8012af8:	f200 80d2 	bhi.w	8012ca0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8012afc:	2301      	movs	r3, #1
 8012afe:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8012b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d108      	bne.n	8012b1c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8012b0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b0c:	f004 fc26 	bl	801735c <tcp_zero_window_probe>
 8012b10:	4603      	mov	r3, r0
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d014      	beq.n	8012b40 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8012b16:	2300      	movs	r3, #0
 8012b18:	623b      	str	r3, [r7, #32]
 8012b1a:	e011      	b.n	8012b40 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8012b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012b22:	4619      	mov	r1, r3
 8012b24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b26:	f003 faeb 	bl	8016100 <tcp_split_unsent_seg>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d107      	bne.n	8012b40 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8012b30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b32:	f003 fd6b 	bl	801660c <tcp_output>
 8012b36:	4603      	mov	r3, r0
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d101      	bne.n	8012b40 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8012b40:	6a3b      	ldr	r3, [r7, #32]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	f000 80ac 	beq.w	8012ca0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8012b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8012b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b52:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012b56:	2b06      	cmp	r3, #6
 8012b58:	f200 80a2 	bhi.w	8012ca0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8012b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b5e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012b62:	3301      	adds	r3, #1
 8012b64:	b2da      	uxtb	r2, r3
 8012b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b68:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8012b6c:	e098      	b.n	8012ca0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8012b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b70:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	db0f      	blt.n	8012b98 <tcp_slowtmr+0x1f0>
 8012b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b7a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012b7e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012b82:	4293      	cmp	r3, r2
 8012b84:	d008      	beq.n	8012b98 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8012b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b88:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012b8c:	b29b      	uxth	r3, r3
 8012b8e:	3301      	adds	r3, #1
 8012b90:	b29b      	uxth	r3, r3
 8012b92:	b21a      	sxth	r2, r3
 8012b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b96:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8012b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b9a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8012b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ba0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012ba4:	429a      	cmp	r2, r3
 8012ba6:	db7b      	blt.n	8012ca0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8012ba8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012baa:	f004 f821 	bl	8016bf0 <tcp_rexmit_rto_prepare>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d007      	beq.n	8012bc4 <tcp_slowtmr+0x21c>
 8012bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d171      	bne.n	8012ca0 <tcp_slowtmr+0x2f8>
 8012bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d06d      	beq.n	8012ca0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8012bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bc6:	7d1b      	ldrb	r3, [r3, #20]
 8012bc8:	2b02      	cmp	r3, #2
 8012bca:	d03a      	beq.n	8012c42 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8012bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012bd2:	2b0c      	cmp	r3, #12
 8012bd4:	bf28      	it	cs
 8012bd6:	230c      	movcs	r3, #12
 8012bd8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bdc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012be0:	10db      	asrs	r3, r3, #3
 8012be2:	b21b      	sxth	r3, r3
 8012be4:	461a      	mov	r2, r3
 8012be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012be8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012bec:	4413      	add	r3, r2
 8012bee:	7efa      	ldrb	r2, [r7, #27]
 8012bf0:	4910      	ldr	r1, [pc, #64]	; (8012c34 <tcp_slowtmr+0x28c>)
 8012bf2:	5c8a      	ldrb	r2, [r1, r2]
 8012bf4:	4093      	lsls	r3, r2
 8012bf6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012bf8:	697b      	ldr	r3, [r7, #20]
 8012bfa:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8012bfe:	4293      	cmp	r3, r2
 8012c00:	dc1a      	bgt.n	8012c38 <tcp_slowtmr+0x290>
 8012c02:	697b      	ldr	r3, [r7, #20]
 8012c04:	b21a      	sxth	r2, r3
 8012c06:	e019      	b.n	8012c3c <tcp_slowtmr+0x294>
 8012c08:	2000dc84 	.word	0x2000dc84
 8012c0c:	2000317a 	.word	0x2000317a
 8012c10:	2000dc80 	.word	0x2000dc80
 8012c14:	0801c9b8 	.word	0x0801c9b8
 8012c18:	0801ccfc 	.word	0x0801ccfc
 8012c1c:	0801c9fc 	.word	0x0801c9fc
 8012c20:	0801cd28 	.word	0x0801cd28
 8012c24:	0801cd54 	.word	0x0801cd54
 8012c28:	0801cd84 	.word	0x0801cd84
 8012c2c:	0801cdb8 	.word	0x0801cdb8
 8012c30:	080952f4 	.word	0x080952f4
 8012c34:	080952e4 	.word	0x080952e4
 8012c38:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8012c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c44:	2200      	movs	r2, #0
 8012c46:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8012c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c4a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c50:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012c54:	4293      	cmp	r3, r2
 8012c56:	bf28      	it	cs
 8012c58:	4613      	movcs	r3, r2
 8012c5a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8012c5c:	8a7b      	ldrh	r3, [r7, #18]
 8012c5e:	085b      	lsrs	r3, r3, #1
 8012c60:	b29a      	uxth	r2, r3
 8012c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c64:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c6a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c72:	005b      	lsls	r3, r3, #1
 8012c74:	b29b      	uxth	r3, r3
 8012c76:	429a      	cmp	r2, r3
 8012c78:	d206      	bcs.n	8012c88 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8012c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c7e:	005b      	lsls	r3, r3, #1
 8012c80:	b29a      	uxth	r2, r3
 8012c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8012c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c8a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8012c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c94:	2200      	movs	r2, #0
 8012c96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8012c9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c9c:	f004 f818 	bl	8016cd0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8012ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ca2:	7d1b      	ldrb	r3, [r3, #20]
 8012ca4:	2b06      	cmp	r3, #6
 8012ca6:	d111      	bne.n	8012ccc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8012ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012caa:	8b5b      	ldrh	r3, [r3, #26]
 8012cac:	f003 0310 	and.w	r3, r3, #16
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d00b      	beq.n	8012ccc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012cb4:	4b9d      	ldr	r3, [pc, #628]	; (8012f2c <tcp_slowtmr+0x584>)
 8012cb6:	681a      	ldr	r2, [r3, #0]
 8012cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cba:	6a1b      	ldr	r3, [r3, #32]
 8012cbc:	1ad3      	subs	r3, r2, r3
 8012cbe:	2b28      	cmp	r3, #40	; 0x28
 8012cc0:	d904      	bls.n	8012ccc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8012cc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012cc6:	3301      	adds	r3, #1
 8012cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cce:	7a5b      	ldrb	r3, [r3, #9]
 8012cd0:	f003 0308 	and.w	r3, r3, #8
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d04c      	beq.n	8012d72 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8012cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cda:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012cdc:	2b04      	cmp	r3, #4
 8012cde:	d003      	beq.n	8012ce8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8012ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ce2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012ce4:	2b07      	cmp	r3, #7
 8012ce6:	d144      	bne.n	8012d72 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012ce8:	4b90      	ldr	r3, [pc, #576]	; (8012f2c <tcp_slowtmr+0x584>)
 8012cea:	681a      	ldr	r2, [r3, #0]
 8012cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cee:	6a1b      	ldr	r3, [r3, #32]
 8012cf0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8012cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012cf8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8012cfc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8012d00:	498b      	ldr	r1, [pc, #556]	; (8012f30 <tcp_slowtmr+0x588>)
 8012d02:	fba1 1303 	umull	r1, r3, r1, r3
 8012d06:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012d08:	429a      	cmp	r2, r3
 8012d0a:	d90a      	bls.n	8012d22 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8012d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d10:	3301      	adds	r3, #1
 8012d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8012d16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012d1a:	3301      	adds	r3, #1
 8012d1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012d20:	e027      	b.n	8012d72 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012d22:	4b82      	ldr	r3, [pc, #520]	; (8012f2c <tcp_slowtmr+0x584>)
 8012d24:	681a      	ldr	r2, [r3, #0]
 8012d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d28:	6a1b      	ldr	r3, [r3, #32]
 8012d2a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8012d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d2e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8012d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d34:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012d38:	4618      	mov	r0, r3
 8012d3a:	4b7e      	ldr	r3, [pc, #504]	; (8012f34 <tcp_slowtmr+0x58c>)
 8012d3c:	fb03 f300 	mul.w	r3, r3, r0
 8012d40:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8012d42:	497b      	ldr	r1, [pc, #492]	; (8012f30 <tcp_slowtmr+0x588>)
 8012d44:	fba1 1303 	umull	r1, r3, r1, r3
 8012d48:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012d4a:	429a      	cmp	r2, r3
 8012d4c:	d911      	bls.n	8012d72 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8012d4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012d50:	f004 fac4 	bl	80172dc <tcp_keepalive>
 8012d54:	4603      	mov	r3, r0
 8012d56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8012d5a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d107      	bne.n	8012d72 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8012d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d64:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012d68:	3301      	adds	r3, #1
 8012d6a:	b2da      	uxtb	r2, r3
 8012d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d6e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8012d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d011      	beq.n	8012d9e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8012d7a:	4b6c      	ldr	r3, [pc, #432]	; (8012f2c <tcp_slowtmr+0x584>)
 8012d7c:	681a      	ldr	r2, [r3, #0]
 8012d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d80:	6a1b      	ldr	r3, [r3, #32]
 8012d82:	1ad2      	subs	r2, r2, r3
 8012d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d86:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012d8a:	4619      	mov	r1, r3
 8012d8c:	460b      	mov	r3, r1
 8012d8e:	005b      	lsls	r3, r3, #1
 8012d90:	440b      	add	r3, r1
 8012d92:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8012d94:	429a      	cmp	r2, r3
 8012d96:	d302      	bcc.n	8012d9e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8012d98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012d9a:	f000 fddb 	bl	8013954 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8012d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012da0:	7d1b      	ldrb	r3, [r3, #20]
 8012da2:	2b03      	cmp	r3, #3
 8012da4:	d10b      	bne.n	8012dbe <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012da6:	4b61      	ldr	r3, [pc, #388]	; (8012f2c <tcp_slowtmr+0x584>)
 8012da8:	681a      	ldr	r2, [r3, #0]
 8012daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dac:	6a1b      	ldr	r3, [r3, #32]
 8012dae:	1ad3      	subs	r3, r2, r3
 8012db0:	2b28      	cmp	r3, #40	; 0x28
 8012db2:	d904      	bls.n	8012dbe <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8012db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012db8:	3301      	adds	r3, #1
 8012dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8012dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dc0:	7d1b      	ldrb	r3, [r3, #20]
 8012dc2:	2b09      	cmp	r3, #9
 8012dc4:	d10b      	bne.n	8012dde <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012dc6:	4b59      	ldr	r3, [pc, #356]	; (8012f2c <tcp_slowtmr+0x584>)
 8012dc8:	681a      	ldr	r2, [r3, #0]
 8012dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dcc:	6a1b      	ldr	r3, [r3, #32]
 8012dce:	1ad3      	subs	r3, r2, r3
 8012dd0:	2bf0      	cmp	r3, #240	; 0xf0
 8012dd2:	d904      	bls.n	8012dde <tcp_slowtmr+0x436>
        ++pcb_remove;
 8012dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012dd8:	3301      	adds	r3, #1
 8012dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d060      	beq.n	8012ea8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8012de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012dec:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8012dee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012df0:	f000 fbfc 	bl	80135ec <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8012df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d010      	beq.n	8012e1c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8012dfa:	4b4f      	ldr	r3, [pc, #316]	; (8012f38 <tcp_slowtmr+0x590>)
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e00:	429a      	cmp	r2, r3
 8012e02:	d106      	bne.n	8012e12 <tcp_slowtmr+0x46a>
 8012e04:	4b4d      	ldr	r3, [pc, #308]	; (8012f3c <tcp_slowtmr+0x594>)
 8012e06:	f240 526d 	movw	r2, #1389	; 0x56d
 8012e0a:	494d      	ldr	r1, [pc, #308]	; (8012f40 <tcp_slowtmr+0x598>)
 8012e0c:	484d      	ldr	r0, [pc, #308]	; (8012f44 <tcp_slowtmr+0x59c>)
 8012e0e:	f007 fd4b 	bl	801a8a8 <iprintf>
        prev->next = pcb->next;
 8012e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e14:	68da      	ldr	r2, [r3, #12]
 8012e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e18:	60da      	str	r2, [r3, #12]
 8012e1a:	e00f      	b.n	8012e3c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8012e1c:	4b46      	ldr	r3, [pc, #280]	; (8012f38 <tcp_slowtmr+0x590>)
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e22:	429a      	cmp	r2, r3
 8012e24:	d006      	beq.n	8012e34 <tcp_slowtmr+0x48c>
 8012e26:	4b45      	ldr	r3, [pc, #276]	; (8012f3c <tcp_slowtmr+0x594>)
 8012e28:	f240 5271 	movw	r2, #1393	; 0x571
 8012e2c:	4946      	ldr	r1, [pc, #280]	; (8012f48 <tcp_slowtmr+0x5a0>)
 8012e2e:	4845      	ldr	r0, [pc, #276]	; (8012f44 <tcp_slowtmr+0x59c>)
 8012e30:	f007 fd3a 	bl	801a8a8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8012e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e36:	68db      	ldr	r3, [r3, #12]
 8012e38:	4a3f      	ldr	r2, [pc, #252]	; (8012f38 <tcp_slowtmr+0x590>)
 8012e3a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8012e3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d013      	beq.n	8012e6c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e46:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e4a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012e4c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8012e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e50:	3304      	adds	r3, #4
 8012e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e54:	8ad2      	ldrh	r2, [r2, #22]
 8012e56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e58:	8b09      	ldrh	r1, [r1, #24]
 8012e5a:	9102      	str	r1, [sp, #8]
 8012e5c:	9201      	str	r2, [sp, #4]
 8012e5e:	9300      	str	r3, [sp, #0]
 8012e60:	462b      	mov	r3, r5
 8012e62:	4622      	mov	r2, r4
 8012e64:	4601      	mov	r1, r0
 8012e66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012e68:	f004 f984 	bl	8017174 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8012e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e6e:	691b      	ldr	r3, [r3, #16]
 8012e70:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e74:	7d1b      	ldrb	r3, [r3, #20]
 8012e76:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e7a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e7e:	68db      	ldr	r3, [r3, #12]
 8012e80:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012e82:	6838      	ldr	r0, [r7, #0]
 8012e84:	f7ff f9f2 	bl	801226c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8012e88:	4b30      	ldr	r3, [pc, #192]	; (8012f4c <tcp_slowtmr+0x5a4>)
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d004      	beq.n	8012e9e <tcp_slowtmr+0x4f6>
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	f06f 010c 	mvn.w	r1, #12
 8012e9a:	68b8      	ldr	r0, [r7, #8]
 8012e9c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012e9e:	4b2b      	ldr	r3, [pc, #172]	; (8012f4c <tcp_slowtmr+0x5a4>)
 8012ea0:	781b      	ldrb	r3, [r3, #0]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d037      	beq.n	8012f16 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8012ea6:	e590      	b.n	80129ca <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8012ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eaa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eae:	68db      	ldr	r3, [r3, #12]
 8012eb0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8012eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eb4:	7f1b      	ldrb	r3, [r3, #28]
 8012eb6:	3301      	adds	r3, #1
 8012eb8:	b2da      	uxtb	r2, r3
 8012eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ebc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ec0:	7f1a      	ldrb	r2, [r3, #28]
 8012ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ec4:	7f5b      	ldrb	r3, [r3, #29]
 8012ec6:	429a      	cmp	r2, r3
 8012ec8:	d325      	bcc.n	8012f16 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8012eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ecc:	2200      	movs	r2, #0
 8012ece:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8012ed0:	4b1e      	ldr	r3, [pc, #120]	; (8012f4c <tcp_slowtmr+0x5a4>)
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8012ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d00b      	beq.n	8012ef8 <tcp_slowtmr+0x550>
 8012ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ee8:	6912      	ldr	r2, [r2, #16]
 8012eea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012eec:	4610      	mov	r0, r2
 8012eee:	4798      	blx	r3
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8012ef6:	e002      	b.n	8012efe <tcp_slowtmr+0x556>
 8012ef8:	2300      	movs	r3, #0
 8012efa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8012efe:	4b13      	ldr	r3, [pc, #76]	; (8012f4c <tcp_slowtmr+0x5a4>)
 8012f00:	781b      	ldrb	r3, [r3, #0]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d000      	beq.n	8012f08 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8012f06:	e560      	b.n	80129ca <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012f08:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d102      	bne.n	8012f16 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8012f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f12:	f003 fb7b 	bl	801660c <tcp_output>
  while (pcb != NULL) {
 8012f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	f47f ad5c 	bne.w	80129d6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012f1e:	2300      	movs	r3, #0
 8012f20:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8012f22:	4b0b      	ldr	r3, [pc, #44]	; (8012f50 <tcp_slowtmr+0x5a8>)
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012f28:	e067      	b.n	8012ffa <tcp_slowtmr+0x652>
 8012f2a:	bf00      	nop
 8012f2c:	2000dc84 	.word	0x2000dc84
 8012f30:	10624dd3 	.word	0x10624dd3
 8012f34:	000124f8 	.word	0x000124f8
 8012f38:	2000dc80 	.word	0x2000dc80
 8012f3c:	0801c9b8 	.word	0x0801c9b8
 8012f40:	0801cdf0 	.word	0x0801cdf0
 8012f44:	0801c9fc 	.word	0x0801c9fc
 8012f48:	0801ce1c 	.word	0x0801ce1c
 8012f4c:	2000dc7c 	.word	0x2000dc7c
 8012f50:	2000dc90 	.word	0x2000dc90
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f56:	7d1b      	ldrb	r3, [r3, #20]
 8012f58:	2b0a      	cmp	r3, #10
 8012f5a:	d006      	beq.n	8012f6a <tcp_slowtmr+0x5c2>
 8012f5c:	4b2b      	ldr	r3, [pc, #172]	; (801300c <tcp_slowtmr+0x664>)
 8012f5e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8012f62:	492b      	ldr	r1, [pc, #172]	; (8013010 <tcp_slowtmr+0x668>)
 8012f64:	482b      	ldr	r0, [pc, #172]	; (8013014 <tcp_slowtmr+0x66c>)
 8012f66:	f007 fc9f 	bl	801a8a8 <iprintf>
    pcb_remove = 0;
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012f70:	4b29      	ldr	r3, [pc, #164]	; (8013018 <tcp_slowtmr+0x670>)
 8012f72:	681a      	ldr	r2, [r3, #0]
 8012f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f76:	6a1b      	ldr	r3, [r3, #32]
 8012f78:	1ad3      	subs	r3, r2, r3
 8012f7a:	2bf0      	cmp	r3, #240	; 0xf0
 8012f7c:	d904      	bls.n	8012f88 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8012f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f82:	3301      	adds	r3, #1
 8012f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d02f      	beq.n	8012ff0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012f90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f92:	f000 fb2b 	bl	80135ec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d010      	beq.n	8012fbe <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012f9c:	4b1f      	ldr	r3, [pc, #124]	; (801301c <tcp_slowtmr+0x674>)
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012fa2:	429a      	cmp	r2, r3
 8012fa4:	d106      	bne.n	8012fb4 <tcp_slowtmr+0x60c>
 8012fa6:	4b19      	ldr	r3, [pc, #100]	; (801300c <tcp_slowtmr+0x664>)
 8012fa8:	f240 52af 	movw	r2, #1455	; 0x5af
 8012fac:	491c      	ldr	r1, [pc, #112]	; (8013020 <tcp_slowtmr+0x678>)
 8012fae:	4819      	ldr	r0, [pc, #100]	; (8013014 <tcp_slowtmr+0x66c>)
 8012fb0:	f007 fc7a 	bl	801a8a8 <iprintf>
        prev->next = pcb->next;
 8012fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fb6:	68da      	ldr	r2, [r3, #12]
 8012fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fba:	60da      	str	r2, [r3, #12]
 8012fbc:	e00f      	b.n	8012fde <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012fbe:	4b17      	ldr	r3, [pc, #92]	; (801301c <tcp_slowtmr+0x674>)
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012fc4:	429a      	cmp	r2, r3
 8012fc6:	d006      	beq.n	8012fd6 <tcp_slowtmr+0x62e>
 8012fc8:	4b10      	ldr	r3, [pc, #64]	; (801300c <tcp_slowtmr+0x664>)
 8012fca:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012fce:	4915      	ldr	r1, [pc, #84]	; (8013024 <tcp_slowtmr+0x67c>)
 8012fd0:	4810      	ldr	r0, [pc, #64]	; (8013014 <tcp_slowtmr+0x66c>)
 8012fd2:	f007 fc69 	bl	801a8a8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fd8:	68db      	ldr	r3, [r3, #12]
 8012fda:	4a10      	ldr	r2, [pc, #64]	; (801301c <tcp_slowtmr+0x674>)
 8012fdc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fe0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fe4:	68db      	ldr	r3, [r3, #12]
 8012fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012fe8:	69f8      	ldr	r0, [r7, #28]
 8012fea:	f7ff f93f 	bl	801226c <tcp_free>
 8012fee:	e004      	b.n	8012ffa <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8012ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ff2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ff6:	68db      	ldr	r3, [r3, #12]
 8012ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d1a9      	bne.n	8012f54 <tcp_slowtmr+0x5ac>
    }
  }
}
 8013000:	bf00      	nop
 8013002:	bf00      	nop
 8013004:	3730      	adds	r7, #48	; 0x30
 8013006:	46bd      	mov	sp, r7
 8013008:	bdb0      	pop	{r4, r5, r7, pc}
 801300a:	bf00      	nop
 801300c:	0801c9b8 	.word	0x0801c9b8
 8013010:	0801ce48 	.word	0x0801ce48
 8013014:	0801c9fc 	.word	0x0801c9fc
 8013018:	2000dc84 	.word	0x2000dc84
 801301c:	2000dc90 	.word	0x2000dc90
 8013020:	0801ce78 	.word	0x0801ce78
 8013024:	0801cea0 	.word	0x0801cea0

08013028 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b082      	sub	sp, #8
 801302c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801302e:	4b2d      	ldr	r3, [pc, #180]	; (80130e4 <tcp_fasttmr+0xbc>)
 8013030:	781b      	ldrb	r3, [r3, #0]
 8013032:	3301      	adds	r3, #1
 8013034:	b2da      	uxtb	r2, r3
 8013036:	4b2b      	ldr	r3, [pc, #172]	; (80130e4 <tcp_fasttmr+0xbc>)
 8013038:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801303a:	4b2b      	ldr	r3, [pc, #172]	; (80130e8 <tcp_fasttmr+0xc0>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013040:	e048      	b.n	80130d4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	7f9a      	ldrb	r2, [r3, #30]
 8013046:	4b27      	ldr	r3, [pc, #156]	; (80130e4 <tcp_fasttmr+0xbc>)
 8013048:	781b      	ldrb	r3, [r3, #0]
 801304a:	429a      	cmp	r2, r3
 801304c:	d03f      	beq.n	80130ce <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801304e:	4b25      	ldr	r3, [pc, #148]	; (80130e4 <tcp_fasttmr+0xbc>)
 8013050:	781a      	ldrb	r2, [r3, #0]
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	8b5b      	ldrh	r3, [r3, #26]
 801305a:	f003 0301 	and.w	r3, r3, #1
 801305e:	2b00      	cmp	r3, #0
 8013060:	d010      	beq.n	8013084 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	8b5b      	ldrh	r3, [r3, #26]
 8013066:	f043 0302 	orr.w	r3, r3, #2
 801306a:	b29a      	uxth	r2, r3
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8013070:	6878      	ldr	r0, [r7, #4]
 8013072:	f003 facb 	bl	801660c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	8b5b      	ldrh	r3, [r3, #26]
 801307a:	f023 0303 	bic.w	r3, r3, #3
 801307e:	b29a      	uxth	r2, r3
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	8b5b      	ldrh	r3, [r3, #26]
 8013088:	f003 0308 	and.w	r3, r3, #8
 801308c:	2b00      	cmp	r3, #0
 801308e:	d009      	beq.n	80130a4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	8b5b      	ldrh	r3, [r3, #26]
 8013094:	f023 0308 	bic.w	r3, r3, #8
 8013098:	b29a      	uxth	r2, r3
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801309e:	6878      	ldr	r0, [r7, #4]
 80130a0:	f7ff fa78 	bl	8012594 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	68db      	ldr	r3, [r3, #12]
 80130a8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d00a      	beq.n	80130c8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80130b2:	4b0e      	ldr	r3, [pc, #56]	; (80130ec <tcp_fasttmr+0xc4>)
 80130b4:	2200      	movs	r2, #0
 80130b6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80130b8:	6878      	ldr	r0, [r7, #4]
 80130ba:	f000 f819 	bl	80130f0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80130be:	4b0b      	ldr	r3, [pc, #44]	; (80130ec <tcp_fasttmr+0xc4>)
 80130c0:	781b      	ldrb	r3, [r3, #0]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d000      	beq.n	80130c8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80130c6:	e7b8      	b.n	801303a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80130c8:	683b      	ldr	r3, [r7, #0]
 80130ca:	607b      	str	r3, [r7, #4]
 80130cc:	e002      	b.n	80130d4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	68db      	ldr	r3, [r3, #12]
 80130d2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d1b3      	bne.n	8013042 <tcp_fasttmr+0x1a>
    }
  }
}
 80130da:	bf00      	nop
 80130dc:	bf00      	nop
 80130de:	3708      	adds	r7, #8
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}
 80130e4:	2000317a 	.word	0x2000317a
 80130e8:	2000dc80 	.word	0x2000dc80
 80130ec:	2000dc7c 	.word	0x2000dc7c

080130f0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80130f0:	b590      	push	{r4, r7, lr}
 80130f2:	b085      	sub	sp, #20
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d109      	bne.n	8013112 <tcp_process_refused_data+0x22>
 80130fe:	4b37      	ldr	r3, [pc, #220]	; (80131dc <tcp_process_refused_data+0xec>)
 8013100:	f240 6209 	movw	r2, #1545	; 0x609
 8013104:	4936      	ldr	r1, [pc, #216]	; (80131e0 <tcp_process_refused_data+0xf0>)
 8013106:	4837      	ldr	r0, [pc, #220]	; (80131e4 <tcp_process_refused_data+0xf4>)
 8013108:	f007 fbce 	bl	801a8a8 <iprintf>
 801310c:	f06f 030f 	mvn.w	r3, #15
 8013110:	e060      	b.n	80131d4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013116:	7b5b      	ldrb	r3, [r3, #13]
 8013118:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801311e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	2200      	movs	r2, #0
 8013124:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801312c:	2b00      	cmp	r3, #0
 801312e:	d00b      	beq.n	8013148 <tcp_process_refused_data+0x58>
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	6918      	ldr	r0, [r3, #16]
 801313a:	2300      	movs	r3, #0
 801313c:	68ba      	ldr	r2, [r7, #8]
 801313e:	6879      	ldr	r1, [r7, #4]
 8013140:	47a0      	blx	r4
 8013142:	4603      	mov	r3, r0
 8013144:	73fb      	strb	r3, [r7, #15]
 8013146:	e007      	b.n	8013158 <tcp_process_refused_data+0x68>
 8013148:	2300      	movs	r3, #0
 801314a:	68ba      	ldr	r2, [r7, #8]
 801314c:	6879      	ldr	r1, [r7, #4]
 801314e:	2000      	movs	r0, #0
 8013150:	f000 f8a4 	bl	801329c <tcp_recv_null>
 8013154:	4603      	mov	r3, r0
 8013156:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d12a      	bne.n	80131b6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8013160:	7bbb      	ldrb	r3, [r7, #14]
 8013162:	f003 0320 	and.w	r3, r3, #32
 8013166:	2b00      	cmp	r3, #0
 8013168:	d033      	beq.n	80131d2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801316e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013172:	d005      	beq.n	8013180 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013178:	3301      	adds	r3, #1
 801317a:	b29a      	uxth	r2, r3
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013186:	2b00      	cmp	r3, #0
 8013188:	d00b      	beq.n	80131a2 <tcp_process_refused_data+0xb2>
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	6918      	ldr	r0, [r3, #16]
 8013194:	2300      	movs	r3, #0
 8013196:	2200      	movs	r2, #0
 8013198:	6879      	ldr	r1, [r7, #4]
 801319a:	47a0      	blx	r4
 801319c:	4603      	mov	r3, r0
 801319e:	73fb      	strb	r3, [r7, #15]
 80131a0:	e001      	b.n	80131a6 <tcp_process_refused_data+0xb6>
 80131a2:	2300      	movs	r3, #0
 80131a4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80131a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80131aa:	f113 0f0d 	cmn.w	r3, #13
 80131ae:	d110      	bne.n	80131d2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80131b0:	f06f 030c 	mvn.w	r3, #12
 80131b4:	e00e      	b.n	80131d4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80131b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80131ba:	f113 0f0d 	cmn.w	r3, #13
 80131be:	d102      	bne.n	80131c6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80131c0:	f06f 030c 	mvn.w	r3, #12
 80131c4:	e006      	b.n	80131d4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	68ba      	ldr	r2, [r7, #8]
 80131ca:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80131cc:	f06f 0304 	mvn.w	r3, #4
 80131d0:	e000      	b.n	80131d4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80131d2:	2300      	movs	r3, #0
}
 80131d4:	4618      	mov	r0, r3
 80131d6:	3714      	adds	r7, #20
 80131d8:	46bd      	mov	sp, r7
 80131da:	bd90      	pop	{r4, r7, pc}
 80131dc:	0801c9b8 	.word	0x0801c9b8
 80131e0:	0801cec8 	.word	0x0801cec8
 80131e4:	0801c9fc 	.word	0x0801c9fc

080131e8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b084      	sub	sp, #16
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80131f0:	e007      	b.n	8013202 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80131f8:	6878      	ldr	r0, [r7, #4]
 80131fa:	f000 f80a 	bl	8013212 <tcp_seg_free>
    seg = next;
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d1f4      	bne.n	80131f2 <tcp_segs_free+0xa>
  }
}
 8013208:	bf00      	nop
 801320a:	bf00      	nop
 801320c:	3710      	adds	r7, #16
 801320e:	46bd      	mov	sp, r7
 8013210:	bd80      	pop	{r7, pc}

08013212 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8013212:	b580      	push	{r7, lr}
 8013214:	b082      	sub	sp, #8
 8013216:	af00      	add	r7, sp, #0
 8013218:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d00c      	beq.n	801323a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	685b      	ldr	r3, [r3, #4]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d004      	beq.n	8013232 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	685b      	ldr	r3, [r3, #4]
 801322c:	4618      	mov	r0, r3
 801322e:	f7fe fd7d 	bl	8011d2c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8013232:	6879      	ldr	r1, [r7, #4]
 8013234:	2003      	movs	r0, #3
 8013236:	f7fd ff67 	bl	8011108 <memp_free>
  }
}
 801323a:	bf00      	nop
 801323c:	3708      	adds	r7, #8
 801323e:	46bd      	mov	sp, r7
 8013240:	bd80      	pop	{r7, pc}
	...

08013244 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013244:	b580      	push	{r7, lr}
 8013246:	b084      	sub	sp, #16
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d106      	bne.n	8013260 <tcp_seg_copy+0x1c>
 8013252:	4b0f      	ldr	r3, [pc, #60]	; (8013290 <tcp_seg_copy+0x4c>)
 8013254:	f240 6282 	movw	r2, #1666	; 0x682
 8013258:	490e      	ldr	r1, [pc, #56]	; (8013294 <tcp_seg_copy+0x50>)
 801325a:	480f      	ldr	r0, [pc, #60]	; (8013298 <tcp_seg_copy+0x54>)
 801325c:	f007 fb24 	bl	801a8a8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013260:	2003      	movs	r0, #3
 8013262:	f7fd ff05 	bl	8011070 <memp_malloc>
 8013266:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d101      	bne.n	8013272 <tcp_seg_copy+0x2e>
    return NULL;
 801326e:	2300      	movs	r3, #0
 8013270:	e00a      	b.n	8013288 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8013272:	2210      	movs	r2, #16
 8013274:	6879      	ldr	r1, [r7, #4]
 8013276:	68f8      	ldr	r0, [r7, #12]
 8013278:	f007 fa56 	bl	801a728 <memcpy>
  pbuf_ref(cseg->p);
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	685b      	ldr	r3, [r3, #4]
 8013280:	4618      	mov	r0, r3
 8013282:	f7fe fdf3 	bl	8011e6c <pbuf_ref>
  return cseg;
 8013286:	68fb      	ldr	r3, [r7, #12]
}
 8013288:	4618      	mov	r0, r3
 801328a:	3710      	adds	r7, #16
 801328c:	46bd      	mov	sp, r7
 801328e:	bd80      	pop	{r7, pc}
 8013290:	0801c9b8 	.word	0x0801c9b8
 8013294:	0801cf0c 	.word	0x0801cf0c
 8013298:	0801c9fc 	.word	0x0801c9fc

0801329c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b084      	sub	sp, #16
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	60f8      	str	r0, [r7, #12]
 80132a4:	60b9      	str	r1, [r7, #8]
 80132a6:	607a      	str	r2, [r7, #4]
 80132a8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d109      	bne.n	80132c4 <tcp_recv_null+0x28>
 80132b0:	4b12      	ldr	r3, [pc, #72]	; (80132fc <tcp_recv_null+0x60>)
 80132b2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80132b6:	4912      	ldr	r1, [pc, #72]	; (8013300 <tcp_recv_null+0x64>)
 80132b8:	4812      	ldr	r0, [pc, #72]	; (8013304 <tcp_recv_null+0x68>)
 80132ba:	f007 faf5 	bl	801a8a8 <iprintf>
 80132be:	f06f 030f 	mvn.w	r3, #15
 80132c2:	e016      	b.n	80132f2 <tcp_recv_null+0x56>

  if (p != NULL) {
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d009      	beq.n	80132de <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	891b      	ldrh	r3, [r3, #8]
 80132ce:	4619      	mov	r1, r3
 80132d0:	68b8      	ldr	r0, [r7, #8]
 80132d2:	f7ff fb19 	bl	8012908 <tcp_recved>
    pbuf_free(p);
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f7fe fd28 	bl	8011d2c <pbuf_free>
 80132dc:	e008      	b.n	80132f0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80132de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d104      	bne.n	80132f0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80132e6:	68b8      	ldr	r0, [r7, #8]
 80132e8:	f7ff f9be 	bl	8012668 <tcp_close>
 80132ec:	4603      	mov	r3, r0
 80132ee:	e000      	b.n	80132f2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80132f0:	2300      	movs	r3, #0
}
 80132f2:	4618      	mov	r0, r3
 80132f4:	3710      	adds	r7, #16
 80132f6:	46bd      	mov	sp, r7
 80132f8:	bd80      	pop	{r7, pc}
 80132fa:	bf00      	nop
 80132fc:	0801c9b8 	.word	0x0801c9b8
 8013300:	0801cf28 	.word	0x0801cf28
 8013304:	0801c9fc 	.word	0x0801c9fc

08013308 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b086      	sub	sp, #24
 801330c:	af00      	add	r7, sp, #0
 801330e:	4603      	mov	r3, r0
 8013310:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013316:	2b00      	cmp	r3, #0
 8013318:	db01      	blt.n	801331e <tcp_kill_prio+0x16>
 801331a:	79fb      	ldrb	r3, [r7, #7]
 801331c:	e000      	b.n	8013320 <tcp_kill_prio+0x18>
 801331e:	237f      	movs	r3, #127	; 0x7f
 8013320:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013322:	7afb      	ldrb	r3, [r7, #11]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d034      	beq.n	8013392 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013328:	7afb      	ldrb	r3, [r7, #11]
 801332a:	3b01      	subs	r3, #1
 801332c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801332e:	2300      	movs	r3, #0
 8013330:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013332:	2300      	movs	r3, #0
 8013334:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013336:	4b19      	ldr	r3, [pc, #100]	; (801339c <tcp_kill_prio+0x94>)
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	617b      	str	r3, [r7, #20]
 801333c:	e01f      	b.n	801337e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	7d5b      	ldrb	r3, [r3, #21]
 8013342:	7afa      	ldrb	r2, [r7, #11]
 8013344:	429a      	cmp	r2, r3
 8013346:	d80c      	bhi.n	8013362 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013348:	697b      	ldr	r3, [r7, #20]
 801334a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801334c:	7afa      	ldrb	r2, [r7, #11]
 801334e:	429a      	cmp	r2, r3
 8013350:	d112      	bne.n	8013378 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013352:	4b13      	ldr	r3, [pc, #76]	; (80133a0 <tcp_kill_prio+0x98>)
 8013354:	681a      	ldr	r2, [r3, #0]
 8013356:	697b      	ldr	r3, [r7, #20]
 8013358:	6a1b      	ldr	r3, [r3, #32]
 801335a:	1ad3      	subs	r3, r2, r3
 801335c:	68fa      	ldr	r2, [r7, #12]
 801335e:	429a      	cmp	r2, r3
 8013360:	d80a      	bhi.n	8013378 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8013362:	4b0f      	ldr	r3, [pc, #60]	; (80133a0 <tcp_kill_prio+0x98>)
 8013364:	681a      	ldr	r2, [r3, #0]
 8013366:	697b      	ldr	r3, [r7, #20]
 8013368:	6a1b      	ldr	r3, [r3, #32]
 801336a:	1ad3      	subs	r3, r2, r3
 801336c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801336e:	697b      	ldr	r3, [r7, #20]
 8013370:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8013372:	697b      	ldr	r3, [r7, #20]
 8013374:	7d5b      	ldrb	r3, [r3, #21]
 8013376:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013378:	697b      	ldr	r3, [r7, #20]
 801337a:	68db      	ldr	r3, [r3, #12]
 801337c:	617b      	str	r3, [r7, #20]
 801337e:	697b      	ldr	r3, [r7, #20]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d1dc      	bne.n	801333e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8013384:	693b      	ldr	r3, [r7, #16]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d004      	beq.n	8013394 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801338a:	6938      	ldr	r0, [r7, #16]
 801338c:	f7ff fa56 	bl	801283c <tcp_abort>
 8013390:	e000      	b.n	8013394 <tcp_kill_prio+0x8c>
    return;
 8013392:	bf00      	nop
  }
}
 8013394:	3718      	adds	r7, #24
 8013396:	46bd      	mov	sp, r7
 8013398:	bd80      	pop	{r7, pc}
 801339a:	bf00      	nop
 801339c:	2000dc80 	.word	0x2000dc80
 80133a0:	2000dc84 	.word	0x2000dc84

080133a4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b086      	sub	sp, #24
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	4603      	mov	r3, r0
 80133ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80133ae:	79fb      	ldrb	r3, [r7, #7]
 80133b0:	2b08      	cmp	r3, #8
 80133b2:	d009      	beq.n	80133c8 <tcp_kill_state+0x24>
 80133b4:	79fb      	ldrb	r3, [r7, #7]
 80133b6:	2b09      	cmp	r3, #9
 80133b8:	d006      	beq.n	80133c8 <tcp_kill_state+0x24>
 80133ba:	4b1a      	ldr	r3, [pc, #104]	; (8013424 <tcp_kill_state+0x80>)
 80133bc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80133c0:	4919      	ldr	r1, [pc, #100]	; (8013428 <tcp_kill_state+0x84>)
 80133c2:	481a      	ldr	r0, [pc, #104]	; (801342c <tcp_kill_state+0x88>)
 80133c4:	f007 fa70 	bl	801a8a8 <iprintf>

  inactivity = 0;
 80133c8:	2300      	movs	r3, #0
 80133ca:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80133cc:	2300      	movs	r3, #0
 80133ce:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80133d0:	4b17      	ldr	r3, [pc, #92]	; (8013430 <tcp_kill_state+0x8c>)
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	617b      	str	r3, [r7, #20]
 80133d6:	e017      	b.n	8013408 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80133d8:	697b      	ldr	r3, [r7, #20]
 80133da:	7d1b      	ldrb	r3, [r3, #20]
 80133dc:	79fa      	ldrb	r2, [r7, #7]
 80133de:	429a      	cmp	r2, r3
 80133e0:	d10f      	bne.n	8013402 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80133e2:	4b14      	ldr	r3, [pc, #80]	; (8013434 <tcp_kill_state+0x90>)
 80133e4:	681a      	ldr	r2, [r3, #0]
 80133e6:	697b      	ldr	r3, [r7, #20]
 80133e8:	6a1b      	ldr	r3, [r3, #32]
 80133ea:	1ad3      	subs	r3, r2, r3
 80133ec:	68fa      	ldr	r2, [r7, #12]
 80133ee:	429a      	cmp	r2, r3
 80133f0:	d807      	bhi.n	8013402 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80133f2:	4b10      	ldr	r3, [pc, #64]	; (8013434 <tcp_kill_state+0x90>)
 80133f4:	681a      	ldr	r2, [r3, #0]
 80133f6:	697b      	ldr	r3, [r7, #20]
 80133f8:	6a1b      	ldr	r3, [r3, #32]
 80133fa:	1ad3      	subs	r3, r2, r3
 80133fc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80133fe:	697b      	ldr	r3, [r7, #20]
 8013400:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013402:	697b      	ldr	r3, [r7, #20]
 8013404:	68db      	ldr	r3, [r3, #12]
 8013406:	617b      	str	r3, [r7, #20]
 8013408:	697b      	ldr	r3, [r7, #20]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d1e4      	bne.n	80133d8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d003      	beq.n	801341c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013414:	2100      	movs	r1, #0
 8013416:	6938      	ldr	r0, [r7, #16]
 8013418:	f7ff f952 	bl	80126c0 <tcp_abandon>
  }
}
 801341c:	bf00      	nop
 801341e:	3718      	adds	r7, #24
 8013420:	46bd      	mov	sp, r7
 8013422:	bd80      	pop	{r7, pc}
 8013424:	0801c9b8 	.word	0x0801c9b8
 8013428:	0801cf44 	.word	0x0801cf44
 801342c:	0801c9fc 	.word	0x0801c9fc
 8013430:	2000dc80 	.word	0x2000dc80
 8013434:	2000dc84 	.word	0x2000dc84

08013438 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b084      	sub	sp, #16
 801343c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801343e:	2300      	movs	r3, #0
 8013440:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013442:	2300      	movs	r3, #0
 8013444:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013446:	4b12      	ldr	r3, [pc, #72]	; (8013490 <tcp_kill_timewait+0x58>)
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	60fb      	str	r3, [r7, #12]
 801344c:	e012      	b.n	8013474 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801344e:	4b11      	ldr	r3, [pc, #68]	; (8013494 <tcp_kill_timewait+0x5c>)
 8013450:	681a      	ldr	r2, [r3, #0]
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	6a1b      	ldr	r3, [r3, #32]
 8013456:	1ad3      	subs	r3, r2, r3
 8013458:	687a      	ldr	r2, [r7, #4]
 801345a:	429a      	cmp	r2, r3
 801345c:	d807      	bhi.n	801346e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801345e:	4b0d      	ldr	r3, [pc, #52]	; (8013494 <tcp_kill_timewait+0x5c>)
 8013460:	681a      	ldr	r2, [r3, #0]
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	6a1b      	ldr	r3, [r3, #32]
 8013466:	1ad3      	subs	r3, r2, r3
 8013468:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	68db      	ldr	r3, [r3, #12]
 8013472:	60fb      	str	r3, [r7, #12]
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d1e9      	bne.n	801344e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801347a:	68bb      	ldr	r3, [r7, #8]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d002      	beq.n	8013486 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013480:	68b8      	ldr	r0, [r7, #8]
 8013482:	f7ff f9db 	bl	801283c <tcp_abort>
  }
}
 8013486:	bf00      	nop
 8013488:	3710      	adds	r7, #16
 801348a:	46bd      	mov	sp, r7
 801348c:	bd80      	pop	{r7, pc}
 801348e:	bf00      	nop
 8013490:	2000dc90 	.word	0x2000dc90
 8013494:	2000dc84 	.word	0x2000dc84

08013498 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b082      	sub	sp, #8
 801349c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801349e:	4b10      	ldr	r3, [pc, #64]	; (80134e0 <tcp_handle_closepend+0x48>)
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80134a4:	e014      	b.n	80134d0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	68db      	ldr	r3, [r3, #12]
 80134aa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	8b5b      	ldrh	r3, [r3, #26]
 80134b0:	f003 0308 	and.w	r3, r3, #8
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d009      	beq.n	80134cc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	8b5b      	ldrh	r3, [r3, #26]
 80134bc:	f023 0308 	bic.w	r3, r3, #8
 80134c0:	b29a      	uxth	r2, r3
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80134c6:	6878      	ldr	r0, [r7, #4]
 80134c8:	f7ff f864 	bl	8012594 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80134cc:	683b      	ldr	r3, [r7, #0]
 80134ce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d1e7      	bne.n	80134a6 <tcp_handle_closepend+0xe>
  }
}
 80134d6:	bf00      	nop
 80134d8:	bf00      	nop
 80134da:	3708      	adds	r7, #8
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}
 80134e0:	2000dc80 	.word	0x2000dc80

080134e4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b084      	sub	sp, #16
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	4603      	mov	r3, r0
 80134ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80134ee:	2001      	movs	r0, #1
 80134f0:	f7fd fdbe 	bl	8011070 <memp_malloc>
 80134f4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d126      	bne.n	801354a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80134fc:	f7ff ffcc 	bl	8013498 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013500:	f7ff ff9a 	bl	8013438 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013504:	2001      	movs	r0, #1
 8013506:	f7fd fdb3 	bl	8011070 <memp_malloc>
 801350a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d11b      	bne.n	801354a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013512:	2009      	movs	r0, #9
 8013514:	f7ff ff46 	bl	80133a4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013518:	2001      	movs	r0, #1
 801351a:	f7fd fda9 	bl	8011070 <memp_malloc>
 801351e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d111      	bne.n	801354a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013526:	2008      	movs	r0, #8
 8013528:	f7ff ff3c 	bl	80133a4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801352c:	2001      	movs	r0, #1
 801352e:	f7fd fd9f 	bl	8011070 <memp_malloc>
 8013532:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d107      	bne.n	801354a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801353a:	79fb      	ldrb	r3, [r7, #7]
 801353c:	4618      	mov	r0, r3
 801353e:	f7ff fee3 	bl	8013308 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013542:	2001      	movs	r0, #1
 8013544:	f7fd fd94 	bl	8011070 <memp_malloc>
 8013548:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d03f      	beq.n	80135d0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013550:	229c      	movs	r2, #156	; 0x9c
 8013552:	2100      	movs	r1, #0
 8013554:	68f8      	ldr	r0, [r7, #12]
 8013556:	f007 f8f5 	bl	801a744 <memset>
    pcb->prio = prio;
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	79fa      	ldrb	r2, [r7, #7]
 801355e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013566:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013570:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	22ff      	movs	r2, #255	; 0xff
 801357e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013586:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	2206      	movs	r2, #6
 801358c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	2206      	movs	r2, #6
 8013594:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801359c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	2201      	movs	r2, #1
 80135a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80135a6:	4b0d      	ldr	r3, [pc, #52]	; (80135dc <tcp_alloc+0xf8>)
 80135a8:	681a      	ldr	r2, [r3, #0]
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80135ae:	4b0c      	ldr	r3, [pc, #48]	; (80135e0 <tcp_alloc+0xfc>)
 80135b0:	781a      	ldrb	r2, [r3, #0]
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80135bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	4a08      	ldr	r2, [pc, #32]	; (80135e4 <tcp_alloc+0x100>)
 80135c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	4a07      	ldr	r2, [pc, #28]	; (80135e8 <tcp_alloc+0x104>)
 80135cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80135d0:	68fb      	ldr	r3, [r7, #12]
}
 80135d2:	4618      	mov	r0, r3
 80135d4:	3710      	adds	r7, #16
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bd80      	pop	{r7, pc}
 80135da:	bf00      	nop
 80135dc:	2000dc84 	.word	0x2000dc84
 80135e0:	2000317a 	.word	0x2000317a
 80135e4:	0801329d 	.word	0x0801329d
 80135e8:	006ddd00 	.word	0x006ddd00

080135ec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b082      	sub	sp, #8
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d107      	bne.n	801360a <tcp_pcb_purge+0x1e>
 80135fa:	4b21      	ldr	r3, [pc, #132]	; (8013680 <tcp_pcb_purge+0x94>)
 80135fc:	f640 0251 	movw	r2, #2129	; 0x851
 8013600:	4920      	ldr	r1, [pc, #128]	; (8013684 <tcp_pcb_purge+0x98>)
 8013602:	4821      	ldr	r0, [pc, #132]	; (8013688 <tcp_pcb_purge+0x9c>)
 8013604:	f007 f950 	bl	801a8a8 <iprintf>
 8013608:	e037      	b.n	801367a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	7d1b      	ldrb	r3, [r3, #20]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d033      	beq.n	801367a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013616:	2b0a      	cmp	r3, #10
 8013618:	d02f      	beq.n	801367a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801361e:	2b01      	cmp	r3, #1
 8013620:	d02b      	beq.n	801367a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013626:	2b00      	cmp	r3, #0
 8013628:	d007      	beq.n	801363a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801362e:	4618      	mov	r0, r3
 8013630:	f7fe fb7c 	bl	8011d2c <pbuf_free>
      pcb->refused_data = NULL;
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	2200      	movs	r2, #0
 8013638:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801363e:	2b00      	cmp	r3, #0
 8013640:	d002      	beq.n	8013648 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013642:	6878      	ldr	r0, [r7, #4]
 8013644:	f000 f986 	bl	8013954 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801364e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013654:	4618      	mov	r0, r3
 8013656:	f7ff fdc7 	bl	80131e8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801365e:	4618      	mov	r0, r3
 8013660:	f7ff fdc2 	bl	80131e8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	2200      	movs	r2, #0
 8013668:	66da      	str	r2, [r3, #108]	; 0x6c
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	2200      	movs	r2, #0
 8013676:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801367a:	3708      	adds	r7, #8
 801367c:	46bd      	mov	sp, r7
 801367e:	bd80      	pop	{r7, pc}
 8013680:	0801c9b8 	.word	0x0801c9b8
 8013684:	0801d004 	.word	0x0801d004
 8013688:	0801c9fc 	.word	0x0801c9fc

0801368c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b084      	sub	sp, #16
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
 8013694:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d106      	bne.n	80136aa <tcp_pcb_remove+0x1e>
 801369c:	4b3e      	ldr	r3, [pc, #248]	; (8013798 <tcp_pcb_remove+0x10c>)
 801369e:	f640 0283 	movw	r2, #2179	; 0x883
 80136a2:	493e      	ldr	r1, [pc, #248]	; (801379c <tcp_pcb_remove+0x110>)
 80136a4:	483e      	ldr	r0, [pc, #248]	; (80137a0 <tcp_pcb_remove+0x114>)
 80136a6:	f007 f8ff 	bl	801a8a8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d106      	bne.n	80136be <tcp_pcb_remove+0x32>
 80136b0:	4b39      	ldr	r3, [pc, #228]	; (8013798 <tcp_pcb_remove+0x10c>)
 80136b2:	f640 0284 	movw	r2, #2180	; 0x884
 80136b6:	493b      	ldr	r1, [pc, #236]	; (80137a4 <tcp_pcb_remove+0x118>)
 80136b8:	4839      	ldr	r0, [pc, #228]	; (80137a0 <tcp_pcb_remove+0x114>)
 80136ba:	f007 f8f5 	bl	801a8a8 <iprintf>

  TCP_RMV(pcblist, pcb);
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	683a      	ldr	r2, [r7, #0]
 80136c4:	429a      	cmp	r2, r3
 80136c6:	d105      	bne.n	80136d4 <tcp_pcb_remove+0x48>
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	68da      	ldr	r2, [r3, #12]
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	601a      	str	r2, [r3, #0]
 80136d2:	e013      	b.n	80136fc <tcp_pcb_remove+0x70>
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	60fb      	str	r3, [r7, #12]
 80136da:	e00c      	b.n	80136f6 <tcp_pcb_remove+0x6a>
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	68db      	ldr	r3, [r3, #12]
 80136e0:	683a      	ldr	r2, [r7, #0]
 80136e2:	429a      	cmp	r2, r3
 80136e4:	d104      	bne.n	80136f0 <tcp_pcb_remove+0x64>
 80136e6:	683b      	ldr	r3, [r7, #0]
 80136e8:	68da      	ldr	r2, [r3, #12]
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	60da      	str	r2, [r3, #12]
 80136ee:	e005      	b.n	80136fc <tcp_pcb_remove+0x70>
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	68db      	ldr	r3, [r3, #12]
 80136f4:	60fb      	str	r3, [r7, #12]
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d1ef      	bne.n	80136dc <tcp_pcb_remove+0x50>
 80136fc:	683b      	ldr	r3, [r7, #0]
 80136fe:	2200      	movs	r2, #0
 8013700:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013702:	6838      	ldr	r0, [r7, #0]
 8013704:	f7ff ff72 	bl	80135ec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	7d1b      	ldrb	r3, [r3, #20]
 801370c:	2b0a      	cmp	r3, #10
 801370e:	d013      	beq.n	8013738 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013710:	683b      	ldr	r3, [r7, #0]
 8013712:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013714:	2b01      	cmp	r3, #1
 8013716:	d00f      	beq.n	8013738 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	8b5b      	ldrh	r3, [r3, #26]
 801371c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013720:	2b00      	cmp	r3, #0
 8013722:	d009      	beq.n	8013738 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013724:	683b      	ldr	r3, [r7, #0]
 8013726:	8b5b      	ldrh	r3, [r3, #26]
 8013728:	f043 0302 	orr.w	r3, r3, #2
 801372c:	b29a      	uxth	r2, r3
 801372e:	683b      	ldr	r3, [r7, #0]
 8013730:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013732:	6838      	ldr	r0, [r7, #0]
 8013734:	f002 ff6a 	bl	801660c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013738:	683b      	ldr	r3, [r7, #0]
 801373a:	7d1b      	ldrb	r3, [r3, #20]
 801373c:	2b01      	cmp	r3, #1
 801373e:	d020      	beq.n	8013782 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013740:	683b      	ldr	r3, [r7, #0]
 8013742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013744:	2b00      	cmp	r3, #0
 8013746:	d006      	beq.n	8013756 <tcp_pcb_remove+0xca>
 8013748:	4b13      	ldr	r3, [pc, #76]	; (8013798 <tcp_pcb_remove+0x10c>)
 801374a:	f640 0293 	movw	r2, #2195	; 0x893
 801374e:	4916      	ldr	r1, [pc, #88]	; (80137a8 <tcp_pcb_remove+0x11c>)
 8013750:	4813      	ldr	r0, [pc, #76]	; (80137a0 <tcp_pcb_remove+0x114>)
 8013752:	f007 f8a9 	bl	801a8a8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013756:	683b      	ldr	r3, [r7, #0]
 8013758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801375a:	2b00      	cmp	r3, #0
 801375c:	d006      	beq.n	801376c <tcp_pcb_remove+0xe0>
 801375e:	4b0e      	ldr	r3, [pc, #56]	; (8013798 <tcp_pcb_remove+0x10c>)
 8013760:	f640 0294 	movw	r2, #2196	; 0x894
 8013764:	4911      	ldr	r1, [pc, #68]	; (80137ac <tcp_pcb_remove+0x120>)
 8013766:	480e      	ldr	r0, [pc, #56]	; (80137a0 <tcp_pcb_remove+0x114>)
 8013768:	f007 f89e 	bl	801a8a8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013770:	2b00      	cmp	r3, #0
 8013772:	d006      	beq.n	8013782 <tcp_pcb_remove+0xf6>
 8013774:	4b08      	ldr	r3, [pc, #32]	; (8013798 <tcp_pcb_remove+0x10c>)
 8013776:	f640 0296 	movw	r2, #2198	; 0x896
 801377a:	490d      	ldr	r1, [pc, #52]	; (80137b0 <tcp_pcb_remove+0x124>)
 801377c:	4808      	ldr	r0, [pc, #32]	; (80137a0 <tcp_pcb_remove+0x114>)
 801377e:	f007 f893 	bl	801a8a8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	2200      	movs	r2, #0
 8013786:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	2200      	movs	r2, #0
 801378c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801378e:	bf00      	nop
 8013790:	3710      	adds	r7, #16
 8013792:	46bd      	mov	sp, r7
 8013794:	bd80      	pop	{r7, pc}
 8013796:	bf00      	nop
 8013798:	0801c9b8 	.word	0x0801c9b8
 801379c:	0801d020 	.word	0x0801d020
 80137a0:	0801c9fc 	.word	0x0801c9fc
 80137a4:	0801d03c 	.word	0x0801d03c
 80137a8:	0801d05c 	.word	0x0801d05c
 80137ac:	0801d074 	.word	0x0801d074
 80137b0:	0801d090 	.word	0x0801d090

080137b4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b082      	sub	sp, #8
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d106      	bne.n	80137d0 <tcp_next_iss+0x1c>
 80137c2:	4b0a      	ldr	r3, [pc, #40]	; (80137ec <tcp_next_iss+0x38>)
 80137c4:	f640 02af 	movw	r2, #2223	; 0x8af
 80137c8:	4909      	ldr	r1, [pc, #36]	; (80137f0 <tcp_next_iss+0x3c>)
 80137ca:	480a      	ldr	r0, [pc, #40]	; (80137f4 <tcp_next_iss+0x40>)
 80137cc:	f007 f86c 	bl	801a8a8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80137d0:	4b09      	ldr	r3, [pc, #36]	; (80137f8 <tcp_next_iss+0x44>)
 80137d2:	681a      	ldr	r2, [r3, #0]
 80137d4:	4b09      	ldr	r3, [pc, #36]	; (80137fc <tcp_next_iss+0x48>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	4413      	add	r3, r2
 80137da:	4a07      	ldr	r2, [pc, #28]	; (80137f8 <tcp_next_iss+0x44>)
 80137dc:	6013      	str	r3, [r2, #0]
  return iss;
 80137de:	4b06      	ldr	r3, [pc, #24]	; (80137f8 <tcp_next_iss+0x44>)
 80137e0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80137e2:	4618      	mov	r0, r3
 80137e4:	3708      	adds	r7, #8
 80137e6:	46bd      	mov	sp, r7
 80137e8:	bd80      	pop	{r7, pc}
 80137ea:	bf00      	nop
 80137ec:	0801c9b8 	.word	0x0801c9b8
 80137f0:	0801d0a8 	.word	0x0801d0a8
 80137f4:	0801c9fc 	.word	0x0801c9fc
 80137f8:	20000048 	.word	0x20000048
 80137fc:	2000dc84 	.word	0x2000dc84

08013800 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013800:	b580      	push	{r7, lr}
 8013802:	b086      	sub	sp, #24
 8013804:	af00      	add	r7, sp, #0
 8013806:	4603      	mov	r3, r0
 8013808:	60b9      	str	r1, [r7, #8]
 801380a:	607a      	str	r2, [r7, #4]
 801380c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d106      	bne.n	8013822 <tcp_eff_send_mss_netif+0x22>
 8013814:	4b14      	ldr	r3, [pc, #80]	; (8013868 <tcp_eff_send_mss_netif+0x68>)
 8013816:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801381a:	4914      	ldr	r1, [pc, #80]	; (801386c <tcp_eff_send_mss_netif+0x6c>)
 801381c:	4814      	ldr	r0, [pc, #80]	; (8013870 <tcp_eff_send_mss_netif+0x70>)
 801381e:	f007 f843 	bl	801a8a8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013822:	68bb      	ldr	r3, [r7, #8]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d101      	bne.n	801382c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013828:	89fb      	ldrh	r3, [r7, #14]
 801382a:	e019      	b.n	8013860 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801382c:	68bb      	ldr	r3, [r7, #8]
 801382e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013830:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8013832:	8afb      	ldrh	r3, [r7, #22]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d012      	beq.n	801385e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013838:	2328      	movs	r3, #40	; 0x28
 801383a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801383c:	8afa      	ldrh	r2, [r7, #22]
 801383e:	8abb      	ldrh	r3, [r7, #20]
 8013840:	429a      	cmp	r2, r3
 8013842:	d904      	bls.n	801384e <tcp_eff_send_mss_netif+0x4e>
 8013844:	8afa      	ldrh	r2, [r7, #22]
 8013846:	8abb      	ldrh	r3, [r7, #20]
 8013848:	1ad3      	subs	r3, r2, r3
 801384a:	b29b      	uxth	r3, r3
 801384c:	e000      	b.n	8013850 <tcp_eff_send_mss_netif+0x50>
 801384e:	2300      	movs	r3, #0
 8013850:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8013852:	8a7a      	ldrh	r2, [r7, #18]
 8013854:	89fb      	ldrh	r3, [r7, #14]
 8013856:	4293      	cmp	r3, r2
 8013858:	bf28      	it	cs
 801385a:	4613      	movcs	r3, r2
 801385c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801385e:	89fb      	ldrh	r3, [r7, #14]
}
 8013860:	4618      	mov	r0, r3
 8013862:	3718      	adds	r7, #24
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}
 8013868:	0801c9b8 	.word	0x0801c9b8
 801386c:	0801d0c4 	.word	0x0801d0c4
 8013870:	0801c9fc 	.word	0x0801c9fc

08013874 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013874:	b580      	push	{r7, lr}
 8013876:	b084      	sub	sp, #16
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]
 801387c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801387e:	683b      	ldr	r3, [r7, #0]
 8013880:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d119      	bne.n	80138bc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013888:	4b10      	ldr	r3, [pc, #64]	; (80138cc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801388a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801388e:	4910      	ldr	r1, [pc, #64]	; (80138d0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8013890:	4810      	ldr	r0, [pc, #64]	; (80138d4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8013892:	f007 f809 	bl	801a8a8 <iprintf>

  while (pcb != NULL) {
 8013896:	e011      	b.n	80138bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	681a      	ldr	r2, [r3, #0]
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	429a      	cmp	r2, r3
 80138a2:	d108      	bne.n	80138b6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	68db      	ldr	r3, [r3, #12]
 80138a8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80138aa:	68f8      	ldr	r0, [r7, #12]
 80138ac:	f7fe ffc6 	bl	801283c <tcp_abort>
      pcb = next;
 80138b0:	68bb      	ldr	r3, [r7, #8]
 80138b2:	60fb      	str	r3, [r7, #12]
 80138b4:	e002      	b.n	80138bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	68db      	ldr	r3, [r3, #12]
 80138ba:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d1ea      	bne.n	8013898 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80138c2:	bf00      	nop
 80138c4:	bf00      	nop
 80138c6:	3710      	adds	r7, #16
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}
 80138cc:	0801c9b8 	.word	0x0801c9b8
 80138d0:	0801d0ec 	.word	0x0801d0ec
 80138d4:	0801c9fc 	.word	0x0801c9fc

080138d8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b084      	sub	sp, #16
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
 80138e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d02a      	beq.n	801393e <tcp_netif_ip_addr_changed+0x66>
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d026      	beq.n	801393e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80138f0:	4b15      	ldr	r3, [pc, #84]	; (8013948 <tcp_netif_ip_addr_changed+0x70>)
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	4619      	mov	r1, r3
 80138f6:	6878      	ldr	r0, [r7, #4]
 80138f8:	f7ff ffbc 	bl	8013874 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80138fc:	4b13      	ldr	r3, [pc, #76]	; (801394c <tcp_netif_ip_addr_changed+0x74>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	4619      	mov	r1, r3
 8013902:	6878      	ldr	r0, [r7, #4]
 8013904:	f7ff ffb6 	bl	8013874 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013908:	683b      	ldr	r3, [r7, #0]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d017      	beq.n	801393e <tcp_netif_ip_addr_changed+0x66>
 801390e:	683b      	ldr	r3, [r7, #0]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d013      	beq.n	801393e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013916:	4b0e      	ldr	r3, [pc, #56]	; (8013950 <tcp_netif_ip_addr_changed+0x78>)
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	60fb      	str	r3, [r7, #12]
 801391c:	e00c      	b.n	8013938 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	681a      	ldr	r2, [r3, #0]
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	429a      	cmp	r2, r3
 8013928:	d103      	bne.n	8013932 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801392a:	683b      	ldr	r3, [r7, #0]
 801392c:	681a      	ldr	r2, [r3, #0]
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	68db      	ldr	r3, [r3, #12]
 8013936:	60fb      	str	r3, [r7, #12]
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d1ef      	bne.n	801391e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801393e:	bf00      	nop
 8013940:	3710      	adds	r7, #16
 8013942:	46bd      	mov	sp, r7
 8013944:	bd80      	pop	{r7, pc}
 8013946:	bf00      	nop
 8013948:	2000dc80 	.word	0x2000dc80
 801394c:	2000dc8c 	.word	0x2000dc8c
 8013950:	2000dc88 	.word	0x2000dc88

08013954 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b082      	sub	sp, #8
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013960:	2b00      	cmp	r3, #0
 8013962:	d007      	beq.n	8013974 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013968:	4618      	mov	r0, r3
 801396a:	f7ff fc3d 	bl	80131e8 <tcp_segs_free>
    pcb->ooseq = NULL;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	2200      	movs	r2, #0
 8013972:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8013974:	bf00      	nop
 8013976:	3708      	adds	r7, #8
 8013978:	46bd      	mov	sp, r7
 801397a:	bd80      	pop	{r7, pc}

0801397c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801397c:	b590      	push	{r4, r7, lr}
 801397e:	b08d      	sub	sp, #52	; 0x34
 8013980:	af04      	add	r7, sp, #16
 8013982:	6078      	str	r0, [r7, #4]
 8013984:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d105      	bne.n	8013998 <tcp_input+0x1c>
 801398c:	4b9b      	ldr	r3, [pc, #620]	; (8013bfc <tcp_input+0x280>)
 801398e:	2283      	movs	r2, #131	; 0x83
 8013990:	499b      	ldr	r1, [pc, #620]	; (8013c00 <tcp_input+0x284>)
 8013992:	489c      	ldr	r0, [pc, #624]	; (8013c04 <tcp_input+0x288>)
 8013994:	f006 ff88 	bl	801a8a8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	685b      	ldr	r3, [r3, #4]
 801399c:	4a9a      	ldr	r2, [pc, #616]	; (8013c08 <tcp_input+0x28c>)
 801399e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	895b      	ldrh	r3, [r3, #10]
 80139a4:	2b13      	cmp	r3, #19
 80139a6:	f240 83c4 	bls.w	8014132 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80139aa:	4b98      	ldr	r3, [pc, #608]	; (8013c0c <tcp_input+0x290>)
 80139ac:	695b      	ldr	r3, [r3, #20]
 80139ae:	4a97      	ldr	r2, [pc, #604]	; (8013c0c <tcp_input+0x290>)
 80139b0:	6812      	ldr	r2, [r2, #0]
 80139b2:	4611      	mov	r1, r2
 80139b4:	4618      	mov	r0, r3
 80139b6:	f005 fc13 	bl	80191e0 <ip4_addr_isbroadcast_u32>
 80139ba:	4603      	mov	r3, r0
 80139bc:	2b00      	cmp	r3, #0
 80139be:	f040 83ba 	bne.w	8014136 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80139c2:	4b92      	ldr	r3, [pc, #584]	; (8013c0c <tcp_input+0x290>)
 80139c4:	695b      	ldr	r3, [r3, #20]
 80139c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80139ca:	2be0      	cmp	r3, #224	; 0xe0
 80139cc:	f000 83b3 	beq.w	8014136 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80139d0:	4b8d      	ldr	r3, [pc, #564]	; (8013c08 <tcp_input+0x28c>)
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	899b      	ldrh	r3, [r3, #12]
 80139d6:	b29b      	uxth	r3, r3
 80139d8:	4618      	mov	r0, r3
 80139da:	f7fc fef4 	bl	80107c6 <lwip_htons>
 80139de:	4603      	mov	r3, r0
 80139e0:	0b1b      	lsrs	r3, r3, #12
 80139e2:	b29b      	uxth	r3, r3
 80139e4:	b2db      	uxtb	r3, r3
 80139e6:	009b      	lsls	r3, r3, #2
 80139e8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80139ea:	7cbb      	ldrb	r3, [r7, #18]
 80139ec:	2b13      	cmp	r3, #19
 80139ee:	f240 83a4 	bls.w	801413a <tcp_input+0x7be>
 80139f2:	7cbb      	ldrb	r3, [r7, #18]
 80139f4:	b29a      	uxth	r2, r3
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	891b      	ldrh	r3, [r3, #8]
 80139fa:	429a      	cmp	r2, r3
 80139fc:	f200 839d 	bhi.w	801413a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013a00:	7cbb      	ldrb	r3, [r7, #18]
 8013a02:	b29b      	uxth	r3, r3
 8013a04:	3b14      	subs	r3, #20
 8013a06:	b29a      	uxth	r2, r3
 8013a08:	4b81      	ldr	r3, [pc, #516]	; (8013c10 <tcp_input+0x294>)
 8013a0a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8013a0c:	4b81      	ldr	r3, [pc, #516]	; (8013c14 <tcp_input+0x298>)
 8013a0e:	2200      	movs	r2, #0
 8013a10:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	895a      	ldrh	r2, [r3, #10]
 8013a16:	7cbb      	ldrb	r3, [r7, #18]
 8013a18:	b29b      	uxth	r3, r3
 8013a1a:	429a      	cmp	r2, r3
 8013a1c:	d309      	bcc.n	8013a32 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8013a1e:	4b7c      	ldr	r3, [pc, #496]	; (8013c10 <tcp_input+0x294>)
 8013a20:	881a      	ldrh	r2, [r3, #0]
 8013a22:	4b7d      	ldr	r3, [pc, #500]	; (8013c18 <tcp_input+0x29c>)
 8013a24:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013a26:	7cbb      	ldrb	r3, [r7, #18]
 8013a28:	4619      	mov	r1, r3
 8013a2a:	6878      	ldr	r0, [r7, #4]
 8013a2c:	f7fe f8f8 	bl	8011c20 <pbuf_remove_header>
 8013a30:	e04e      	b.n	8013ad0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d105      	bne.n	8013a46 <tcp_input+0xca>
 8013a3a:	4b70      	ldr	r3, [pc, #448]	; (8013bfc <tcp_input+0x280>)
 8013a3c:	22c2      	movs	r2, #194	; 0xc2
 8013a3e:	4977      	ldr	r1, [pc, #476]	; (8013c1c <tcp_input+0x2a0>)
 8013a40:	4870      	ldr	r0, [pc, #448]	; (8013c04 <tcp_input+0x288>)
 8013a42:	f006 ff31 	bl	801a8a8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8013a46:	2114      	movs	r1, #20
 8013a48:	6878      	ldr	r0, [r7, #4]
 8013a4a:	f7fe f8e9 	bl	8011c20 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	895a      	ldrh	r2, [r3, #10]
 8013a52:	4b71      	ldr	r3, [pc, #452]	; (8013c18 <tcp_input+0x29c>)
 8013a54:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8013a56:	4b6e      	ldr	r3, [pc, #440]	; (8013c10 <tcp_input+0x294>)
 8013a58:	881a      	ldrh	r2, [r3, #0]
 8013a5a:	4b6f      	ldr	r3, [pc, #444]	; (8013c18 <tcp_input+0x29c>)
 8013a5c:	881b      	ldrh	r3, [r3, #0]
 8013a5e:	1ad3      	subs	r3, r2, r3
 8013a60:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8013a62:	4b6d      	ldr	r3, [pc, #436]	; (8013c18 <tcp_input+0x29c>)
 8013a64:	881b      	ldrh	r3, [r3, #0]
 8013a66:	4619      	mov	r1, r3
 8013a68:	6878      	ldr	r0, [r7, #4]
 8013a6a:	f7fe f8d9 	bl	8011c20 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	895b      	ldrh	r3, [r3, #10]
 8013a74:	8a3a      	ldrh	r2, [r7, #16]
 8013a76:	429a      	cmp	r2, r3
 8013a78:	f200 8361 	bhi.w	801413e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	685b      	ldr	r3, [r3, #4]
 8013a82:	4a64      	ldr	r2, [pc, #400]	; (8013c14 <tcp_input+0x298>)
 8013a84:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	8a3a      	ldrh	r2, [r7, #16]
 8013a8c:	4611      	mov	r1, r2
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f7fe f8c6 	bl	8011c20 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	891a      	ldrh	r2, [r3, #8]
 8013a98:	8a3b      	ldrh	r3, [r7, #16]
 8013a9a:	1ad3      	subs	r3, r2, r3
 8013a9c:	b29a      	uxth	r2, r3
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	895b      	ldrh	r3, [r3, #10]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d005      	beq.n	8013ab6 <tcp_input+0x13a>
 8013aaa:	4b54      	ldr	r3, [pc, #336]	; (8013bfc <tcp_input+0x280>)
 8013aac:	22df      	movs	r2, #223	; 0xdf
 8013aae:	495c      	ldr	r1, [pc, #368]	; (8013c20 <tcp_input+0x2a4>)
 8013ab0:	4854      	ldr	r0, [pc, #336]	; (8013c04 <tcp_input+0x288>)
 8013ab2:	f006 fef9 	bl	801a8a8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	891a      	ldrh	r2, [r3, #8]
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	891b      	ldrh	r3, [r3, #8]
 8013ac0:	429a      	cmp	r2, r3
 8013ac2:	d005      	beq.n	8013ad0 <tcp_input+0x154>
 8013ac4:	4b4d      	ldr	r3, [pc, #308]	; (8013bfc <tcp_input+0x280>)
 8013ac6:	22e0      	movs	r2, #224	; 0xe0
 8013ac8:	4956      	ldr	r1, [pc, #344]	; (8013c24 <tcp_input+0x2a8>)
 8013aca:	484e      	ldr	r0, [pc, #312]	; (8013c04 <tcp_input+0x288>)
 8013acc:	f006 feec 	bl	801a8a8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013ad0:	4b4d      	ldr	r3, [pc, #308]	; (8013c08 <tcp_input+0x28c>)
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	881b      	ldrh	r3, [r3, #0]
 8013ad6:	b29b      	uxth	r3, r3
 8013ad8:	4a4b      	ldr	r2, [pc, #300]	; (8013c08 <tcp_input+0x28c>)
 8013ada:	6814      	ldr	r4, [r2, #0]
 8013adc:	4618      	mov	r0, r3
 8013ade:	f7fc fe72 	bl	80107c6 <lwip_htons>
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8013ae6:	4b48      	ldr	r3, [pc, #288]	; (8013c08 <tcp_input+0x28c>)
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	885b      	ldrh	r3, [r3, #2]
 8013aec:	b29b      	uxth	r3, r3
 8013aee:	4a46      	ldr	r2, [pc, #280]	; (8013c08 <tcp_input+0x28c>)
 8013af0:	6814      	ldr	r4, [r2, #0]
 8013af2:	4618      	mov	r0, r3
 8013af4:	f7fc fe67 	bl	80107c6 <lwip_htons>
 8013af8:	4603      	mov	r3, r0
 8013afa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8013afc:	4b42      	ldr	r3, [pc, #264]	; (8013c08 <tcp_input+0x28c>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	685b      	ldr	r3, [r3, #4]
 8013b02:	4a41      	ldr	r2, [pc, #260]	; (8013c08 <tcp_input+0x28c>)
 8013b04:	6814      	ldr	r4, [r2, #0]
 8013b06:	4618      	mov	r0, r3
 8013b08:	f7fc fe72 	bl	80107f0 <lwip_htonl>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	6063      	str	r3, [r4, #4]
 8013b10:	6863      	ldr	r3, [r4, #4]
 8013b12:	4a45      	ldr	r2, [pc, #276]	; (8013c28 <tcp_input+0x2ac>)
 8013b14:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8013b16:	4b3c      	ldr	r3, [pc, #240]	; (8013c08 <tcp_input+0x28c>)
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	689b      	ldr	r3, [r3, #8]
 8013b1c:	4a3a      	ldr	r2, [pc, #232]	; (8013c08 <tcp_input+0x28c>)
 8013b1e:	6814      	ldr	r4, [r2, #0]
 8013b20:	4618      	mov	r0, r3
 8013b22:	f7fc fe65 	bl	80107f0 <lwip_htonl>
 8013b26:	4603      	mov	r3, r0
 8013b28:	60a3      	str	r3, [r4, #8]
 8013b2a:	68a3      	ldr	r3, [r4, #8]
 8013b2c:	4a3f      	ldr	r2, [pc, #252]	; (8013c2c <tcp_input+0x2b0>)
 8013b2e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8013b30:	4b35      	ldr	r3, [pc, #212]	; (8013c08 <tcp_input+0x28c>)
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	89db      	ldrh	r3, [r3, #14]
 8013b36:	b29b      	uxth	r3, r3
 8013b38:	4a33      	ldr	r2, [pc, #204]	; (8013c08 <tcp_input+0x28c>)
 8013b3a:	6814      	ldr	r4, [r2, #0]
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f7fc fe42 	bl	80107c6 <lwip_htons>
 8013b42:	4603      	mov	r3, r0
 8013b44:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8013b46:	4b30      	ldr	r3, [pc, #192]	; (8013c08 <tcp_input+0x28c>)
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	899b      	ldrh	r3, [r3, #12]
 8013b4c:	b29b      	uxth	r3, r3
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f7fc fe39 	bl	80107c6 <lwip_htons>
 8013b54:	4603      	mov	r3, r0
 8013b56:	b2db      	uxtb	r3, r3
 8013b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013b5c:	b2da      	uxtb	r2, r3
 8013b5e:	4b34      	ldr	r3, [pc, #208]	; (8013c30 <tcp_input+0x2b4>)
 8013b60:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	891a      	ldrh	r2, [r3, #8]
 8013b66:	4b33      	ldr	r3, [pc, #204]	; (8013c34 <tcp_input+0x2b8>)
 8013b68:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8013b6a:	4b31      	ldr	r3, [pc, #196]	; (8013c30 <tcp_input+0x2b4>)
 8013b6c:	781b      	ldrb	r3, [r3, #0]
 8013b6e:	f003 0303 	and.w	r3, r3, #3
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d00c      	beq.n	8013b90 <tcp_input+0x214>
    tcplen++;
 8013b76:	4b2f      	ldr	r3, [pc, #188]	; (8013c34 <tcp_input+0x2b8>)
 8013b78:	881b      	ldrh	r3, [r3, #0]
 8013b7a:	3301      	adds	r3, #1
 8013b7c:	b29a      	uxth	r2, r3
 8013b7e:	4b2d      	ldr	r3, [pc, #180]	; (8013c34 <tcp_input+0x2b8>)
 8013b80:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	891a      	ldrh	r2, [r3, #8]
 8013b86:	4b2b      	ldr	r3, [pc, #172]	; (8013c34 <tcp_input+0x2b8>)
 8013b88:	881b      	ldrh	r3, [r3, #0]
 8013b8a:	429a      	cmp	r2, r3
 8013b8c:	f200 82d9 	bhi.w	8014142 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013b90:	2300      	movs	r3, #0
 8013b92:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b94:	4b28      	ldr	r3, [pc, #160]	; (8013c38 <tcp_input+0x2bc>)
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	61fb      	str	r3, [r7, #28]
 8013b9a:	e09d      	b.n	8013cd8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8013b9c:	69fb      	ldr	r3, [r7, #28]
 8013b9e:	7d1b      	ldrb	r3, [r3, #20]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d105      	bne.n	8013bb0 <tcp_input+0x234>
 8013ba4:	4b15      	ldr	r3, [pc, #84]	; (8013bfc <tcp_input+0x280>)
 8013ba6:	22fb      	movs	r2, #251	; 0xfb
 8013ba8:	4924      	ldr	r1, [pc, #144]	; (8013c3c <tcp_input+0x2c0>)
 8013baa:	4816      	ldr	r0, [pc, #88]	; (8013c04 <tcp_input+0x288>)
 8013bac:	f006 fe7c 	bl	801a8a8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8013bb0:	69fb      	ldr	r3, [r7, #28]
 8013bb2:	7d1b      	ldrb	r3, [r3, #20]
 8013bb4:	2b0a      	cmp	r3, #10
 8013bb6:	d105      	bne.n	8013bc4 <tcp_input+0x248>
 8013bb8:	4b10      	ldr	r3, [pc, #64]	; (8013bfc <tcp_input+0x280>)
 8013bba:	22fc      	movs	r2, #252	; 0xfc
 8013bbc:	4920      	ldr	r1, [pc, #128]	; (8013c40 <tcp_input+0x2c4>)
 8013bbe:	4811      	ldr	r0, [pc, #68]	; (8013c04 <tcp_input+0x288>)
 8013bc0:	f006 fe72 	bl	801a8a8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013bc4:	69fb      	ldr	r3, [r7, #28]
 8013bc6:	7d1b      	ldrb	r3, [r3, #20]
 8013bc8:	2b01      	cmp	r3, #1
 8013bca:	d105      	bne.n	8013bd8 <tcp_input+0x25c>
 8013bcc:	4b0b      	ldr	r3, [pc, #44]	; (8013bfc <tcp_input+0x280>)
 8013bce:	22fd      	movs	r2, #253	; 0xfd
 8013bd0:	491c      	ldr	r1, [pc, #112]	; (8013c44 <tcp_input+0x2c8>)
 8013bd2:	480c      	ldr	r0, [pc, #48]	; (8013c04 <tcp_input+0x288>)
 8013bd4:	f006 fe68 	bl	801a8a8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013bd8:	69fb      	ldr	r3, [r7, #28]
 8013bda:	7a1b      	ldrb	r3, [r3, #8]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d033      	beq.n	8013c48 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013be0:	69fb      	ldr	r3, [r7, #28]
 8013be2:	7a1a      	ldrb	r2, [r3, #8]
 8013be4:	4b09      	ldr	r3, [pc, #36]	; (8013c0c <tcp_input+0x290>)
 8013be6:	685b      	ldr	r3, [r3, #4]
 8013be8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013bec:	3301      	adds	r3, #1
 8013bee:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013bf0:	429a      	cmp	r2, r3
 8013bf2:	d029      	beq.n	8013c48 <tcp_input+0x2cc>
      prev = pcb;
 8013bf4:	69fb      	ldr	r3, [r7, #28]
 8013bf6:	61bb      	str	r3, [r7, #24]
      continue;
 8013bf8:	e06b      	b.n	8013cd2 <tcp_input+0x356>
 8013bfa:	bf00      	nop
 8013bfc:	0801d120 	.word	0x0801d120
 8013c00:	0801d154 	.word	0x0801d154
 8013c04:	0801d16c 	.word	0x0801d16c
 8013c08:	2000318c 	.word	0x2000318c
 8013c0c:	2000a73c 	.word	0x2000a73c
 8013c10:	20003190 	.word	0x20003190
 8013c14:	20003194 	.word	0x20003194
 8013c18:	20003192 	.word	0x20003192
 8013c1c:	0801d194 	.word	0x0801d194
 8013c20:	0801d1a4 	.word	0x0801d1a4
 8013c24:	0801d1b0 	.word	0x0801d1b0
 8013c28:	2000319c 	.word	0x2000319c
 8013c2c:	200031a0 	.word	0x200031a0
 8013c30:	200031a8 	.word	0x200031a8
 8013c34:	200031a6 	.word	0x200031a6
 8013c38:	2000dc80 	.word	0x2000dc80
 8013c3c:	0801d1d0 	.word	0x0801d1d0
 8013c40:	0801d1f8 	.word	0x0801d1f8
 8013c44:	0801d224 	.word	0x0801d224
    }

    if (pcb->remote_port == tcphdr->src &&
 8013c48:	69fb      	ldr	r3, [r7, #28]
 8013c4a:	8b1a      	ldrh	r2, [r3, #24]
 8013c4c:	4b94      	ldr	r3, [pc, #592]	; (8013ea0 <tcp_input+0x524>)
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	881b      	ldrh	r3, [r3, #0]
 8013c52:	b29b      	uxth	r3, r3
 8013c54:	429a      	cmp	r2, r3
 8013c56:	d13a      	bne.n	8013cce <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013c58:	69fb      	ldr	r3, [r7, #28]
 8013c5a:	8ada      	ldrh	r2, [r3, #22]
 8013c5c:	4b90      	ldr	r3, [pc, #576]	; (8013ea0 <tcp_input+0x524>)
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	885b      	ldrh	r3, [r3, #2]
 8013c62:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8013c64:	429a      	cmp	r2, r3
 8013c66:	d132      	bne.n	8013cce <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013c68:	69fb      	ldr	r3, [r7, #28]
 8013c6a:	685a      	ldr	r2, [r3, #4]
 8013c6c:	4b8d      	ldr	r3, [pc, #564]	; (8013ea4 <tcp_input+0x528>)
 8013c6e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8013c70:	429a      	cmp	r2, r3
 8013c72:	d12c      	bne.n	8013cce <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013c74:	69fb      	ldr	r3, [r7, #28]
 8013c76:	681a      	ldr	r2, [r3, #0]
 8013c78:	4b8a      	ldr	r3, [pc, #552]	; (8013ea4 <tcp_input+0x528>)
 8013c7a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013c7c:	429a      	cmp	r2, r3
 8013c7e:	d126      	bne.n	8013cce <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8013c80:	69fb      	ldr	r3, [r7, #28]
 8013c82:	68db      	ldr	r3, [r3, #12]
 8013c84:	69fa      	ldr	r2, [r7, #28]
 8013c86:	429a      	cmp	r2, r3
 8013c88:	d106      	bne.n	8013c98 <tcp_input+0x31c>
 8013c8a:	4b87      	ldr	r3, [pc, #540]	; (8013ea8 <tcp_input+0x52c>)
 8013c8c:	f240 120d 	movw	r2, #269	; 0x10d
 8013c90:	4986      	ldr	r1, [pc, #536]	; (8013eac <tcp_input+0x530>)
 8013c92:	4887      	ldr	r0, [pc, #540]	; (8013eb0 <tcp_input+0x534>)
 8013c94:	f006 fe08 	bl	801a8a8 <iprintf>
      if (prev != NULL) {
 8013c98:	69bb      	ldr	r3, [r7, #24]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d00a      	beq.n	8013cb4 <tcp_input+0x338>
        prev->next = pcb->next;
 8013c9e:	69fb      	ldr	r3, [r7, #28]
 8013ca0:	68da      	ldr	r2, [r3, #12]
 8013ca2:	69bb      	ldr	r3, [r7, #24]
 8013ca4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013ca6:	4b83      	ldr	r3, [pc, #524]	; (8013eb4 <tcp_input+0x538>)
 8013ca8:	681a      	ldr	r2, [r3, #0]
 8013caa:	69fb      	ldr	r3, [r7, #28]
 8013cac:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8013cae:	4a81      	ldr	r2, [pc, #516]	; (8013eb4 <tcp_input+0x538>)
 8013cb0:	69fb      	ldr	r3, [r7, #28]
 8013cb2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013cb4:	69fb      	ldr	r3, [r7, #28]
 8013cb6:	68db      	ldr	r3, [r3, #12]
 8013cb8:	69fa      	ldr	r2, [r7, #28]
 8013cba:	429a      	cmp	r2, r3
 8013cbc:	d111      	bne.n	8013ce2 <tcp_input+0x366>
 8013cbe:	4b7a      	ldr	r3, [pc, #488]	; (8013ea8 <tcp_input+0x52c>)
 8013cc0:	f240 1215 	movw	r2, #277	; 0x115
 8013cc4:	497c      	ldr	r1, [pc, #496]	; (8013eb8 <tcp_input+0x53c>)
 8013cc6:	487a      	ldr	r0, [pc, #488]	; (8013eb0 <tcp_input+0x534>)
 8013cc8:	f006 fdee 	bl	801a8a8 <iprintf>
      break;
 8013ccc:	e009      	b.n	8013ce2 <tcp_input+0x366>
    }
    prev = pcb;
 8013cce:	69fb      	ldr	r3, [r7, #28]
 8013cd0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cd2:	69fb      	ldr	r3, [r7, #28]
 8013cd4:	68db      	ldr	r3, [r3, #12]
 8013cd6:	61fb      	str	r3, [r7, #28]
 8013cd8:	69fb      	ldr	r3, [r7, #28]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	f47f af5e 	bne.w	8013b9c <tcp_input+0x220>
 8013ce0:	e000      	b.n	8013ce4 <tcp_input+0x368>
      break;
 8013ce2:	bf00      	nop
  }

  if (pcb == NULL) {
 8013ce4:	69fb      	ldr	r3, [r7, #28]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	f040 8095 	bne.w	8013e16 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cec:	4b73      	ldr	r3, [pc, #460]	; (8013ebc <tcp_input+0x540>)
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	61fb      	str	r3, [r7, #28]
 8013cf2:	e03f      	b.n	8013d74 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013cf4:	69fb      	ldr	r3, [r7, #28]
 8013cf6:	7d1b      	ldrb	r3, [r3, #20]
 8013cf8:	2b0a      	cmp	r3, #10
 8013cfa:	d006      	beq.n	8013d0a <tcp_input+0x38e>
 8013cfc:	4b6a      	ldr	r3, [pc, #424]	; (8013ea8 <tcp_input+0x52c>)
 8013cfe:	f240 121f 	movw	r2, #287	; 0x11f
 8013d02:	496f      	ldr	r1, [pc, #444]	; (8013ec0 <tcp_input+0x544>)
 8013d04:	486a      	ldr	r0, [pc, #424]	; (8013eb0 <tcp_input+0x534>)
 8013d06:	f006 fdcf 	bl	801a8a8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d0a:	69fb      	ldr	r3, [r7, #28]
 8013d0c:	7a1b      	ldrb	r3, [r3, #8]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d009      	beq.n	8013d26 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013d12:	69fb      	ldr	r3, [r7, #28]
 8013d14:	7a1a      	ldrb	r2, [r3, #8]
 8013d16:	4b63      	ldr	r3, [pc, #396]	; (8013ea4 <tcp_input+0x528>)
 8013d18:	685b      	ldr	r3, [r3, #4]
 8013d1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d1e:	3301      	adds	r3, #1
 8013d20:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d22:	429a      	cmp	r2, r3
 8013d24:	d122      	bne.n	8013d6c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013d26:	69fb      	ldr	r3, [r7, #28]
 8013d28:	8b1a      	ldrh	r2, [r3, #24]
 8013d2a:	4b5d      	ldr	r3, [pc, #372]	; (8013ea0 <tcp_input+0x524>)
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	881b      	ldrh	r3, [r3, #0]
 8013d30:	b29b      	uxth	r3, r3
 8013d32:	429a      	cmp	r2, r3
 8013d34:	d11b      	bne.n	8013d6e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013d36:	69fb      	ldr	r3, [r7, #28]
 8013d38:	8ada      	ldrh	r2, [r3, #22]
 8013d3a:	4b59      	ldr	r3, [pc, #356]	; (8013ea0 <tcp_input+0x524>)
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	885b      	ldrh	r3, [r3, #2]
 8013d40:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8013d42:	429a      	cmp	r2, r3
 8013d44:	d113      	bne.n	8013d6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013d46:	69fb      	ldr	r3, [r7, #28]
 8013d48:	685a      	ldr	r2, [r3, #4]
 8013d4a:	4b56      	ldr	r3, [pc, #344]	; (8013ea4 <tcp_input+0x528>)
 8013d4c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	d10d      	bne.n	8013d6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013d52:	69fb      	ldr	r3, [r7, #28]
 8013d54:	681a      	ldr	r2, [r3, #0]
 8013d56:	4b53      	ldr	r3, [pc, #332]	; (8013ea4 <tcp_input+0x528>)
 8013d58:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013d5a:	429a      	cmp	r2, r3
 8013d5c:	d107      	bne.n	8013d6e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013d5e:	69f8      	ldr	r0, [r7, #28]
 8013d60:	f000 fb54 	bl	801440c <tcp_timewait_input>
        }
        pbuf_free(p);
 8013d64:	6878      	ldr	r0, [r7, #4]
 8013d66:	f7fd ffe1 	bl	8011d2c <pbuf_free>
        return;
 8013d6a:	e1f0      	b.n	801414e <tcp_input+0x7d2>
        continue;
 8013d6c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d6e:	69fb      	ldr	r3, [r7, #28]
 8013d70:	68db      	ldr	r3, [r3, #12]
 8013d72:	61fb      	str	r3, [r7, #28]
 8013d74:	69fb      	ldr	r3, [r7, #28]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d1bc      	bne.n	8013cf4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013d7e:	4b51      	ldr	r3, [pc, #324]	; (8013ec4 <tcp_input+0x548>)
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	617b      	str	r3, [r7, #20]
 8013d84:	e02a      	b.n	8013ddc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013d86:	697b      	ldr	r3, [r7, #20]
 8013d88:	7a1b      	ldrb	r3, [r3, #8]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d00c      	beq.n	8013da8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013d8e:	697b      	ldr	r3, [r7, #20]
 8013d90:	7a1a      	ldrb	r2, [r3, #8]
 8013d92:	4b44      	ldr	r3, [pc, #272]	; (8013ea4 <tcp_input+0x528>)
 8013d94:	685b      	ldr	r3, [r3, #4]
 8013d96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d9a:	3301      	adds	r3, #1
 8013d9c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013d9e:	429a      	cmp	r2, r3
 8013da0:	d002      	beq.n	8013da8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013da2:	697b      	ldr	r3, [r7, #20]
 8013da4:	61bb      	str	r3, [r7, #24]
        continue;
 8013da6:	e016      	b.n	8013dd6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013da8:	697b      	ldr	r3, [r7, #20]
 8013daa:	8ada      	ldrh	r2, [r3, #22]
 8013dac:	4b3c      	ldr	r3, [pc, #240]	; (8013ea0 <tcp_input+0x524>)
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	885b      	ldrh	r3, [r3, #2]
 8013db2:	b29b      	uxth	r3, r3
 8013db4:	429a      	cmp	r2, r3
 8013db6:	d10c      	bne.n	8013dd2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013db8:	697b      	ldr	r3, [r7, #20]
 8013dba:	681a      	ldr	r2, [r3, #0]
 8013dbc:	4b39      	ldr	r3, [pc, #228]	; (8013ea4 <tcp_input+0x528>)
 8013dbe:	695b      	ldr	r3, [r3, #20]
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d00f      	beq.n	8013de4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013dc4:	697b      	ldr	r3, [r7, #20]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d00d      	beq.n	8013de6 <tcp_input+0x46a>
 8013dca:	697b      	ldr	r3, [r7, #20]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d009      	beq.n	8013de6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013dd2:	697b      	ldr	r3, [r7, #20]
 8013dd4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013dd6:	697b      	ldr	r3, [r7, #20]
 8013dd8:	68db      	ldr	r3, [r3, #12]
 8013dda:	617b      	str	r3, [r7, #20]
 8013ddc:	697b      	ldr	r3, [r7, #20]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d1d1      	bne.n	8013d86 <tcp_input+0x40a>
 8013de2:	e000      	b.n	8013de6 <tcp_input+0x46a>
            break;
 8013de4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013de6:	697b      	ldr	r3, [r7, #20]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d014      	beq.n	8013e16 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013dec:	69bb      	ldr	r3, [r7, #24]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d00a      	beq.n	8013e08 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013df2:	697b      	ldr	r3, [r7, #20]
 8013df4:	68da      	ldr	r2, [r3, #12]
 8013df6:	69bb      	ldr	r3, [r7, #24]
 8013df8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013dfa:	4b32      	ldr	r3, [pc, #200]	; (8013ec4 <tcp_input+0x548>)
 8013dfc:	681a      	ldr	r2, [r3, #0]
 8013dfe:	697b      	ldr	r3, [r7, #20]
 8013e00:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013e02:	4a30      	ldr	r2, [pc, #192]	; (8013ec4 <tcp_input+0x548>)
 8013e04:	697b      	ldr	r3, [r7, #20]
 8013e06:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013e08:	6978      	ldr	r0, [r7, #20]
 8013e0a:	f000 fa01 	bl	8014210 <tcp_listen_input>
      }
      pbuf_free(p);
 8013e0e:	6878      	ldr	r0, [r7, #4]
 8013e10:	f7fd ff8c 	bl	8011d2c <pbuf_free>
      return;
 8013e14:	e19b      	b.n	801414e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013e16:	69fb      	ldr	r3, [r7, #28]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	f000 8160 	beq.w	80140de <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013e1e:	4b2a      	ldr	r3, [pc, #168]	; (8013ec8 <tcp_input+0x54c>)
 8013e20:	2200      	movs	r2, #0
 8013e22:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	891a      	ldrh	r2, [r3, #8]
 8013e28:	4b27      	ldr	r3, [pc, #156]	; (8013ec8 <tcp_input+0x54c>)
 8013e2a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013e2c:	4a26      	ldr	r2, [pc, #152]	; (8013ec8 <tcp_input+0x54c>)
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013e32:	4b1b      	ldr	r3, [pc, #108]	; (8013ea0 <tcp_input+0x524>)
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	4a24      	ldr	r2, [pc, #144]	; (8013ec8 <tcp_input+0x54c>)
 8013e38:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013e3a:	4b24      	ldr	r3, [pc, #144]	; (8013ecc <tcp_input+0x550>)
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013e40:	4b23      	ldr	r3, [pc, #140]	; (8013ed0 <tcp_input+0x554>)
 8013e42:	2200      	movs	r2, #0
 8013e44:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013e46:	4b23      	ldr	r3, [pc, #140]	; (8013ed4 <tcp_input+0x558>)
 8013e48:	2200      	movs	r2, #0
 8013e4a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013e4c:	4b22      	ldr	r3, [pc, #136]	; (8013ed8 <tcp_input+0x55c>)
 8013e4e:	781b      	ldrb	r3, [r3, #0]
 8013e50:	f003 0308 	and.w	r3, r3, #8
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d006      	beq.n	8013e66 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	7b5b      	ldrb	r3, [r3, #13]
 8013e5c:	f043 0301 	orr.w	r3, r3, #1
 8013e60:	b2da      	uxtb	r2, r3
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013e66:	69fb      	ldr	r3, [r7, #28]
 8013e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d038      	beq.n	8013ee0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013e6e:	69f8      	ldr	r0, [r7, #28]
 8013e70:	f7ff f93e 	bl	80130f0 <tcp_process_refused_data>
 8013e74:	4603      	mov	r3, r0
 8013e76:	f113 0f0d 	cmn.w	r3, #13
 8013e7a:	d007      	beq.n	8013e8c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013e7c:	69fb      	ldr	r3, [r7, #28]
 8013e7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d02d      	beq.n	8013ee0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013e84:	4b15      	ldr	r3, [pc, #84]	; (8013edc <tcp_input+0x560>)
 8013e86:	881b      	ldrh	r3, [r3, #0]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d029      	beq.n	8013ee0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013e8c:	69fb      	ldr	r3, [r7, #28]
 8013e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	f040 8104 	bne.w	801409e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013e96:	69f8      	ldr	r0, [r7, #28]
 8013e98:	f003 f9be 	bl	8017218 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013e9c:	e0ff      	b.n	801409e <tcp_input+0x722>
 8013e9e:	bf00      	nop
 8013ea0:	2000318c 	.word	0x2000318c
 8013ea4:	2000a73c 	.word	0x2000a73c
 8013ea8:	0801d120 	.word	0x0801d120
 8013eac:	0801d24c 	.word	0x0801d24c
 8013eb0:	0801d16c 	.word	0x0801d16c
 8013eb4:	2000dc80 	.word	0x2000dc80
 8013eb8:	0801d278 	.word	0x0801d278
 8013ebc:	2000dc90 	.word	0x2000dc90
 8013ec0:	0801d2a4 	.word	0x0801d2a4
 8013ec4:	2000dc88 	.word	0x2000dc88
 8013ec8:	2000317c 	.word	0x2000317c
 8013ecc:	200031ac 	.word	0x200031ac
 8013ed0:	200031a9 	.word	0x200031a9
 8013ed4:	200031a4 	.word	0x200031a4
 8013ed8:	200031a8 	.word	0x200031a8
 8013edc:	200031a6 	.word	0x200031a6
      }
    }
    tcp_input_pcb = pcb;
 8013ee0:	4a9c      	ldr	r2, [pc, #624]	; (8014154 <tcp_input+0x7d8>)
 8013ee2:	69fb      	ldr	r3, [r7, #28]
 8013ee4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013ee6:	69f8      	ldr	r0, [r7, #28]
 8013ee8:	f000 fb0a 	bl	8014500 <tcp_process>
 8013eec:	4603      	mov	r3, r0
 8013eee:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013ef0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013ef4:	f113 0f0d 	cmn.w	r3, #13
 8013ef8:	f000 80d3 	beq.w	80140a2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8013efc:	4b96      	ldr	r3, [pc, #600]	; (8014158 <tcp_input+0x7dc>)
 8013efe:	781b      	ldrb	r3, [r3, #0]
 8013f00:	f003 0308 	and.w	r3, r3, #8
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d015      	beq.n	8013f34 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013f08:	69fb      	ldr	r3, [r7, #28]
 8013f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d008      	beq.n	8013f24 <tcp_input+0x5a8>
 8013f12:	69fb      	ldr	r3, [r7, #28]
 8013f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f18:	69fa      	ldr	r2, [r7, #28]
 8013f1a:	6912      	ldr	r2, [r2, #16]
 8013f1c:	f06f 010d 	mvn.w	r1, #13
 8013f20:	4610      	mov	r0, r2
 8013f22:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013f24:	69f9      	ldr	r1, [r7, #28]
 8013f26:	488d      	ldr	r0, [pc, #564]	; (801415c <tcp_input+0x7e0>)
 8013f28:	f7ff fbb0 	bl	801368c <tcp_pcb_remove>
        tcp_free(pcb);
 8013f2c:	69f8      	ldr	r0, [r7, #28]
 8013f2e:	f7fe f99d 	bl	801226c <tcp_free>
 8013f32:	e0c1      	b.n	80140b8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8013f34:	2300      	movs	r3, #0
 8013f36:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013f38:	4b89      	ldr	r3, [pc, #548]	; (8014160 <tcp_input+0x7e4>)
 8013f3a:	881b      	ldrh	r3, [r3, #0]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d01d      	beq.n	8013f7c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013f40:	4b87      	ldr	r3, [pc, #540]	; (8014160 <tcp_input+0x7e4>)
 8013f42:	881b      	ldrh	r3, [r3, #0]
 8013f44:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013f46:	69fb      	ldr	r3, [r7, #28]
 8013f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d00a      	beq.n	8013f66 <tcp_input+0x5ea>
 8013f50:	69fb      	ldr	r3, [r7, #28]
 8013f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f56:	69fa      	ldr	r2, [r7, #28]
 8013f58:	6910      	ldr	r0, [r2, #16]
 8013f5a:	89fa      	ldrh	r2, [r7, #14]
 8013f5c:	69f9      	ldr	r1, [r7, #28]
 8013f5e:	4798      	blx	r3
 8013f60:	4603      	mov	r3, r0
 8013f62:	74fb      	strb	r3, [r7, #19]
 8013f64:	e001      	b.n	8013f6a <tcp_input+0x5ee>
 8013f66:	2300      	movs	r3, #0
 8013f68:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013f6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013f6e:	f113 0f0d 	cmn.w	r3, #13
 8013f72:	f000 8098 	beq.w	80140a6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013f76:	4b7a      	ldr	r3, [pc, #488]	; (8014160 <tcp_input+0x7e4>)
 8013f78:	2200      	movs	r2, #0
 8013f7a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013f7c:	69f8      	ldr	r0, [r7, #28]
 8013f7e:	f000 f907 	bl	8014190 <tcp_input_delayed_close>
 8013f82:	4603      	mov	r3, r0
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	f040 8090 	bne.w	80140aa <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013f8a:	4b76      	ldr	r3, [pc, #472]	; (8014164 <tcp_input+0x7e8>)
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d041      	beq.n	8014016 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013f92:	69fb      	ldr	r3, [r7, #28]
 8013f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d006      	beq.n	8013fa8 <tcp_input+0x62c>
 8013f9a:	4b73      	ldr	r3, [pc, #460]	; (8014168 <tcp_input+0x7ec>)
 8013f9c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013fa0:	4972      	ldr	r1, [pc, #456]	; (801416c <tcp_input+0x7f0>)
 8013fa2:	4873      	ldr	r0, [pc, #460]	; (8014170 <tcp_input+0x7f4>)
 8013fa4:	f006 fc80 	bl	801a8a8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013fa8:	69fb      	ldr	r3, [r7, #28]
 8013faa:	8b5b      	ldrh	r3, [r3, #26]
 8013fac:	f003 0310 	and.w	r3, r3, #16
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d008      	beq.n	8013fc6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013fb4:	4b6b      	ldr	r3, [pc, #428]	; (8014164 <tcp_input+0x7e8>)
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	4618      	mov	r0, r3
 8013fba:	f7fd feb7 	bl	8011d2c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013fbe:	69f8      	ldr	r0, [r7, #28]
 8013fc0:	f7fe fc3c 	bl	801283c <tcp_abort>
            goto aborted;
 8013fc4:	e078      	b.n	80140b8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013fc6:	69fb      	ldr	r3, [r7, #28]
 8013fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d00c      	beq.n	8013fea <tcp_input+0x66e>
 8013fd0:	69fb      	ldr	r3, [r7, #28]
 8013fd2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013fd6:	69fb      	ldr	r3, [r7, #28]
 8013fd8:	6918      	ldr	r0, [r3, #16]
 8013fda:	4b62      	ldr	r3, [pc, #392]	; (8014164 <tcp_input+0x7e8>)
 8013fdc:	681a      	ldr	r2, [r3, #0]
 8013fde:	2300      	movs	r3, #0
 8013fe0:	69f9      	ldr	r1, [r7, #28]
 8013fe2:	47a0      	blx	r4
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	74fb      	strb	r3, [r7, #19]
 8013fe8:	e008      	b.n	8013ffc <tcp_input+0x680>
 8013fea:	4b5e      	ldr	r3, [pc, #376]	; (8014164 <tcp_input+0x7e8>)
 8013fec:	681a      	ldr	r2, [r3, #0]
 8013fee:	2300      	movs	r3, #0
 8013ff0:	69f9      	ldr	r1, [r7, #28]
 8013ff2:	2000      	movs	r0, #0
 8013ff4:	f7ff f952 	bl	801329c <tcp_recv_null>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013ffc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014000:	f113 0f0d 	cmn.w	r3, #13
 8014004:	d053      	beq.n	80140ae <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8014006:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d003      	beq.n	8014016 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801400e:	4b55      	ldr	r3, [pc, #340]	; (8014164 <tcp_input+0x7e8>)
 8014010:	681a      	ldr	r2, [r3, #0]
 8014012:	69fb      	ldr	r3, [r7, #28]
 8014014:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8014016:	4b50      	ldr	r3, [pc, #320]	; (8014158 <tcp_input+0x7dc>)
 8014018:	781b      	ldrb	r3, [r3, #0]
 801401a:	f003 0320 	and.w	r3, r3, #32
 801401e:	2b00      	cmp	r3, #0
 8014020:	d030      	beq.n	8014084 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8014022:	69fb      	ldr	r3, [r7, #28]
 8014024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014026:	2b00      	cmp	r3, #0
 8014028:	d009      	beq.n	801403e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801402a:	69fb      	ldr	r3, [r7, #28]
 801402c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801402e:	7b5a      	ldrb	r2, [r3, #13]
 8014030:	69fb      	ldr	r3, [r7, #28]
 8014032:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014034:	f042 0220 	orr.w	r2, r2, #32
 8014038:	b2d2      	uxtb	r2, r2
 801403a:	735a      	strb	r2, [r3, #13]
 801403c:	e022      	b.n	8014084 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801403e:	69fb      	ldr	r3, [r7, #28]
 8014040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014042:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014046:	d005      	beq.n	8014054 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8014048:	69fb      	ldr	r3, [r7, #28]
 801404a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801404c:	3301      	adds	r3, #1
 801404e:	b29a      	uxth	r2, r3
 8014050:	69fb      	ldr	r3, [r7, #28]
 8014052:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8014054:	69fb      	ldr	r3, [r7, #28]
 8014056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801405a:	2b00      	cmp	r3, #0
 801405c:	d00b      	beq.n	8014076 <tcp_input+0x6fa>
 801405e:	69fb      	ldr	r3, [r7, #28]
 8014060:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014064:	69fb      	ldr	r3, [r7, #28]
 8014066:	6918      	ldr	r0, [r3, #16]
 8014068:	2300      	movs	r3, #0
 801406a:	2200      	movs	r2, #0
 801406c:	69f9      	ldr	r1, [r7, #28]
 801406e:	47a0      	blx	r4
 8014070:	4603      	mov	r3, r0
 8014072:	74fb      	strb	r3, [r7, #19]
 8014074:	e001      	b.n	801407a <tcp_input+0x6fe>
 8014076:	2300      	movs	r3, #0
 8014078:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801407a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801407e:	f113 0f0d 	cmn.w	r3, #13
 8014082:	d016      	beq.n	80140b2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8014084:	4b33      	ldr	r3, [pc, #204]	; (8014154 <tcp_input+0x7d8>)
 8014086:	2200      	movs	r2, #0
 8014088:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801408a:	69f8      	ldr	r0, [r7, #28]
 801408c:	f000 f880 	bl	8014190 <tcp_input_delayed_close>
 8014090:	4603      	mov	r3, r0
 8014092:	2b00      	cmp	r3, #0
 8014094:	d10f      	bne.n	80140b6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8014096:	69f8      	ldr	r0, [r7, #28]
 8014098:	f002 fab8 	bl	801660c <tcp_output>
 801409c:	e00c      	b.n	80140b8 <tcp_input+0x73c>
        goto aborted;
 801409e:	bf00      	nop
 80140a0:	e00a      	b.n	80140b8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80140a2:	bf00      	nop
 80140a4:	e008      	b.n	80140b8 <tcp_input+0x73c>
              goto aborted;
 80140a6:	bf00      	nop
 80140a8:	e006      	b.n	80140b8 <tcp_input+0x73c>
          goto aborted;
 80140aa:	bf00      	nop
 80140ac:	e004      	b.n	80140b8 <tcp_input+0x73c>
            goto aborted;
 80140ae:	bf00      	nop
 80140b0:	e002      	b.n	80140b8 <tcp_input+0x73c>
              goto aborted;
 80140b2:	bf00      	nop
 80140b4:	e000      	b.n	80140b8 <tcp_input+0x73c>
          goto aborted;
 80140b6:	bf00      	nop
    tcp_input_pcb = NULL;
 80140b8:	4b26      	ldr	r3, [pc, #152]	; (8014154 <tcp_input+0x7d8>)
 80140ba:	2200      	movs	r2, #0
 80140bc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80140be:	4b29      	ldr	r3, [pc, #164]	; (8014164 <tcp_input+0x7e8>)
 80140c0:	2200      	movs	r2, #0
 80140c2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80140c4:	4b2b      	ldr	r3, [pc, #172]	; (8014174 <tcp_input+0x7f8>)
 80140c6:	685b      	ldr	r3, [r3, #4]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d03f      	beq.n	801414c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 80140cc:	4b29      	ldr	r3, [pc, #164]	; (8014174 <tcp_input+0x7f8>)
 80140ce:	685b      	ldr	r3, [r3, #4]
 80140d0:	4618      	mov	r0, r3
 80140d2:	f7fd fe2b 	bl	8011d2c <pbuf_free>
      inseg.p = NULL;
 80140d6:	4b27      	ldr	r3, [pc, #156]	; (8014174 <tcp_input+0x7f8>)
 80140d8:	2200      	movs	r2, #0
 80140da:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80140dc:	e036      	b.n	801414c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80140de:	4b26      	ldr	r3, [pc, #152]	; (8014178 <tcp_input+0x7fc>)
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	899b      	ldrh	r3, [r3, #12]
 80140e4:	b29b      	uxth	r3, r3
 80140e6:	4618      	mov	r0, r3
 80140e8:	f7fc fb6d 	bl	80107c6 <lwip_htons>
 80140ec:	4603      	mov	r3, r0
 80140ee:	b2db      	uxtb	r3, r3
 80140f0:	f003 0304 	and.w	r3, r3, #4
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d118      	bne.n	801412a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80140f8:	4b20      	ldr	r3, [pc, #128]	; (801417c <tcp_input+0x800>)
 80140fa:	6819      	ldr	r1, [r3, #0]
 80140fc:	4b20      	ldr	r3, [pc, #128]	; (8014180 <tcp_input+0x804>)
 80140fe:	881b      	ldrh	r3, [r3, #0]
 8014100:	461a      	mov	r2, r3
 8014102:	4b20      	ldr	r3, [pc, #128]	; (8014184 <tcp_input+0x808>)
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014108:	4b1b      	ldr	r3, [pc, #108]	; (8014178 <tcp_input+0x7fc>)
 801410a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801410c:	885b      	ldrh	r3, [r3, #2]
 801410e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014110:	4a19      	ldr	r2, [pc, #100]	; (8014178 <tcp_input+0x7fc>)
 8014112:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014114:	8812      	ldrh	r2, [r2, #0]
 8014116:	b292      	uxth	r2, r2
 8014118:	9202      	str	r2, [sp, #8]
 801411a:	9301      	str	r3, [sp, #4]
 801411c:	4b1a      	ldr	r3, [pc, #104]	; (8014188 <tcp_input+0x80c>)
 801411e:	9300      	str	r3, [sp, #0]
 8014120:	4b1a      	ldr	r3, [pc, #104]	; (801418c <tcp_input+0x810>)
 8014122:	4602      	mov	r2, r0
 8014124:	2000      	movs	r0, #0
 8014126:	f003 f825 	bl	8017174 <tcp_rst>
    pbuf_free(p);
 801412a:	6878      	ldr	r0, [r7, #4]
 801412c:	f7fd fdfe 	bl	8011d2c <pbuf_free>
  return;
 8014130:	e00c      	b.n	801414c <tcp_input+0x7d0>
    goto dropped;
 8014132:	bf00      	nop
 8014134:	e006      	b.n	8014144 <tcp_input+0x7c8>
    goto dropped;
 8014136:	bf00      	nop
 8014138:	e004      	b.n	8014144 <tcp_input+0x7c8>
    goto dropped;
 801413a:	bf00      	nop
 801413c:	e002      	b.n	8014144 <tcp_input+0x7c8>
      goto dropped;
 801413e:	bf00      	nop
 8014140:	e000      	b.n	8014144 <tcp_input+0x7c8>
      goto dropped;
 8014142:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8014144:	6878      	ldr	r0, [r7, #4]
 8014146:	f7fd fdf1 	bl	8011d2c <pbuf_free>
 801414a:	e000      	b.n	801414e <tcp_input+0x7d2>
  return;
 801414c:	bf00      	nop
}
 801414e:	3724      	adds	r7, #36	; 0x24
 8014150:	46bd      	mov	sp, r7
 8014152:	bd90      	pop	{r4, r7, pc}
 8014154:	2000dc94 	.word	0x2000dc94
 8014158:	200031a9 	.word	0x200031a9
 801415c:	2000dc80 	.word	0x2000dc80
 8014160:	200031a4 	.word	0x200031a4
 8014164:	200031ac 	.word	0x200031ac
 8014168:	0801d120 	.word	0x0801d120
 801416c:	0801d2d4 	.word	0x0801d2d4
 8014170:	0801d16c 	.word	0x0801d16c
 8014174:	2000317c 	.word	0x2000317c
 8014178:	2000318c 	.word	0x2000318c
 801417c:	200031a0 	.word	0x200031a0
 8014180:	200031a6 	.word	0x200031a6
 8014184:	2000319c 	.word	0x2000319c
 8014188:	2000a74c 	.word	0x2000a74c
 801418c:	2000a750 	.word	0x2000a750

08014190 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8014190:	b580      	push	{r7, lr}
 8014192:	b082      	sub	sp, #8
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d106      	bne.n	80141ac <tcp_input_delayed_close+0x1c>
 801419e:	4b17      	ldr	r3, [pc, #92]	; (80141fc <tcp_input_delayed_close+0x6c>)
 80141a0:	f240 225a 	movw	r2, #602	; 0x25a
 80141a4:	4916      	ldr	r1, [pc, #88]	; (8014200 <tcp_input_delayed_close+0x70>)
 80141a6:	4817      	ldr	r0, [pc, #92]	; (8014204 <tcp_input_delayed_close+0x74>)
 80141a8:	f006 fb7e 	bl	801a8a8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80141ac:	4b16      	ldr	r3, [pc, #88]	; (8014208 <tcp_input_delayed_close+0x78>)
 80141ae:	781b      	ldrb	r3, [r3, #0]
 80141b0:	f003 0310 	and.w	r3, r3, #16
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d01c      	beq.n	80141f2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	8b5b      	ldrh	r3, [r3, #26]
 80141bc:	f003 0310 	and.w	r3, r3, #16
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d10d      	bne.n	80141e0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d008      	beq.n	80141e0 <tcp_input_delayed_close+0x50>
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80141d4:	687a      	ldr	r2, [r7, #4]
 80141d6:	6912      	ldr	r2, [r2, #16]
 80141d8:	f06f 010e 	mvn.w	r1, #14
 80141dc:	4610      	mov	r0, r2
 80141de:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80141e0:	6879      	ldr	r1, [r7, #4]
 80141e2:	480a      	ldr	r0, [pc, #40]	; (801420c <tcp_input_delayed_close+0x7c>)
 80141e4:	f7ff fa52 	bl	801368c <tcp_pcb_remove>
    tcp_free(pcb);
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	f7fe f83f 	bl	801226c <tcp_free>
    return 1;
 80141ee:	2301      	movs	r3, #1
 80141f0:	e000      	b.n	80141f4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80141f2:	2300      	movs	r3, #0
}
 80141f4:	4618      	mov	r0, r3
 80141f6:	3708      	adds	r7, #8
 80141f8:	46bd      	mov	sp, r7
 80141fa:	bd80      	pop	{r7, pc}
 80141fc:	0801d120 	.word	0x0801d120
 8014200:	0801d2f0 	.word	0x0801d2f0
 8014204:	0801d16c 	.word	0x0801d16c
 8014208:	200031a9 	.word	0x200031a9
 801420c:	2000dc80 	.word	0x2000dc80

08014210 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8014210:	b590      	push	{r4, r7, lr}
 8014212:	b08b      	sub	sp, #44	; 0x2c
 8014214:	af04      	add	r7, sp, #16
 8014216:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8014218:	4b6f      	ldr	r3, [pc, #444]	; (80143d8 <tcp_listen_input+0x1c8>)
 801421a:	781b      	ldrb	r3, [r3, #0]
 801421c:	f003 0304 	and.w	r3, r3, #4
 8014220:	2b00      	cmp	r3, #0
 8014222:	f040 80d2 	bne.w	80143ca <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d106      	bne.n	801423a <tcp_listen_input+0x2a>
 801422c:	4b6b      	ldr	r3, [pc, #428]	; (80143dc <tcp_listen_input+0x1cc>)
 801422e:	f240 2281 	movw	r2, #641	; 0x281
 8014232:	496b      	ldr	r1, [pc, #428]	; (80143e0 <tcp_listen_input+0x1d0>)
 8014234:	486b      	ldr	r0, [pc, #428]	; (80143e4 <tcp_listen_input+0x1d4>)
 8014236:	f006 fb37 	bl	801a8a8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801423a:	4b67      	ldr	r3, [pc, #412]	; (80143d8 <tcp_listen_input+0x1c8>)
 801423c:	781b      	ldrb	r3, [r3, #0]
 801423e:	f003 0310 	and.w	r3, r3, #16
 8014242:	2b00      	cmp	r3, #0
 8014244:	d019      	beq.n	801427a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014246:	4b68      	ldr	r3, [pc, #416]	; (80143e8 <tcp_listen_input+0x1d8>)
 8014248:	6819      	ldr	r1, [r3, #0]
 801424a:	4b68      	ldr	r3, [pc, #416]	; (80143ec <tcp_listen_input+0x1dc>)
 801424c:	881b      	ldrh	r3, [r3, #0]
 801424e:	461a      	mov	r2, r3
 8014250:	4b67      	ldr	r3, [pc, #412]	; (80143f0 <tcp_listen_input+0x1e0>)
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014256:	4b67      	ldr	r3, [pc, #412]	; (80143f4 <tcp_listen_input+0x1e4>)
 8014258:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801425a:	885b      	ldrh	r3, [r3, #2]
 801425c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801425e:	4a65      	ldr	r2, [pc, #404]	; (80143f4 <tcp_listen_input+0x1e4>)
 8014260:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014262:	8812      	ldrh	r2, [r2, #0]
 8014264:	b292      	uxth	r2, r2
 8014266:	9202      	str	r2, [sp, #8]
 8014268:	9301      	str	r3, [sp, #4]
 801426a:	4b63      	ldr	r3, [pc, #396]	; (80143f8 <tcp_listen_input+0x1e8>)
 801426c:	9300      	str	r3, [sp, #0]
 801426e:	4b63      	ldr	r3, [pc, #396]	; (80143fc <tcp_listen_input+0x1ec>)
 8014270:	4602      	mov	r2, r0
 8014272:	6878      	ldr	r0, [r7, #4]
 8014274:	f002 ff7e 	bl	8017174 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8014278:	e0a9      	b.n	80143ce <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801427a:	4b57      	ldr	r3, [pc, #348]	; (80143d8 <tcp_listen_input+0x1c8>)
 801427c:	781b      	ldrb	r3, [r3, #0]
 801427e:	f003 0302 	and.w	r3, r3, #2
 8014282:	2b00      	cmp	r3, #0
 8014284:	f000 80a3 	beq.w	80143ce <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	7d5b      	ldrb	r3, [r3, #21]
 801428c:	4618      	mov	r0, r3
 801428e:	f7ff f929 	bl	80134e4 <tcp_alloc>
 8014292:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014294:	697b      	ldr	r3, [r7, #20]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d111      	bne.n	80142be <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	699b      	ldr	r3, [r3, #24]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d00a      	beq.n	80142b8 <tcp_listen_input+0xa8>
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	699b      	ldr	r3, [r3, #24]
 80142a6:	687a      	ldr	r2, [r7, #4]
 80142a8:	6910      	ldr	r0, [r2, #16]
 80142aa:	f04f 32ff 	mov.w	r2, #4294967295
 80142ae:	2100      	movs	r1, #0
 80142b0:	4798      	blx	r3
 80142b2:	4603      	mov	r3, r0
 80142b4:	73bb      	strb	r3, [r7, #14]
      return;
 80142b6:	e08b      	b.n	80143d0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80142b8:	23f0      	movs	r3, #240	; 0xf0
 80142ba:	73bb      	strb	r3, [r7, #14]
      return;
 80142bc:	e088      	b.n	80143d0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80142be:	4b50      	ldr	r3, [pc, #320]	; (8014400 <tcp_listen_input+0x1f0>)
 80142c0:	695a      	ldr	r2, [r3, #20]
 80142c2:	697b      	ldr	r3, [r7, #20]
 80142c4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80142c6:	4b4e      	ldr	r3, [pc, #312]	; (8014400 <tcp_listen_input+0x1f0>)
 80142c8:	691a      	ldr	r2, [r3, #16]
 80142ca:	697b      	ldr	r3, [r7, #20]
 80142cc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	8ada      	ldrh	r2, [r3, #22]
 80142d2:	697b      	ldr	r3, [r7, #20]
 80142d4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80142d6:	4b47      	ldr	r3, [pc, #284]	; (80143f4 <tcp_listen_input+0x1e4>)
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	881b      	ldrh	r3, [r3, #0]
 80142dc:	b29a      	uxth	r2, r3
 80142de:	697b      	ldr	r3, [r7, #20]
 80142e0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80142e2:	697b      	ldr	r3, [r7, #20]
 80142e4:	2203      	movs	r2, #3
 80142e6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80142e8:	4b41      	ldr	r3, [pc, #260]	; (80143f0 <tcp_listen_input+0x1e0>)
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	1c5a      	adds	r2, r3, #1
 80142ee:	697b      	ldr	r3, [r7, #20]
 80142f0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80142f2:	697b      	ldr	r3, [r7, #20]
 80142f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80142f6:	697b      	ldr	r3, [r7, #20]
 80142f8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80142fa:	6978      	ldr	r0, [r7, #20]
 80142fc:	f7ff fa5a 	bl	80137b4 <tcp_next_iss>
 8014300:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014302:	697b      	ldr	r3, [r7, #20]
 8014304:	693a      	ldr	r2, [r7, #16]
 8014306:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8014308:	697b      	ldr	r3, [r7, #20]
 801430a:	693a      	ldr	r2, [r7, #16]
 801430c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801430e:	697b      	ldr	r3, [r7, #20]
 8014310:	693a      	ldr	r2, [r7, #16]
 8014312:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8014314:	697b      	ldr	r3, [r7, #20]
 8014316:	693a      	ldr	r2, [r7, #16]
 8014318:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801431a:	4b35      	ldr	r3, [pc, #212]	; (80143f0 <tcp_listen_input+0x1e0>)
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	1e5a      	subs	r2, r3, #1
 8014320:	697b      	ldr	r3, [r7, #20]
 8014322:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	691a      	ldr	r2, [r3, #16]
 8014328:	697b      	ldr	r3, [r7, #20]
 801432a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801432c:	697b      	ldr	r3, [r7, #20]
 801432e:	687a      	ldr	r2, [r7, #4]
 8014330:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	7a5b      	ldrb	r3, [r3, #9]
 8014336:	f003 030c 	and.w	r3, r3, #12
 801433a:	b2da      	uxtb	r2, r3
 801433c:	697b      	ldr	r3, [r7, #20]
 801433e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	7a1a      	ldrb	r2, [r3, #8]
 8014344:	697b      	ldr	r3, [r7, #20]
 8014346:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014348:	4b2e      	ldr	r3, [pc, #184]	; (8014404 <tcp_listen_input+0x1f4>)
 801434a:	681a      	ldr	r2, [r3, #0]
 801434c:	697b      	ldr	r3, [r7, #20]
 801434e:	60da      	str	r2, [r3, #12]
 8014350:	4a2c      	ldr	r2, [pc, #176]	; (8014404 <tcp_listen_input+0x1f4>)
 8014352:	697b      	ldr	r3, [r7, #20]
 8014354:	6013      	str	r3, [r2, #0]
 8014356:	f003 f8cf 	bl	80174f8 <tcp_timer_needed>
 801435a:	4b2b      	ldr	r3, [pc, #172]	; (8014408 <tcp_listen_input+0x1f8>)
 801435c:	2201      	movs	r2, #1
 801435e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014360:	6978      	ldr	r0, [r7, #20]
 8014362:	f001 fd8d 	bl	8015e80 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014366:	4b23      	ldr	r3, [pc, #140]	; (80143f4 <tcp_listen_input+0x1e4>)
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	89db      	ldrh	r3, [r3, #14]
 801436c:	b29a      	uxth	r2, r3
 801436e:	697b      	ldr	r3, [r7, #20]
 8014370:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014374:	697b      	ldr	r3, [r7, #20]
 8014376:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801437a:	697b      	ldr	r3, [r7, #20]
 801437c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014380:	697b      	ldr	r3, [r7, #20]
 8014382:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014384:	697b      	ldr	r3, [r7, #20]
 8014386:	3304      	adds	r3, #4
 8014388:	4618      	mov	r0, r3
 801438a:	f004 fc93 	bl	8018cb4 <ip4_route>
 801438e:	4601      	mov	r1, r0
 8014390:	697b      	ldr	r3, [r7, #20]
 8014392:	3304      	adds	r3, #4
 8014394:	461a      	mov	r2, r3
 8014396:	4620      	mov	r0, r4
 8014398:	f7ff fa32 	bl	8013800 <tcp_eff_send_mss_netif>
 801439c:	4603      	mov	r3, r0
 801439e:	461a      	mov	r2, r3
 80143a0:	697b      	ldr	r3, [r7, #20]
 80143a2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80143a4:	2112      	movs	r1, #18
 80143a6:	6978      	ldr	r0, [r7, #20]
 80143a8:	f002 f842 	bl	8016430 <tcp_enqueue_flags>
 80143ac:	4603      	mov	r3, r0
 80143ae:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80143b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d004      	beq.n	80143c2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80143b8:	2100      	movs	r1, #0
 80143ba:	6978      	ldr	r0, [r7, #20]
 80143bc:	f7fe f980 	bl	80126c0 <tcp_abandon>
      return;
 80143c0:	e006      	b.n	80143d0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80143c2:	6978      	ldr	r0, [r7, #20]
 80143c4:	f002 f922 	bl	801660c <tcp_output>
  return;
 80143c8:	e001      	b.n	80143ce <tcp_listen_input+0x1be>
    return;
 80143ca:	bf00      	nop
 80143cc:	e000      	b.n	80143d0 <tcp_listen_input+0x1c0>
  return;
 80143ce:	bf00      	nop
}
 80143d0:	371c      	adds	r7, #28
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bd90      	pop	{r4, r7, pc}
 80143d6:	bf00      	nop
 80143d8:	200031a8 	.word	0x200031a8
 80143dc:	0801d120 	.word	0x0801d120
 80143e0:	0801d318 	.word	0x0801d318
 80143e4:	0801d16c 	.word	0x0801d16c
 80143e8:	200031a0 	.word	0x200031a0
 80143ec:	200031a6 	.word	0x200031a6
 80143f0:	2000319c 	.word	0x2000319c
 80143f4:	2000318c 	.word	0x2000318c
 80143f8:	2000a74c 	.word	0x2000a74c
 80143fc:	2000a750 	.word	0x2000a750
 8014400:	2000a73c 	.word	0x2000a73c
 8014404:	2000dc80 	.word	0x2000dc80
 8014408:	2000dc7c 	.word	0x2000dc7c

0801440c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801440c:	b580      	push	{r7, lr}
 801440e:	b086      	sub	sp, #24
 8014410:	af04      	add	r7, sp, #16
 8014412:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014414:	4b2f      	ldr	r3, [pc, #188]	; (80144d4 <tcp_timewait_input+0xc8>)
 8014416:	781b      	ldrb	r3, [r3, #0]
 8014418:	f003 0304 	and.w	r3, r3, #4
 801441c:	2b00      	cmp	r3, #0
 801441e:	d153      	bne.n	80144c8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d106      	bne.n	8014434 <tcp_timewait_input+0x28>
 8014426:	4b2c      	ldr	r3, [pc, #176]	; (80144d8 <tcp_timewait_input+0xcc>)
 8014428:	f240 22ee 	movw	r2, #750	; 0x2ee
 801442c:	492b      	ldr	r1, [pc, #172]	; (80144dc <tcp_timewait_input+0xd0>)
 801442e:	482c      	ldr	r0, [pc, #176]	; (80144e0 <tcp_timewait_input+0xd4>)
 8014430:	f006 fa3a 	bl	801a8a8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014434:	4b27      	ldr	r3, [pc, #156]	; (80144d4 <tcp_timewait_input+0xc8>)
 8014436:	781b      	ldrb	r3, [r3, #0]
 8014438:	f003 0302 	and.w	r3, r3, #2
 801443c:	2b00      	cmp	r3, #0
 801443e:	d02a      	beq.n	8014496 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014440:	4b28      	ldr	r3, [pc, #160]	; (80144e4 <tcp_timewait_input+0xd8>)
 8014442:	681a      	ldr	r2, [r3, #0]
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014448:	1ad3      	subs	r3, r2, r3
 801444a:	2b00      	cmp	r3, #0
 801444c:	db2d      	blt.n	80144aa <tcp_timewait_input+0x9e>
 801444e:	4b25      	ldr	r3, [pc, #148]	; (80144e4 <tcp_timewait_input+0xd8>)
 8014450:	681a      	ldr	r2, [r3, #0]
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014456:	6879      	ldr	r1, [r7, #4]
 8014458:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801445a:	440b      	add	r3, r1
 801445c:	1ad3      	subs	r3, r2, r3
 801445e:	2b00      	cmp	r3, #0
 8014460:	dc23      	bgt.n	80144aa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014462:	4b21      	ldr	r3, [pc, #132]	; (80144e8 <tcp_timewait_input+0xdc>)
 8014464:	6819      	ldr	r1, [r3, #0]
 8014466:	4b21      	ldr	r3, [pc, #132]	; (80144ec <tcp_timewait_input+0xe0>)
 8014468:	881b      	ldrh	r3, [r3, #0]
 801446a:	461a      	mov	r2, r3
 801446c:	4b1d      	ldr	r3, [pc, #116]	; (80144e4 <tcp_timewait_input+0xd8>)
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014472:	4b1f      	ldr	r3, [pc, #124]	; (80144f0 <tcp_timewait_input+0xe4>)
 8014474:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014476:	885b      	ldrh	r3, [r3, #2]
 8014478:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801447a:	4a1d      	ldr	r2, [pc, #116]	; (80144f0 <tcp_timewait_input+0xe4>)
 801447c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801447e:	8812      	ldrh	r2, [r2, #0]
 8014480:	b292      	uxth	r2, r2
 8014482:	9202      	str	r2, [sp, #8]
 8014484:	9301      	str	r3, [sp, #4]
 8014486:	4b1b      	ldr	r3, [pc, #108]	; (80144f4 <tcp_timewait_input+0xe8>)
 8014488:	9300      	str	r3, [sp, #0]
 801448a:	4b1b      	ldr	r3, [pc, #108]	; (80144f8 <tcp_timewait_input+0xec>)
 801448c:	4602      	mov	r2, r0
 801448e:	6878      	ldr	r0, [r7, #4]
 8014490:	f002 fe70 	bl	8017174 <tcp_rst>
      return;
 8014494:	e01b      	b.n	80144ce <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014496:	4b0f      	ldr	r3, [pc, #60]	; (80144d4 <tcp_timewait_input+0xc8>)
 8014498:	781b      	ldrb	r3, [r3, #0]
 801449a:	f003 0301 	and.w	r3, r3, #1
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d003      	beq.n	80144aa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80144a2:	4b16      	ldr	r3, [pc, #88]	; (80144fc <tcp_timewait_input+0xf0>)
 80144a4:	681a      	ldr	r2, [r3, #0]
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80144aa:	4b10      	ldr	r3, [pc, #64]	; (80144ec <tcp_timewait_input+0xe0>)
 80144ac:	881b      	ldrh	r3, [r3, #0]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d00c      	beq.n	80144cc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	8b5b      	ldrh	r3, [r3, #26]
 80144b6:	f043 0302 	orr.w	r3, r3, #2
 80144ba:	b29a      	uxth	r2, r3
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80144c0:	6878      	ldr	r0, [r7, #4]
 80144c2:	f002 f8a3 	bl	801660c <tcp_output>
  }
  return;
 80144c6:	e001      	b.n	80144cc <tcp_timewait_input+0xc0>
    return;
 80144c8:	bf00      	nop
 80144ca:	e000      	b.n	80144ce <tcp_timewait_input+0xc2>
  return;
 80144cc:	bf00      	nop
}
 80144ce:	3708      	adds	r7, #8
 80144d0:	46bd      	mov	sp, r7
 80144d2:	bd80      	pop	{r7, pc}
 80144d4:	200031a8 	.word	0x200031a8
 80144d8:	0801d120 	.word	0x0801d120
 80144dc:	0801d338 	.word	0x0801d338
 80144e0:	0801d16c 	.word	0x0801d16c
 80144e4:	2000319c 	.word	0x2000319c
 80144e8:	200031a0 	.word	0x200031a0
 80144ec:	200031a6 	.word	0x200031a6
 80144f0:	2000318c 	.word	0x2000318c
 80144f4:	2000a74c 	.word	0x2000a74c
 80144f8:	2000a750 	.word	0x2000a750
 80144fc:	2000dc84 	.word	0x2000dc84

08014500 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014500:	b590      	push	{r4, r7, lr}
 8014502:	b08d      	sub	sp, #52	; 0x34
 8014504:	af04      	add	r7, sp, #16
 8014506:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014508:	2300      	movs	r3, #0
 801450a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801450c:	2300      	movs	r3, #0
 801450e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	2b00      	cmp	r3, #0
 8014514:	d106      	bne.n	8014524 <tcp_process+0x24>
 8014516:	4ba5      	ldr	r3, [pc, #660]	; (80147ac <tcp_process+0x2ac>)
 8014518:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801451c:	49a4      	ldr	r1, [pc, #656]	; (80147b0 <tcp_process+0x2b0>)
 801451e:	48a5      	ldr	r0, [pc, #660]	; (80147b4 <tcp_process+0x2b4>)
 8014520:	f006 f9c2 	bl	801a8a8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014524:	4ba4      	ldr	r3, [pc, #656]	; (80147b8 <tcp_process+0x2b8>)
 8014526:	781b      	ldrb	r3, [r3, #0]
 8014528:	f003 0304 	and.w	r3, r3, #4
 801452c:	2b00      	cmp	r3, #0
 801452e:	d04e      	beq.n	80145ce <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	7d1b      	ldrb	r3, [r3, #20]
 8014534:	2b02      	cmp	r3, #2
 8014536:	d108      	bne.n	801454a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801453c:	4b9f      	ldr	r3, [pc, #636]	; (80147bc <tcp_process+0x2bc>)
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	429a      	cmp	r2, r3
 8014542:	d123      	bne.n	801458c <tcp_process+0x8c>
        acceptable = 1;
 8014544:	2301      	movs	r3, #1
 8014546:	76fb      	strb	r3, [r7, #27]
 8014548:	e020      	b.n	801458c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801454e:	4b9c      	ldr	r3, [pc, #624]	; (80147c0 <tcp_process+0x2c0>)
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	429a      	cmp	r2, r3
 8014554:	d102      	bne.n	801455c <tcp_process+0x5c>
        acceptable = 1;
 8014556:	2301      	movs	r3, #1
 8014558:	76fb      	strb	r3, [r7, #27]
 801455a:	e017      	b.n	801458c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801455c:	4b98      	ldr	r3, [pc, #608]	; (80147c0 <tcp_process+0x2c0>)
 801455e:	681a      	ldr	r2, [r3, #0]
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014564:	1ad3      	subs	r3, r2, r3
 8014566:	2b00      	cmp	r3, #0
 8014568:	db10      	blt.n	801458c <tcp_process+0x8c>
 801456a:	4b95      	ldr	r3, [pc, #596]	; (80147c0 <tcp_process+0x2c0>)
 801456c:	681a      	ldr	r2, [r3, #0]
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014572:	6879      	ldr	r1, [r7, #4]
 8014574:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014576:	440b      	add	r3, r1
 8014578:	1ad3      	subs	r3, r2, r3
 801457a:	2b00      	cmp	r3, #0
 801457c:	dc06      	bgt.n	801458c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	8b5b      	ldrh	r3, [r3, #26]
 8014582:	f043 0302 	orr.w	r3, r3, #2
 8014586:	b29a      	uxth	r2, r3
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801458c:	7efb      	ldrb	r3, [r7, #27]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d01b      	beq.n	80145ca <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	7d1b      	ldrb	r3, [r3, #20]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d106      	bne.n	80145a8 <tcp_process+0xa8>
 801459a:	4b84      	ldr	r3, [pc, #528]	; (80147ac <tcp_process+0x2ac>)
 801459c:	f44f 724e 	mov.w	r2, #824	; 0x338
 80145a0:	4988      	ldr	r1, [pc, #544]	; (80147c4 <tcp_process+0x2c4>)
 80145a2:	4884      	ldr	r0, [pc, #528]	; (80147b4 <tcp_process+0x2b4>)
 80145a4:	f006 f980 	bl	801a8a8 <iprintf>
      recv_flags |= TF_RESET;
 80145a8:	4b87      	ldr	r3, [pc, #540]	; (80147c8 <tcp_process+0x2c8>)
 80145aa:	781b      	ldrb	r3, [r3, #0]
 80145ac:	f043 0308 	orr.w	r3, r3, #8
 80145b0:	b2da      	uxtb	r2, r3
 80145b2:	4b85      	ldr	r3, [pc, #532]	; (80147c8 <tcp_process+0x2c8>)
 80145b4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	8b5b      	ldrh	r3, [r3, #26]
 80145ba:	f023 0301 	bic.w	r3, r3, #1
 80145be:	b29a      	uxth	r2, r3
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80145c4:	f06f 030d 	mvn.w	r3, #13
 80145c8:	e37a      	b.n	8014cc0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80145ca:	2300      	movs	r3, #0
 80145cc:	e378      	b.n	8014cc0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80145ce:	4b7a      	ldr	r3, [pc, #488]	; (80147b8 <tcp_process+0x2b8>)
 80145d0:	781b      	ldrb	r3, [r3, #0]
 80145d2:	f003 0302 	and.w	r3, r3, #2
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d010      	beq.n	80145fc <tcp_process+0xfc>
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	7d1b      	ldrb	r3, [r3, #20]
 80145de:	2b02      	cmp	r3, #2
 80145e0:	d00c      	beq.n	80145fc <tcp_process+0xfc>
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	7d1b      	ldrb	r3, [r3, #20]
 80145e6:	2b03      	cmp	r3, #3
 80145e8:	d008      	beq.n	80145fc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	8b5b      	ldrh	r3, [r3, #26]
 80145ee:	f043 0302 	orr.w	r3, r3, #2
 80145f2:	b29a      	uxth	r2, r3
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80145f8:	2300      	movs	r3, #0
 80145fa:	e361      	b.n	8014cc0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	8b5b      	ldrh	r3, [r3, #26]
 8014600:	f003 0310 	and.w	r3, r3, #16
 8014604:	2b00      	cmp	r3, #0
 8014606:	d103      	bne.n	8014610 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014608:	4b70      	ldr	r3, [pc, #448]	; (80147cc <tcp_process+0x2cc>)
 801460a:	681a      	ldr	r2, [r3, #0]
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	2200      	movs	r2, #0
 8014614:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	2200      	movs	r2, #0
 801461c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8014620:	6878      	ldr	r0, [r7, #4]
 8014622:	f001 fc2d 	bl	8015e80 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	7d1b      	ldrb	r3, [r3, #20]
 801462a:	3b02      	subs	r3, #2
 801462c:	2b07      	cmp	r3, #7
 801462e:	f200 8337 	bhi.w	8014ca0 <tcp_process+0x7a0>
 8014632:	a201      	add	r2, pc, #4	; (adr r2, 8014638 <tcp_process+0x138>)
 8014634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014638:	08014659 	.word	0x08014659
 801463c:	08014889 	.word	0x08014889
 8014640:	08014a01 	.word	0x08014a01
 8014644:	08014a2b 	.word	0x08014a2b
 8014648:	08014b4f 	.word	0x08014b4f
 801464c:	08014a01 	.word	0x08014a01
 8014650:	08014bdb 	.word	0x08014bdb
 8014654:	08014c6b 	.word	0x08014c6b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014658:	4b57      	ldr	r3, [pc, #348]	; (80147b8 <tcp_process+0x2b8>)
 801465a:	781b      	ldrb	r3, [r3, #0]
 801465c:	f003 0310 	and.w	r3, r3, #16
 8014660:	2b00      	cmp	r3, #0
 8014662:	f000 80e4 	beq.w	801482e <tcp_process+0x32e>
 8014666:	4b54      	ldr	r3, [pc, #336]	; (80147b8 <tcp_process+0x2b8>)
 8014668:	781b      	ldrb	r3, [r3, #0]
 801466a:	f003 0302 	and.w	r3, r3, #2
 801466e:	2b00      	cmp	r3, #0
 8014670:	f000 80dd 	beq.w	801482e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014678:	1c5a      	adds	r2, r3, #1
 801467a:	4b50      	ldr	r3, [pc, #320]	; (80147bc <tcp_process+0x2bc>)
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	429a      	cmp	r2, r3
 8014680:	f040 80d5 	bne.w	801482e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014684:	4b4e      	ldr	r3, [pc, #312]	; (80147c0 <tcp_process+0x2c0>)
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	1c5a      	adds	r2, r3, #1
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8014696:	4b49      	ldr	r3, [pc, #292]	; (80147bc <tcp_process+0x2bc>)
 8014698:	681a      	ldr	r2, [r3, #0]
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801469e:	4b4c      	ldr	r3, [pc, #304]	; (80147d0 <tcp_process+0x2d0>)
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	89db      	ldrh	r3, [r3, #14]
 80146a4:	b29a      	uxth	r2, r3
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80146b8:	4b41      	ldr	r3, [pc, #260]	; (80147c0 <tcp_process+0x2c0>)
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	1e5a      	subs	r2, r3, #1
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	2204      	movs	r2, #4
 80146c6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	3304      	adds	r3, #4
 80146d0:	4618      	mov	r0, r3
 80146d2:	f004 faef 	bl	8018cb4 <ip4_route>
 80146d6:	4601      	mov	r1, r0
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	3304      	adds	r3, #4
 80146dc:	461a      	mov	r2, r3
 80146de:	4620      	mov	r0, r4
 80146e0:	f7ff f88e 	bl	8013800 <tcp_eff_send_mss_netif>
 80146e4:	4603      	mov	r3, r0
 80146e6:	461a      	mov	r2, r3
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146f0:	009a      	lsls	r2, r3, #2
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146f6:	005b      	lsls	r3, r3, #1
 80146f8:	f241 111c 	movw	r1, #4380	; 0x111c
 80146fc:	428b      	cmp	r3, r1
 80146fe:	bf38      	it	cc
 8014700:	460b      	movcc	r3, r1
 8014702:	429a      	cmp	r2, r3
 8014704:	d204      	bcs.n	8014710 <tcp_process+0x210>
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801470a:	009b      	lsls	r3, r3, #2
 801470c:	b29b      	uxth	r3, r3
 801470e:	e00d      	b.n	801472c <tcp_process+0x22c>
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014714:	005b      	lsls	r3, r3, #1
 8014716:	f241 121c 	movw	r2, #4380	; 0x111c
 801471a:	4293      	cmp	r3, r2
 801471c:	d904      	bls.n	8014728 <tcp_process+0x228>
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014722:	005b      	lsls	r3, r3, #1
 8014724:	b29b      	uxth	r3, r3
 8014726:	e001      	b.n	801472c <tcp_process+0x22c>
 8014728:	f241 131c 	movw	r3, #4380	; 0x111c
 801472c:	687a      	ldr	r2, [r7, #4]
 801472e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014738:	2b00      	cmp	r3, #0
 801473a:	d106      	bne.n	801474a <tcp_process+0x24a>
 801473c:	4b1b      	ldr	r3, [pc, #108]	; (80147ac <tcp_process+0x2ac>)
 801473e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8014742:	4924      	ldr	r1, [pc, #144]	; (80147d4 <tcp_process+0x2d4>)
 8014744:	481b      	ldr	r0, [pc, #108]	; (80147b4 <tcp_process+0x2b4>)
 8014746:	f006 f8af 	bl	801a8a8 <iprintf>
        --pcb->snd_queuelen;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014750:	3b01      	subs	r3, #1
 8014752:	b29a      	uxth	r2, r3
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801475e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014760:	69fb      	ldr	r3, [r7, #28]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d111      	bne.n	801478a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801476a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801476c:	69fb      	ldr	r3, [r7, #28]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d106      	bne.n	8014780 <tcp_process+0x280>
 8014772:	4b0e      	ldr	r3, [pc, #56]	; (80147ac <tcp_process+0x2ac>)
 8014774:	f44f 725d 	mov.w	r2, #884	; 0x374
 8014778:	4917      	ldr	r1, [pc, #92]	; (80147d8 <tcp_process+0x2d8>)
 801477a:	480e      	ldr	r0, [pc, #56]	; (80147b4 <tcp_process+0x2b4>)
 801477c:	f006 f894 	bl	801a8a8 <iprintf>
          pcb->unsent = rseg->next;
 8014780:	69fb      	ldr	r3, [r7, #28]
 8014782:	681a      	ldr	r2, [r3, #0]
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	66da      	str	r2, [r3, #108]	; 0x6c
 8014788:	e003      	b.n	8014792 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801478a:	69fb      	ldr	r3, [r7, #28]
 801478c:	681a      	ldr	r2, [r3, #0]
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8014792:	69f8      	ldr	r0, [r7, #28]
 8014794:	f7fe fd3d 	bl	8013212 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801479c:	2b00      	cmp	r3, #0
 801479e:	d11d      	bne.n	80147dc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80147a6:	861a      	strh	r2, [r3, #48]	; 0x30
 80147a8:	e01f      	b.n	80147ea <tcp_process+0x2ea>
 80147aa:	bf00      	nop
 80147ac:	0801d120 	.word	0x0801d120
 80147b0:	0801d358 	.word	0x0801d358
 80147b4:	0801d16c 	.word	0x0801d16c
 80147b8:	200031a8 	.word	0x200031a8
 80147bc:	200031a0 	.word	0x200031a0
 80147c0:	2000319c 	.word	0x2000319c
 80147c4:	0801d374 	.word	0x0801d374
 80147c8:	200031a9 	.word	0x200031a9
 80147cc:	2000dc84 	.word	0x2000dc84
 80147d0:	2000318c 	.word	0x2000318c
 80147d4:	0801d394 	.word	0x0801d394
 80147d8:	0801d3ac 	.word	0x0801d3ac
        } else {
          pcb->rtime = 0;
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	2200      	movs	r2, #0
 80147e0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	2200      	movs	r2, #0
 80147e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d00a      	beq.n	801480a <tcp_process+0x30a>
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80147fa:	687a      	ldr	r2, [r7, #4]
 80147fc:	6910      	ldr	r0, [r2, #16]
 80147fe:	2200      	movs	r2, #0
 8014800:	6879      	ldr	r1, [r7, #4]
 8014802:	4798      	blx	r3
 8014804:	4603      	mov	r3, r0
 8014806:	76bb      	strb	r3, [r7, #26]
 8014808:	e001      	b.n	801480e <tcp_process+0x30e>
 801480a:	2300      	movs	r3, #0
 801480c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801480e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014812:	f113 0f0d 	cmn.w	r3, #13
 8014816:	d102      	bne.n	801481e <tcp_process+0x31e>
          return ERR_ABRT;
 8014818:	f06f 030c 	mvn.w	r3, #12
 801481c:	e250      	b.n	8014cc0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	8b5b      	ldrh	r3, [r3, #26]
 8014822:	f043 0302 	orr.w	r3, r3, #2
 8014826:	b29a      	uxth	r2, r3
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801482c:	e23a      	b.n	8014ca4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801482e:	4b9d      	ldr	r3, [pc, #628]	; (8014aa4 <tcp_process+0x5a4>)
 8014830:	781b      	ldrb	r3, [r3, #0]
 8014832:	f003 0310 	and.w	r3, r3, #16
 8014836:	2b00      	cmp	r3, #0
 8014838:	f000 8234 	beq.w	8014ca4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801483c:	4b9a      	ldr	r3, [pc, #616]	; (8014aa8 <tcp_process+0x5a8>)
 801483e:	6819      	ldr	r1, [r3, #0]
 8014840:	4b9a      	ldr	r3, [pc, #616]	; (8014aac <tcp_process+0x5ac>)
 8014842:	881b      	ldrh	r3, [r3, #0]
 8014844:	461a      	mov	r2, r3
 8014846:	4b9a      	ldr	r3, [pc, #616]	; (8014ab0 <tcp_process+0x5b0>)
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801484c:	4b99      	ldr	r3, [pc, #612]	; (8014ab4 <tcp_process+0x5b4>)
 801484e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014850:	885b      	ldrh	r3, [r3, #2]
 8014852:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014854:	4a97      	ldr	r2, [pc, #604]	; (8014ab4 <tcp_process+0x5b4>)
 8014856:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014858:	8812      	ldrh	r2, [r2, #0]
 801485a:	b292      	uxth	r2, r2
 801485c:	9202      	str	r2, [sp, #8]
 801485e:	9301      	str	r3, [sp, #4]
 8014860:	4b95      	ldr	r3, [pc, #596]	; (8014ab8 <tcp_process+0x5b8>)
 8014862:	9300      	str	r3, [sp, #0]
 8014864:	4b95      	ldr	r3, [pc, #596]	; (8014abc <tcp_process+0x5bc>)
 8014866:	4602      	mov	r2, r0
 8014868:	6878      	ldr	r0, [r7, #4]
 801486a:	f002 fc83 	bl	8017174 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014874:	2b05      	cmp	r3, #5
 8014876:	f200 8215 	bhi.w	8014ca4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	2200      	movs	r2, #0
 801487e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8014880:	6878      	ldr	r0, [r7, #4]
 8014882:	f002 fa4d 	bl	8016d20 <tcp_rexmit_rto>
      break;
 8014886:	e20d      	b.n	8014ca4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8014888:	4b86      	ldr	r3, [pc, #536]	; (8014aa4 <tcp_process+0x5a4>)
 801488a:	781b      	ldrb	r3, [r3, #0]
 801488c:	f003 0310 	and.w	r3, r3, #16
 8014890:	2b00      	cmp	r3, #0
 8014892:	f000 80a1 	beq.w	80149d8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014896:	4b84      	ldr	r3, [pc, #528]	; (8014aa8 <tcp_process+0x5a8>)
 8014898:	681a      	ldr	r2, [r3, #0]
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801489e:	1ad3      	subs	r3, r2, r3
 80148a0:	3b01      	subs	r3, #1
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	db7e      	blt.n	80149a4 <tcp_process+0x4a4>
 80148a6:	4b80      	ldr	r3, [pc, #512]	; (8014aa8 <tcp_process+0x5a8>)
 80148a8:	681a      	ldr	r2, [r3, #0]
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80148ae:	1ad3      	subs	r3, r2, r3
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	dc77      	bgt.n	80149a4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	2204      	movs	r2, #4
 80148b8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d102      	bne.n	80148c8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80148c2:	23fa      	movs	r3, #250	; 0xfa
 80148c4:	76bb      	strb	r3, [r7, #26]
 80148c6:	e01d      	b.n	8014904 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80148cc:	699b      	ldr	r3, [r3, #24]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d106      	bne.n	80148e0 <tcp_process+0x3e0>
 80148d2:	4b7b      	ldr	r3, [pc, #492]	; (8014ac0 <tcp_process+0x5c0>)
 80148d4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80148d8:	497a      	ldr	r1, [pc, #488]	; (8014ac4 <tcp_process+0x5c4>)
 80148da:	487b      	ldr	r0, [pc, #492]	; (8014ac8 <tcp_process+0x5c8>)
 80148dc:	f005 ffe4 	bl	801a8a8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80148e4:	699b      	ldr	r3, [r3, #24]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d00a      	beq.n	8014900 <tcp_process+0x400>
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80148ee:	699b      	ldr	r3, [r3, #24]
 80148f0:	687a      	ldr	r2, [r7, #4]
 80148f2:	6910      	ldr	r0, [r2, #16]
 80148f4:	2200      	movs	r2, #0
 80148f6:	6879      	ldr	r1, [r7, #4]
 80148f8:	4798      	blx	r3
 80148fa:	4603      	mov	r3, r0
 80148fc:	76bb      	strb	r3, [r7, #26]
 80148fe:	e001      	b.n	8014904 <tcp_process+0x404>
 8014900:	23f0      	movs	r3, #240	; 0xf0
 8014902:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014904:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d00a      	beq.n	8014922 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801490c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014910:	f113 0f0d 	cmn.w	r3, #13
 8014914:	d002      	beq.n	801491c <tcp_process+0x41c>
              tcp_abort(pcb);
 8014916:	6878      	ldr	r0, [r7, #4]
 8014918:	f7fd ff90 	bl	801283c <tcp_abort>
            }
            return ERR_ABRT;
 801491c:	f06f 030c 	mvn.w	r3, #12
 8014920:	e1ce      	b.n	8014cc0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014922:	6878      	ldr	r0, [r7, #4]
 8014924:	f000 fae0 	bl	8014ee8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8014928:	4b68      	ldr	r3, [pc, #416]	; (8014acc <tcp_process+0x5cc>)
 801492a:	881b      	ldrh	r3, [r3, #0]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d005      	beq.n	801493c <tcp_process+0x43c>
            recv_acked--;
 8014930:	4b66      	ldr	r3, [pc, #408]	; (8014acc <tcp_process+0x5cc>)
 8014932:	881b      	ldrh	r3, [r3, #0]
 8014934:	3b01      	subs	r3, #1
 8014936:	b29a      	uxth	r2, r3
 8014938:	4b64      	ldr	r3, [pc, #400]	; (8014acc <tcp_process+0x5cc>)
 801493a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014940:	009a      	lsls	r2, r3, #2
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014946:	005b      	lsls	r3, r3, #1
 8014948:	f241 111c 	movw	r1, #4380	; 0x111c
 801494c:	428b      	cmp	r3, r1
 801494e:	bf38      	it	cc
 8014950:	460b      	movcc	r3, r1
 8014952:	429a      	cmp	r2, r3
 8014954:	d204      	bcs.n	8014960 <tcp_process+0x460>
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801495a:	009b      	lsls	r3, r3, #2
 801495c:	b29b      	uxth	r3, r3
 801495e:	e00d      	b.n	801497c <tcp_process+0x47c>
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014964:	005b      	lsls	r3, r3, #1
 8014966:	f241 121c 	movw	r2, #4380	; 0x111c
 801496a:	4293      	cmp	r3, r2
 801496c:	d904      	bls.n	8014978 <tcp_process+0x478>
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014972:	005b      	lsls	r3, r3, #1
 8014974:	b29b      	uxth	r3, r3
 8014976:	e001      	b.n	801497c <tcp_process+0x47c>
 8014978:	f241 131c 	movw	r3, #4380	; 0x111c
 801497c:	687a      	ldr	r2, [r7, #4]
 801497e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8014982:	4b53      	ldr	r3, [pc, #332]	; (8014ad0 <tcp_process+0x5d0>)
 8014984:	781b      	ldrb	r3, [r3, #0]
 8014986:	f003 0320 	and.w	r3, r3, #32
 801498a:	2b00      	cmp	r3, #0
 801498c:	d037      	beq.n	80149fe <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	8b5b      	ldrh	r3, [r3, #26]
 8014992:	f043 0302 	orr.w	r3, r3, #2
 8014996:	b29a      	uxth	r2, r3
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	2207      	movs	r2, #7
 80149a0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80149a2:	e02c      	b.n	80149fe <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80149a4:	4b40      	ldr	r3, [pc, #256]	; (8014aa8 <tcp_process+0x5a8>)
 80149a6:	6819      	ldr	r1, [r3, #0]
 80149a8:	4b40      	ldr	r3, [pc, #256]	; (8014aac <tcp_process+0x5ac>)
 80149aa:	881b      	ldrh	r3, [r3, #0]
 80149ac:	461a      	mov	r2, r3
 80149ae:	4b40      	ldr	r3, [pc, #256]	; (8014ab0 <tcp_process+0x5b0>)
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80149b4:	4b3f      	ldr	r3, [pc, #252]	; (8014ab4 <tcp_process+0x5b4>)
 80149b6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80149b8:	885b      	ldrh	r3, [r3, #2]
 80149ba:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80149bc:	4a3d      	ldr	r2, [pc, #244]	; (8014ab4 <tcp_process+0x5b4>)
 80149be:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80149c0:	8812      	ldrh	r2, [r2, #0]
 80149c2:	b292      	uxth	r2, r2
 80149c4:	9202      	str	r2, [sp, #8]
 80149c6:	9301      	str	r3, [sp, #4]
 80149c8:	4b3b      	ldr	r3, [pc, #236]	; (8014ab8 <tcp_process+0x5b8>)
 80149ca:	9300      	str	r3, [sp, #0]
 80149cc:	4b3b      	ldr	r3, [pc, #236]	; (8014abc <tcp_process+0x5bc>)
 80149ce:	4602      	mov	r2, r0
 80149d0:	6878      	ldr	r0, [r7, #4]
 80149d2:	f002 fbcf 	bl	8017174 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80149d6:	e167      	b.n	8014ca8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80149d8:	4b32      	ldr	r3, [pc, #200]	; (8014aa4 <tcp_process+0x5a4>)
 80149da:	781b      	ldrb	r3, [r3, #0]
 80149dc:	f003 0302 	and.w	r3, r3, #2
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	f000 8161 	beq.w	8014ca8 <tcp_process+0x7a8>
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149ea:	1e5a      	subs	r2, r3, #1
 80149ec:	4b30      	ldr	r3, [pc, #192]	; (8014ab0 <tcp_process+0x5b0>)
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	429a      	cmp	r2, r3
 80149f2:	f040 8159 	bne.w	8014ca8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80149f6:	6878      	ldr	r0, [r7, #4]
 80149f8:	f002 f9b4 	bl	8016d64 <tcp_rexmit>
      break;
 80149fc:	e154      	b.n	8014ca8 <tcp_process+0x7a8>
 80149fe:	e153      	b.n	8014ca8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014a00:	6878      	ldr	r0, [r7, #4]
 8014a02:	f000 fa71 	bl	8014ee8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8014a06:	4b32      	ldr	r3, [pc, #200]	; (8014ad0 <tcp_process+0x5d0>)
 8014a08:	781b      	ldrb	r3, [r3, #0]
 8014a0a:	f003 0320 	and.w	r3, r3, #32
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	f000 814c 	beq.w	8014cac <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	8b5b      	ldrh	r3, [r3, #26]
 8014a18:	f043 0302 	orr.w	r3, r3, #2
 8014a1c:	b29a      	uxth	r2, r3
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	2207      	movs	r2, #7
 8014a26:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014a28:	e140      	b.n	8014cac <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8014a2a:	6878      	ldr	r0, [r7, #4]
 8014a2c:	f000 fa5c 	bl	8014ee8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014a30:	4b27      	ldr	r3, [pc, #156]	; (8014ad0 <tcp_process+0x5d0>)
 8014a32:	781b      	ldrb	r3, [r3, #0]
 8014a34:	f003 0320 	and.w	r3, r3, #32
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d071      	beq.n	8014b20 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014a3c:	4b19      	ldr	r3, [pc, #100]	; (8014aa4 <tcp_process+0x5a4>)
 8014a3e:	781b      	ldrb	r3, [r3, #0]
 8014a40:	f003 0310 	and.w	r3, r3, #16
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d060      	beq.n	8014b0a <tcp_process+0x60a>
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014a4c:	4b16      	ldr	r3, [pc, #88]	; (8014aa8 <tcp_process+0x5a8>)
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	429a      	cmp	r2, r3
 8014a52:	d15a      	bne.n	8014b0a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d156      	bne.n	8014b0a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	8b5b      	ldrh	r3, [r3, #26]
 8014a60:	f043 0302 	orr.w	r3, r3, #2
 8014a64:	b29a      	uxth	r2, r3
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8014a6a:	6878      	ldr	r0, [r7, #4]
 8014a6c:	f7fe fdbe 	bl	80135ec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014a70:	4b18      	ldr	r3, [pc, #96]	; (8014ad4 <tcp_process+0x5d4>)
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	687a      	ldr	r2, [r7, #4]
 8014a76:	429a      	cmp	r2, r3
 8014a78:	d105      	bne.n	8014a86 <tcp_process+0x586>
 8014a7a:	4b16      	ldr	r3, [pc, #88]	; (8014ad4 <tcp_process+0x5d4>)
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	68db      	ldr	r3, [r3, #12]
 8014a80:	4a14      	ldr	r2, [pc, #80]	; (8014ad4 <tcp_process+0x5d4>)
 8014a82:	6013      	str	r3, [r2, #0]
 8014a84:	e02e      	b.n	8014ae4 <tcp_process+0x5e4>
 8014a86:	4b13      	ldr	r3, [pc, #76]	; (8014ad4 <tcp_process+0x5d4>)
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	617b      	str	r3, [r7, #20]
 8014a8c:	e027      	b.n	8014ade <tcp_process+0x5de>
 8014a8e:	697b      	ldr	r3, [r7, #20]
 8014a90:	68db      	ldr	r3, [r3, #12]
 8014a92:	687a      	ldr	r2, [r7, #4]
 8014a94:	429a      	cmp	r2, r3
 8014a96:	d11f      	bne.n	8014ad8 <tcp_process+0x5d8>
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	68da      	ldr	r2, [r3, #12]
 8014a9c:	697b      	ldr	r3, [r7, #20]
 8014a9e:	60da      	str	r2, [r3, #12]
 8014aa0:	e020      	b.n	8014ae4 <tcp_process+0x5e4>
 8014aa2:	bf00      	nop
 8014aa4:	200031a8 	.word	0x200031a8
 8014aa8:	200031a0 	.word	0x200031a0
 8014aac:	200031a6 	.word	0x200031a6
 8014ab0:	2000319c 	.word	0x2000319c
 8014ab4:	2000318c 	.word	0x2000318c
 8014ab8:	2000a74c 	.word	0x2000a74c
 8014abc:	2000a750 	.word	0x2000a750
 8014ac0:	0801d120 	.word	0x0801d120
 8014ac4:	0801d3c0 	.word	0x0801d3c0
 8014ac8:	0801d16c 	.word	0x0801d16c
 8014acc:	200031a4 	.word	0x200031a4
 8014ad0:	200031a9 	.word	0x200031a9
 8014ad4:	2000dc80 	.word	0x2000dc80
 8014ad8:	697b      	ldr	r3, [r7, #20]
 8014ada:	68db      	ldr	r3, [r3, #12]
 8014adc:	617b      	str	r3, [r7, #20]
 8014ade:	697b      	ldr	r3, [r7, #20]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d1d4      	bne.n	8014a8e <tcp_process+0x58e>
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	60da      	str	r2, [r3, #12]
 8014aea:	4b77      	ldr	r3, [pc, #476]	; (8014cc8 <tcp_process+0x7c8>)
 8014aec:	2201      	movs	r2, #1
 8014aee:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	220a      	movs	r2, #10
 8014af4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8014af6:	4b75      	ldr	r3, [pc, #468]	; (8014ccc <tcp_process+0x7cc>)
 8014af8:	681a      	ldr	r2, [r3, #0]
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	60da      	str	r2, [r3, #12]
 8014afe:	4a73      	ldr	r2, [pc, #460]	; (8014ccc <tcp_process+0x7cc>)
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	6013      	str	r3, [r2, #0]
 8014b04:	f002 fcf8 	bl	80174f8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8014b08:	e0d2      	b.n	8014cb0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	8b5b      	ldrh	r3, [r3, #26]
 8014b0e:	f043 0302 	orr.w	r3, r3, #2
 8014b12:	b29a      	uxth	r2, r3
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	2208      	movs	r2, #8
 8014b1c:	751a      	strb	r2, [r3, #20]
      break;
 8014b1e:	e0c7      	b.n	8014cb0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014b20:	4b6b      	ldr	r3, [pc, #428]	; (8014cd0 <tcp_process+0x7d0>)
 8014b22:	781b      	ldrb	r3, [r3, #0]
 8014b24:	f003 0310 	and.w	r3, r3, #16
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	f000 80c1 	beq.w	8014cb0 <tcp_process+0x7b0>
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014b32:	4b68      	ldr	r3, [pc, #416]	; (8014cd4 <tcp_process+0x7d4>)
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	429a      	cmp	r2, r3
 8014b38:	f040 80ba 	bne.w	8014cb0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	f040 80b5 	bne.w	8014cb0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	2206      	movs	r2, #6
 8014b4a:	751a      	strb	r2, [r3, #20]
      break;
 8014b4c:	e0b0      	b.n	8014cb0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8014b4e:	6878      	ldr	r0, [r7, #4]
 8014b50:	f000 f9ca 	bl	8014ee8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014b54:	4b60      	ldr	r3, [pc, #384]	; (8014cd8 <tcp_process+0x7d8>)
 8014b56:	781b      	ldrb	r3, [r3, #0]
 8014b58:	f003 0320 	and.w	r3, r3, #32
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	f000 80a9 	beq.w	8014cb4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	8b5b      	ldrh	r3, [r3, #26]
 8014b66:	f043 0302 	orr.w	r3, r3, #2
 8014b6a:	b29a      	uxth	r2, r3
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014b70:	6878      	ldr	r0, [r7, #4]
 8014b72:	f7fe fd3b 	bl	80135ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014b76:	4b59      	ldr	r3, [pc, #356]	; (8014cdc <tcp_process+0x7dc>)
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	687a      	ldr	r2, [r7, #4]
 8014b7c:	429a      	cmp	r2, r3
 8014b7e:	d105      	bne.n	8014b8c <tcp_process+0x68c>
 8014b80:	4b56      	ldr	r3, [pc, #344]	; (8014cdc <tcp_process+0x7dc>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	68db      	ldr	r3, [r3, #12]
 8014b86:	4a55      	ldr	r2, [pc, #340]	; (8014cdc <tcp_process+0x7dc>)
 8014b88:	6013      	str	r3, [r2, #0]
 8014b8a:	e013      	b.n	8014bb4 <tcp_process+0x6b4>
 8014b8c:	4b53      	ldr	r3, [pc, #332]	; (8014cdc <tcp_process+0x7dc>)
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	613b      	str	r3, [r7, #16]
 8014b92:	e00c      	b.n	8014bae <tcp_process+0x6ae>
 8014b94:	693b      	ldr	r3, [r7, #16]
 8014b96:	68db      	ldr	r3, [r3, #12]
 8014b98:	687a      	ldr	r2, [r7, #4]
 8014b9a:	429a      	cmp	r2, r3
 8014b9c:	d104      	bne.n	8014ba8 <tcp_process+0x6a8>
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	68da      	ldr	r2, [r3, #12]
 8014ba2:	693b      	ldr	r3, [r7, #16]
 8014ba4:	60da      	str	r2, [r3, #12]
 8014ba6:	e005      	b.n	8014bb4 <tcp_process+0x6b4>
 8014ba8:	693b      	ldr	r3, [r7, #16]
 8014baa:	68db      	ldr	r3, [r3, #12]
 8014bac:	613b      	str	r3, [r7, #16]
 8014bae:	693b      	ldr	r3, [r7, #16]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d1ef      	bne.n	8014b94 <tcp_process+0x694>
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	60da      	str	r2, [r3, #12]
 8014bba:	4b43      	ldr	r3, [pc, #268]	; (8014cc8 <tcp_process+0x7c8>)
 8014bbc:	2201      	movs	r2, #1
 8014bbe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	220a      	movs	r2, #10
 8014bc4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014bc6:	4b41      	ldr	r3, [pc, #260]	; (8014ccc <tcp_process+0x7cc>)
 8014bc8:	681a      	ldr	r2, [r3, #0]
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	60da      	str	r2, [r3, #12]
 8014bce:	4a3f      	ldr	r2, [pc, #252]	; (8014ccc <tcp_process+0x7cc>)
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	6013      	str	r3, [r2, #0]
 8014bd4:	f002 fc90 	bl	80174f8 <tcp_timer_needed>
      }
      break;
 8014bd8:	e06c      	b.n	8014cb4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8014bda:	6878      	ldr	r0, [r7, #4]
 8014bdc:	f000 f984 	bl	8014ee8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014be0:	4b3b      	ldr	r3, [pc, #236]	; (8014cd0 <tcp_process+0x7d0>)
 8014be2:	781b      	ldrb	r3, [r3, #0]
 8014be4:	f003 0310 	and.w	r3, r3, #16
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d065      	beq.n	8014cb8 <tcp_process+0x7b8>
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014bf0:	4b38      	ldr	r3, [pc, #224]	; (8014cd4 <tcp_process+0x7d4>)
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	429a      	cmp	r2, r3
 8014bf6:	d15f      	bne.n	8014cb8 <tcp_process+0x7b8>
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d15b      	bne.n	8014cb8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014c00:	6878      	ldr	r0, [r7, #4]
 8014c02:	f7fe fcf3 	bl	80135ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014c06:	4b35      	ldr	r3, [pc, #212]	; (8014cdc <tcp_process+0x7dc>)
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	687a      	ldr	r2, [r7, #4]
 8014c0c:	429a      	cmp	r2, r3
 8014c0e:	d105      	bne.n	8014c1c <tcp_process+0x71c>
 8014c10:	4b32      	ldr	r3, [pc, #200]	; (8014cdc <tcp_process+0x7dc>)
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	68db      	ldr	r3, [r3, #12]
 8014c16:	4a31      	ldr	r2, [pc, #196]	; (8014cdc <tcp_process+0x7dc>)
 8014c18:	6013      	str	r3, [r2, #0]
 8014c1a:	e013      	b.n	8014c44 <tcp_process+0x744>
 8014c1c:	4b2f      	ldr	r3, [pc, #188]	; (8014cdc <tcp_process+0x7dc>)
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	60fb      	str	r3, [r7, #12]
 8014c22:	e00c      	b.n	8014c3e <tcp_process+0x73e>
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	68db      	ldr	r3, [r3, #12]
 8014c28:	687a      	ldr	r2, [r7, #4]
 8014c2a:	429a      	cmp	r2, r3
 8014c2c:	d104      	bne.n	8014c38 <tcp_process+0x738>
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	68da      	ldr	r2, [r3, #12]
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	60da      	str	r2, [r3, #12]
 8014c36:	e005      	b.n	8014c44 <tcp_process+0x744>
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	68db      	ldr	r3, [r3, #12]
 8014c3c:	60fb      	str	r3, [r7, #12]
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d1ef      	bne.n	8014c24 <tcp_process+0x724>
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	2200      	movs	r2, #0
 8014c48:	60da      	str	r2, [r3, #12]
 8014c4a:	4b1f      	ldr	r3, [pc, #124]	; (8014cc8 <tcp_process+0x7c8>)
 8014c4c:	2201      	movs	r2, #1
 8014c4e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	220a      	movs	r2, #10
 8014c54:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014c56:	4b1d      	ldr	r3, [pc, #116]	; (8014ccc <tcp_process+0x7cc>)
 8014c58:	681a      	ldr	r2, [r3, #0]
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	60da      	str	r2, [r3, #12]
 8014c5e:	4a1b      	ldr	r2, [pc, #108]	; (8014ccc <tcp_process+0x7cc>)
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	6013      	str	r3, [r2, #0]
 8014c64:	f002 fc48 	bl	80174f8 <tcp_timer_needed>
      }
      break;
 8014c68:	e026      	b.n	8014cb8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8014c6a:	6878      	ldr	r0, [r7, #4]
 8014c6c:	f000 f93c 	bl	8014ee8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014c70:	4b17      	ldr	r3, [pc, #92]	; (8014cd0 <tcp_process+0x7d0>)
 8014c72:	781b      	ldrb	r3, [r3, #0]
 8014c74:	f003 0310 	and.w	r3, r3, #16
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d01f      	beq.n	8014cbc <tcp_process+0x7bc>
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014c80:	4b14      	ldr	r3, [pc, #80]	; (8014cd4 <tcp_process+0x7d4>)
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	429a      	cmp	r2, r3
 8014c86:	d119      	bne.n	8014cbc <tcp_process+0x7bc>
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d115      	bne.n	8014cbc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014c90:	4b11      	ldr	r3, [pc, #68]	; (8014cd8 <tcp_process+0x7d8>)
 8014c92:	781b      	ldrb	r3, [r3, #0]
 8014c94:	f043 0310 	orr.w	r3, r3, #16
 8014c98:	b2da      	uxtb	r2, r3
 8014c9a:	4b0f      	ldr	r3, [pc, #60]	; (8014cd8 <tcp_process+0x7d8>)
 8014c9c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8014c9e:	e00d      	b.n	8014cbc <tcp_process+0x7bc>
    default:
      break;
 8014ca0:	bf00      	nop
 8014ca2:	e00c      	b.n	8014cbe <tcp_process+0x7be>
      break;
 8014ca4:	bf00      	nop
 8014ca6:	e00a      	b.n	8014cbe <tcp_process+0x7be>
      break;
 8014ca8:	bf00      	nop
 8014caa:	e008      	b.n	8014cbe <tcp_process+0x7be>
      break;
 8014cac:	bf00      	nop
 8014cae:	e006      	b.n	8014cbe <tcp_process+0x7be>
      break;
 8014cb0:	bf00      	nop
 8014cb2:	e004      	b.n	8014cbe <tcp_process+0x7be>
      break;
 8014cb4:	bf00      	nop
 8014cb6:	e002      	b.n	8014cbe <tcp_process+0x7be>
      break;
 8014cb8:	bf00      	nop
 8014cba:	e000      	b.n	8014cbe <tcp_process+0x7be>
      break;
 8014cbc:	bf00      	nop
  }
  return ERR_OK;
 8014cbe:	2300      	movs	r3, #0
}
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	3724      	adds	r7, #36	; 0x24
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	bd90      	pop	{r4, r7, pc}
 8014cc8:	2000dc7c 	.word	0x2000dc7c
 8014ccc:	2000dc90 	.word	0x2000dc90
 8014cd0:	200031a8 	.word	0x200031a8
 8014cd4:	200031a0 	.word	0x200031a0
 8014cd8:	200031a9 	.word	0x200031a9
 8014cdc:	2000dc80 	.word	0x2000dc80

08014ce0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014ce0:	b590      	push	{r4, r7, lr}
 8014ce2:	b085      	sub	sp, #20
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
 8014ce8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d106      	bne.n	8014cfe <tcp_oos_insert_segment+0x1e>
 8014cf0:	4b3b      	ldr	r3, [pc, #236]	; (8014de0 <tcp_oos_insert_segment+0x100>)
 8014cf2:	f240 421f 	movw	r2, #1055	; 0x41f
 8014cf6:	493b      	ldr	r1, [pc, #236]	; (8014de4 <tcp_oos_insert_segment+0x104>)
 8014cf8:	483b      	ldr	r0, [pc, #236]	; (8014de8 <tcp_oos_insert_segment+0x108>)
 8014cfa:	f005 fdd5 	bl	801a8a8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	68db      	ldr	r3, [r3, #12]
 8014d02:	899b      	ldrh	r3, [r3, #12]
 8014d04:	b29b      	uxth	r3, r3
 8014d06:	4618      	mov	r0, r3
 8014d08:	f7fb fd5d 	bl	80107c6 <lwip_htons>
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	b2db      	uxtb	r3, r3
 8014d10:	f003 0301 	and.w	r3, r3, #1
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d028      	beq.n	8014d6a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014d18:	6838      	ldr	r0, [r7, #0]
 8014d1a:	f7fe fa65 	bl	80131e8 <tcp_segs_free>
    next = NULL;
 8014d1e:	2300      	movs	r3, #0
 8014d20:	603b      	str	r3, [r7, #0]
 8014d22:	e056      	b.n	8014dd2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014d24:	683b      	ldr	r3, [r7, #0]
 8014d26:	68db      	ldr	r3, [r3, #12]
 8014d28:	899b      	ldrh	r3, [r3, #12]
 8014d2a:	b29b      	uxth	r3, r3
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	f7fb fd4a 	bl	80107c6 <lwip_htons>
 8014d32:	4603      	mov	r3, r0
 8014d34:	b2db      	uxtb	r3, r3
 8014d36:	f003 0301 	and.w	r3, r3, #1
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d00d      	beq.n	8014d5a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	68db      	ldr	r3, [r3, #12]
 8014d42:	899b      	ldrh	r3, [r3, #12]
 8014d44:	b29c      	uxth	r4, r3
 8014d46:	2001      	movs	r0, #1
 8014d48:	f7fb fd3d 	bl	80107c6 <lwip_htons>
 8014d4c:	4603      	mov	r3, r0
 8014d4e:	461a      	mov	r2, r3
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	68db      	ldr	r3, [r3, #12]
 8014d54:	4322      	orrs	r2, r4
 8014d56:	b292      	uxth	r2, r2
 8014d58:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014d5a:	683b      	ldr	r3, [r7, #0]
 8014d5c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8014d5e:	683b      	ldr	r3, [r7, #0]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014d64:	68f8      	ldr	r0, [r7, #12]
 8014d66:	f7fe fa54 	bl	8013212 <tcp_seg_free>
    while (next &&
 8014d6a:	683b      	ldr	r3, [r7, #0]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d00e      	beq.n	8014d8e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	891b      	ldrh	r3, [r3, #8]
 8014d74:	461a      	mov	r2, r3
 8014d76:	4b1d      	ldr	r3, [pc, #116]	; (8014dec <tcp_oos_insert_segment+0x10c>)
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	441a      	add	r2, r3
 8014d7c:	683b      	ldr	r3, [r7, #0]
 8014d7e:	68db      	ldr	r3, [r3, #12]
 8014d80:	685b      	ldr	r3, [r3, #4]
 8014d82:	6839      	ldr	r1, [r7, #0]
 8014d84:	8909      	ldrh	r1, [r1, #8]
 8014d86:	440b      	add	r3, r1
 8014d88:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	daca      	bge.n	8014d24 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014d8e:	683b      	ldr	r3, [r7, #0]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d01e      	beq.n	8014dd2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	891b      	ldrh	r3, [r3, #8]
 8014d98:	461a      	mov	r2, r3
 8014d9a:	4b14      	ldr	r3, [pc, #80]	; (8014dec <tcp_oos_insert_segment+0x10c>)
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	441a      	add	r2, r3
 8014da0:	683b      	ldr	r3, [r7, #0]
 8014da2:	68db      	ldr	r3, [r3, #12]
 8014da4:	685b      	ldr	r3, [r3, #4]
 8014da6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	dd12      	ble.n	8014dd2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014dac:	683b      	ldr	r3, [r7, #0]
 8014dae:	68db      	ldr	r3, [r3, #12]
 8014db0:	685b      	ldr	r3, [r3, #4]
 8014db2:	b29a      	uxth	r2, r3
 8014db4:	4b0d      	ldr	r3, [pc, #52]	; (8014dec <tcp_oos_insert_segment+0x10c>)
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	b29b      	uxth	r3, r3
 8014dba:	1ad3      	subs	r3, r2, r3
 8014dbc:	b29a      	uxth	r2, r3
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	685a      	ldr	r2, [r3, #4]
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	891b      	ldrh	r3, [r3, #8]
 8014dca:	4619      	mov	r1, r3
 8014dcc:	4610      	mov	r0, r2
 8014dce:	f7fc fe27 	bl	8011a20 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	683a      	ldr	r2, [r7, #0]
 8014dd6:	601a      	str	r2, [r3, #0]
}
 8014dd8:	bf00      	nop
 8014dda:	3714      	adds	r7, #20
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	bd90      	pop	{r4, r7, pc}
 8014de0:	0801d120 	.word	0x0801d120
 8014de4:	0801d3e0 	.word	0x0801d3e0
 8014de8:	0801d16c 	.word	0x0801d16c
 8014dec:	2000319c 	.word	0x2000319c

08014df0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014df0:	b5b0      	push	{r4, r5, r7, lr}
 8014df2:	b086      	sub	sp, #24
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	60f8      	str	r0, [r7, #12]
 8014df8:	60b9      	str	r1, [r7, #8]
 8014dfa:	607a      	str	r2, [r7, #4]
 8014dfc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014dfe:	e03e      	b.n	8014e7e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014e00:	68bb      	ldr	r3, [r7, #8]
 8014e02:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014e04:	68bb      	ldr	r3, [r7, #8]
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014e0a:	697b      	ldr	r3, [r7, #20]
 8014e0c:	685b      	ldr	r3, [r3, #4]
 8014e0e:	4618      	mov	r0, r3
 8014e10:	f7fd f814 	bl	8011e3c <pbuf_clen>
 8014e14:	4603      	mov	r3, r0
 8014e16:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014e1e:	8a7a      	ldrh	r2, [r7, #18]
 8014e20:	429a      	cmp	r2, r3
 8014e22:	d906      	bls.n	8014e32 <tcp_free_acked_segments+0x42>
 8014e24:	4b2a      	ldr	r3, [pc, #168]	; (8014ed0 <tcp_free_acked_segments+0xe0>)
 8014e26:	f240 4257 	movw	r2, #1111	; 0x457
 8014e2a:	492a      	ldr	r1, [pc, #168]	; (8014ed4 <tcp_free_acked_segments+0xe4>)
 8014e2c:	482a      	ldr	r0, [pc, #168]	; (8014ed8 <tcp_free_acked_segments+0xe8>)
 8014e2e:	f005 fd3b 	bl	801a8a8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8014e38:	8a7b      	ldrh	r3, [r7, #18]
 8014e3a:	1ad3      	subs	r3, r2, r3
 8014e3c:	b29a      	uxth	r2, r3
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014e44:	697b      	ldr	r3, [r7, #20]
 8014e46:	891a      	ldrh	r2, [r3, #8]
 8014e48:	4b24      	ldr	r3, [pc, #144]	; (8014edc <tcp_free_acked_segments+0xec>)
 8014e4a:	881b      	ldrh	r3, [r3, #0]
 8014e4c:	4413      	add	r3, r2
 8014e4e:	b29a      	uxth	r2, r3
 8014e50:	4b22      	ldr	r3, [pc, #136]	; (8014edc <tcp_free_acked_segments+0xec>)
 8014e52:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014e54:	6978      	ldr	r0, [r7, #20]
 8014e56:	f7fe f9dc 	bl	8013212 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d00c      	beq.n	8014e7e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014e64:	68bb      	ldr	r3, [r7, #8]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d109      	bne.n	8014e7e <tcp_free_acked_segments+0x8e>
 8014e6a:	683b      	ldr	r3, [r7, #0]
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d106      	bne.n	8014e7e <tcp_free_acked_segments+0x8e>
 8014e70:	4b17      	ldr	r3, [pc, #92]	; (8014ed0 <tcp_free_acked_segments+0xe0>)
 8014e72:	f240 4261 	movw	r2, #1121	; 0x461
 8014e76:	491a      	ldr	r1, [pc, #104]	; (8014ee0 <tcp_free_acked_segments+0xf0>)
 8014e78:	4817      	ldr	r0, [pc, #92]	; (8014ed8 <tcp_free_acked_segments+0xe8>)
 8014e7a:	f005 fd15 	bl	801a8a8 <iprintf>
  while (seg_list != NULL &&
 8014e7e:	68bb      	ldr	r3, [r7, #8]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d020      	beq.n	8014ec6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014e84:	68bb      	ldr	r3, [r7, #8]
 8014e86:	68db      	ldr	r3, [r3, #12]
 8014e88:	685b      	ldr	r3, [r3, #4]
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	f7fb fcb0 	bl	80107f0 <lwip_htonl>
 8014e90:	4604      	mov	r4, r0
 8014e92:	68bb      	ldr	r3, [r7, #8]
 8014e94:	891b      	ldrh	r3, [r3, #8]
 8014e96:	461d      	mov	r5, r3
 8014e98:	68bb      	ldr	r3, [r7, #8]
 8014e9a:	68db      	ldr	r3, [r3, #12]
 8014e9c:	899b      	ldrh	r3, [r3, #12]
 8014e9e:	b29b      	uxth	r3, r3
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	f7fb fc90 	bl	80107c6 <lwip_htons>
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	b2db      	uxtb	r3, r3
 8014eaa:	f003 0303 	and.w	r3, r3, #3
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d001      	beq.n	8014eb6 <tcp_free_acked_segments+0xc6>
 8014eb2:	2301      	movs	r3, #1
 8014eb4:	e000      	b.n	8014eb8 <tcp_free_acked_segments+0xc8>
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	442b      	add	r3, r5
 8014eba:	18e2      	adds	r2, r4, r3
 8014ebc:	4b09      	ldr	r3, [pc, #36]	; (8014ee4 <tcp_free_acked_segments+0xf4>)
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	dd9c      	ble.n	8014e00 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014ec6:	68bb      	ldr	r3, [r7, #8]
}
 8014ec8:	4618      	mov	r0, r3
 8014eca:	3718      	adds	r7, #24
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bdb0      	pop	{r4, r5, r7, pc}
 8014ed0:	0801d120 	.word	0x0801d120
 8014ed4:	0801d408 	.word	0x0801d408
 8014ed8:	0801d16c 	.word	0x0801d16c
 8014edc:	200031a4 	.word	0x200031a4
 8014ee0:	0801d430 	.word	0x0801d430
 8014ee4:	200031a0 	.word	0x200031a0

08014ee8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014ee8:	b5b0      	push	{r4, r5, r7, lr}
 8014eea:	b094      	sub	sp, #80	; 0x50
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d106      	bne.n	8014f08 <tcp_receive+0x20>
 8014efa:	4ba6      	ldr	r3, [pc, #664]	; (8015194 <tcp_receive+0x2ac>)
 8014efc:	f240 427b 	movw	r2, #1147	; 0x47b
 8014f00:	49a5      	ldr	r1, [pc, #660]	; (8015198 <tcp_receive+0x2b0>)
 8014f02:	48a6      	ldr	r0, [pc, #664]	; (801519c <tcp_receive+0x2b4>)
 8014f04:	f005 fcd0 	bl	801a8a8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	7d1b      	ldrb	r3, [r3, #20]
 8014f0c:	2b03      	cmp	r3, #3
 8014f0e:	d806      	bhi.n	8014f1e <tcp_receive+0x36>
 8014f10:	4ba0      	ldr	r3, [pc, #640]	; (8015194 <tcp_receive+0x2ac>)
 8014f12:	f240 427c 	movw	r2, #1148	; 0x47c
 8014f16:	49a2      	ldr	r1, [pc, #648]	; (80151a0 <tcp_receive+0x2b8>)
 8014f18:	48a0      	ldr	r0, [pc, #640]	; (801519c <tcp_receive+0x2b4>)
 8014f1a:	f005 fcc5 	bl	801a8a8 <iprintf>

  if (flags & TCP_ACK) {
 8014f1e:	4ba1      	ldr	r3, [pc, #644]	; (80151a4 <tcp_receive+0x2bc>)
 8014f20:	781b      	ldrb	r3, [r3, #0]
 8014f22:	f003 0310 	and.w	r3, r3, #16
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	f000 8263 	beq.w	80153f2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014f32:	461a      	mov	r2, r3
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014f38:	4413      	add	r3, r2
 8014f3a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014f40:	4b99      	ldr	r3, [pc, #612]	; (80151a8 <tcp_receive+0x2c0>)
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	1ad3      	subs	r3, r2, r3
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	db1b      	blt.n	8014f82 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014f4e:	4b96      	ldr	r3, [pc, #600]	; (80151a8 <tcp_receive+0x2c0>)
 8014f50:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014f52:	429a      	cmp	r2, r3
 8014f54:	d106      	bne.n	8014f64 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014f5a:	4b94      	ldr	r3, [pc, #592]	; (80151ac <tcp_receive+0x2c4>)
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	1ad3      	subs	r3, r2, r3
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	db0e      	blt.n	8014f82 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014f68:	4b90      	ldr	r3, [pc, #576]	; (80151ac <tcp_receive+0x2c4>)
 8014f6a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014f6c:	429a      	cmp	r2, r3
 8014f6e:	d125      	bne.n	8014fbc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014f70:	4b8f      	ldr	r3, [pc, #572]	; (80151b0 <tcp_receive+0x2c8>)
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	89db      	ldrh	r3, [r3, #14]
 8014f76:	b29a      	uxth	r2, r3
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014f7e:	429a      	cmp	r2, r3
 8014f80:	d91c      	bls.n	8014fbc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014f82:	4b8b      	ldr	r3, [pc, #556]	; (80151b0 <tcp_receive+0x2c8>)
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	89db      	ldrh	r3, [r3, #14]
 8014f88:	b29a      	uxth	r2, r3
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014f9c:	429a      	cmp	r2, r3
 8014f9e:	d205      	bcs.n	8014fac <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014fac:	4b7e      	ldr	r3, [pc, #504]	; (80151a8 <tcp_receive+0x2c0>)
 8014fae:	681a      	ldr	r2, [r3, #0]
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014fb4:	4b7d      	ldr	r3, [pc, #500]	; (80151ac <tcp_receive+0x2c4>)
 8014fb6:	681a      	ldr	r2, [r3, #0]
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014fbc:	4b7b      	ldr	r3, [pc, #492]	; (80151ac <tcp_receive+0x2c4>)
 8014fbe:	681a      	ldr	r2, [r3, #0]
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014fc4:	1ad3      	subs	r3, r2, r3
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	dc58      	bgt.n	801507c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014fca:	4b7a      	ldr	r3, [pc, #488]	; (80151b4 <tcp_receive+0x2cc>)
 8014fcc:	881b      	ldrh	r3, [r3, #0]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d14b      	bne.n	801506a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014fd6:	687a      	ldr	r2, [r7, #4]
 8014fd8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014fdc:	4413      	add	r3, r2
 8014fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014fe0:	429a      	cmp	r2, r3
 8014fe2:	d142      	bne.n	801506a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	db3d      	blt.n	801506a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014ff2:	4b6e      	ldr	r3, [pc, #440]	; (80151ac <tcp_receive+0x2c4>)
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	429a      	cmp	r2, r3
 8014ff8:	d137      	bne.n	801506a <tcp_receive+0x182>
              found_dupack = 1;
 8014ffa:	2301      	movs	r3, #1
 8014ffc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015004:	2bff      	cmp	r3, #255	; 0xff
 8015006:	d007      	beq.n	8015018 <tcp_receive+0x130>
                ++pcb->dupacks;
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801500e:	3301      	adds	r3, #1
 8015010:	b2da      	uxtb	r2, r3
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801501e:	2b03      	cmp	r3, #3
 8015020:	d91b      	bls.n	801505a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801502c:	4413      	add	r3, r2
 801502e:	b29a      	uxth	r2, r3
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015036:	429a      	cmp	r2, r3
 8015038:	d30a      	bcc.n	8015050 <tcp_receive+0x168>
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015044:	4413      	add	r3, r2
 8015046:	b29a      	uxth	r2, r3
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801504e:	e004      	b.n	801505a <tcp_receive+0x172>
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015056:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015060:	2b02      	cmp	r3, #2
 8015062:	d902      	bls.n	801506a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015064:	6878      	ldr	r0, [r7, #4]
 8015066:	f001 fee9 	bl	8016e3c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801506a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801506c:	2b00      	cmp	r3, #0
 801506e:	f040 8160 	bne.w	8015332 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	2200      	movs	r2, #0
 8015076:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801507a:	e15a      	b.n	8015332 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801507c:	4b4b      	ldr	r3, [pc, #300]	; (80151ac <tcp_receive+0x2c4>)
 801507e:	681a      	ldr	r2, [r3, #0]
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015084:	1ad3      	subs	r3, r2, r3
 8015086:	3b01      	subs	r3, #1
 8015088:	2b00      	cmp	r3, #0
 801508a:	f2c0 814d 	blt.w	8015328 <tcp_receive+0x440>
 801508e:	4b47      	ldr	r3, [pc, #284]	; (80151ac <tcp_receive+0x2c4>)
 8015090:	681a      	ldr	r2, [r3, #0]
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015096:	1ad3      	subs	r3, r2, r3
 8015098:	2b00      	cmp	r3, #0
 801509a:	f300 8145 	bgt.w	8015328 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	8b5b      	ldrh	r3, [r3, #26]
 80150a2:	f003 0304 	and.w	r3, r3, #4
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d010      	beq.n	80150cc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	8b5b      	ldrh	r3, [r3, #26]
 80150ae:	f023 0304 	bic.w	r3, r3, #4
 80150b2:	b29a      	uxth	r2, r3
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	2200      	movs	r2, #0
 80150c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	2200      	movs	r2, #0
 80150d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80150da:	10db      	asrs	r3, r3, #3
 80150dc:	b21b      	sxth	r3, r3
 80150de:	b29a      	uxth	r2, r3
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80150e6:	b29b      	uxth	r3, r3
 80150e8:	4413      	add	r3, r2
 80150ea:	b29b      	uxth	r3, r3
 80150ec:	b21a      	sxth	r2, r3
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80150f4:	4b2d      	ldr	r3, [pc, #180]	; (80151ac <tcp_receive+0x2c4>)
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	b29a      	uxth	r2, r3
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80150fe:	b29b      	uxth	r3, r3
 8015100:	1ad3      	subs	r3, r2, r3
 8015102:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	2200      	movs	r2, #0
 8015108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801510c:	4b27      	ldr	r3, [pc, #156]	; (80151ac <tcp_receive+0x2c4>)
 801510e:	681a      	ldr	r2, [r3, #0]
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	7d1b      	ldrb	r3, [r3, #20]
 8015118:	2b03      	cmp	r3, #3
 801511a:	f240 8096 	bls.w	801524a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801512a:	429a      	cmp	r2, r3
 801512c:	d244      	bcs.n	80151b8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	8b5b      	ldrh	r3, [r3, #26]
 8015132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015136:	2b00      	cmp	r3, #0
 8015138:	d001      	beq.n	801513e <tcp_receive+0x256>
 801513a:	2301      	movs	r3, #1
 801513c:	e000      	b.n	8015140 <tcp_receive+0x258>
 801513e:	2302      	movs	r3, #2
 8015140:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015144:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8015148:	b29a      	uxth	r2, r3
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801514e:	fb12 f303 	smulbb	r3, r2, r3
 8015152:	b29b      	uxth	r3, r3
 8015154:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015156:	4293      	cmp	r3, r2
 8015158:	bf28      	it	cs
 801515a:	4613      	movcs	r3, r2
 801515c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015164:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015166:	4413      	add	r3, r2
 8015168:	b29a      	uxth	r2, r3
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015170:	429a      	cmp	r2, r3
 8015172:	d309      	bcc.n	8015188 <tcp_receive+0x2a0>
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801517a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801517c:	4413      	add	r3, r2
 801517e:	b29a      	uxth	r2, r3
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015186:	e060      	b.n	801524a <tcp_receive+0x362>
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801518e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015192:	e05a      	b.n	801524a <tcp_receive+0x362>
 8015194:	0801d120 	.word	0x0801d120
 8015198:	0801d450 	.word	0x0801d450
 801519c:	0801d16c 	.word	0x0801d16c
 80151a0:	0801d46c 	.word	0x0801d46c
 80151a4:	200031a8 	.word	0x200031a8
 80151a8:	2000319c 	.word	0x2000319c
 80151ac:	200031a0 	.word	0x200031a0
 80151b0:	2000318c 	.word	0x2000318c
 80151b4:	200031a6 	.word	0x200031a6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80151be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80151c0:	4413      	add	r3, r2
 80151c2:	b29a      	uxth	r2, r3
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80151ca:	429a      	cmp	r2, r3
 80151cc:	d309      	bcc.n	80151e2 <tcp_receive+0x2fa>
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80151d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80151d6:	4413      	add	r3, r2
 80151d8:	b29a      	uxth	r2, r3
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80151e0:	e004      	b.n	80151ec <tcp_receive+0x304>
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80151e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80151f8:	429a      	cmp	r2, r3
 80151fa:	d326      	bcc.n	801524a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015208:	1ad3      	subs	r3, r2, r3
 801520a:	b29a      	uxth	r2, r3
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801521c:	4413      	add	r3, r2
 801521e:	b29a      	uxth	r2, r3
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015226:	429a      	cmp	r2, r3
 8015228:	d30a      	bcc.n	8015240 <tcp_receive+0x358>
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015234:	4413      	add	r3, r2
 8015236:	b29a      	uxth	r2, r3
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801523e:	e004      	b.n	801524a <tcp_receive+0x362>
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015246:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015252:	4a98      	ldr	r2, [pc, #608]	; (80154b4 <tcp_receive+0x5cc>)
 8015254:	6878      	ldr	r0, [r7, #4]
 8015256:	f7ff fdcb 	bl	8014df0 <tcp_free_acked_segments>
 801525a:	4602      	mov	r2, r0
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015268:	4a93      	ldr	r2, [pc, #588]	; (80154b8 <tcp_receive+0x5d0>)
 801526a:	6878      	ldr	r0, [r7, #4]
 801526c:	f7ff fdc0 	bl	8014df0 <tcp_free_acked_segments>
 8015270:	4602      	mov	r2, r0
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801527a:	2b00      	cmp	r3, #0
 801527c:	d104      	bne.n	8015288 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015284:	861a      	strh	r2, [r3, #48]	; 0x30
 8015286:	e002      	b.n	801528e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	2200      	movs	r2, #0
 801528c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	2200      	movs	r2, #0
 8015292:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015298:	2b00      	cmp	r3, #0
 801529a:	d103      	bne.n	80152a4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	2200      	movs	r2, #0
 80152a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80152aa:	4b84      	ldr	r3, [pc, #528]	; (80154bc <tcp_receive+0x5d4>)
 80152ac:	881b      	ldrh	r3, [r3, #0]
 80152ae:	4413      	add	r3, r2
 80152b0:	b29a      	uxth	r2, r3
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	8b5b      	ldrh	r3, [r3, #26]
 80152bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d035      	beq.n	8015330 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d118      	bne.n	80152fe <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d00c      	beq.n	80152ee <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152dc:	68db      	ldr	r3, [r3, #12]
 80152de:	685b      	ldr	r3, [r3, #4]
 80152e0:	4618      	mov	r0, r3
 80152e2:	f7fb fa85 	bl	80107f0 <lwip_htonl>
 80152e6:	4603      	mov	r3, r0
 80152e8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	dc20      	bgt.n	8015330 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	8b5b      	ldrh	r3, [r3, #26]
 80152f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80152f6:	b29a      	uxth	r2, r3
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80152fc:	e018      	b.n	8015330 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015306:	68db      	ldr	r3, [r3, #12]
 8015308:	685b      	ldr	r3, [r3, #4]
 801530a:	4618      	mov	r0, r3
 801530c:	f7fb fa70 	bl	80107f0 <lwip_htonl>
 8015310:	4603      	mov	r3, r0
 8015312:	1ae3      	subs	r3, r4, r3
 8015314:	2b00      	cmp	r3, #0
 8015316:	dc0b      	bgt.n	8015330 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	8b5b      	ldrh	r3, [r3, #26]
 801531c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015320:	b29a      	uxth	r2, r3
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015326:	e003      	b.n	8015330 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015328:	6878      	ldr	r0, [r7, #4]
 801532a:	f001 ff75 	bl	8017218 <tcp_send_empty_ack>
 801532e:	e000      	b.n	8015332 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015330:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015336:	2b00      	cmp	r3, #0
 8015338:	d05b      	beq.n	80153f2 <tcp_receive+0x50a>
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801533e:	4b60      	ldr	r3, [pc, #384]	; (80154c0 <tcp_receive+0x5d8>)
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	1ad3      	subs	r3, r2, r3
 8015344:	2b00      	cmp	r3, #0
 8015346:	da54      	bge.n	80153f2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015348:	4b5e      	ldr	r3, [pc, #376]	; (80154c4 <tcp_receive+0x5dc>)
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	b29a      	uxth	r2, r3
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015352:	b29b      	uxth	r3, r3
 8015354:	1ad3      	subs	r3, r2, r3
 8015356:	b29b      	uxth	r3, r3
 8015358:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801535c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015366:	10db      	asrs	r3, r3, #3
 8015368:	b21b      	sxth	r3, r3
 801536a:	b29b      	uxth	r3, r3
 801536c:	1ad3      	subs	r3, r2, r3
 801536e:	b29b      	uxth	r3, r3
 8015370:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801537a:	b29a      	uxth	r2, r3
 801537c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015380:	4413      	add	r3, r2
 8015382:	b29b      	uxth	r3, r3
 8015384:	b21a      	sxth	r2, r3
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801538a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801538e:	2b00      	cmp	r3, #0
 8015390:	da05      	bge.n	801539e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8015392:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015396:	425b      	negs	r3, r3
 8015398:	b29b      	uxth	r3, r3
 801539a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801539e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80153a8:	109b      	asrs	r3, r3, #2
 80153aa:	b21b      	sxth	r3, r3
 80153ac:	b29b      	uxth	r3, r3
 80153ae:	1ad3      	subs	r3, r2, r3
 80153b0:	b29b      	uxth	r3, r3
 80153b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80153bc:	b29a      	uxth	r2, r3
 80153be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80153c2:	4413      	add	r3, r2
 80153c4:	b29b      	uxth	r3, r3
 80153c6:	b21a      	sxth	r2, r3
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80153d2:	10db      	asrs	r3, r3, #3
 80153d4:	b21b      	sxth	r3, r3
 80153d6:	b29a      	uxth	r2, r3
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80153de:	b29b      	uxth	r3, r3
 80153e0:	4413      	add	r3, r2
 80153e2:	b29b      	uxth	r3, r3
 80153e4:	b21a      	sxth	r2, r3
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	2200      	movs	r2, #0
 80153f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80153f2:	4b35      	ldr	r3, [pc, #212]	; (80154c8 <tcp_receive+0x5e0>)
 80153f4:	881b      	ldrh	r3, [r3, #0]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	f000 84e1 	beq.w	8015dbe <tcp_receive+0xed6>
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	7d1b      	ldrb	r3, [r3, #20]
 8015400:	2b06      	cmp	r3, #6
 8015402:	f200 84dc 	bhi.w	8015dbe <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801540a:	4b30      	ldr	r3, [pc, #192]	; (80154cc <tcp_receive+0x5e4>)
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	1ad3      	subs	r3, r2, r3
 8015410:	3b01      	subs	r3, #1
 8015412:	2b00      	cmp	r3, #0
 8015414:	f2c0 808e 	blt.w	8015534 <tcp_receive+0x64c>
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801541c:	4b2a      	ldr	r3, [pc, #168]	; (80154c8 <tcp_receive+0x5e0>)
 801541e:	881b      	ldrh	r3, [r3, #0]
 8015420:	4619      	mov	r1, r3
 8015422:	4b2a      	ldr	r3, [pc, #168]	; (80154cc <tcp_receive+0x5e4>)
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	440b      	add	r3, r1
 8015428:	1ad3      	subs	r3, r2, r3
 801542a:	3301      	adds	r3, #1
 801542c:	2b00      	cmp	r3, #0
 801542e:	f300 8081 	bgt.w	8015534 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015432:	4b27      	ldr	r3, [pc, #156]	; (80154d0 <tcp_receive+0x5e8>)
 8015434:	685b      	ldr	r3, [r3, #4]
 8015436:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801543c:	4b23      	ldr	r3, [pc, #140]	; (80154cc <tcp_receive+0x5e4>)
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	1ad3      	subs	r3, r2, r3
 8015442:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015444:	4b22      	ldr	r3, [pc, #136]	; (80154d0 <tcp_receive+0x5e8>)
 8015446:	685b      	ldr	r3, [r3, #4]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d106      	bne.n	801545a <tcp_receive+0x572>
 801544c:	4b21      	ldr	r3, [pc, #132]	; (80154d4 <tcp_receive+0x5ec>)
 801544e:	f240 5294 	movw	r2, #1428	; 0x594
 8015452:	4921      	ldr	r1, [pc, #132]	; (80154d8 <tcp_receive+0x5f0>)
 8015454:	4821      	ldr	r0, [pc, #132]	; (80154dc <tcp_receive+0x5f4>)
 8015456:	f005 fa27 	bl	801a8a8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801545c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015460:	4293      	cmp	r3, r2
 8015462:	d906      	bls.n	8015472 <tcp_receive+0x58a>
 8015464:	4b1b      	ldr	r3, [pc, #108]	; (80154d4 <tcp_receive+0x5ec>)
 8015466:	f240 5295 	movw	r2, #1429	; 0x595
 801546a:	491d      	ldr	r1, [pc, #116]	; (80154e0 <tcp_receive+0x5f8>)
 801546c:	481b      	ldr	r0, [pc, #108]	; (80154dc <tcp_receive+0x5f4>)
 801546e:	f005 fa1b 	bl	801a8a8 <iprintf>
      off = (u16_t)off32;
 8015472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015474:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015478:	4b15      	ldr	r3, [pc, #84]	; (80154d0 <tcp_receive+0x5e8>)
 801547a:	685b      	ldr	r3, [r3, #4]
 801547c:	891b      	ldrh	r3, [r3, #8]
 801547e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015482:	429a      	cmp	r2, r3
 8015484:	d906      	bls.n	8015494 <tcp_receive+0x5ac>
 8015486:	4b13      	ldr	r3, [pc, #76]	; (80154d4 <tcp_receive+0x5ec>)
 8015488:	f240 5297 	movw	r2, #1431	; 0x597
 801548c:	4915      	ldr	r1, [pc, #84]	; (80154e4 <tcp_receive+0x5fc>)
 801548e:	4813      	ldr	r0, [pc, #76]	; (80154dc <tcp_receive+0x5f4>)
 8015490:	f005 fa0a 	bl	801a8a8 <iprintf>
      inseg.len -= off;
 8015494:	4b0e      	ldr	r3, [pc, #56]	; (80154d0 <tcp_receive+0x5e8>)
 8015496:	891a      	ldrh	r2, [r3, #8]
 8015498:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801549c:	1ad3      	subs	r3, r2, r3
 801549e:	b29a      	uxth	r2, r3
 80154a0:	4b0b      	ldr	r3, [pc, #44]	; (80154d0 <tcp_receive+0x5e8>)
 80154a2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80154a4:	4b0a      	ldr	r3, [pc, #40]	; (80154d0 <tcp_receive+0x5e8>)
 80154a6:	685b      	ldr	r3, [r3, #4]
 80154a8:	891a      	ldrh	r2, [r3, #8]
 80154aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80154ae:	1ad3      	subs	r3, r2, r3
 80154b0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80154b2:	e029      	b.n	8015508 <tcp_receive+0x620>
 80154b4:	0801d488 	.word	0x0801d488
 80154b8:	0801d490 	.word	0x0801d490
 80154bc:	200031a4 	.word	0x200031a4
 80154c0:	200031a0 	.word	0x200031a0
 80154c4:	2000dc84 	.word	0x2000dc84
 80154c8:	200031a6 	.word	0x200031a6
 80154cc:	2000319c 	.word	0x2000319c
 80154d0:	2000317c 	.word	0x2000317c
 80154d4:	0801d120 	.word	0x0801d120
 80154d8:	0801d498 	.word	0x0801d498
 80154dc:	0801d16c 	.word	0x0801d16c
 80154e0:	0801d4a8 	.word	0x0801d4a8
 80154e4:	0801d4b8 	.word	0x0801d4b8
        off -= p->len;
 80154e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80154ea:	895b      	ldrh	r3, [r3, #10]
 80154ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80154f0:	1ad3      	subs	r3, r2, r3
 80154f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80154f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80154f8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80154fa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80154fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80154fe:	2200      	movs	r2, #0
 8015500:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8015508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801550a:	895b      	ldrh	r3, [r3, #10]
 801550c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015510:	429a      	cmp	r2, r3
 8015512:	d8e9      	bhi.n	80154e8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015514:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015518:	4619      	mov	r1, r3
 801551a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801551c:	f7fc fb80 	bl	8011c20 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015524:	4a91      	ldr	r2, [pc, #580]	; (801576c <tcp_receive+0x884>)
 8015526:	6013      	str	r3, [r2, #0]
 8015528:	4b91      	ldr	r3, [pc, #580]	; (8015770 <tcp_receive+0x888>)
 801552a:	68db      	ldr	r3, [r3, #12]
 801552c:	4a8f      	ldr	r2, [pc, #572]	; (801576c <tcp_receive+0x884>)
 801552e:	6812      	ldr	r2, [r2, #0]
 8015530:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015532:	e00d      	b.n	8015550 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015534:	4b8d      	ldr	r3, [pc, #564]	; (801576c <tcp_receive+0x884>)
 8015536:	681a      	ldr	r2, [r3, #0]
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801553c:	1ad3      	subs	r3, r2, r3
 801553e:	2b00      	cmp	r3, #0
 8015540:	da06      	bge.n	8015550 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	8b5b      	ldrh	r3, [r3, #26]
 8015546:	f043 0302 	orr.w	r3, r3, #2
 801554a:	b29a      	uxth	r2, r3
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015550:	4b86      	ldr	r3, [pc, #536]	; (801576c <tcp_receive+0x884>)
 8015552:	681a      	ldr	r2, [r3, #0]
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015558:	1ad3      	subs	r3, r2, r3
 801555a:	2b00      	cmp	r3, #0
 801555c:	f2c0 842a 	blt.w	8015db4 <tcp_receive+0xecc>
 8015560:	4b82      	ldr	r3, [pc, #520]	; (801576c <tcp_receive+0x884>)
 8015562:	681a      	ldr	r2, [r3, #0]
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015568:	6879      	ldr	r1, [r7, #4]
 801556a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801556c:	440b      	add	r3, r1
 801556e:	1ad3      	subs	r3, r2, r3
 8015570:	3301      	adds	r3, #1
 8015572:	2b00      	cmp	r3, #0
 8015574:	f300 841e 	bgt.w	8015db4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801557c:	4b7b      	ldr	r3, [pc, #492]	; (801576c <tcp_receive+0x884>)
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	429a      	cmp	r2, r3
 8015582:	f040 829a 	bne.w	8015aba <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8015586:	4b7a      	ldr	r3, [pc, #488]	; (8015770 <tcp_receive+0x888>)
 8015588:	891c      	ldrh	r4, [r3, #8]
 801558a:	4b79      	ldr	r3, [pc, #484]	; (8015770 <tcp_receive+0x888>)
 801558c:	68db      	ldr	r3, [r3, #12]
 801558e:	899b      	ldrh	r3, [r3, #12]
 8015590:	b29b      	uxth	r3, r3
 8015592:	4618      	mov	r0, r3
 8015594:	f7fb f917 	bl	80107c6 <lwip_htons>
 8015598:	4603      	mov	r3, r0
 801559a:	b2db      	uxtb	r3, r3
 801559c:	f003 0303 	and.w	r3, r3, #3
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d001      	beq.n	80155a8 <tcp_receive+0x6c0>
 80155a4:	2301      	movs	r3, #1
 80155a6:	e000      	b.n	80155aa <tcp_receive+0x6c2>
 80155a8:	2300      	movs	r3, #0
 80155aa:	4423      	add	r3, r4
 80155ac:	b29a      	uxth	r2, r3
 80155ae:	4b71      	ldr	r3, [pc, #452]	; (8015774 <tcp_receive+0x88c>)
 80155b0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80155b6:	4b6f      	ldr	r3, [pc, #444]	; (8015774 <tcp_receive+0x88c>)
 80155b8:	881b      	ldrh	r3, [r3, #0]
 80155ba:	429a      	cmp	r2, r3
 80155bc:	d275      	bcs.n	80156aa <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80155be:	4b6c      	ldr	r3, [pc, #432]	; (8015770 <tcp_receive+0x888>)
 80155c0:	68db      	ldr	r3, [r3, #12]
 80155c2:	899b      	ldrh	r3, [r3, #12]
 80155c4:	b29b      	uxth	r3, r3
 80155c6:	4618      	mov	r0, r3
 80155c8:	f7fb f8fd 	bl	80107c6 <lwip_htons>
 80155cc:	4603      	mov	r3, r0
 80155ce:	b2db      	uxtb	r3, r3
 80155d0:	f003 0301 	and.w	r3, r3, #1
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d01f      	beq.n	8015618 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80155d8:	4b65      	ldr	r3, [pc, #404]	; (8015770 <tcp_receive+0x888>)
 80155da:	68db      	ldr	r3, [r3, #12]
 80155dc:	899b      	ldrh	r3, [r3, #12]
 80155de:	b29b      	uxth	r3, r3
 80155e0:	b21b      	sxth	r3, r3
 80155e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80155e6:	b21c      	sxth	r4, r3
 80155e8:	4b61      	ldr	r3, [pc, #388]	; (8015770 <tcp_receive+0x888>)
 80155ea:	68db      	ldr	r3, [r3, #12]
 80155ec:	899b      	ldrh	r3, [r3, #12]
 80155ee:	b29b      	uxth	r3, r3
 80155f0:	4618      	mov	r0, r3
 80155f2:	f7fb f8e8 	bl	80107c6 <lwip_htons>
 80155f6:	4603      	mov	r3, r0
 80155f8:	b2db      	uxtb	r3, r3
 80155fa:	b29b      	uxth	r3, r3
 80155fc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015600:	b29b      	uxth	r3, r3
 8015602:	4618      	mov	r0, r3
 8015604:	f7fb f8df 	bl	80107c6 <lwip_htons>
 8015608:	4603      	mov	r3, r0
 801560a:	b21b      	sxth	r3, r3
 801560c:	4323      	orrs	r3, r4
 801560e:	b21a      	sxth	r2, r3
 8015610:	4b57      	ldr	r3, [pc, #348]	; (8015770 <tcp_receive+0x888>)
 8015612:	68db      	ldr	r3, [r3, #12]
 8015614:	b292      	uxth	r2, r2
 8015616:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801561c:	4b54      	ldr	r3, [pc, #336]	; (8015770 <tcp_receive+0x888>)
 801561e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015620:	4b53      	ldr	r3, [pc, #332]	; (8015770 <tcp_receive+0x888>)
 8015622:	68db      	ldr	r3, [r3, #12]
 8015624:	899b      	ldrh	r3, [r3, #12]
 8015626:	b29b      	uxth	r3, r3
 8015628:	4618      	mov	r0, r3
 801562a:	f7fb f8cc 	bl	80107c6 <lwip_htons>
 801562e:	4603      	mov	r3, r0
 8015630:	b2db      	uxtb	r3, r3
 8015632:	f003 0302 	and.w	r3, r3, #2
 8015636:	2b00      	cmp	r3, #0
 8015638:	d005      	beq.n	8015646 <tcp_receive+0x75e>
            inseg.len -= 1;
 801563a:	4b4d      	ldr	r3, [pc, #308]	; (8015770 <tcp_receive+0x888>)
 801563c:	891b      	ldrh	r3, [r3, #8]
 801563e:	3b01      	subs	r3, #1
 8015640:	b29a      	uxth	r2, r3
 8015642:	4b4b      	ldr	r3, [pc, #300]	; (8015770 <tcp_receive+0x888>)
 8015644:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015646:	4b4a      	ldr	r3, [pc, #296]	; (8015770 <tcp_receive+0x888>)
 8015648:	685b      	ldr	r3, [r3, #4]
 801564a:	4a49      	ldr	r2, [pc, #292]	; (8015770 <tcp_receive+0x888>)
 801564c:	8912      	ldrh	r2, [r2, #8]
 801564e:	4611      	mov	r1, r2
 8015650:	4618      	mov	r0, r3
 8015652:	f7fc f9e5 	bl	8011a20 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015656:	4b46      	ldr	r3, [pc, #280]	; (8015770 <tcp_receive+0x888>)
 8015658:	891c      	ldrh	r4, [r3, #8]
 801565a:	4b45      	ldr	r3, [pc, #276]	; (8015770 <tcp_receive+0x888>)
 801565c:	68db      	ldr	r3, [r3, #12]
 801565e:	899b      	ldrh	r3, [r3, #12]
 8015660:	b29b      	uxth	r3, r3
 8015662:	4618      	mov	r0, r3
 8015664:	f7fb f8af 	bl	80107c6 <lwip_htons>
 8015668:	4603      	mov	r3, r0
 801566a:	b2db      	uxtb	r3, r3
 801566c:	f003 0303 	and.w	r3, r3, #3
 8015670:	2b00      	cmp	r3, #0
 8015672:	d001      	beq.n	8015678 <tcp_receive+0x790>
 8015674:	2301      	movs	r3, #1
 8015676:	e000      	b.n	801567a <tcp_receive+0x792>
 8015678:	2300      	movs	r3, #0
 801567a:	4423      	add	r3, r4
 801567c:	b29a      	uxth	r2, r3
 801567e:	4b3d      	ldr	r3, [pc, #244]	; (8015774 <tcp_receive+0x88c>)
 8015680:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015682:	4b3c      	ldr	r3, [pc, #240]	; (8015774 <tcp_receive+0x88c>)
 8015684:	881b      	ldrh	r3, [r3, #0]
 8015686:	461a      	mov	r2, r3
 8015688:	4b38      	ldr	r3, [pc, #224]	; (801576c <tcp_receive+0x884>)
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	441a      	add	r2, r3
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015692:	6879      	ldr	r1, [r7, #4]
 8015694:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015696:	440b      	add	r3, r1
 8015698:	429a      	cmp	r2, r3
 801569a:	d006      	beq.n	80156aa <tcp_receive+0x7c2>
 801569c:	4b36      	ldr	r3, [pc, #216]	; (8015778 <tcp_receive+0x890>)
 801569e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80156a2:	4936      	ldr	r1, [pc, #216]	; (801577c <tcp_receive+0x894>)
 80156a4:	4836      	ldr	r0, [pc, #216]	; (8015780 <tcp_receive+0x898>)
 80156a6:	f005 f8ff 	bl	801a8a8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	f000 80e7 	beq.w	8015882 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80156b4:	4b2e      	ldr	r3, [pc, #184]	; (8015770 <tcp_receive+0x888>)
 80156b6:	68db      	ldr	r3, [r3, #12]
 80156b8:	899b      	ldrh	r3, [r3, #12]
 80156ba:	b29b      	uxth	r3, r3
 80156bc:	4618      	mov	r0, r3
 80156be:	f7fb f882 	bl	80107c6 <lwip_htons>
 80156c2:	4603      	mov	r3, r0
 80156c4:	b2db      	uxtb	r3, r3
 80156c6:	f003 0301 	and.w	r3, r3, #1
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d010      	beq.n	80156f0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80156ce:	e00a      	b.n	80156e6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80156d4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80156da:	681a      	ldr	r2, [r3, #0]
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80156e0:	68f8      	ldr	r0, [r7, #12]
 80156e2:	f7fd fd96 	bl	8013212 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d1f0      	bne.n	80156d0 <tcp_receive+0x7e8>
 80156ee:	e0c8      	b.n	8015882 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80156f4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80156f6:	e052      	b.n	801579e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80156f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80156fa:	68db      	ldr	r3, [r3, #12]
 80156fc:	899b      	ldrh	r3, [r3, #12]
 80156fe:	b29b      	uxth	r3, r3
 8015700:	4618      	mov	r0, r3
 8015702:	f7fb f860 	bl	80107c6 <lwip_htons>
 8015706:	4603      	mov	r3, r0
 8015708:	b2db      	uxtb	r3, r3
 801570a:	f003 0301 	and.w	r3, r3, #1
 801570e:	2b00      	cmp	r3, #0
 8015710:	d03d      	beq.n	801578e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015712:	4b17      	ldr	r3, [pc, #92]	; (8015770 <tcp_receive+0x888>)
 8015714:	68db      	ldr	r3, [r3, #12]
 8015716:	899b      	ldrh	r3, [r3, #12]
 8015718:	b29b      	uxth	r3, r3
 801571a:	4618      	mov	r0, r3
 801571c:	f7fb f853 	bl	80107c6 <lwip_htons>
 8015720:	4603      	mov	r3, r0
 8015722:	b2db      	uxtb	r3, r3
 8015724:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015728:	2b00      	cmp	r3, #0
 801572a:	d130      	bne.n	801578e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801572c:	4b10      	ldr	r3, [pc, #64]	; (8015770 <tcp_receive+0x888>)
 801572e:	68db      	ldr	r3, [r3, #12]
 8015730:	899b      	ldrh	r3, [r3, #12]
 8015732:	b29c      	uxth	r4, r3
 8015734:	2001      	movs	r0, #1
 8015736:	f7fb f846 	bl	80107c6 <lwip_htons>
 801573a:	4603      	mov	r3, r0
 801573c:	461a      	mov	r2, r3
 801573e:	4b0c      	ldr	r3, [pc, #48]	; (8015770 <tcp_receive+0x888>)
 8015740:	68db      	ldr	r3, [r3, #12]
 8015742:	4322      	orrs	r2, r4
 8015744:	b292      	uxth	r2, r2
 8015746:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015748:	4b09      	ldr	r3, [pc, #36]	; (8015770 <tcp_receive+0x888>)
 801574a:	891c      	ldrh	r4, [r3, #8]
 801574c:	4b08      	ldr	r3, [pc, #32]	; (8015770 <tcp_receive+0x888>)
 801574e:	68db      	ldr	r3, [r3, #12]
 8015750:	899b      	ldrh	r3, [r3, #12]
 8015752:	b29b      	uxth	r3, r3
 8015754:	4618      	mov	r0, r3
 8015756:	f7fb f836 	bl	80107c6 <lwip_htons>
 801575a:	4603      	mov	r3, r0
 801575c:	b2db      	uxtb	r3, r3
 801575e:	f003 0303 	and.w	r3, r3, #3
 8015762:	2b00      	cmp	r3, #0
 8015764:	d00e      	beq.n	8015784 <tcp_receive+0x89c>
 8015766:	2301      	movs	r3, #1
 8015768:	e00d      	b.n	8015786 <tcp_receive+0x89e>
 801576a:	bf00      	nop
 801576c:	2000319c 	.word	0x2000319c
 8015770:	2000317c 	.word	0x2000317c
 8015774:	200031a6 	.word	0x200031a6
 8015778:	0801d120 	.word	0x0801d120
 801577c:	0801d4c8 	.word	0x0801d4c8
 8015780:	0801d16c 	.word	0x0801d16c
 8015784:	2300      	movs	r3, #0
 8015786:	4423      	add	r3, r4
 8015788:	b29a      	uxth	r2, r3
 801578a:	4b98      	ldr	r3, [pc, #608]	; (80159ec <tcp_receive+0xb04>)
 801578c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801578e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015790:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8015798:	6938      	ldr	r0, [r7, #16]
 801579a:	f7fd fd3a 	bl	8013212 <tcp_seg_free>
            while (next &&
 801579e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d00e      	beq.n	80157c2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80157a4:	4b91      	ldr	r3, [pc, #580]	; (80159ec <tcp_receive+0xb04>)
 80157a6:	881b      	ldrh	r3, [r3, #0]
 80157a8:	461a      	mov	r2, r3
 80157aa:	4b91      	ldr	r3, [pc, #580]	; (80159f0 <tcp_receive+0xb08>)
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	441a      	add	r2, r3
 80157b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157b2:	68db      	ldr	r3, [r3, #12]
 80157b4:	685b      	ldr	r3, [r3, #4]
 80157b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80157b8:	8909      	ldrh	r1, [r1, #8]
 80157ba:	440b      	add	r3, r1
 80157bc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80157be:	2b00      	cmp	r3, #0
 80157c0:	da9a      	bge.n	80156f8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80157c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d059      	beq.n	801587c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80157c8:	4b88      	ldr	r3, [pc, #544]	; (80159ec <tcp_receive+0xb04>)
 80157ca:	881b      	ldrh	r3, [r3, #0]
 80157cc:	461a      	mov	r2, r3
 80157ce:	4b88      	ldr	r3, [pc, #544]	; (80159f0 <tcp_receive+0xb08>)
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	441a      	add	r2, r3
 80157d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157d6:	68db      	ldr	r3, [r3, #12]
 80157d8:	685b      	ldr	r3, [r3, #4]
 80157da:	1ad3      	subs	r3, r2, r3
            if (next &&
 80157dc:	2b00      	cmp	r3, #0
 80157de:	dd4d      	ble.n	801587c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80157e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157e2:	68db      	ldr	r3, [r3, #12]
 80157e4:	685b      	ldr	r3, [r3, #4]
 80157e6:	b29a      	uxth	r2, r3
 80157e8:	4b81      	ldr	r3, [pc, #516]	; (80159f0 <tcp_receive+0xb08>)
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	b29b      	uxth	r3, r3
 80157ee:	1ad3      	subs	r3, r2, r3
 80157f0:	b29a      	uxth	r2, r3
 80157f2:	4b80      	ldr	r3, [pc, #512]	; (80159f4 <tcp_receive+0xb0c>)
 80157f4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80157f6:	4b7f      	ldr	r3, [pc, #508]	; (80159f4 <tcp_receive+0xb0c>)
 80157f8:	68db      	ldr	r3, [r3, #12]
 80157fa:	899b      	ldrh	r3, [r3, #12]
 80157fc:	b29b      	uxth	r3, r3
 80157fe:	4618      	mov	r0, r3
 8015800:	f7fa ffe1 	bl	80107c6 <lwip_htons>
 8015804:	4603      	mov	r3, r0
 8015806:	b2db      	uxtb	r3, r3
 8015808:	f003 0302 	and.w	r3, r3, #2
 801580c:	2b00      	cmp	r3, #0
 801580e:	d005      	beq.n	801581c <tcp_receive+0x934>
                inseg.len -= 1;
 8015810:	4b78      	ldr	r3, [pc, #480]	; (80159f4 <tcp_receive+0xb0c>)
 8015812:	891b      	ldrh	r3, [r3, #8]
 8015814:	3b01      	subs	r3, #1
 8015816:	b29a      	uxth	r2, r3
 8015818:	4b76      	ldr	r3, [pc, #472]	; (80159f4 <tcp_receive+0xb0c>)
 801581a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801581c:	4b75      	ldr	r3, [pc, #468]	; (80159f4 <tcp_receive+0xb0c>)
 801581e:	685b      	ldr	r3, [r3, #4]
 8015820:	4a74      	ldr	r2, [pc, #464]	; (80159f4 <tcp_receive+0xb0c>)
 8015822:	8912      	ldrh	r2, [r2, #8]
 8015824:	4611      	mov	r1, r2
 8015826:	4618      	mov	r0, r3
 8015828:	f7fc f8fa 	bl	8011a20 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801582c:	4b71      	ldr	r3, [pc, #452]	; (80159f4 <tcp_receive+0xb0c>)
 801582e:	891c      	ldrh	r4, [r3, #8]
 8015830:	4b70      	ldr	r3, [pc, #448]	; (80159f4 <tcp_receive+0xb0c>)
 8015832:	68db      	ldr	r3, [r3, #12]
 8015834:	899b      	ldrh	r3, [r3, #12]
 8015836:	b29b      	uxth	r3, r3
 8015838:	4618      	mov	r0, r3
 801583a:	f7fa ffc4 	bl	80107c6 <lwip_htons>
 801583e:	4603      	mov	r3, r0
 8015840:	b2db      	uxtb	r3, r3
 8015842:	f003 0303 	and.w	r3, r3, #3
 8015846:	2b00      	cmp	r3, #0
 8015848:	d001      	beq.n	801584e <tcp_receive+0x966>
 801584a:	2301      	movs	r3, #1
 801584c:	e000      	b.n	8015850 <tcp_receive+0x968>
 801584e:	2300      	movs	r3, #0
 8015850:	4423      	add	r3, r4
 8015852:	b29a      	uxth	r2, r3
 8015854:	4b65      	ldr	r3, [pc, #404]	; (80159ec <tcp_receive+0xb04>)
 8015856:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015858:	4b64      	ldr	r3, [pc, #400]	; (80159ec <tcp_receive+0xb04>)
 801585a:	881b      	ldrh	r3, [r3, #0]
 801585c:	461a      	mov	r2, r3
 801585e:	4b64      	ldr	r3, [pc, #400]	; (80159f0 <tcp_receive+0xb08>)
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	441a      	add	r2, r3
 8015864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015866:	68db      	ldr	r3, [r3, #12]
 8015868:	685b      	ldr	r3, [r3, #4]
 801586a:	429a      	cmp	r2, r3
 801586c:	d006      	beq.n	801587c <tcp_receive+0x994>
 801586e:	4b62      	ldr	r3, [pc, #392]	; (80159f8 <tcp_receive+0xb10>)
 8015870:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8015874:	4961      	ldr	r1, [pc, #388]	; (80159fc <tcp_receive+0xb14>)
 8015876:	4862      	ldr	r0, [pc, #392]	; (8015a00 <tcp_receive+0xb18>)
 8015878:	f005 f816 	bl	801a8a8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015880:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8015882:	4b5a      	ldr	r3, [pc, #360]	; (80159ec <tcp_receive+0xb04>)
 8015884:	881b      	ldrh	r3, [r3, #0]
 8015886:	461a      	mov	r2, r3
 8015888:	4b59      	ldr	r3, [pc, #356]	; (80159f0 <tcp_receive+0xb08>)
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	441a      	add	r2, r3
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015896:	4b55      	ldr	r3, [pc, #340]	; (80159ec <tcp_receive+0xb04>)
 8015898:	881b      	ldrh	r3, [r3, #0]
 801589a:	429a      	cmp	r2, r3
 801589c:	d206      	bcs.n	80158ac <tcp_receive+0x9c4>
 801589e:	4b56      	ldr	r3, [pc, #344]	; (80159f8 <tcp_receive+0xb10>)
 80158a0:	f240 6207 	movw	r2, #1543	; 0x607
 80158a4:	4957      	ldr	r1, [pc, #348]	; (8015a04 <tcp_receive+0xb1c>)
 80158a6:	4856      	ldr	r0, [pc, #344]	; (8015a00 <tcp_receive+0xb18>)
 80158a8:	f004 fffe 	bl	801a8a8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80158b0:	4b4e      	ldr	r3, [pc, #312]	; (80159ec <tcp_receive+0xb04>)
 80158b2:	881b      	ldrh	r3, [r3, #0]
 80158b4:	1ad3      	subs	r3, r2, r3
 80158b6:	b29a      	uxth	r2, r3
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80158bc:	6878      	ldr	r0, [r7, #4]
 80158be:	f7fc ffc9 	bl	8012854 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80158c2:	4b4c      	ldr	r3, [pc, #304]	; (80159f4 <tcp_receive+0xb0c>)
 80158c4:	685b      	ldr	r3, [r3, #4]
 80158c6:	891b      	ldrh	r3, [r3, #8]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d006      	beq.n	80158da <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80158cc:	4b49      	ldr	r3, [pc, #292]	; (80159f4 <tcp_receive+0xb0c>)
 80158ce:	685b      	ldr	r3, [r3, #4]
 80158d0:	4a4d      	ldr	r2, [pc, #308]	; (8015a08 <tcp_receive+0xb20>)
 80158d2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80158d4:	4b47      	ldr	r3, [pc, #284]	; (80159f4 <tcp_receive+0xb0c>)
 80158d6:	2200      	movs	r2, #0
 80158d8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80158da:	4b46      	ldr	r3, [pc, #280]	; (80159f4 <tcp_receive+0xb0c>)
 80158dc:	68db      	ldr	r3, [r3, #12]
 80158de:	899b      	ldrh	r3, [r3, #12]
 80158e0:	b29b      	uxth	r3, r3
 80158e2:	4618      	mov	r0, r3
 80158e4:	f7fa ff6f 	bl	80107c6 <lwip_htons>
 80158e8:	4603      	mov	r3, r0
 80158ea:	b2db      	uxtb	r3, r3
 80158ec:	f003 0301 	and.w	r3, r3, #1
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	f000 80b8 	beq.w	8015a66 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80158f6:	4b45      	ldr	r3, [pc, #276]	; (8015a0c <tcp_receive+0xb24>)
 80158f8:	781b      	ldrb	r3, [r3, #0]
 80158fa:	f043 0320 	orr.w	r3, r3, #32
 80158fe:	b2da      	uxtb	r2, r3
 8015900:	4b42      	ldr	r3, [pc, #264]	; (8015a0c <tcp_receive+0xb24>)
 8015902:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015904:	e0af      	b.n	8015a66 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801590a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015910:	68db      	ldr	r3, [r3, #12]
 8015912:	685b      	ldr	r3, [r3, #4]
 8015914:	4a36      	ldr	r2, [pc, #216]	; (80159f0 <tcp_receive+0xb08>)
 8015916:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015918:	68bb      	ldr	r3, [r7, #8]
 801591a:	891b      	ldrh	r3, [r3, #8]
 801591c:	461c      	mov	r4, r3
 801591e:	68bb      	ldr	r3, [r7, #8]
 8015920:	68db      	ldr	r3, [r3, #12]
 8015922:	899b      	ldrh	r3, [r3, #12]
 8015924:	b29b      	uxth	r3, r3
 8015926:	4618      	mov	r0, r3
 8015928:	f7fa ff4d 	bl	80107c6 <lwip_htons>
 801592c:	4603      	mov	r3, r0
 801592e:	b2db      	uxtb	r3, r3
 8015930:	f003 0303 	and.w	r3, r3, #3
 8015934:	2b00      	cmp	r3, #0
 8015936:	d001      	beq.n	801593c <tcp_receive+0xa54>
 8015938:	2301      	movs	r3, #1
 801593a:	e000      	b.n	801593e <tcp_receive+0xa56>
 801593c:	2300      	movs	r3, #0
 801593e:	191a      	adds	r2, r3, r4
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015944:	441a      	add	r2, r3
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801594e:	461c      	mov	r4, r3
 8015950:	68bb      	ldr	r3, [r7, #8]
 8015952:	891b      	ldrh	r3, [r3, #8]
 8015954:	461d      	mov	r5, r3
 8015956:	68bb      	ldr	r3, [r7, #8]
 8015958:	68db      	ldr	r3, [r3, #12]
 801595a:	899b      	ldrh	r3, [r3, #12]
 801595c:	b29b      	uxth	r3, r3
 801595e:	4618      	mov	r0, r3
 8015960:	f7fa ff31 	bl	80107c6 <lwip_htons>
 8015964:	4603      	mov	r3, r0
 8015966:	b2db      	uxtb	r3, r3
 8015968:	f003 0303 	and.w	r3, r3, #3
 801596c:	2b00      	cmp	r3, #0
 801596e:	d001      	beq.n	8015974 <tcp_receive+0xa8c>
 8015970:	2301      	movs	r3, #1
 8015972:	e000      	b.n	8015976 <tcp_receive+0xa8e>
 8015974:	2300      	movs	r3, #0
 8015976:	442b      	add	r3, r5
 8015978:	429c      	cmp	r4, r3
 801597a:	d206      	bcs.n	801598a <tcp_receive+0xaa2>
 801597c:	4b1e      	ldr	r3, [pc, #120]	; (80159f8 <tcp_receive+0xb10>)
 801597e:	f240 622b 	movw	r2, #1579	; 0x62b
 8015982:	4923      	ldr	r1, [pc, #140]	; (8015a10 <tcp_receive+0xb28>)
 8015984:	481e      	ldr	r0, [pc, #120]	; (8015a00 <tcp_receive+0xb18>)
 8015986:	f004 ff8f 	bl	801a8a8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801598a:	68bb      	ldr	r3, [r7, #8]
 801598c:	891b      	ldrh	r3, [r3, #8]
 801598e:	461c      	mov	r4, r3
 8015990:	68bb      	ldr	r3, [r7, #8]
 8015992:	68db      	ldr	r3, [r3, #12]
 8015994:	899b      	ldrh	r3, [r3, #12]
 8015996:	b29b      	uxth	r3, r3
 8015998:	4618      	mov	r0, r3
 801599a:	f7fa ff14 	bl	80107c6 <lwip_htons>
 801599e:	4603      	mov	r3, r0
 80159a0:	b2db      	uxtb	r3, r3
 80159a2:	f003 0303 	and.w	r3, r3, #3
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d001      	beq.n	80159ae <tcp_receive+0xac6>
 80159aa:	2301      	movs	r3, #1
 80159ac:	e000      	b.n	80159b0 <tcp_receive+0xac8>
 80159ae:	2300      	movs	r3, #0
 80159b0:	1919      	adds	r1, r3, r4
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80159b6:	b28b      	uxth	r3, r1
 80159b8:	1ad3      	subs	r3, r2, r3
 80159ba:	b29a      	uxth	r2, r3
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80159c0:	6878      	ldr	r0, [r7, #4]
 80159c2:	f7fc ff47 	bl	8012854 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80159c6:	68bb      	ldr	r3, [r7, #8]
 80159c8:	685b      	ldr	r3, [r3, #4]
 80159ca:	891b      	ldrh	r3, [r3, #8]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d028      	beq.n	8015a22 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80159d0:	4b0d      	ldr	r3, [pc, #52]	; (8015a08 <tcp_receive+0xb20>)
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d01d      	beq.n	8015a14 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80159d8:	4b0b      	ldr	r3, [pc, #44]	; (8015a08 <tcp_receive+0xb20>)
 80159da:	681a      	ldr	r2, [r3, #0]
 80159dc:	68bb      	ldr	r3, [r7, #8]
 80159de:	685b      	ldr	r3, [r3, #4]
 80159e0:	4619      	mov	r1, r3
 80159e2:	4610      	mov	r0, r2
 80159e4:	f7fc fa64 	bl	8011eb0 <pbuf_cat>
 80159e8:	e018      	b.n	8015a1c <tcp_receive+0xb34>
 80159ea:	bf00      	nop
 80159ec:	200031a6 	.word	0x200031a6
 80159f0:	2000319c 	.word	0x2000319c
 80159f4:	2000317c 	.word	0x2000317c
 80159f8:	0801d120 	.word	0x0801d120
 80159fc:	0801d500 	.word	0x0801d500
 8015a00:	0801d16c 	.word	0x0801d16c
 8015a04:	0801d53c 	.word	0x0801d53c
 8015a08:	200031ac 	.word	0x200031ac
 8015a0c:	200031a9 	.word	0x200031a9
 8015a10:	0801d55c 	.word	0x0801d55c
            } else {
              recv_data = cseg->p;
 8015a14:	68bb      	ldr	r3, [r7, #8]
 8015a16:	685b      	ldr	r3, [r3, #4]
 8015a18:	4a70      	ldr	r2, [pc, #448]	; (8015bdc <tcp_receive+0xcf4>)
 8015a1a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8015a1c:	68bb      	ldr	r3, [r7, #8]
 8015a1e:	2200      	movs	r2, #0
 8015a20:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015a22:	68bb      	ldr	r3, [r7, #8]
 8015a24:	68db      	ldr	r3, [r3, #12]
 8015a26:	899b      	ldrh	r3, [r3, #12]
 8015a28:	b29b      	uxth	r3, r3
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f7fa fecb 	bl	80107c6 <lwip_htons>
 8015a30:	4603      	mov	r3, r0
 8015a32:	b2db      	uxtb	r3, r3
 8015a34:	f003 0301 	and.w	r3, r3, #1
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d00d      	beq.n	8015a58 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8015a3c:	4b68      	ldr	r3, [pc, #416]	; (8015be0 <tcp_receive+0xcf8>)
 8015a3e:	781b      	ldrb	r3, [r3, #0]
 8015a40:	f043 0320 	orr.w	r3, r3, #32
 8015a44:	b2da      	uxtb	r2, r3
 8015a46:	4b66      	ldr	r3, [pc, #408]	; (8015be0 <tcp_receive+0xcf8>)
 8015a48:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	7d1b      	ldrb	r3, [r3, #20]
 8015a4e:	2b04      	cmp	r3, #4
 8015a50:	d102      	bne.n	8015a58 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	2207      	movs	r2, #7
 8015a56:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8015a58:	68bb      	ldr	r3, [r7, #8]
 8015a5a:	681a      	ldr	r2, [r3, #0]
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8015a60:	68b8      	ldr	r0, [r7, #8]
 8015a62:	f7fd fbd6 	bl	8013212 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d008      	beq.n	8015a80 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015a72:	68db      	ldr	r3, [r3, #12]
 8015a74:	685a      	ldr	r2, [r3, #4]
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8015a7a:	429a      	cmp	r2, r3
 8015a7c:	f43f af43 	beq.w	8015906 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	8b5b      	ldrh	r3, [r3, #26]
 8015a84:	f003 0301 	and.w	r3, r3, #1
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d00e      	beq.n	8015aaa <tcp_receive+0xbc2>
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	8b5b      	ldrh	r3, [r3, #26]
 8015a90:	f023 0301 	bic.w	r3, r3, #1
 8015a94:	b29a      	uxth	r2, r3
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	835a      	strh	r2, [r3, #26]
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	8b5b      	ldrh	r3, [r3, #26]
 8015a9e:	f043 0302 	orr.w	r3, r3, #2
 8015aa2:	b29a      	uxth	r2, r3
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015aa8:	e188      	b.n	8015dbc <tcp_receive+0xed4>
        tcp_ack(pcb);
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	8b5b      	ldrh	r3, [r3, #26]
 8015aae:	f043 0301 	orr.w	r3, r3, #1
 8015ab2:	b29a      	uxth	r2, r3
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015ab8:	e180      	b.n	8015dbc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d106      	bne.n	8015ad0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8015ac2:	4848      	ldr	r0, [pc, #288]	; (8015be4 <tcp_receive+0xcfc>)
 8015ac4:	f7fd fbbe 	bl	8013244 <tcp_seg_copy>
 8015ac8:	4602      	mov	r2, r0
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	675a      	str	r2, [r3, #116]	; 0x74
 8015ace:	e16d      	b.n	8015dac <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015ad8:	63bb      	str	r3, [r7, #56]	; 0x38
 8015ada:	e157      	b.n	8015d8c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8015adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ade:	68db      	ldr	r3, [r3, #12]
 8015ae0:	685a      	ldr	r2, [r3, #4]
 8015ae2:	4b41      	ldr	r3, [pc, #260]	; (8015be8 <tcp_receive+0xd00>)
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	429a      	cmp	r2, r3
 8015ae8:	d11d      	bne.n	8015b26 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8015aea:	4b3e      	ldr	r3, [pc, #248]	; (8015be4 <tcp_receive+0xcfc>)
 8015aec:	891a      	ldrh	r2, [r3, #8]
 8015aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015af0:	891b      	ldrh	r3, [r3, #8]
 8015af2:	429a      	cmp	r2, r3
 8015af4:	f240 814f 	bls.w	8015d96 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015af8:	483a      	ldr	r0, [pc, #232]	; (8015be4 <tcp_receive+0xcfc>)
 8015afa:	f7fd fba3 	bl	8013244 <tcp_seg_copy>
 8015afe:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015b00:	697b      	ldr	r3, [r7, #20]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	f000 8149 	beq.w	8015d9a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8015b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d003      	beq.n	8015b16 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8015b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b10:	697a      	ldr	r2, [r7, #20]
 8015b12:	601a      	str	r2, [r3, #0]
 8015b14:	e002      	b.n	8015b1c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	697a      	ldr	r2, [r7, #20]
 8015b1a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8015b1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015b1e:	6978      	ldr	r0, [r7, #20]
 8015b20:	f7ff f8de 	bl	8014ce0 <tcp_oos_insert_segment>
                }
                break;
 8015b24:	e139      	b.n	8015d9a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8015b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d117      	bne.n	8015b5c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8015b2c:	4b2e      	ldr	r3, [pc, #184]	; (8015be8 <tcp_receive+0xd00>)
 8015b2e:	681a      	ldr	r2, [r3, #0]
 8015b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b32:	68db      	ldr	r3, [r3, #12]
 8015b34:	685b      	ldr	r3, [r3, #4]
 8015b36:	1ad3      	subs	r3, r2, r3
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	da57      	bge.n	8015bec <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015b3c:	4829      	ldr	r0, [pc, #164]	; (8015be4 <tcp_receive+0xcfc>)
 8015b3e:	f7fd fb81 	bl	8013244 <tcp_seg_copy>
 8015b42:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8015b44:	69bb      	ldr	r3, [r7, #24]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	f000 8129 	beq.w	8015d9e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	69ba      	ldr	r2, [r7, #24]
 8015b50:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8015b52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015b54:	69b8      	ldr	r0, [r7, #24]
 8015b56:	f7ff f8c3 	bl	8014ce0 <tcp_oos_insert_segment>
                  }
                  break;
 8015b5a:	e120      	b.n	8015d9e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8015b5c:	4b22      	ldr	r3, [pc, #136]	; (8015be8 <tcp_receive+0xd00>)
 8015b5e:	681a      	ldr	r2, [r3, #0]
 8015b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b62:	68db      	ldr	r3, [r3, #12]
 8015b64:	685b      	ldr	r3, [r3, #4]
 8015b66:	1ad3      	subs	r3, r2, r3
 8015b68:	3b01      	subs	r3, #1
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	db3e      	blt.n	8015bec <tcp_receive+0xd04>
 8015b6e:	4b1e      	ldr	r3, [pc, #120]	; (8015be8 <tcp_receive+0xd00>)
 8015b70:	681a      	ldr	r2, [r3, #0]
 8015b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b74:	68db      	ldr	r3, [r3, #12]
 8015b76:	685b      	ldr	r3, [r3, #4]
 8015b78:	1ad3      	subs	r3, r2, r3
 8015b7a:	3301      	adds	r3, #1
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	dc35      	bgt.n	8015bec <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015b80:	4818      	ldr	r0, [pc, #96]	; (8015be4 <tcp_receive+0xcfc>)
 8015b82:	f7fd fb5f 	bl	8013244 <tcp_seg_copy>
 8015b86:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015b88:	69fb      	ldr	r3, [r7, #28]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	f000 8109 	beq.w	8015da2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b92:	68db      	ldr	r3, [r3, #12]
 8015b94:	685b      	ldr	r3, [r3, #4]
 8015b96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015b98:	8912      	ldrh	r2, [r2, #8]
 8015b9a:	441a      	add	r2, r3
 8015b9c:	4b12      	ldr	r3, [pc, #72]	; (8015be8 <tcp_receive+0xd00>)
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	1ad3      	subs	r3, r2, r3
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	dd12      	ble.n	8015bcc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8015ba6:	4b10      	ldr	r3, [pc, #64]	; (8015be8 <tcp_receive+0xd00>)
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	b29a      	uxth	r2, r3
 8015bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bae:	68db      	ldr	r3, [r3, #12]
 8015bb0:	685b      	ldr	r3, [r3, #4]
 8015bb2:	b29b      	uxth	r3, r3
 8015bb4:	1ad3      	subs	r3, r2, r3
 8015bb6:	b29a      	uxth	r2, r3
 8015bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bba:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bbe:	685a      	ldr	r2, [r3, #4]
 8015bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bc2:	891b      	ldrh	r3, [r3, #8]
 8015bc4:	4619      	mov	r1, r3
 8015bc6:	4610      	mov	r0, r2
 8015bc8:	f7fb ff2a 	bl	8011a20 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bce:	69fa      	ldr	r2, [r7, #28]
 8015bd0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8015bd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015bd4:	69f8      	ldr	r0, [r7, #28]
 8015bd6:	f7ff f883 	bl	8014ce0 <tcp_oos_insert_segment>
                  }
                  break;
 8015bda:	e0e2      	b.n	8015da2 <tcp_receive+0xeba>
 8015bdc:	200031ac 	.word	0x200031ac
 8015be0:	200031a9 	.word	0x200031a9
 8015be4:	2000317c 	.word	0x2000317c
 8015be8:	2000319c 	.word	0x2000319c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8015bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bee:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	f040 80c6 	bne.w	8015d86 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8015bfa:	4b80      	ldr	r3, [pc, #512]	; (8015dfc <tcp_receive+0xf14>)
 8015bfc:	681a      	ldr	r2, [r3, #0]
 8015bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c00:	68db      	ldr	r3, [r3, #12]
 8015c02:	685b      	ldr	r3, [r3, #4]
 8015c04:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	f340 80bd 	ble.w	8015d86 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c0e:	68db      	ldr	r3, [r3, #12]
 8015c10:	899b      	ldrh	r3, [r3, #12]
 8015c12:	b29b      	uxth	r3, r3
 8015c14:	4618      	mov	r0, r3
 8015c16:	f7fa fdd6 	bl	80107c6 <lwip_htons>
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	b2db      	uxtb	r3, r3
 8015c1e:	f003 0301 	and.w	r3, r3, #1
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	f040 80bf 	bne.w	8015da6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015c28:	4875      	ldr	r0, [pc, #468]	; (8015e00 <tcp_receive+0xf18>)
 8015c2a:	f7fd fb0b 	bl	8013244 <tcp_seg_copy>
 8015c2e:	4602      	mov	r2, r0
 8015c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c32:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	f000 80b6 	beq.w	8015daa <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8015c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c40:	68db      	ldr	r3, [r3, #12]
 8015c42:	685b      	ldr	r3, [r3, #4]
 8015c44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015c46:	8912      	ldrh	r2, [r2, #8]
 8015c48:	441a      	add	r2, r3
 8015c4a:	4b6c      	ldr	r3, [pc, #432]	; (8015dfc <tcp_receive+0xf14>)
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	1ad3      	subs	r3, r2, r3
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	dd12      	ble.n	8015c7a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015c54:	4b69      	ldr	r3, [pc, #420]	; (8015dfc <tcp_receive+0xf14>)
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	b29a      	uxth	r2, r3
 8015c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c5c:	68db      	ldr	r3, [r3, #12]
 8015c5e:	685b      	ldr	r3, [r3, #4]
 8015c60:	b29b      	uxth	r3, r3
 8015c62:	1ad3      	subs	r3, r2, r3
 8015c64:	b29a      	uxth	r2, r3
 8015c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c68:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8015c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c6c:	685a      	ldr	r2, [r3, #4]
 8015c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c70:	891b      	ldrh	r3, [r3, #8]
 8015c72:	4619      	mov	r1, r3
 8015c74:	4610      	mov	r0, r2
 8015c76:	f7fb fed3 	bl	8011a20 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8015c7a:	4b62      	ldr	r3, [pc, #392]	; (8015e04 <tcp_receive+0xf1c>)
 8015c7c:	881b      	ldrh	r3, [r3, #0]
 8015c7e:	461a      	mov	r2, r3
 8015c80:	4b5e      	ldr	r3, [pc, #376]	; (8015dfc <tcp_receive+0xf14>)
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	441a      	add	r2, r3
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c8a:	6879      	ldr	r1, [r7, #4]
 8015c8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015c8e:	440b      	add	r3, r1
 8015c90:	1ad3      	subs	r3, r2, r3
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	f340 8089 	ble.w	8015daa <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	68db      	ldr	r3, [r3, #12]
 8015c9e:	899b      	ldrh	r3, [r3, #12]
 8015ca0:	b29b      	uxth	r3, r3
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	f7fa fd8f 	bl	80107c6 <lwip_htons>
 8015ca8:	4603      	mov	r3, r0
 8015caa:	b2db      	uxtb	r3, r3
 8015cac:	f003 0301 	and.w	r3, r3, #1
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d022      	beq.n	8015cfa <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	68db      	ldr	r3, [r3, #12]
 8015cba:	899b      	ldrh	r3, [r3, #12]
 8015cbc:	b29b      	uxth	r3, r3
 8015cbe:	b21b      	sxth	r3, r3
 8015cc0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015cc4:	b21c      	sxth	r4, r3
 8015cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	68db      	ldr	r3, [r3, #12]
 8015ccc:	899b      	ldrh	r3, [r3, #12]
 8015cce:	b29b      	uxth	r3, r3
 8015cd0:	4618      	mov	r0, r3
 8015cd2:	f7fa fd78 	bl	80107c6 <lwip_htons>
 8015cd6:	4603      	mov	r3, r0
 8015cd8:	b2db      	uxtb	r3, r3
 8015cda:	b29b      	uxth	r3, r3
 8015cdc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015ce0:	b29b      	uxth	r3, r3
 8015ce2:	4618      	mov	r0, r3
 8015ce4:	f7fa fd6f 	bl	80107c6 <lwip_htons>
 8015ce8:	4603      	mov	r3, r0
 8015cea:	b21b      	sxth	r3, r3
 8015cec:	4323      	orrs	r3, r4
 8015cee:	b21a      	sxth	r2, r3
 8015cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	68db      	ldr	r3, [r3, #12]
 8015cf6:	b292      	uxth	r2, r2
 8015cf8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cfe:	b29a      	uxth	r2, r3
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d04:	4413      	add	r3, r2
 8015d06:	b299      	uxth	r1, r3
 8015d08:	4b3c      	ldr	r3, [pc, #240]	; (8015dfc <tcp_receive+0xf14>)
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	b29a      	uxth	r2, r3
 8015d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	1a8a      	subs	r2, r1, r2
 8015d14:	b292      	uxth	r2, r2
 8015d16:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	685a      	ldr	r2, [r3, #4]
 8015d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	891b      	ldrh	r3, [r3, #8]
 8015d24:	4619      	mov	r1, r3
 8015d26:	4610      	mov	r0, r2
 8015d28:	f7fb fe7a 	bl	8011a20 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	891c      	ldrh	r4, [r3, #8]
 8015d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	68db      	ldr	r3, [r3, #12]
 8015d38:	899b      	ldrh	r3, [r3, #12]
 8015d3a:	b29b      	uxth	r3, r3
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	f7fa fd42 	bl	80107c6 <lwip_htons>
 8015d42:	4603      	mov	r3, r0
 8015d44:	b2db      	uxtb	r3, r3
 8015d46:	f003 0303 	and.w	r3, r3, #3
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d001      	beq.n	8015d52 <tcp_receive+0xe6a>
 8015d4e:	2301      	movs	r3, #1
 8015d50:	e000      	b.n	8015d54 <tcp_receive+0xe6c>
 8015d52:	2300      	movs	r3, #0
 8015d54:	4423      	add	r3, r4
 8015d56:	b29a      	uxth	r2, r3
 8015d58:	4b2a      	ldr	r3, [pc, #168]	; (8015e04 <tcp_receive+0xf1c>)
 8015d5a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015d5c:	4b29      	ldr	r3, [pc, #164]	; (8015e04 <tcp_receive+0xf1c>)
 8015d5e:	881b      	ldrh	r3, [r3, #0]
 8015d60:	461a      	mov	r2, r3
 8015d62:	4b26      	ldr	r3, [pc, #152]	; (8015dfc <tcp_receive+0xf14>)
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	441a      	add	r2, r3
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d6c:	6879      	ldr	r1, [r7, #4]
 8015d6e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015d70:	440b      	add	r3, r1
 8015d72:	429a      	cmp	r2, r3
 8015d74:	d019      	beq.n	8015daa <tcp_receive+0xec2>
 8015d76:	4b24      	ldr	r3, [pc, #144]	; (8015e08 <tcp_receive+0xf20>)
 8015d78:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8015d7c:	4923      	ldr	r1, [pc, #140]	; (8015e0c <tcp_receive+0xf24>)
 8015d7e:	4824      	ldr	r0, [pc, #144]	; (8015e10 <tcp_receive+0xf28>)
 8015d80:	f004 fd92 	bl	801a8a8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015d84:	e011      	b.n	8015daa <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8015d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	f47f aea4 	bne.w	8015adc <tcp_receive+0xbf4>
 8015d94:	e00a      	b.n	8015dac <tcp_receive+0xec4>
                break;
 8015d96:	bf00      	nop
 8015d98:	e008      	b.n	8015dac <tcp_receive+0xec4>
                break;
 8015d9a:	bf00      	nop
 8015d9c:	e006      	b.n	8015dac <tcp_receive+0xec4>
                  break;
 8015d9e:	bf00      	nop
 8015da0:	e004      	b.n	8015dac <tcp_receive+0xec4>
                  break;
 8015da2:	bf00      	nop
 8015da4:	e002      	b.n	8015dac <tcp_receive+0xec4>
                  break;
 8015da6:	bf00      	nop
 8015da8:	e000      	b.n	8015dac <tcp_receive+0xec4>
                break;
 8015daa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015dac:	6878      	ldr	r0, [r7, #4]
 8015dae:	f001 fa33 	bl	8017218 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015db2:	e003      	b.n	8015dbc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015db4:	6878      	ldr	r0, [r7, #4]
 8015db6:	f001 fa2f 	bl	8017218 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015dba:	e01a      	b.n	8015df2 <tcp_receive+0xf0a>
 8015dbc:	e019      	b.n	8015df2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015dbe:	4b0f      	ldr	r3, [pc, #60]	; (8015dfc <tcp_receive+0xf14>)
 8015dc0:	681a      	ldr	r2, [r3, #0]
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dc6:	1ad3      	subs	r3, r2, r3
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	db0a      	blt.n	8015de2 <tcp_receive+0xefa>
 8015dcc:	4b0b      	ldr	r3, [pc, #44]	; (8015dfc <tcp_receive+0xf14>)
 8015dce:	681a      	ldr	r2, [r3, #0]
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dd4:	6879      	ldr	r1, [r7, #4]
 8015dd6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015dd8:	440b      	add	r3, r1
 8015dda:	1ad3      	subs	r3, r2, r3
 8015ddc:	3301      	adds	r3, #1
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	dd07      	ble.n	8015df2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	8b5b      	ldrh	r3, [r3, #26]
 8015de6:	f043 0302 	orr.w	r3, r3, #2
 8015dea:	b29a      	uxth	r2, r3
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015df0:	e7ff      	b.n	8015df2 <tcp_receive+0xf0a>
 8015df2:	bf00      	nop
 8015df4:	3750      	adds	r7, #80	; 0x50
 8015df6:	46bd      	mov	sp, r7
 8015df8:	bdb0      	pop	{r4, r5, r7, pc}
 8015dfa:	bf00      	nop
 8015dfc:	2000319c 	.word	0x2000319c
 8015e00:	2000317c 	.word	0x2000317c
 8015e04:	200031a6 	.word	0x200031a6
 8015e08:	0801d120 	.word	0x0801d120
 8015e0c:	0801d4c8 	.word	0x0801d4c8
 8015e10:	0801d16c 	.word	0x0801d16c

08015e14 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015e14:	b480      	push	{r7}
 8015e16:	b083      	sub	sp, #12
 8015e18:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015e1a:	4b15      	ldr	r3, [pc, #84]	; (8015e70 <tcp_get_next_optbyte+0x5c>)
 8015e1c:	881b      	ldrh	r3, [r3, #0]
 8015e1e:	1c5a      	adds	r2, r3, #1
 8015e20:	b291      	uxth	r1, r2
 8015e22:	4a13      	ldr	r2, [pc, #76]	; (8015e70 <tcp_get_next_optbyte+0x5c>)
 8015e24:	8011      	strh	r1, [r2, #0]
 8015e26:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015e28:	4b12      	ldr	r3, [pc, #72]	; (8015e74 <tcp_get_next_optbyte+0x60>)
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d004      	beq.n	8015e3a <tcp_get_next_optbyte+0x26>
 8015e30:	4b11      	ldr	r3, [pc, #68]	; (8015e78 <tcp_get_next_optbyte+0x64>)
 8015e32:	881b      	ldrh	r3, [r3, #0]
 8015e34:	88fa      	ldrh	r2, [r7, #6]
 8015e36:	429a      	cmp	r2, r3
 8015e38:	d208      	bcs.n	8015e4c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015e3a:	4b10      	ldr	r3, [pc, #64]	; (8015e7c <tcp_get_next_optbyte+0x68>)
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	3314      	adds	r3, #20
 8015e40:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015e42:	88fb      	ldrh	r3, [r7, #6]
 8015e44:	683a      	ldr	r2, [r7, #0]
 8015e46:	4413      	add	r3, r2
 8015e48:	781b      	ldrb	r3, [r3, #0]
 8015e4a:	e00b      	b.n	8015e64 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015e4c:	88fb      	ldrh	r3, [r7, #6]
 8015e4e:	b2da      	uxtb	r2, r3
 8015e50:	4b09      	ldr	r3, [pc, #36]	; (8015e78 <tcp_get_next_optbyte+0x64>)
 8015e52:	881b      	ldrh	r3, [r3, #0]
 8015e54:	b2db      	uxtb	r3, r3
 8015e56:	1ad3      	subs	r3, r2, r3
 8015e58:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015e5a:	4b06      	ldr	r3, [pc, #24]	; (8015e74 <tcp_get_next_optbyte+0x60>)
 8015e5c:	681a      	ldr	r2, [r3, #0]
 8015e5e:	797b      	ldrb	r3, [r7, #5]
 8015e60:	4413      	add	r3, r2
 8015e62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015e64:	4618      	mov	r0, r3
 8015e66:	370c      	adds	r7, #12
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e6e:	4770      	bx	lr
 8015e70:	20003198 	.word	0x20003198
 8015e74:	20003194 	.word	0x20003194
 8015e78:	20003192 	.word	0x20003192
 8015e7c:	2000318c 	.word	0x2000318c

08015e80 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	b084      	sub	sp, #16
 8015e84:	af00      	add	r7, sp, #0
 8015e86:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d106      	bne.n	8015e9c <tcp_parseopt+0x1c>
 8015e8e:	4b32      	ldr	r3, [pc, #200]	; (8015f58 <tcp_parseopt+0xd8>)
 8015e90:	f240 727d 	movw	r2, #1917	; 0x77d
 8015e94:	4931      	ldr	r1, [pc, #196]	; (8015f5c <tcp_parseopt+0xdc>)
 8015e96:	4832      	ldr	r0, [pc, #200]	; (8015f60 <tcp_parseopt+0xe0>)
 8015e98:	f004 fd06 	bl	801a8a8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015e9c:	4b31      	ldr	r3, [pc, #196]	; (8015f64 <tcp_parseopt+0xe4>)
 8015e9e:	881b      	ldrh	r3, [r3, #0]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d055      	beq.n	8015f50 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015ea4:	4b30      	ldr	r3, [pc, #192]	; (8015f68 <tcp_parseopt+0xe8>)
 8015ea6:	2200      	movs	r2, #0
 8015ea8:	801a      	strh	r2, [r3, #0]
 8015eaa:	e045      	b.n	8015f38 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8015eac:	f7ff ffb2 	bl	8015e14 <tcp_get_next_optbyte>
 8015eb0:	4603      	mov	r3, r0
 8015eb2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015eb4:	7bfb      	ldrb	r3, [r7, #15]
 8015eb6:	2b02      	cmp	r3, #2
 8015eb8:	d006      	beq.n	8015ec8 <tcp_parseopt+0x48>
 8015eba:	2b02      	cmp	r3, #2
 8015ebc:	dc2b      	bgt.n	8015f16 <tcp_parseopt+0x96>
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d041      	beq.n	8015f46 <tcp_parseopt+0xc6>
 8015ec2:	2b01      	cmp	r3, #1
 8015ec4:	d127      	bne.n	8015f16 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8015ec6:	e037      	b.n	8015f38 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015ec8:	f7ff ffa4 	bl	8015e14 <tcp_get_next_optbyte>
 8015ecc:	4603      	mov	r3, r0
 8015ece:	2b04      	cmp	r3, #4
 8015ed0:	d13b      	bne.n	8015f4a <tcp_parseopt+0xca>
 8015ed2:	4b25      	ldr	r3, [pc, #148]	; (8015f68 <tcp_parseopt+0xe8>)
 8015ed4:	881b      	ldrh	r3, [r3, #0]
 8015ed6:	3301      	adds	r3, #1
 8015ed8:	4a22      	ldr	r2, [pc, #136]	; (8015f64 <tcp_parseopt+0xe4>)
 8015eda:	8812      	ldrh	r2, [r2, #0]
 8015edc:	4293      	cmp	r3, r2
 8015ede:	da34      	bge.n	8015f4a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015ee0:	f7ff ff98 	bl	8015e14 <tcp_get_next_optbyte>
 8015ee4:	4603      	mov	r3, r0
 8015ee6:	b29b      	uxth	r3, r3
 8015ee8:	021b      	lsls	r3, r3, #8
 8015eea:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015eec:	f7ff ff92 	bl	8015e14 <tcp_get_next_optbyte>
 8015ef0:	4603      	mov	r3, r0
 8015ef2:	b29a      	uxth	r2, r3
 8015ef4:	89bb      	ldrh	r3, [r7, #12]
 8015ef6:	4313      	orrs	r3, r2
 8015ef8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015efa:	89bb      	ldrh	r3, [r7, #12]
 8015efc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015f00:	d804      	bhi.n	8015f0c <tcp_parseopt+0x8c>
 8015f02:	89bb      	ldrh	r3, [r7, #12]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d001      	beq.n	8015f0c <tcp_parseopt+0x8c>
 8015f08:	89ba      	ldrh	r2, [r7, #12]
 8015f0a:	e001      	b.n	8015f10 <tcp_parseopt+0x90>
 8015f0c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8015f14:	e010      	b.n	8015f38 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015f16:	f7ff ff7d 	bl	8015e14 <tcp_get_next_optbyte>
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015f1e:	7afb      	ldrb	r3, [r7, #11]
 8015f20:	2b01      	cmp	r3, #1
 8015f22:	d914      	bls.n	8015f4e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015f24:	7afb      	ldrb	r3, [r7, #11]
 8015f26:	b29a      	uxth	r2, r3
 8015f28:	4b0f      	ldr	r3, [pc, #60]	; (8015f68 <tcp_parseopt+0xe8>)
 8015f2a:	881b      	ldrh	r3, [r3, #0]
 8015f2c:	4413      	add	r3, r2
 8015f2e:	b29b      	uxth	r3, r3
 8015f30:	3b02      	subs	r3, #2
 8015f32:	b29a      	uxth	r2, r3
 8015f34:	4b0c      	ldr	r3, [pc, #48]	; (8015f68 <tcp_parseopt+0xe8>)
 8015f36:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015f38:	4b0b      	ldr	r3, [pc, #44]	; (8015f68 <tcp_parseopt+0xe8>)
 8015f3a:	881a      	ldrh	r2, [r3, #0]
 8015f3c:	4b09      	ldr	r3, [pc, #36]	; (8015f64 <tcp_parseopt+0xe4>)
 8015f3e:	881b      	ldrh	r3, [r3, #0]
 8015f40:	429a      	cmp	r2, r3
 8015f42:	d3b3      	bcc.n	8015eac <tcp_parseopt+0x2c>
 8015f44:	e004      	b.n	8015f50 <tcp_parseopt+0xd0>
          return;
 8015f46:	bf00      	nop
 8015f48:	e002      	b.n	8015f50 <tcp_parseopt+0xd0>
            return;
 8015f4a:	bf00      	nop
 8015f4c:	e000      	b.n	8015f50 <tcp_parseopt+0xd0>
            return;
 8015f4e:	bf00      	nop
      }
    }
  }
}
 8015f50:	3710      	adds	r7, #16
 8015f52:	46bd      	mov	sp, r7
 8015f54:	bd80      	pop	{r7, pc}
 8015f56:	bf00      	nop
 8015f58:	0801d120 	.word	0x0801d120
 8015f5c:	0801d584 	.word	0x0801d584
 8015f60:	0801d16c 	.word	0x0801d16c
 8015f64:	20003190 	.word	0x20003190
 8015f68:	20003198 	.word	0x20003198

08015f6c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015f6c:	b480      	push	{r7}
 8015f6e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015f70:	4b05      	ldr	r3, [pc, #20]	; (8015f88 <tcp_trigger_input_pcb_close+0x1c>)
 8015f72:	781b      	ldrb	r3, [r3, #0]
 8015f74:	f043 0310 	orr.w	r3, r3, #16
 8015f78:	b2da      	uxtb	r2, r3
 8015f7a:	4b03      	ldr	r3, [pc, #12]	; (8015f88 <tcp_trigger_input_pcb_close+0x1c>)
 8015f7c:	701a      	strb	r2, [r3, #0]
}
 8015f7e:	bf00      	nop
 8015f80:	46bd      	mov	sp, r7
 8015f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f86:	4770      	bx	lr
 8015f88:	200031a9 	.word	0x200031a9

08015f8c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b084      	sub	sp, #16
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	60f8      	str	r0, [r7, #12]
 8015f94:	60b9      	str	r1, [r7, #8]
 8015f96:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d00a      	beq.n	8015fb4 <tcp_route+0x28>
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	7a1b      	ldrb	r3, [r3, #8]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d006      	beq.n	8015fb4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	7a1b      	ldrb	r3, [r3, #8]
 8015faa:	4618      	mov	r0, r3
 8015fac:	f7fb fb5e 	bl	801166c <netif_get_by_index>
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	e003      	b.n	8015fbc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015fb4:	6878      	ldr	r0, [r7, #4]
 8015fb6:	f002 fe7d 	bl	8018cb4 <ip4_route>
 8015fba:	4603      	mov	r3, r0
  }
}
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	3710      	adds	r7, #16
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	bd80      	pop	{r7, pc}

08015fc4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015fc4:	b590      	push	{r4, r7, lr}
 8015fc6:	b087      	sub	sp, #28
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	60f8      	str	r0, [r7, #12]
 8015fcc:	60b9      	str	r1, [r7, #8]
 8015fce:	603b      	str	r3, [r7, #0]
 8015fd0:	4613      	mov	r3, r2
 8015fd2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d105      	bne.n	8015fe6 <tcp_create_segment+0x22>
 8015fda:	4b44      	ldr	r3, [pc, #272]	; (80160ec <tcp_create_segment+0x128>)
 8015fdc:	22a3      	movs	r2, #163	; 0xa3
 8015fde:	4944      	ldr	r1, [pc, #272]	; (80160f0 <tcp_create_segment+0x12c>)
 8015fe0:	4844      	ldr	r0, [pc, #272]	; (80160f4 <tcp_create_segment+0x130>)
 8015fe2:	f004 fc61 	bl	801a8a8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015fe6:	68bb      	ldr	r3, [r7, #8]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d105      	bne.n	8015ff8 <tcp_create_segment+0x34>
 8015fec:	4b3f      	ldr	r3, [pc, #252]	; (80160ec <tcp_create_segment+0x128>)
 8015fee:	22a4      	movs	r2, #164	; 0xa4
 8015ff0:	4941      	ldr	r1, [pc, #260]	; (80160f8 <tcp_create_segment+0x134>)
 8015ff2:	4840      	ldr	r0, [pc, #256]	; (80160f4 <tcp_create_segment+0x130>)
 8015ff4:	f004 fc58 	bl	801a8a8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015ff8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015ffc:	009b      	lsls	r3, r3, #2
 8015ffe:	b2db      	uxtb	r3, r3
 8016000:	f003 0304 	and.w	r3, r3, #4
 8016004:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8016006:	2003      	movs	r0, #3
 8016008:	f7fb f832 	bl	8011070 <memp_malloc>
 801600c:	6138      	str	r0, [r7, #16]
 801600e:	693b      	ldr	r3, [r7, #16]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d104      	bne.n	801601e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8016014:	68b8      	ldr	r0, [r7, #8]
 8016016:	f7fb fe89 	bl	8011d2c <pbuf_free>
    return NULL;
 801601a:	2300      	movs	r3, #0
 801601c:	e061      	b.n	80160e2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801601e:	693b      	ldr	r3, [r7, #16]
 8016020:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016024:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8016026:	693b      	ldr	r3, [r7, #16]
 8016028:	2200      	movs	r2, #0
 801602a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801602c:	693b      	ldr	r3, [r7, #16]
 801602e:	68ba      	ldr	r2, [r7, #8]
 8016030:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8016032:	68bb      	ldr	r3, [r7, #8]
 8016034:	891a      	ldrh	r2, [r3, #8]
 8016036:	7dfb      	ldrb	r3, [r7, #23]
 8016038:	b29b      	uxth	r3, r3
 801603a:	429a      	cmp	r2, r3
 801603c:	d205      	bcs.n	801604a <tcp_create_segment+0x86>
 801603e:	4b2b      	ldr	r3, [pc, #172]	; (80160ec <tcp_create_segment+0x128>)
 8016040:	22b0      	movs	r2, #176	; 0xb0
 8016042:	492e      	ldr	r1, [pc, #184]	; (80160fc <tcp_create_segment+0x138>)
 8016044:	482b      	ldr	r0, [pc, #172]	; (80160f4 <tcp_create_segment+0x130>)
 8016046:	f004 fc2f 	bl	801a8a8 <iprintf>
  seg->len = p->tot_len - optlen;
 801604a:	68bb      	ldr	r3, [r7, #8]
 801604c:	891a      	ldrh	r2, [r3, #8]
 801604e:	7dfb      	ldrb	r3, [r7, #23]
 8016050:	b29b      	uxth	r3, r3
 8016052:	1ad3      	subs	r3, r2, r3
 8016054:	b29a      	uxth	r2, r3
 8016056:	693b      	ldr	r3, [r7, #16]
 8016058:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801605a:	2114      	movs	r1, #20
 801605c:	68b8      	ldr	r0, [r7, #8]
 801605e:	f7fb fdcf 	bl	8011c00 <pbuf_add_header>
 8016062:	4603      	mov	r3, r0
 8016064:	2b00      	cmp	r3, #0
 8016066:	d004      	beq.n	8016072 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8016068:	6938      	ldr	r0, [r7, #16]
 801606a:	f7fd f8d2 	bl	8013212 <tcp_seg_free>
    return NULL;
 801606e:	2300      	movs	r3, #0
 8016070:	e037      	b.n	80160e2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8016072:	693b      	ldr	r3, [r7, #16]
 8016074:	685b      	ldr	r3, [r3, #4]
 8016076:	685a      	ldr	r2, [r3, #4]
 8016078:	693b      	ldr	r3, [r7, #16]
 801607a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	8ada      	ldrh	r2, [r3, #22]
 8016080:	693b      	ldr	r3, [r7, #16]
 8016082:	68dc      	ldr	r4, [r3, #12]
 8016084:	4610      	mov	r0, r2
 8016086:	f7fa fb9e 	bl	80107c6 <lwip_htons>
 801608a:	4603      	mov	r3, r0
 801608c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	8b1a      	ldrh	r2, [r3, #24]
 8016092:	693b      	ldr	r3, [r7, #16]
 8016094:	68dc      	ldr	r4, [r3, #12]
 8016096:	4610      	mov	r0, r2
 8016098:	f7fa fb95 	bl	80107c6 <lwip_htons>
 801609c:	4603      	mov	r3, r0
 801609e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80160a0:	693b      	ldr	r3, [r7, #16]
 80160a2:	68dc      	ldr	r4, [r3, #12]
 80160a4:	6838      	ldr	r0, [r7, #0]
 80160a6:	f7fa fba3 	bl	80107f0 <lwip_htonl>
 80160aa:	4603      	mov	r3, r0
 80160ac:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80160ae:	7dfb      	ldrb	r3, [r7, #23]
 80160b0:	089b      	lsrs	r3, r3, #2
 80160b2:	b2db      	uxtb	r3, r3
 80160b4:	b29b      	uxth	r3, r3
 80160b6:	3305      	adds	r3, #5
 80160b8:	b29b      	uxth	r3, r3
 80160ba:	031b      	lsls	r3, r3, #12
 80160bc:	b29a      	uxth	r2, r3
 80160be:	79fb      	ldrb	r3, [r7, #7]
 80160c0:	b29b      	uxth	r3, r3
 80160c2:	4313      	orrs	r3, r2
 80160c4:	b29a      	uxth	r2, r3
 80160c6:	693b      	ldr	r3, [r7, #16]
 80160c8:	68dc      	ldr	r4, [r3, #12]
 80160ca:	4610      	mov	r0, r2
 80160cc:	f7fa fb7b 	bl	80107c6 <lwip_htons>
 80160d0:	4603      	mov	r3, r0
 80160d2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80160d4:	693b      	ldr	r3, [r7, #16]
 80160d6:	68db      	ldr	r3, [r3, #12]
 80160d8:	2200      	movs	r2, #0
 80160da:	749a      	strb	r2, [r3, #18]
 80160dc:	2200      	movs	r2, #0
 80160de:	74da      	strb	r2, [r3, #19]
  return seg;
 80160e0:	693b      	ldr	r3, [r7, #16]
}
 80160e2:	4618      	mov	r0, r3
 80160e4:	371c      	adds	r7, #28
 80160e6:	46bd      	mov	sp, r7
 80160e8:	bd90      	pop	{r4, r7, pc}
 80160ea:	bf00      	nop
 80160ec:	0801d5a0 	.word	0x0801d5a0
 80160f0:	0801d5d4 	.word	0x0801d5d4
 80160f4:	0801d5f4 	.word	0x0801d5f4
 80160f8:	0801d61c 	.word	0x0801d61c
 80160fc:	0801d640 	.word	0x0801d640

08016100 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016100:	b590      	push	{r4, r7, lr}
 8016102:	b08b      	sub	sp, #44	; 0x2c
 8016104:	af02      	add	r7, sp, #8
 8016106:	6078      	str	r0, [r7, #4]
 8016108:	460b      	mov	r3, r1
 801610a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801610c:	2300      	movs	r3, #0
 801610e:	61fb      	str	r3, [r7, #28]
 8016110:	2300      	movs	r3, #0
 8016112:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8016114:	2300      	movs	r3, #0
 8016116:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d106      	bne.n	801612c <tcp_split_unsent_seg+0x2c>
 801611e:	4b95      	ldr	r3, [pc, #596]	; (8016374 <tcp_split_unsent_seg+0x274>)
 8016120:	f240 324b 	movw	r2, #843	; 0x34b
 8016124:	4994      	ldr	r1, [pc, #592]	; (8016378 <tcp_split_unsent_seg+0x278>)
 8016126:	4895      	ldr	r0, [pc, #596]	; (801637c <tcp_split_unsent_seg+0x27c>)
 8016128:	f004 fbbe 	bl	801a8a8 <iprintf>

  useg = pcb->unsent;
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016130:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8016132:	697b      	ldr	r3, [r7, #20]
 8016134:	2b00      	cmp	r3, #0
 8016136:	d102      	bne.n	801613e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016138:	f04f 33ff 	mov.w	r3, #4294967295
 801613c:	e116      	b.n	801636c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801613e:	887b      	ldrh	r3, [r7, #2]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d109      	bne.n	8016158 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016144:	4b8b      	ldr	r3, [pc, #556]	; (8016374 <tcp_split_unsent_seg+0x274>)
 8016146:	f240 3253 	movw	r2, #851	; 0x353
 801614a:	498d      	ldr	r1, [pc, #564]	; (8016380 <tcp_split_unsent_seg+0x280>)
 801614c:	488b      	ldr	r0, [pc, #556]	; (801637c <tcp_split_unsent_seg+0x27c>)
 801614e:	f004 fbab 	bl	801a8a8 <iprintf>
    return ERR_VAL;
 8016152:	f06f 0305 	mvn.w	r3, #5
 8016156:	e109      	b.n	801636c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8016158:	697b      	ldr	r3, [r7, #20]
 801615a:	891b      	ldrh	r3, [r3, #8]
 801615c:	887a      	ldrh	r2, [r7, #2]
 801615e:	429a      	cmp	r2, r3
 8016160:	d301      	bcc.n	8016166 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8016162:	2300      	movs	r3, #0
 8016164:	e102      	b.n	801636c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801616a:	887a      	ldrh	r2, [r7, #2]
 801616c:	429a      	cmp	r2, r3
 801616e:	d906      	bls.n	801617e <tcp_split_unsent_seg+0x7e>
 8016170:	4b80      	ldr	r3, [pc, #512]	; (8016374 <tcp_split_unsent_seg+0x274>)
 8016172:	f240 325b 	movw	r2, #859	; 0x35b
 8016176:	4983      	ldr	r1, [pc, #524]	; (8016384 <tcp_split_unsent_seg+0x284>)
 8016178:	4880      	ldr	r0, [pc, #512]	; (801637c <tcp_split_unsent_seg+0x27c>)
 801617a:	f004 fb95 	bl	801a8a8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801617e:	697b      	ldr	r3, [r7, #20]
 8016180:	891b      	ldrh	r3, [r3, #8]
 8016182:	2b00      	cmp	r3, #0
 8016184:	d106      	bne.n	8016194 <tcp_split_unsent_seg+0x94>
 8016186:	4b7b      	ldr	r3, [pc, #492]	; (8016374 <tcp_split_unsent_seg+0x274>)
 8016188:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801618c:	497e      	ldr	r1, [pc, #504]	; (8016388 <tcp_split_unsent_seg+0x288>)
 801618e:	487b      	ldr	r0, [pc, #492]	; (801637c <tcp_split_unsent_seg+0x27c>)
 8016190:	f004 fb8a 	bl	801a8a8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8016194:	697b      	ldr	r3, [r7, #20]
 8016196:	7a9b      	ldrb	r3, [r3, #10]
 8016198:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801619a:	7bfb      	ldrb	r3, [r7, #15]
 801619c:	009b      	lsls	r3, r3, #2
 801619e:	b2db      	uxtb	r3, r3
 80161a0:	f003 0304 	and.w	r3, r3, #4
 80161a4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80161a6:	697b      	ldr	r3, [r7, #20]
 80161a8:	891a      	ldrh	r2, [r3, #8]
 80161aa:	887b      	ldrh	r3, [r7, #2]
 80161ac:	1ad3      	subs	r3, r2, r3
 80161ae:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80161b0:	7bbb      	ldrb	r3, [r7, #14]
 80161b2:	b29a      	uxth	r2, r3
 80161b4:	89bb      	ldrh	r3, [r7, #12]
 80161b6:	4413      	add	r3, r2
 80161b8:	b29b      	uxth	r3, r3
 80161ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80161be:	4619      	mov	r1, r3
 80161c0:	2036      	movs	r0, #54	; 0x36
 80161c2:	f7fb facf 	bl	8011764 <pbuf_alloc>
 80161c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80161c8:	693b      	ldr	r3, [r7, #16]
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	f000 80b7 	beq.w	801633e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80161d0:	697b      	ldr	r3, [r7, #20]
 80161d2:	685b      	ldr	r3, [r3, #4]
 80161d4:	891a      	ldrh	r2, [r3, #8]
 80161d6:	697b      	ldr	r3, [r7, #20]
 80161d8:	891b      	ldrh	r3, [r3, #8]
 80161da:	1ad3      	subs	r3, r2, r3
 80161dc:	b29a      	uxth	r2, r3
 80161de:	887b      	ldrh	r3, [r7, #2]
 80161e0:	4413      	add	r3, r2
 80161e2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80161e4:	697b      	ldr	r3, [r7, #20]
 80161e6:	6858      	ldr	r0, [r3, #4]
 80161e8:	693b      	ldr	r3, [r7, #16]
 80161ea:	685a      	ldr	r2, [r3, #4]
 80161ec:	7bbb      	ldrb	r3, [r7, #14]
 80161ee:	18d1      	adds	r1, r2, r3
 80161f0:	897b      	ldrh	r3, [r7, #10]
 80161f2:	89ba      	ldrh	r2, [r7, #12]
 80161f4:	f7fb ff84 	bl	8012100 <pbuf_copy_partial>
 80161f8:	4603      	mov	r3, r0
 80161fa:	461a      	mov	r2, r3
 80161fc:	89bb      	ldrh	r3, [r7, #12]
 80161fe:	4293      	cmp	r3, r2
 8016200:	f040 809f 	bne.w	8016342 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016204:	697b      	ldr	r3, [r7, #20]
 8016206:	68db      	ldr	r3, [r3, #12]
 8016208:	899b      	ldrh	r3, [r3, #12]
 801620a:	b29b      	uxth	r3, r3
 801620c:	4618      	mov	r0, r3
 801620e:	f7fa fada 	bl	80107c6 <lwip_htons>
 8016212:	4603      	mov	r3, r0
 8016214:	b2db      	uxtb	r3, r3
 8016216:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801621a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801621c:	2300      	movs	r3, #0
 801621e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016220:	7efb      	ldrb	r3, [r7, #27]
 8016222:	f003 0308 	and.w	r3, r3, #8
 8016226:	2b00      	cmp	r3, #0
 8016228:	d007      	beq.n	801623a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801622a:	7efb      	ldrb	r3, [r7, #27]
 801622c:	f023 0308 	bic.w	r3, r3, #8
 8016230:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016232:	7ebb      	ldrb	r3, [r7, #26]
 8016234:	f043 0308 	orr.w	r3, r3, #8
 8016238:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801623a:	7efb      	ldrb	r3, [r7, #27]
 801623c:	f003 0301 	and.w	r3, r3, #1
 8016240:	2b00      	cmp	r3, #0
 8016242:	d007      	beq.n	8016254 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016244:	7efb      	ldrb	r3, [r7, #27]
 8016246:	f023 0301 	bic.w	r3, r3, #1
 801624a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801624c:	7ebb      	ldrb	r3, [r7, #26]
 801624e:	f043 0301 	orr.w	r3, r3, #1
 8016252:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016254:	697b      	ldr	r3, [r7, #20]
 8016256:	68db      	ldr	r3, [r3, #12]
 8016258:	685b      	ldr	r3, [r3, #4]
 801625a:	4618      	mov	r0, r3
 801625c:	f7fa fac8 	bl	80107f0 <lwip_htonl>
 8016260:	4602      	mov	r2, r0
 8016262:	887b      	ldrh	r3, [r7, #2]
 8016264:	18d1      	adds	r1, r2, r3
 8016266:	7eba      	ldrb	r2, [r7, #26]
 8016268:	7bfb      	ldrb	r3, [r7, #15]
 801626a:	9300      	str	r3, [sp, #0]
 801626c:	460b      	mov	r3, r1
 801626e:	6939      	ldr	r1, [r7, #16]
 8016270:	6878      	ldr	r0, [r7, #4]
 8016272:	f7ff fea7 	bl	8015fc4 <tcp_create_segment>
 8016276:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016278:	69fb      	ldr	r3, [r7, #28]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d063      	beq.n	8016346 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801627e:	697b      	ldr	r3, [r7, #20]
 8016280:	685b      	ldr	r3, [r3, #4]
 8016282:	4618      	mov	r0, r3
 8016284:	f7fb fdda 	bl	8011e3c <pbuf_clen>
 8016288:	4603      	mov	r3, r0
 801628a:	461a      	mov	r2, r3
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016292:	1a9b      	subs	r3, r3, r2
 8016294:	b29a      	uxth	r2, r3
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801629c:	697b      	ldr	r3, [r7, #20]
 801629e:	6858      	ldr	r0, [r3, #4]
 80162a0:	697b      	ldr	r3, [r7, #20]
 80162a2:	685b      	ldr	r3, [r3, #4]
 80162a4:	891a      	ldrh	r2, [r3, #8]
 80162a6:	89bb      	ldrh	r3, [r7, #12]
 80162a8:	1ad3      	subs	r3, r2, r3
 80162aa:	b29b      	uxth	r3, r3
 80162ac:	4619      	mov	r1, r3
 80162ae:	f7fb fbb7 	bl	8011a20 <pbuf_realloc>
  useg->len -= remainder;
 80162b2:	697b      	ldr	r3, [r7, #20]
 80162b4:	891a      	ldrh	r2, [r3, #8]
 80162b6:	89bb      	ldrh	r3, [r7, #12]
 80162b8:	1ad3      	subs	r3, r2, r3
 80162ba:	b29a      	uxth	r2, r3
 80162bc:	697b      	ldr	r3, [r7, #20]
 80162be:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80162c0:	697b      	ldr	r3, [r7, #20]
 80162c2:	68db      	ldr	r3, [r3, #12]
 80162c4:	899b      	ldrh	r3, [r3, #12]
 80162c6:	b29c      	uxth	r4, r3
 80162c8:	7efb      	ldrb	r3, [r7, #27]
 80162ca:	b29b      	uxth	r3, r3
 80162cc:	4618      	mov	r0, r3
 80162ce:	f7fa fa7a 	bl	80107c6 <lwip_htons>
 80162d2:	4603      	mov	r3, r0
 80162d4:	461a      	mov	r2, r3
 80162d6:	697b      	ldr	r3, [r7, #20]
 80162d8:	68db      	ldr	r3, [r3, #12]
 80162da:	4322      	orrs	r2, r4
 80162dc:	b292      	uxth	r2, r2
 80162de:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80162e0:	697b      	ldr	r3, [r7, #20]
 80162e2:	685b      	ldr	r3, [r3, #4]
 80162e4:	4618      	mov	r0, r3
 80162e6:	f7fb fda9 	bl	8011e3c <pbuf_clen>
 80162ea:	4603      	mov	r3, r0
 80162ec:	461a      	mov	r2, r3
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80162f4:	4413      	add	r3, r2
 80162f6:	b29a      	uxth	r2, r3
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80162fe:	69fb      	ldr	r3, [r7, #28]
 8016300:	685b      	ldr	r3, [r3, #4]
 8016302:	4618      	mov	r0, r3
 8016304:	f7fb fd9a 	bl	8011e3c <pbuf_clen>
 8016308:	4603      	mov	r3, r0
 801630a:	461a      	mov	r2, r3
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016312:	4413      	add	r3, r2
 8016314:	b29a      	uxth	r2, r3
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801631c:	697b      	ldr	r3, [r7, #20]
 801631e:	681a      	ldr	r2, [r3, #0]
 8016320:	69fb      	ldr	r3, [r7, #28]
 8016322:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016324:	697b      	ldr	r3, [r7, #20]
 8016326:	69fa      	ldr	r2, [r7, #28]
 8016328:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801632a:	69fb      	ldr	r3, [r7, #28]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d103      	bne.n	801633a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	2200      	movs	r2, #0
 8016336:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801633a:	2300      	movs	r3, #0
 801633c:	e016      	b.n	801636c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801633e:	bf00      	nop
 8016340:	e002      	b.n	8016348 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016342:	bf00      	nop
 8016344:	e000      	b.n	8016348 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016346:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016348:	69fb      	ldr	r3, [r7, #28]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d006      	beq.n	801635c <tcp_split_unsent_seg+0x25c>
 801634e:	4b09      	ldr	r3, [pc, #36]	; (8016374 <tcp_split_unsent_seg+0x274>)
 8016350:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8016354:	490d      	ldr	r1, [pc, #52]	; (801638c <tcp_split_unsent_seg+0x28c>)
 8016356:	4809      	ldr	r0, [pc, #36]	; (801637c <tcp_split_unsent_seg+0x27c>)
 8016358:	f004 faa6 	bl	801a8a8 <iprintf>
  if (p != NULL) {
 801635c:	693b      	ldr	r3, [r7, #16]
 801635e:	2b00      	cmp	r3, #0
 8016360:	d002      	beq.n	8016368 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016362:	6938      	ldr	r0, [r7, #16]
 8016364:	f7fb fce2 	bl	8011d2c <pbuf_free>
  }

  return ERR_MEM;
 8016368:	f04f 33ff 	mov.w	r3, #4294967295
}
 801636c:	4618      	mov	r0, r3
 801636e:	3724      	adds	r7, #36	; 0x24
 8016370:	46bd      	mov	sp, r7
 8016372:	bd90      	pop	{r4, r7, pc}
 8016374:	0801d5a0 	.word	0x0801d5a0
 8016378:	0801d934 	.word	0x0801d934
 801637c:	0801d5f4 	.word	0x0801d5f4
 8016380:	0801d958 	.word	0x0801d958
 8016384:	0801d97c 	.word	0x0801d97c
 8016388:	0801d98c 	.word	0x0801d98c
 801638c:	0801d99c 	.word	0x0801d99c

08016390 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016390:	b590      	push	{r4, r7, lr}
 8016392:	b085      	sub	sp, #20
 8016394:	af00      	add	r7, sp, #0
 8016396:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d106      	bne.n	80163ac <tcp_send_fin+0x1c>
 801639e:	4b21      	ldr	r3, [pc, #132]	; (8016424 <tcp_send_fin+0x94>)
 80163a0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80163a4:	4920      	ldr	r1, [pc, #128]	; (8016428 <tcp_send_fin+0x98>)
 80163a6:	4821      	ldr	r0, [pc, #132]	; (801642c <tcp_send_fin+0x9c>)
 80163a8:	f004 fa7e 	bl	801a8a8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d02e      	beq.n	8016412 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80163b8:	60fb      	str	r3, [r7, #12]
 80163ba:	e002      	b.n	80163c2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d1f8      	bne.n	80163bc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	68db      	ldr	r3, [r3, #12]
 80163ce:	899b      	ldrh	r3, [r3, #12]
 80163d0:	b29b      	uxth	r3, r3
 80163d2:	4618      	mov	r0, r3
 80163d4:	f7fa f9f7 	bl	80107c6 <lwip_htons>
 80163d8:	4603      	mov	r3, r0
 80163da:	b2db      	uxtb	r3, r3
 80163dc:	f003 0307 	and.w	r3, r3, #7
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d116      	bne.n	8016412 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	68db      	ldr	r3, [r3, #12]
 80163e8:	899b      	ldrh	r3, [r3, #12]
 80163ea:	b29c      	uxth	r4, r3
 80163ec:	2001      	movs	r0, #1
 80163ee:	f7fa f9ea 	bl	80107c6 <lwip_htons>
 80163f2:	4603      	mov	r3, r0
 80163f4:	461a      	mov	r2, r3
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	68db      	ldr	r3, [r3, #12]
 80163fa:	4322      	orrs	r2, r4
 80163fc:	b292      	uxth	r2, r2
 80163fe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	8b5b      	ldrh	r3, [r3, #26]
 8016404:	f043 0320 	orr.w	r3, r3, #32
 8016408:	b29a      	uxth	r2, r3
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801640e:	2300      	movs	r3, #0
 8016410:	e004      	b.n	801641c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016412:	2101      	movs	r1, #1
 8016414:	6878      	ldr	r0, [r7, #4]
 8016416:	f000 f80b 	bl	8016430 <tcp_enqueue_flags>
 801641a:	4603      	mov	r3, r0
}
 801641c:	4618      	mov	r0, r3
 801641e:	3714      	adds	r7, #20
 8016420:	46bd      	mov	sp, r7
 8016422:	bd90      	pop	{r4, r7, pc}
 8016424:	0801d5a0 	.word	0x0801d5a0
 8016428:	0801d9a8 	.word	0x0801d9a8
 801642c:	0801d5f4 	.word	0x0801d5f4

08016430 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016430:	b580      	push	{r7, lr}
 8016432:	b08a      	sub	sp, #40	; 0x28
 8016434:	af02      	add	r7, sp, #8
 8016436:	6078      	str	r0, [r7, #4]
 8016438:	460b      	mov	r3, r1
 801643a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801643c:	2300      	movs	r3, #0
 801643e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016440:	2300      	movs	r3, #0
 8016442:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016444:	78fb      	ldrb	r3, [r7, #3]
 8016446:	f003 0303 	and.w	r3, r3, #3
 801644a:	2b00      	cmp	r3, #0
 801644c:	d106      	bne.n	801645c <tcp_enqueue_flags+0x2c>
 801644e:	4b67      	ldr	r3, [pc, #412]	; (80165ec <tcp_enqueue_flags+0x1bc>)
 8016450:	f240 4211 	movw	r2, #1041	; 0x411
 8016454:	4966      	ldr	r1, [pc, #408]	; (80165f0 <tcp_enqueue_flags+0x1c0>)
 8016456:	4867      	ldr	r0, [pc, #412]	; (80165f4 <tcp_enqueue_flags+0x1c4>)
 8016458:	f004 fa26 	bl	801a8a8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	2b00      	cmp	r3, #0
 8016460:	d106      	bne.n	8016470 <tcp_enqueue_flags+0x40>
 8016462:	4b62      	ldr	r3, [pc, #392]	; (80165ec <tcp_enqueue_flags+0x1bc>)
 8016464:	f240 4213 	movw	r2, #1043	; 0x413
 8016468:	4963      	ldr	r1, [pc, #396]	; (80165f8 <tcp_enqueue_flags+0x1c8>)
 801646a:	4862      	ldr	r0, [pc, #392]	; (80165f4 <tcp_enqueue_flags+0x1c4>)
 801646c:	f004 fa1c 	bl	801a8a8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016470:	78fb      	ldrb	r3, [r7, #3]
 8016472:	f003 0302 	and.w	r3, r3, #2
 8016476:	2b00      	cmp	r3, #0
 8016478:	d001      	beq.n	801647e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801647a:	2301      	movs	r3, #1
 801647c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801647e:	7ffb      	ldrb	r3, [r7, #31]
 8016480:	009b      	lsls	r3, r3, #2
 8016482:	b2db      	uxtb	r3, r3
 8016484:	f003 0304 	and.w	r3, r3, #4
 8016488:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801648a:	7dfb      	ldrb	r3, [r7, #23]
 801648c:	b29b      	uxth	r3, r3
 801648e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016492:	4619      	mov	r1, r3
 8016494:	2036      	movs	r0, #54	; 0x36
 8016496:	f7fb f965 	bl	8011764 <pbuf_alloc>
 801649a:	6138      	str	r0, [r7, #16]
 801649c:	693b      	ldr	r3, [r7, #16]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d109      	bne.n	80164b6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	8b5b      	ldrh	r3, [r3, #26]
 80164a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80164aa:	b29a      	uxth	r2, r3
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80164b0:	f04f 33ff 	mov.w	r3, #4294967295
 80164b4:	e095      	b.n	80165e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80164b6:	693b      	ldr	r3, [r7, #16]
 80164b8:	895a      	ldrh	r2, [r3, #10]
 80164ba:	7dfb      	ldrb	r3, [r7, #23]
 80164bc:	b29b      	uxth	r3, r3
 80164be:	429a      	cmp	r2, r3
 80164c0:	d206      	bcs.n	80164d0 <tcp_enqueue_flags+0xa0>
 80164c2:	4b4a      	ldr	r3, [pc, #296]	; (80165ec <tcp_enqueue_flags+0x1bc>)
 80164c4:	f240 4239 	movw	r2, #1081	; 0x439
 80164c8:	494c      	ldr	r1, [pc, #304]	; (80165fc <tcp_enqueue_flags+0x1cc>)
 80164ca:	484a      	ldr	r0, [pc, #296]	; (80165f4 <tcp_enqueue_flags+0x1c4>)
 80164cc:	f004 f9ec 	bl	801a8a8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80164d4:	78fa      	ldrb	r2, [r7, #3]
 80164d6:	7ffb      	ldrb	r3, [r7, #31]
 80164d8:	9300      	str	r3, [sp, #0]
 80164da:	460b      	mov	r3, r1
 80164dc:	6939      	ldr	r1, [r7, #16]
 80164de:	6878      	ldr	r0, [r7, #4]
 80164e0:	f7ff fd70 	bl	8015fc4 <tcp_create_segment>
 80164e4:	60f8      	str	r0, [r7, #12]
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d109      	bne.n	8016500 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	8b5b      	ldrh	r3, [r3, #26]
 80164f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80164f4:	b29a      	uxth	r2, r3
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80164fa:	f04f 33ff 	mov.w	r3, #4294967295
 80164fe:	e070      	b.n	80165e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	68db      	ldr	r3, [r3, #12]
 8016504:	f003 0303 	and.w	r3, r3, #3
 8016508:	2b00      	cmp	r3, #0
 801650a:	d006      	beq.n	801651a <tcp_enqueue_flags+0xea>
 801650c:	4b37      	ldr	r3, [pc, #220]	; (80165ec <tcp_enqueue_flags+0x1bc>)
 801650e:	f240 4242 	movw	r2, #1090	; 0x442
 8016512:	493b      	ldr	r1, [pc, #236]	; (8016600 <tcp_enqueue_flags+0x1d0>)
 8016514:	4837      	ldr	r0, [pc, #220]	; (80165f4 <tcp_enqueue_flags+0x1c4>)
 8016516:	f004 f9c7 	bl	801a8a8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	891b      	ldrh	r3, [r3, #8]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d006      	beq.n	8016530 <tcp_enqueue_flags+0x100>
 8016522:	4b32      	ldr	r3, [pc, #200]	; (80165ec <tcp_enqueue_flags+0x1bc>)
 8016524:	f240 4243 	movw	r2, #1091	; 0x443
 8016528:	4936      	ldr	r1, [pc, #216]	; (8016604 <tcp_enqueue_flags+0x1d4>)
 801652a:	4832      	ldr	r0, [pc, #200]	; (80165f4 <tcp_enqueue_flags+0x1c4>)
 801652c:	f004 f9bc 	bl	801a8a8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016534:	2b00      	cmp	r3, #0
 8016536:	d103      	bne.n	8016540 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	68fa      	ldr	r2, [r7, #12]
 801653c:	66da      	str	r2, [r3, #108]	; 0x6c
 801653e:	e00d      	b.n	801655c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016544:	61bb      	str	r3, [r7, #24]
 8016546:	e002      	b.n	801654e <tcp_enqueue_flags+0x11e>
 8016548:	69bb      	ldr	r3, [r7, #24]
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	61bb      	str	r3, [r7, #24]
 801654e:	69bb      	ldr	r3, [r7, #24]
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	2b00      	cmp	r3, #0
 8016554:	d1f8      	bne.n	8016548 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016556:	69bb      	ldr	r3, [r7, #24]
 8016558:	68fa      	ldr	r2, [r7, #12]
 801655a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	2200      	movs	r2, #0
 8016560:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016564:	78fb      	ldrb	r3, [r7, #3]
 8016566:	f003 0302 	and.w	r3, r3, #2
 801656a:	2b00      	cmp	r3, #0
 801656c:	d104      	bne.n	8016578 <tcp_enqueue_flags+0x148>
 801656e:	78fb      	ldrb	r3, [r7, #3]
 8016570:	f003 0301 	and.w	r3, r3, #1
 8016574:	2b00      	cmp	r3, #0
 8016576:	d004      	beq.n	8016582 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801657c:	1c5a      	adds	r2, r3, #1
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016582:	78fb      	ldrb	r3, [r7, #3]
 8016584:	f003 0301 	and.w	r3, r3, #1
 8016588:	2b00      	cmp	r3, #0
 801658a:	d006      	beq.n	801659a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	8b5b      	ldrh	r3, [r3, #26]
 8016590:	f043 0320 	orr.w	r3, r3, #32
 8016594:	b29a      	uxth	r2, r3
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	685b      	ldr	r3, [r3, #4]
 801659e:	4618      	mov	r0, r3
 80165a0:	f7fb fc4c 	bl	8011e3c <pbuf_clen>
 80165a4:	4603      	mov	r3, r0
 80165a6:	461a      	mov	r2, r3
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80165ae:	4413      	add	r3, r2
 80165b0:	b29a      	uxth	r2, r3
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d00e      	beq.n	80165e0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d10a      	bne.n	80165e0 <tcp_enqueue_flags+0x1b0>
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d106      	bne.n	80165e0 <tcp_enqueue_flags+0x1b0>
 80165d2:	4b06      	ldr	r3, [pc, #24]	; (80165ec <tcp_enqueue_flags+0x1bc>)
 80165d4:	f240 4265 	movw	r2, #1125	; 0x465
 80165d8:	490b      	ldr	r1, [pc, #44]	; (8016608 <tcp_enqueue_flags+0x1d8>)
 80165da:	4806      	ldr	r0, [pc, #24]	; (80165f4 <tcp_enqueue_flags+0x1c4>)
 80165dc:	f004 f964 	bl	801a8a8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80165e0:	2300      	movs	r3, #0
}
 80165e2:	4618      	mov	r0, r3
 80165e4:	3720      	adds	r7, #32
 80165e6:	46bd      	mov	sp, r7
 80165e8:	bd80      	pop	{r7, pc}
 80165ea:	bf00      	nop
 80165ec:	0801d5a0 	.word	0x0801d5a0
 80165f0:	0801d9c4 	.word	0x0801d9c4
 80165f4:	0801d5f4 	.word	0x0801d5f4
 80165f8:	0801da1c 	.word	0x0801da1c
 80165fc:	0801da3c 	.word	0x0801da3c
 8016600:	0801da78 	.word	0x0801da78
 8016604:	0801da90 	.word	0x0801da90
 8016608:	0801dabc 	.word	0x0801dabc

0801660c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801660c:	b5b0      	push	{r4, r5, r7, lr}
 801660e:	b08a      	sub	sp, #40	; 0x28
 8016610:	af00      	add	r7, sp, #0
 8016612:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d106      	bne.n	8016628 <tcp_output+0x1c>
 801661a:	4b9e      	ldr	r3, [pc, #632]	; (8016894 <tcp_output+0x288>)
 801661c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8016620:	499d      	ldr	r1, [pc, #628]	; (8016898 <tcp_output+0x28c>)
 8016622:	489e      	ldr	r0, [pc, #632]	; (801689c <tcp_output+0x290>)
 8016624:	f004 f940 	bl	801a8a8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	7d1b      	ldrb	r3, [r3, #20]
 801662c:	2b01      	cmp	r3, #1
 801662e:	d106      	bne.n	801663e <tcp_output+0x32>
 8016630:	4b98      	ldr	r3, [pc, #608]	; (8016894 <tcp_output+0x288>)
 8016632:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8016636:	499a      	ldr	r1, [pc, #616]	; (80168a0 <tcp_output+0x294>)
 8016638:	4898      	ldr	r0, [pc, #608]	; (801689c <tcp_output+0x290>)
 801663a:	f004 f935 	bl	801a8a8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801663e:	4b99      	ldr	r3, [pc, #612]	; (80168a4 <tcp_output+0x298>)
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	687a      	ldr	r2, [r7, #4]
 8016644:	429a      	cmp	r2, r3
 8016646:	d101      	bne.n	801664c <tcp_output+0x40>
    return ERR_OK;
 8016648:	2300      	movs	r3, #0
 801664a:	e1ce      	b.n	80169ea <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016658:	4293      	cmp	r3, r2
 801665a:	bf28      	it	cs
 801665c:	4613      	movcs	r3, r2
 801665e:	b29b      	uxth	r3, r3
 8016660:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016666:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8016668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801666a:	2b00      	cmp	r3, #0
 801666c:	d10b      	bne.n	8016686 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	8b5b      	ldrh	r3, [r3, #26]
 8016672:	f003 0302 	and.w	r3, r3, #2
 8016676:	2b00      	cmp	r3, #0
 8016678:	f000 81aa 	beq.w	80169d0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801667c:	6878      	ldr	r0, [r7, #4]
 801667e:	f000 fdcb 	bl	8017218 <tcp_send_empty_ack>
 8016682:	4603      	mov	r3, r0
 8016684:	e1b1      	b.n	80169ea <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016686:	6879      	ldr	r1, [r7, #4]
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	3304      	adds	r3, #4
 801668c:	461a      	mov	r2, r3
 801668e:	6878      	ldr	r0, [r7, #4]
 8016690:	f7ff fc7c 	bl	8015f8c <tcp_route>
 8016694:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016696:	697b      	ldr	r3, [r7, #20]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d102      	bne.n	80166a2 <tcp_output+0x96>
    return ERR_RTE;
 801669c:	f06f 0303 	mvn.w	r3, #3
 80166a0:	e1a3      	b.n	80169ea <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d003      	beq.n	80166b0 <tcp_output+0xa4>
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d111      	bne.n	80166d4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80166b0:	697b      	ldr	r3, [r7, #20]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d002      	beq.n	80166bc <tcp_output+0xb0>
 80166b6:	697b      	ldr	r3, [r7, #20]
 80166b8:	3304      	adds	r3, #4
 80166ba:	e000      	b.n	80166be <tcp_output+0xb2>
 80166bc:	2300      	movs	r3, #0
 80166be:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80166c0:	693b      	ldr	r3, [r7, #16]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d102      	bne.n	80166cc <tcp_output+0xc0>
      return ERR_RTE;
 80166c6:	f06f 0303 	mvn.w	r3, #3
 80166ca:	e18e      	b.n	80169ea <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80166cc:	693b      	ldr	r3, [r7, #16]
 80166ce:	681a      	ldr	r2, [r3, #0]
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80166d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d6:	68db      	ldr	r3, [r3, #12]
 80166d8:	685b      	ldr	r3, [r3, #4]
 80166da:	4618      	mov	r0, r3
 80166dc:	f7fa f888 	bl	80107f0 <lwip_htonl>
 80166e0:	4602      	mov	r2, r0
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80166e6:	1ad3      	subs	r3, r2, r3
 80166e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80166ea:	8912      	ldrh	r2, [r2, #8]
 80166ec:	4413      	add	r3, r2
 80166ee:	69ba      	ldr	r2, [r7, #24]
 80166f0:	429a      	cmp	r2, r3
 80166f2:	d227      	bcs.n	8016744 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80166fa:	461a      	mov	r2, r3
 80166fc:	69bb      	ldr	r3, [r7, #24]
 80166fe:	4293      	cmp	r3, r2
 8016700:	d114      	bne.n	801672c <tcp_output+0x120>
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016706:	2b00      	cmp	r3, #0
 8016708:	d110      	bne.n	801672c <tcp_output+0x120>
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016710:	2b00      	cmp	r3, #0
 8016712:	d10b      	bne.n	801672c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	2200      	movs	r2, #0
 8016718:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	2201      	movs	r2, #1
 8016720:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	2200      	movs	r2, #0
 8016728:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	8b5b      	ldrh	r3, [r3, #26]
 8016730:	f003 0302 	and.w	r3, r3, #2
 8016734:	2b00      	cmp	r3, #0
 8016736:	f000 814d 	beq.w	80169d4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801673a:	6878      	ldr	r0, [r7, #4]
 801673c:	f000 fd6c 	bl	8017218 <tcp_send_empty_ack>
 8016740:	4603      	mov	r3, r0
 8016742:	e152      	b.n	80169ea <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	2200      	movs	r2, #0
 8016748:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016750:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016752:	6a3b      	ldr	r3, [r7, #32]
 8016754:	2b00      	cmp	r3, #0
 8016756:	f000 811c 	beq.w	8016992 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801675a:	e002      	b.n	8016762 <tcp_output+0x156>
 801675c:	6a3b      	ldr	r3, [r7, #32]
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	623b      	str	r3, [r7, #32]
 8016762:	6a3b      	ldr	r3, [r7, #32]
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	2b00      	cmp	r3, #0
 8016768:	d1f8      	bne.n	801675c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801676a:	e112      	b.n	8016992 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801676e:	68db      	ldr	r3, [r3, #12]
 8016770:	899b      	ldrh	r3, [r3, #12]
 8016772:	b29b      	uxth	r3, r3
 8016774:	4618      	mov	r0, r3
 8016776:	f7fa f826 	bl	80107c6 <lwip_htons>
 801677a:	4603      	mov	r3, r0
 801677c:	b2db      	uxtb	r3, r3
 801677e:	f003 0304 	and.w	r3, r3, #4
 8016782:	2b00      	cmp	r3, #0
 8016784:	d006      	beq.n	8016794 <tcp_output+0x188>
 8016786:	4b43      	ldr	r3, [pc, #268]	; (8016894 <tcp_output+0x288>)
 8016788:	f240 5236 	movw	r2, #1334	; 0x536
 801678c:	4946      	ldr	r1, [pc, #280]	; (80168a8 <tcp_output+0x29c>)
 801678e:	4843      	ldr	r0, [pc, #268]	; (801689c <tcp_output+0x290>)
 8016790:	f004 f88a 	bl	801a8a8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016798:	2b00      	cmp	r3, #0
 801679a:	d01f      	beq.n	80167dc <tcp_output+0x1d0>
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	8b5b      	ldrh	r3, [r3, #26]
 80167a0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d119      	bne.n	80167dc <tcp_output+0x1d0>
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d00b      	beq.n	80167c8 <tcp_output+0x1bc>
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d110      	bne.n	80167dc <tcp_output+0x1d0>
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167be:	891a      	ldrh	r2, [r3, #8]
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80167c4:	429a      	cmp	r2, r3
 80167c6:	d209      	bcs.n	80167dc <tcp_output+0x1d0>
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d004      	beq.n	80167dc <tcp_output+0x1d0>
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80167d8:	2b08      	cmp	r3, #8
 80167da:	d901      	bls.n	80167e0 <tcp_output+0x1d4>
 80167dc:	2301      	movs	r3, #1
 80167de:	e000      	b.n	80167e2 <tcp_output+0x1d6>
 80167e0:	2300      	movs	r3, #0
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d106      	bne.n	80167f4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	8b5b      	ldrh	r3, [r3, #26]
 80167ea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	f000 80e4 	beq.w	80169bc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	7d1b      	ldrb	r3, [r3, #20]
 80167f8:	2b02      	cmp	r3, #2
 80167fa:	d00d      	beq.n	8016818 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80167fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167fe:	68db      	ldr	r3, [r3, #12]
 8016800:	899b      	ldrh	r3, [r3, #12]
 8016802:	b29c      	uxth	r4, r3
 8016804:	2010      	movs	r0, #16
 8016806:	f7f9 ffde 	bl	80107c6 <lwip_htons>
 801680a:	4603      	mov	r3, r0
 801680c:	461a      	mov	r2, r3
 801680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016810:	68db      	ldr	r3, [r3, #12]
 8016812:	4322      	orrs	r2, r4
 8016814:	b292      	uxth	r2, r2
 8016816:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016818:	697a      	ldr	r2, [r7, #20]
 801681a:	6879      	ldr	r1, [r7, #4]
 801681c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801681e:	f000 f909 	bl	8016a34 <tcp_output_segment>
 8016822:	4603      	mov	r3, r0
 8016824:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801682a:	2b00      	cmp	r3, #0
 801682c:	d009      	beq.n	8016842 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	8b5b      	ldrh	r3, [r3, #26]
 8016832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016836:	b29a      	uxth	r2, r3
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	835a      	strh	r2, [r3, #26]
      return err;
 801683c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016840:	e0d3      	b.n	80169ea <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016844:	681a      	ldr	r2, [r3, #0]
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	7d1b      	ldrb	r3, [r3, #20]
 801684e:	2b02      	cmp	r3, #2
 8016850:	d006      	beq.n	8016860 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	8b5b      	ldrh	r3, [r3, #26]
 8016856:	f023 0303 	bic.w	r3, r3, #3
 801685a:	b29a      	uxth	r2, r3
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016862:	68db      	ldr	r3, [r3, #12]
 8016864:	685b      	ldr	r3, [r3, #4]
 8016866:	4618      	mov	r0, r3
 8016868:	f7f9 ffc2 	bl	80107f0 <lwip_htonl>
 801686c:	4604      	mov	r4, r0
 801686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016870:	891b      	ldrh	r3, [r3, #8]
 8016872:	461d      	mov	r5, r3
 8016874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016876:	68db      	ldr	r3, [r3, #12]
 8016878:	899b      	ldrh	r3, [r3, #12]
 801687a:	b29b      	uxth	r3, r3
 801687c:	4618      	mov	r0, r3
 801687e:	f7f9 ffa2 	bl	80107c6 <lwip_htons>
 8016882:	4603      	mov	r3, r0
 8016884:	b2db      	uxtb	r3, r3
 8016886:	f003 0303 	and.w	r3, r3, #3
 801688a:	2b00      	cmp	r3, #0
 801688c:	d00e      	beq.n	80168ac <tcp_output+0x2a0>
 801688e:	2301      	movs	r3, #1
 8016890:	e00d      	b.n	80168ae <tcp_output+0x2a2>
 8016892:	bf00      	nop
 8016894:	0801d5a0 	.word	0x0801d5a0
 8016898:	0801dae4 	.word	0x0801dae4
 801689c:	0801d5f4 	.word	0x0801d5f4
 80168a0:	0801dafc 	.word	0x0801dafc
 80168a4:	2000dc94 	.word	0x2000dc94
 80168a8:	0801db24 	.word	0x0801db24
 80168ac:	2300      	movs	r3, #0
 80168ae:	442b      	add	r3, r5
 80168b0:	4423      	add	r3, r4
 80168b2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80168b8:	68bb      	ldr	r3, [r7, #8]
 80168ba:	1ad3      	subs	r3, r2, r3
 80168bc:	2b00      	cmp	r3, #0
 80168be:	da02      	bge.n	80168c6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	68ba      	ldr	r2, [r7, #8]
 80168c4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80168c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168c8:	891b      	ldrh	r3, [r3, #8]
 80168ca:	461c      	mov	r4, r3
 80168cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168ce:	68db      	ldr	r3, [r3, #12]
 80168d0:	899b      	ldrh	r3, [r3, #12]
 80168d2:	b29b      	uxth	r3, r3
 80168d4:	4618      	mov	r0, r3
 80168d6:	f7f9 ff76 	bl	80107c6 <lwip_htons>
 80168da:	4603      	mov	r3, r0
 80168dc:	b2db      	uxtb	r3, r3
 80168de:	f003 0303 	and.w	r3, r3, #3
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d001      	beq.n	80168ea <tcp_output+0x2de>
 80168e6:	2301      	movs	r3, #1
 80168e8:	e000      	b.n	80168ec <tcp_output+0x2e0>
 80168ea:	2300      	movs	r3, #0
 80168ec:	4423      	add	r3, r4
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d049      	beq.n	8016986 <tcp_output+0x37a>
      seg->next = NULL;
 80168f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168f4:	2200      	movs	r2, #0
 80168f6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d105      	bne.n	801690c <tcp_output+0x300>
        pcb->unacked = seg;
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016904:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8016906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016908:	623b      	str	r3, [r7, #32]
 801690a:	e03f      	b.n	801698c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801690e:	68db      	ldr	r3, [r3, #12]
 8016910:	685b      	ldr	r3, [r3, #4]
 8016912:	4618      	mov	r0, r3
 8016914:	f7f9 ff6c 	bl	80107f0 <lwip_htonl>
 8016918:	4604      	mov	r4, r0
 801691a:	6a3b      	ldr	r3, [r7, #32]
 801691c:	68db      	ldr	r3, [r3, #12]
 801691e:	685b      	ldr	r3, [r3, #4]
 8016920:	4618      	mov	r0, r3
 8016922:	f7f9 ff65 	bl	80107f0 <lwip_htonl>
 8016926:	4603      	mov	r3, r0
 8016928:	1ae3      	subs	r3, r4, r3
 801692a:	2b00      	cmp	r3, #0
 801692c:	da24      	bge.n	8016978 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	3370      	adds	r3, #112	; 0x70
 8016932:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016934:	e002      	b.n	801693c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016936:	69fb      	ldr	r3, [r7, #28]
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801693c:	69fb      	ldr	r3, [r7, #28]
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d011      	beq.n	8016968 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016944:	69fb      	ldr	r3, [r7, #28]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	68db      	ldr	r3, [r3, #12]
 801694a:	685b      	ldr	r3, [r3, #4]
 801694c:	4618      	mov	r0, r3
 801694e:	f7f9 ff4f 	bl	80107f0 <lwip_htonl>
 8016952:	4604      	mov	r4, r0
 8016954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016956:	68db      	ldr	r3, [r3, #12]
 8016958:	685b      	ldr	r3, [r3, #4]
 801695a:	4618      	mov	r0, r3
 801695c:	f7f9 ff48 	bl	80107f0 <lwip_htonl>
 8016960:	4603      	mov	r3, r0
 8016962:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016964:	2b00      	cmp	r3, #0
 8016966:	dbe6      	blt.n	8016936 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016968:	69fb      	ldr	r3, [r7, #28]
 801696a:	681a      	ldr	r2, [r3, #0]
 801696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801696e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016970:	69fb      	ldr	r3, [r7, #28]
 8016972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016974:	601a      	str	r2, [r3, #0]
 8016976:	e009      	b.n	801698c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016978:	6a3b      	ldr	r3, [r7, #32]
 801697a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801697c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801697e:	6a3b      	ldr	r3, [r7, #32]
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	623b      	str	r3, [r7, #32]
 8016984:	e002      	b.n	801698c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016986:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016988:	f7fc fc43 	bl	8013212 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016990:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016994:	2b00      	cmp	r3, #0
 8016996:	d012      	beq.n	80169be <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801699a:	68db      	ldr	r3, [r3, #12]
 801699c:	685b      	ldr	r3, [r3, #4]
 801699e:	4618      	mov	r0, r3
 80169a0:	f7f9 ff26 	bl	80107f0 <lwip_htonl>
 80169a4:	4602      	mov	r2, r0
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80169aa:	1ad3      	subs	r3, r2, r3
 80169ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169ae:	8912      	ldrh	r2, [r2, #8]
 80169b0:	4413      	add	r3, r2
  while (seg != NULL &&
 80169b2:	69ba      	ldr	r2, [r7, #24]
 80169b4:	429a      	cmp	r2, r3
 80169b6:	f4bf aed9 	bcs.w	801676c <tcp_output+0x160>
 80169ba:	e000      	b.n	80169be <tcp_output+0x3b2>
      break;
 80169bc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d108      	bne.n	80169d8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	2200      	movs	r2, #0
 80169ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80169ce:	e004      	b.n	80169da <tcp_output+0x3ce>
    goto output_done;
 80169d0:	bf00      	nop
 80169d2:	e002      	b.n	80169da <tcp_output+0x3ce>
    goto output_done;
 80169d4:	bf00      	nop
 80169d6:	e000      	b.n	80169da <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80169d8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	8b5b      	ldrh	r3, [r3, #26]
 80169de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80169e2:	b29a      	uxth	r2, r3
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80169e8:	2300      	movs	r3, #0
}
 80169ea:	4618      	mov	r0, r3
 80169ec:	3728      	adds	r7, #40	; 0x28
 80169ee:	46bd      	mov	sp, r7
 80169f0:	bdb0      	pop	{r4, r5, r7, pc}
 80169f2:	bf00      	nop

080169f4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80169f4:	b580      	push	{r7, lr}
 80169f6:	b082      	sub	sp, #8
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d106      	bne.n	8016a10 <tcp_output_segment_busy+0x1c>
 8016a02:	4b09      	ldr	r3, [pc, #36]	; (8016a28 <tcp_output_segment_busy+0x34>)
 8016a04:	f240 529a 	movw	r2, #1434	; 0x59a
 8016a08:	4908      	ldr	r1, [pc, #32]	; (8016a2c <tcp_output_segment_busy+0x38>)
 8016a0a:	4809      	ldr	r0, [pc, #36]	; (8016a30 <tcp_output_segment_busy+0x3c>)
 8016a0c:	f003 ff4c 	bl	801a8a8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	685b      	ldr	r3, [r3, #4]
 8016a14:	7b9b      	ldrb	r3, [r3, #14]
 8016a16:	2b01      	cmp	r3, #1
 8016a18:	d001      	beq.n	8016a1e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8016a1a:	2301      	movs	r3, #1
 8016a1c:	e000      	b.n	8016a20 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016a1e:	2300      	movs	r3, #0
}
 8016a20:	4618      	mov	r0, r3
 8016a22:	3708      	adds	r7, #8
 8016a24:	46bd      	mov	sp, r7
 8016a26:	bd80      	pop	{r7, pc}
 8016a28:	0801d5a0 	.word	0x0801d5a0
 8016a2c:	0801db3c 	.word	0x0801db3c
 8016a30:	0801d5f4 	.word	0x0801d5f4

08016a34 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016a34:	b5b0      	push	{r4, r5, r7, lr}
 8016a36:	b08c      	sub	sp, #48	; 0x30
 8016a38:	af04      	add	r7, sp, #16
 8016a3a:	60f8      	str	r0, [r7, #12]
 8016a3c:	60b9      	str	r1, [r7, #8]
 8016a3e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d106      	bne.n	8016a54 <tcp_output_segment+0x20>
 8016a46:	4b63      	ldr	r3, [pc, #396]	; (8016bd4 <tcp_output_segment+0x1a0>)
 8016a48:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8016a4c:	4962      	ldr	r1, [pc, #392]	; (8016bd8 <tcp_output_segment+0x1a4>)
 8016a4e:	4863      	ldr	r0, [pc, #396]	; (8016bdc <tcp_output_segment+0x1a8>)
 8016a50:	f003 ff2a 	bl	801a8a8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016a54:	68bb      	ldr	r3, [r7, #8]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d106      	bne.n	8016a68 <tcp_output_segment+0x34>
 8016a5a:	4b5e      	ldr	r3, [pc, #376]	; (8016bd4 <tcp_output_segment+0x1a0>)
 8016a5c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8016a60:	495f      	ldr	r1, [pc, #380]	; (8016be0 <tcp_output_segment+0x1ac>)
 8016a62:	485e      	ldr	r0, [pc, #376]	; (8016bdc <tcp_output_segment+0x1a8>)
 8016a64:	f003 ff20 	bl	801a8a8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d106      	bne.n	8016a7c <tcp_output_segment+0x48>
 8016a6e:	4b59      	ldr	r3, [pc, #356]	; (8016bd4 <tcp_output_segment+0x1a0>)
 8016a70:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8016a74:	495b      	ldr	r1, [pc, #364]	; (8016be4 <tcp_output_segment+0x1b0>)
 8016a76:	4859      	ldr	r0, [pc, #356]	; (8016bdc <tcp_output_segment+0x1a8>)
 8016a78:	f003 ff16 	bl	801a8a8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8016a7c:	68f8      	ldr	r0, [r7, #12]
 8016a7e:	f7ff ffb9 	bl	80169f4 <tcp_output_segment_busy>
 8016a82:	4603      	mov	r3, r0
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d001      	beq.n	8016a8c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016a88:	2300      	movs	r3, #0
 8016a8a:	e09f      	b.n	8016bcc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016a8c:	68bb      	ldr	r3, [r7, #8]
 8016a8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	68dc      	ldr	r4, [r3, #12]
 8016a94:	4610      	mov	r0, r2
 8016a96:	f7f9 feab 	bl	80107f0 <lwip_htonl>
 8016a9a:	4603      	mov	r3, r0
 8016a9c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016a9e:	68bb      	ldr	r3, [r7, #8]
 8016aa0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	68dc      	ldr	r4, [r3, #12]
 8016aa6:	4610      	mov	r0, r2
 8016aa8:	f7f9 fe8d 	bl	80107c6 <lwip_htons>
 8016aac:	4603      	mov	r3, r0
 8016aae:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016ab0:	68bb      	ldr	r3, [r7, #8]
 8016ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ab4:	68ba      	ldr	r2, [r7, #8]
 8016ab6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016ab8:	441a      	add	r2, r3
 8016aba:	68bb      	ldr	r3, [r7, #8]
 8016abc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	68db      	ldr	r3, [r3, #12]
 8016ac2:	3314      	adds	r3, #20
 8016ac4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	7a9b      	ldrb	r3, [r3, #10]
 8016aca:	f003 0301 	and.w	r3, r3, #1
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d015      	beq.n	8016afe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8016ad2:	68bb      	ldr	r3, [r7, #8]
 8016ad4:	3304      	adds	r3, #4
 8016ad6:	461a      	mov	r2, r3
 8016ad8:	6879      	ldr	r1, [r7, #4]
 8016ada:	f44f 7006 	mov.w	r0, #536	; 0x218
 8016ade:	f7fc fe8f 	bl	8013800 <tcp_eff_send_mss_netif>
 8016ae2:	4603      	mov	r3, r0
 8016ae4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8016ae6:	8b7b      	ldrh	r3, [r7, #26]
 8016ae8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8016aec:	4618      	mov	r0, r3
 8016aee:	f7f9 fe7f 	bl	80107f0 <lwip_htonl>
 8016af2:	4602      	mov	r2, r0
 8016af4:	69fb      	ldr	r3, [r7, #28]
 8016af6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8016af8:	69fb      	ldr	r3, [r7, #28]
 8016afa:	3304      	adds	r3, #4
 8016afc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8016afe:	68bb      	ldr	r3, [r7, #8]
 8016b00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	da02      	bge.n	8016b0e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8016b08:	68bb      	ldr	r3, [r7, #8]
 8016b0a:	2200      	movs	r2, #0
 8016b0c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8016b0e:	68bb      	ldr	r3, [r7, #8]
 8016b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d10c      	bne.n	8016b30 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8016b16:	4b34      	ldr	r3, [pc, #208]	; (8016be8 <tcp_output_segment+0x1b4>)
 8016b18:	681a      	ldr	r2, [r3, #0]
 8016b1a:	68bb      	ldr	r3, [r7, #8]
 8016b1c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	68db      	ldr	r3, [r3, #12]
 8016b22:	685b      	ldr	r3, [r3, #4]
 8016b24:	4618      	mov	r0, r3
 8016b26:	f7f9 fe63 	bl	80107f0 <lwip_htonl>
 8016b2a:	4602      	mov	r2, r0
 8016b2c:	68bb      	ldr	r3, [r7, #8]
 8016b2e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	68da      	ldr	r2, [r3, #12]
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	685b      	ldr	r3, [r3, #4]
 8016b38:	685b      	ldr	r3, [r3, #4]
 8016b3a:	1ad3      	subs	r3, r2, r3
 8016b3c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	685b      	ldr	r3, [r3, #4]
 8016b42:	8959      	ldrh	r1, [r3, #10]
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	685b      	ldr	r3, [r3, #4]
 8016b48:	8b3a      	ldrh	r2, [r7, #24]
 8016b4a:	1a8a      	subs	r2, r1, r2
 8016b4c:	b292      	uxth	r2, r2
 8016b4e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	685b      	ldr	r3, [r3, #4]
 8016b54:	8919      	ldrh	r1, [r3, #8]
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	685b      	ldr	r3, [r3, #4]
 8016b5a:	8b3a      	ldrh	r2, [r7, #24]
 8016b5c:	1a8a      	subs	r2, r1, r2
 8016b5e:	b292      	uxth	r2, r2
 8016b60:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	685b      	ldr	r3, [r3, #4]
 8016b66:	68fa      	ldr	r2, [r7, #12]
 8016b68:	68d2      	ldr	r2, [r2, #12]
 8016b6a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	68db      	ldr	r3, [r3, #12]
 8016b70:	2200      	movs	r2, #0
 8016b72:	741a      	strb	r2, [r3, #16]
 8016b74:	2200      	movs	r2, #0
 8016b76:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	68db      	ldr	r3, [r3, #12]
 8016b7c:	f103 0214 	add.w	r2, r3, #20
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	7a9b      	ldrb	r3, [r3, #10]
 8016b84:	009b      	lsls	r3, r3, #2
 8016b86:	f003 0304 	and.w	r3, r3, #4
 8016b8a:	4413      	add	r3, r2
 8016b8c:	69fa      	ldr	r2, [r7, #28]
 8016b8e:	429a      	cmp	r2, r3
 8016b90:	d006      	beq.n	8016ba0 <tcp_output_segment+0x16c>
 8016b92:	4b10      	ldr	r3, [pc, #64]	; (8016bd4 <tcp_output_segment+0x1a0>)
 8016b94:	f240 621c 	movw	r2, #1564	; 0x61c
 8016b98:	4914      	ldr	r1, [pc, #80]	; (8016bec <tcp_output_segment+0x1b8>)
 8016b9a:	4810      	ldr	r0, [pc, #64]	; (8016bdc <tcp_output_segment+0x1a8>)
 8016b9c:	f003 fe84 	bl	801a8a8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	6858      	ldr	r0, [r3, #4]
 8016ba4:	68b9      	ldr	r1, [r7, #8]
 8016ba6:	68bb      	ldr	r3, [r7, #8]
 8016ba8:	1d1c      	adds	r4, r3, #4
 8016baa:	68bb      	ldr	r3, [r7, #8]
 8016bac:	7add      	ldrb	r5, [r3, #11]
 8016bae:	68bb      	ldr	r3, [r7, #8]
 8016bb0:	7a9b      	ldrb	r3, [r3, #10]
 8016bb2:	687a      	ldr	r2, [r7, #4]
 8016bb4:	9202      	str	r2, [sp, #8]
 8016bb6:	2206      	movs	r2, #6
 8016bb8:	9201      	str	r2, [sp, #4]
 8016bba:	9300      	str	r3, [sp, #0]
 8016bbc:	462b      	mov	r3, r5
 8016bbe:	4622      	mov	r2, r4
 8016bc0:	f002 fa36 	bl	8019030 <ip4_output_if>
 8016bc4:	4603      	mov	r3, r0
 8016bc6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8016bc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016bcc:	4618      	mov	r0, r3
 8016bce:	3720      	adds	r7, #32
 8016bd0:	46bd      	mov	sp, r7
 8016bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8016bd4:	0801d5a0 	.word	0x0801d5a0
 8016bd8:	0801db64 	.word	0x0801db64
 8016bdc:	0801d5f4 	.word	0x0801d5f4
 8016be0:	0801db84 	.word	0x0801db84
 8016be4:	0801dba4 	.word	0x0801dba4
 8016be8:	2000dc84 	.word	0x2000dc84
 8016bec:	0801dbc8 	.word	0x0801dbc8

08016bf0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8016bf0:	b5b0      	push	{r4, r5, r7, lr}
 8016bf2:	b084      	sub	sp, #16
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d106      	bne.n	8016c0c <tcp_rexmit_rto_prepare+0x1c>
 8016bfe:	4b31      	ldr	r3, [pc, #196]	; (8016cc4 <tcp_rexmit_rto_prepare+0xd4>)
 8016c00:	f240 6263 	movw	r2, #1635	; 0x663
 8016c04:	4930      	ldr	r1, [pc, #192]	; (8016cc8 <tcp_rexmit_rto_prepare+0xd8>)
 8016c06:	4831      	ldr	r0, [pc, #196]	; (8016ccc <tcp_rexmit_rto_prepare+0xdc>)
 8016c08:	f003 fe4e 	bl	801a8a8 <iprintf>

  if (pcb->unacked == NULL) {
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d102      	bne.n	8016c1a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8016c14:	f06f 0305 	mvn.w	r3, #5
 8016c18:	e050      	b.n	8016cbc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c1e:	60fb      	str	r3, [r7, #12]
 8016c20:	e00b      	b.n	8016c3a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8016c22:	68f8      	ldr	r0, [r7, #12]
 8016c24:	f7ff fee6 	bl	80169f4 <tcp_output_segment_busy>
 8016c28:	4603      	mov	r3, r0
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d002      	beq.n	8016c34 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8016c2e:	f06f 0305 	mvn.w	r3, #5
 8016c32:	e043      	b.n	8016cbc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	60fb      	str	r3, [r7, #12]
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d1ef      	bne.n	8016c22 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8016c42:	68f8      	ldr	r0, [r7, #12]
 8016c44:	f7ff fed6 	bl	80169f4 <tcp_output_segment_busy>
 8016c48:	4603      	mov	r3, r0
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d002      	beq.n	8016c54 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8016c4e:	f06f 0305 	mvn.w	r3, #5
 8016c52:	e033      	b.n	8016cbc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	2200      	movs	r2, #0
 8016c68:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	8b5b      	ldrh	r3, [r3, #26]
 8016c6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8016c72:	b29a      	uxth	r2, r3
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	68db      	ldr	r3, [r3, #12]
 8016c7c:	685b      	ldr	r3, [r3, #4]
 8016c7e:	4618      	mov	r0, r3
 8016c80:	f7f9 fdb6 	bl	80107f0 <lwip_htonl>
 8016c84:	4604      	mov	r4, r0
 8016c86:	68fb      	ldr	r3, [r7, #12]
 8016c88:	891b      	ldrh	r3, [r3, #8]
 8016c8a:	461d      	mov	r5, r3
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	68db      	ldr	r3, [r3, #12]
 8016c90:	899b      	ldrh	r3, [r3, #12]
 8016c92:	b29b      	uxth	r3, r3
 8016c94:	4618      	mov	r0, r3
 8016c96:	f7f9 fd96 	bl	80107c6 <lwip_htons>
 8016c9a:	4603      	mov	r3, r0
 8016c9c:	b2db      	uxtb	r3, r3
 8016c9e:	f003 0303 	and.w	r3, r3, #3
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d001      	beq.n	8016caa <tcp_rexmit_rto_prepare+0xba>
 8016ca6:	2301      	movs	r3, #1
 8016ca8:	e000      	b.n	8016cac <tcp_rexmit_rto_prepare+0xbc>
 8016caa:	2300      	movs	r3, #0
 8016cac:	442b      	add	r3, r5
 8016cae:	18e2      	adds	r2, r4, r3
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	2200      	movs	r2, #0
 8016cb8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8016cba:	2300      	movs	r3, #0
}
 8016cbc:	4618      	mov	r0, r3
 8016cbe:	3710      	adds	r7, #16
 8016cc0:	46bd      	mov	sp, r7
 8016cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8016cc4:	0801d5a0 	.word	0x0801d5a0
 8016cc8:	0801dbdc 	.word	0x0801dbdc
 8016ccc:	0801d5f4 	.word	0x0801d5f4

08016cd0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b082      	sub	sp, #8
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d106      	bne.n	8016cec <tcp_rexmit_rto_commit+0x1c>
 8016cde:	4b0d      	ldr	r3, [pc, #52]	; (8016d14 <tcp_rexmit_rto_commit+0x44>)
 8016ce0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8016ce4:	490c      	ldr	r1, [pc, #48]	; (8016d18 <tcp_rexmit_rto_commit+0x48>)
 8016ce6:	480d      	ldr	r0, [pc, #52]	; (8016d1c <tcp_rexmit_rto_commit+0x4c>)
 8016ce8:	f003 fdde 	bl	801a8a8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016cf2:	2bff      	cmp	r3, #255	; 0xff
 8016cf4:	d007      	beq.n	8016d06 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016cfc:	3301      	adds	r3, #1
 8016cfe:	b2da      	uxtb	r2, r3
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8016d06:	6878      	ldr	r0, [r7, #4]
 8016d08:	f7ff fc80 	bl	801660c <tcp_output>
}
 8016d0c:	bf00      	nop
 8016d0e:	3708      	adds	r7, #8
 8016d10:	46bd      	mov	sp, r7
 8016d12:	bd80      	pop	{r7, pc}
 8016d14:	0801d5a0 	.word	0x0801d5a0
 8016d18:	0801dc00 	.word	0x0801dc00
 8016d1c:	0801d5f4 	.word	0x0801d5f4

08016d20 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8016d20:	b580      	push	{r7, lr}
 8016d22:	b082      	sub	sp, #8
 8016d24:	af00      	add	r7, sp, #0
 8016d26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d106      	bne.n	8016d3c <tcp_rexmit_rto+0x1c>
 8016d2e:	4b0a      	ldr	r3, [pc, #40]	; (8016d58 <tcp_rexmit_rto+0x38>)
 8016d30:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8016d34:	4909      	ldr	r1, [pc, #36]	; (8016d5c <tcp_rexmit_rto+0x3c>)
 8016d36:	480a      	ldr	r0, [pc, #40]	; (8016d60 <tcp_rexmit_rto+0x40>)
 8016d38:	f003 fdb6 	bl	801a8a8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8016d3c:	6878      	ldr	r0, [r7, #4]
 8016d3e:	f7ff ff57 	bl	8016bf0 <tcp_rexmit_rto_prepare>
 8016d42:	4603      	mov	r3, r0
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d102      	bne.n	8016d4e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8016d48:	6878      	ldr	r0, [r7, #4]
 8016d4a:	f7ff ffc1 	bl	8016cd0 <tcp_rexmit_rto_commit>
  }
}
 8016d4e:	bf00      	nop
 8016d50:	3708      	adds	r7, #8
 8016d52:	46bd      	mov	sp, r7
 8016d54:	bd80      	pop	{r7, pc}
 8016d56:	bf00      	nop
 8016d58:	0801d5a0 	.word	0x0801d5a0
 8016d5c:	0801dc24 	.word	0x0801dc24
 8016d60:	0801d5f4 	.word	0x0801d5f4

08016d64 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8016d64:	b590      	push	{r4, r7, lr}
 8016d66:	b085      	sub	sp, #20
 8016d68:	af00      	add	r7, sp, #0
 8016d6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d106      	bne.n	8016d80 <tcp_rexmit+0x1c>
 8016d72:	4b2f      	ldr	r3, [pc, #188]	; (8016e30 <tcp_rexmit+0xcc>)
 8016d74:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8016d78:	492e      	ldr	r1, [pc, #184]	; (8016e34 <tcp_rexmit+0xd0>)
 8016d7a:	482f      	ldr	r0, [pc, #188]	; (8016e38 <tcp_rexmit+0xd4>)
 8016d7c:	f003 fd94 	bl	801a8a8 <iprintf>

  if (pcb->unacked == NULL) {
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d102      	bne.n	8016d8e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8016d88:	f06f 0305 	mvn.w	r3, #5
 8016d8c:	e04c      	b.n	8016e28 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d92:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8016d94:	68b8      	ldr	r0, [r7, #8]
 8016d96:	f7ff fe2d 	bl	80169f4 <tcp_output_segment_busy>
 8016d9a:	4603      	mov	r3, r0
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d002      	beq.n	8016da6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8016da0:	f06f 0305 	mvn.w	r3, #5
 8016da4:	e040      	b.n	8016e28 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8016da6:	68bb      	ldr	r3, [r7, #8]
 8016da8:	681a      	ldr	r2, [r3, #0]
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	336c      	adds	r3, #108	; 0x6c
 8016db2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016db4:	e002      	b.n	8016dbc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8016db6:	68fb      	ldr	r3, [r7, #12]
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d011      	beq.n	8016de8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	68db      	ldr	r3, [r3, #12]
 8016dca:	685b      	ldr	r3, [r3, #4]
 8016dcc:	4618      	mov	r0, r3
 8016dce:	f7f9 fd0f 	bl	80107f0 <lwip_htonl>
 8016dd2:	4604      	mov	r4, r0
 8016dd4:	68bb      	ldr	r3, [r7, #8]
 8016dd6:	68db      	ldr	r3, [r3, #12]
 8016dd8:	685b      	ldr	r3, [r3, #4]
 8016dda:	4618      	mov	r0, r3
 8016ddc:	f7f9 fd08 	bl	80107f0 <lwip_htonl>
 8016de0:	4603      	mov	r3, r0
 8016de2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	dbe6      	blt.n	8016db6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	681a      	ldr	r2, [r3, #0]
 8016dec:	68bb      	ldr	r3, [r7, #8]
 8016dee:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	68ba      	ldr	r2, [r7, #8]
 8016df4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8016df6:	68bb      	ldr	r3, [r7, #8]
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d103      	bne.n	8016e06 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	2200      	movs	r2, #0
 8016e02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016e0c:	2bff      	cmp	r3, #255	; 0xff
 8016e0e:	d007      	beq.n	8016e20 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016e16:	3301      	adds	r3, #1
 8016e18:	b2da      	uxtb	r2, r3
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	2200      	movs	r2, #0
 8016e24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8016e26:	2300      	movs	r3, #0
}
 8016e28:	4618      	mov	r0, r3
 8016e2a:	3714      	adds	r7, #20
 8016e2c:	46bd      	mov	sp, r7
 8016e2e:	bd90      	pop	{r4, r7, pc}
 8016e30:	0801d5a0 	.word	0x0801d5a0
 8016e34:	0801dc40 	.word	0x0801dc40
 8016e38:	0801d5f4 	.word	0x0801d5f4

08016e3c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8016e3c:	b580      	push	{r7, lr}
 8016e3e:	b082      	sub	sp, #8
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d106      	bne.n	8016e58 <tcp_rexmit_fast+0x1c>
 8016e4a:	4b2a      	ldr	r3, [pc, #168]	; (8016ef4 <tcp_rexmit_fast+0xb8>)
 8016e4c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8016e50:	4929      	ldr	r1, [pc, #164]	; (8016ef8 <tcp_rexmit_fast+0xbc>)
 8016e52:	482a      	ldr	r0, [pc, #168]	; (8016efc <tcp_rexmit_fast+0xc0>)
 8016e54:	f003 fd28 	bl	801a8a8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d044      	beq.n	8016eea <tcp_rexmit_fast+0xae>
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	8b5b      	ldrh	r3, [r3, #26]
 8016e64:	f003 0304 	and.w	r3, r3, #4
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d13e      	bne.n	8016eea <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8016e6c:	6878      	ldr	r0, [r7, #4]
 8016e6e:	f7ff ff79 	bl	8016d64 <tcp_rexmit>
 8016e72:	4603      	mov	r3, r0
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d138      	bne.n	8016eea <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016e84:	4293      	cmp	r3, r2
 8016e86:	bf28      	it	cs
 8016e88:	4613      	movcs	r3, r2
 8016e8a:	b29b      	uxth	r3, r3
 8016e8c:	0fda      	lsrs	r2, r3, #31
 8016e8e:	4413      	add	r3, r2
 8016e90:	105b      	asrs	r3, r3, #1
 8016e92:	b29a      	uxth	r2, r3
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016ea0:	461a      	mov	r2, r3
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016ea6:	005b      	lsls	r3, r3, #1
 8016ea8:	429a      	cmp	r2, r3
 8016eaa:	d206      	bcs.n	8016eba <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016eb0:	005b      	lsls	r3, r3, #1
 8016eb2:	b29a      	uxth	r2, r3
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016ec4:	4619      	mov	r1, r3
 8016ec6:	0049      	lsls	r1, r1, #1
 8016ec8:	440b      	add	r3, r1
 8016eca:	b29b      	uxth	r3, r3
 8016ecc:	4413      	add	r3, r2
 8016ece:	b29a      	uxth	r2, r3
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	8b5b      	ldrh	r3, [r3, #26]
 8016eda:	f043 0304 	orr.w	r3, r3, #4
 8016ede:	b29a      	uxth	r2, r3
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	2200      	movs	r2, #0
 8016ee8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8016eea:	bf00      	nop
 8016eec:	3708      	adds	r7, #8
 8016eee:	46bd      	mov	sp, r7
 8016ef0:	bd80      	pop	{r7, pc}
 8016ef2:	bf00      	nop
 8016ef4:	0801d5a0 	.word	0x0801d5a0
 8016ef8:	0801dc58 	.word	0x0801dc58
 8016efc:	0801d5f4 	.word	0x0801d5f4

08016f00 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b086      	sub	sp, #24
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	60f8      	str	r0, [r7, #12]
 8016f08:	607b      	str	r3, [r7, #4]
 8016f0a:	460b      	mov	r3, r1
 8016f0c:	817b      	strh	r3, [r7, #10]
 8016f0e:	4613      	mov	r3, r2
 8016f10:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8016f12:	897a      	ldrh	r2, [r7, #10]
 8016f14:	893b      	ldrh	r3, [r7, #8]
 8016f16:	4413      	add	r3, r2
 8016f18:	b29b      	uxth	r3, r3
 8016f1a:	3314      	adds	r3, #20
 8016f1c:	b29b      	uxth	r3, r3
 8016f1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016f22:	4619      	mov	r1, r3
 8016f24:	2022      	movs	r0, #34	; 0x22
 8016f26:	f7fa fc1d 	bl	8011764 <pbuf_alloc>
 8016f2a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8016f2c:	697b      	ldr	r3, [r7, #20]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d04d      	beq.n	8016fce <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8016f32:	897b      	ldrh	r3, [r7, #10]
 8016f34:	3313      	adds	r3, #19
 8016f36:	697a      	ldr	r2, [r7, #20]
 8016f38:	8952      	ldrh	r2, [r2, #10]
 8016f3a:	4293      	cmp	r3, r2
 8016f3c:	db06      	blt.n	8016f4c <tcp_output_alloc_header_common+0x4c>
 8016f3e:	4b26      	ldr	r3, [pc, #152]	; (8016fd8 <tcp_output_alloc_header_common+0xd8>)
 8016f40:	f240 7223 	movw	r2, #1827	; 0x723
 8016f44:	4925      	ldr	r1, [pc, #148]	; (8016fdc <tcp_output_alloc_header_common+0xdc>)
 8016f46:	4826      	ldr	r0, [pc, #152]	; (8016fe0 <tcp_output_alloc_header_common+0xe0>)
 8016f48:	f003 fcae 	bl	801a8a8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8016f4c:	697b      	ldr	r3, [r7, #20]
 8016f4e:	685b      	ldr	r3, [r3, #4]
 8016f50:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8016f52:	8c3b      	ldrh	r3, [r7, #32]
 8016f54:	4618      	mov	r0, r3
 8016f56:	f7f9 fc36 	bl	80107c6 <lwip_htons>
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	461a      	mov	r2, r3
 8016f5e:	693b      	ldr	r3, [r7, #16]
 8016f60:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8016f62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016f64:	4618      	mov	r0, r3
 8016f66:	f7f9 fc2e 	bl	80107c6 <lwip_htons>
 8016f6a:	4603      	mov	r3, r0
 8016f6c:	461a      	mov	r2, r3
 8016f6e:	693b      	ldr	r3, [r7, #16]
 8016f70:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8016f72:	693b      	ldr	r3, [r7, #16]
 8016f74:	687a      	ldr	r2, [r7, #4]
 8016f76:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8016f78:	68f8      	ldr	r0, [r7, #12]
 8016f7a:	f7f9 fc39 	bl	80107f0 <lwip_htonl>
 8016f7e:	4602      	mov	r2, r0
 8016f80:	693b      	ldr	r3, [r7, #16]
 8016f82:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8016f84:	897b      	ldrh	r3, [r7, #10]
 8016f86:	089b      	lsrs	r3, r3, #2
 8016f88:	b29b      	uxth	r3, r3
 8016f8a:	3305      	adds	r3, #5
 8016f8c:	b29b      	uxth	r3, r3
 8016f8e:	031b      	lsls	r3, r3, #12
 8016f90:	b29a      	uxth	r2, r3
 8016f92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016f96:	b29b      	uxth	r3, r3
 8016f98:	4313      	orrs	r3, r2
 8016f9a:	b29b      	uxth	r3, r3
 8016f9c:	4618      	mov	r0, r3
 8016f9e:	f7f9 fc12 	bl	80107c6 <lwip_htons>
 8016fa2:	4603      	mov	r3, r0
 8016fa4:	461a      	mov	r2, r3
 8016fa6:	693b      	ldr	r3, [r7, #16]
 8016fa8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8016faa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016fac:	4618      	mov	r0, r3
 8016fae:	f7f9 fc0a 	bl	80107c6 <lwip_htons>
 8016fb2:	4603      	mov	r3, r0
 8016fb4:	461a      	mov	r2, r3
 8016fb6:	693b      	ldr	r3, [r7, #16]
 8016fb8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8016fba:	693b      	ldr	r3, [r7, #16]
 8016fbc:	2200      	movs	r2, #0
 8016fbe:	741a      	strb	r2, [r3, #16]
 8016fc0:	2200      	movs	r2, #0
 8016fc2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8016fc4:	693b      	ldr	r3, [r7, #16]
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	749a      	strb	r2, [r3, #18]
 8016fca:	2200      	movs	r2, #0
 8016fcc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8016fce:	697b      	ldr	r3, [r7, #20]
}
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	3718      	adds	r7, #24
 8016fd4:	46bd      	mov	sp, r7
 8016fd6:	bd80      	pop	{r7, pc}
 8016fd8:	0801d5a0 	.word	0x0801d5a0
 8016fdc:	0801dc78 	.word	0x0801dc78
 8016fe0:	0801d5f4 	.word	0x0801d5f4

08016fe4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016fe4:	b5b0      	push	{r4, r5, r7, lr}
 8016fe6:	b08a      	sub	sp, #40	; 0x28
 8016fe8:	af04      	add	r7, sp, #16
 8016fea:	60f8      	str	r0, [r7, #12]
 8016fec:	607b      	str	r3, [r7, #4]
 8016fee:	460b      	mov	r3, r1
 8016ff0:	817b      	strh	r3, [r7, #10]
 8016ff2:	4613      	mov	r3, r2
 8016ff4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d106      	bne.n	801700a <tcp_output_alloc_header+0x26>
 8016ffc:	4b15      	ldr	r3, [pc, #84]	; (8017054 <tcp_output_alloc_header+0x70>)
 8016ffe:	f240 7242 	movw	r2, #1858	; 0x742
 8017002:	4915      	ldr	r1, [pc, #84]	; (8017058 <tcp_output_alloc_header+0x74>)
 8017004:	4815      	ldr	r0, [pc, #84]	; (801705c <tcp_output_alloc_header+0x78>)
 8017006:	f003 fc4f 	bl	801a8a8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	8adb      	ldrh	r3, [r3, #22]
 8017012:	68fa      	ldr	r2, [r7, #12]
 8017014:	8b12      	ldrh	r2, [r2, #24]
 8017016:	68f9      	ldr	r1, [r7, #12]
 8017018:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801701a:	893d      	ldrh	r5, [r7, #8]
 801701c:	897c      	ldrh	r4, [r7, #10]
 801701e:	9103      	str	r1, [sp, #12]
 8017020:	2110      	movs	r1, #16
 8017022:	9102      	str	r1, [sp, #8]
 8017024:	9201      	str	r2, [sp, #4]
 8017026:	9300      	str	r3, [sp, #0]
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	462a      	mov	r2, r5
 801702c:	4621      	mov	r1, r4
 801702e:	f7ff ff67 	bl	8016f00 <tcp_output_alloc_header_common>
 8017032:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017034:	697b      	ldr	r3, [r7, #20]
 8017036:	2b00      	cmp	r3, #0
 8017038:	d006      	beq.n	8017048 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801703e:	68fa      	ldr	r2, [r7, #12]
 8017040:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017042:	441a      	add	r2, r3
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8017048:	697b      	ldr	r3, [r7, #20]
}
 801704a:	4618      	mov	r0, r3
 801704c:	3718      	adds	r7, #24
 801704e:	46bd      	mov	sp, r7
 8017050:	bdb0      	pop	{r4, r5, r7, pc}
 8017052:	bf00      	nop
 8017054:	0801d5a0 	.word	0x0801d5a0
 8017058:	0801dca8 	.word	0x0801dca8
 801705c:	0801d5f4 	.word	0x0801d5f4

08017060 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8017060:	b580      	push	{r7, lr}
 8017062:	b088      	sub	sp, #32
 8017064:	af00      	add	r7, sp, #0
 8017066:	60f8      	str	r0, [r7, #12]
 8017068:	60b9      	str	r1, [r7, #8]
 801706a:	4611      	mov	r1, r2
 801706c:	461a      	mov	r2, r3
 801706e:	460b      	mov	r3, r1
 8017070:	71fb      	strb	r3, [r7, #7]
 8017072:	4613      	mov	r3, r2
 8017074:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8017076:	2300      	movs	r3, #0
 8017078:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801707a:	68bb      	ldr	r3, [r7, #8]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d106      	bne.n	801708e <tcp_output_fill_options+0x2e>
 8017080:	4b13      	ldr	r3, [pc, #76]	; (80170d0 <tcp_output_fill_options+0x70>)
 8017082:	f240 7256 	movw	r2, #1878	; 0x756
 8017086:	4913      	ldr	r1, [pc, #76]	; (80170d4 <tcp_output_fill_options+0x74>)
 8017088:	4813      	ldr	r0, [pc, #76]	; (80170d8 <tcp_output_fill_options+0x78>)
 801708a:	f003 fc0d 	bl	801a8a8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801708e:	68bb      	ldr	r3, [r7, #8]
 8017090:	685b      	ldr	r3, [r3, #4]
 8017092:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8017094:	69bb      	ldr	r3, [r7, #24]
 8017096:	3314      	adds	r3, #20
 8017098:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801709a:	69bb      	ldr	r3, [r7, #24]
 801709c:	f103 0214 	add.w	r2, r3, #20
 80170a0:	8bfb      	ldrh	r3, [r7, #30]
 80170a2:	009b      	lsls	r3, r3, #2
 80170a4:	4619      	mov	r1, r3
 80170a6:	79fb      	ldrb	r3, [r7, #7]
 80170a8:	009b      	lsls	r3, r3, #2
 80170aa:	f003 0304 	and.w	r3, r3, #4
 80170ae:	440b      	add	r3, r1
 80170b0:	4413      	add	r3, r2
 80170b2:	697a      	ldr	r2, [r7, #20]
 80170b4:	429a      	cmp	r2, r3
 80170b6:	d006      	beq.n	80170c6 <tcp_output_fill_options+0x66>
 80170b8:	4b05      	ldr	r3, [pc, #20]	; (80170d0 <tcp_output_fill_options+0x70>)
 80170ba:	f240 7275 	movw	r2, #1909	; 0x775
 80170be:	4907      	ldr	r1, [pc, #28]	; (80170dc <tcp_output_fill_options+0x7c>)
 80170c0:	4805      	ldr	r0, [pc, #20]	; (80170d8 <tcp_output_fill_options+0x78>)
 80170c2:	f003 fbf1 	bl	801a8a8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80170c6:	bf00      	nop
 80170c8:	3720      	adds	r7, #32
 80170ca:	46bd      	mov	sp, r7
 80170cc:	bd80      	pop	{r7, pc}
 80170ce:	bf00      	nop
 80170d0:	0801d5a0 	.word	0x0801d5a0
 80170d4:	0801dcd0 	.word	0x0801dcd0
 80170d8:	0801d5f4 	.word	0x0801d5f4
 80170dc:	0801dbc8 	.word	0x0801dbc8

080170e0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b08a      	sub	sp, #40	; 0x28
 80170e4:	af04      	add	r7, sp, #16
 80170e6:	60f8      	str	r0, [r7, #12]
 80170e8:	60b9      	str	r1, [r7, #8]
 80170ea:	607a      	str	r2, [r7, #4]
 80170ec:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80170ee:	68bb      	ldr	r3, [r7, #8]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d106      	bne.n	8017102 <tcp_output_control_segment+0x22>
 80170f4:	4b1c      	ldr	r3, [pc, #112]	; (8017168 <tcp_output_control_segment+0x88>)
 80170f6:	f240 7287 	movw	r2, #1927	; 0x787
 80170fa:	491c      	ldr	r1, [pc, #112]	; (801716c <tcp_output_control_segment+0x8c>)
 80170fc:	481c      	ldr	r0, [pc, #112]	; (8017170 <tcp_output_control_segment+0x90>)
 80170fe:	f003 fbd3 	bl	801a8a8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8017102:	683a      	ldr	r2, [r7, #0]
 8017104:	6879      	ldr	r1, [r7, #4]
 8017106:	68f8      	ldr	r0, [r7, #12]
 8017108:	f7fe ff40 	bl	8015f8c <tcp_route>
 801710c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801710e:	693b      	ldr	r3, [r7, #16]
 8017110:	2b00      	cmp	r3, #0
 8017112:	d102      	bne.n	801711a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8017114:	23fc      	movs	r3, #252	; 0xfc
 8017116:	75fb      	strb	r3, [r7, #23]
 8017118:	e01c      	b.n	8017154 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	2b00      	cmp	r3, #0
 801711e:	d006      	beq.n	801712e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	7adb      	ldrb	r3, [r3, #11]
 8017124:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	7a9b      	ldrb	r3, [r3, #10]
 801712a:	757b      	strb	r3, [r7, #21]
 801712c:	e003      	b.n	8017136 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801712e:	23ff      	movs	r3, #255	; 0xff
 8017130:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8017132:	2300      	movs	r3, #0
 8017134:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8017136:	7dba      	ldrb	r2, [r7, #22]
 8017138:	693b      	ldr	r3, [r7, #16]
 801713a:	9302      	str	r3, [sp, #8]
 801713c:	2306      	movs	r3, #6
 801713e:	9301      	str	r3, [sp, #4]
 8017140:	7d7b      	ldrb	r3, [r7, #21]
 8017142:	9300      	str	r3, [sp, #0]
 8017144:	4613      	mov	r3, r2
 8017146:	683a      	ldr	r2, [r7, #0]
 8017148:	6879      	ldr	r1, [r7, #4]
 801714a:	68b8      	ldr	r0, [r7, #8]
 801714c:	f001 ff70 	bl	8019030 <ip4_output_if>
 8017150:	4603      	mov	r3, r0
 8017152:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8017154:	68b8      	ldr	r0, [r7, #8]
 8017156:	f7fa fde9 	bl	8011d2c <pbuf_free>
  return err;
 801715a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801715e:	4618      	mov	r0, r3
 8017160:	3718      	adds	r7, #24
 8017162:	46bd      	mov	sp, r7
 8017164:	bd80      	pop	{r7, pc}
 8017166:	bf00      	nop
 8017168:	0801d5a0 	.word	0x0801d5a0
 801716c:	0801dcf8 	.word	0x0801dcf8
 8017170:	0801d5f4 	.word	0x0801d5f4

08017174 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8017174:	b590      	push	{r4, r7, lr}
 8017176:	b08b      	sub	sp, #44	; 0x2c
 8017178:	af04      	add	r7, sp, #16
 801717a:	60f8      	str	r0, [r7, #12]
 801717c:	60b9      	str	r1, [r7, #8]
 801717e:	607a      	str	r2, [r7, #4]
 8017180:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8017182:	683b      	ldr	r3, [r7, #0]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d106      	bne.n	8017196 <tcp_rst+0x22>
 8017188:	4b1f      	ldr	r3, [pc, #124]	; (8017208 <tcp_rst+0x94>)
 801718a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801718e:	491f      	ldr	r1, [pc, #124]	; (801720c <tcp_rst+0x98>)
 8017190:	481f      	ldr	r0, [pc, #124]	; (8017210 <tcp_rst+0x9c>)
 8017192:	f003 fb89 	bl	801a8a8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8017196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017198:	2b00      	cmp	r3, #0
 801719a:	d106      	bne.n	80171aa <tcp_rst+0x36>
 801719c:	4b1a      	ldr	r3, [pc, #104]	; (8017208 <tcp_rst+0x94>)
 801719e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80171a2:	491c      	ldr	r1, [pc, #112]	; (8017214 <tcp_rst+0xa0>)
 80171a4:	481a      	ldr	r0, [pc, #104]	; (8017210 <tcp_rst+0x9c>)
 80171a6:	f003 fb7f 	bl	801a8a8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80171aa:	2300      	movs	r3, #0
 80171ac:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80171ae:	f246 0308 	movw	r3, #24584	; 0x6008
 80171b2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80171b4:	7dfb      	ldrb	r3, [r7, #23]
 80171b6:	b29c      	uxth	r4, r3
 80171b8:	68b8      	ldr	r0, [r7, #8]
 80171ba:	f7f9 fb19 	bl	80107f0 <lwip_htonl>
 80171be:	4602      	mov	r2, r0
 80171c0:	8abb      	ldrh	r3, [r7, #20]
 80171c2:	9303      	str	r3, [sp, #12]
 80171c4:	2314      	movs	r3, #20
 80171c6:	9302      	str	r3, [sp, #8]
 80171c8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80171ca:	9301      	str	r3, [sp, #4]
 80171cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80171ce:	9300      	str	r3, [sp, #0]
 80171d0:	4613      	mov	r3, r2
 80171d2:	2200      	movs	r2, #0
 80171d4:	4621      	mov	r1, r4
 80171d6:	6878      	ldr	r0, [r7, #4]
 80171d8:	f7ff fe92 	bl	8016f00 <tcp_output_alloc_header_common>
 80171dc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80171de:	693b      	ldr	r3, [r7, #16]
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d00c      	beq.n	80171fe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80171e4:	7dfb      	ldrb	r3, [r7, #23]
 80171e6:	2200      	movs	r2, #0
 80171e8:	6939      	ldr	r1, [r7, #16]
 80171ea:	68f8      	ldr	r0, [r7, #12]
 80171ec:	f7ff ff38 	bl	8017060 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80171f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171f2:	683a      	ldr	r2, [r7, #0]
 80171f4:	6939      	ldr	r1, [r7, #16]
 80171f6:	68f8      	ldr	r0, [r7, #12]
 80171f8:	f7ff ff72 	bl	80170e0 <tcp_output_control_segment>
 80171fc:	e000      	b.n	8017200 <tcp_rst+0x8c>
    return;
 80171fe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017200:	371c      	adds	r7, #28
 8017202:	46bd      	mov	sp, r7
 8017204:	bd90      	pop	{r4, r7, pc}
 8017206:	bf00      	nop
 8017208:	0801d5a0 	.word	0x0801d5a0
 801720c:	0801dd24 	.word	0x0801dd24
 8017210:	0801d5f4 	.word	0x0801d5f4
 8017214:	0801dd40 	.word	0x0801dd40

08017218 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017218:	b590      	push	{r4, r7, lr}
 801721a:	b087      	sub	sp, #28
 801721c:	af00      	add	r7, sp, #0
 801721e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017220:	2300      	movs	r3, #0
 8017222:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017224:	2300      	movs	r3, #0
 8017226:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	2b00      	cmp	r3, #0
 801722c:	d106      	bne.n	801723c <tcp_send_empty_ack+0x24>
 801722e:	4b28      	ldr	r3, [pc, #160]	; (80172d0 <tcp_send_empty_ack+0xb8>)
 8017230:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8017234:	4927      	ldr	r1, [pc, #156]	; (80172d4 <tcp_send_empty_ack+0xbc>)
 8017236:	4828      	ldr	r0, [pc, #160]	; (80172d8 <tcp_send_empty_ack+0xc0>)
 8017238:	f003 fb36 	bl	801a8a8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801723c:	7dfb      	ldrb	r3, [r7, #23]
 801723e:	009b      	lsls	r3, r3, #2
 8017240:	b2db      	uxtb	r3, r3
 8017242:	f003 0304 	and.w	r3, r3, #4
 8017246:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017248:	7d7b      	ldrb	r3, [r7, #21]
 801724a:	b29c      	uxth	r4, r3
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017250:	4618      	mov	r0, r3
 8017252:	f7f9 facd 	bl	80107f0 <lwip_htonl>
 8017256:	4603      	mov	r3, r0
 8017258:	2200      	movs	r2, #0
 801725a:	4621      	mov	r1, r4
 801725c:	6878      	ldr	r0, [r7, #4]
 801725e:	f7ff fec1 	bl	8016fe4 <tcp_output_alloc_header>
 8017262:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017264:	693b      	ldr	r3, [r7, #16]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d109      	bne.n	801727e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	8b5b      	ldrh	r3, [r3, #26]
 801726e:	f043 0303 	orr.w	r3, r3, #3
 8017272:	b29a      	uxth	r2, r3
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017278:	f06f 0301 	mvn.w	r3, #1
 801727c:	e023      	b.n	80172c6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801727e:	7dbb      	ldrb	r3, [r7, #22]
 8017280:	7dfa      	ldrb	r2, [r7, #23]
 8017282:	6939      	ldr	r1, [r7, #16]
 8017284:	6878      	ldr	r0, [r7, #4]
 8017286:	f7ff feeb 	bl	8017060 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801728a:	687a      	ldr	r2, [r7, #4]
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	3304      	adds	r3, #4
 8017290:	6939      	ldr	r1, [r7, #16]
 8017292:	6878      	ldr	r0, [r7, #4]
 8017294:	f7ff ff24 	bl	80170e0 <tcp_output_control_segment>
 8017298:	4603      	mov	r3, r0
 801729a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801729c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d007      	beq.n	80172b4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	8b5b      	ldrh	r3, [r3, #26]
 80172a8:	f043 0303 	orr.w	r3, r3, #3
 80172ac:	b29a      	uxth	r2, r3
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	835a      	strh	r2, [r3, #26]
 80172b2:	e006      	b.n	80172c2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	8b5b      	ldrh	r3, [r3, #26]
 80172b8:	f023 0303 	bic.w	r3, r3, #3
 80172bc:	b29a      	uxth	r2, r3
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80172c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80172c6:	4618      	mov	r0, r3
 80172c8:	371c      	adds	r7, #28
 80172ca:	46bd      	mov	sp, r7
 80172cc:	bd90      	pop	{r4, r7, pc}
 80172ce:	bf00      	nop
 80172d0:	0801d5a0 	.word	0x0801d5a0
 80172d4:	0801dd5c 	.word	0x0801dd5c
 80172d8:	0801d5f4 	.word	0x0801d5f4

080172dc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80172dc:	b590      	push	{r4, r7, lr}
 80172de:	b087      	sub	sp, #28
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80172e4:	2300      	movs	r3, #0
 80172e6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d106      	bne.n	80172fc <tcp_keepalive+0x20>
 80172ee:	4b18      	ldr	r3, [pc, #96]	; (8017350 <tcp_keepalive+0x74>)
 80172f0:	f640 0224 	movw	r2, #2084	; 0x824
 80172f4:	4917      	ldr	r1, [pc, #92]	; (8017354 <tcp_keepalive+0x78>)
 80172f6:	4818      	ldr	r0, [pc, #96]	; (8017358 <tcp_keepalive+0x7c>)
 80172f8:	f003 fad6 	bl	801a8a8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80172fc:	7dfb      	ldrb	r3, [r7, #23]
 80172fe:	b29c      	uxth	r4, r3
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017304:	3b01      	subs	r3, #1
 8017306:	4618      	mov	r0, r3
 8017308:	f7f9 fa72 	bl	80107f0 <lwip_htonl>
 801730c:	4603      	mov	r3, r0
 801730e:	2200      	movs	r2, #0
 8017310:	4621      	mov	r1, r4
 8017312:	6878      	ldr	r0, [r7, #4]
 8017314:	f7ff fe66 	bl	8016fe4 <tcp_output_alloc_header>
 8017318:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801731a:	693b      	ldr	r3, [r7, #16]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d102      	bne.n	8017326 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017320:	f04f 33ff 	mov.w	r3, #4294967295
 8017324:	e010      	b.n	8017348 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017326:	7dfb      	ldrb	r3, [r7, #23]
 8017328:	2200      	movs	r2, #0
 801732a:	6939      	ldr	r1, [r7, #16]
 801732c:	6878      	ldr	r0, [r7, #4]
 801732e:	f7ff fe97 	bl	8017060 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017332:	687a      	ldr	r2, [r7, #4]
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	3304      	adds	r3, #4
 8017338:	6939      	ldr	r1, [r7, #16]
 801733a:	6878      	ldr	r0, [r7, #4]
 801733c:	f7ff fed0 	bl	80170e0 <tcp_output_control_segment>
 8017340:	4603      	mov	r3, r0
 8017342:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017344:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017348:	4618      	mov	r0, r3
 801734a:	371c      	adds	r7, #28
 801734c:	46bd      	mov	sp, r7
 801734e:	bd90      	pop	{r4, r7, pc}
 8017350:	0801d5a0 	.word	0x0801d5a0
 8017354:	0801dd7c 	.word	0x0801dd7c
 8017358:	0801d5f4 	.word	0x0801d5f4

0801735c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801735c:	b590      	push	{r4, r7, lr}
 801735e:	b08b      	sub	sp, #44	; 0x2c
 8017360:	af00      	add	r7, sp, #0
 8017362:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017364:	2300      	movs	r3, #0
 8017366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	2b00      	cmp	r3, #0
 801736e:	d106      	bne.n	801737e <tcp_zero_window_probe+0x22>
 8017370:	4b4c      	ldr	r3, [pc, #304]	; (80174a4 <tcp_zero_window_probe+0x148>)
 8017372:	f640 024f 	movw	r2, #2127	; 0x84f
 8017376:	494c      	ldr	r1, [pc, #304]	; (80174a8 <tcp_zero_window_probe+0x14c>)
 8017378:	484c      	ldr	r0, [pc, #304]	; (80174ac <tcp_zero_window_probe+0x150>)
 801737a:	f003 fa95 	bl	801a8a8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017382:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017384:	6a3b      	ldr	r3, [r7, #32]
 8017386:	2b00      	cmp	r3, #0
 8017388:	d101      	bne.n	801738e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801738a:	2300      	movs	r3, #0
 801738c:	e086      	b.n	801749c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017394:	2bff      	cmp	r3, #255	; 0xff
 8017396:	d007      	beq.n	80173a8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801739e:	3301      	adds	r3, #1
 80173a0:	b2da      	uxtb	r2, r3
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80173a8:	6a3b      	ldr	r3, [r7, #32]
 80173aa:	68db      	ldr	r3, [r3, #12]
 80173ac:	899b      	ldrh	r3, [r3, #12]
 80173ae:	b29b      	uxth	r3, r3
 80173b0:	4618      	mov	r0, r3
 80173b2:	f7f9 fa08 	bl	80107c6 <lwip_htons>
 80173b6:	4603      	mov	r3, r0
 80173b8:	b2db      	uxtb	r3, r3
 80173ba:	f003 0301 	and.w	r3, r3, #1
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d005      	beq.n	80173ce <tcp_zero_window_probe+0x72>
 80173c2:	6a3b      	ldr	r3, [r7, #32]
 80173c4:	891b      	ldrh	r3, [r3, #8]
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d101      	bne.n	80173ce <tcp_zero_window_probe+0x72>
 80173ca:	2301      	movs	r3, #1
 80173cc:	e000      	b.n	80173d0 <tcp_zero_window_probe+0x74>
 80173ce:	2300      	movs	r3, #0
 80173d0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80173d2:	7ffb      	ldrb	r3, [r7, #31]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	bf0c      	ite	eq
 80173d8:	2301      	moveq	r3, #1
 80173da:	2300      	movne	r3, #0
 80173dc:	b2db      	uxtb	r3, r3
 80173de:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80173e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80173e4:	b299      	uxth	r1, r3
 80173e6:	6a3b      	ldr	r3, [r7, #32]
 80173e8:	68db      	ldr	r3, [r3, #12]
 80173ea:	685b      	ldr	r3, [r3, #4]
 80173ec:	8bba      	ldrh	r2, [r7, #28]
 80173ee:	6878      	ldr	r0, [r7, #4]
 80173f0:	f7ff fdf8 	bl	8016fe4 <tcp_output_alloc_header>
 80173f4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80173f6:	69bb      	ldr	r3, [r7, #24]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d102      	bne.n	8017402 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80173fc:	f04f 33ff 	mov.w	r3, #4294967295
 8017400:	e04c      	b.n	801749c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017402:	69bb      	ldr	r3, [r7, #24]
 8017404:	685b      	ldr	r3, [r3, #4]
 8017406:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017408:	7ffb      	ldrb	r3, [r7, #31]
 801740a:	2b00      	cmp	r3, #0
 801740c:	d011      	beq.n	8017432 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801740e:	697b      	ldr	r3, [r7, #20]
 8017410:	899b      	ldrh	r3, [r3, #12]
 8017412:	b29b      	uxth	r3, r3
 8017414:	b21b      	sxth	r3, r3
 8017416:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801741a:	b21c      	sxth	r4, r3
 801741c:	2011      	movs	r0, #17
 801741e:	f7f9 f9d2 	bl	80107c6 <lwip_htons>
 8017422:	4603      	mov	r3, r0
 8017424:	b21b      	sxth	r3, r3
 8017426:	4323      	orrs	r3, r4
 8017428:	b21b      	sxth	r3, r3
 801742a:	b29a      	uxth	r2, r3
 801742c:	697b      	ldr	r3, [r7, #20]
 801742e:	819a      	strh	r2, [r3, #12]
 8017430:	e010      	b.n	8017454 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017432:	69bb      	ldr	r3, [r7, #24]
 8017434:	685b      	ldr	r3, [r3, #4]
 8017436:	3314      	adds	r3, #20
 8017438:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801743a:	6a3b      	ldr	r3, [r7, #32]
 801743c:	6858      	ldr	r0, [r3, #4]
 801743e:	6a3b      	ldr	r3, [r7, #32]
 8017440:	685b      	ldr	r3, [r3, #4]
 8017442:	891a      	ldrh	r2, [r3, #8]
 8017444:	6a3b      	ldr	r3, [r7, #32]
 8017446:	891b      	ldrh	r3, [r3, #8]
 8017448:	1ad3      	subs	r3, r2, r3
 801744a:	b29b      	uxth	r3, r3
 801744c:	2201      	movs	r2, #1
 801744e:	6939      	ldr	r1, [r7, #16]
 8017450:	f7fa fe56 	bl	8012100 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017454:	6a3b      	ldr	r3, [r7, #32]
 8017456:	68db      	ldr	r3, [r3, #12]
 8017458:	685b      	ldr	r3, [r3, #4]
 801745a:	4618      	mov	r0, r3
 801745c:	f7f9 f9c8 	bl	80107f0 <lwip_htonl>
 8017460:	4603      	mov	r3, r0
 8017462:	3301      	adds	r3, #1
 8017464:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	1ad3      	subs	r3, r2, r3
 801746e:	2b00      	cmp	r3, #0
 8017470:	da02      	bge.n	8017478 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	68fa      	ldr	r2, [r7, #12]
 8017476:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801747c:	2200      	movs	r2, #0
 801747e:	69b9      	ldr	r1, [r7, #24]
 8017480:	6878      	ldr	r0, [r7, #4]
 8017482:	f7ff fded 	bl	8017060 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017486:	687a      	ldr	r2, [r7, #4]
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	3304      	adds	r3, #4
 801748c:	69b9      	ldr	r1, [r7, #24]
 801748e:	6878      	ldr	r0, [r7, #4]
 8017490:	f7ff fe26 	bl	80170e0 <tcp_output_control_segment>
 8017494:	4603      	mov	r3, r0
 8017496:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017498:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801749c:	4618      	mov	r0, r3
 801749e:	372c      	adds	r7, #44	; 0x2c
 80174a0:	46bd      	mov	sp, r7
 80174a2:	bd90      	pop	{r4, r7, pc}
 80174a4:	0801d5a0 	.word	0x0801d5a0
 80174a8:	0801dd98 	.word	0x0801dd98
 80174ac:	0801d5f4 	.word	0x0801d5f4

080174b0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80174b0:	b580      	push	{r7, lr}
 80174b2:	b082      	sub	sp, #8
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80174b8:	f7fa ff10 	bl	80122dc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80174bc:	4b0a      	ldr	r3, [pc, #40]	; (80174e8 <tcpip_tcp_timer+0x38>)
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d103      	bne.n	80174cc <tcpip_tcp_timer+0x1c>
 80174c4:	4b09      	ldr	r3, [pc, #36]	; (80174ec <tcpip_tcp_timer+0x3c>)
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d005      	beq.n	80174d8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80174cc:	2200      	movs	r2, #0
 80174ce:	4908      	ldr	r1, [pc, #32]	; (80174f0 <tcpip_tcp_timer+0x40>)
 80174d0:	20fa      	movs	r0, #250	; 0xfa
 80174d2:	f000 f8f3 	bl	80176bc <sys_timeout>
 80174d6:	e003      	b.n	80174e0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80174d8:	4b06      	ldr	r3, [pc, #24]	; (80174f4 <tcpip_tcp_timer+0x44>)
 80174da:	2200      	movs	r2, #0
 80174dc:	601a      	str	r2, [r3, #0]
  }
}
 80174de:	bf00      	nop
 80174e0:	bf00      	nop
 80174e2:	3708      	adds	r7, #8
 80174e4:	46bd      	mov	sp, r7
 80174e6:	bd80      	pop	{r7, pc}
 80174e8:	2000dc80 	.word	0x2000dc80
 80174ec:	2000dc90 	.word	0x2000dc90
 80174f0:	080174b1 	.word	0x080174b1
 80174f4:	200031b8 	.word	0x200031b8

080174f8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80174f8:	b580      	push	{r7, lr}
 80174fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80174fc:	4b0a      	ldr	r3, [pc, #40]	; (8017528 <tcp_timer_needed+0x30>)
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	2b00      	cmp	r3, #0
 8017502:	d10f      	bne.n	8017524 <tcp_timer_needed+0x2c>
 8017504:	4b09      	ldr	r3, [pc, #36]	; (801752c <tcp_timer_needed+0x34>)
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	2b00      	cmp	r3, #0
 801750a:	d103      	bne.n	8017514 <tcp_timer_needed+0x1c>
 801750c:	4b08      	ldr	r3, [pc, #32]	; (8017530 <tcp_timer_needed+0x38>)
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	2b00      	cmp	r3, #0
 8017512:	d007      	beq.n	8017524 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017514:	4b04      	ldr	r3, [pc, #16]	; (8017528 <tcp_timer_needed+0x30>)
 8017516:	2201      	movs	r2, #1
 8017518:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801751a:	2200      	movs	r2, #0
 801751c:	4905      	ldr	r1, [pc, #20]	; (8017534 <tcp_timer_needed+0x3c>)
 801751e:	20fa      	movs	r0, #250	; 0xfa
 8017520:	f000 f8cc 	bl	80176bc <sys_timeout>
  }
}
 8017524:	bf00      	nop
 8017526:	bd80      	pop	{r7, pc}
 8017528:	200031b8 	.word	0x200031b8
 801752c:	2000dc80 	.word	0x2000dc80
 8017530:	2000dc90 	.word	0x2000dc90
 8017534:	080174b1 	.word	0x080174b1

08017538 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017538:	b580      	push	{r7, lr}
 801753a:	b086      	sub	sp, #24
 801753c:	af00      	add	r7, sp, #0
 801753e:	60f8      	str	r0, [r7, #12]
 8017540:	60b9      	str	r1, [r7, #8]
 8017542:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017544:	2006      	movs	r0, #6
 8017546:	f7f9 fd93 	bl	8011070 <memp_malloc>
 801754a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801754c:	693b      	ldr	r3, [r7, #16]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d109      	bne.n	8017566 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017552:	693b      	ldr	r3, [r7, #16]
 8017554:	2b00      	cmp	r3, #0
 8017556:	d151      	bne.n	80175fc <sys_timeout_abs+0xc4>
 8017558:	4b2a      	ldr	r3, [pc, #168]	; (8017604 <sys_timeout_abs+0xcc>)
 801755a:	22be      	movs	r2, #190	; 0xbe
 801755c:	492a      	ldr	r1, [pc, #168]	; (8017608 <sys_timeout_abs+0xd0>)
 801755e:	482b      	ldr	r0, [pc, #172]	; (801760c <sys_timeout_abs+0xd4>)
 8017560:	f003 f9a2 	bl	801a8a8 <iprintf>
    return;
 8017564:	e04a      	b.n	80175fc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017566:	693b      	ldr	r3, [r7, #16]
 8017568:	2200      	movs	r2, #0
 801756a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801756c:	693b      	ldr	r3, [r7, #16]
 801756e:	68ba      	ldr	r2, [r7, #8]
 8017570:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017572:	693b      	ldr	r3, [r7, #16]
 8017574:	687a      	ldr	r2, [r7, #4]
 8017576:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017578:	693b      	ldr	r3, [r7, #16]
 801757a:	68fa      	ldr	r2, [r7, #12]
 801757c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801757e:	4b24      	ldr	r3, [pc, #144]	; (8017610 <sys_timeout_abs+0xd8>)
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	2b00      	cmp	r3, #0
 8017584:	d103      	bne.n	801758e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017586:	4a22      	ldr	r2, [pc, #136]	; (8017610 <sys_timeout_abs+0xd8>)
 8017588:	693b      	ldr	r3, [r7, #16]
 801758a:	6013      	str	r3, [r2, #0]
    return;
 801758c:	e037      	b.n	80175fe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801758e:	693b      	ldr	r3, [r7, #16]
 8017590:	685a      	ldr	r2, [r3, #4]
 8017592:	4b1f      	ldr	r3, [pc, #124]	; (8017610 <sys_timeout_abs+0xd8>)
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	685b      	ldr	r3, [r3, #4]
 8017598:	1ad3      	subs	r3, r2, r3
 801759a:	0fdb      	lsrs	r3, r3, #31
 801759c:	f003 0301 	and.w	r3, r3, #1
 80175a0:	b2db      	uxtb	r3, r3
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d007      	beq.n	80175b6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80175a6:	4b1a      	ldr	r3, [pc, #104]	; (8017610 <sys_timeout_abs+0xd8>)
 80175a8:	681a      	ldr	r2, [r3, #0]
 80175aa:	693b      	ldr	r3, [r7, #16]
 80175ac:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80175ae:	4a18      	ldr	r2, [pc, #96]	; (8017610 <sys_timeout_abs+0xd8>)
 80175b0:	693b      	ldr	r3, [r7, #16]
 80175b2:	6013      	str	r3, [r2, #0]
 80175b4:	e023      	b.n	80175fe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80175b6:	4b16      	ldr	r3, [pc, #88]	; (8017610 <sys_timeout_abs+0xd8>)
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	617b      	str	r3, [r7, #20]
 80175bc:	e01a      	b.n	80175f4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80175be:	697b      	ldr	r3, [r7, #20]
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d00b      	beq.n	80175de <sys_timeout_abs+0xa6>
 80175c6:	693b      	ldr	r3, [r7, #16]
 80175c8:	685a      	ldr	r2, [r3, #4]
 80175ca:	697b      	ldr	r3, [r7, #20]
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	685b      	ldr	r3, [r3, #4]
 80175d0:	1ad3      	subs	r3, r2, r3
 80175d2:	0fdb      	lsrs	r3, r3, #31
 80175d4:	f003 0301 	and.w	r3, r3, #1
 80175d8:	b2db      	uxtb	r3, r3
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d007      	beq.n	80175ee <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80175de:	697b      	ldr	r3, [r7, #20]
 80175e0:	681a      	ldr	r2, [r3, #0]
 80175e2:	693b      	ldr	r3, [r7, #16]
 80175e4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80175e6:	697b      	ldr	r3, [r7, #20]
 80175e8:	693a      	ldr	r2, [r7, #16]
 80175ea:	601a      	str	r2, [r3, #0]
        break;
 80175ec:	e007      	b.n	80175fe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80175ee:	697b      	ldr	r3, [r7, #20]
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	617b      	str	r3, [r7, #20]
 80175f4:	697b      	ldr	r3, [r7, #20]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d1e1      	bne.n	80175be <sys_timeout_abs+0x86>
 80175fa:	e000      	b.n	80175fe <sys_timeout_abs+0xc6>
    return;
 80175fc:	bf00      	nop
      }
    }
  }
}
 80175fe:	3718      	adds	r7, #24
 8017600:	46bd      	mov	sp, r7
 8017602:	bd80      	pop	{r7, pc}
 8017604:	0801ddbc 	.word	0x0801ddbc
 8017608:	0801ddf0 	.word	0x0801ddf0
 801760c:	0801de30 	.word	0x0801de30
 8017610:	200031b0 	.word	0x200031b0

08017614 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b086      	sub	sp, #24
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017620:	697b      	ldr	r3, [r7, #20]
 8017622:	685b      	ldr	r3, [r3, #4]
 8017624:	4798      	blx	r3

  now = sys_now();
 8017626:	f7f3 f971 	bl	800a90c <sys_now>
 801762a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801762c:	697b      	ldr	r3, [r7, #20]
 801762e:	681a      	ldr	r2, [r3, #0]
 8017630:	4b0f      	ldr	r3, [pc, #60]	; (8017670 <lwip_cyclic_timer+0x5c>)
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	4413      	add	r3, r2
 8017636:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017638:	68fa      	ldr	r2, [r7, #12]
 801763a:	693b      	ldr	r3, [r7, #16]
 801763c:	1ad3      	subs	r3, r2, r3
 801763e:	0fdb      	lsrs	r3, r3, #31
 8017640:	f003 0301 	and.w	r3, r3, #1
 8017644:	b2db      	uxtb	r3, r3
 8017646:	2b00      	cmp	r3, #0
 8017648:	d009      	beq.n	801765e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801764a:	697b      	ldr	r3, [r7, #20]
 801764c:	681a      	ldr	r2, [r3, #0]
 801764e:	693b      	ldr	r3, [r7, #16]
 8017650:	4413      	add	r3, r2
 8017652:	687a      	ldr	r2, [r7, #4]
 8017654:	4907      	ldr	r1, [pc, #28]	; (8017674 <lwip_cyclic_timer+0x60>)
 8017656:	4618      	mov	r0, r3
 8017658:	f7ff ff6e 	bl	8017538 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801765c:	e004      	b.n	8017668 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801765e:	687a      	ldr	r2, [r7, #4]
 8017660:	4904      	ldr	r1, [pc, #16]	; (8017674 <lwip_cyclic_timer+0x60>)
 8017662:	68f8      	ldr	r0, [r7, #12]
 8017664:	f7ff ff68 	bl	8017538 <sys_timeout_abs>
}
 8017668:	bf00      	nop
 801766a:	3718      	adds	r7, #24
 801766c:	46bd      	mov	sp, r7
 801766e:	bd80      	pop	{r7, pc}
 8017670:	200031b4 	.word	0x200031b4
 8017674:	08017615 	.word	0x08017615

08017678 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017678:	b580      	push	{r7, lr}
 801767a:	b082      	sub	sp, #8
 801767c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801767e:	2301      	movs	r3, #1
 8017680:	607b      	str	r3, [r7, #4]
 8017682:	e00e      	b.n	80176a2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017684:	4a0b      	ldr	r2, [pc, #44]	; (80176b4 <sys_timeouts_init+0x3c>)
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	00db      	lsls	r3, r3, #3
 8017690:	4a08      	ldr	r2, [pc, #32]	; (80176b4 <sys_timeouts_init+0x3c>)
 8017692:	4413      	add	r3, r2
 8017694:	461a      	mov	r2, r3
 8017696:	4908      	ldr	r1, [pc, #32]	; (80176b8 <sys_timeouts_init+0x40>)
 8017698:	f000 f810 	bl	80176bc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	3301      	adds	r3, #1
 80176a0:	607b      	str	r3, [r7, #4]
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	2b02      	cmp	r3, #2
 80176a6:	d9ed      	bls.n	8017684 <sys_timeouts_init+0xc>
  }
}
 80176a8:	bf00      	nop
 80176aa:	bf00      	nop
 80176ac:	3708      	adds	r7, #8
 80176ae:	46bd      	mov	sp, r7
 80176b0:	bd80      	pop	{r7, pc}
 80176b2:	bf00      	nop
 80176b4:	0809530c 	.word	0x0809530c
 80176b8:	08017615 	.word	0x08017615

080176bc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80176bc:	b580      	push	{r7, lr}
 80176be:	b086      	sub	sp, #24
 80176c0:	af00      	add	r7, sp, #0
 80176c2:	60f8      	str	r0, [r7, #12]
 80176c4:	60b9      	str	r1, [r7, #8]
 80176c6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80176ce:	d306      	bcc.n	80176de <sys_timeout+0x22>
 80176d0:	4b0a      	ldr	r3, [pc, #40]	; (80176fc <sys_timeout+0x40>)
 80176d2:	f240 1229 	movw	r2, #297	; 0x129
 80176d6:	490a      	ldr	r1, [pc, #40]	; (8017700 <sys_timeout+0x44>)
 80176d8:	480a      	ldr	r0, [pc, #40]	; (8017704 <sys_timeout+0x48>)
 80176da:	f003 f8e5 	bl	801a8a8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80176de:	f7f3 f915 	bl	800a90c <sys_now>
 80176e2:	4602      	mov	r2, r0
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	4413      	add	r3, r2
 80176e8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80176ea:	687a      	ldr	r2, [r7, #4]
 80176ec:	68b9      	ldr	r1, [r7, #8]
 80176ee:	6978      	ldr	r0, [r7, #20]
 80176f0:	f7ff ff22 	bl	8017538 <sys_timeout_abs>
#endif
}
 80176f4:	bf00      	nop
 80176f6:	3718      	adds	r7, #24
 80176f8:	46bd      	mov	sp, r7
 80176fa:	bd80      	pop	{r7, pc}
 80176fc:	0801ddbc 	.word	0x0801ddbc
 8017700:	0801de58 	.word	0x0801de58
 8017704:	0801de30 	.word	0x0801de30

08017708 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017708:	b580      	push	{r7, lr}
 801770a:	b084      	sub	sp, #16
 801770c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801770e:	f7f3 f8fd 	bl	800a90c <sys_now>
 8017712:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8017714:	4b1a      	ldr	r3, [pc, #104]	; (8017780 <sys_check_timeouts+0x78>)
 8017716:	781b      	ldrb	r3, [r3, #0]
 8017718:	b2db      	uxtb	r3, r3
 801771a:	2b00      	cmp	r3, #0
 801771c:	d001      	beq.n	8017722 <sys_check_timeouts+0x1a>
 801771e:	f7f9 ffcb 	bl	80116b8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8017722:	4b18      	ldr	r3, [pc, #96]	; (8017784 <sys_check_timeouts+0x7c>)
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017728:	68bb      	ldr	r3, [r7, #8]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d022      	beq.n	8017774 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801772e:	68bb      	ldr	r3, [r7, #8]
 8017730:	685b      	ldr	r3, [r3, #4]
 8017732:	68fa      	ldr	r2, [r7, #12]
 8017734:	1ad3      	subs	r3, r2, r3
 8017736:	0fdb      	lsrs	r3, r3, #31
 8017738:	f003 0301 	and.w	r3, r3, #1
 801773c:	b2db      	uxtb	r3, r3
 801773e:	2b00      	cmp	r3, #0
 8017740:	d11a      	bne.n	8017778 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017742:	68bb      	ldr	r3, [r7, #8]
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	4a0f      	ldr	r2, [pc, #60]	; (8017784 <sys_check_timeouts+0x7c>)
 8017748:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801774a:	68bb      	ldr	r3, [r7, #8]
 801774c:	689b      	ldr	r3, [r3, #8]
 801774e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017750:	68bb      	ldr	r3, [r7, #8]
 8017752:	68db      	ldr	r3, [r3, #12]
 8017754:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017756:	68bb      	ldr	r3, [r7, #8]
 8017758:	685b      	ldr	r3, [r3, #4]
 801775a:	4a0b      	ldr	r2, [pc, #44]	; (8017788 <sys_check_timeouts+0x80>)
 801775c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801775e:	68b9      	ldr	r1, [r7, #8]
 8017760:	2006      	movs	r0, #6
 8017762:	f7f9 fcd1 	bl	8011108 <memp_free>
    if (handler != NULL) {
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	2b00      	cmp	r3, #0
 801776a:	d0d3      	beq.n	8017714 <sys_check_timeouts+0xc>
      handler(arg);
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	6838      	ldr	r0, [r7, #0]
 8017770:	4798      	blx	r3
  do {
 8017772:	e7cf      	b.n	8017714 <sys_check_timeouts+0xc>
      return;
 8017774:	bf00      	nop
 8017776:	e000      	b.n	801777a <sys_check_timeouts+0x72>
      return;
 8017778:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801777a:	3710      	adds	r7, #16
 801777c:	46bd      	mov	sp, r7
 801777e:	bd80      	pop	{r7, pc}
 8017780:	2000dc78 	.word	0x2000dc78
 8017784:	200031b0 	.word	0x200031b0
 8017788:	200031b4 	.word	0x200031b4

0801778c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801778c:	b580      	push	{r7, lr}
 801778e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017790:	f003 f8b8 	bl	801a904 <rand>
 8017794:	4603      	mov	r3, r0
 8017796:	b29b      	uxth	r3, r3
 8017798:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801779c:	b29b      	uxth	r3, r3
 801779e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80177a2:	b29a      	uxth	r2, r3
 80177a4:	4b01      	ldr	r3, [pc, #4]	; (80177ac <udp_init+0x20>)
 80177a6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80177a8:	bf00      	nop
 80177aa:	bd80      	pop	{r7, pc}
 80177ac:	2000004c 	.word	0x2000004c

080177b0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80177b0:	b580      	push	{r7, lr}
 80177b2:	b084      	sub	sp, #16
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	60f8      	str	r0, [r7, #12]
 80177b8:	60b9      	str	r1, [r7, #8]
 80177ba:	4613      	mov	r3, r2
 80177bc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d105      	bne.n	80177d0 <udp_input_local_match+0x20>
 80177c4:	4b27      	ldr	r3, [pc, #156]	; (8017864 <udp_input_local_match+0xb4>)
 80177c6:	2287      	movs	r2, #135	; 0x87
 80177c8:	4927      	ldr	r1, [pc, #156]	; (8017868 <udp_input_local_match+0xb8>)
 80177ca:	4828      	ldr	r0, [pc, #160]	; (801786c <udp_input_local_match+0xbc>)
 80177cc:	f003 f86c 	bl	801a8a8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80177d0:	68bb      	ldr	r3, [r7, #8]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d105      	bne.n	80177e2 <udp_input_local_match+0x32>
 80177d6:	4b23      	ldr	r3, [pc, #140]	; (8017864 <udp_input_local_match+0xb4>)
 80177d8:	2288      	movs	r2, #136	; 0x88
 80177da:	4925      	ldr	r1, [pc, #148]	; (8017870 <udp_input_local_match+0xc0>)
 80177dc:	4823      	ldr	r0, [pc, #140]	; (801786c <udp_input_local_match+0xbc>)
 80177de:	f003 f863 	bl	801a8a8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	7a1b      	ldrb	r3, [r3, #8]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d00b      	beq.n	8017802 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	7a1a      	ldrb	r2, [r3, #8]
 80177ee:	4b21      	ldr	r3, [pc, #132]	; (8017874 <udp_input_local_match+0xc4>)
 80177f0:	685b      	ldr	r3, [r3, #4]
 80177f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80177f6:	3301      	adds	r3, #1
 80177f8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80177fa:	429a      	cmp	r2, r3
 80177fc:	d001      	beq.n	8017802 <udp_input_local_match+0x52>
    return 0;
 80177fe:	2300      	movs	r3, #0
 8017800:	e02b      	b.n	801785a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017802:	79fb      	ldrb	r3, [r7, #7]
 8017804:	2b00      	cmp	r3, #0
 8017806:	d018      	beq.n	801783a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d013      	beq.n	8017836 <udp_input_local_match+0x86>
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	2b00      	cmp	r3, #0
 8017814:	d00f      	beq.n	8017836 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017816:	4b17      	ldr	r3, [pc, #92]	; (8017874 <udp_input_local_match+0xc4>)
 8017818:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801781a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801781e:	d00a      	beq.n	8017836 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	681a      	ldr	r2, [r3, #0]
 8017824:	4b13      	ldr	r3, [pc, #76]	; (8017874 <udp_input_local_match+0xc4>)
 8017826:	695b      	ldr	r3, [r3, #20]
 8017828:	405a      	eors	r2, r3
 801782a:	68bb      	ldr	r3, [r7, #8]
 801782c:	3308      	adds	r3, #8
 801782e:	681b      	ldr	r3, [r3, #0]
 8017830:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017832:	2b00      	cmp	r3, #0
 8017834:	d110      	bne.n	8017858 <udp_input_local_match+0xa8>
          return 1;
 8017836:	2301      	movs	r3, #1
 8017838:	e00f      	b.n	801785a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	2b00      	cmp	r3, #0
 801783e:	d009      	beq.n	8017854 <udp_input_local_match+0xa4>
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	2b00      	cmp	r3, #0
 8017846:	d005      	beq.n	8017854 <udp_input_local_match+0xa4>
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	681a      	ldr	r2, [r3, #0]
 801784c:	4b09      	ldr	r3, [pc, #36]	; (8017874 <udp_input_local_match+0xc4>)
 801784e:	695b      	ldr	r3, [r3, #20]
 8017850:	429a      	cmp	r2, r3
 8017852:	d101      	bne.n	8017858 <udp_input_local_match+0xa8>
        return 1;
 8017854:	2301      	movs	r3, #1
 8017856:	e000      	b.n	801785a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017858:	2300      	movs	r3, #0
}
 801785a:	4618      	mov	r0, r3
 801785c:	3710      	adds	r7, #16
 801785e:	46bd      	mov	sp, r7
 8017860:	bd80      	pop	{r7, pc}
 8017862:	bf00      	nop
 8017864:	0801dea4 	.word	0x0801dea4
 8017868:	0801ded4 	.word	0x0801ded4
 801786c:	0801def8 	.word	0x0801def8
 8017870:	0801df20 	.word	0x0801df20
 8017874:	2000a73c 	.word	0x2000a73c

08017878 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017878:	b590      	push	{r4, r7, lr}
 801787a:	b08d      	sub	sp, #52	; 0x34
 801787c:	af02      	add	r7, sp, #8
 801787e:	6078      	str	r0, [r7, #4]
 8017880:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017882:	2300      	movs	r3, #0
 8017884:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	2b00      	cmp	r3, #0
 801788a:	d105      	bne.n	8017898 <udp_input+0x20>
 801788c:	4b7c      	ldr	r3, [pc, #496]	; (8017a80 <udp_input+0x208>)
 801788e:	22cf      	movs	r2, #207	; 0xcf
 8017890:	497c      	ldr	r1, [pc, #496]	; (8017a84 <udp_input+0x20c>)
 8017892:	487d      	ldr	r0, [pc, #500]	; (8017a88 <udp_input+0x210>)
 8017894:	f003 f808 	bl	801a8a8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017898:	683b      	ldr	r3, [r7, #0]
 801789a:	2b00      	cmp	r3, #0
 801789c:	d105      	bne.n	80178aa <udp_input+0x32>
 801789e:	4b78      	ldr	r3, [pc, #480]	; (8017a80 <udp_input+0x208>)
 80178a0:	22d0      	movs	r2, #208	; 0xd0
 80178a2:	497a      	ldr	r1, [pc, #488]	; (8017a8c <udp_input+0x214>)
 80178a4:	4878      	ldr	r0, [pc, #480]	; (8017a88 <udp_input+0x210>)
 80178a6:	f002 ffff 	bl	801a8a8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	895b      	ldrh	r3, [r3, #10]
 80178ae:	2b07      	cmp	r3, #7
 80178b0:	d803      	bhi.n	80178ba <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80178b2:	6878      	ldr	r0, [r7, #4]
 80178b4:	f7fa fa3a 	bl	8011d2c <pbuf_free>
    goto end;
 80178b8:	e0de      	b.n	8017a78 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	685b      	ldr	r3, [r3, #4]
 80178be:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80178c0:	4b73      	ldr	r3, [pc, #460]	; (8017a90 <udp_input+0x218>)
 80178c2:	695b      	ldr	r3, [r3, #20]
 80178c4:	4a72      	ldr	r2, [pc, #456]	; (8017a90 <udp_input+0x218>)
 80178c6:	6812      	ldr	r2, [r2, #0]
 80178c8:	4611      	mov	r1, r2
 80178ca:	4618      	mov	r0, r3
 80178cc:	f001 fc88 	bl	80191e0 <ip4_addr_isbroadcast_u32>
 80178d0:	4603      	mov	r3, r0
 80178d2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80178d4:	697b      	ldr	r3, [r7, #20]
 80178d6:	881b      	ldrh	r3, [r3, #0]
 80178d8:	b29b      	uxth	r3, r3
 80178da:	4618      	mov	r0, r3
 80178dc:	f7f8 ff73 	bl	80107c6 <lwip_htons>
 80178e0:	4603      	mov	r3, r0
 80178e2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80178e4:	697b      	ldr	r3, [r7, #20]
 80178e6:	885b      	ldrh	r3, [r3, #2]
 80178e8:	b29b      	uxth	r3, r3
 80178ea:	4618      	mov	r0, r3
 80178ec:	f7f8 ff6b 	bl	80107c6 <lwip_htons>
 80178f0:	4603      	mov	r3, r0
 80178f2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80178f4:	2300      	movs	r3, #0
 80178f6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80178f8:	2300      	movs	r3, #0
 80178fa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80178fc:	2300      	movs	r3, #0
 80178fe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017900:	4b64      	ldr	r3, [pc, #400]	; (8017a94 <udp_input+0x21c>)
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	627b      	str	r3, [r7, #36]	; 0x24
 8017906:	e054      	b.n	80179b2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801790a:	8a5b      	ldrh	r3, [r3, #18]
 801790c:	89fa      	ldrh	r2, [r7, #14]
 801790e:	429a      	cmp	r2, r3
 8017910:	d14a      	bne.n	80179a8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017912:	7cfb      	ldrb	r3, [r7, #19]
 8017914:	461a      	mov	r2, r3
 8017916:	6839      	ldr	r1, [r7, #0]
 8017918:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801791a:	f7ff ff49 	bl	80177b0 <udp_input_local_match>
 801791e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017920:	2b00      	cmp	r3, #0
 8017922:	d041      	beq.n	80179a8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017926:	7c1b      	ldrb	r3, [r3, #16]
 8017928:	f003 0304 	and.w	r3, r3, #4
 801792c:	2b00      	cmp	r3, #0
 801792e:	d11d      	bne.n	801796c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017930:	69fb      	ldr	r3, [r7, #28]
 8017932:	2b00      	cmp	r3, #0
 8017934:	d102      	bne.n	801793c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017938:	61fb      	str	r3, [r7, #28]
 801793a:	e017      	b.n	801796c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801793c:	7cfb      	ldrb	r3, [r7, #19]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d014      	beq.n	801796c <udp_input+0xf4>
 8017942:	4b53      	ldr	r3, [pc, #332]	; (8017a90 <udp_input+0x218>)
 8017944:	695b      	ldr	r3, [r3, #20]
 8017946:	f1b3 3fff 	cmp.w	r3, #4294967295
 801794a:	d10f      	bne.n	801796c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801794c:	69fb      	ldr	r3, [r7, #28]
 801794e:	681a      	ldr	r2, [r3, #0]
 8017950:	683b      	ldr	r3, [r7, #0]
 8017952:	3304      	adds	r3, #4
 8017954:	681b      	ldr	r3, [r3, #0]
 8017956:	429a      	cmp	r2, r3
 8017958:	d008      	beq.n	801796c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801795c:	681a      	ldr	r2, [r3, #0]
 801795e:	683b      	ldr	r3, [r7, #0]
 8017960:	3304      	adds	r3, #4
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	429a      	cmp	r2, r3
 8017966:	d101      	bne.n	801796c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801796a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801796e:	8a9b      	ldrh	r3, [r3, #20]
 8017970:	8a3a      	ldrh	r2, [r7, #16]
 8017972:	429a      	cmp	r2, r3
 8017974:	d118      	bne.n	80179a8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017978:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801797a:	2b00      	cmp	r3, #0
 801797c:	d005      	beq.n	801798a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017980:	685a      	ldr	r2, [r3, #4]
 8017982:	4b43      	ldr	r3, [pc, #268]	; (8017a90 <udp_input+0x218>)
 8017984:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017986:	429a      	cmp	r2, r3
 8017988:	d10e      	bne.n	80179a8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801798a:	6a3b      	ldr	r3, [r7, #32]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d014      	beq.n	80179ba <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017992:	68da      	ldr	r2, [r3, #12]
 8017994:	6a3b      	ldr	r3, [r7, #32]
 8017996:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017998:	4b3e      	ldr	r3, [pc, #248]	; (8017a94 <udp_input+0x21c>)
 801799a:	681a      	ldr	r2, [r3, #0]
 801799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801799e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80179a0:	4a3c      	ldr	r2, [pc, #240]	; (8017a94 <udp_input+0x21c>)
 80179a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179a4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80179a6:	e008      	b.n	80179ba <udp_input+0x142>
      }
    }

    prev = pcb;
 80179a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179aa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80179ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179ae:	68db      	ldr	r3, [r3, #12]
 80179b0:	627b      	str	r3, [r7, #36]	; 0x24
 80179b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d1a7      	bne.n	8017908 <udp_input+0x90>
 80179b8:	e000      	b.n	80179bc <udp_input+0x144>
        break;
 80179ba:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80179bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d101      	bne.n	80179c6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80179c2:	69fb      	ldr	r3, [r7, #28]
 80179c4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80179c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d002      	beq.n	80179d2 <udp_input+0x15a>
    for_us = 1;
 80179cc:	2301      	movs	r3, #1
 80179ce:	76fb      	strb	r3, [r7, #27]
 80179d0:	e00a      	b.n	80179e8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80179d2:	683b      	ldr	r3, [r7, #0]
 80179d4:	3304      	adds	r3, #4
 80179d6:	681a      	ldr	r2, [r3, #0]
 80179d8:	4b2d      	ldr	r3, [pc, #180]	; (8017a90 <udp_input+0x218>)
 80179da:	695b      	ldr	r3, [r3, #20]
 80179dc:	429a      	cmp	r2, r3
 80179de:	bf0c      	ite	eq
 80179e0:	2301      	moveq	r3, #1
 80179e2:	2300      	movne	r3, #0
 80179e4:	b2db      	uxtb	r3, r3
 80179e6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80179e8:	7efb      	ldrb	r3, [r7, #27]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d041      	beq.n	8017a72 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80179ee:	2108      	movs	r1, #8
 80179f0:	6878      	ldr	r0, [r7, #4]
 80179f2:	f7fa f915 	bl	8011c20 <pbuf_remove_header>
 80179f6:	4603      	mov	r3, r0
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d00a      	beq.n	8017a12 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80179fc:	4b20      	ldr	r3, [pc, #128]	; (8017a80 <udp_input+0x208>)
 80179fe:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8017a02:	4925      	ldr	r1, [pc, #148]	; (8017a98 <udp_input+0x220>)
 8017a04:	4820      	ldr	r0, [pc, #128]	; (8017a88 <udp_input+0x210>)
 8017a06:	f002 ff4f 	bl	801a8a8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8017a0a:	6878      	ldr	r0, [r7, #4]
 8017a0c:	f7fa f98e 	bl	8011d2c <pbuf_free>
      goto end;
 8017a10:	e032      	b.n	8017a78 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8017a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d012      	beq.n	8017a3e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a1a:	699b      	ldr	r3, [r3, #24]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d00a      	beq.n	8017a36 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a22:	699c      	ldr	r4, [r3, #24]
 8017a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a26:	69d8      	ldr	r0, [r3, #28]
 8017a28:	8a3b      	ldrh	r3, [r7, #16]
 8017a2a:	9300      	str	r3, [sp, #0]
 8017a2c:	4b1b      	ldr	r3, [pc, #108]	; (8017a9c <udp_input+0x224>)
 8017a2e:	687a      	ldr	r2, [r7, #4]
 8017a30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017a32:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017a34:	e021      	b.n	8017a7a <udp_input+0x202>
        pbuf_free(p);
 8017a36:	6878      	ldr	r0, [r7, #4]
 8017a38:	f7fa f978 	bl	8011d2c <pbuf_free>
        goto end;
 8017a3c:	e01c      	b.n	8017a78 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8017a3e:	7cfb      	ldrb	r3, [r7, #19]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d112      	bne.n	8017a6a <udp_input+0x1f2>
 8017a44:	4b12      	ldr	r3, [pc, #72]	; (8017a90 <udp_input+0x218>)
 8017a46:	695b      	ldr	r3, [r3, #20]
 8017a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017a4c:	2be0      	cmp	r3, #224	; 0xe0
 8017a4e:	d00c      	beq.n	8017a6a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017a50:	4b0f      	ldr	r3, [pc, #60]	; (8017a90 <udp_input+0x218>)
 8017a52:	899b      	ldrh	r3, [r3, #12]
 8017a54:	3308      	adds	r3, #8
 8017a56:	b29b      	uxth	r3, r3
 8017a58:	b21b      	sxth	r3, r3
 8017a5a:	4619      	mov	r1, r3
 8017a5c:	6878      	ldr	r0, [r7, #4]
 8017a5e:	f7fa f952 	bl	8011d06 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8017a62:	2103      	movs	r1, #3
 8017a64:	6878      	ldr	r0, [r7, #4]
 8017a66:	f001 f89b 	bl	8018ba0 <icmp_dest_unreach>
      pbuf_free(p);
 8017a6a:	6878      	ldr	r0, [r7, #4]
 8017a6c:	f7fa f95e 	bl	8011d2c <pbuf_free>
  return;
 8017a70:	e003      	b.n	8017a7a <udp_input+0x202>
    pbuf_free(p);
 8017a72:	6878      	ldr	r0, [r7, #4]
 8017a74:	f7fa f95a 	bl	8011d2c <pbuf_free>
  return;
 8017a78:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8017a7a:	372c      	adds	r7, #44	; 0x2c
 8017a7c:	46bd      	mov	sp, r7
 8017a7e:	bd90      	pop	{r4, r7, pc}
 8017a80:	0801dea4 	.word	0x0801dea4
 8017a84:	0801df48 	.word	0x0801df48
 8017a88:	0801def8 	.word	0x0801def8
 8017a8c:	0801df60 	.word	0x0801df60
 8017a90:	2000a73c 	.word	0x2000a73c
 8017a94:	2000dc98 	.word	0x2000dc98
 8017a98:	0801df7c 	.word	0x0801df7c
 8017a9c:	2000a74c 	.word	0x2000a74c

08017aa0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017aa0:	b480      	push	{r7}
 8017aa2:	b085      	sub	sp, #20
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	6078      	str	r0, [r7, #4]
 8017aa8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d01e      	beq.n	8017aee <udp_netif_ip_addr_changed+0x4e>
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d01a      	beq.n	8017aee <udp_netif_ip_addr_changed+0x4e>
 8017ab8:	683b      	ldr	r3, [r7, #0]
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d017      	beq.n	8017aee <udp_netif_ip_addr_changed+0x4e>
 8017abe:	683b      	ldr	r3, [r7, #0]
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d013      	beq.n	8017aee <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017ac6:	4b0d      	ldr	r3, [pc, #52]	; (8017afc <udp_netif_ip_addr_changed+0x5c>)
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	60fb      	str	r3, [r7, #12]
 8017acc:	e00c      	b.n	8017ae8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	681a      	ldr	r2, [r3, #0]
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	681b      	ldr	r3, [r3, #0]
 8017ad6:	429a      	cmp	r2, r3
 8017ad8:	d103      	bne.n	8017ae2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8017ada:	683b      	ldr	r3, [r7, #0]
 8017adc:	681a      	ldr	r2, [r3, #0]
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	68db      	ldr	r3, [r3, #12]
 8017ae6:	60fb      	str	r3, [r7, #12]
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d1ef      	bne.n	8017ace <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8017aee:	bf00      	nop
 8017af0:	3714      	adds	r7, #20
 8017af2:	46bd      	mov	sp, r7
 8017af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af8:	4770      	bx	lr
 8017afa:	bf00      	nop
 8017afc:	2000dc98 	.word	0x2000dc98

08017b00 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8017b00:	b580      	push	{r7, lr}
 8017b02:	b082      	sub	sp, #8
 8017b04:	af00      	add	r7, sp, #0
 8017b06:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8017b08:	4915      	ldr	r1, [pc, #84]	; (8017b60 <etharp_free_entry+0x60>)
 8017b0a:	687a      	ldr	r2, [r7, #4]
 8017b0c:	4613      	mov	r3, r2
 8017b0e:	005b      	lsls	r3, r3, #1
 8017b10:	4413      	add	r3, r2
 8017b12:	00db      	lsls	r3, r3, #3
 8017b14:	440b      	add	r3, r1
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d013      	beq.n	8017b44 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8017b1c:	4910      	ldr	r1, [pc, #64]	; (8017b60 <etharp_free_entry+0x60>)
 8017b1e:	687a      	ldr	r2, [r7, #4]
 8017b20:	4613      	mov	r3, r2
 8017b22:	005b      	lsls	r3, r3, #1
 8017b24:	4413      	add	r3, r2
 8017b26:	00db      	lsls	r3, r3, #3
 8017b28:	440b      	add	r3, r1
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	4618      	mov	r0, r3
 8017b2e:	f7fa f8fd 	bl	8011d2c <pbuf_free>
    arp_table[i].q = NULL;
 8017b32:	490b      	ldr	r1, [pc, #44]	; (8017b60 <etharp_free_entry+0x60>)
 8017b34:	687a      	ldr	r2, [r7, #4]
 8017b36:	4613      	mov	r3, r2
 8017b38:	005b      	lsls	r3, r3, #1
 8017b3a:	4413      	add	r3, r2
 8017b3c:	00db      	lsls	r3, r3, #3
 8017b3e:	440b      	add	r3, r1
 8017b40:	2200      	movs	r2, #0
 8017b42:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8017b44:	4906      	ldr	r1, [pc, #24]	; (8017b60 <etharp_free_entry+0x60>)
 8017b46:	687a      	ldr	r2, [r7, #4]
 8017b48:	4613      	mov	r3, r2
 8017b4a:	005b      	lsls	r3, r3, #1
 8017b4c:	4413      	add	r3, r2
 8017b4e:	00db      	lsls	r3, r3, #3
 8017b50:	440b      	add	r3, r1
 8017b52:	3314      	adds	r3, #20
 8017b54:	2200      	movs	r2, #0
 8017b56:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8017b58:	bf00      	nop
 8017b5a:	3708      	adds	r7, #8
 8017b5c:	46bd      	mov	sp, r7
 8017b5e:	bd80      	pop	{r7, pc}
 8017b60:	200031bc 	.word	0x200031bc

08017b64 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8017b64:	b580      	push	{r7, lr}
 8017b66:	b082      	sub	sp, #8
 8017b68:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017b6a:	2300      	movs	r3, #0
 8017b6c:	607b      	str	r3, [r7, #4]
 8017b6e:	e096      	b.n	8017c9e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8017b70:	494f      	ldr	r1, [pc, #316]	; (8017cb0 <etharp_tmr+0x14c>)
 8017b72:	687a      	ldr	r2, [r7, #4]
 8017b74:	4613      	mov	r3, r2
 8017b76:	005b      	lsls	r3, r3, #1
 8017b78:	4413      	add	r3, r2
 8017b7a:	00db      	lsls	r3, r3, #3
 8017b7c:	440b      	add	r3, r1
 8017b7e:	3314      	adds	r3, #20
 8017b80:	781b      	ldrb	r3, [r3, #0]
 8017b82:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8017b84:	78fb      	ldrb	r3, [r7, #3]
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	f000 8086 	beq.w	8017c98 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8017b8c:	4948      	ldr	r1, [pc, #288]	; (8017cb0 <etharp_tmr+0x14c>)
 8017b8e:	687a      	ldr	r2, [r7, #4]
 8017b90:	4613      	mov	r3, r2
 8017b92:	005b      	lsls	r3, r3, #1
 8017b94:	4413      	add	r3, r2
 8017b96:	00db      	lsls	r3, r3, #3
 8017b98:	440b      	add	r3, r1
 8017b9a:	3312      	adds	r3, #18
 8017b9c:	881b      	ldrh	r3, [r3, #0]
 8017b9e:	3301      	adds	r3, #1
 8017ba0:	b298      	uxth	r0, r3
 8017ba2:	4943      	ldr	r1, [pc, #268]	; (8017cb0 <etharp_tmr+0x14c>)
 8017ba4:	687a      	ldr	r2, [r7, #4]
 8017ba6:	4613      	mov	r3, r2
 8017ba8:	005b      	lsls	r3, r3, #1
 8017baa:	4413      	add	r3, r2
 8017bac:	00db      	lsls	r3, r3, #3
 8017bae:	440b      	add	r3, r1
 8017bb0:	3312      	adds	r3, #18
 8017bb2:	4602      	mov	r2, r0
 8017bb4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017bb6:	493e      	ldr	r1, [pc, #248]	; (8017cb0 <etharp_tmr+0x14c>)
 8017bb8:	687a      	ldr	r2, [r7, #4]
 8017bba:	4613      	mov	r3, r2
 8017bbc:	005b      	lsls	r3, r3, #1
 8017bbe:	4413      	add	r3, r2
 8017bc0:	00db      	lsls	r3, r3, #3
 8017bc2:	440b      	add	r3, r1
 8017bc4:	3312      	adds	r3, #18
 8017bc6:	881b      	ldrh	r3, [r3, #0]
 8017bc8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017bcc:	d215      	bcs.n	8017bfa <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017bce:	4938      	ldr	r1, [pc, #224]	; (8017cb0 <etharp_tmr+0x14c>)
 8017bd0:	687a      	ldr	r2, [r7, #4]
 8017bd2:	4613      	mov	r3, r2
 8017bd4:	005b      	lsls	r3, r3, #1
 8017bd6:	4413      	add	r3, r2
 8017bd8:	00db      	lsls	r3, r3, #3
 8017bda:	440b      	add	r3, r1
 8017bdc:	3314      	adds	r3, #20
 8017bde:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017be0:	2b01      	cmp	r3, #1
 8017be2:	d10e      	bne.n	8017c02 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8017be4:	4932      	ldr	r1, [pc, #200]	; (8017cb0 <etharp_tmr+0x14c>)
 8017be6:	687a      	ldr	r2, [r7, #4]
 8017be8:	4613      	mov	r3, r2
 8017bea:	005b      	lsls	r3, r3, #1
 8017bec:	4413      	add	r3, r2
 8017bee:	00db      	lsls	r3, r3, #3
 8017bf0:	440b      	add	r3, r1
 8017bf2:	3312      	adds	r3, #18
 8017bf4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017bf6:	2b04      	cmp	r3, #4
 8017bf8:	d903      	bls.n	8017c02 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8017bfa:	6878      	ldr	r0, [r7, #4]
 8017bfc:	f7ff ff80 	bl	8017b00 <etharp_free_entry>
 8017c00:	e04a      	b.n	8017c98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8017c02:	492b      	ldr	r1, [pc, #172]	; (8017cb0 <etharp_tmr+0x14c>)
 8017c04:	687a      	ldr	r2, [r7, #4]
 8017c06:	4613      	mov	r3, r2
 8017c08:	005b      	lsls	r3, r3, #1
 8017c0a:	4413      	add	r3, r2
 8017c0c:	00db      	lsls	r3, r3, #3
 8017c0e:	440b      	add	r3, r1
 8017c10:	3314      	adds	r3, #20
 8017c12:	781b      	ldrb	r3, [r3, #0]
 8017c14:	2b03      	cmp	r3, #3
 8017c16:	d10a      	bne.n	8017c2e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8017c18:	4925      	ldr	r1, [pc, #148]	; (8017cb0 <etharp_tmr+0x14c>)
 8017c1a:	687a      	ldr	r2, [r7, #4]
 8017c1c:	4613      	mov	r3, r2
 8017c1e:	005b      	lsls	r3, r3, #1
 8017c20:	4413      	add	r3, r2
 8017c22:	00db      	lsls	r3, r3, #3
 8017c24:	440b      	add	r3, r1
 8017c26:	3314      	adds	r3, #20
 8017c28:	2204      	movs	r2, #4
 8017c2a:	701a      	strb	r2, [r3, #0]
 8017c2c:	e034      	b.n	8017c98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8017c2e:	4920      	ldr	r1, [pc, #128]	; (8017cb0 <etharp_tmr+0x14c>)
 8017c30:	687a      	ldr	r2, [r7, #4]
 8017c32:	4613      	mov	r3, r2
 8017c34:	005b      	lsls	r3, r3, #1
 8017c36:	4413      	add	r3, r2
 8017c38:	00db      	lsls	r3, r3, #3
 8017c3a:	440b      	add	r3, r1
 8017c3c:	3314      	adds	r3, #20
 8017c3e:	781b      	ldrb	r3, [r3, #0]
 8017c40:	2b04      	cmp	r3, #4
 8017c42:	d10a      	bne.n	8017c5a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017c44:	491a      	ldr	r1, [pc, #104]	; (8017cb0 <etharp_tmr+0x14c>)
 8017c46:	687a      	ldr	r2, [r7, #4]
 8017c48:	4613      	mov	r3, r2
 8017c4a:	005b      	lsls	r3, r3, #1
 8017c4c:	4413      	add	r3, r2
 8017c4e:	00db      	lsls	r3, r3, #3
 8017c50:	440b      	add	r3, r1
 8017c52:	3314      	adds	r3, #20
 8017c54:	2202      	movs	r2, #2
 8017c56:	701a      	strb	r2, [r3, #0]
 8017c58:	e01e      	b.n	8017c98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017c5a:	4915      	ldr	r1, [pc, #84]	; (8017cb0 <etharp_tmr+0x14c>)
 8017c5c:	687a      	ldr	r2, [r7, #4]
 8017c5e:	4613      	mov	r3, r2
 8017c60:	005b      	lsls	r3, r3, #1
 8017c62:	4413      	add	r3, r2
 8017c64:	00db      	lsls	r3, r3, #3
 8017c66:	440b      	add	r3, r1
 8017c68:	3314      	adds	r3, #20
 8017c6a:	781b      	ldrb	r3, [r3, #0]
 8017c6c:	2b01      	cmp	r3, #1
 8017c6e:	d113      	bne.n	8017c98 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8017c70:	490f      	ldr	r1, [pc, #60]	; (8017cb0 <etharp_tmr+0x14c>)
 8017c72:	687a      	ldr	r2, [r7, #4]
 8017c74:	4613      	mov	r3, r2
 8017c76:	005b      	lsls	r3, r3, #1
 8017c78:	4413      	add	r3, r2
 8017c7a:	00db      	lsls	r3, r3, #3
 8017c7c:	440b      	add	r3, r1
 8017c7e:	3308      	adds	r3, #8
 8017c80:	6818      	ldr	r0, [r3, #0]
 8017c82:	687a      	ldr	r2, [r7, #4]
 8017c84:	4613      	mov	r3, r2
 8017c86:	005b      	lsls	r3, r3, #1
 8017c88:	4413      	add	r3, r2
 8017c8a:	00db      	lsls	r3, r3, #3
 8017c8c:	4a08      	ldr	r2, [pc, #32]	; (8017cb0 <etharp_tmr+0x14c>)
 8017c8e:	4413      	add	r3, r2
 8017c90:	3304      	adds	r3, #4
 8017c92:	4619      	mov	r1, r3
 8017c94:	f000 fe6e 	bl	8018974 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	3301      	adds	r3, #1
 8017c9c:	607b      	str	r3, [r7, #4]
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	2b09      	cmp	r3, #9
 8017ca2:	f77f af65 	ble.w	8017b70 <etharp_tmr+0xc>
      }
    }
  }
}
 8017ca6:	bf00      	nop
 8017ca8:	bf00      	nop
 8017caa:	3708      	adds	r7, #8
 8017cac:	46bd      	mov	sp, r7
 8017cae:	bd80      	pop	{r7, pc}
 8017cb0:	200031bc 	.word	0x200031bc

08017cb4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8017cb4:	b580      	push	{r7, lr}
 8017cb6:	b08a      	sub	sp, #40	; 0x28
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	60f8      	str	r0, [r7, #12]
 8017cbc:	460b      	mov	r3, r1
 8017cbe:	607a      	str	r2, [r7, #4]
 8017cc0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8017cc2:	230a      	movs	r3, #10
 8017cc4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017cc6:	230a      	movs	r3, #10
 8017cc8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8017cca:	230a      	movs	r3, #10
 8017ccc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8017cce:	2300      	movs	r3, #0
 8017cd0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8017cd2:	230a      	movs	r3, #10
 8017cd4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	83bb      	strh	r3, [r7, #28]
 8017cda:	2300      	movs	r3, #0
 8017cdc:	837b      	strh	r3, [r7, #26]
 8017cde:	2300      	movs	r3, #0
 8017ce0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017ce2:	2300      	movs	r3, #0
 8017ce4:	843b      	strh	r3, [r7, #32]
 8017ce6:	e0ae      	b.n	8017e46 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8017ce8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017cec:	49a6      	ldr	r1, [pc, #664]	; (8017f88 <etharp_find_entry+0x2d4>)
 8017cee:	4613      	mov	r3, r2
 8017cf0:	005b      	lsls	r3, r3, #1
 8017cf2:	4413      	add	r3, r2
 8017cf4:	00db      	lsls	r3, r3, #3
 8017cf6:	440b      	add	r3, r1
 8017cf8:	3314      	adds	r3, #20
 8017cfa:	781b      	ldrb	r3, [r3, #0]
 8017cfc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8017cfe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017d02:	2b0a      	cmp	r3, #10
 8017d04:	d105      	bne.n	8017d12 <etharp_find_entry+0x5e>
 8017d06:	7dfb      	ldrb	r3, [r7, #23]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d102      	bne.n	8017d12 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8017d0c:	8c3b      	ldrh	r3, [r7, #32]
 8017d0e:	847b      	strh	r3, [r7, #34]	; 0x22
 8017d10:	e095      	b.n	8017e3e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8017d12:	7dfb      	ldrb	r3, [r7, #23]
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	f000 8092 	beq.w	8017e3e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8017d1a:	7dfb      	ldrb	r3, [r7, #23]
 8017d1c:	2b01      	cmp	r3, #1
 8017d1e:	d009      	beq.n	8017d34 <etharp_find_entry+0x80>
 8017d20:	7dfb      	ldrb	r3, [r7, #23]
 8017d22:	2b01      	cmp	r3, #1
 8017d24:	d806      	bhi.n	8017d34 <etharp_find_entry+0x80>
 8017d26:	4b99      	ldr	r3, [pc, #612]	; (8017f8c <etharp_find_entry+0x2d8>)
 8017d28:	f240 1223 	movw	r2, #291	; 0x123
 8017d2c:	4998      	ldr	r1, [pc, #608]	; (8017f90 <etharp_find_entry+0x2dc>)
 8017d2e:	4899      	ldr	r0, [pc, #612]	; (8017f94 <etharp_find_entry+0x2e0>)
 8017d30:	f002 fdba 	bl	801a8a8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017d34:	68fb      	ldr	r3, [r7, #12]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d020      	beq.n	8017d7c <etharp_find_entry+0xc8>
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	6819      	ldr	r1, [r3, #0]
 8017d3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017d42:	4891      	ldr	r0, [pc, #580]	; (8017f88 <etharp_find_entry+0x2d4>)
 8017d44:	4613      	mov	r3, r2
 8017d46:	005b      	lsls	r3, r3, #1
 8017d48:	4413      	add	r3, r2
 8017d4a:	00db      	lsls	r3, r3, #3
 8017d4c:	4403      	add	r3, r0
 8017d4e:	3304      	adds	r3, #4
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	4299      	cmp	r1, r3
 8017d54:	d112      	bne.n	8017d7c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d00c      	beq.n	8017d76 <etharp_find_entry+0xc2>
 8017d5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017d60:	4989      	ldr	r1, [pc, #548]	; (8017f88 <etharp_find_entry+0x2d4>)
 8017d62:	4613      	mov	r3, r2
 8017d64:	005b      	lsls	r3, r3, #1
 8017d66:	4413      	add	r3, r2
 8017d68:	00db      	lsls	r3, r3, #3
 8017d6a:	440b      	add	r3, r1
 8017d6c:	3308      	adds	r3, #8
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	687a      	ldr	r2, [r7, #4]
 8017d72:	429a      	cmp	r2, r3
 8017d74:	d102      	bne.n	8017d7c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017d76:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017d7a:	e100      	b.n	8017f7e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017d7c:	7dfb      	ldrb	r3, [r7, #23]
 8017d7e:	2b01      	cmp	r3, #1
 8017d80:	d140      	bne.n	8017e04 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017d82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017d86:	4980      	ldr	r1, [pc, #512]	; (8017f88 <etharp_find_entry+0x2d4>)
 8017d88:	4613      	mov	r3, r2
 8017d8a:	005b      	lsls	r3, r3, #1
 8017d8c:	4413      	add	r3, r2
 8017d8e:	00db      	lsls	r3, r3, #3
 8017d90:	440b      	add	r3, r1
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d01a      	beq.n	8017dce <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8017d98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017d9c:	497a      	ldr	r1, [pc, #488]	; (8017f88 <etharp_find_entry+0x2d4>)
 8017d9e:	4613      	mov	r3, r2
 8017da0:	005b      	lsls	r3, r3, #1
 8017da2:	4413      	add	r3, r2
 8017da4:	00db      	lsls	r3, r3, #3
 8017da6:	440b      	add	r3, r1
 8017da8:	3312      	adds	r3, #18
 8017daa:	881b      	ldrh	r3, [r3, #0]
 8017dac:	8bba      	ldrh	r2, [r7, #28]
 8017dae:	429a      	cmp	r2, r3
 8017db0:	d845      	bhi.n	8017e3e <etharp_find_entry+0x18a>
            old_queue = i;
 8017db2:	8c3b      	ldrh	r3, [r7, #32]
 8017db4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8017db6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017dba:	4973      	ldr	r1, [pc, #460]	; (8017f88 <etharp_find_entry+0x2d4>)
 8017dbc:	4613      	mov	r3, r2
 8017dbe:	005b      	lsls	r3, r3, #1
 8017dc0:	4413      	add	r3, r2
 8017dc2:	00db      	lsls	r3, r3, #3
 8017dc4:	440b      	add	r3, r1
 8017dc6:	3312      	adds	r3, #18
 8017dc8:	881b      	ldrh	r3, [r3, #0]
 8017dca:	83bb      	strh	r3, [r7, #28]
 8017dcc:	e037      	b.n	8017e3e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8017dce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017dd2:	496d      	ldr	r1, [pc, #436]	; (8017f88 <etharp_find_entry+0x2d4>)
 8017dd4:	4613      	mov	r3, r2
 8017dd6:	005b      	lsls	r3, r3, #1
 8017dd8:	4413      	add	r3, r2
 8017dda:	00db      	lsls	r3, r3, #3
 8017ddc:	440b      	add	r3, r1
 8017dde:	3312      	adds	r3, #18
 8017de0:	881b      	ldrh	r3, [r3, #0]
 8017de2:	8b7a      	ldrh	r2, [r7, #26]
 8017de4:	429a      	cmp	r2, r3
 8017de6:	d82a      	bhi.n	8017e3e <etharp_find_entry+0x18a>
            old_pending = i;
 8017de8:	8c3b      	ldrh	r3, [r7, #32]
 8017dea:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8017dec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017df0:	4965      	ldr	r1, [pc, #404]	; (8017f88 <etharp_find_entry+0x2d4>)
 8017df2:	4613      	mov	r3, r2
 8017df4:	005b      	lsls	r3, r3, #1
 8017df6:	4413      	add	r3, r2
 8017df8:	00db      	lsls	r3, r3, #3
 8017dfa:	440b      	add	r3, r1
 8017dfc:	3312      	adds	r3, #18
 8017dfe:	881b      	ldrh	r3, [r3, #0]
 8017e00:	837b      	strh	r3, [r7, #26]
 8017e02:	e01c      	b.n	8017e3e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017e04:	7dfb      	ldrb	r3, [r7, #23]
 8017e06:	2b01      	cmp	r3, #1
 8017e08:	d919      	bls.n	8017e3e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8017e0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017e0e:	495e      	ldr	r1, [pc, #376]	; (8017f88 <etharp_find_entry+0x2d4>)
 8017e10:	4613      	mov	r3, r2
 8017e12:	005b      	lsls	r3, r3, #1
 8017e14:	4413      	add	r3, r2
 8017e16:	00db      	lsls	r3, r3, #3
 8017e18:	440b      	add	r3, r1
 8017e1a:	3312      	adds	r3, #18
 8017e1c:	881b      	ldrh	r3, [r3, #0]
 8017e1e:	8b3a      	ldrh	r2, [r7, #24]
 8017e20:	429a      	cmp	r2, r3
 8017e22:	d80c      	bhi.n	8017e3e <etharp_find_entry+0x18a>
            old_stable = i;
 8017e24:	8c3b      	ldrh	r3, [r7, #32]
 8017e26:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8017e28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017e2c:	4956      	ldr	r1, [pc, #344]	; (8017f88 <etharp_find_entry+0x2d4>)
 8017e2e:	4613      	mov	r3, r2
 8017e30:	005b      	lsls	r3, r3, #1
 8017e32:	4413      	add	r3, r2
 8017e34:	00db      	lsls	r3, r3, #3
 8017e36:	440b      	add	r3, r1
 8017e38:	3312      	adds	r3, #18
 8017e3a:	881b      	ldrh	r3, [r3, #0]
 8017e3c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017e3e:	8c3b      	ldrh	r3, [r7, #32]
 8017e40:	3301      	adds	r3, #1
 8017e42:	b29b      	uxth	r3, r3
 8017e44:	843b      	strh	r3, [r7, #32]
 8017e46:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017e4a:	2b09      	cmp	r3, #9
 8017e4c:	f77f af4c 	ble.w	8017ce8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017e50:	7afb      	ldrb	r3, [r7, #11]
 8017e52:	f003 0302 	and.w	r3, r3, #2
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d108      	bne.n	8017e6c <etharp_find_entry+0x1b8>
 8017e5a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017e5e:	2b0a      	cmp	r3, #10
 8017e60:	d107      	bne.n	8017e72 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017e62:	7afb      	ldrb	r3, [r7, #11]
 8017e64:	f003 0301 	and.w	r3, r3, #1
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d102      	bne.n	8017e72 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8017e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8017e70:	e085      	b.n	8017f7e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017e72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017e76:	2b09      	cmp	r3, #9
 8017e78:	dc02      	bgt.n	8017e80 <etharp_find_entry+0x1cc>
    i = empty;
 8017e7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017e7c:	843b      	strh	r3, [r7, #32]
 8017e7e:	e039      	b.n	8017ef4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017e80:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8017e84:	2b09      	cmp	r3, #9
 8017e86:	dc14      	bgt.n	8017eb2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8017e88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017e8a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017e8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017e90:	493d      	ldr	r1, [pc, #244]	; (8017f88 <etharp_find_entry+0x2d4>)
 8017e92:	4613      	mov	r3, r2
 8017e94:	005b      	lsls	r3, r3, #1
 8017e96:	4413      	add	r3, r2
 8017e98:	00db      	lsls	r3, r3, #3
 8017e9a:	440b      	add	r3, r1
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d018      	beq.n	8017ed4 <etharp_find_entry+0x220>
 8017ea2:	4b3a      	ldr	r3, [pc, #232]	; (8017f8c <etharp_find_entry+0x2d8>)
 8017ea4:	f240 126d 	movw	r2, #365	; 0x16d
 8017ea8:	493b      	ldr	r1, [pc, #236]	; (8017f98 <etharp_find_entry+0x2e4>)
 8017eaa:	483a      	ldr	r0, [pc, #232]	; (8017f94 <etharp_find_entry+0x2e0>)
 8017eac:	f002 fcfc 	bl	801a8a8 <iprintf>
 8017eb0:	e010      	b.n	8017ed4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017eb2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017eb6:	2b09      	cmp	r3, #9
 8017eb8:	dc02      	bgt.n	8017ec0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8017eba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017ebc:	843b      	strh	r3, [r7, #32]
 8017ebe:	e009      	b.n	8017ed4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017ec0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017ec4:	2b09      	cmp	r3, #9
 8017ec6:	dc02      	bgt.n	8017ece <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017ec8:	8bfb      	ldrh	r3, [r7, #30]
 8017eca:	843b      	strh	r3, [r7, #32]
 8017ecc:	e002      	b.n	8017ed4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8017ece:	f04f 33ff 	mov.w	r3, #4294967295
 8017ed2:	e054      	b.n	8017f7e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017ed4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017ed8:	2b09      	cmp	r3, #9
 8017eda:	dd06      	ble.n	8017eea <etharp_find_entry+0x236>
 8017edc:	4b2b      	ldr	r3, [pc, #172]	; (8017f8c <etharp_find_entry+0x2d8>)
 8017ede:	f240 127f 	movw	r2, #383	; 0x17f
 8017ee2:	492e      	ldr	r1, [pc, #184]	; (8017f9c <etharp_find_entry+0x2e8>)
 8017ee4:	482b      	ldr	r0, [pc, #172]	; (8017f94 <etharp_find_entry+0x2e0>)
 8017ee6:	f002 fcdf 	bl	801a8a8 <iprintf>
    etharp_free_entry(i);
 8017eea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017eee:	4618      	mov	r0, r3
 8017ef0:	f7ff fe06 	bl	8017b00 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017ef4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017ef8:	2b09      	cmp	r3, #9
 8017efa:	dd06      	ble.n	8017f0a <etharp_find_entry+0x256>
 8017efc:	4b23      	ldr	r3, [pc, #140]	; (8017f8c <etharp_find_entry+0x2d8>)
 8017efe:	f240 1283 	movw	r2, #387	; 0x183
 8017f02:	4926      	ldr	r1, [pc, #152]	; (8017f9c <etharp_find_entry+0x2e8>)
 8017f04:	4823      	ldr	r0, [pc, #140]	; (8017f94 <etharp_find_entry+0x2e0>)
 8017f06:	f002 fccf 	bl	801a8a8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8017f0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017f0e:	491e      	ldr	r1, [pc, #120]	; (8017f88 <etharp_find_entry+0x2d4>)
 8017f10:	4613      	mov	r3, r2
 8017f12:	005b      	lsls	r3, r3, #1
 8017f14:	4413      	add	r3, r2
 8017f16:	00db      	lsls	r3, r3, #3
 8017f18:	440b      	add	r3, r1
 8017f1a:	3314      	adds	r3, #20
 8017f1c:	781b      	ldrb	r3, [r3, #0]
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d006      	beq.n	8017f30 <etharp_find_entry+0x27c>
 8017f22:	4b1a      	ldr	r3, [pc, #104]	; (8017f8c <etharp_find_entry+0x2d8>)
 8017f24:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8017f28:	491d      	ldr	r1, [pc, #116]	; (8017fa0 <etharp_find_entry+0x2ec>)
 8017f2a:	481a      	ldr	r0, [pc, #104]	; (8017f94 <etharp_find_entry+0x2e0>)
 8017f2c:	f002 fcbc 	bl	801a8a8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d00b      	beq.n	8017f4e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017f36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017f3a:	68fb      	ldr	r3, [r7, #12]
 8017f3c:	6819      	ldr	r1, [r3, #0]
 8017f3e:	4812      	ldr	r0, [pc, #72]	; (8017f88 <etharp_find_entry+0x2d4>)
 8017f40:	4613      	mov	r3, r2
 8017f42:	005b      	lsls	r3, r3, #1
 8017f44:	4413      	add	r3, r2
 8017f46:	00db      	lsls	r3, r3, #3
 8017f48:	4403      	add	r3, r0
 8017f4a:	3304      	adds	r3, #4
 8017f4c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017f4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017f52:	490d      	ldr	r1, [pc, #52]	; (8017f88 <etharp_find_entry+0x2d4>)
 8017f54:	4613      	mov	r3, r2
 8017f56:	005b      	lsls	r3, r3, #1
 8017f58:	4413      	add	r3, r2
 8017f5a:	00db      	lsls	r3, r3, #3
 8017f5c:	440b      	add	r3, r1
 8017f5e:	3312      	adds	r3, #18
 8017f60:	2200      	movs	r2, #0
 8017f62:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017f64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017f68:	4907      	ldr	r1, [pc, #28]	; (8017f88 <etharp_find_entry+0x2d4>)
 8017f6a:	4613      	mov	r3, r2
 8017f6c:	005b      	lsls	r3, r3, #1
 8017f6e:	4413      	add	r3, r2
 8017f70:	00db      	lsls	r3, r3, #3
 8017f72:	440b      	add	r3, r1
 8017f74:	3308      	adds	r3, #8
 8017f76:	687a      	ldr	r2, [r7, #4]
 8017f78:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8017f7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8017f7e:	4618      	mov	r0, r3
 8017f80:	3728      	adds	r7, #40	; 0x28
 8017f82:	46bd      	mov	sp, r7
 8017f84:	bd80      	pop	{r7, pc}
 8017f86:	bf00      	nop
 8017f88:	200031bc 	.word	0x200031bc
 8017f8c:	0801e208 	.word	0x0801e208
 8017f90:	0801e240 	.word	0x0801e240
 8017f94:	0801e280 	.word	0x0801e280
 8017f98:	0801e2a8 	.word	0x0801e2a8
 8017f9c:	0801e2c0 	.word	0x0801e2c0
 8017fa0:	0801e2d4 	.word	0x0801e2d4

08017fa4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017fa4:	b580      	push	{r7, lr}
 8017fa6:	b088      	sub	sp, #32
 8017fa8:	af02      	add	r7, sp, #8
 8017faa:	60f8      	str	r0, [r7, #12]
 8017fac:	60b9      	str	r1, [r7, #8]
 8017fae:	607a      	str	r2, [r7, #4]
 8017fb0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017fb8:	2b06      	cmp	r3, #6
 8017fba:	d006      	beq.n	8017fca <etharp_update_arp_entry+0x26>
 8017fbc:	4b48      	ldr	r3, [pc, #288]	; (80180e0 <etharp_update_arp_entry+0x13c>)
 8017fbe:	f240 12a9 	movw	r2, #425	; 0x1a9
 8017fc2:	4948      	ldr	r1, [pc, #288]	; (80180e4 <etharp_update_arp_entry+0x140>)
 8017fc4:	4848      	ldr	r0, [pc, #288]	; (80180e8 <etharp_update_arp_entry+0x144>)
 8017fc6:	f002 fc6f 	bl	801a8a8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017fca:	68bb      	ldr	r3, [r7, #8]
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d012      	beq.n	8017ff6 <etharp_update_arp_entry+0x52>
 8017fd0:	68bb      	ldr	r3, [r7, #8]
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d00e      	beq.n	8017ff6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017fd8:	68bb      	ldr	r3, [r7, #8]
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	68f9      	ldr	r1, [r7, #12]
 8017fde:	4618      	mov	r0, r3
 8017fe0:	f001 f8fe 	bl	80191e0 <ip4_addr_isbroadcast_u32>
 8017fe4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d105      	bne.n	8017ff6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017fea:	68bb      	ldr	r3, [r7, #8]
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017ff2:	2be0      	cmp	r3, #224	; 0xe0
 8017ff4:	d102      	bne.n	8017ffc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017ff6:	f06f 030f 	mvn.w	r3, #15
 8017ffa:	e06c      	b.n	80180d6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017ffc:	78fb      	ldrb	r3, [r7, #3]
 8017ffe:	68fa      	ldr	r2, [r7, #12]
 8018000:	4619      	mov	r1, r3
 8018002:	68b8      	ldr	r0, [r7, #8]
 8018004:	f7ff fe56 	bl	8017cb4 <etharp_find_entry>
 8018008:	4603      	mov	r3, r0
 801800a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801800c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018010:	2b00      	cmp	r3, #0
 8018012:	da02      	bge.n	801801a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018014:	8afb      	ldrh	r3, [r7, #22]
 8018016:	b25b      	sxtb	r3, r3
 8018018:	e05d      	b.n	80180d6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801801a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801801e:	4933      	ldr	r1, [pc, #204]	; (80180ec <etharp_update_arp_entry+0x148>)
 8018020:	4613      	mov	r3, r2
 8018022:	005b      	lsls	r3, r3, #1
 8018024:	4413      	add	r3, r2
 8018026:	00db      	lsls	r3, r3, #3
 8018028:	440b      	add	r3, r1
 801802a:	3314      	adds	r3, #20
 801802c:	2202      	movs	r2, #2
 801802e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018030:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018034:	492d      	ldr	r1, [pc, #180]	; (80180ec <etharp_update_arp_entry+0x148>)
 8018036:	4613      	mov	r3, r2
 8018038:	005b      	lsls	r3, r3, #1
 801803a:	4413      	add	r3, r2
 801803c:	00db      	lsls	r3, r3, #3
 801803e:	440b      	add	r3, r1
 8018040:	3308      	adds	r3, #8
 8018042:	68fa      	ldr	r2, [r7, #12]
 8018044:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018046:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801804a:	4613      	mov	r3, r2
 801804c:	005b      	lsls	r3, r3, #1
 801804e:	4413      	add	r3, r2
 8018050:	00db      	lsls	r3, r3, #3
 8018052:	3308      	adds	r3, #8
 8018054:	4a25      	ldr	r2, [pc, #148]	; (80180ec <etharp_update_arp_entry+0x148>)
 8018056:	4413      	add	r3, r2
 8018058:	3304      	adds	r3, #4
 801805a:	2206      	movs	r2, #6
 801805c:	6879      	ldr	r1, [r7, #4]
 801805e:	4618      	mov	r0, r3
 8018060:	f002 fb62 	bl	801a728 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018064:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018068:	4920      	ldr	r1, [pc, #128]	; (80180ec <etharp_update_arp_entry+0x148>)
 801806a:	4613      	mov	r3, r2
 801806c:	005b      	lsls	r3, r3, #1
 801806e:	4413      	add	r3, r2
 8018070:	00db      	lsls	r3, r3, #3
 8018072:	440b      	add	r3, r1
 8018074:	3312      	adds	r3, #18
 8018076:	2200      	movs	r2, #0
 8018078:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801807a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801807e:	491b      	ldr	r1, [pc, #108]	; (80180ec <etharp_update_arp_entry+0x148>)
 8018080:	4613      	mov	r3, r2
 8018082:	005b      	lsls	r3, r3, #1
 8018084:	4413      	add	r3, r2
 8018086:	00db      	lsls	r3, r3, #3
 8018088:	440b      	add	r3, r1
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d021      	beq.n	80180d4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018090:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018094:	4915      	ldr	r1, [pc, #84]	; (80180ec <etharp_update_arp_entry+0x148>)
 8018096:	4613      	mov	r3, r2
 8018098:	005b      	lsls	r3, r3, #1
 801809a:	4413      	add	r3, r2
 801809c:	00db      	lsls	r3, r3, #3
 801809e:	440b      	add	r3, r1
 80180a0:	681b      	ldr	r3, [r3, #0]
 80180a2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80180a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80180a8:	4910      	ldr	r1, [pc, #64]	; (80180ec <etharp_update_arp_entry+0x148>)
 80180aa:	4613      	mov	r3, r2
 80180ac:	005b      	lsls	r3, r3, #1
 80180ae:	4413      	add	r3, r2
 80180b0:	00db      	lsls	r3, r3, #3
 80180b2:	440b      	add	r3, r1
 80180b4:	2200      	movs	r2, #0
 80180b6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80180b8:	68fb      	ldr	r3, [r7, #12]
 80180ba:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80180be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80180c2:	9300      	str	r3, [sp, #0]
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	6939      	ldr	r1, [r7, #16]
 80180c8:	68f8      	ldr	r0, [r7, #12]
 80180ca:	f001 ff91 	bl	8019ff0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80180ce:	6938      	ldr	r0, [r7, #16]
 80180d0:	f7f9 fe2c 	bl	8011d2c <pbuf_free>
  }
  return ERR_OK;
 80180d4:	2300      	movs	r3, #0
}
 80180d6:	4618      	mov	r0, r3
 80180d8:	3718      	adds	r7, #24
 80180da:	46bd      	mov	sp, r7
 80180dc:	bd80      	pop	{r7, pc}
 80180de:	bf00      	nop
 80180e0:	0801e208 	.word	0x0801e208
 80180e4:	0801e300 	.word	0x0801e300
 80180e8:	0801e280 	.word	0x0801e280
 80180ec:	200031bc 	.word	0x200031bc

080180f0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	b084      	sub	sp, #16
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80180f8:	2300      	movs	r3, #0
 80180fa:	60fb      	str	r3, [r7, #12]
 80180fc:	e01e      	b.n	801813c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80180fe:	4913      	ldr	r1, [pc, #76]	; (801814c <etharp_cleanup_netif+0x5c>)
 8018100:	68fa      	ldr	r2, [r7, #12]
 8018102:	4613      	mov	r3, r2
 8018104:	005b      	lsls	r3, r3, #1
 8018106:	4413      	add	r3, r2
 8018108:	00db      	lsls	r3, r3, #3
 801810a:	440b      	add	r3, r1
 801810c:	3314      	adds	r3, #20
 801810e:	781b      	ldrb	r3, [r3, #0]
 8018110:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018112:	7afb      	ldrb	r3, [r7, #11]
 8018114:	2b00      	cmp	r3, #0
 8018116:	d00e      	beq.n	8018136 <etharp_cleanup_netif+0x46>
 8018118:	490c      	ldr	r1, [pc, #48]	; (801814c <etharp_cleanup_netif+0x5c>)
 801811a:	68fa      	ldr	r2, [r7, #12]
 801811c:	4613      	mov	r3, r2
 801811e:	005b      	lsls	r3, r3, #1
 8018120:	4413      	add	r3, r2
 8018122:	00db      	lsls	r3, r3, #3
 8018124:	440b      	add	r3, r1
 8018126:	3308      	adds	r3, #8
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	687a      	ldr	r2, [r7, #4]
 801812c:	429a      	cmp	r2, r3
 801812e:	d102      	bne.n	8018136 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018130:	68f8      	ldr	r0, [r7, #12]
 8018132:	f7ff fce5 	bl	8017b00 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	3301      	adds	r3, #1
 801813a:	60fb      	str	r3, [r7, #12]
 801813c:	68fb      	ldr	r3, [r7, #12]
 801813e:	2b09      	cmp	r3, #9
 8018140:	dddd      	ble.n	80180fe <etharp_cleanup_netif+0xe>
    }
  }
}
 8018142:	bf00      	nop
 8018144:	bf00      	nop
 8018146:	3710      	adds	r7, #16
 8018148:	46bd      	mov	sp, r7
 801814a:	bd80      	pop	{r7, pc}
 801814c:	200031bc 	.word	0x200031bc

08018150 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018150:	b5b0      	push	{r4, r5, r7, lr}
 8018152:	b08a      	sub	sp, #40	; 0x28
 8018154:	af04      	add	r7, sp, #16
 8018156:	6078      	str	r0, [r7, #4]
 8018158:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801815a:	683b      	ldr	r3, [r7, #0]
 801815c:	2b00      	cmp	r3, #0
 801815e:	d107      	bne.n	8018170 <etharp_input+0x20>
 8018160:	4b3d      	ldr	r3, [pc, #244]	; (8018258 <etharp_input+0x108>)
 8018162:	f240 228a 	movw	r2, #650	; 0x28a
 8018166:	493d      	ldr	r1, [pc, #244]	; (801825c <etharp_input+0x10c>)
 8018168:	483d      	ldr	r0, [pc, #244]	; (8018260 <etharp_input+0x110>)
 801816a:	f002 fb9d 	bl	801a8a8 <iprintf>
 801816e:	e06f      	b.n	8018250 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	685b      	ldr	r3, [r3, #4]
 8018174:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018176:	693b      	ldr	r3, [r7, #16]
 8018178:	881b      	ldrh	r3, [r3, #0]
 801817a:	b29b      	uxth	r3, r3
 801817c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018180:	d10c      	bne.n	801819c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018182:	693b      	ldr	r3, [r7, #16]
 8018184:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018186:	2b06      	cmp	r3, #6
 8018188:	d108      	bne.n	801819c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801818a:	693b      	ldr	r3, [r7, #16]
 801818c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801818e:	2b04      	cmp	r3, #4
 8018190:	d104      	bne.n	801819c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018192:	693b      	ldr	r3, [r7, #16]
 8018194:	885b      	ldrh	r3, [r3, #2]
 8018196:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018198:	2b08      	cmp	r3, #8
 801819a:	d003      	beq.n	80181a4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801819c:	6878      	ldr	r0, [r7, #4]
 801819e:	f7f9 fdc5 	bl	8011d2c <pbuf_free>
    return;
 80181a2:	e055      	b.n	8018250 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80181a4:	693b      	ldr	r3, [r7, #16]
 80181a6:	330e      	adds	r3, #14
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80181ac:	693b      	ldr	r3, [r7, #16]
 80181ae:	3318      	adds	r3, #24
 80181b0:	681b      	ldr	r3, [r3, #0]
 80181b2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80181b4:	683b      	ldr	r3, [r7, #0]
 80181b6:	3304      	adds	r3, #4
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d102      	bne.n	80181c4 <etharp_input+0x74>
    for_us = 0;
 80181be:	2300      	movs	r3, #0
 80181c0:	75fb      	strb	r3, [r7, #23]
 80181c2:	e009      	b.n	80181d8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80181c4:	68ba      	ldr	r2, [r7, #8]
 80181c6:	683b      	ldr	r3, [r7, #0]
 80181c8:	3304      	adds	r3, #4
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	429a      	cmp	r2, r3
 80181ce:	bf0c      	ite	eq
 80181d0:	2301      	moveq	r3, #1
 80181d2:	2300      	movne	r3, #0
 80181d4:	b2db      	uxtb	r3, r3
 80181d6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80181d8:	693b      	ldr	r3, [r7, #16]
 80181da:	f103 0208 	add.w	r2, r3, #8
 80181de:	7dfb      	ldrb	r3, [r7, #23]
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d001      	beq.n	80181e8 <etharp_input+0x98>
 80181e4:	2301      	movs	r3, #1
 80181e6:	e000      	b.n	80181ea <etharp_input+0x9a>
 80181e8:	2302      	movs	r3, #2
 80181ea:	f107 010c 	add.w	r1, r7, #12
 80181ee:	6838      	ldr	r0, [r7, #0]
 80181f0:	f7ff fed8 	bl	8017fa4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80181f4:	693b      	ldr	r3, [r7, #16]
 80181f6:	88db      	ldrh	r3, [r3, #6]
 80181f8:	b29b      	uxth	r3, r3
 80181fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80181fe:	d003      	beq.n	8018208 <etharp_input+0xb8>
 8018200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018204:	d01e      	beq.n	8018244 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018206:	e020      	b.n	801824a <etharp_input+0xfa>
      if (for_us) {
 8018208:	7dfb      	ldrb	r3, [r7, #23]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d01c      	beq.n	8018248 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801820e:	683b      	ldr	r3, [r7, #0]
 8018210:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8018214:	693b      	ldr	r3, [r7, #16]
 8018216:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801821a:	683b      	ldr	r3, [r7, #0]
 801821c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8018220:	683b      	ldr	r3, [r7, #0]
 8018222:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018224:	693a      	ldr	r2, [r7, #16]
 8018226:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018228:	2102      	movs	r1, #2
 801822a:	9103      	str	r1, [sp, #12]
 801822c:	f107 010c 	add.w	r1, r7, #12
 8018230:	9102      	str	r1, [sp, #8]
 8018232:	9201      	str	r2, [sp, #4]
 8018234:	9300      	str	r3, [sp, #0]
 8018236:	462b      	mov	r3, r5
 8018238:	4622      	mov	r2, r4
 801823a:	4601      	mov	r1, r0
 801823c:	6838      	ldr	r0, [r7, #0]
 801823e:	f000 faeb 	bl	8018818 <etharp_raw>
      break;
 8018242:	e001      	b.n	8018248 <etharp_input+0xf8>
      break;
 8018244:	bf00      	nop
 8018246:	e000      	b.n	801824a <etharp_input+0xfa>
      break;
 8018248:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801824a:	6878      	ldr	r0, [r7, #4]
 801824c:	f7f9 fd6e 	bl	8011d2c <pbuf_free>
}
 8018250:	3718      	adds	r7, #24
 8018252:	46bd      	mov	sp, r7
 8018254:	bdb0      	pop	{r4, r5, r7, pc}
 8018256:	bf00      	nop
 8018258:	0801e208 	.word	0x0801e208
 801825c:	0801e358 	.word	0x0801e358
 8018260:	0801e280 	.word	0x0801e280

08018264 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018264:	b580      	push	{r7, lr}
 8018266:	b086      	sub	sp, #24
 8018268:	af02      	add	r7, sp, #8
 801826a:	60f8      	str	r0, [r7, #12]
 801826c:	60b9      	str	r1, [r7, #8]
 801826e:	4613      	mov	r3, r2
 8018270:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8018272:	79fa      	ldrb	r2, [r7, #7]
 8018274:	4944      	ldr	r1, [pc, #272]	; (8018388 <etharp_output_to_arp_index+0x124>)
 8018276:	4613      	mov	r3, r2
 8018278:	005b      	lsls	r3, r3, #1
 801827a:	4413      	add	r3, r2
 801827c:	00db      	lsls	r3, r3, #3
 801827e:	440b      	add	r3, r1
 8018280:	3314      	adds	r3, #20
 8018282:	781b      	ldrb	r3, [r3, #0]
 8018284:	2b01      	cmp	r3, #1
 8018286:	d806      	bhi.n	8018296 <etharp_output_to_arp_index+0x32>
 8018288:	4b40      	ldr	r3, [pc, #256]	; (801838c <etharp_output_to_arp_index+0x128>)
 801828a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801828e:	4940      	ldr	r1, [pc, #256]	; (8018390 <etharp_output_to_arp_index+0x12c>)
 8018290:	4840      	ldr	r0, [pc, #256]	; (8018394 <etharp_output_to_arp_index+0x130>)
 8018292:	f002 fb09 	bl	801a8a8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8018296:	79fa      	ldrb	r2, [r7, #7]
 8018298:	493b      	ldr	r1, [pc, #236]	; (8018388 <etharp_output_to_arp_index+0x124>)
 801829a:	4613      	mov	r3, r2
 801829c:	005b      	lsls	r3, r3, #1
 801829e:	4413      	add	r3, r2
 80182a0:	00db      	lsls	r3, r3, #3
 80182a2:	440b      	add	r3, r1
 80182a4:	3314      	adds	r3, #20
 80182a6:	781b      	ldrb	r3, [r3, #0]
 80182a8:	2b02      	cmp	r3, #2
 80182aa:	d153      	bne.n	8018354 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80182ac:	79fa      	ldrb	r2, [r7, #7]
 80182ae:	4936      	ldr	r1, [pc, #216]	; (8018388 <etharp_output_to_arp_index+0x124>)
 80182b0:	4613      	mov	r3, r2
 80182b2:	005b      	lsls	r3, r3, #1
 80182b4:	4413      	add	r3, r2
 80182b6:	00db      	lsls	r3, r3, #3
 80182b8:	440b      	add	r3, r1
 80182ba:	3312      	adds	r3, #18
 80182bc:	881b      	ldrh	r3, [r3, #0]
 80182be:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80182c2:	d919      	bls.n	80182f8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80182c4:	79fa      	ldrb	r2, [r7, #7]
 80182c6:	4613      	mov	r3, r2
 80182c8:	005b      	lsls	r3, r3, #1
 80182ca:	4413      	add	r3, r2
 80182cc:	00db      	lsls	r3, r3, #3
 80182ce:	4a2e      	ldr	r2, [pc, #184]	; (8018388 <etharp_output_to_arp_index+0x124>)
 80182d0:	4413      	add	r3, r2
 80182d2:	3304      	adds	r3, #4
 80182d4:	4619      	mov	r1, r3
 80182d6:	68f8      	ldr	r0, [r7, #12]
 80182d8:	f000 fb4c 	bl	8018974 <etharp_request>
 80182dc:	4603      	mov	r3, r0
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d138      	bne.n	8018354 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80182e2:	79fa      	ldrb	r2, [r7, #7]
 80182e4:	4928      	ldr	r1, [pc, #160]	; (8018388 <etharp_output_to_arp_index+0x124>)
 80182e6:	4613      	mov	r3, r2
 80182e8:	005b      	lsls	r3, r3, #1
 80182ea:	4413      	add	r3, r2
 80182ec:	00db      	lsls	r3, r3, #3
 80182ee:	440b      	add	r3, r1
 80182f0:	3314      	adds	r3, #20
 80182f2:	2203      	movs	r2, #3
 80182f4:	701a      	strb	r2, [r3, #0]
 80182f6:	e02d      	b.n	8018354 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80182f8:	79fa      	ldrb	r2, [r7, #7]
 80182fa:	4923      	ldr	r1, [pc, #140]	; (8018388 <etharp_output_to_arp_index+0x124>)
 80182fc:	4613      	mov	r3, r2
 80182fe:	005b      	lsls	r3, r3, #1
 8018300:	4413      	add	r3, r2
 8018302:	00db      	lsls	r3, r3, #3
 8018304:	440b      	add	r3, r1
 8018306:	3312      	adds	r3, #18
 8018308:	881b      	ldrh	r3, [r3, #0]
 801830a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801830e:	d321      	bcc.n	8018354 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018310:	79fa      	ldrb	r2, [r7, #7]
 8018312:	4613      	mov	r3, r2
 8018314:	005b      	lsls	r3, r3, #1
 8018316:	4413      	add	r3, r2
 8018318:	00db      	lsls	r3, r3, #3
 801831a:	4a1b      	ldr	r2, [pc, #108]	; (8018388 <etharp_output_to_arp_index+0x124>)
 801831c:	4413      	add	r3, r2
 801831e:	1d19      	adds	r1, r3, #4
 8018320:	79fa      	ldrb	r2, [r7, #7]
 8018322:	4613      	mov	r3, r2
 8018324:	005b      	lsls	r3, r3, #1
 8018326:	4413      	add	r3, r2
 8018328:	00db      	lsls	r3, r3, #3
 801832a:	3308      	adds	r3, #8
 801832c:	4a16      	ldr	r2, [pc, #88]	; (8018388 <etharp_output_to_arp_index+0x124>)
 801832e:	4413      	add	r3, r2
 8018330:	3304      	adds	r3, #4
 8018332:	461a      	mov	r2, r3
 8018334:	68f8      	ldr	r0, [r7, #12]
 8018336:	f000 fafb 	bl	8018930 <etharp_request_dst>
 801833a:	4603      	mov	r3, r0
 801833c:	2b00      	cmp	r3, #0
 801833e:	d109      	bne.n	8018354 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018340:	79fa      	ldrb	r2, [r7, #7]
 8018342:	4911      	ldr	r1, [pc, #68]	; (8018388 <etharp_output_to_arp_index+0x124>)
 8018344:	4613      	mov	r3, r2
 8018346:	005b      	lsls	r3, r3, #1
 8018348:	4413      	add	r3, r2
 801834a:	00db      	lsls	r3, r3, #3
 801834c:	440b      	add	r3, r1
 801834e:	3314      	adds	r3, #20
 8018350:	2203      	movs	r2, #3
 8018352:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801835a:	79fa      	ldrb	r2, [r7, #7]
 801835c:	4613      	mov	r3, r2
 801835e:	005b      	lsls	r3, r3, #1
 8018360:	4413      	add	r3, r2
 8018362:	00db      	lsls	r3, r3, #3
 8018364:	3308      	adds	r3, #8
 8018366:	4a08      	ldr	r2, [pc, #32]	; (8018388 <etharp_output_to_arp_index+0x124>)
 8018368:	4413      	add	r3, r2
 801836a:	3304      	adds	r3, #4
 801836c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018370:	9200      	str	r2, [sp, #0]
 8018372:	460a      	mov	r2, r1
 8018374:	68b9      	ldr	r1, [r7, #8]
 8018376:	68f8      	ldr	r0, [r7, #12]
 8018378:	f001 fe3a 	bl	8019ff0 <ethernet_output>
 801837c:	4603      	mov	r3, r0
}
 801837e:	4618      	mov	r0, r3
 8018380:	3710      	adds	r7, #16
 8018382:	46bd      	mov	sp, r7
 8018384:	bd80      	pop	{r7, pc}
 8018386:	bf00      	nop
 8018388:	200031bc 	.word	0x200031bc
 801838c:	0801e208 	.word	0x0801e208
 8018390:	0801e378 	.word	0x0801e378
 8018394:	0801e280 	.word	0x0801e280

08018398 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018398:	b580      	push	{r7, lr}
 801839a:	b08a      	sub	sp, #40	; 0x28
 801839c:	af02      	add	r7, sp, #8
 801839e:	60f8      	str	r0, [r7, #12]
 80183a0:	60b9      	str	r1, [r7, #8]
 80183a2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80183a8:	68fb      	ldr	r3, [r7, #12]
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d106      	bne.n	80183bc <etharp_output+0x24>
 80183ae:	4b73      	ldr	r3, [pc, #460]	; (801857c <etharp_output+0x1e4>)
 80183b0:	f240 321e 	movw	r2, #798	; 0x31e
 80183b4:	4972      	ldr	r1, [pc, #456]	; (8018580 <etharp_output+0x1e8>)
 80183b6:	4873      	ldr	r0, [pc, #460]	; (8018584 <etharp_output+0x1ec>)
 80183b8:	f002 fa76 	bl	801a8a8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80183bc:	68bb      	ldr	r3, [r7, #8]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d106      	bne.n	80183d0 <etharp_output+0x38>
 80183c2:	4b6e      	ldr	r3, [pc, #440]	; (801857c <etharp_output+0x1e4>)
 80183c4:	f240 321f 	movw	r2, #799	; 0x31f
 80183c8:	496f      	ldr	r1, [pc, #444]	; (8018588 <etharp_output+0x1f0>)
 80183ca:	486e      	ldr	r0, [pc, #440]	; (8018584 <etharp_output+0x1ec>)
 80183cc:	f002 fa6c 	bl	801a8a8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d106      	bne.n	80183e4 <etharp_output+0x4c>
 80183d6:	4b69      	ldr	r3, [pc, #420]	; (801857c <etharp_output+0x1e4>)
 80183d8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80183dc:	496b      	ldr	r1, [pc, #428]	; (801858c <etharp_output+0x1f4>)
 80183de:	4869      	ldr	r0, [pc, #420]	; (8018584 <etharp_output+0x1ec>)
 80183e0:	f002 fa62 	bl	801a8a8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	681b      	ldr	r3, [r3, #0]
 80183e8:	68f9      	ldr	r1, [r7, #12]
 80183ea:	4618      	mov	r0, r3
 80183ec:	f000 fef8 	bl	80191e0 <ip4_addr_isbroadcast_u32>
 80183f0:	4603      	mov	r3, r0
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d002      	beq.n	80183fc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80183f6:	4b66      	ldr	r3, [pc, #408]	; (8018590 <etharp_output+0x1f8>)
 80183f8:	61fb      	str	r3, [r7, #28]
 80183fa:	e0af      	b.n	801855c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018404:	2be0      	cmp	r3, #224	; 0xe0
 8018406:	d118      	bne.n	801843a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018408:	2301      	movs	r3, #1
 801840a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801840c:	2300      	movs	r3, #0
 801840e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018410:	235e      	movs	r3, #94	; 0x5e
 8018412:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	3301      	adds	r3, #1
 8018418:	781b      	ldrb	r3, [r3, #0]
 801841a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801841e:	b2db      	uxtb	r3, r3
 8018420:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	3302      	adds	r3, #2
 8018426:	781b      	ldrb	r3, [r3, #0]
 8018428:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	3303      	adds	r3, #3
 801842e:	781b      	ldrb	r3, [r3, #0]
 8018430:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018432:	f107 0310 	add.w	r3, r7, #16
 8018436:	61fb      	str	r3, [r7, #28]
 8018438:	e090      	b.n	801855c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	681a      	ldr	r2, [r3, #0]
 801843e:	68fb      	ldr	r3, [r7, #12]
 8018440:	3304      	adds	r3, #4
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	405a      	eors	r2, r3
 8018446:	68fb      	ldr	r3, [r7, #12]
 8018448:	3308      	adds	r3, #8
 801844a:	681b      	ldr	r3, [r3, #0]
 801844c:	4013      	ands	r3, r2
 801844e:	2b00      	cmp	r3, #0
 8018450:	d012      	beq.n	8018478 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018458:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801845c:	4293      	cmp	r3, r2
 801845e:	d00b      	beq.n	8018478 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018460:	68fb      	ldr	r3, [r7, #12]
 8018462:	330c      	adds	r3, #12
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	2b00      	cmp	r3, #0
 8018468:	d003      	beq.n	8018472 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801846a:	68fb      	ldr	r3, [r7, #12]
 801846c:	330c      	adds	r3, #12
 801846e:	61bb      	str	r3, [r7, #24]
 8018470:	e002      	b.n	8018478 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018472:	f06f 0303 	mvn.w	r3, #3
 8018476:	e07d      	b.n	8018574 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018478:	4b46      	ldr	r3, [pc, #280]	; (8018594 <etharp_output+0x1fc>)
 801847a:	781b      	ldrb	r3, [r3, #0]
 801847c:	4619      	mov	r1, r3
 801847e:	4a46      	ldr	r2, [pc, #280]	; (8018598 <etharp_output+0x200>)
 8018480:	460b      	mov	r3, r1
 8018482:	005b      	lsls	r3, r3, #1
 8018484:	440b      	add	r3, r1
 8018486:	00db      	lsls	r3, r3, #3
 8018488:	4413      	add	r3, r2
 801848a:	3314      	adds	r3, #20
 801848c:	781b      	ldrb	r3, [r3, #0]
 801848e:	2b01      	cmp	r3, #1
 8018490:	d925      	bls.n	80184de <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018492:	4b40      	ldr	r3, [pc, #256]	; (8018594 <etharp_output+0x1fc>)
 8018494:	781b      	ldrb	r3, [r3, #0]
 8018496:	4619      	mov	r1, r3
 8018498:	4a3f      	ldr	r2, [pc, #252]	; (8018598 <etharp_output+0x200>)
 801849a:	460b      	mov	r3, r1
 801849c:	005b      	lsls	r3, r3, #1
 801849e:	440b      	add	r3, r1
 80184a0:	00db      	lsls	r3, r3, #3
 80184a2:	4413      	add	r3, r2
 80184a4:	3308      	adds	r3, #8
 80184a6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80184a8:	68fa      	ldr	r2, [r7, #12]
 80184aa:	429a      	cmp	r2, r3
 80184ac:	d117      	bne.n	80184de <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80184ae:	69bb      	ldr	r3, [r7, #24]
 80184b0:	681a      	ldr	r2, [r3, #0]
 80184b2:	4b38      	ldr	r3, [pc, #224]	; (8018594 <etharp_output+0x1fc>)
 80184b4:	781b      	ldrb	r3, [r3, #0]
 80184b6:	4618      	mov	r0, r3
 80184b8:	4937      	ldr	r1, [pc, #220]	; (8018598 <etharp_output+0x200>)
 80184ba:	4603      	mov	r3, r0
 80184bc:	005b      	lsls	r3, r3, #1
 80184be:	4403      	add	r3, r0
 80184c0:	00db      	lsls	r3, r3, #3
 80184c2:	440b      	add	r3, r1
 80184c4:	3304      	adds	r3, #4
 80184c6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80184c8:	429a      	cmp	r2, r3
 80184ca:	d108      	bne.n	80184de <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80184cc:	4b31      	ldr	r3, [pc, #196]	; (8018594 <etharp_output+0x1fc>)
 80184ce:	781b      	ldrb	r3, [r3, #0]
 80184d0:	461a      	mov	r2, r3
 80184d2:	68b9      	ldr	r1, [r7, #8]
 80184d4:	68f8      	ldr	r0, [r7, #12]
 80184d6:	f7ff fec5 	bl	8018264 <etharp_output_to_arp_index>
 80184da:	4603      	mov	r3, r0
 80184dc:	e04a      	b.n	8018574 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80184de:	2300      	movs	r3, #0
 80184e0:	75fb      	strb	r3, [r7, #23]
 80184e2:	e031      	b.n	8018548 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80184e4:	7dfa      	ldrb	r2, [r7, #23]
 80184e6:	492c      	ldr	r1, [pc, #176]	; (8018598 <etharp_output+0x200>)
 80184e8:	4613      	mov	r3, r2
 80184ea:	005b      	lsls	r3, r3, #1
 80184ec:	4413      	add	r3, r2
 80184ee:	00db      	lsls	r3, r3, #3
 80184f0:	440b      	add	r3, r1
 80184f2:	3314      	adds	r3, #20
 80184f4:	781b      	ldrb	r3, [r3, #0]
 80184f6:	2b01      	cmp	r3, #1
 80184f8:	d923      	bls.n	8018542 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80184fa:	7dfa      	ldrb	r2, [r7, #23]
 80184fc:	4926      	ldr	r1, [pc, #152]	; (8018598 <etharp_output+0x200>)
 80184fe:	4613      	mov	r3, r2
 8018500:	005b      	lsls	r3, r3, #1
 8018502:	4413      	add	r3, r2
 8018504:	00db      	lsls	r3, r3, #3
 8018506:	440b      	add	r3, r1
 8018508:	3308      	adds	r3, #8
 801850a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801850c:	68fa      	ldr	r2, [r7, #12]
 801850e:	429a      	cmp	r2, r3
 8018510:	d117      	bne.n	8018542 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018512:	69bb      	ldr	r3, [r7, #24]
 8018514:	6819      	ldr	r1, [r3, #0]
 8018516:	7dfa      	ldrb	r2, [r7, #23]
 8018518:	481f      	ldr	r0, [pc, #124]	; (8018598 <etharp_output+0x200>)
 801851a:	4613      	mov	r3, r2
 801851c:	005b      	lsls	r3, r3, #1
 801851e:	4413      	add	r3, r2
 8018520:	00db      	lsls	r3, r3, #3
 8018522:	4403      	add	r3, r0
 8018524:	3304      	adds	r3, #4
 8018526:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018528:	4299      	cmp	r1, r3
 801852a:	d10a      	bne.n	8018542 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801852c:	4a19      	ldr	r2, [pc, #100]	; (8018594 <etharp_output+0x1fc>)
 801852e:	7dfb      	ldrb	r3, [r7, #23]
 8018530:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018532:	7dfb      	ldrb	r3, [r7, #23]
 8018534:	461a      	mov	r2, r3
 8018536:	68b9      	ldr	r1, [r7, #8]
 8018538:	68f8      	ldr	r0, [r7, #12]
 801853a:	f7ff fe93 	bl	8018264 <etharp_output_to_arp_index>
 801853e:	4603      	mov	r3, r0
 8018540:	e018      	b.n	8018574 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018542:	7dfb      	ldrb	r3, [r7, #23]
 8018544:	3301      	adds	r3, #1
 8018546:	75fb      	strb	r3, [r7, #23]
 8018548:	7dfb      	ldrb	r3, [r7, #23]
 801854a:	2b09      	cmp	r3, #9
 801854c:	d9ca      	bls.n	80184e4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801854e:	68ba      	ldr	r2, [r7, #8]
 8018550:	69b9      	ldr	r1, [r7, #24]
 8018552:	68f8      	ldr	r0, [r7, #12]
 8018554:	f000 f822 	bl	801859c <etharp_query>
 8018558:	4603      	mov	r3, r0
 801855a:	e00b      	b.n	8018574 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8018562:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018566:	9300      	str	r3, [sp, #0]
 8018568:	69fb      	ldr	r3, [r7, #28]
 801856a:	68b9      	ldr	r1, [r7, #8]
 801856c:	68f8      	ldr	r0, [r7, #12]
 801856e:	f001 fd3f 	bl	8019ff0 <ethernet_output>
 8018572:	4603      	mov	r3, r0
}
 8018574:	4618      	mov	r0, r3
 8018576:	3720      	adds	r7, #32
 8018578:	46bd      	mov	sp, r7
 801857a:	bd80      	pop	{r7, pc}
 801857c:	0801e208 	.word	0x0801e208
 8018580:	0801e358 	.word	0x0801e358
 8018584:	0801e280 	.word	0x0801e280
 8018588:	0801e3a8 	.word	0x0801e3a8
 801858c:	0801e348 	.word	0x0801e348
 8018590:	08095328 	.word	0x08095328
 8018594:	200032ac 	.word	0x200032ac
 8018598:	200031bc 	.word	0x200031bc

0801859c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801859c:	b580      	push	{r7, lr}
 801859e:	b08c      	sub	sp, #48	; 0x30
 80185a0:	af02      	add	r7, sp, #8
 80185a2:	60f8      	str	r0, [r7, #12]
 80185a4:	60b9      	str	r1, [r7, #8]
 80185a6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80185a8:	68fb      	ldr	r3, [r7, #12]
 80185aa:	3326      	adds	r3, #38	; 0x26
 80185ac:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80185ae:	23ff      	movs	r3, #255	; 0xff
 80185b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80185b4:	2300      	movs	r3, #0
 80185b6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80185b8:	68bb      	ldr	r3, [r7, #8]
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	68f9      	ldr	r1, [r7, #12]
 80185be:	4618      	mov	r0, r3
 80185c0:	f000 fe0e 	bl	80191e0 <ip4_addr_isbroadcast_u32>
 80185c4:	4603      	mov	r3, r0
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d10c      	bne.n	80185e4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80185ca:	68bb      	ldr	r3, [r7, #8]
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80185d2:	2be0      	cmp	r3, #224	; 0xe0
 80185d4:	d006      	beq.n	80185e4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80185d6:	68bb      	ldr	r3, [r7, #8]
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d003      	beq.n	80185e4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80185dc:	68bb      	ldr	r3, [r7, #8]
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d102      	bne.n	80185ea <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80185e4:	f06f 030f 	mvn.w	r3, #15
 80185e8:	e101      	b.n	80187ee <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80185ea:	68fa      	ldr	r2, [r7, #12]
 80185ec:	2101      	movs	r1, #1
 80185ee:	68b8      	ldr	r0, [r7, #8]
 80185f0:	f7ff fb60 	bl	8017cb4 <etharp_find_entry>
 80185f4:	4603      	mov	r3, r0
 80185f6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80185f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	da02      	bge.n	8018606 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018600:	8a7b      	ldrh	r3, [r7, #18]
 8018602:	b25b      	sxtb	r3, r3
 8018604:	e0f3      	b.n	80187ee <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018606:	8a7b      	ldrh	r3, [r7, #18]
 8018608:	2b7e      	cmp	r3, #126	; 0x7e
 801860a:	d906      	bls.n	801861a <etharp_query+0x7e>
 801860c:	4b7a      	ldr	r3, [pc, #488]	; (80187f8 <etharp_query+0x25c>)
 801860e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8018612:	497a      	ldr	r1, [pc, #488]	; (80187fc <etharp_query+0x260>)
 8018614:	487a      	ldr	r0, [pc, #488]	; (8018800 <etharp_query+0x264>)
 8018616:	f002 f947 	bl	801a8a8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801861a:	8a7b      	ldrh	r3, [r7, #18]
 801861c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801861e:	7c7a      	ldrb	r2, [r7, #17]
 8018620:	4978      	ldr	r1, [pc, #480]	; (8018804 <etharp_query+0x268>)
 8018622:	4613      	mov	r3, r2
 8018624:	005b      	lsls	r3, r3, #1
 8018626:	4413      	add	r3, r2
 8018628:	00db      	lsls	r3, r3, #3
 801862a:	440b      	add	r3, r1
 801862c:	3314      	adds	r3, #20
 801862e:	781b      	ldrb	r3, [r3, #0]
 8018630:	2b00      	cmp	r3, #0
 8018632:	d115      	bne.n	8018660 <etharp_query+0xc4>
    is_new_entry = 1;
 8018634:	2301      	movs	r3, #1
 8018636:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018638:	7c7a      	ldrb	r2, [r7, #17]
 801863a:	4972      	ldr	r1, [pc, #456]	; (8018804 <etharp_query+0x268>)
 801863c:	4613      	mov	r3, r2
 801863e:	005b      	lsls	r3, r3, #1
 8018640:	4413      	add	r3, r2
 8018642:	00db      	lsls	r3, r3, #3
 8018644:	440b      	add	r3, r1
 8018646:	3314      	adds	r3, #20
 8018648:	2201      	movs	r2, #1
 801864a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801864c:	7c7a      	ldrb	r2, [r7, #17]
 801864e:	496d      	ldr	r1, [pc, #436]	; (8018804 <etharp_query+0x268>)
 8018650:	4613      	mov	r3, r2
 8018652:	005b      	lsls	r3, r3, #1
 8018654:	4413      	add	r3, r2
 8018656:	00db      	lsls	r3, r3, #3
 8018658:	440b      	add	r3, r1
 801865a:	3308      	adds	r3, #8
 801865c:	68fa      	ldr	r2, [r7, #12]
 801865e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018660:	7c7a      	ldrb	r2, [r7, #17]
 8018662:	4968      	ldr	r1, [pc, #416]	; (8018804 <etharp_query+0x268>)
 8018664:	4613      	mov	r3, r2
 8018666:	005b      	lsls	r3, r3, #1
 8018668:	4413      	add	r3, r2
 801866a:	00db      	lsls	r3, r3, #3
 801866c:	440b      	add	r3, r1
 801866e:	3314      	adds	r3, #20
 8018670:	781b      	ldrb	r3, [r3, #0]
 8018672:	2b01      	cmp	r3, #1
 8018674:	d011      	beq.n	801869a <etharp_query+0xfe>
 8018676:	7c7a      	ldrb	r2, [r7, #17]
 8018678:	4962      	ldr	r1, [pc, #392]	; (8018804 <etharp_query+0x268>)
 801867a:	4613      	mov	r3, r2
 801867c:	005b      	lsls	r3, r3, #1
 801867e:	4413      	add	r3, r2
 8018680:	00db      	lsls	r3, r3, #3
 8018682:	440b      	add	r3, r1
 8018684:	3314      	adds	r3, #20
 8018686:	781b      	ldrb	r3, [r3, #0]
 8018688:	2b01      	cmp	r3, #1
 801868a:	d806      	bhi.n	801869a <etharp_query+0xfe>
 801868c:	4b5a      	ldr	r3, [pc, #360]	; (80187f8 <etharp_query+0x25c>)
 801868e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8018692:	495d      	ldr	r1, [pc, #372]	; (8018808 <etharp_query+0x26c>)
 8018694:	485a      	ldr	r0, [pc, #360]	; (8018800 <etharp_query+0x264>)
 8018696:	f002 f907 	bl	801a8a8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801869a:	6a3b      	ldr	r3, [r7, #32]
 801869c:	2b00      	cmp	r3, #0
 801869e:	d102      	bne.n	80186a6 <etharp_query+0x10a>
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d10c      	bne.n	80186c0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80186a6:	68b9      	ldr	r1, [r7, #8]
 80186a8:	68f8      	ldr	r0, [r7, #12]
 80186aa:	f000 f963 	bl	8018974 <etharp_request>
 80186ae:	4603      	mov	r3, r0
 80186b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d102      	bne.n	80186c0 <etharp_query+0x124>
      return result;
 80186ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80186be:	e096      	b.n	80187ee <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d106      	bne.n	80186d4 <etharp_query+0x138>
 80186c6:	4b4c      	ldr	r3, [pc, #304]	; (80187f8 <etharp_query+0x25c>)
 80186c8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80186cc:	494f      	ldr	r1, [pc, #316]	; (801880c <etharp_query+0x270>)
 80186ce:	484c      	ldr	r0, [pc, #304]	; (8018800 <etharp_query+0x264>)
 80186d0:	f002 f8ea 	bl	801a8a8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80186d4:	7c7a      	ldrb	r2, [r7, #17]
 80186d6:	494b      	ldr	r1, [pc, #300]	; (8018804 <etharp_query+0x268>)
 80186d8:	4613      	mov	r3, r2
 80186da:	005b      	lsls	r3, r3, #1
 80186dc:	4413      	add	r3, r2
 80186de:	00db      	lsls	r3, r3, #3
 80186e0:	440b      	add	r3, r1
 80186e2:	3314      	adds	r3, #20
 80186e4:	781b      	ldrb	r3, [r3, #0]
 80186e6:	2b01      	cmp	r3, #1
 80186e8:	d917      	bls.n	801871a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80186ea:	4a49      	ldr	r2, [pc, #292]	; (8018810 <etharp_query+0x274>)
 80186ec:	7c7b      	ldrb	r3, [r7, #17]
 80186ee:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80186f0:	7c7a      	ldrb	r2, [r7, #17]
 80186f2:	4613      	mov	r3, r2
 80186f4:	005b      	lsls	r3, r3, #1
 80186f6:	4413      	add	r3, r2
 80186f8:	00db      	lsls	r3, r3, #3
 80186fa:	3308      	adds	r3, #8
 80186fc:	4a41      	ldr	r2, [pc, #260]	; (8018804 <etharp_query+0x268>)
 80186fe:	4413      	add	r3, r2
 8018700:	3304      	adds	r3, #4
 8018702:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018706:	9200      	str	r2, [sp, #0]
 8018708:	697a      	ldr	r2, [r7, #20]
 801870a:	6879      	ldr	r1, [r7, #4]
 801870c:	68f8      	ldr	r0, [r7, #12]
 801870e:	f001 fc6f 	bl	8019ff0 <ethernet_output>
 8018712:	4603      	mov	r3, r0
 8018714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018718:	e067      	b.n	80187ea <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801871a:	7c7a      	ldrb	r2, [r7, #17]
 801871c:	4939      	ldr	r1, [pc, #228]	; (8018804 <etharp_query+0x268>)
 801871e:	4613      	mov	r3, r2
 8018720:	005b      	lsls	r3, r3, #1
 8018722:	4413      	add	r3, r2
 8018724:	00db      	lsls	r3, r3, #3
 8018726:	440b      	add	r3, r1
 8018728:	3314      	adds	r3, #20
 801872a:	781b      	ldrb	r3, [r3, #0]
 801872c:	2b01      	cmp	r3, #1
 801872e:	d15c      	bne.n	80187ea <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018730:	2300      	movs	r3, #0
 8018732:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018738:	e01c      	b.n	8018774 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801873a:	69fb      	ldr	r3, [r7, #28]
 801873c:	895a      	ldrh	r2, [r3, #10]
 801873e:	69fb      	ldr	r3, [r7, #28]
 8018740:	891b      	ldrh	r3, [r3, #8]
 8018742:	429a      	cmp	r2, r3
 8018744:	d10a      	bne.n	801875c <etharp_query+0x1c0>
 8018746:	69fb      	ldr	r3, [r7, #28]
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	2b00      	cmp	r3, #0
 801874c:	d006      	beq.n	801875c <etharp_query+0x1c0>
 801874e:	4b2a      	ldr	r3, [pc, #168]	; (80187f8 <etharp_query+0x25c>)
 8018750:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018754:	492f      	ldr	r1, [pc, #188]	; (8018814 <etharp_query+0x278>)
 8018756:	482a      	ldr	r0, [pc, #168]	; (8018800 <etharp_query+0x264>)
 8018758:	f002 f8a6 	bl	801a8a8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801875c:	69fb      	ldr	r3, [r7, #28]
 801875e:	7b1b      	ldrb	r3, [r3, #12]
 8018760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018764:	2b00      	cmp	r3, #0
 8018766:	d002      	beq.n	801876e <etharp_query+0x1d2>
        copy_needed = 1;
 8018768:	2301      	movs	r3, #1
 801876a:	61bb      	str	r3, [r7, #24]
        break;
 801876c:	e005      	b.n	801877a <etharp_query+0x1de>
      }
      p = p->next;
 801876e:	69fb      	ldr	r3, [r7, #28]
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018774:	69fb      	ldr	r3, [r7, #28]
 8018776:	2b00      	cmp	r3, #0
 8018778:	d1df      	bne.n	801873a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801877a:	69bb      	ldr	r3, [r7, #24]
 801877c:	2b00      	cmp	r3, #0
 801877e:	d007      	beq.n	8018790 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018780:	687a      	ldr	r2, [r7, #4]
 8018782:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018786:	200e      	movs	r0, #14
 8018788:	f7f9 fd2c 	bl	80121e4 <pbuf_clone>
 801878c:	61f8      	str	r0, [r7, #28]
 801878e:	e004      	b.n	801879a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018794:	69f8      	ldr	r0, [r7, #28]
 8018796:	f7f9 fb69 	bl	8011e6c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801879a:	69fb      	ldr	r3, [r7, #28]
 801879c:	2b00      	cmp	r3, #0
 801879e:	d021      	beq.n	80187e4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80187a0:	7c7a      	ldrb	r2, [r7, #17]
 80187a2:	4918      	ldr	r1, [pc, #96]	; (8018804 <etharp_query+0x268>)
 80187a4:	4613      	mov	r3, r2
 80187a6:	005b      	lsls	r3, r3, #1
 80187a8:	4413      	add	r3, r2
 80187aa:	00db      	lsls	r3, r3, #3
 80187ac:	440b      	add	r3, r1
 80187ae:	681b      	ldr	r3, [r3, #0]
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d00a      	beq.n	80187ca <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80187b4:	7c7a      	ldrb	r2, [r7, #17]
 80187b6:	4913      	ldr	r1, [pc, #76]	; (8018804 <etharp_query+0x268>)
 80187b8:	4613      	mov	r3, r2
 80187ba:	005b      	lsls	r3, r3, #1
 80187bc:	4413      	add	r3, r2
 80187be:	00db      	lsls	r3, r3, #3
 80187c0:	440b      	add	r3, r1
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	4618      	mov	r0, r3
 80187c6:	f7f9 fab1 	bl	8011d2c <pbuf_free>
      }
      arp_table[i].q = p;
 80187ca:	7c7a      	ldrb	r2, [r7, #17]
 80187cc:	490d      	ldr	r1, [pc, #52]	; (8018804 <etharp_query+0x268>)
 80187ce:	4613      	mov	r3, r2
 80187d0:	005b      	lsls	r3, r3, #1
 80187d2:	4413      	add	r3, r2
 80187d4:	00db      	lsls	r3, r3, #3
 80187d6:	440b      	add	r3, r1
 80187d8:	69fa      	ldr	r2, [r7, #28]
 80187da:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80187dc:	2300      	movs	r3, #0
 80187de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80187e2:	e002      	b.n	80187ea <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80187e4:	23ff      	movs	r3, #255	; 0xff
 80187e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80187ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80187ee:	4618      	mov	r0, r3
 80187f0:	3728      	adds	r7, #40	; 0x28
 80187f2:	46bd      	mov	sp, r7
 80187f4:	bd80      	pop	{r7, pc}
 80187f6:	bf00      	nop
 80187f8:	0801e208 	.word	0x0801e208
 80187fc:	0801e3b4 	.word	0x0801e3b4
 8018800:	0801e280 	.word	0x0801e280
 8018804:	200031bc 	.word	0x200031bc
 8018808:	0801e3c4 	.word	0x0801e3c4
 801880c:	0801e3a8 	.word	0x0801e3a8
 8018810:	200032ac 	.word	0x200032ac
 8018814:	0801e3ec 	.word	0x0801e3ec

08018818 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018818:	b580      	push	{r7, lr}
 801881a:	b08a      	sub	sp, #40	; 0x28
 801881c:	af02      	add	r7, sp, #8
 801881e:	60f8      	str	r0, [r7, #12]
 8018820:	60b9      	str	r1, [r7, #8]
 8018822:	607a      	str	r2, [r7, #4]
 8018824:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018826:	2300      	movs	r3, #0
 8018828:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801882a:	68fb      	ldr	r3, [r7, #12]
 801882c:	2b00      	cmp	r3, #0
 801882e:	d106      	bne.n	801883e <etharp_raw+0x26>
 8018830:	4b3a      	ldr	r3, [pc, #232]	; (801891c <etharp_raw+0x104>)
 8018832:	f240 4257 	movw	r2, #1111	; 0x457
 8018836:	493a      	ldr	r1, [pc, #232]	; (8018920 <etharp_raw+0x108>)
 8018838:	483a      	ldr	r0, [pc, #232]	; (8018924 <etharp_raw+0x10c>)
 801883a:	f002 f835 	bl	801a8a8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801883e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018842:	211c      	movs	r1, #28
 8018844:	200e      	movs	r0, #14
 8018846:	f7f8 ff8d 	bl	8011764 <pbuf_alloc>
 801884a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801884c:	69bb      	ldr	r3, [r7, #24]
 801884e:	2b00      	cmp	r3, #0
 8018850:	d102      	bne.n	8018858 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018852:	f04f 33ff 	mov.w	r3, #4294967295
 8018856:	e05d      	b.n	8018914 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018858:	69bb      	ldr	r3, [r7, #24]
 801885a:	895b      	ldrh	r3, [r3, #10]
 801885c:	2b1b      	cmp	r3, #27
 801885e:	d806      	bhi.n	801886e <etharp_raw+0x56>
 8018860:	4b2e      	ldr	r3, [pc, #184]	; (801891c <etharp_raw+0x104>)
 8018862:	f240 4262 	movw	r2, #1122	; 0x462
 8018866:	4930      	ldr	r1, [pc, #192]	; (8018928 <etharp_raw+0x110>)
 8018868:	482e      	ldr	r0, [pc, #184]	; (8018924 <etharp_raw+0x10c>)
 801886a:	f002 f81d 	bl	801a8a8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801886e:	69bb      	ldr	r3, [r7, #24]
 8018870:	685b      	ldr	r3, [r3, #4]
 8018872:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018874:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018876:	4618      	mov	r0, r3
 8018878:	f7f7 ffa5 	bl	80107c6 <lwip_htons>
 801887c:	4603      	mov	r3, r0
 801887e:	461a      	mov	r2, r3
 8018880:	697b      	ldr	r3, [r7, #20]
 8018882:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018884:	68fb      	ldr	r3, [r7, #12]
 8018886:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801888a:	2b06      	cmp	r3, #6
 801888c:	d006      	beq.n	801889c <etharp_raw+0x84>
 801888e:	4b23      	ldr	r3, [pc, #140]	; (801891c <etharp_raw+0x104>)
 8018890:	f240 4269 	movw	r2, #1129	; 0x469
 8018894:	4925      	ldr	r1, [pc, #148]	; (801892c <etharp_raw+0x114>)
 8018896:	4823      	ldr	r0, [pc, #140]	; (8018924 <etharp_raw+0x10c>)
 8018898:	f002 f806 	bl	801a8a8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801889c:	697b      	ldr	r3, [r7, #20]
 801889e:	3308      	adds	r3, #8
 80188a0:	2206      	movs	r2, #6
 80188a2:	6839      	ldr	r1, [r7, #0]
 80188a4:	4618      	mov	r0, r3
 80188a6:	f001 ff3f 	bl	801a728 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80188aa:	697b      	ldr	r3, [r7, #20]
 80188ac:	3312      	adds	r3, #18
 80188ae:	2206      	movs	r2, #6
 80188b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80188b2:	4618      	mov	r0, r3
 80188b4:	f001 ff38 	bl	801a728 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80188b8:	697b      	ldr	r3, [r7, #20]
 80188ba:	330e      	adds	r3, #14
 80188bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80188be:	6812      	ldr	r2, [r2, #0]
 80188c0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80188c2:	697b      	ldr	r3, [r7, #20]
 80188c4:	3318      	adds	r3, #24
 80188c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80188c8:	6812      	ldr	r2, [r2, #0]
 80188ca:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80188cc:	697b      	ldr	r3, [r7, #20]
 80188ce:	2200      	movs	r2, #0
 80188d0:	701a      	strb	r2, [r3, #0]
 80188d2:	2200      	movs	r2, #0
 80188d4:	f042 0201 	orr.w	r2, r2, #1
 80188d8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80188da:	697b      	ldr	r3, [r7, #20]
 80188dc:	2200      	movs	r2, #0
 80188de:	f042 0208 	orr.w	r2, r2, #8
 80188e2:	709a      	strb	r2, [r3, #2]
 80188e4:	2200      	movs	r2, #0
 80188e6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80188e8:	697b      	ldr	r3, [r7, #20]
 80188ea:	2206      	movs	r2, #6
 80188ec:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80188ee:	697b      	ldr	r3, [r7, #20]
 80188f0:	2204      	movs	r2, #4
 80188f2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80188f4:	f640 0306 	movw	r3, #2054	; 0x806
 80188f8:	9300      	str	r3, [sp, #0]
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	68ba      	ldr	r2, [r7, #8]
 80188fe:	69b9      	ldr	r1, [r7, #24]
 8018900:	68f8      	ldr	r0, [r7, #12]
 8018902:	f001 fb75 	bl	8019ff0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018906:	69b8      	ldr	r0, [r7, #24]
 8018908:	f7f9 fa10 	bl	8011d2c <pbuf_free>
  p = NULL;
 801890c:	2300      	movs	r3, #0
 801890e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018910:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018914:	4618      	mov	r0, r3
 8018916:	3720      	adds	r7, #32
 8018918:	46bd      	mov	sp, r7
 801891a:	bd80      	pop	{r7, pc}
 801891c:	0801e208 	.word	0x0801e208
 8018920:	0801e358 	.word	0x0801e358
 8018924:	0801e280 	.word	0x0801e280
 8018928:	0801e408 	.word	0x0801e408
 801892c:	0801e43c 	.word	0x0801e43c

08018930 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8018930:	b580      	push	{r7, lr}
 8018932:	b088      	sub	sp, #32
 8018934:	af04      	add	r7, sp, #16
 8018936:	60f8      	str	r0, [r7, #12]
 8018938:	60b9      	str	r1, [r7, #8]
 801893a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8018948:	68fb      	ldr	r3, [r7, #12]
 801894a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801894c:	2201      	movs	r2, #1
 801894e:	9203      	str	r2, [sp, #12]
 8018950:	68ba      	ldr	r2, [r7, #8]
 8018952:	9202      	str	r2, [sp, #8]
 8018954:	4a06      	ldr	r2, [pc, #24]	; (8018970 <etharp_request_dst+0x40>)
 8018956:	9201      	str	r2, [sp, #4]
 8018958:	9300      	str	r3, [sp, #0]
 801895a:	4603      	mov	r3, r0
 801895c:	687a      	ldr	r2, [r7, #4]
 801895e:	68f8      	ldr	r0, [r7, #12]
 8018960:	f7ff ff5a 	bl	8018818 <etharp_raw>
 8018964:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018966:	4618      	mov	r0, r3
 8018968:	3710      	adds	r7, #16
 801896a:	46bd      	mov	sp, r7
 801896c:	bd80      	pop	{r7, pc}
 801896e:	bf00      	nop
 8018970:	08095330 	.word	0x08095330

08018974 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018974:	b580      	push	{r7, lr}
 8018976:	b082      	sub	sp, #8
 8018978:	af00      	add	r7, sp, #0
 801897a:	6078      	str	r0, [r7, #4]
 801897c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801897e:	4a05      	ldr	r2, [pc, #20]	; (8018994 <etharp_request+0x20>)
 8018980:	6839      	ldr	r1, [r7, #0]
 8018982:	6878      	ldr	r0, [r7, #4]
 8018984:	f7ff ffd4 	bl	8018930 <etharp_request_dst>
 8018988:	4603      	mov	r3, r0
}
 801898a:	4618      	mov	r0, r3
 801898c:	3708      	adds	r7, #8
 801898e:	46bd      	mov	sp, r7
 8018990:	bd80      	pop	{r7, pc}
 8018992:	bf00      	nop
 8018994:	08095328 	.word	0x08095328

08018998 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018998:	b580      	push	{r7, lr}
 801899a:	b08e      	sub	sp, #56	; 0x38
 801899c:	af04      	add	r7, sp, #16
 801899e:	6078      	str	r0, [r7, #4]
 80189a0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80189a2:	4b79      	ldr	r3, [pc, #484]	; (8018b88 <icmp_input+0x1f0>)
 80189a4:	689b      	ldr	r3, [r3, #8]
 80189a6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80189a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189aa:	781b      	ldrb	r3, [r3, #0]
 80189ac:	f003 030f 	and.w	r3, r3, #15
 80189b0:	b2db      	uxtb	r3, r3
 80189b2:	009b      	lsls	r3, r3, #2
 80189b4:	b2db      	uxtb	r3, r3
 80189b6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80189b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80189ba:	2b13      	cmp	r3, #19
 80189bc:	f240 80cd 	bls.w	8018b5a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	895b      	ldrh	r3, [r3, #10]
 80189c4:	2b03      	cmp	r3, #3
 80189c6:	f240 80ca 	bls.w	8018b5e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	685b      	ldr	r3, [r3, #4]
 80189ce:	781b      	ldrb	r3, [r3, #0]
 80189d0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80189d4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80189d8:	2b00      	cmp	r3, #0
 80189da:	f000 80b7 	beq.w	8018b4c <icmp_input+0x1b4>
 80189de:	2b08      	cmp	r3, #8
 80189e0:	f040 80b7 	bne.w	8018b52 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80189e4:	4b69      	ldr	r3, [pc, #420]	; (8018b8c <icmp_input+0x1f4>)
 80189e6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80189e8:	4b67      	ldr	r3, [pc, #412]	; (8018b88 <icmp_input+0x1f0>)
 80189ea:	695b      	ldr	r3, [r3, #20]
 80189ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80189f0:	2be0      	cmp	r3, #224	; 0xe0
 80189f2:	f000 80bb 	beq.w	8018b6c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80189f6:	4b64      	ldr	r3, [pc, #400]	; (8018b88 <icmp_input+0x1f0>)
 80189f8:	695b      	ldr	r3, [r3, #20]
 80189fa:	4a63      	ldr	r2, [pc, #396]	; (8018b88 <icmp_input+0x1f0>)
 80189fc:	6812      	ldr	r2, [r2, #0]
 80189fe:	4611      	mov	r1, r2
 8018a00:	4618      	mov	r0, r3
 8018a02:	f000 fbed 	bl	80191e0 <ip4_addr_isbroadcast_u32>
 8018a06:	4603      	mov	r3, r0
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	f040 80b1 	bne.w	8018b70 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	891b      	ldrh	r3, [r3, #8]
 8018a12:	2b07      	cmp	r3, #7
 8018a14:	f240 80a5 	bls.w	8018b62 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018a18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018a1a:	330e      	adds	r3, #14
 8018a1c:	4619      	mov	r1, r3
 8018a1e:	6878      	ldr	r0, [r7, #4]
 8018a20:	f7f9 f8ee 	bl	8011c00 <pbuf_add_header>
 8018a24:	4603      	mov	r3, r0
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d04b      	beq.n	8018ac2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	891a      	ldrh	r2, [r3, #8]
 8018a2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018a30:	4413      	add	r3, r2
 8018a32:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	891b      	ldrh	r3, [r3, #8]
 8018a38:	8b7a      	ldrh	r2, [r7, #26]
 8018a3a:	429a      	cmp	r2, r3
 8018a3c:	f0c0 809a 	bcc.w	8018b74 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8018a40:	8b7b      	ldrh	r3, [r7, #26]
 8018a42:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018a46:	4619      	mov	r1, r3
 8018a48:	200e      	movs	r0, #14
 8018a4a:	f7f8 fe8b 	bl	8011764 <pbuf_alloc>
 8018a4e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8018a50:	697b      	ldr	r3, [r7, #20]
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	f000 8090 	beq.w	8018b78 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018a58:	697b      	ldr	r3, [r7, #20]
 8018a5a:	895b      	ldrh	r3, [r3, #10]
 8018a5c:	461a      	mov	r2, r3
 8018a5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018a60:	3308      	adds	r3, #8
 8018a62:	429a      	cmp	r2, r3
 8018a64:	d203      	bcs.n	8018a6e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8018a66:	6978      	ldr	r0, [r7, #20]
 8018a68:	f7f9 f960 	bl	8011d2c <pbuf_free>
          goto icmperr;
 8018a6c:	e085      	b.n	8018b7a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8018a6e:	697b      	ldr	r3, [r7, #20]
 8018a70:	685b      	ldr	r3, [r3, #4]
 8018a72:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018a74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018a76:	4618      	mov	r0, r3
 8018a78:	f001 fe56 	bl	801a728 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8018a7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018a7e:	4619      	mov	r1, r3
 8018a80:	6978      	ldr	r0, [r7, #20]
 8018a82:	f7f9 f8cd 	bl	8011c20 <pbuf_remove_header>
 8018a86:	4603      	mov	r3, r0
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d009      	beq.n	8018aa0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018a8c:	4b40      	ldr	r3, [pc, #256]	; (8018b90 <icmp_input+0x1f8>)
 8018a8e:	22b6      	movs	r2, #182	; 0xb6
 8018a90:	4940      	ldr	r1, [pc, #256]	; (8018b94 <icmp_input+0x1fc>)
 8018a92:	4841      	ldr	r0, [pc, #260]	; (8018b98 <icmp_input+0x200>)
 8018a94:	f001 ff08 	bl	801a8a8 <iprintf>
          pbuf_free(r);
 8018a98:	6978      	ldr	r0, [r7, #20]
 8018a9a:	f7f9 f947 	bl	8011d2c <pbuf_free>
          goto icmperr;
 8018a9e:	e06c      	b.n	8018b7a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8018aa0:	6879      	ldr	r1, [r7, #4]
 8018aa2:	6978      	ldr	r0, [r7, #20]
 8018aa4:	f7f9 fa5a 	bl	8011f5c <pbuf_copy>
 8018aa8:	4603      	mov	r3, r0
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d003      	beq.n	8018ab6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8018aae:	6978      	ldr	r0, [r7, #20]
 8018ab0:	f7f9 f93c 	bl	8011d2c <pbuf_free>
          goto icmperr;
 8018ab4:	e061      	b.n	8018b7a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8018ab6:	6878      	ldr	r0, [r7, #4]
 8018ab8:	f7f9 f938 	bl	8011d2c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8018abc:	697b      	ldr	r3, [r7, #20]
 8018abe:	607b      	str	r3, [r7, #4]
 8018ac0:	e00f      	b.n	8018ae2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018ac2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018ac4:	330e      	adds	r3, #14
 8018ac6:	4619      	mov	r1, r3
 8018ac8:	6878      	ldr	r0, [r7, #4]
 8018aca:	f7f9 f8a9 	bl	8011c20 <pbuf_remove_header>
 8018ace:	4603      	mov	r3, r0
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d006      	beq.n	8018ae2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8018ad4:	4b2e      	ldr	r3, [pc, #184]	; (8018b90 <icmp_input+0x1f8>)
 8018ad6:	22c7      	movs	r2, #199	; 0xc7
 8018ad8:	4930      	ldr	r1, [pc, #192]	; (8018b9c <icmp_input+0x204>)
 8018ada:	482f      	ldr	r0, [pc, #188]	; (8018b98 <icmp_input+0x200>)
 8018adc:	f001 fee4 	bl	801a8a8 <iprintf>
          goto icmperr;
 8018ae0:	e04b      	b.n	8018b7a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	685b      	ldr	r3, [r3, #4]
 8018ae6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8018ae8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018aea:	4619      	mov	r1, r3
 8018aec:	6878      	ldr	r0, [r7, #4]
 8018aee:	f7f9 f887 	bl	8011c00 <pbuf_add_header>
 8018af2:	4603      	mov	r3, r0
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	d12b      	bne.n	8018b50 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	685b      	ldr	r3, [r3, #4]
 8018afc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8018afe:	69fb      	ldr	r3, [r7, #28]
 8018b00:	681a      	ldr	r2, [r3, #0]
 8018b02:	68fb      	ldr	r3, [r7, #12]
 8018b04:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8018b06:	4b20      	ldr	r3, [pc, #128]	; (8018b88 <icmp_input+0x1f0>)
 8018b08:	691a      	ldr	r2, [r3, #16]
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8018b0e:	693b      	ldr	r3, [r7, #16]
 8018b10:	2200      	movs	r2, #0
 8018b12:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8018b14:	693b      	ldr	r3, [r7, #16]
 8018b16:	2200      	movs	r2, #0
 8018b18:	709a      	strb	r2, [r3, #2]
 8018b1a:	2200      	movs	r2, #0
 8018b1c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8018b1e:	68fb      	ldr	r3, [r7, #12]
 8018b20:	22ff      	movs	r2, #255	; 0xff
 8018b22:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	2200      	movs	r2, #0
 8018b28:	729a      	strb	r2, [r3, #10]
 8018b2a:	2200      	movs	r2, #0
 8018b2c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8018b2e:	683b      	ldr	r3, [r7, #0]
 8018b30:	9302      	str	r3, [sp, #8]
 8018b32:	2301      	movs	r3, #1
 8018b34:	9301      	str	r3, [sp, #4]
 8018b36:	2300      	movs	r3, #0
 8018b38:	9300      	str	r3, [sp, #0]
 8018b3a:	23ff      	movs	r3, #255	; 0xff
 8018b3c:	2200      	movs	r2, #0
 8018b3e:	69f9      	ldr	r1, [r7, #28]
 8018b40:	6878      	ldr	r0, [r7, #4]
 8018b42:	f000 fa75 	bl	8019030 <ip4_output_if>
 8018b46:	4603      	mov	r3, r0
 8018b48:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8018b4a:	e001      	b.n	8018b50 <icmp_input+0x1b8>
      break;
 8018b4c:	bf00      	nop
 8018b4e:	e000      	b.n	8018b52 <icmp_input+0x1ba>
      break;
 8018b50:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8018b52:	6878      	ldr	r0, [r7, #4]
 8018b54:	f7f9 f8ea 	bl	8011d2c <pbuf_free>
  return;
 8018b58:	e013      	b.n	8018b82 <icmp_input+0x1ea>
    goto lenerr;
 8018b5a:	bf00      	nop
 8018b5c:	e002      	b.n	8018b64 <icmp_input+0x1cc>
    goto lenerr;
 8018b5e:	bf00      	nop
 8018b60:	e000      	b.n	8018b64 <icmp_input+0x1cc>
        goto lenerr;
 8018b62:	bf00      	nop
lenerr:
  pbuf_free(p);
 8018b64:	6878      	ldr	r0, [r7, #4]
 8018b66:	f7f9 f8e1 	bl	8011d2c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018b6a:	e00a      	b.n	8018b82 <icmp_input+0x1ea>
        goto icmperr;
 8018b6c:	bf00      	nop
 8018b6e:	e004      	b.n	8018b7a <icmp_input+0x1e2>
        goto icmperr;
 8018b70:	bf00      	nop
 8018b72:	e002      	b.n	8018b7a <icmp_input+0x1e2>
          goto icmperr;
 8018b74:	bf00      	nop
 8018b76:	e000      	b.n	8018b7a <icmp_input+0x1e2>
          goto icmperr;
 8018b78:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8018b7a:	6878      	ldr	r0, [r7, #4]
 8018b7c:	f7f9 f8d6 	bl	8011d2c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018b80:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8018b82:	3728      	adds	r7, #40	; 0x28
 8018b84:	46bd      	mov	sp, r7
 8018b86:	bd80      	pop	{r7, pc}
 8018b88:	2000a73c 	.word	0x2000a73c
 8018b8c:	2000a750 	.word	0x2000a750
 8018b90:	0801e480 	.word	0x0801e480
 8018b94:	0801e4b8 	.word	0x0801e4b8
 8018b98:	0801e4f0 	.word	0x0801e4f0
 8018b9c:	0801e518 	.word	0x0801e518

08018ba0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8018ba0:	b580      	push	{r7, lr}
 8018ba2:	b082      	sub	sp, #8
 8018ba4:	af00      	add	r7, sp, #0
 8018ba6:	6078      	str	r0, [r7, #4]
 8018ba8:	460b      	mov	r3, r1
 8018baa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8018bac:	78fb      	ldrb	r3, [r7, #3]
 8018bae:	461a      	mov	r2, r3
 8018bb0:	2103      	movs	r1, #3
 8018bb2:	6878      	ldr	r0, [r7, #4]
 8018bb4:	f000 f814 	bl	8018be0 <icmp_send_response>
}
 8018bb8:	bf00      	nop
 8018bba:	3708      	adds	r7, #8
 8018bbc:	46bd      	mov	sp, r7
 8018bbe:	bd80      	pop	{r7, pc}

08018bc0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8018bc0:	b580      	push	{r7, lr}
 8018bc2:	b082      	sub	sp, #8
 8018bc4:	af00      	add	r7, sp, #0
 8018bc6:	6078      	str	r0, [r7, #4]
 8018bc8:	460b      	mov	r3, r1
 8018bca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8018bcc:	78fb      	ldrb	r3, [r7, #3]
 8018bce:	461a      	mov	r2, r3
 8018bd0:	210b      	movs	r1, #11
 8018bd2:	6878      	ldr	r0, [r7, #4]
 8018bd4:	f000 f804 	bl	8018be0 <icmp_send_response>
}
 8018bd8:	bf00      	nop
 8018bda:	3708      	adds	r7, #8
 8018bdc:	46bd      	mov	sp, r7
 8018bde:	bd80      	pop	{r7, pc}

08018be0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018be0:	b580      	push	{r7, lr}
 8018be2:	b08c      	sub	sp, #48	; 0x30
 8018be4:	af04      	add	r7, sp, #16
 8018be6:	6078      	str	r0, [r7, #4]
 8018be8:	460b      	mov	r3, r1
 8018bea:	70fb      	strb	r3, [r7, #3]
 8018bec:	4613      	mov	r3, r2
 8018bee:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018bf0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018bf4:	2124      	movs	r1, #36	; 0x24
 8018bf6:	2022      	movs	r0, #34	; 0x22
 8018bf8:	f7f8 fdb4 	bl	8011764 <pbuf_alloc>
 8018bfc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8018bfe:	69fb      	ldr	r3, [r7, #28]
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d04c      	beq.n	8018c9e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018c04:	69fb      	ldr	r3, [r7, #28]
 8018c06:	895b      	ldrh	r3, [r3, #10]
 8018c08:	2b23      	cmp	r3, #35	; 0x23
 8018c0a:	d806      	bhi.n	8018c1a <icmp_send_response+0x3a>
 8018c0c:	4b26      	ldr	r3, [pc, #152]	; (8018ca8 <icmp_send_response+0xc8>)
 8018c0e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8018c12:	4926      	ldr	r1, [pc, #152]	; (8018cac <icmp_send_response+0xcc>)
 8018c14:	4826      	ldr	r0, [pc, #152]	; (8018cb0 <icmp_send_response+0xd0>)
 8018c16:	f001 fe47 	bl	801a8a8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	685b      	ldr	r3, [r3, #4]
 8018c1e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018c20:	69fb      	ldr	r3, [r7, #28]
 8018c22:	685b      	ldr	r3, [r3, #4]
 8018c24:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8018c26:	697b      	ldr	r3, [r7, #20]
 8018c28:	78fa      	ldrb	r2, [r7, #3]
 8018c2a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8018c2c:	697b      	ldr	r3, [r7, #20]
 8018c2e:	78ba      	ldrb	r2, [r7, #2]
 8018c30:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8018c32:	697b      	ldr	r3, [r7, #20]
 8018c34:	2200      	movs	r2, #0
 8018c36:	711a      	strb	r2, [r3, #4]
 8018c38:	2200      	movs	r2, #0
 8018c3a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8018c3c:	697b      	ldr	r3, [r7, #20]
 8018c3e:	2200      	movs	r2, #0
 8018c40:	719a      	strb	r2, [r3, #6]
 8018c42:	2200      	movs	r2, #0
 8018c44:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018c46:	69fb      	ldr	r3, [r7, #28]
 8018c48:	685b      	ldr	r3, [r3, #4]
 8018c4a:	f103 0008 	add.w	r0, r3, #8
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	685b      	ldr	r3, [r3, #4]
 8018c52:	221c      	movs	r2, #28
 8018c54:	4619      	mov	r1, r3
 8018c56:	f001 fd67 	bl	801a728 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8018c5a:	69bb      	ldr	r3, [r7, #24]
 8018c5c:	68db      	ldr	r3, [r3, #12]
 8018c5e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8018c60:	f107 030c 	add.w	r3, r7, #12
 8018c64:	4618      	mov	r0, r3
 8018c66:	f000 f825 	bl	8018cb4 <ip4_route>
 8018c6a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8018c6c:	693b      	ldr	r3, [r7, #16]
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d011      	beq.n	8018c96 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8018c72:	697b      	ldr	r3, [r7, #20]
 8018c74:	2200      	movs	r2, #0
 8018c76:	709a      	strb	r2, [r3, #2]
 8018c78:	2200      	movs	r2, #0
 8018c7a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8018c7c:	f107 020c 	add.w	r2, r7, #12
 8018c80:	693b      	ldr	r3, [r7, #16]
 8018c82:	9302      	str	r3, [sp, #8]
 8018c84:	2301      	movs	r3, #1
 8018c86:	9301      	str	r3, [sp, #4]
 8018c88:	2300      	movs	r3, #0
 8018c8a:	9300      	str	r3, [sp, #0]
 8018c8c:	23ff      	movs	r3, #255	; 0xff
 8018c8e:	2100      	movs	r1, #0
 8018c90:	69f8      	ldr	r0, [r7, #28]
 8018c92:	f000 f9cd 	bl	8019030 <ip4_output_if>
  }
  pbuf_free(q);
 8018c96:	69f8      	ldr	r0, [r7, #28]
 8018c98:	f7f9 f848 	bl	8011d2c <pbuf_free>
 8018c9c:	e000      	b.n	8018ca0 <icmp_send_response+0xc0>
    return;
 8018c9e:	bf00      	nop
}
 8018ca0:	3720      	adds	r7, #32
 8018ca2:	46bd      	mov	sp, r7
 8018ca4:	bd80      	pop	{r7, pc}
 8018ca6:	bf00      	nop
 8018ca8:	0801e480 	.word	0x0801e480
 8018cac:	0801e54c 	.word	0x0801e54c
 8018cb0:	0801e4f0 	.word	0x0801e4f0

08018cb4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018cb4:	b480      	push	{r7}
 8018cb6:	b085      	sub	sp, #20
 8018cb8:	af00      	add	r7, sp, #0
 8018cba:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8018cbc:	4b33      	ldr	r3, [pc, #204]	; (8018d8c <ip4_route+0xd8>)
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	60fb      	str	r3, [r7, #12]
 8018cc2:	e036      	b.n	8018d32 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018cc4:	68fb      	ldr	r3, [r7, #12]
 8018cc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018cca:	f003 0301 	and.w	r3, r3, #1
 8018cce:	b2db      	uxtb	r3, r3
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d02b      	beq.n	8018d2c <ip4_route+0x78>
 8018cd4:	68fb      	ldr	r3, [r7, #12]
 8018cd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018cda:	089b      	lsrs	r3, r3, #2
 8018cdc:	f003 0301 	and.w	r3, r3, #1
 8018ce0:	b2db      	uxtb	r3, r3
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d022      	beq.n	8018d2c <ip4_route+0x78>
 8018ce6:	68fb      	ldr	r3, [r7, #12]
 8018ce8:	3304      	adds	r3, #4
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d01d      	beq.n	8018d2c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	681a      	ldr	r2, [r3, #0]
 8018cf4:	68fb      	ldr	r3, [r7, #12]
 8018cf6:	3304      	adds	r3, #4
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	405a      	eors	r2, r3
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	3308      	adds	r3, #8
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	4013      	ands	r3, r2
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d101      	bne.n	8018d0c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	e038      	b.n	8018d7e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018d0c:	68fb      	ldr	r3, [r7, #12]
 8018d0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018d12:	f003 0302 	and.w	r3, r3, #2
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	d108      	bne.n	8018d2c <ip4_route+0x78>
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	681a      	ldr	r2, [r3, #0]
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	330c      	adds	r3, #12
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	429a      	cmp	r2, r3
 8018d26:	d101      	bne.n	8018d2c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	e028      	b.n	8018d7e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018d2c:	68fb      	ldr	r3, [r7, #12]
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	60fb      	str	r3, [r7, #12]
 8018d32:	68fb      	ldr	r3, [r7, #12]
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d1c5      	bne.n	8018cc4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018d38:	4b15      	ldr	r3, [pc, #84]	; (8018d90 <ip4_route+0xdc>)
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d01a      	beq.n	8018d76 <ip4_route+0xc2>
 8018d40:	4b13      	ldr	r3, [pc, #76]	; (8018d90 <ip4_route+0xdc>)
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018d48:	f003 0301 	and.w	r3, r3, #1
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d012      	beq.n	8018d76 <ip4_route+0xc2>
 8018d50:	4b0f      	ldr	r3, [pc, #60]	; (8018d90 <ip4_route+0xdc>)
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018d58:	f003 0304 	and.w	r3, r3, #4
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d00a      	beq.n	8018d76 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018d60:	4b0b      	ldr	r3, [pc, #44]	; (8018d90 <ip4_route+0xdc>)
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	3304      	adds	r3, #4
 8018d66:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d004      	beq.n	8018d76 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	681b      	ldr	r3, [r3, #0]
 8018d70:	b2db      	uxtb	r3, r3
 8018d72:	2b7f      	cmp	r3, #127	; 0x7f
 8018d74:	d101      	bne.n	8018d7a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8018d76:	2300      	movs	r3, #0
 8018d78:	e001      	b.n	8018d7e <ip4_route+0xca>
  }

  return netif_default;
 8018d7a:	4b05      	ldr	r3, [pc, #20]	; (8018d90 <ip4_route+0xdc>)
 8018d7c:	681b      	ldr	r3, [r3, #0]
}
 8018d7e:	4618      	mov	r0, r3
 8018d80:	3714      	adds	r7, #20
 8018d82:	46bd      	mov	sp, r7
 8018d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d88:	4770      	bx	lr
 8018d8a:	bf00      	nop
 8018d8c:	2000dc70 	.word	0x2000dc70
 8018d90:	2000dc74 	.word	0x2000dc74

08018d94 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8018d94:	b580      	push	{r7, lr}
 8018d96:	b082      	sub	sp, #8
 8018d98:	af00      	add	r7, sp, #0
 8018d9a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018da2:	f003 0301 	and.w	r3, r3, #1
 8018da6:	b2db      	uxtb	r3, r3
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d016      	beq.n	8018dda <ip4_input_accept+0x46>
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	3304      	adds	r3, #4
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d011      	beq.n	8018dda <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018db6:	4b0b      	ldr	r3, [pc, #44]	; (8018de4 <ip4_input_accept+0x50>)
 8018db8:	695a      	ldr	r2, [r3, #20]
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	3304      	adds	r3, #4
 8018dbe:	681b      	ldr	r3, [r3, #0]
 8018dc0:	429a      	cmp	r2, r3
 8018dc2:	d008      	beq.n	8018dd6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018dc4:	4b07      	ldr	r3, [pc, #28]	; (8018de4 <ip4_input_accept+0x50>)
 8018dc6:	695b      	ldr	r3, [r3, #20]
 8018dc8:	6879      	ldr	r1, [r7, #4]
 8018dca:	4618      	mov	r0, r3
 8018dcc:	f000 fa08 	bl	80191e0 <ip4_addr_isbroadcast_u32>
 8018dd0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d001      	beq.n	8018dda <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8018dd6:	2301      	movs	r3, #1
 8018dd8:	e000      	b.n	8018ddc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8018dda:	2300      	movs	r3, #0
}
 8018ddc:	4618      	mov	r0, r3
 8018dde:	3708      	adds	r7, #8
 8018de0:	46bd      	mov	sp, r7
 8018de2:	bd80      	pop	{r7, pc}
 8018de4:	2000a73c 	.word	0x2000a73c

08018de8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018de8:	b580      	push	{r7, lr}
 8018dea:	b086      	sub	sp, #24
 8018dec:	af00      	add	r7, sp, #0
 8018dee:	6078      	str	r0, [r7, #4]
 8018df0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	685b      	ldr	r3, [r3, #4]
 8018df6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8018df8:	697b      	ldr	r3, [r7, #20]
 8018dfa:	781b      	ldrb	r3, [r3, #0]
 8018dfc:	091b      	lsrs	r3, r3, #4
 8018dfe:	b2db      	uxtb	r3, r3
 8018e00:	2b04      	cmp	r3, #4
 8018e02:	d004      	beq.n	8018e0e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018e04:	6878      	ldr	r0, [r7, #4]
 8018e06:	f7f8 ff91 	bl	8011d2c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8018e0a:	2300      	movs	r3, #0
 8018e0c:	e107      	b.n	801901e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8018e0e:	697b      	ldr	r3, [r7, #20]
 8018e10:	781b      	ldrb	r3, [r3, #0]
 8018e12:	f003 030f 	and.w	r3, r3, #15
 8018e16:	b2db      	uxtb	r3, r3
 8018e18:	009b      	lsls	r3, r3, #2
 8018e1a:	b2db      	uxtb	r3, r3
 8018e1c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018e1e:	697b      	ldr	r3, [r7, #20]
 8018e20:	885b      	ldrh	r3, [r3, #2]
 8018e22:	b29b      	uxth	r3, r3
 8018e24:	4618      	mov	r0, r3
 8018e26:	f7f7 fcce 	bl	80107c6 <lwip_htons>
 8018e2a:	4603      	mov	r3, r0
 8018e2c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	891b      	ldrh	r3, [r3, #8]
 8018e32:	89ba      	ldrh	r2, [r7, #12]
 8018e34:	429a      	cmp	r2, r3
 8018e36:	d204      	bcs.n	8018e42 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8018e38:	89bb      	ldrh	r3, [r7, #12]
 8018e3a:	4619      	mov	r1, r3
 8018e3c:	6878      	ldr	r0, [r7, #4]
 8018e3e:	f7f8 fdef 	bl	8011a20 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	895b      	ldrh	r3, [r3, #10]
 8018e46:	89fa      	ldrh	r2, [r7, #14]
 8018e48:	429a      	cmp	r2, r3
 8018e4a:	d807      	bhi.n	8018e5c <ip4_input+0x74>
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	891b      	ldrh	r3, [r3, #8]
 8018e50:	89ba      	ldrh	r2, [r7, #12]
 8018e52:	429a      	cmp	r2, r3
 8018e54:	d802      	bhi.n	8018e5c <ip4_input+0x74>
 8018e56:	89fb      	ldrh	r3, [r7, #14]
 8018e58:	2b13      	cmp	r3, #19
 8018e5a:	d804      	bhi.n	8018e66 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8018e5c:	6878      	ldr	r0, [r7, #4]
 8018e5e:	f7f8 ff65 	bl	8011d2c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8018e62:	2300      	movs	r3, #0
 8018e64:	e0db      	b.n	801901e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018e66:	697b      	ldr	r3, [r7, #20]
 8018e68:	691b      	ldr	r3, [r3, #16]
 8018e6a:	4a6f      	ldr	r2, [pc, #444]	; (8019028 <ip4_input+0x240>)
 8018e6c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8018e6e:	697b      	ldr	r3, [r7, #20]
 8018e70:	68db      	ldr	r3, [r3, #12]
 8018e72:	4a6d      	ldr	r2, [pc, #436]	; (8019028 <ip4_input+0x240>)
 8018e74:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018e76:	4b6c      	ldr	r3, [pc, #432]	; (8019028 <ip4_input+0x240>)
 8018e78:	695b      	ldr	r3, [r3, #20]
 8018e7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018e7e:	2be0      	cmp	r3, #224	; 0xe0
 8018e80:	d112      	bne.n	8018ea8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8018e82:	683b      	ldr	r3, [r7, #0]
 8018e84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018e88:	f003 0301 	and.w	r3, r3, #1
 8018e8c:	b2db      	uxtb	r3, r3
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d007      	beq.n	8018ea2 <ip4_input+0xba>
 8018e92:	683b      	ldr	r3, [r7, #0]
 8018e94:	3304      	adds	r3, #4
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d002      	beq.n	8018ea2 <ip4_input+0xba>
      netif = inp;
 8018e9c:	683b      	ldr	r3, [r7, #0]
 8018e9e:	613b      	str	r3, [r7, #16]
 8018ea0:	e02a      	b.n	8018ef8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	613b      	str	r3, [r7, #16]
 8018ea6:	e027      	b.n	8018ef8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8018ea8:	6838      	ldr	r0, [r7, #0]
 8018eaa:	f7ff ff73 	bl	8018d94 <ip4_input_accept>
 8018eae:	4603      	mov	r3, r0
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d002      	beq.n	8018eba <ip4_input+0xd2>
      netif = inp;
 8018eb4:	683b      	ldr	r3, [r7, #0]
 8018eb6:	613b      	str	r3, [r7, #16]
 8018eb8:	e01e      	b.n	8018ef8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8018eba:	2300      	movs	r3, #0
 8018ebc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8018ebe:	4b5a      	ldr	r3, [pc, #360]	; (8019028 <ip4_input+0x240>)
 8018ec0:	695b      	ldr	r3, [r3, #20]
 8018ec2:	b2db      	uxtb	r3, r3
 8018ec4:	2b7f      	cmp	r3, #127	; 0x7f
 8018ec6:	d017      	beq.n	8018ef8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8018ec8:	4b58      	ldr	r3, [pc, #352]	; (801902c <ip4_input+0x244>)
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	613b      	str	r3, [r7, #16]
 8018ece:	e00e      	b.n	8018eee <ip4_input+0x106>
          if (netif == inp) {
 8018ed0:	693a      	ldr	r2, [r7, #16]
 8018ed2:	683b      	ldr	r3, [r7, #0]
 8018ed4:	429a      	cmp	r2, r3
 8018ed6:	d006      	beq.n	8018ee6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018ed8:	6938      	ldr	r0, [r7, #16]
 8018eda:	f7ff ff5b 	bl	8018d94 <ip4_input_accept>
 8018ede:	4603      	mov	r3, r0
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d108      	bne.n	8018ef6 <ip4_input+0x10e>
 8018ee4:	e000      	b.n	8018ee8 <ip4_input+0x100>
            continue;
 8018ee6:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018ee8:	693b      	ldr	r3, [r7, #16]
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	613b      	str	r3, [r7, #16]
 8018eee:	693b      	ldr	r3, [r7, #16]
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d1ed      	bne.n	8018ed0 <ip4_input+0xe8>
 8018ef4:	e000      	b.n	8018ef8 <ip4_input+0x110>
            break;
 8018ef6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018ef8:	4b4b      	ldr	r3, [pc, #300]	; (8019028 <ip4_input+0x240>)
 8018efa:	691b      	ldr	r3, [r3, #16]
 8018efc:	6839      	ldr	r1, [r7, #0]
 8018efe:	4618      	mov	r0, r3
 8018f00:	f000 f96e 	bl	80191e0 <ip4_addr_isbroadcast_u32>
 8018f04:	4603      	mov	r3, r0
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d105      	bne.n	8018f16 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018f0a:	4b47      	ldr	r3, [pc, #284]	; (8019028 <ip4_input+0x240>)
 8018f0c:	691b      	ldr	r3, [r3, #16]
 8018f0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018f12:	2be0      	cmp	r3, #224	; 0xe0
 8018f14:	d104      	bne.n	8018f20 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018f16:	6878      	ldr	r0, [r7, #4]
 8018f18:	f7f8 ff08 	bl	8011d2c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018f1c:	2300      	movs	r3, #0
 8018f1e:	e07e      	b.n	801901e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018f20:	693b      	ldr	r3, [r7, #16]
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d104      	bne.n	8018f30 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018f26:	6878      	ldr	r0, [r7, #4]
 8018f28:	f7f8 ff00 	bl	8011d2c <pbuf_free>
    return ERR_OK;
 8018f2c:	2300      	movs	r3, #0
 8018f2e:	e076      	b.n	801901e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018f30:	697b      	ldr	r3, [r7, #20]
 8018f32:	88db      	ldrh	r3, [r3, #6]
 8018f34:	b29b      	uxth	r3, r3
 8018f36:	461a      	mov	r2, r3
 8018f38:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018f3c:	4013      	ands	r3, r2
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d00b      	beq.n	8018f5a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8018f42:	6878      	ldr	r0, [r7, #4]
 8018f44:	f000 fc92 	bl	801986c <ip4_reass>
 8018f48:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d101      	bne.n	8018f54 <ip4_input+0x16c>
      return ERR_OK;
 8018f50:	2300      	movs	r3, #0
 8018f52:	e064      	b.n	801901e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	685b      	ldr	r3, [r3, #4]
 8018f58:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018f5a:	4a33      	ldr	r2, [pc, #204]	; (8019028 <ip4_input+0x240>)
 8018f5c:	693b      	ldr	r3, [r7, #16]
 8018f5e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8018f60:	4a31      	ldr	r2, [pc, #196]	; (8019028 <ip4_input+0x240>)
 8018f62:	683b      	ldr	r3, [r7, #0]
 8018f64:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018f66:	4a30      	ldr	r2, [pc, #192]	; (8019028 <ip4_input+0x240>)
 8018f68:	697b      	ldr	r3, [r7, #20]
 8018f6a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018f6c:	697b      	ldr	r3, [r7, #20]
 8018f6e:	781b      	ldrb	r3, [r3, #0]
 8018f70:	f003 030f 	and.w	r3, r3, #15
 8018f74:	b2db      	uxtb	r3, r3
 8018f76:	009b      	lsls	r3, r3, #2
 8018f78:	b2db      	uxtb	r3, r3
 8018f7a:	b29a      	uxth	r2, r3
 8018f7c:	4b2a      	ldr	r3, [pc, #168]	; (8019028 <ip4_input+0x240>)
 8018f7e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8018f80:	89fb      	ldrh	r3, [r7, #14]
 8018f82:	4619      	mov	r1, r3
 8018f84:	6878      	ldr	r0, [r7, #4]
 8018f86:	f7f8 fe4b 	bl	8011c20 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018f8a:	697b      	ldr	r3, [r7, #20]
 8018f8c:	7a5b      	ldrb	r3, [r3, #9]
 8018f8e:	2b11      	cmp	r3, #17
 8018f90:	d006      	beq.n	8018fa0 <ip4_input+0x1b8>
 8018f92:	2b11      	cmp	r3, #17
 8018f94:	dc13      	bgt.n	8018fbe <ip4_input+0x1d6>
 8018f96:	2b01      	cmp	r3, #1
 8018f98:	d00c      	beq.n	8018fb4 <ip4_input+0x1cc>
 8018f9a:	2b06      	cmp	r3, #6
 8018f9c:	d005      	beq.n	8018faa <ip4_input+0x1c2>
 8018f9e:	e00e      	b.n	8018fbe <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8018fa0:	6839      	ldr	r1, [r7, #0]
 8018fa2:	6878      	ldr	r0, [r7, #4]
 8018fa4:	f7fe fc68 	bl	8017878 <udp_input>
        break;
 8018fa8:	e026      	b.n	8018ff8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018faa:	6839      	ldr	r1, [r7, #0]
 8018fac:	6878      	ldr	r0, [r7, #4]
 8018fae:	f7fa fce5 	bl	801397c <tcp_input>
        break;
 8018fb2:	e021      	b.n	8018ff8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018fb4:	6839      	ldr	r1, [r7, #0]
 8018fb6:	6878      	ldr	r0, [r7, #4]
 8018fb8:	f7ff fcee 	bl	8018998 <icmp_input>
        break;
 8018fbc:	e01c      	b.n	8018ff8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018fbe:	4b1a      	ldr	r3, [pc, #104]	; (8019028 <ip4_input+0x240>)
 8018fc0:	695b      	ldr	r3, [r3, #20]
 8018fc2:	6939      	ldr	r1, [r7, #16]
 8018fc4:	4618      	mov	r0, r3
 8018fc6:	f000 f90b 	bl	80191e0 <ip4_addr_isbroadcast_u32>
 8018fca:	4603      	mov	r3, r0
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d10f      	bne.n	8018ff0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018fd0:	4b15      	ldr	r3, [pc, #84]	; (8019028 <ip4_input+0x240>)
 8018fd2:	695b      	ldr	r3, [r3, #20]
 8018fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018fd8:	2be0      	cmp	r3, #224	; 0xe0
 8018fda:	d009      	beq.n	8018ff0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018fdc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018fe0:	4619      	mov	r1, r3
 8018fe2:	6878      	ldr	r0, [r7, #4]
 8018fe4:	f7f8 fe8f 	bl	8011d06 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018fe8:	2102      	movs	r1, #2
 8018fea:	6878      	ldr	r0, [r7, #4]
 8018fec:	f7ff fdd8 	bl	8018ba0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8018ff0:	6878      	ldr	r0, [r7, #4]
 8018ff2:	f7f8 fe9b 	bl	8011d2c <pbuf_free>
        break;
 8018ff6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018ff8:	4b0b      	ldr	r3, [pc, #44]	; (8019028 <ip4_input+0x240>)
 8018ffa:	2200      	movs	r2, #0
 8018ffc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018ffe:	4b0a      	ldr	r3, [pc, #40]	; (8019028 <ip4_input+0x240>)
 8019000:	2200      	movs	r2, #0
 8019002:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019004:	4b08      	ldr	r3, [pc, #32]	; (8019028 <ip4_input+0x240>)
 8019006:	2200      	movs	r2, #0
 8019008:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801900a:	4b07      	ldr	r3, [pc, #28]	; (8019028 <ip4_input+0x240>)
 801900c:	2200      	movs	r2, #0
 801900e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019010:	4b05      	ldr	r3, [pc, #20]	; (8019028 <ip4_input+0x240>)
 8019012:	2200      	movs	r2, #0
 8019014:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8019016:	4b04      	ldr	r3, [pc, #16]	; (8019028 <ip4_input+0x240>)
 8019018:	2200      	movs	r2, #0
 801901a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801901c:	2300      	movs	r3, #0
}
 801901e:	4618      	mov	r0, r3
 8019020:	3718      	adds	r7, #24
 8019022:	46bd      	mov	sp, r7
 8019024:	bd80      	pop	{r7, pc}
 8019026:	bf00      	nop
 8019028:	2000a73c 	.word	0x2000a73c
 801902c:	2000dc70 	.word	0x2000dc70

08019030 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019030:	b580      	push	{r7, lr}
 8019032:	b08a      	sub	sp, #40	; 0x28
 8019034:	af04      	add	r7, sp, #16
 8019036:	60f8      	str	r0, [r7, #12]
 8019038:	60b9      	str	r1, [r7, #8]
 801903a:	607a      	str	r2, [r7, #4]
 801903c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801903e:	68bb      	ldr	r3, [r7, #8]
 8019040:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	2b00      	cmp	r3, #0
 8019046:	d009      	beq.n	801905c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019048:	68bb      	ldr	r3, [r7, #8]
 801904a:	2b00      	cmp	r3, #0
 801904c:	d003      	beq.n	8019056 <ip4_output_if+0x26>
 801904e:	68bb      	ldr	r3, [r7, #8]
 8019050:	681b      	ldr	r3, [r3, #0]
 8019052:	2b00      	cmp	r3, #0
 8019054:	d102      	bne.n	801905c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8019056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019058:	3304      	adds	r3, #4
 801905a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801905c:	78fa      	ldrb	r2, [r7, #3]
 801905e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019060:	9302      	str	r3, [sp, #8]
 8019062:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019066:	9301      	str	r3, [sp, #4]
 8019068:	f897 3020 	ldrb.w	r3, [r7, #32]
 801906c:	9300      	str	r3, [sp, #0]
 801906e:	4613      	mov	r3, r2
 8019070:	687a      	ldr	r2, [r7, #4]
 8019072:	6979      	ldr	r1, [r7, #20]
 8019074:	68f8      	ldr	r0, [r7, #12]
 8019076:	f000 f805 	bl	8019084 <ip4_output_if_src>
 801907a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801907c:	4618      	mov	r0, r3
 801907e:	3718      	adds	r7, #24
 8019080:	46bd      	mov	sp, r7
 8019082:	bd80      	pop	{r7, pc}

08019084 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019084:	b580      	push	{r7, lr}
 8019086:	b088      	sub	sp, #32
 8019088:	af00      	add	r7, sp, #0
 801908a:	60f8      	str	r0, [r7, #12]
 801908c:	60b9      	str	r1, [r7, #8]
 801908e:	607a      	str	r2, [r7, #4]
 8019090:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	7b9b      	ldrb	r3, [r3, #14]
 8019096:	2b01      	cmp	r3, #1
 8019098:	d006      	beq.n	80190a8 <ip4_output_if_src+0x24>
 801909a:	4b4b      	ldr	r3, [pc, #300]	; (80191c8 <ip4_output_if_src+0x144>)
 801909c:	f44f 7255 	mov.w	r2, #852	; 0x354
 80190a0:	494a      	ldr	r1, [pc, #296]	; (80191cc <ip4_output_if_src+0x148>)
 80190a2:	484b      	ldr	r0, [pc, #300]	; (80191d0 <ip4_output_if_src+0x14c>)
 80190a4:	f001 fc00 	bl	801a8a8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d060      	beq.n	8019170 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80190ae:	2314      	movs	r3, #20
 80190b0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80190b2:	2114      	movs	r1, #20
 80190b4:	68f8      	ldr	r0, [r7, #12]
 80190b6:	f7f8 fda3 	bl	8011c00 <pbuf_add_header>
 80190ba:	4603      	mov	r3, r0
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d002      	beq.n	80190c6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80190c0:	f06f 0301 	mvn.w	r3, #1
 80190c4:	e07c      	b.n	80191c0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80190c6:	68fb      	ldr	r3, [r7, #12]
 80190c8:	685b      	ldr	r3, [r3, #4]
 80190ca:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80190cc:	68fb      	ldr	r3, [r7, #12]
 80190ce:	895b      	ldrh	r3, [r3, #10]
 80190d0:	2b13      	cmp	r3, #19
 80190d2:	d806      	bhi.n	80190e2 <ip4_output_if_src+0x5e>
 80190d4:	4b3c      	ldr	r3, [pc, #240]	; (80191c8 <ip4_output_if_src+0x144>)
 80190d6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80190da:	493e      	ldr	r1, [pc, #248]	; (80191d4 <ip4_output_if_src+0x150>)
 80190dc:	483c      	ldr	r0, [pc, #240]	; (80191d0 <ip4_output_if_src+0x14c>)
 80190de:	f001 fbe3 	bl	801a8a8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80190e2:	69fb      	ldr	r3, [r7, #28]
 80190e4:	78fa      	ldrb	r2, [r7, #3]
 80190e6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80190e8:	69fb      	ldr	r3, [r7, #28]
 80190ea:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80190ee:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	681a      	ldr	r2, [r3, #0]
 80190f4:	69fb      	ldr	r3, [r7, #28]
 80190f6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80190f8:	8b7b      	ldrh	r3, [r7, #26]
 80190fa:	089b      	lsrs	r3, r3, #2
 80190fc:	b29b      	uxth	r3, r3
 80190fe:	b2db      	uxtb	r3, r3
 8019100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019104:	b2da      	uxtb	r2, r3
 8019106:	69fb      	ldr	r3, [r7, #28]
 8019108:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801910a:	69fb      	ldr	r3, [r7, #28]
 801910c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019110:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	891b      	ldrh	r3, [r3, #8]
 8019116:	4618      	mov	r0, r3
 8019118:	f7f7 fb55 	bl	80107c6 <lwip_htons>
 801911c:	4603      	mov	r3, r0
 801911e:	461a      	mov	r2, r3
 8019120:	69fb      	ldr	r3, [r7, #28]
 8019122:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019124:	69fb      	ldr	r3, [r7, #28]
 8019126:	2200      	movs	r2, #0
 8019128:	719a      	strb	r2, [r3, #6]
 801912a:	2200      	movs	r2, #0
 801912c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801912e:	4b2a      	ldr	r3, [pc, #168]	; (80191d8 <ip4_output_if_src+0x154>)
 8019130:	881b      	ldrh	r3, [r3, #0]
 8019132:	4618      	mov	r0, r3
 8019134:	f7f7 fb47 	bl	80107c6 <lwip_htons>
 8019138:	4603      	mov	r3, r0
 801913a:	461a      	mov	r2, r3
 801913c:	69fb      	ldr	r3, [r7, #28]
 801913e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019140:	4b25      	ldr	r3, [pc, #148]	; (80191d8 <ip4_output_if_src+0x154>)
 8019142:	881b      	ldrh	r3, [r3, #0]
 8019144:	3301      	adds	r3, #1
 8019146:	b29a      	uxth	r2, r3
 8019148:	4b23      	ldr	r3, [pc, #140]	; (80191d8 <ip4_output_if_src+0x154>)
 801914a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801914c:	68bb      	ldr	r3, [r7, #8]
 801914e:	2b00      	cmp	r3, #0
 8019150:	d104      	bne.n	801915c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019152:	4b22      	ldr	r3, [pc, #136]	; (80191dc <ip4_output_if_src+0x158>)
 8019154:	681a      	ldr	r2, [r3, #0]
 8019156:	69fb      	ldr	r3, [r7, #28]
 8019158:	60da      	str	r2, [r3, #12]
 801915a:	e003      	b.n	8019164 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801915c:	68bb      	ldr	r3, [r7, #8]
 801915e:	681a      	ldr	r2, [r3, #0]
 8019160:	69fb      	ldr	r3, [r7, #28]
 8019162:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019164:	69fb      	ldr	r3, [r7, #28]
 8019166:	2200      	movs	r2, #0
 8019168:	729a      	strb	r2, [r3, #10]
 801916a:	2200      	movs	r2, #0
 801916c:	72da      	strb	r2, [r3, #11]
 801916e:	e00f      	b.n	8019190 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019170:	68fb      	ldr	r3, [r7, #12]
 8019172:	895b      	ldrh	r3, [r3, #10]
 8019174:	2b13      	cmp	r3, #19
 8019176:	d802      	bhi.n	801917e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019178:	f06f 0301 	mvn.w	r3, #1
 801917c:	e020      	b.n	80191c0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801917e:	68fb      	ldr	r3, [r7, #12]
 8019180:	685b      	ldr	r3, [r3, #4]
 8019182:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019184:	69fb      	ldr	r3, [r7, #28]
 8019186:	691b      	ldr	r3, [r3, #16]
 8019188:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801918a:	f107 0314 	add.w	r3, r7, #20
 801918e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019192:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019194:	2b00      	cmp	r3, #0
 8019196:	d00c      	beq.n	80191b2 <ip4_output_if_src+0x12e>
 8019198:	68fb      	ldr	r3, [r7, #12]
 801919a:	891a      	ldrh	r2, [r3, #8]
 801919c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801919e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80191a0:	429a      	cmp	r2, r3
 80191a2:	d906      	bls.n	80191b2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80191a4:	687a      	ldr	r2, [r7, #4]
 80191a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80191a8:	68f8      	ldr	r0, [r7, #12]
 80191aa:	f000 fd4d 	bl	8019c48 <ip4_frag>
 80191ae:	4603      	mov	r3, r0
 80191b0:	e006      	b.n	80191c0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80191b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191b4:	695b      	ldr	r3, [r3, #20]
 80191b6:	687a      	ldr	r2, [r7, #4]
 80191b8:	68f9      	ldr	r1, [r7, #12]
 80191ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80191bc:	4798      	blx	r3
 80191be:	4603      	mov	r3, r0
}
 80191c0:	4618      	mov	r0, r3
 80191c2:	3720      	adds	r7, #32
 80191c4:	46bd      	mov	sp, r7
 80191c6:	bd80      	pop	{r7, pc}
 80191c8:	0801e578 	.word	0x0801e578
 80191cc:	0801e5ac 	.word	0x0801e5ac
 80191d0:	0801e5b8 	.word	0x0801e5b8
 80191d4:	0801e5e0 	.word	0x0801e5e0
 80191d8:	200032ae 	.word	0x200032ae
 80191dc:	08095324 	.word	0x08095324

080191e0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80191e0:	b480      	push	{r7}
 80191e2:	b085      	sub	sp, #20
 80191e4:	af00      	add	r7, sp, #0
 80191e6:	6078      	str	r0, [r7, #4]
 80191e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80191f4:	d002      	beq.n	80191fc <ip4_addr_isbroadcast_u32+0x1c>
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d101      	bne.n	8019200 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80191fc:	2301      	movs	r3, #1
 80191fe:	e02a      	b.n	8019256 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019200:	683b      	ldr	r3, [r7, #0]
 8019202:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019206:	f003 0302 	and.w	r3, r3, #2
 801920a:	2b00      	cmp	r3, #0
 801920c:	d101      	bne.n	8019212 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801920e:	2300      	movs	r3, #0
 8019210:	e021      	b.n	8019256 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019212:	683b      	ldr	r3, [r7, #0]
 8019214:	3304      	adds	r3, #4
 8019216:	681b      	ldr	r3, [r3, #0]
 8019218:	687a      	ldr	r2, [r7, #4]
 801921a:	429a      	cmp	r2, r3
 801921c:	d101      	bne.n	8019222 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801921e:	2300      	movs	r3, #0
 8019220:	e019      	b.n	8019256 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019222:	68fa      	ldr	r2, [r7, #12]
 8019224:	683b      	ldr	r3, [r7, #0]
 8019226:	3304      	adds	r3, #4
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	405a      	eors	r2, r3
 801922c:	683b      	ldr	r3, [r7, #0]
 801922e:	3308      	adds	r3, #8
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	4013      	ands	r3, r2
 8019234:	2b00      	cmp	r3, #0
 8019236:	d10d      	bne.n	8019254 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019238:	683b      	ldr	r3, [r7, #0]
 801923a:	3308      	adds	r3, #8
 801923c:	681b      	ldr	r3, [r3, #0]
 801923e:	43da      	mvns	r2, r3
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019244:	683b      	ldr	r3, [r7, #0]
 8019246:	3308      	adds	r3, #8
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801924c:	429a      	cmp	r2, r3
 801924e:	d101      	bne.n	8019254 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019250:	2301      	movs	r3, #1
 8019252:	e000      	b.n	8019256 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019254:	2300      	movs	r3, #0
  }
}
 8019256:	4618      	mov	r0, r3
 8019258:	3714      	adds	r7, #20
 801925a:	46bd      	mov	sp, r7
 801925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019260:	4770      	bx	lr
	...

08019264 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019264:	b580      	push	{r7, lr}
 8019266:	b084      	sub	sp, #16
 8019268:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801926a:	2300      	movs	r3, #0
 801926c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801926e:	4b12      	ldr	r3, [pc, #72]	; (80192b8 <ip_reass_tmr+0x54>)
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019274:	e018      	b.n	80192a8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019276:	68fb      	ldr	r3, [r7, #12]
 8019278:	7fdb      	ldrb	r3, [r3, #31]
 801927a:	2b00      	cmp	r3, #0
 801927c:	d00b      	beq.n	8019296 <ip_reass_tmr+0x32>
      r->timer--;
 801927e:	68fb      	ldr	r3, [r7, #12]
 8019280:	7fdb      	ldrb	r3, [r3, #31]
 8019282:	3b01      	subs	r3, #1
 8019284:	b2da      	uxtb	r2, r3
 8019286:	68fb      	ldr	r3, [r7, #12]
 8019288:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801928a:	68fb      	ldr	r3, [r7, #12]
 801928c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801928e:	68fb      	ldr	r3, [r7, #12]
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	60fb      	str	r3, [r7, #12]
 8019294:	e008      	b.n	80192a8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8019296:	68fb      	ldr	r3, [r7, #12]
 8019298:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801929a:	68fb      	ldr	r3, [r7, #12]
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80192a0:	68b9      	ldr	r1, [r7, #8]
 80192a2:	6878      	ldr	r0, [r7, #4]
 80192a4:	f000 f80a 	bl	80192bc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80192a8:	68fb      	ldr	r3, [r7, #12]
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d1e3      	bne.n	8019276 <ip_reass_tmr+0x12>
    }
  }
}
 80192ae:	bf00      	nop
 80192b0:	bf00      	nop
 80192b2:	3710      	adds	r7, #16
 80192b4:	46bd      	mov	sp, r7
 80192b6:	bd80      	pop	{r7, pc}
 80192b8:	200032b0 	.word	0x200032b0

080192bc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80192bc:	b580      	push	{r7, lr}
 80192be:	b088      	sub	sp, #32
 80192c0:	af00      	add	r7, sp, #0
 80192c2:	6078      	str	r0, [r7, #4]
 80192c4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80192c6:	2300      	movs	r3, #0
 80192c8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80192ca:	683a      	ldr	r2, [r7, #0]
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	429a      	cmp	r2, r3
 80192d0:	d105      	bne.n	80192de <ip_reass_free_complete_datagram+0x22>
 80192d2:	4b45      	ldr	r3, [pc, #276]	; (80193e8 <ip_reass_free_complete_datagram+0x12c>)
 80192d4:	22ab      	movs	r2, #171	; 0xab
 80192d6:	4945      	ldr	r1, [pc, #276]	; (80193ec <ip_reass_free_complete_datagram+0x130>)
 80192d8:	4845      	ldr	r0, [pc, #276]	; (80193f0 <ip_reass_free_complete_datagram+0x134>)
 80192da:	f001 fae5 	bl	801a8a8 <iprintf>
  if (prev != NULL) {
 80192de:	683b      	ldr	r3, [r7, #0]
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d00a      	beq.n	80192fa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80192e4:	683b      	ldr	r3, [r7, #0]
 80192e6:	681b      	ldr	r3, [r3, #0]
 80192e8:	687a      	ldr	r2, [r7, #4]
 80192ea:	429a      	cmp	r2, r3
 80192ec:	d005      	beq.n	80192fa <ip_reass_free_complete_datagram+0x3e>
 80192ee:	4b3e      	ldr	r3, [pc, #248]	; (80193e8 <ip_reass_free_complete_datagram+0x12c>)
 80192f0:	22ad      	movs	r2, #173	; 0xad
 80192f2:	4940      	ldr	r1, [pc, #256]	; (80193f4 <ip_reass_free_complete_datagram+0x138>)
 80192f4:	483e      	ldr	r0, [pc, #248]	; (80193f0 <ip_reass_free_complete_datagram+0x134>)
 80192f6:	f001 fad7 	bl	801a8a8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	685b      	ldr	r3, [r3, #4]
 80192fe:	685b      	ldr	r3, [r3, #4]
 8019300:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019302:	697b      	ldr	r3, [r7, #20]
 8019304:	889b      	ldrh	r3, [r3, #4]
 8019306:	b29b      	uxth	r3, r3
 8019308:	2b00      	cmp	r3, #0
 801930a:	d12a      	bne.n	8019362 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	685b      	ldr	r3, [r3, #4]
 8019310:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019312:	697b      	ldr	r3, [r7, #20]
 8019314:	681a      	ldr	r2, [r3, #0]
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801931a:	69bb      	ldr	r3, [r7, #24]
 801931c:	6858      	ldr	r0, [r3, #4]
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	3308      	adds	r3, #8
 8019322:	2214      	movs	r2, #20
 8019324:	4619      	mov	r1, r3
 8019326:	f001 f9ff 	bl	801a728 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801932a:	2101      	movs	r1, #1
 801932c:	69b8      	ldr	r0, [r7, #24]
 801932e:	f7ff fc47 	bl	8018bc0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019332:	69b8      	ldr	r0, [r7, #24]
 8019334:	f7f8 fd82 	bl	8011e3c <pbuf_clen>
 8019338:	4603      	mov	r3, r0
 801933a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801933c:	8bfa      	ldrh	r2, [r7, #30]
 801933e:	8a7b      	ldrh	r3, [r7, #18]
 8019340:	4413      	add	r3, r2
 8019342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019346:	db05      	blt.n	8019354 <ip_reass_free_complete_datagram+0x98>
 8019348:	4b27      	ldr	r3, [pc, #156]	; (80193e8 <ip_reass_free_complete_datagram+0x12c>)
 801934a:	22bc      	movs	r2, #188	; 0xbc
 801934c:	492a      	ldr	r1, [pc, #168]	; (80193f8 <ip_reass_free_complete_datagram+0x13c>)
 801934e:	4828      	ldr	r0, [pc, #160]	; (80193f0 <ip_reass_free_complete_datagram+0x134>)
 8019350:	f001 faaa 	bl	801a8a8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019354:	8bfa      	ldrh	r2, [r7, #30]
 8019356:	8a7b      	ldrh	r3, [r7, #18]
 8019358:	4413      	add	r3, r2
 801935a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801935c:	69b8      	ldr	r0, [r7, #24]
 801935e:	f7f8 fce5 	bl	8011d2c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	685b      	ldr	r3, [r3, #4]
 8019366:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019368:	e01f      	b.n	80193aa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801936a:	69bb      	ldr	r3, [r7, #24]
 801936c:	685b      	ldr	r3, [r3, #4]
 801936e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019370:	69bb      	ldr	r3, [r7, #24]
 8019372:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019374:	697b      	ldr	r3, [r7, #20]
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801937a:	68f8      	ldr	r0, [r7, #12]
 801937c:	f7f8 fd5e 	bl	8011e3c <pbuf_clen>
 8019380:	4603      	mov	r3, r0
 8019382:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019384:	8bfa      	ldrh	r2, [r7, #30]
 8019386:	8a7b      	ldrh	r3, [r7, #18]
 8019388:	4413      	add	r3, r2
 801938a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801938e:	db05      	blt.n	801939c <ip_reass_free_complete_datagram+0xe0>
 8019390:	4b15      	ldr	r3, [pc, #84]	; (80193e8 <ip_reass_free_complete_datagram+0x12c>)
 8019392:	22cc      	movs	r2, #204	; 0xcc
 8019394:	4918      	ldr	r1, [pc, #96]	; (80193f8 <ip_reass_free_complete_datagram+0x13c>)
 8019396:	4816      	ldr	r0, [pc, #88]	; (80193f0 <ip_reass_free_complete_datagram+0x134>)
 8019398:	f001 fa86 	bl	801a8a8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801939c:	8bfa      	ldrh	r2, [r7, #30]
 801939e:	8a7b      	ldrh	r3, [r7, #18]
 80193a0:	4413      	add	r3, r2
 80193a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80193a4:	68f8      	ldr	r0, [r7, #12]
 80193a6:	f7f8 fcc1 	bl	8011d2c <pbuf_free>
  while (p != NULL) {
 80193aa:	69bb      	ldr	r3, [r7, #24]
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d1dc      	bne.n	801936a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80193b0:	6839      	ldr	r1, [r7, #0]
 80193b2:	6878      	ldr	r0, [r7, #4]
 80193b4:	f000 f8c2 	bl	801953c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80193b8:	4b10      	ldr	r3, [pc, #64]	; (80193fc <ip_reass_free_complete_datagram+0x140>)
 80193ba:	881b      	ldrh	r3, [r3, #0]
 80193bc:	8bfa      	ldrh	r2, [r7, #30]
 80193be:	429a      	cmp	r2, r3
 80193c0:	d905      	bls.n	80193ce <ip_reass_free_complete_datagram+0x112>
 80193c2:	4b09      	ldr	r3, [pc, #36]	; (80193e8 <ip_reass_free_complete_datagram+0x12c>)
 80193c4:	22d2      	movs	r2, #210	; 0xd2
 80193c6:	490e      	ldr	r1, [pc, #56]	; (8019400 <ip_reass_free_complete_datagram+0x144>)
 80193c8:	4809      	ldr	r0, [pc, #36]	; (80193f0 <ip_reass_free_complete_datagram+0x134>)
 80193ca:	f001 fa6d 	bl	801a8a8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80193ce:	4b0b      	ldr	r3, [pc, #44]	; (80193fc <ip_reass_free_complete_datagram+0x140>)
 80193d0:	881a      	ldrh	r2, [r3, #0]
 80193d2:	8bfb      	ldrh	r3, [r7, #30]
 80193d4:	1ad3      	subs	r3, r2, r3
 80193d6:	b29a      	uxth	r2, r3
 80193d8:	4b08      	ldr	r3, [pc, #32]	; (80193fc <ip_reass_free_complete_datagram+0x140>)
 80193da:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80193dc:	8bfb      	ldrh	r3, [r7, #30]
}
 80193de:	4618      	mov	r0, r3
 80193e0:	3720      	adds	r7, #32
 80193e2:	46bd      	mov	sp, r7
 80193e4:	bd80      	pop	{r7, pc}
 80193e6:	bf00      	nop
 80193e8:	0801e610 	.word	0x0801e610
 80193ec:	0801e64c 	.word	0x0801e64c
 80193f0:	0801e658 	.word	0x0801e658
 80193f4:	0801e680 	.word	0x0801e680
 80193f8:	0801e694 	.word	0x0801e694
 80193fc:	200032b4 	.word	0x200032b4
 8019400:	0801e6b4 	.word	0x0801e6b4

08019404 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019404:	b580      	push	{r7, lr}
 8019406:	b08a      	sub	sp, #40	; 0x28
 8019408:	af00      	add	r7, sp, #0
 801940a:	6078      	str	r0, [r7, #4]
 801940c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801940e:	2300      	movs	r3, #0
 8019410:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019412:	2300      	movs	r3, #0
 8019414:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019416:	2300      	movs	r3, #0
 8019418:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801941a:	2300      	movs	r3, #0
 801941c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801941e:	2300      	movs	r3, #0
 8019420:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019422:	4b28      	ldr	r3, [pc, #160]	; (80194c4 <ip_reass_remove_oldest_datagram+0xc0>)
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019428:	e030      	b.n	801948c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801942a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801942c:	695a      	ldr	r2, [r3, #20]
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	68db      	ldr	r3, [r3, #12]
 8019432:	429a      	cmp	r2, r3
 8019434:	d10c      	bne.n	8019450 <ip_reass_remove_oldest_datagram+0x4c>
 8019436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019438:	699a      	ldr	r2, [r3, #24]
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	691b      	ldr	r3, [r3, #16]
 801943e:	429a      	cmp	r2, r3
 8019440:	d106      	bne.n	8019450 <ip_reass_remove_oldest_datagram+0x4c>
 8019442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019444:	899a      	ldrh	r2, [r3, #12]
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	889b      	ldrh	r3, [r3, #4]
 801944a:	b29b      	uxth	r3, r3
 801944c:	429a      	cmp	r2, r3
 801944e:	d014      	beq.n	801947a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019450:	693b      	ldr	r3, [r7, #16]
 8019452:	3301      	adds	r3, #1
 8019454:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019456:	6a3b      	ldr	r3, [r7, #32]
 8019458:	2b00      	cmp	r3, #0
 801945a:	d104      	bne.n	8019466 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801945e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019460:	69fb      	ldr	r3, [r7, #28]
 8019462:	61bb      	str	r3, [r7, #24]
 8019464:	e009      	b.n	801947a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019468:	7fda      	ldrb	r2, [r3, #31]
 801946a:	6a3b      	ldr	r3, [r7, #32]
 801946c:	7fdb      	ldrb	r3, [r3, #31]
 801946e:	429a      	cmp	r2, r3
 8019470:	d803      	bhi.n	801947a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019474:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019476:	69fb      	ldr	r3, [r7, #28]
 8019478:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801947a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	2b00      	cmp	r3, #0
 8019480:	d001      	beq.n	8019486 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019484:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801948e:	2b00      	cmp	r3, #0
 8019490:	d1cb      	bne.n	801942a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019492:	6a3b      	ldr	r3, [r7, #32]
 8019494:	2b00      	cmp	r3, #0
 8019496:	d008      	beq.n	80194aa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019498:	69b9      	ldr	r1, [r7, #24]
 801949a:	6a38      	ldr	r0, [r7, #32]
 801949c:	f7ff ff0e 	bl	80192bc <ip_reass_free_complete_datagram>
 80194a0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80194a2:	697a      	ldr	r2, [r7, #20]
 80194a4:	68fb      	ldr	r3, [r7, #12]
 80194a6:	4413      	add	r3, r2
 80194a8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80194aa:	697a      	ldr	r2, [r7, #20]
 80194ac:	683b      	ldr	r3, [r7, #0]
 80194ae:	429a      	cmp	r2, r3
 80194b0:	da02      	bge.n	80194b8 <ip_reass_remove_oldest_datagram+0xb4>
 80194b2:	693b      	ldr	r3, [r7, #16]
 80194b4:	2b01      	cmp	r3, #1
 80194b6:	dcac      	bgt.n	8019412 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80194b8:	697b      	ldr	r3, [r7, #20]
}
 80194ba:	4618      	mov	r0, r3
 80194bc:	3728      	adds	r7, #40	; 0x28
 80194be:	46bd      	mov	sp, r7
 80194c0:	bd80      	pop	{r7, pc}
 80194c2:	bf00      	nop
 80194c4:	200032b0 	.word	0x200032b0

080194c8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80194c8:	b580      	push	{r7, lr}
 80194ca:	b084      	sub	sp, #16
 80194cc:	af00      	add	r7, sp, #0
 80194ce:	6078      	str	r0, [r7, #4]
 80194d0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80194d2:	2004      	movs	r0, #4
 80194d4:	f7f7 fdcc 	bl	8011070 <memp_malloc>
 80194d8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80194da:	68fb      	ldr	r3, [r7, #12]
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d110      	bne.n	8019502 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80194e0:	6839      	ldr	r1, [r7, #0]
 80194e2:	6878      	ldr	r0, [r7, #4]
 80194e4:	f7ff ff8e 	bl	8019404 <ip_reass_remove_oldest_datagram>
 80194e8:	4602      	mov	r2, r0
 80194ea:	683b      	ldr	r3, [r7, #0]
 80194ec:	4293      	cmp	r3, r2
 80194ee:	dc03      	bgt.n	80194f8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80194f0:	2004      	movs	r0, #4
 80194f2:	f7f7 fdbd 	bl	8011070 <memp_malloc>
 80194f6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80194f8:	68fb      	ldr	r3, [r7, #12]
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d101      	bne.n	8019502 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80194fe:	2300      	movs	r3, #0
 8019500:	e016      	b.n	8019530 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019502:	2220      	movs	r2, #32
 8019504:	2100      	movs	r1, #0
 8019506:	68f8      	ldr	r0, [r7, #12]
 8019508:	f001 f91c 	bl	801a744 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801950c:	68fb      	ldr	r3, [r7, #12]
 801950e:	220f      	movs	r2, #15
 8019510:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019512:	4b09      	ldr	r3, [pc, #36]	; (8019538 <ip_reass_enqueue_new_datagram+0x70>)
 8019514:	681a      	ldr	r2, [r3, #0]
 8019516:	68fb      	ldr	r3, [r7, #12]
 8019518:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801951a:	4a07      	ldr	r2, [pc, #28]	; (8019538 <ip_reass_enqueue_new_datagram+0x70>)
 801951c:	68fb      	ldr	r3, [r7, #12]
 801951e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019520:	68fb      	ldr	r3, [r7, #12]
 8019522:	3308      	adds	r3, #8
 8019524:	2214      	movs	r2, #20
 8019526:	6879      	ldr	r1, [r7, #4]
 8019528:	4618      	mov	r0, r3
 801952a:	f001 f8fd 	bl	801a728 <memcpy>
  return ipr;
 801952e:	68fb      	ldr	r3, [r7, #12]
}
 8019530:	4618      	mov	r0, r3
 8019532:	3710      	adds	r7, #16
 8019534:	46bd      	mov	sp, r7
 8019536:	bd80      	pop	{r7, pc}
 8019538:	200032b0 	.word	0x200032b0

0801953c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801953c:	b580      	push	{r7, lr}
 801953e:	b082      	sub	sp, #8
 8019540:	af00      	add	r7, sp, #0
 8019542:	6078      	str	r0, [r7, #4]
 8019544:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019546:	4b10      	ldr	r3, [pc, #64]	; (8019588 <ip_reass_dequeue_datagram+0x4c>)
 8019548:	681b      	ldr	r3, [r3, #0]
 801954a:	687a      	ldr	r2, [r7, #4]
 801954c:	429a      	cmp	r2, r3
 801954e:	d104      	bne.n	801955a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	681b      	ldr	r3, [r3, #0]
 8019554:	4a0c      	ldr	r2, [pc, #48]	; (8019588 <ip_reass_dequeue_datagram+0x4c>)
 8019556:	6013      	str	r3, [r2, #0]
 8019558:	e00d      	b.n	8019576 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801955a:	683b      	ldr	r3, [r7, #0]
 801955c:	2b00      	cmp	r3, #0
 801955e:	d106      	bne.n	801956e <ip_reass_dequeue_datagram+0x32>
 8019560:	4b0a      	ldr	r3, [pc, #40]	; (801958c <ip_reass_dequeue_datagram+0x50>)
 8019562:	f240 1245 	movw	r2, #325	; 0x145
 8019566:	490a      	ldr	r1, [pc, #40]	; (8019590 <ip_reass_dequeue_datagram+0x54>)
 8019568:	480a      	ldr	r0, [pc, #40]	; (8019594 <ip_reass_dequeue_datagram+0x58>)
 801956a:	f001 f99d 	bl	801a8a8 <iprintf>
    prev->next = ipr->next;
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	681a      	ldr	r2, [r3, #0]
 8019572:	683b      	ldr	r3, [r7, #0]
 8019574:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019576:	6879      	ldr	r1, [r7, #4]
 8019578:	2004      	movs	r0, #4
 801957a:	f7f7 fdc5 	bl	8011108 <memp_free>
}
 801957e:	bf00      	nop
 8019580:	3708      	adds	r7, #8
 8019582:	46bd      	mov	sp, r7
 8019584:	bd80      	pop	{r7, pc}
 8019586:	bf00      	nop
 8019588:	200032b0 	.word	0x200032b0
 801958c:	0801e610 	.word	0x0801e610
 8019590:	0801e6d8 	.word	0x0801e6d8
 8019594:	0801e658 	.word	0x0801e658

08019598 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019598:	b580      	push	{r7, lr}
 801959a:	b08c      	sub	sp, #48	; 0x30
 801959c:	af00      	add	r7, sp, #0
 801959e:	60f8      	str	r0, [r7, #12]
 80195a0:	60b9      	str	r1, [r7, #8]
 80195a2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80195a4:	2300      	movs	r3, #0
 80195a6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80195a8:	2301      	movs	r3, #1
 80195aa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80195ac:	68bb      	ldr	r3, [r7, #8]
 80195ae:	685b      	ldr	r3, [r3, #4]
 80195b0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80195b2:	69fb      	ldr	r3, [r7, #28]
 80195b4:	885b      	ldrh	r3, [r3, #2]
 80195b6:	b29b      	uxth	r3, r3
 80195b8:	4618      	mov	r0, r3
 80195ba:	f7f7 f904 	bl	80107c6 <lwip_htons>
 80195be:	4603      	mov	r3, r0
 80195c0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80195c2:	69fb      	ldr	r3, [r7, #28]
 80195c4:	781b      	ldrb	r3, [r3, #0]
 80195c6:	f003 030f 	and.w	r3, r3, #15
 80195ca:	b2db      	uxtb	r3, r3
 80195cc:	009b      	lsls	r3, r3, #2
 80195ce:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80195d0:	7e7b      	ldrb	r3, [r7, #25]
 80195d2:	b29b      	uxth	r3, r3
 80195d4:	8b7a      	ldrh	r2, [r7, #26]
 80195d6:	429a      	cmp	r2, r3
 80195d8:	d202      	bcs.n	80195e0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80195da:	f04f 33ff 	mov.w	r3, #4294967295
 80195de:	e135      	b.n	801984c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80195e0:	7e7b      	ldrb	r3, [r7, #25]
 80195e2:	b29b      	uxth	r3, r3
 80195e4:	8b7a      	ldrh	r2, [r7, #26]
 80195e6:	1ad3      	subs	r3, r2, r3
 80195e8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80195ea:	69fb      	ldr	r3, [r7, #28]
 80195ec:	88db      	ldrh	r3, [r3, #6]
 80195ee:	b29b      	uxth	r3, r3
 80195f0:	4618      	mov	r0, r3
 80195f2:	f7f7 f8e8 	bl	80107c6 <lwip_htons>
 80195f6:	4603      	mov	r3, r0
 80195f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80195fc:	b29b      	uxth	r3, r3
 80195fe:	00db      	lsls	r3, r3, #3
 8019600:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019602:	68bb      	ldr	r3, [r7, #8]
 8019604:	685b      	ldr	r3, [r3, #4]
 8019606:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801960a:	2200      	movs	r2, #0
 801960c:	701a      	strb	r2, [r3, #0]
 801960e:	2200      	movs	r2, #0
 8019610:	705a      	strb	r2, [r3, #1]
 8019612:	2200      	movs	r2, #0
 8019614:	709a      	strb	r2, [r3, #2]
 8019616:	2200      	movs	r2, #0
 8019618:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801961a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801961c:	8afa      	ldrh	r2, [r7, #22]
 801961e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019620:	8afa      	ldrh	r2, [r7, #22]
 8019622:	8b7b      	ldrh	r3, [r7, #26]
 8019624:	4413      	add	r3, r2
 8019626:	b29a      	uxth	r2, r3
 8019628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801962a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801962c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801962e:	88db      	ldrh	r3, [r3, #6]
 8019630:	b29b      	uxth	r3, r3
 8019632:	8afa      	ldrh	r2, [r7, #22]
 8019634:	429a      	cmp	r2, r3
 8019636:	d902      	bls.n	801963e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019638:	f04f 33ff 	mov.w	r3, #4294967295
 801963c:	e106      	b.n	801984c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	685b      	ldr	r3, [r3, #4]
 8019642:	627b      	str	r3, [r7, #36]	; 0x24
 8019644:	e068      	b.n	8019718 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8019646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019648:	685b      	ldr	r3, [r3, #4]
 801964a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801964c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801964e:	889b      	ldrh	r3, [r3, #4]
 8019650:	b29a      	uxth	r2, r3
 8019652:	693b      	ldr	r3, [r7, #16]
 8019654:	889b      	ldrh	r3, [r3, #4]
 8019656:	b29b      	uxth	r3, r3
 8019658:	429a      	cmp	r2, r3
 801965a:	d235      	bcs.n	80196c8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801965c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801965e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019660:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019664:	2b00      	cmp	r3, #0
 8019666:	d020      	beq.n	80196aa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801966a:	889b      	ldrh	r3, [r3, #4]
 801966c:	b29a      	uxth	r2, r3
 801966e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019670:	88db      	ldrh	r3, [r3, #6]
 8019672:	b29b      	uxth	r3, r3
 8019674:	429a      	cmp	r2, r3
 8019676:	d307      	bcc.n	8019688 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8019678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801967a:	88db      	ldrh	r3, [r3, #6]
 801967c:	b29a      	uxth	r2, r3
 801967e:	693b      	ldr	r3, [r7, #16]
 8019680:	889b      	ldrh	r3, [r3, #4]
 8019682:	b29b      	uxth	r3, r3
 8019684:	429a      	cmp	r2, r3
 8019686:	d902      	bls.n	801968e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019688:	f04f 33ff 	mov.w	r3, #4294967295
 801968c:	e0de      	b.n	801984c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801968e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019690:	68ba      	ldr	r2, [r7, #8]
 8019692:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019696:	88db      	ldrh	r3, [r3, #6]
 8019698:	b29a      	uxth	r2, r3
 801969a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801969c:	889b      	ldrh	r3, [r3, #4]
 801969e:	b29b      	uxth	r3, r3
 80196a0:	429a      	cmp	r2, r3
 80196a2:	d03d      	beq.n	8019720 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80196a4:	2300      	movs	r3, #0
 80196a6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80196a8:	e03a      	b.n	8019720 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80196aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196ac:	88db      	ldrh	r3, [r3, #6]
 80196ae:	b29a      	uxth	r2, r3
 80196b0:	693b      	ldr	r3, [r7, #16]
 80196b2:	889b      	ldrh	r3, [r3, #4]
 80196b4:	b29b      	uxth	r3, r3
 80196b6:	429a      	cmp	r2, r3
 80196b8:	d902      	bls.n	80196c0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80196ba:	f04f 33ff 	mov.w	r3, #4294967295
 80196be:	e0c5      	b.n	801984c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80196c0:	68fb      	ldr	r3, [r7, #12]
 80196c2:	68ba      	ldr	r2, [r7, #8]
 80196c4:	605a      	str	r2, [r3, #4]
      break;
 80196c6:	e02b      	b.n	8019720 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80196c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196ca:	889b      	ldrh	r3, [r3, #4]
 80196cc:	b29a      	uxth	r2, r3
 80196ce:	693b      	ldr	r3, [r7, #16]
 80196d0:	889b      	ldrh	r3, [r3, #4]
 80196d2:	b29b      	uxth	r3, r3
 80196d4:	429a      	cmp	r2, r3
 80196d6:	d102      	bne.n	80196de <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80196d8:	f04f 33ff 	mov.w	r3, #4294967295
 80196dc:	e0b6      	b.n	801984c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80196de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196e0:	889b      	ldrh	r3, [r3, #4]
 80196e2:	b29a      	uxth	r2, r3
 80196e4:	693b      	ldr	r3, [r7, #16]
 80196e6:	88db      	ldrh	r3, [r3, #6]
 80196e8:	b29b      	uxth	r3, r3
 80196ea:	429a      	cmp	r2, r3
 80196ec:	d202      	bcs.n	80196f4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80196ee:	f04f 33ff 	mov.w	r3, #4294967295
 80196f2:	e0ab      	b.n	801984c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80196f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	d009      	beq.n	801970e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80196fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196fc:	88db      	ldrh	r3, [r3, #6]
 80196fe:	b29a      	uxth	r2, r3
 8019700:	693b      	ldr	r3, [r7, #16]
 8019702:	889b      	ldrh	r3, [r3, #4]
 8019704:	b29b      	uxth	r3, r3
 8019706:	429a      	cmp	r2, r3
 8019708:	d001      	beq.n	801970e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801970a:	2300      	movs	r3, #0
 801970c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801970e:	693b      	ldr	r3, [r7, #16]
 8019710:	681b      	ldr	r3, [r3, #0]
 8019712:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019714:	693b      	ldr	r3, [r7, #16]
 8019716:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801971a:	2b00      	cmp	r3, #0
 801971c:	d193      	bne.n	8019646 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801971e:	e000      	b.n	8019722 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019720:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019724:	2b00      	cmp	r3, #0
 8019726:	d12d      	bne.n	8019784 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801972a:	2b00      	cmp	r3, #0
 801972c:	d01c      	beq.n	8019768 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801972e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019730:	88db      	ldrh	r3, [r3, #6]
 8019732:	b29a      	uxth	r2, r3
 8019734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019736:	889b      	ldrh	r3, [r3, #4]
 8019738:	b29b      	uxth	r3, r3
 801973a:	429a      	cmp	r2, r3
 801973c:	d906      	bls.n	801974c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801973e:	4b45      	ldr	r3, [pc, #276]	; (8019854 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019740:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8019744:	4944      	ldr	r1, [pc, #272]	; (8019858 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019746:	4845      	ldr	r0, [pc, #276]	; (801985c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019748:	f001 f8ae 	bl	801a8a8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801974c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801974e:	68ba      	ldr	r2, [r7, #8]
 8019750:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019754:	88db      	ldrh	r3, [r3, #6]
 8019756:	b29a      	uxth	r2, r3
 8019758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801975a:	889b      	ldrh	r3, [r3, #4]
 801975c:	b29b      	uxth	r3, r3
 801975e:	429a      	cmp	r2, r3
 8019760:	d010      	beq.n	8019784 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8019762:	2300      	movs	r3, #0
 8019764:	623b      	str	r3, [r7, #32]
 8019766:	e00d      	b.n	8019784 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019768:	68fb      	ldr	r3, [r7, #12]
 801976a:	685b      	ldr	r3, [r3, #4]
 801976c:	2b00      	cmp	r3, #0
 801976e:	d006      	beq.n	801977e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019770:	4b38      	ldr	r3, [pc, #224]	; (8019854 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019772:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8019776:	493a      	ldr	r1, [pc, #232]	; (8019860 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019778:	4838      	ldr	r0, [pc, #224]	; (801985c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801977a:	f001 f895 	bl	801a8a8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801977e:	68fb      	ldr	r3, [r7, #12]
 8019780:	68ba      	ldr	r2, [r7, #8]
 8019782:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	2b00      	cmp	r3, #0
 8019788:	d105      	bne.n	8019796 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801978a:	68fb      	ldr	r3, [r7, #12]
 801978c:	7f9b      	ldrb	r3, [r3, #30]
 801978e:	f003 0301 	and.w	r3, r3, #1
 8019792:	2b00      	cmp	r3, #0
 8019794:	d059      	beq.n	801984a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8019796:	6a3b      	ldr	r3, [r7, #32]
 8019798:	2b00      	cmp	r3, #0
 801979a:	d04f      	beq.n	801983c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801979c:	68fb      	ldr	r3, [r7, #12]
 801979e:	685b      	ldr	r3, [r3, #4]
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d006      	beq.n	80197b2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80197a4:	68fb      	ldr	r3, [r7, #12]
 80197a6:	685b      	ldr	r3, [r3, #4]
 80197a8:	685b      	ldr	r3, [r3, #4]
 80197aa:	889b      	ldrh	r3, [r3, #4]
 80197ac:	b29b      	uxth	r3, r3
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	d002      	beq.n	80197b8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80197b2:	2300      	movs	r3, #0
 80197b4:	623b      	str	r3, [r7, #32]
 80197b6:	e041      	b.n	801983c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80197b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197ba:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80197bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80197c2:	e012      	b.n	80197ea <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80197c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197c6:	685b      	ldr	r3, [r3, #4]
 80197c8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80197ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197cc:	88db      	ldrh	r3, [r3, #6]
 80197ce:	b29a      	uxth	r2, r3
 80197d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197d2:	889b      	ldrh	r3, [r3, #4]
 80197d4:	b29b      	uxth	r3, r3
 80197d6:	429a      	cmp	r2, r3
 80197d8:	d002      	beq.n	80197e0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80197da:	2300      	movs	r3, #0
 80197dc:	623b      	str	r3, [r7, #32]
            break;
 80197de:	e007      	b.n	80197f0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80197e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197e2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80197e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80197ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	d1e9      	bne.n	80197c4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80197f0:	6a3b      	ldr	r3, [r7, #32]
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	d022      	beq.n	801983c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80197f6:	68fb      	ldr	r3, [r7, #12]
 80197f8:	685b      	ldr	r3, [r3, #4]
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d106      	bne.n	801980c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80197fe:	4b15      	ldr	r3, [pc, #84]	; (8019854 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019800:	f240 12df 	movw	r2, #479	; 0x1df
 8019804:	4917      	ldr	r1, [pc, #92]	; (8019864 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019806:	4815      	ldr	r0, [pc, #84]	; (801985c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019808:	f001 f84e 	bl	801a8a8 <iprintf>
          LWIP_ASSERT("sanity check",
 801980c:	68fb      	ldr	r3, [r7, #12]
 801980e:	685b      	ldr	r3, [r3, #4]
 8019810:	685b      	ldr	r3, [r3, #4]
 8019812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019814:	429a      	cmp	r2, r3
 8019816:	d106      	bne.n	8019826 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019818:	4b0e      	ldr	r3, [pc, #56]	; (8019854 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801981a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801981e:	4911      	ldr	r1, [pc, #68]	; (8019864 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019820:	480e      	ldr	r0, [pc, #56]	; (801985c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019822:	f001 f841 	bl	801a8a8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8019826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019828:	681b      	ldr	r3, [r3, #0]
 801982a:	2b00      	cmp	r3, #0
 801982c:	d006      	beq.n	801983c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801982e:	4b09      	ldr	r3, [pc, #36]	; (8019854 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019830:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8019834:	490c      	ldr	r1, [pc, #48]	; (8019868 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019836:	4809      	ldr	r0, [pc, #36]	; (801985c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019838:	f001 f836 	bl	801a8a8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801983c:	6a3b      	ldr	r3, [r7, #32]
 801983e:	2b00      	cmp	r3, #0
 8019840:	bf14      	ite	ne
 8019842:	2301      	movne	r3, #1
 8019844:	2300      	moveq	r3, #0
 8019846:	b2db      	uxtb	r3, r3
 8019848:	e000      	b.n	801984c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801984a:	2300      	movs	r3, #0
}
 801984c:	4618      	mov	r0, r3
 801984e:	3730      	adds	r7, #48	; 0x30
 8019850:	46bd      	mov	sp, r7
 8019852:	bd80      	pop	{r7, pc}
 8019854:	0801e610 	.word	0x0801e610
 8019858:	0801e6f4 	.word	0x0801e6f4
 801985c:	0801e658 	.word	0x0801e658
 8019860:	0801e714 	.word	0x0801e714
 8019864:	0801e74c 	.word	0x0801e74c
 8019868:	0801e75c 	.word	0x0801e75c

0801986c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801986c:	b580      	push	{r7, lr}
 801986e:	b08e      	sub	sp, #56	; 0x38
 8019870:	af00      	add	r7, sp, #0
 8019872:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	685b      	ldr	r3, [r3, #4]
 8019878:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801987a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801987c:	781b      	ldrb	r3, [r3, #0]
 801987e:	f003 030f 	and.w	r3, r3, #15
 8019882:	b2db      	uxtb	r3, r3
 8019884:	009b      	lsls	r3, r3, #2
 8019886:	b2db      	uxtb	r3, r3
 8019888:	2b14      	cmp	r3, #20
 801988a:	f040 8167 	bne.w	8019b5c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801988e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019890:	88db      	ldrh	r3, [r3, #6]
 8019892:	b29b      	uxth	r3, r3
 8019894:	4618      	mov	r0, r3
 8019896:	f7f6 ff96 	bl	80107c6 <lwip_htons>
 801989a:	4603      	mov	r3, r0
 801989c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80198a0:	b29b      	uxth	r3, r3
 80198a2:	00db      	lsls	r3, r3, #3
 80198a4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80198a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198a8:	885b      	ldrh	r3, [r3, #2]
 80198aa:	b29b      	uxth	r3, r3
 80198ac:	4618      	mov	r0, r3
 80198ae:	f7f6 ff8a 	bl	80107c6 <lwip_htons>
 80198b2:	4603      	mov	r3, r0
 80198b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80198b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198b8:	781b      	ldrb	r3, [r3, #0]
 80198ba:	f003 030f 	and.w	r3, r3, #15
 80198be:	b2db      	uxtb	r3, r3
 80198c0:	009b      	lsls	r3, r3, #2
 80198c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80198c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80198ca:	b29b      	uxth	r3, r3
 80198cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80198ce:	429a      	cmp	r2, r3
 80198d0:	f0c0 8146 	bcc.w	8019b60 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80198d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80198d8:	b29b      	uxth	r3, r3
 80198da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80198dc:	1ad3      	subs	r3, r2, r3
 80198de:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80198e0:	6878      	ldr	r0, [r7, #4]
 80198e2:	f7f8 faab 	bl	8011e3c <pbuf_clen>
 80198e6:	4603      	mov	r3, r0
 80198e8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80198ea:	4b9f      	ldr	r3, [pc, #636]	; (8019b68 <ip4_reass+0x2fc>)
 80198ec:	881b      	ldrh	r3, [r3, #0]
 80198ee:	461a      	mov	r2, r3
 80198f0:	8c3b      	ldrh	r3, [r7, #32]
 80198f2:	4413      	add	r3, r2
 80198f4:	2b0a      	cmp	r3, #10
 80198f6:	dd10      	ble.n	801991a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80198f8:	8c3b      	ldrh	r3, [r7, #32]
 80198fa:	4619      	mov	r1, r3
 80198fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80198fe:	f7ff fd81 	bl	8019404 <ip_reass_remove_oldest_datagram>
 8019902:	4603      	mov	r3, r0
 8019904:	2b00      	cmp	r3, #0
 8019906:	f000 812d 	beq.w	8019b64 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801990a:	4b97      	ldr	r3, [pc, #604]	; (8019b68 <ip4_reass+0x2fc>)
 801990c:	881b      	ldrh	r3, [r3, #0]
 801990e:	461a      	mov	r2, r3
 8019910:	8c3b      	ldrh	r3, [r7, #32]
 8019912:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019914:	2b0a      	cmp	r3, #10
 8019916:	f300 8125 	bgt.w	8019b64 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801991a:	4b94      	ldr	r3, [pc, #592]	; (8019b6c <ip4_reass+0x300>)
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	633b      	str	r3, [r7, #48]	; 0x30
 8019920:	e015      	b.n	801994e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8019922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019924:	695a      	ldr	r2, [r3, #20]
 8019926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019928:	68db      	ldr	r3, [r3, #12]
 801992a:	429a      	cmp	r2, r3
 801992c:	d10c      	bne.n	8019948 <ip4_reass+0xdc>
 801992e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019930:	699a      	ldr	r2, [r3, #24]
 8019932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019934:	691b      	ldr	r3, [r3, #16]
 8019936:	429a      	cmp	r2, r3
 8019938:	d106      	bne.n	8019948 <ip4_reass+0xdc>
 801993a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801993c:	899a      	ldrh	r2, [r3, #12]
 801993e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019940:	889b      	ldrh	r3, [r3, #4]
 8019942:	b29b      	uxth	r3, r3
 8019944:	429a      	cmp	r2, r3
 8019946:	d006      	beq.n	8019956 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	633b      	str	r3, [r7, #48]	; 0x30
 801994e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019950:	2b00      	cmp	r3, #0
 8019952:	d1e6      	bne.n	8019922 <ip4_reass+0xb6>
 8019954:	e000      	b.n	8019958 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8019956:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8019958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801995a:	2b00      	cmp	r3, #0
 801995c:	d109      	bne.n	8019972 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801995e:	8c3b      	ldrh	r3, [r7, #32]
 8019960:	4619      	mov	r1, r3
 8019962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019964:	f7ff fdb0 	bl	80194c8 <ip_reass_enqueue_new_datagram>
 8019968:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801996a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801996c:	2b00      	cmp	r3, #0
 801996e:	d11c      	bne.n	80199aa <ip4_reass+0x13e>
      goto nullreturn;
 8019970:	e109      	b.n	8019b86 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019974:	88db      	ldrh	r3, [r3, #6]
 8019976:	b29b      	uxth	r3, r3
 8019978:	4618      	mov	r0, r3
 801997a:	f7f6 ff24 	bl	80107c6 <lwip_htons>
 801997e:	4603      	mov	r3, r0
 8019980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019984:	2b00      	cmp	r3, #0
 8019986:	d110      	bne.n	80199aa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8019988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801998a:	89db      	ldrh	r3, [r3, #14]
 801998c:	4618      	mov	r0, r3
 801998e:	f7f6 ff1a 	bl	80107c6 <lwip_htons>
 8019992:	4603      	mov	r3, r0
 8019994:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019998:	2b00      	cmp	r3, #0
 801999a:	d006      	beq.n	80199aa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801999c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801999e:	3308      	adds	r3, #8
 80199a0:	2214      	movs	r2, #20
 80199a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80199a4:	4618      	mov	r0, r3
 80199a6:	f000 febf 	bl	801a728 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80199aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199ac:	88db      	ldrh	r3, [r3, #6]
 80199ae:	b29b      	uxth	r3, r3
 80199b0:	f003 0320 	and.w	r3, r3, #32
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	bf0c      	ite	eq
 80199b8:	2301      	moveq	r3, #1
 80199ba:	2300      	movne	r3, #0
 80199bc:	b2db      	uxtb	r3, r3
 80199be:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80199c0:	69fb      	ldr	r3, [r7, #28]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d00e      	beq.n	80199e4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80199c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80199c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80199ca:	4413      	add	r3, r2
 80199cc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80199ce:	8b7a      	ldrh	r2, [r7, #26]
 80199d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80199d2:	429a      	cmp	r2, r3
 80199d4:	f0c0 80a0 	bcc.w	8019b18 <ip4_reass+0x2ac>
 80199d8:	8b7b      	ldrh	r3, [r7, #26]
 80199da:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80199de:	4293      	cmp	r3, r2
 80199e0:	f200 809a 	bhi.w	8019b18 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80199e4:	69fa      	ldr	r2, [r7, #28]
 80199e6:	6879      	ldr	r1, [r7, #4]
 80199e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80199ea:	f7ff fdd5 	bl	8019598 <ip_reass_chain_frag_into_datagram_and_validate>
 80199ee:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80199f0:	697b      	ldr	r3, [r7, #20]
 80199f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80199f6:	f000 8091 	beq.w	8019b1c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80199fa:	4b5b      	ldr	r3, [pc, #364]	; (8019b68 <ip4_reass+0x2fc>)
 80199fc:	881a      	ldrh	r2, [r3, #0]
 80199fe:	8c3b      	ldrh	r3, [r7, #32]
 8019a00:	4413      	add	r3, r2
 8019a02:	b29a      	uxth	r2, r3
 8019a04:	4b58      	ldr	r3, [pc, #352]	; (8019b68 <ip4_reass+0x2fc>)
 8019a06:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019a08:	69fb      	ldr	r3, [r7, #28]
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d00d      	beq.n	8019a2a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8019a0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019a10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019a12:	4413      	add	r3, r2
 8019a14:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8019a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a18:	8a7a      	ldrh	r2, [r7, #18]
 8019a1a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8019a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a1e:	7f9b      	ldrb	r3, [r3, #30]
 8019a20:	f043 0301 	orr.w	r3, r3, #1
 8019a24:	b2da      	uxtb	r2, r3
 8019a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a28:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8019a2a:	697b      	ldr	r3, [r7, #20]
 8019a2c:	2b01      	cmp	r3, #1
 8019a2e:	d171      	bne.n	8019b14 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8019a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a32:	8b9b      	ldrh	r3, [r3, #28]
 8019a34:	3314      	adds	r3, #20
 8019a36:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8019a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a3a:	685b      	ldr	r3, [r3, #4]
 8019a3c:	685b      	ldr	r3, [r3, #4]
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8019a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a44:	685b      	ldr	r3, [r3, #4]
 8019a46:	685b      	ldr	r3, [r3, #4]
 8019a48:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8019a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a4c:	3308      	adds	r3, #8
 8019a4e:	2214      	movs	r2, #20
 8019a50:	4619      	mov	r1, r3
 8019a52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019a54:	f000 fe68 	bl	801a728 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8019a58:	8a3b      	ldrh	r3, [r7, #16]
 8019a5a:	4618      	mov	r0, r3
 8019a5c:	f7f6 feb3 	bl	80107c6 <lwip_htons>
 8019a60:	4603      	mov	r3, r0
 8019a62:	461a      	mov	r2, r3
 8019a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a66:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8019a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a6a:	2200      	movs	r2, #0
 8019a6c:	719a      	strb	r2, [r3, #6]
 8019a6e:	2200      	movs	r2, #0
 8019a70:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8019a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a74:	2200      	movs	r2, #0
 8019a76:	729a      	strb	r2, [r3, #10]
 8019a78:	2200      	movs	r2, #0
 8019a7a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8019a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a7e:	685b      	ldr	r3, [r3, #4]
 8019a80:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8019a82:	e00d      	b.n	8019aa0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8019a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a86:	685b      	ldr	r3, [r3, #4]
 8019a88:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8019a8a:	2114      	movs	r1, #20
 8019a8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8019a8e:	f7f8 f8c7 	bl	8011c20 <pbuf_remove_header>
      pbuf_cat(p, r);
 8019a92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019a94:	6878      	ldr	r0, [r7, #4]
 8019a96:	f7f8 fa0b 	bl	8011eb0 <pbuf_cat>
      r = iprh->next_pbuf;
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	681b      	ldr	r3, [r3, #0]
 8019a9e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8019aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d1ee      	bne.n	8019a84 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8019aa6:	4b31      	ldr	r3, [pc, #196]	; (8019b6c <ip4_reass+0x300>)
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019aac:	429a      	cmp	r2, r3
 8019aae:	d102      	bne.n	8019ab6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8019ab0:	2300      	movs	r3, #0
 8019ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019ab4:	e010      	b.n	8019ad8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019ab6:	4b2d      	ldr	r3, [pc, #180]	; (8019b6c <ip4_reass+0x300>)
 8019ab8:	681b      	ldr	r3, [r3, #0]
 8019aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019abc:	e007      	b.n	8019ace <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8019abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ac0:	681b      	ldr	r3, [r3, #0]
 8019ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019ac4:	429a      	cmp	r2, r3
 8019ac6:	d006      	beq.n	8019ad6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	d1f4      	bne.n	8019abe <ip4_reass+0x252>
 8019ad4:	e000      	b.n	8019ad8 <ip4_reass+0x26c>
          break;
 8019ad6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019ad8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019ada:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019adc:	f7ff fd2e 	bl	801953c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019ae0:	6878      	ldr	r0, [r7, #4]
 8019ae2:	f7f8 f9ab 	bl	8011e3c <pbuf_clen>
 8019ae6:	4603      	mov	r3, r0
 8019ae8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8019aea:	4b1f      	ldr	r3, [pc, #124]	; (8019b68 <ip4_reass+0x2fc>)
 8019aec:	881b      	ldrh	r3, [r3, #0]
 8019aee:	8c3a      	ldrh	r2, [r7, #32]
 8019af0:	429a      	cmp	r2, r3
 8019af2:	d906      	bls.n	8019b02 <ip4_reass+0x296>
 8019af4:	4b1e      	ldr	r3, [pc, #120]	; (8019b70 <ip4_reass+0x304>)
 8019af6:	f240 229b 	movw	r2, #667	; 0x29b
 8019afa:	491e      	ldr	r1, [pc, #120]	; (8019b74 <ip4_reass+0x308>)
 8019afc:	481e      	ldr	r0, [pc, #120]	; (8019b78 <ip4_reass+0x30c>)
 8019afe:	f000 fed3 	bl	801a8a8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8019b02:	4b19      	ldr	r3, [pc, #100]	; (8019b68 <ip4_reass+0x2fc>)
 8019b04:	881a      	ldrh	r2, [r3, #0]
 8019b06:	8c3b      	ldrh	r3, [r7, #32]
 8019b08:	1ad3      	subs	r3, r2, r3
 8019b0a:	b29a      	uxth	r2, r3
 8019b0c:	4b16      	ldr	r3, [pc, #88]	; (8019b68 <ip4_reass+0x2fc>)
 8019b0e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	e03c      	b.n	8019b8e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8019b14:	2300      	movs	r3, #0
 8019b16:	e03a      	b.n	8019b8e <ip4_reass+0x322>
      goto nullreturn_ipr;
 8019b18:	bf00      	nop
 8019b1a:	e000      	b.n	8019b1e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8019b1c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8019b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d106      	bne.n	8019b32 <ip4_reass+0x2c6>
 8019b24:	4b12      	ldr	r3, [pc, #72]	; (8019b70 <ip4_reass+0x304>)
 8019b26:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8019b2a:	4914      	ldr	r1, [pc, #80]	; (8019b7c <ip4_reass+0x310>)
 8019b2c:	4812      	ldr	r0, [pc, #72]	; (8019b78 <ip4_reass+0x30c>)
 8019b2e:	f000 febb 	bl	801a8a8 <iprintf>
  if (ipr->p == NULL) {
 8019b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b34:	685b      	ldr	r3, [r3, #4]
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d124      	bne.n	8019b84 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8019b3a:	4b0c      	ldr	r3, [pc, #48]	; (8019b6c <ip4_reass+0x300>)
 8019b3c:	681b      	ldr	r3, [r3, #0]
 8019b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019b40:	429a      	cmp	r2, r3
 8019b42:	d006      	beq.n	8019b52 <ip4_reass+0x2e6>
 8019b44:	4b0a      	ldr	r3, [pc, #40]	; (8019b70 <ip4_reass+0x304>)
 8019b46:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019b4a:	490d      	ldr	r1, [pc, #52]	; (8019b80 <ip4_reass+0x314>)
 8019b4c:	480a      	ldr	r0, [pc, #40]	; (8019b78 <ip4_reass+0x30c>)
 8019b4e:	f000 feab 	bl	801a8a8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8019b52:	2100      	movs	r1, #0
 8019b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019b56:	f7ff fcf1 	bl	801953c <ip_reass_dequeue_datagram>
 8019b5a:	e014      	b.n	8019b86 <ip4_reass+0x31a>
    goto nullreturn;
 8019b5c:	bf00      	nop
 8019b5e:	e012      	b.n	8019b86 <ip4_reass+0x31a>
    goto nullreturn;
 8019b60:	bf00      	nop
 8019b62:	e010      	b.n	8019b86 <ip4_reass+0x31a>
      goto nullreturn;
 8019b64:	bf00      	nop
 8019b66:	e00e      	b.n	8019b86 <ip4_reass+0x31a>
 8019b68:	200032b4 	.word	0x200032b4
 8019b6c:	200032b0 	.word	0x200032b0
 8019b70:	0801e610 	.word	0x0801e610
 8019b74:	0801e780 	.word	0x0801e780
 8019b78:	0801e658 	.word	0x0801e658
 8019b7c:	0801e79c 	.word	0x0801e79c
 8019b80:	0801e7a8 	.word	0x0801e7a8
  }

nullreturn:
 8019b84:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8019b86:	6878      	ldr	r0, [r7, #4]
 8019b88:	f7f8 f8d0 	bl	8011d2c <pbuf_free>
  return NULL;
 8019b8c:	2300      	movs	r3, #0
}
 8019b8e:	4618      	mov	r0, r3
 8019b90:	3738      	adds	r7, #56	; 0x38
 8019b92:	46bd      	mov	sp, r7
 8019b94:	bd80      	pop	{r7, pc}
 8019b96:	bf00      	nop

08019b98 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8019b98:	b580      	push	{r7, lr}
 8019b9a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8019b9c:	2005      	movs	r0, #5
 8019b9e:	f7f7 fa67 	bl	8011070 <memp_malloc>
 8019ba2:	4603      	mov	r3, r0
}
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	bd80      	pop	{r7, pc}

08019ba8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8019ba8:	b580      	push	{r7, lr}
 8019baa:	b082      	sub	sp, #8
 8019bac:	af00      	add	r7, sp, #0
 8019bae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d106      	bne.n	8019bc4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8019bb6:	4b07      	ldr	r3, [pc, #28]	; (8019bd4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8019bb8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8019bbc:	4906      	ldr	r1, [pc, #24]	; (8019bd8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8019bbe:	4807      	ldr	r0, [pc, #28]	; (8019bdc <ip_frag_free_pbuf_custom_ref+0x34>)
 8019bc0:	f000 fe72 	bl	801a8a8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019bc4:	6879      	ldr	r1, [r7, #4]
 8019bc6:	2005      	movs	r0, #5
 8019bc8:	f7f7 fa9e 	bl	8011108 <memp_free>
}
 8019bcc:	bf00      	nop
 8019bce:	3708      	adds	r7, #8
 8019bd0:	46bd      	mov	sp, r7
 8019bd2:	bd80      	pop	{r7, pc}
 8019bd4:	0801e610 	.word	0x0801e610
 8019bd8:	0801e7c8 	.word	0x0801e7c8
 8019bdc:	0801e658 	.word	0x0801e658

08019be0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019be0:	b580      	push	{r7, lr}
 8019be2:	b084      	sub	sp, #16
 8019be4:	af00      	add	r7, sp, #0
 8019be6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8019bec:	68fb      	ldr	r3, [r7, #12]
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d106      	bne.n	8019c00 <ipfrag_free_pbuf_custom+0x20>
 8019bf2:	4b11      	ldr	r3, [pc, #68]	; (8019c38 <ipfrag_free_pbuf_custom+0x58>)
 8019bf4:	f240 22ce 	movw	r2, #718	; 0x2ce
 8019bf8:	4910      	ldr	r1, [pc, #64]	; (8019c3c <ipfrag_free_pbuf_custom+0x5c>)
 8019bfa:	4811      	ldr	r0, [pc, #68]	; (8019c40 <ipfrag_free_pbuf_custom+0x60>)
 8019bfc:	f000 fe54 	bl	801a8a8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019c00:	68fa      	ldr	r2, [r7, #12]
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	429a      	cmp	r2, r3
 8019c06:	d006      	beq.n	8019c16 <ipfrag_free_pbuf_custom+0x36>
 8019c08:	4b0b      	ldr	r3, [pc, #44]	; (8019c38 <ipfrag_free_pbuf_custom+0x58>)
 8019c0a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8019c0e:	490d      	ldr	r1, [pc, #52]	; (8019c44 <ipfrag_free_pbuf_custom+0x64>)
 8019c10:	480b      	ldr	r0, [pc, #44]	; (8019c40 <ipfrag_free_pbuf_custom+0x60>)
 8019c12:	f000 fe49 	bl	801a8a8 <iprintf>
  if (pcr->original != NULL) {
 8019c16:	68fb      	ldr	r3, [r7, #12]
 8019c18:	695b      	ldr	r3, [r3, #20]
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	d004      	beq.n	8019c28 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8019c1e:	68fb      	ldr	r3, [r7, #12]
 8019c20:	695b      	ldr	r3, [r3, #20]
 8019c22:	4618      	mov	r0, r3
 8019c24:	f7f8 f882 	bl	8011d2c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8019c28:	68f8      	ldr	r0, [r7, #12]
 8019c2a:	f7ff ffbd 	bl	8019ba8 <ip_frag_free_pbuf_custom_ref>
}
 8019c2e:	bf00      	nop
 8019c30:	3710      	adds	r7, #16
 8019c32:	46bd      	mov	sp, r7
 8019c34:	bd80      	pop	{r7, pc}
 8019c36:	bf00      	nop
 8019c38:	0801e610 	.word	0x0801e610
 8019c3c:	0801e7d4 	.word	0x0801e7d4
 8019c40:	0801e658 	.word	0x0801e658
 8019c44:	0801e7e0 	.word	0x0801e7e0

08019c48 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8019c48:	b580      	push	{r7, lr}
 8019c4a:	b094      	sub	sp, #80	; 0x50
 8019c4c:	af02      	add	r7, sp, #8
 8019c4e:	60f8      	str	r0, [r7, #12]
 8019c50:	60b9      	str	r1, [r7, #8]
 8019c52:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8019c54:	2300      	movs	r3, #0
 8019c56:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8019c5a:	68bb      	ldr	r3, [r7, #8]
 8019c5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019c5e:	3b14      	subs	r3, #20
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	da00      	bge.n	8019c66 <ip4_frag+0x1e>
 8019c64:	3307      	adds	r3, #7
 8019c66:	10db      	asrs	r3, r3, #3
 8019c68:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8019c6a:	2314      	movs	r3, #20
 8019c6c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	685b      	ldr	r3, [r3, #4]
 8019c72:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8019c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019c76:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8019c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c7a:	781b      	ldrb	r3, [r3, #0]
 8019c7c:	f003 030f 	and.w	r3, r3, #15
 8019c80:	b2db      	uxtb	r3, r3
 8019c82:	009b      	lsls	r3, r3, #2
 8019c84:	b2db      	uxtb	r3, r3
 8019c86:	2b14      	cmp	r3, #20
 8019c88:	d002      	beq.n	8019c90 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8019c8a:	f06f 0305 	mvn.w	r3, #5
 8019c8e:	e110      	b.n	8019eb2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019c90:	68fb      	ldr	r3, [r7, #12]
 8019c92:	895b      	ldrh	r3, [r3, #10]
 8019c94:	2b13      	cmp	r3, #19
 8019c96:	d809      	bhi.n	8019cac <ip4_frag+0x64>
 8019c98:	4b88      	ldr	r3, [pc, #544]	; (8019ebc <ip4_frag+0x274>)
 8019c9a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8019c9e:	4988      	ldr	r1, [pc, #544]	; (8019ec0 <ip4_frag+0x278>)
 8019ca0:	4888      	ldr	r0, [pc, #544]	; (8019ec4 <ip4_frag+0x27c>)
 8019ca2:	f000 fe01 	bl	801a8a8 <iprintf>
 8019ca6:	f06f 0305 	mvn.w	r3, #5
 8019caa:	e102      	b.n	8019eb2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cae:	88db      	ldrh	r3, [r3, #6]
 8019cb0:	b29b      	uxth	r3, r3
 8019cb2:	4618      	mov	r0, r3
 8019cb4:	f7f6 fd87 	bl	80107c6 <lwip_htons>
 8019cb8:	4603      	mov	r3, r0
 8019cba:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8019cbc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019cbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019cc2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8019cc6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019ccc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019cce:	68fb      	ldr	r3, [r7, #12]
 8019cd0:	891b      	ldrh	r3, [r3, #8]
 8019cd2:	3b14      	subs	r3, #20
 8019cd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8019cd8:	e0e1      	b.n	8019e9e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8019cda:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019cdc:	00db      	lsls	r3, r3, #3
 8019cde:	b29b      	uxth	r3, r3
 8019ce0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019ce4:	4293      	cmp	r3, r2
 8019ce6:	bf28      	it	cs
 8019ce8:	4613      	movcs	r3, r2
 8019cea:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019cec:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019cf0:	2114      	movs	r1, #20
 8019cf2:	200e      	movs	r0, #14
 8019cf4:	f7f7 fd36 	bl	8011764 <pbuf_alloc>
 8019cf8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8019cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	f000 80d5 	beq.w	8019eac <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d04:	895b      	ldrh	r3, [r3, #10]
 8019d06:	2b13      	cmp	r3, #19
 8019d08:	d806      	bhi.n	8019d18 <ip4_frag+0xd0>
 8019d0a:	4b6c      	ldr	r3, [pc, #432]	; (8019ebc <ip4_frag+0x274>)
 8019d0c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8019d10:	496d      	ldr	r1, [pc, #436]	; (8019ec8 <ip4_frag+0x280>)
 8019d12:	486c      	ldr	r0, [pc, #432]	; (8019ec4 <ip4_frag+0x27c>)
 8019d14:	f000 fdc8 	bl	801a8a8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d1a:	685b      	ldr	r3, [r3, #4]
 8019d1c:	2214      	movs	r2, #20
 8019d1e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019d20:	4618      	mov	r0, r3
 8019d22:	f000 fd01 	bl	801a728 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8019d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d28:	685b      	ldr	r3, [r3, #4]
 8019d2a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8019d2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019d2e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8019d32:	e064      	b.n	8019dfe <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	895a      	ldrh	r2, [r3, #10]
 8019d38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019d3a:	1ad3      	subs	r3, r2, r3
 8019d3c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8019d3e:	68fb      	ldr	r3, [r7, #12]
 8019d40:	895b      	ldrh	r3, [r3, #10]
 8019d42:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019d44:	429a      	cmp	r2, r3
 8019d46:	d906      	bls.n	8019d56 <ip4_frag+0x10e>
 8019d48:	4b5c      	ldr	r3, [pc, #368]	; (8019ebc <ip4_frag+0x274>)
 8019d4a:	f240 322d 	movw	r2, #813	; 0x32d
 8019d4e:	495f      	ldr	r1, [pc, #380]	; (8019ecc <ip4_frag+0x284>)
 8019d50:	485c      	ldr	r0, [pc, #368]	; (8019ec4 <ip4_frag+0x27c>)
 8019d52:	f000 fda9 	bl	801a8a8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8019d56:	8bfa      	ldrh	r2, [r7, #30]
 8019d58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019d5c:	4293      	cmp	r3, r2
 8019d5e:	bf28      	it	cs
 8019d60:	4613      	movcs	r3, r2
 8019d62:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8019d66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	d105      	bne.n	8019d7a <ip4_frag+0x132>
        poff = 0;
 8019d6e:	2300      	movs	r3, #0
 8019d70:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019d72:	68fb      	ldr	r3, [r7, #12]
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	60fb      	str	r3, [r7, #12]
        continue;
 8019d78:	e041      	b.n	8019dfe <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8019d7a:	f7ff ff0d 	bl	8019b98 <ip_frag_alloc_pbuf_custom_ref>
 8019d7e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019d80:	69bb      	ldr	r3, [r7, #24]
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d103      	bne.n	8019d8e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8019d86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019d88:	f7f7 ffd0 	bl	8011d2c <pbuf_free>
        goto memerr;
 8019d8c:	e08f      	b.n	8019eae <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019d8e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019d90:	68fb      	ldr	r3, [r7, #12]
 8019d92:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019d94:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019d96:	4413      	add	r3, r2
 8019d98:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8019d9c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8019da0:	9201      	str	r2, [sp, #4]
 8019da2:	9300      	str	r3, [sp, #0]
 8019da4:	4603      	mov	r3, r0
 8019da6:	2241      	movs	r2, #65	; 0x41
 8019da8:	2000      	movs	r0, #0
 8019daa:	f7f7 fe05 	bl	80119b8 <pbuf_alloced_custom>
 8019dae:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019db0:	697b      	ldr	r3, [r7, #20]
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d106      	bne.n	8019dc4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8019db6:	69b8      	ldr	r0, [r7, #24]
 8019db8:	f7ff fef6 	bl	8019ba8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019dbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019dbe:	f7f7 ffb5 	bl	8011d2c <pbuf_free>
        goto memerr;
 8019dc2:	e074      	b.n	8019eae <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8019dc4:	68f8      	ldr	r0, [r7, #12]
 8019dc6:	f7f8 f851 	bl	8011e6c <pbuf_ref>
      pcr->original = p;
 8019dca:	69bb      	ldr	r3, [r7, #24]
 8019dcc:	68fa      	ldr	r2, [r7, #12]
 8019dce:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019dd0:	69bb      	ldr	r3, [r7, #24]
 8019dd2:	4a3f      	ldr	r2, [pc, #252]	; (8019ed0 <ip4_frag+0x288>)
 8019dd4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8019dd6:	6979      	ldr	r1, [r7, #20]
 8019dd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019dda:	f7f8 f869 	bl	8011eb0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8019dde:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8019de2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019de6:	1ad3      	subs	r3, r2, r3
 8019de8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8019dec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d004      	beq.n	8019dfe <ip4_frag+0x1b6>
        poff = 0;
 8019df4:	2300      	movs	r3, #0
 8019df6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019df8:	68fb      	ldr	r3, [r7, #12]
 8019dfa:	681b      	ldr	r3, [r3, #0]
 8019dfc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019dfe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d196      	bne.n	8019d34 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8019e06:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019e08:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019e0c:	4413      	add	r3, r2
 8019e0e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019e10:	68bb      	ldr	r3, [r7, #8]
 8019e12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019e14:	f1a3 0213 	sub.w	r2, r3, #19
 8019e18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019e1c:	429a      	cmp	r2, r3
 8019e1e:	bfcc      	ite	gt
 8019e20:	2301      	movgt	r3, #1
 8019e22:	2300      	movle	r3, #0
 8019e24:	b2db      	uxtb	r3, r3
 8019e26:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019e28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019e2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019e30:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8019e32:	6a3b      	ldr	r3, [r7, #32]
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d002      	beq.n	8019e3e <ip4_frag+0x1f6>
 8019e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d003      	beq.n	8019e46 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8019e3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019e40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019e44:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8019e46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019e48:	4618      	mov	r0, r3
 8019e4a:	f7f6 fcbc 	bl	80107c6 <lwip_htons>
 8019e4e:	4603      	mov	r3, r0
 8019e50:	461a      	mov	r2, r3
 8019e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e54:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8019e56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019e58:	3314      	adds	r3, #20
 8019e5a:	b29b      	uxth	r3, r3
 8019e5c:	4618      	mov	r0, r3
 8019e5e:	f7f6 fcb2 	bl	80107c6 <lwip_htons>
 8019e62:	4603      	mov	r3, r0
 8019e64:	461a      	mov	r2, r3
 8019e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e68:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8019e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e6c:	2200      	movs	r2, #0
 8019e6e:	729a      	strb	r2, [r3, #10]
 8019e70:	2200      	movs	r2, #0
 8019e72:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8019e74:	68bb      	ldr	r3, [r7, #8]
 8019e76:	695b      	ldr	r3, [r3, #20]
 8019e78:	687a      	ldr	r2, [r7, #4]
 8019e7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019e7c:	68b8      	ldr	r0, [r7, #8]
 8019e7e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019e80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019e82:	f7f7 ff53 	bl	8011d2c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8019e86:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019e8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019e8c:	1ad3      	subs	r3, r2, r3
 8019e8e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8019e92:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8019e96:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019e98:	4413      	add	r3, r2
 8019e9a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8019e9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	f47f af19 	bne.w	8019cda <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019ea8:	2300      	movs	r3, #0
 8019eaa:	e002      	b.n	8019eb2 <ip4_frag+0x26a>
      goto memerr;
 8019eac:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019eae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019eb2:	4618      	mov	r0, r3
 8019eb4:	3748      	adds	r7, #72	; 0x48
 8019eb6:	46bd      	mov	sp, r7
 8019eb8:	bd80      	pop	{r7, pc}
 8019eba:	bf00      	nop
 8019ebc:	0801e610 	.word	0x0801e610
 8019ec0:	0801e7ec 	.word	0x0801e7ec
 8019ec4:	0801e658 	.word	0x0801e658
 8019ec8:	0801e808 	.word	0x0801e808
 8019ecc:	0801e828 	.word	0x0801e828
 8019ed0:	08019be1 	.word	0x08019be1

08019ed4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019ed4:	b580      	push	{r7, lr}
 8019ed6:	b086      	sub	sp, #24
 8019ed8:	af00      	add	r7, sp, #0
 8019eda:	6078      	str	r0, [r7, #4]
 8019edc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019ede:	230e      	movs	r3, #14
 8019ee0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	895b      	ldrh	r3, [r3, #10]
 8019ee6:	2b0e      	cmp	r3, #14
 8019ee8:	d96e      	bls.n	8019fc8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	7bdb      	ldrb	r3, [r3, #15]
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d106      	bne.n	8019f00 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8019ef2:	683b      	ldr	r3, [r7, #0]
 8019ef4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019ef8:	3301      	adds	r3, #1
 8019efa:	b2da      	uxtb	r2, r3
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	685b      	ldr	r3, [r3, #4]
 8019f04:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019f06:	693b      	ldr	r3, [r7, #16]
 8019f08:	7b1a      	ldrb	r2, [r3, #12]
 8019f0a:	7b5b      	ldrb	r3, [r3, #13]
 8019f0c:	021b      	lsls	r3, r3, #8
 8019f0e:	4313      	orrs	r3, r2
 8019f10:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019f12:	693b      	ldr	r3, [r7, #16]
 8019f14:	781b      	ldrb	r3, [r3, #0]
 8019f16:	f003 0301 	and.w	r3, r3, #1
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	d023      	beq.n	8019f66 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019f1e:	693b      	ldr	r3, [r7, #16]
 8019f20:	781b      	ldrb	r3, [r3, #0]
 8019f22:	2b01      	cmp	r3, #1
 8019f24:	d10f      	bne.n	8019f46 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019f26:	693b      	ldr	r3, [r7, #16]
 8019f28:	785b      	ldrb	r3, [r3, #1]
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d11b      	bne.n	8019f66 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019f2e:	693b      	ldr	r3, [r7, #16]
 8019f30:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019f32:	2b5e      	cmp	r3, #94	; 0x5e
 8019f34:	d117      	bne.n	8019f66 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	7b5b      	ldrb	r3, [r3, #13]
 8019f3a:	f043 0310 	orr.w	r3, r3, #16
 8019f3e:	b2da      	uxtb	r2, r3
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	735a      	strb	r2, [r3, #13]
 8019f44:	e00f      	b.n	8019f66 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8019f46:	693b      	ldr	r3, [r7, #16]
 8019f48:	2206      	movs	r2, #6
 8019f4a:	4928      	ldr	r1, [pc, #160]	; (8019fec <ethernet_input+0x118>)
 8019f4c:	4618      	mov	r0, r3
 8019f4e:	f000 fbdd 	bl	801a70c <memcmp>
 8019f52:	4603      	mov	r3, r0
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d106      	bne.n	8019f66 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	7b5b      	ldrb	r3, [r3, #13]
 8019f5c:	f043 0308 	orr.w	r3, r3, #8
 8019f60:	b2da      	uxtb	r2, r3
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8019f66:	89fb      	ldrh	r3, [r7, #14]
 8019f68:	2b08      	cmp	r3, #8
 8019f6a:	d003      	beq.n	8019f74 <ethernet_input+0xa0>
 8019f6c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8019f70:	d014      	beq.n	8019f9c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8019f72:	e032      	b.n	8019fda <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019f74:	683b      	ldr	r3, [r7, #0]
 8019f76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019f7a:	f003 0308 	and.w	r3, r3, #8
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d024      	beq.n	8019fcc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019f82:	8afb      	ldrh	r3, [r7, #22]
 8019f84:	4619      	mov	r1, r3
 8019f86:	6878      	ldr	r0, [r7, #4]
 8019f88:	f7f7 fe4a 	bl	8011c20 <pbuf_remove_header>
 8019f8c:	4603      	mov	r3, r0
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d11e      	bne.n	8019fd0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8019f92:	6839      	ldr	r1, [r7, #0]
 8019f94:	6878      	ldr	r0, [r7, #4]
 8019f96:	f7fe ff27 	bl	8018de8 <ip4_input>
      break;
 8019f9a:	e013      	b.n	8019fc4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019f9c:	683b      	ldr	r3, [r7, #0]
 8019f9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019fa2:	f003 0308 	and.w	r3, r3, #8
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	d014      	beq.n	8019fd4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019faa:	8afb      	ldrh	r3, [r7, #22]
 8019fac:	4619      	mov	r1, r3
 8019fae:	6878      	ldr	r0, [r7, #4]
 8019fb0:	f7f7 fe36 	bl	8011c20 <pbuf_remove_header>
 8019fb4:	4603      	mov	r3, r0
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d10e      	bne.n	8019fd8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8019fba:	6839      	ldr	r1, [r7, #0]
 8019fbc:	6878      	ldr	r0, [r7, #4]
 8019fbe:	f7fe f8c7 	bl	8018150 <etharp_input>
      break;
 8019fc2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019fc4:	2300      	movs	r3, #0
 8019fc6:	e00c      	b.n	8019fe2 <ethernet_input+0x10e>
    goto free_and_return;
 8019fc8:	bf00      	nop
 8019fca:	e006      	b.n	8019fda <ethernet_input+0x106>
        goto free_and_return;
 8019fcc:	bf00      	nop
 8019fce:	e004      	b.n	8019fda <ethernet_input+0x106>
        goto free_and_return;
 8019fd0:	bf00      	nop
 8019fd2:	e002      	b.n	8019fda <ethernet_input+0x106>
        goto free_and_return;
 8019fd4:	bf00      	nop
 8019fd6:	e000      	b.n	8019fda <ethernet_input+0x106>
        goto free_and_return;
 8019fd8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019fda:	6878      	ldr	r0, [r7, #4]
 8019fdc:	f7f7 fea6 	bl	8011d2c <pbuf_free>
  return ERR_OK;
 8019fe0:	2300      	movs	r3, #0
}
 8019fe2:	4618      	mov	r0, r3
 8019fe4:	3718      	adds	r7, #24
 8019fe6:	46bd      	mov	sp, r7
 8019fe8:	bd80      	pop	{r7, pc}
 8019fea:	bf00      	nop
 8019fec:	08095328 	.word	0x08095328

08019ff0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019ff0:	b580      	push	{r7, lr}
 8019ff2:	b086      	sub	sp, #24
 8019ff4:	af00      	add	r7, sp, #0
 8019ff6:	60f8      	str	r0, [r7, #12]
 8019ff8:	60b9      	str	r1, [r7, #8]
 8019ffa:	607a      	str	r2, [r7, #4]
 8019ffc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019ffe:	8c3b      	ldrh	r3, [r7, #32]
 801a000:	4618      	mov	r0, r3
 801a002:	f7f6 fbe0 	bl	80107c6 <lwip_htons>
 801a006:	4603      	mov	r3, r0
 801a008:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a00a:	210e      	movs	r1, #14
 801a00c:	68b8      	ldr	r0, [r7, #8]
 801a00e:	f7f7 fdf7 	bl	8011c00 <pbuf_add_header>
 801a012:	4603      	mov	r3, r0
 801a014:	2b00      	cmp	r3, #0
 801a016:	d125      	bne.n	801a064 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a018:	68bb      	ldr	r3, [r7, #8]
 801a01a:	685b      	ldr	r3, [r3, #4]
 801a01c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a01e:	693b      	ldr	r3, [r7, #16]
 801a020:	8afa      	ldrh	r2, [r7, #22]
 801a022:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a024:	693b      	ldr	r3, [r7, #16]
 801a026:	2206      	movs	r2, #6
 801a028:	6839      	ldr	r1, [r7, #0]
 801a02a:	4618      	mov	r0, r3
 801a02c:	f000 fb7c 	bl	801a728 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a030:	693b      	ldr	r3, [r7, #16]
 801a032:	3306      	adds	r3, #6
 801a034:	2206      	movs	r2, #6
 801a036:	6879      	ldr	r1, [r7, #4]
 801a038:	4618      	mov	r0, r3
 801a03a:	f000 fb75 	bl	801a728 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a03e:	68fb      	ldr	r3, [r7, #12]
 801a040:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a044:	2b06      	cmp	r3, #6
 801a046:	d006      	beq.n	801a056 <ethernet_output+0x66>
 801a048:	4b0a      	ldr	r3, [pc, #40]	; (801a074 <ethernet_output+0x84>)
 801a04a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801a04e:	490a      	ldr	r1, [pc, #40]	; (801a078 <ethernet_output+0x88>)
 801a050:	480a      	ldr	r0, [pc, #40]	; (801a07c <ethernet_output+0x8c>)
 801a052:	f000 fc29 	bl	801a8a8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a056:	68fb      	ldr	r3, [r7, #12]
 801a058:	699b      	ldr	r3, [r3, #24]
 801a05a:	68b9      	ldr	r1, [r7, #8]
 801a05c:	68f8      	ldr	r0, [r7, #12]
 801a05e:	4798      	blx	r3
 801a060:	4603      	mov	r3, r0
 801a062:	e002      	b.n	801a06a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a064:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a066:	f06f 0301 	mvn.w	r3, #1
}
 801a06a:	4618      	mov	r0, r3
 801a06c:	3718      	adds	r7, #24
 801a06e:	46bd      	mov	sp, r7
 801a070:	bd80      	pop	{r7, pc}
 801a072:	bf00      	nop
 801a074:	0801e838 	.word	0x0801e838
 801a078:	0801e870 	.word	0x0801e870
 801a07c:	0801e8a4 	.word	0x0801e8a4

0801a080 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801a080:	b580      	push	{r7, lr}
 801a082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801a084:	2201      	movs	r2, #1
 801a086:	490e      	ldr	r1, [pc, #56]	; (801a0c0 <MX_USB_HOST_Init+0x40>)
 801a088:	480e      	ldr	r0, [pc, #56]	; (801a0c4 <MX_USB_HOST_Init+0x44>)
 801a08a:	f7f2 f9b1 	bl	800c3f0 <USBH_Init>
 801a08e:	4603      	mov	r3, r0
 801a090:	2b00      	cmp	r3, #0
 801a092:	d001      	beq.n	801a098 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801a094:	f7e7 f816 	bl	80010c4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 801a098:	490b      	ldr	r1, [pc, #44]	; (801a0c8 <MX_USB_HOST_Init+0x48>)
 801a09a:	480a      	ldr	r0, [pc, #40]	; (801a0c4 <MX_USB_HOST_Init+0x44>)
 801a09c:	f7f2 fa44 	bl	800c528 <USBH_RegisterClass>
 801a0a0:	4603      	mov	r3, r0
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	d001      	beq.n	801a0aa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801a0a6:	f7e7 f80d 	bl	80010c4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801a0aa:	4806      	ldr	r0, [pc, #24]	; (801a0c4 <MX_USB_HOST_Init+0x44>)
 801a0ac:	f7f2 fb2a 	bl	800c704 <USBH_Start>
 801a0b0:	4603      	mov	r3, r0
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	d001      	beq.n	801a0ba <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801a0b6:	f7e7 f805 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801a0ba:	bf00      	nop
 801a0bc:	bd80      	pop	{r7, pc}
 801a0be:	bf00      	nop
 801a0c0:	0801a0e1 	.word	0x0801a0e1
 801a0c4:	2000dc9c 	.word	0x2000dc9c
 801a0c8:	20000024 	.word	0x20000024

0801a0cc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 801a0cc:	b580      	push	{r7, lr}
 801a0ce:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 801a0d0:	4802      	ldr	r0, [pc, #8]	; (801a0dc <MX_USB_HOST_Process+0x10>)
 801a0d2:	f7f2 fb27 	bl	800c724 <USBH_Process>
}
 801a0d6:	bf00      	nop
 801a0d8:	bd80      	pop	{r7, pc}
 801a0da:	bf00      	nop
 801a0dc:	2000dc9c 	.word	0x2000dc9c

0801a0e0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801a0e0:	b480      	push	{r7}
 801a0e2:	b083      	sub	sp, #12
 801a0e4:	af00      	add	r7, sp, #0
 801a0e6:	6078      	str	r0, [r7, #4]
 801a0e8:	460b      	mov	r3, r1
 801a0ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801a0ec:	78fb      	ldrb	r3, [r7, #3]
 801a0ee:	3b01      	subs	r3, #1
 801a0f0:	2b04      	cmp	r3, #4
 801a0f2:	d819      	bhi.n	801a128 <USBH_UserProcess+0x48>
 801a0f4:	a201      	add	r2, pc, #4	; (adr r2, 801a0fc <USBH_UserProcess+0x1c>)
 801a0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a0fa:	bf00      	nop
 801a0fc:	0801a129 	.word	0x0801a129
 801a100:	0801a119 	.word	0x0801a119
 801a104:	0801a129 	.word	0x0801a129
 801a108:	0801a121 	.word	0x0801a121
 801a10c:	0801a111 	.word	0x0801a111
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801a110:	4b09      	ldr	r3, [pc, #36]	; (801a138 <USBH_UserProcess+0x58>)
 801a112:	2203      	movs	r2, #3
 801a114:	701a      	strb	r2, [r3, #0]
  break;
 801a116:	e008      	b.n	801a12a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801a118:	4b07      	ldr	r3, [pc, #28]	; (801a138 <USBH_UserProcess+0x58>)
 801a11a:	2202      	movs	r2, #2
 801a11c:	701a      	strb	r2, [r3, #0]
  break;
 801a11e:	e004      	b.n	801a12a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801a120:	4b05      	ldr	r3, [pc, #20]	; (801a138 <USBH_UserProcess+0x58>)
 801a122:	2201      	movs	r2, #1
 801a124:	701a      	strb	r2, [r3, #0]
  break;
 801a126:	e000      	b.n	801a12a <USBH_UserProcess+0x4a>

  default:
  break;
 801a128:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801a12a:	bf00      	nop
 801a12c:	370c      	adds	r7, #12
 801a12e:	46bd      	mov	sp, r7
 801a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a134:	4770      	bx	lr
 801a136:	bf00      	nop
 801a138:	200032b6 	.word	0x200032b6

0801a13c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801a13c:	b580      	push	{r7, lr}
 801a13e:	b08a      	sub	sp, #40	; 0x28
 801a140:	af00      	add	r7, sp, #0
 801a142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a144:	f107 0314 	add.w	r3, r7, #20
 801a148:	2200      	movs	r2, #0
 801a14a:	601a      	str	r2, [r3, #0]
 801a14c:	605a      	str	r2, [r3, #4]
 801a14e:	609a      	str	r2, [r3, #8]
 801a150:	60da      	str	r2, [r3, #12]
 801a152:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	681b      	ldr	r3, [r3, #0]
 801a158:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a15c:	d147      	bne.n	801a1ee <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a15e:	2300      	movs	r3, #0
 801a160:	613b      	str	r3, [r7, #16]
 801a162:	4b25      	ldr	r3, [pc, #148]	; (801a1f8 <HAL_HCD_MspInit+0xbc>)
 801a164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a166:	4a24      	ldr	r2, [pc, #144]	; (801a1f8 <HAL_HCD_MspInit+0xbc>)
 801a168:	f043 0301 	orr.w	r3, r3, #1
 801a16c:	6313      	str	r3, [r2, #48]	; 0x30
 801a16e:	4b22      	ldr	r3, [pc, #136]	; (801a1f8 <HAL_HCD_MspInit+0xbc>)
 801a170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a172:	f003 0301 	and.w	r3, r3, #1
 801a176:	613b      	str	r3, [r7, #16]
 801a178:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801a17a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a17e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801a180:	2300      	movs	r3, #0
 801a182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a184:	2300      	movs	r3, #0
 801a186:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a188:	f107 0314 	add.w	r3, r7, #20
 801a18c:	4619      	mov	r1, r3
 801a18e:	481b      	ldr	r0, [pc, #108]	; (801a1fc <HAL_HCD_MspInit+0xc0>)
 801a190:	f7ea fb9c 	bl	80048cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801a194:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801a198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a19a:	2302      	movs	r3, #2
 801a19c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a19e:	2300      	movs	r3, #0
 801a1a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a1a2:	2303      	movs	r3, #3
 801a1a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801a1a6:	230a      	movs	r3, #10
 801a1a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a1aa:	f107 0314 	add.w	r3, r7, #20
 801a1ae:	4619      	mov	r1, r3
 801a1b0:	4812      	ldr	r0, [pc, #72]	; (801a1fc <HAL_HCD_MspInit+0xc0>)
 801a1b2:	f7ea fb8b 	bl	80048cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801a1b6:	4b10      	ldr	r3, [pc, #64]	; (801a1f8 <HAL_HCD_MspInit+0xbc>)
 801a1b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a1ba:	4a0f      	ldr	r2, [pc, #60]	; (801a1f8 <HAL_HCD_MspInit+0xbc>)
 801a1bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a1c0:	6353      	str	r3, [r2, #52]	; 0x34
 801a1c2:	2300      	movs	r3, #0
 801a1c4:	60fb      	str	r3, [r7, #12]
 801a1c6:	4b0c      	ldr	r3, [pc, #48]	; (801a1f8 <HAL_HCD_MspInit+0xbc>)
 801a1c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a1ca:	4a0b      	ldr	r2, [pc, #44]	; (801a1f8 <HAL_HCD_MspInit+0xbc>)
 801a1cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801a1d0:	6453      	str	r3, [r2, #68]	; 0x44
 801a1d2:	4b09      	ldr	r3, [pc, #36]	; (801a1f8 <HAL_HCD_MspInit+0xbc>)
 801a1d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a1d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a1da:	60fb      	str	r3, [r7, #12]
 801a1dc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 801a1de:	2200      	movs	r2, #0
 801a1e0:	2101      	movs	r1, #1
 801a1e2:	2043      	movs	r0, #67	; 0x43
 801a1e4:	f7e7 fcc7 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801a1e8:	2043      	movs	r0, #67	; 0x43
 801a1ea:	f7e7 fce0 	bl	8001bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801a1ee:	bf00      	nop
 801a1f0:	3728      	adds	r7, #40	; 0x28
 801a1f2:	46bd      	mov	sp, r7
 801a1f4:	bd80      	pop	{r7, pc}
 801a1f6:	bf00      	nop
 801a1f8:	40023800 	.word	0x40023800
 801a1fc:	40020000 	.word	0x40020000

0801a200 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801a200:	b580      	push	{r7, lr}
 801a202:	b082      	sub	sp, #8
 801a204:	af00      	add	r7, sp, #0
 801a206:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801a20e:	4618      	mov	r0, r3
 801a210:	f7f2 ffa7 	bl	800d162 <USBH_LL_IncTimer>
}
 801a214:	bf00      	nop
 801a216:	3708      	adds	r7, #8
 801a218:	46bd      	mov	sp, r7
 801a21a:	bd80      	pop	{r7, pc}

0801a21c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801a21c:	b580      	push	{r7, lr}
 801a21e:	b082      	sub	sp, #8
 801a220:	af00      	add	r7, sp, #0
 801a222:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801a22a:	4618      	mov	r0, r3
 801a22c:	f7f2 ffdf 	bl	800d1ee <USBH_LL_Connect>
}
 801a230:	bf00      	nop
 801a232:	3708      	adds	r7, #8
 801a234:	46bd      	mov	sp, r7
 801a236:	bd80      	pop	{r7, pc}

0801a238 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801a238:	b580      	push	{r7, lr}
 801a23a:	b082      	sub	sp, #8
 801a23c:	af00      	add	r7, sp, #0
 801a23e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801a246:	4618      	mov	r0, r3
 801a248:	f7f2 ffe8 	bl	800d21c <USBH_LL_Disconnect>
}
 801a24c:	bf00      	nop
 801a24e:	3708      	adds	r7, #8
 801a250:	46bd      	mov	sp, r7
 801a252:	bd80      	pop	{r7, pc}

0801a254 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801a254:	b480      	push	{r7}
 801a256:	b083      	sub	sp, #12
 801a258:	af00      	add	r7, sp, #0
 801a25a:	6078      	str	r0, [r7, #4]
 801a25c:	460b      	mov	r3, r1
 801a25e:	70fb      	strb	r3, [r7, #3]
 801a260:	4613      	mov	r3, r2
 801a262:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801a264:	bf00      	nop
 801a266:	370c      	adds	r7, #12
 801a268:	46bd      	mov	sp, r7
 801a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a26e:	4770      	bx	lr

0801a270 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801a270:	b580      	push	{r7, lr}
 801a272:	b082      	sub	sp, #8
 801a274:	af00      	add	r7, sp, #0
 801a276:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801a27e:	4618      	mov	r0, r3
 801a280:	f7f2 ff99 	bl	800d1b6 <USBH_LL_PortEnabled>
}
 801a284:	bf00      	nop
 801a286:	3708      	adds	r7, #8
 801a288:	46bd      	mov	sp, r7
 801a28a:	bd80      	pop	{r7, pc}

0801a28c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801a28c:	b580      	push	{r7, lr}
 801a28e:	b082      	sub	sp, #8
 801a290:	af00      	add	r7, sp, #0
 801a292:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801a29a:	4618      	mov	r0, r3
 801a29c:	f7f2 ff99 	bl	800d1d2 <USBH_LL_PortDisabled>
}
 801a2a0:	bf00      	nop
 801a2a2:	3708      	adds	r7, #8
 801a2a4:	46bd      	mov	sp, r7
 801a2a6:	bd80      	pop	{r7, pc}

0801a2a8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801a2a8:	b580      	push	{r7, lr}
 801a2aa:	b082      	sub	sp, #8
 801a2ac:	af00      	add	r7, sp, #0
 801a2ae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801a2b6:	2b01      	cmp	r3, #1
 801a2b8:	d12a      	bne.n	801a310 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801a2ba:	4a18      	ldr	r2, [pc, #96]	; (801a31c <USBH_LL_Init+0x74>)
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	4a15      	ldr	r2, [pc, #84]	; (801a31c <USBH_LL_Init+0x74>)
 801a2c6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801a2ca:	4b14      	ldr	r3, [pc, #80]	; (801a31c <USBH_LL_Init+0x74>)
 801a2cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801a2d0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801a2d2:	4b12      	ldr	r3, [pc, #72]	; (801a31c <USBH_LL_Init+0x74>)
 801a2d4:	2208      	movs	r2, #8
 801a2d6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801a2d8:	4b10      	ldr	r3, [pc, #64]	; (801a31c <USBH_LL_Init+0x74>)
 801a2da:	2201      	movs	r2, #1
 801a2dc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801a2de:	4b0f      	ldr	r3, [pc, #60]	; (801a31c <USBH_LL_Init+0x74>)
 801a2e0:	2200      	movs	r2, #0
 801a2e2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801a2e4:	4b0d      	ldr	r3, [pc, #52]	; (801a31c <USBH_LL_Init+0x74>)
 801a2e6:	2202      	movs	r2, #2
 801a2e8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801a2ea:	4b0c      	ldr	r3, [pc, #48]	; (801a31c <USBH_LL_Init+0x74>)
 801a2ec:	2200      	movs	r2, #0
 801a2ee:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801a2f0:	480a      	ldr	r0, [pc, #40]	; (801a31c <USBH_LL_Init+0x74>)
 801a2f2:	f7ea fc87 	bl	8004c04 <HAL_HCD_Init>
 801a2f6:	4603      	mov	r3, r0
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d001      	beq.n	801a300 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801a2fc:	f7e6 fee2 	bl	80010c4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801a300:	4806      	ldr	r0, [pc, #24]	; (801a31c <USBH_LL_Init+0x74>)
 801a302:	f7eb f86a 	bl	80053da <HAL_HCD_GetCurrentFrame>
 801a306:	4603      	mov	r3, r0
 801a308:	4619      	mov	r1, r3
 801a30a:	6878      	ldr	r0, [r7, #4]
 801a30c:	f7f2 ff1a 	bl	800d144 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801a310:	2300      	movs	r3, #0
}
 801a312:	4618      	mov	r0, r3
 801a314:	3708      	adds	r7, #8
 801a316:	46bd      	mov	sp, r7
 801a318:	bd80      	pop	{r7, pc}
 801a31a:	bf00      	nop
 801a31c:	2000e074 	.word	0x2000e074

0801a320 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801a320:	b580      	push	{r7, lr}
 801a322:	b084      	sub	sp, #16
 801a324:	af00      	add	r7, sp, #0
 801a326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a328:	2300      	movs	r3, #0
 801a32a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a32c:	2300      	movs	r3, #0
 801a32e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a336:	4618      	mov	r0, r3
 801a338:	f7ea ffd9 	bl	80052ee <HAL_HCD_Start>
 801a33c:	4603      	mov	r3, r0
 801a33e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801a340:	7bfb      	ldrb	r3, [r7, #15]
 801a342:	4618      	mov	r0, r3
 801a344:	f000 f982 	bl	801a64c <USBH_Get_USB_Status>
 801a348:	4603      	mov	r3, r0
 801a34a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a34c:	7bbb      	ldrb	r3, [r7, #14]
}
 801a34e:	4618      	mov	r0, r3
 801a350:	3710      	adds	r7, #16
 801a352:	46bd      	mov	sp, r7
 801a354:	bd80      	pop	{r7, pc}

0801a356 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801a356:	b580      	push	{r7, lr}
 801a358:	b084      	sub	sp, #16
 801a35a:	af00      	add	r7, sp, #0
 801a35c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a35e:	2300      	movs	r3, #0
 801a360:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a362:	2300      	movs	r3, #0
 801a364:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a36c:	4618      	mov	r0, r3
 801a36e:	f7ea ffe1 	bl	8005334 <HAL_HCD_Stop>
 801a372:	4603      	mov	r3, r0
 801a374:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801a376:	7bfb      	ldrb	r3, [r7, #15]
 801a378:	4618      	mov	r0, r3
 801a37a:	f000 f967 	bl	801a64c <USBH_Get_USB_Status>
 801a37e:	4603      	mov	r3, r0
 801a380:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a382:	7bbb      	ldrb	r3, [r7, #14]
}
 801a384:	4618      	mov	r0, r3
 801a386:	3710      	adds	r7, #16
 801a388:	46bd      	mov	sp, r7
 801a38a:	bd80      	pop	{r7, pc}

0801a38c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801a38c:	b580      	push	{r7, lr}
 801a38e:	b084      	sub	sp, #16
 801a390:	af00      	add	r7, sp, #0
 801a392:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801a394:	2301      	movs	r3, #1
 801a396:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a39e:	4618      	mov	r0, r3
 801a3a0:	f7eb f829 	bl	80053f6 <HAL_HCD_GetCurrentSpeed>
 801a3a4:	4603      	mov	r3, r0
 801a3a6:	2b02      	cmp	r3, #2
 801a3a8:	d00c      	beq.n	801a3c4 <USBH_LL_GetSpeed+0x38>
 801a3aa:	2b02      	cmp	r3, #2
 801a3ac:	d80d      	bhi.n	801a3ca <USBH_LL_GetSpeed+0x3e>
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d002      	beq.n	801a3b8 <USBH_LL_GetSpeed+0x2c>
 801a3b2:	2b01      	cmp	r3, #1
 801a3b4:	d003      	beq.n	801a3be <USBH_LL_GetSpeed+0x32>
 801a3b6:	e008      	b.n	801a3ca <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801a3b8:	2300      	movs	r3, #0
 801a3ba:	73fb      	strb	r3, [r7, #15]
    break;
 801a3bc:	e008      	b.n	801a3d0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801a3be:	2301      	movs	r3, #1
 801a3c0:	73fb      	strb	r3, [r7, #15]
    break;
 801a3c2:	e005      	b.n	801a3d0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801a3c4:	2302      	movs	r3, #2
 801a3c6:	73fb      	strb	r3, [r7, #15]
    break;
 801a3c8:	e002      	b.n	801a3d0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801a3ca:	2301      	movs	r3, #1
 801a3cc:	73fb      	strb	r3, [r7, #15]
    break;
 801a3ce:	bf00      	nop
  }
  return  speed;
 801a3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 801a3d2:	4618      	mov	r0, r3
 801a3d4:	3710      	adds	r7, #16
 801a3d6:	46bd      	mov	sp, r7
 801a3d8:	bd80      	pop	{r7, pc}

0801a3da <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801a3da:	b580      	push	{r7, lr}
 801a3dc:	b084      	sub	sp, #16
 801a3de:	af00      	add	r7, sp, #0
 801a3e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a3e2:	2300      	movs	r3, #0
 801a3e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a3e6:	2300      	movs	r3, #0
 801a3e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a3f0:	4618      	mov	r0, r3
 801a3f2:	f7ea ffbc 	bl	800536e <HAL_HCD_ResetPort>
 801a3f6:	4603      	mov	r3, r0
 801a3f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801a3fa:	7bfb      	ldrb	r3, [r7, #15]
 801a3fc:	4618      	mov	r0, r3
 801a3fe:	f000 f925 	bl	801a64c <USBH_Get_USB_Status>
 801a402:	4603      	mov	r3, r0
 801a404:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a406:	7bbb      	ldrb	r3, [r7, #14]
}
 801a408:	4618      	mov	r0, r3
 801a40a:	3710      	adds	r7, #16
 801a40c:	46bd      	mov	sp, r7
 801a40e:	bd80      	pop	{r7, pc}

0801a410 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801a410:	b580      	push	{r7, lr}
 801a412:	b082      	sub	sp, #8
 801a414:	af00      	add	r7, sp, #0
 801a416:	6078      	str	r0, [r7, #4]
 801a418:	460b      	mov	r3, r1
 801a41a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a422:	78fa      	ldrb	r2, [r7, #3]
 801a424:	4611      	mov	r1, r2
 801a426:	4618      	mov	r0, r3
 801a428:	f7ea ffc3 	bl	80053b2 <HAL_HCD_HC_GetXferCount>
 801a42c:	4603      	mov	r3, r0
}
 801a42e:	4618      	mov	r0, r3
 801a430:	3708      	adds	r7, #8
 801a432:	46bd      	mov	sp, r7
 801a434:	bd80      	pop	{r7, pc}

0801a436 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801a436:	b590      	push	{r4, r7, lr}
 801a438:	b089      	sub	sp, #36	; 0x24
 801a43a:	af04      	add	r7, sp, #16
 801a43c:	6078      	str	r0, [r7, #4]
 801a43e:	4608      	mov	r0, r1
 801a440:	4611      	mov	r1, r2
 801a442:	461a      	mov	r2, r3
 801a444:	4603      	mov	r3, r0
 801a446:	70fb      	strb	r3, [r7, #3]
 801a448:	460b      	mov	r3, r1
 801a44a:	70bb      	strb	r3, [r7, #2]
 801a44c:	4613      	mov	r3, r2
 801a44e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a450:	2300      	movs	r3, #0
 801a452:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a454:	2300      	movs	r3, #0
 801a456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801a45e:	787c      	ldrb	r4, [r7, #1]
 801a460:	78ba      	ldrb	r2, [r7, #2]
 801a462:	78f9      	ldrb	r1, [r7, #3]
 801a464:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a466:	9302      	str	r3, [sp, #8]
 801a468:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a46c:	9301      	str	r3, [sp, #4]
 801a46e:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a472:	9300      	str	r3, [sp, #0]
 801a474:	4623      	mov	r3, r4
 801a476:	f7ea fc27 	bl	8004cc8 <HAL_HCD_HC_Init>
 801a47a:	4603      	mov	r3, r0
 801a47c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801a47e:	7bfb      	ldrb	r3, [r7, #15]
 801a480:	4618      	mov	r0, r3
 801a482:	f000 f8e3 	bl	801a64c <USBH_Get_USB_Status>
 801a486:	4603      	mov	r3, r0
 801a488:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a48a:	7bbb      	ldrb	r3, [r7, #14]
}
 801a48c:	4618      	mov	r0, r3
 801a48e:	3714      	adds	r7, #20
 801a490:	46bd      	mov	sp, r7
 801a492:	bd90      	pop	{r4, r7, pc}

0801a494 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801a494:	b580      	push	{r7, lr}
 801a496:	b084      	sub	sp, #16
 801a498:	af00      	add	r7, sp, #0
 801a49a:	6078      	str	r0, [r7, #4]
 801a49c:	460b      	mov	r3, r1
 801a49e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a4a0:	2300      	movs	r3, #0
 801a4a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a4a4:	2300      	movs	r3, #0
 801a4a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a4ae:	78fa      	ldrb	r2, [r7, #3]
 801a4b0:	4611      	mov	r1, r2
 801a4b2:	4618      	mov	r0, r3
 801a4b4:	f7ea fc97 	bl	8004de6 <HAL_HCD_HC_Halt>
 801a4b8:	4603      	mov	r3, r0
 801a4ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801a4bc:	7bfb      	ldrb	r3, [r7, #15]
 801a4be:	4618      	mov	r0, r3
 801a4c0:	f000 f8c4 	bl	801a64c <USBH_Get_USB_Status>
 801a4c4:	4603      	mov	r3, r0
 801a4c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a4c8:	7bbb      	ldrb	r3, [r7, #14]
}
 801a4ca:	4618      	mov	r0, r3
 801a4cc:	3710      	adds	r7, #16
 801a4ce:	46bd      	mov	sp, r7
 801a4d0:	bd80      	pop	{r7, pc}

0801a4d2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801a4d2:	b590      	push	{r4, r7, lr}
 801a4d4:	b089      	sub	sp, #36	; 0x24
 801a4d6:	af04      	add	r7, sp, #16
 801a4d8:	6078      	str	r0, [r7, #4]
 801a4da:	4608      	mov	r0, r1
 801a4dc:	4611      	mov	r1, r2
 801a4de:	461a      	mov	r2, r3
 801a4e0:	4603      	mov	r3, r0
 801a4e2:	70fb      	strb	r3, [r7, #3]
 801a4e4:	460b      	mov	r3, r1
 801a4e6:	70bb      	strb	r3, [r7, #2]
 801a4e8:	4613      	mov	r3, r2
 801a4ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a4ec:	2300      	movs	r3, #0
 801a4ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a4f0:	2300      	movs	r3, #0
 801a4f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801a4fa:	787c      	ldrb	r4, [r7, #1]
 801a4fc:	78ba      	ldrb	r2, [r7, #2]
 801a4fe:	78f9      	ldrb	r1, [r7, #3]
 801a500:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a504:	9303      	str	r3, [sp, #12]
 801a506:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a508:	9302      	str	r3, [sp, #8]
 801a50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a50c:	9301      	str	r3, [sp, #4]
 801a50e:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a512:	9300      	str	r3, [sp, #0]
 801a514:	4623      	mov	r3, r4
 801a516:	f7ea fc89 	bl	8004e2c <HAL_HCD_HC_SubmitRequest>
 801a51a:	4603      	mov	r3, r0
 801a51c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801a51e:	7bfb      	ldrb	r3, [r7, #15]
 801a520:	4618      	mov	r0, r3
 801a522:	f000 f893 	bl	801a64c <USBH_Get_USB_Status>
 801a526:	4603      	mov	r3, r0
 801a528:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a52a:	7bbb      	ldrb	r3, [r7, #14]
}
 801a52c:	4618      	mov	r0, r3
 801a52e:	3714      	adds	r7, #20
 801a530:	46bd      	mov	sp, r7
 801a532:	bd90      	pop	{r4, r7, pc}

0801a534 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801a534:	b580      	push	{r7, lr}
 801a536:	b082      	sub	sp, #8
 801a538:	af00      	add	r7, sp, #0
 801a53a:	6078      	str	r0, [r7, #4]
 801a53c:	460b      	mov	r3, r1
 801a53e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a546:	78fa      	ldrb	r2, [r7, #3]
 801a548:	4611      	mov	r1, r2
 801a54a:	4618      	mov	r0, r3
 801a54c:	f7ea ff1d 	bl	800538a <HAL_HCD_HC_GetURBState>
 801a550:	4603      	mov	r3, r0
}
 801a552:	4618      	mov	r0, r3
 801a554:	3708      	adds	r7, #8
 801a556:	46bd      	mov	sp, r7
 801a558:	bd80      	pop	{r7, pc}

0801a55a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801a55a:	b580      	push	{r7, lr}
 801a55c:	b082      	sub	sp, #8
 801a55e:	af00      	add	r7, sp, #0
 801a560:	6078      	str	r0, [r7, #4]
 801a562:	460b      	mov	r3, r1
 801a564:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 801a566:	20c8      	movs	r0, #200	; 0xc8
 801a568:	f7e7 fa06 	bl	8001978 <HAL_Delay>
  return USBH_OK;
 801a56c:	2300      	movs	r3, #0
}
 801a56e:	4618      	mov	r0, r3
 801a570:	3708      	adds	r7, #8
 801a572:	46bd      	mov	sp, r7
 801a574:	bd80      	pop	{r7, pc}

0801a576 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801a576:	b480      	push	{r7}
 801a578:	b085      	sub	sp, #20
 801a57a:	af00      	add	r7, sp, #0
 801a57c:	6078      	str	r0, [r7, #4]
 801a57e:	460b      	mov	r3, r1
 801a580:	70fb      	strb	r3, [r7, #3]
 801a582:	4613      	mov	r3, r2
 801a584:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a58c:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801a58e:	78fb      	ldrb	r3, [r7, #3]
 801a590:	68fa      	ldr	r2, [r7, #12]
 801a592:	212c      	movs	r1, #44	; 0x2c
 801a594:	fb01 f303 	mul.w	r3, r1, r3
 801a598:	4413      	add	r3, r2
 801a59a:	333b      	adds	r3, #59	; 0x3b
 801a59c:	781b      	ldrb	r3, [r3, #0]
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	d009      	beq.n	801a5b6 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801a5a2:	78fb      	ldrb	r3, [r7, #3]
 801a5a4:	68fa      	ldr	r2, [r7, #12]
 801a5a6:	212c      	movs	r1, #44	; 0x2c
 801a5a8:	fb01 f303 	mul.w	r3, r1, r3
 801a5ac:	4413      	add	r3, r2
 801a5ae:	3354      	adds	r3, #84	; 0x54
 801a5b0:	78ba      	ldrb	r2, [r7, #2]
 801a5b2:	701a      	strb	r2, [r3, #0]
 801a5b4:	e008      	b.n	801a5c8 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801a5b6:	78fb      	ldrb	r3, [r7, #3]
 801a5b8:	68fa      	ldr	r2, [r7, #12]
 801a5ba:	212c      	movs	r1, #44	; 0x2c
 801a5bc:	fb01 f303 	mul.w	r3, r1, r3
 801a5c0:	4413      	add	r3, r2
 801a5c2:	3355      	adds	r3, #85	; 0x55
 801a5c4:	78ba      	ldrb	r2, [r7, #2]
 801a5c6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801a5c8:	2300      	movs	r3, #0
}
 801a5ca:	4618      	mov	r0, r3
 801a5cc:	3714      	adds	r7, #20
 801a5ce:	46bd      	mov	sp, r7
 801a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5d4:	4770      	bx	lr

0801a5d6 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801a5d6:	b480      	push	{r7}
 801a5d8:	b085      	sub	sp, #20
 801a5da:	af00      	add	r7, sp, #0
 801a5dc:	6078      	str	r0, [r7, #4]
 801a5de:	460b      	mov	r3, r1
 801a5e0:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 801a5e2:	2300      	movs	r3, #0
 801a5e4:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a5ec:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 801a5ee:	78fb      	ldrb	r3, [r7, #3]
 801a5f0:	68ba      	ldr	r2, [r7, #8]
 801a5f2:	212c      	movs	r1, #44	; 0x2c
 801a5f4:	fb01 f303 	mul.w	r3, r1, r3
 801a5f8:	4413      	add	r3, r2
 801a5fa:	333b      	adds	r3, #59	; 0x3b
 801a5fc:	781b      	ldrb	r3, [r3, #0]
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d009      	beq.n	801a616 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 801a602:	78fb      	ldrb	r3, [r7, #3]
 801a604:	68ba      	ldr	r2, [r7, #8]
 801a606:	212c      	movs	r1, #44	; 0x2c
 801a608:	fb01 f303 	mul.w	r3, r1, r3
 801a60c:	4413      	add	r3, r2
 801a60e:	3354      	adds	r3, #84	; 0x54
 801a610:	781b      	ldrb	r3, [r3, #0]
 801a612:	73fb      	strb	r3, [r7, #15]
 801a614:	e008      	b.n	801a628 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 801a616:	78fb      	ldrb	r3, [r7, #3]
 801a618:	68ba      	ldr	r2, [r7, #8]
 801a61a:	212c      	movs	r1, #44	; 0x2c
 801a61c:	fb01 f303 	mul.w	r3, r1, r3
 801a620:	4413      	add	r3, r2
 801a622:	3355      	adds	r3, #85	; 0x55
 801a624:	781b      	ldrb	r3, [r3, #0]
 801a626:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 801a628:	7bfb      	ldrb	r3, [r7, #15]
}
 801a62a:	4618      	mov	r0, r3
 801a62c:	3714      	adds	r7, #20
 801a62e:	46bd      	mov	sp, r7
 801a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a634:	4770      	bx	lr

0801a636 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801a636:	b580      	push	{r7, lr}
 801a638:	b082      	sub	sp, #8
 801a63a:	af00      	add	r7, sp, #0
 801a63c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801a63e:	6878      	ldr	r0, [r7, #4]
 801a640:	f7e7 f99a 	bl	8001978 <HAL_Delay>
}
 801a644:	bf00      	nop
 801a646:	3708      	adds	r7, #8
 801a648:	46bd      	mov	sp, r7
 801a64a:	bd80      	pop	{r7, pc}

0801a64c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a64c:	b480      	push	{r7}
 801a64e:	b085      	sub	sp, #20
 801a650:	af00      	add	r7, sp, #0
 801a652:	4603      	mov	r3, r0
 801a654:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a656:	2300      	movs	r3, #0
 801a658:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a65a:	79fb      	ldrb	r3, [r7, #7]
 801a65c:	2b03      	cmp	r3, #3
 801a65e:	d817      	bhi.n	801a690 <USBH_Get_USB_Status+0x44>
 801a660:	a201      	add	r2, pc, #4	; (adr r2, 801a668 <USBH_Get_USB_Status+0x1c>)
 801a662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a666:	bf00      	nop
 801a668:	0801a679 	.word	0x0801a679
 801a66c:	0801a67f 	.word	0x0801a67f
 801a670:	0801a685 	.word	0x0801a685
 801a674:	0801a68b 	.word	0x0801a68b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801a678:	2300      	movs	r3, #0
 801a67a:	73fb      	strb	r3, [r7, #15]
    break;
 801a67c:	e00b      	b.n	801a696 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801a67e:	2302      	movs	r3, #2
 801a680:	73fb      	strb	r3, [r7, #15]
    break;
 801a682:	e008      	b.n	801a696 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801a684:	2301      	movs	r3, #1
 801a686:	73fb      	strb	r3, [r7, #15]
    break;
 801a688:	e005      	b.n	801a696 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801a68a:	2302      	movs	r3, #2
 801a68c:	73fb      	strb	r3, [r7, #15]
    break;
 801a68e:	e002      	b.n	801a696 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801a690:	2302      	movs	r3, #2
 801a692:	73fb      	strb	r3, [r7, #15]
    break;
 801a694:	bf00      	nop
  }
  return usb_status;
 801a696:	7bfb      	ldrb	r3, [r7, #15]
}
 801a698:	4618      	mov	r0, r3
 801a69a:	3714      	adds	r7, #20
 801a69c:	46bd      	mov	sp, r7
 801a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6a2:	4770      	bx	lr

0801a6a4 <__libc_init_array>:
 801a6a4:	b570      	push	{r4, r5, r6, lr}
 801a6a6:	4d0d      	ldr	r5, [pc, #52]	; (801a6dc <__libc_init_array+0x38>)
 801a6a8:	4c0d      	ldr	r4, [pc, #52]	; (801a6e0 <__libc_init_array+0x3c>)
 801a6aa:	1b64      	subs	r4, r4, r5
 801a6ac:	10a4      	asrs	r4, r4, #2
 801a6ae:	2600      	movs	r6, #0
 801a6b0:	42a6      	cmp	r6, r4
 801a6b2:	d109      	bne.n	801a6c8 <__libc_init_array+0x24>
 801a6b4:	4d0b      	ldr	r5, [pc, #44]	; (801a6e4 <__libc_init_array+0x40>)
 801a6b6:	4c0c      	ldr	r4, [pc, #48]	; (801a6e8 <__libc_init_array+0x44>)
 801a6b8:	f001 f8bc 	bl	801b834 <_init>
 801a6bc:	1b64      	subs	r4, r4, r5
 801a6be:	10a4      	asrs	r4, r4, #2
 801a6c0:	2600      	movs	r6, #0
 801a6c2:	42a6      	cmp	r6, r4
 801a6c4:	d105      	bne.n	801a6d2 <__libc_init_array+0x2e>
 801a6c6:	bd70      	pop	{r4, r5, r6, pc}
 801a6c8:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6cc:	4798      	blx	r3
 801a6ce:	3601      	adds	r6, #1
 801a6d0:	e7ee      	b.n	801a6b0 <__libc_init_array+0xc>
 801a6d2:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6d6:	4798      	blx	r3
 801a6d8:	3601      	adds	r6, #1
 801a6da:	e7f2      	b.n	801a6c2 <__libc_init_array+0x1e>
 801a6dc:	0809548c 	.word	0x0809548c
 801a6e0:	0809548c 	.word	0x0809548c
 801a6e4:	0809548c 	.word	0x0809548c
 801a6e8:	08095490 	.word	0x08095490

0801a6ec <malloc>:
 801a6ec:	4b02      	ldr	r3, [pc, #8]	; (801a6f8 <malloc+0xc>)
 801a6ee:	4601      	mov	r1, r0
 801a6f0:	6818      	ldr	r0, [r3, #0]
 801a6f2:	f000 b87f 	b.w	801a7f4 <_malloc_r>
 801a6f6:	bf00      	nop
 801a6f8:	20000050 	.word	0x20000050

0801a6fc <free>:
 801a6fc:	4b02      	ldr	r3, [pc, #8]	; (801a708 <free+0xc>)
 801a6fe:	4601      	mov	r1, r0
 801a700:	6818      	ldr	r0, [r3, #0]
 801a702:	f000 b827 	b.w	801a754 <_free_r>
 801a706:	bf00      	nop
 801a708:	20000050 	.word	0x20000050

0801a70c <memcmp>:
 801a70c:	b530      	push	{r4, r5, lr}
 801a70e:	3901      	subs	r1, #1
 801a710:	2400      	movs	r4, #0
 801a712:	42a2      	cmp	r2, r4
 801a714:	d101      	bne.n	801a71a <memcmp+0xe>
 801a716:	2000      	movs	r0, #0
 801a718:	e005      	b.n	801a726 <memcmp+0x1a>
 801a71a:	5d03      	ldrb	r3, [r0, r4]
 801a71c:	3401      	adds	r4, #1
 801a71e:	5d0d      	ldrb	r5, [r1, r4]
 801a720:	42ab      	cmp	r3, r5
 801a722:	d0f6      	beq.n	801a712 <memcmp+0x6>
 801a724:	1b58      	subs	r0, r3, r5
 801a726:	bd30      	pop	{r4, r5, pc}

0801a728 <memcpy>:
 801a728:	440a      	add	r2, r1
 801a72a:	4291      	cmp	r1, r2
 801a72c:	f100 33ff 	add.w	r3, r0, #4294967295
 801a730:	d100      	bne.n	801a734 <memcpy+0xc>
 801a732:	4770      	bx	lr
 801a734:	b510      	push	{r4, lr}
 801a736:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a73a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a73e:	4291      	cmp	r1, r2
 801a740:	d1f9      	bne.n	801a736 <memcpy+0xe>
 801a742:	bd10      	pop	{r4, pc}

0801a744 <memset>:
 801a744:	4402      	add	r2, r0
 801a746:	4603      	mov	r3, r0
 801a748:	4293      	cmp	r3, r2
 801a74a:	d100      	bne.n	801a74e <memset+0xa>
 801a74c:	4770      	bx	lr
 801a74e:	f803 1b01 	strb.w	r1, [r3], #1
 801a752:	e7f9      	b.n	801a748 <memset+0x4>

0801a754 <_free_r>:
 801a754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a756:	2900      	cmp	r1, #0
 801a758:	d048      	beq.n	801a7ec <_free_r+0x98>
 801a75a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a75e:	9001      	str	r0, [sp, #4]
 801a760:	2b00      	cmp	r3, #0
 801a762:	f1a1 0404 	sub.w	r4, r1, #4
 801a766:	bfb8      	it	lt
 801a768:	18e4      	addlt	r4, r4, r3
 801a76a:	f000 fa43 	bl	801abf4 <__malloc_lock>
 801a76e:	4a20      	ldr	r2, [pc, #128]	; (801a7f0 <_free_r+0x9c>)
 801a770:	9801      	ldr	r0, [sp, #4]
 801a772:	6813      	ldr	r3, [r2, #0]
 801a774:	4615      	mov	r5, r2
 801a776:	b933      	cbnz	r3, 801a786 <_free_r+0x32>
 801a778:	6063      	str	r3, [r4, #4]
 801a77a:	6014      	str	r4, [r2, #0]
 801a77c:	b003      	add	sp, #12
 801a77e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a782:	f000 ba3d 	b.w	801ac00 <__malloc_unlock>
 801a786:	42a3      	cmp	r3, r4
 801a788:	d90b      	bls.n	801a7a2 <_free_r+0x4e>
 801a78a:	6821      	ldr	r1, [r4, #0]
 801a78c:	1862      	adds	r2, r4, r1
 801a78e:	4293      	cmp	r3, r2
 801a790:	bf04      	itt	eq
 801a792:	681a      	ldreq	r2, [r3, #0]
 801a794:	685b      	ldreq	r3, [r3, #4]
 801a796:	6063      	str	r3, [r4, #4]
 801a798:	bf04      	itt	eq
 801a79a:	1852      	addeq	r2, r2, r1
 801a79c:	6022      	streq	r2, [r4, #0]
 801a79e:	602c      	str	r4, [r5, #0]
 801a7a0:	e7ec      	b.n	801a77c <_free_r+0x28>
 801a7a2:	461a      	mov	r2, r3
 801a7a4:	685b      	ldr	r3, [r3, #4]
 801a7a6:	b10b      	cbz	r3, 801a7ac <_free_r+0x58>
 801a7a8:	42a3      	cmp	r3, r4
 801a7aa:	d9fa      	bls.n	801a7a2 <_free_r+0x4e>
 801a7ac:	6811      	ldr	r1, [r2, #0]
 801a7ae:	1855      	adds	r5, r2, r1
 801a7b0:	42a5      	cmp	r5, r4
 801a7b2:	d10b      	bne.n	801a7cc <_free_r+0x78>
 801a7b4:	6824      	ldr	r4, [r4, #0]
 801a7b6:	4421      	add	r1, r4
 801a7b8:	1854      	adds	r4, r2, r1
 801a7ba:	42a3      	cmp	r3, r4
 801a7bc:	6011      	str	r1, [r2, #0]
 801a7be:	d1dd      	bne.n	801a77c <_free_r+0x28>
 801a7c0:	681c      	ldr	r4, [r3, #0]
 801a7c2:	685b      	ldr	r3, [r3, #4]
 801a7c4:	6053      	str	r3, [r2, #4]
 801a7c6:	4421      	add	r1, r4
 801a7c8:	6011      	str	r1, [r2, #0]
 801a7ca:	e7d7      	b.n	801a77c <_free_r+0x28>
 801a7cc:	d902      	bls.n	801a7d4 <_free_r+0x80>
 801a7ce:	230c      	movs	r3, #12
 801a7d0:	6003      	str	r3, [r0, #0]
 801a7d2:	e7d3      	b.n	801a77c <_free_r+0x28>
 801a7d4:	6825      	ldr	r5, [r4, #0]
 801a7d6:	1961      	adds	r1, r4, r5
 801a7d8:	428b      	cmp	r3, r1
 801a7da:	bf04      	itt	eq
 801a7dc:	6819      	ldreq	r1, [r3, #0]
 801a7de:	685b      	ldreq	r3, [r3, #4]
 801a7e0:	6063      	str	r3, [r4, #4]
 801a7e2:	bf04      	itt	eq
 801a7e4:	1949      	addeq	r1, r1, r5
 801a7e6:	6021      	streq	r1, [r4, #0]
 801a7e8:	6054      	str	r4, [r2, #4]
 801a7ea:	e7c7      	b.n	801a77c <_free_r+0x28>
 801a7ec:	b003      	add	sp, #12
 801a7ee:	bd30      	pop	{r4, r5, pc}
 801a7f0:	200032b8 	.word	0x200032b8

0801a7f4 <_malloc_r>:
 801a7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7f6:	1ccd      	adds	r5, r1, #3
 801a7f8:	f025 0503 	bic.w	r5, r5, #3
 801a7fc:	3508      	adds	r5, #8
 801a7fe:	2d0c      	cmp	r5, #12
 801a800:	bf38      	it	cc
 801a802:	250c      	movcc	r5, #12
 801a804:	2d00      	cmp	r5, #0
 801a806:	4606      	mov	r6, r0
 801a808:	db01      	blt.n	801a80e <_malloc_r+0x1a>
 801a80a:	42a9      	cmp	r1, r5
 801a80c:	d903      	bls.n	801a816 <_malloc_r+0x22>
 801a80e:	230c      	movs	r3, #12
 801a810:	6033      	str	r3, [r6, #0]
 801a812:	2000      	movs	r0, #0
 801a814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a816:	f000 f9ed 	bl	801abf4 <__malloc_lock>
 801a81a:	4921      	ldr	r1, [pc, #132]	; (801a8a0 <_malloc_r+0xac>)
 801a81c:	680a      	ldr	r2, [r1, #0]
 801a81e:	4614      	mov	r4, r2
 801a820:	b99c      	cbnz	r4, 801a84a <_malloc_r+0x56>
 801a822:	4f20      	ldr	r7, [pc, #128]	; (801a8a4 <_malloc_r+0xb0>)
 801a824:	683b      	ldr	r3, [r7, #0]
 801a826:	b923      	cbnz	r3, 801a832 <_malloc_r+0x3e>
 801a828:	4621      	mov	r1, r4
 801a82a:	4630      	mov	r0, r6
 801a82c:	f000 f8aa 	bl	801a984 <_sbrk_r>
 801a830:	6038      	str	r0, [r7, #0]
 801a832:	4629      	mov	r1, r5
 801a834:	4630      	mov	r0, r6
 801a836:	f000 f8a5 	bl	801a984 <_sbrk_r>
 801a83a:	1c43      	adds	r3, r0, #1
 801a83c:	d123      	bne.n	801a886 <_malloc_r+0x92>
 801a83e:	230c      	movs	r3, #12
 801a840:	6033      	str	r3, [r6, #0]
 801a842:	4630      	mov	r0, r6
 801a844:	f000 f9dc 	bl	801ac00 <__malloc_unlock>
 801a848:	e7e3      	b.n	801a812 <_malloc_r+0x1e>
 801a84a:	6823      	ldr	r3, [r4, #0]
 801a84c:	1b5b      	subs	r3, r3, r5
 801a84e:	d417      	bmi.n	801a880 <_malloc_r+0x8c>
 801a850:	2b0b      	cmp	r3, #11
 801a852:	d903      	bls.n	801a85c <_malloc_r+0x68>
 801a854:	6023      	str	r3, [r4, #0]
 801a856:	441c      	add	r4, r3
 801a858:	6025      	str	r5, [r4, #0]
 801a85a:	e004      	b.n	801a866 <_malloc_r+0x72>
 801a85c:	6863      	ldr	r3, [r4, #4]
 801a85e:	42a2      	cmp	r2, r4
 801a860:	bf0c      	ite	eq
 801a862:	600b      	streq	r3, [r1, #0]
 801a864:	6053      	strne	r3, [r2, #4]
 801a866:	4630      	mov	r0, r6
 801a868:	f000 f9ca 	bl	801ac00 <__malloc_unlock>
 801a86c:	f104 000b 	add.w	r0, r4, #11
 801a870:	1d23      	adds	r3, r4, #4
 801a872:	f020 0007 	bic.w	r0, r0, #7
 801a876:	1ac2      	subs	r2, r0, r3
 801a878:	d0cc      	beq.n	801a814 <_malloc_r+0x20>
 801a87a:	1a1b      	subs	r3, r3, r0
 801a87c:	50a3      	str	r3, [r4, r2]
 801a87e:	e7c9      	b.n	801a814 <_malloc_r+0x20>
 801a880:	4622      	mov	r2, r4
 801a882:	6864      	ldr	r4, [r4, #4]
 801a884:	e7cc      	b.n	801a820 <_malloc_r+0x2c>
 801a886:	1cc4      	adds	r4, r0, #3
 801a888:	f024 0403 	bic.w	r4, r4, #3
 801a88c:	42a0      	cmp	r0, r4
 801a88e:	d0e3      	beq.n	801a858 <_malloc_r+0x64>
 801a890:	1a21      	subs	r1, r4, r0
 801a892:	4630      	mov	r0, r6
 801a894:	f000 f876 	bl	801a984 <_sbrk_r>
 801a898:	3001      	adds	r0, #1
 801a89a:	d1dd      	bne.n	801a858 <_malloc_r+0x64>
 801a89c:	e7cf      	b.n	801a83e <_malloc_r+0x4a>
 801a89e:	bf00      	nop
 801a8a0:	200032b8 	.word	0x200032b8
 801a8a4:	200032bc 	.word	0x200032bc

0801a8a8 <iprintf>:
 801a8a8:	b40f      	push	{r0, r1, r2, r3}
 801a8aa:	4b0a      	ldr	r3, [pc, #40]	; (801a8d4 <iprintf+0x2c>)
 801a8ac:	b513      	push	{r0, r1, r4, lr}
 801a8ae:	681c      	ldr	r4, [r3, #0]
 801a8b0:	b124      	cbz	r4, 801a8bc <iprintf+0x14>
 801a8b2:	69a3      	ldr	r3, [r4, #24]
 801a8b4:	b913      	cbnz	r3, 801a8bc <iprintf+0x14>
 801a8b6:	4620      	mov	r0, r4
 801a8b8:	f000 f8ea 	bl	801aa90 <__sinit>
 801a8bc:	ab05      	add	r3, sp, #20
 801a8be:	9a04      	ldr	r2, [sp, #16]
 801a8c0:	68a1      	ldr	r1, [r4, #8]
 801a8c2:	9301      	str	r3, [sp, #4]
 801a8c4:	4620      	mov	r0, r4
 801a8c6:	f000 f9cb 	bl	801ac60 <_vfiprintf_r>
 801a8ca:	b002      	add	sp, #8
 801a8cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a8d0:	b004      	add	sp, #16
 801a8d2:	4770      	bx	lr
 801a8d4:	20000050 	.word	0x20000050

0801a8d8 <putchar>:
 801a8d8:	4b09      	ldr	r3, [pc, #36]	; (801a900 <putchar+0x28>)
 801a8da:	b513      	push	{r0, r1, r4, lr}
 801a8dc:	681c      	ldr	r4, [r3, #0]
 801a8de:	4601      	mov	r1, r0
 801a8e0:	b134      	cbz	r4, 801a8f0 <putchar+0x18>
 801a8e2:	69a3      	ldr	r3, [r4, #24]
 801a8e4:	b923      	cbnz	r3, 801a8f0 <putchar+0x18>
 801a8e6:	9001      	str	r0, [sp, #4]
 801a8e8:	4620      	mov	r0, r4
 801a8ea:	f000 f8d1 	bl	801aa90 <__sinit>
 801a8ee:	9901      	ldr	r1, [sp, #4]
 801a8f0:	68a2      	ldr	r2, [r4, #8]
 801a8f2:	4620      	mov	r0, r4
 801a8f4:	b002      	add	sp, #8
 801a8f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a8fa:	f000 bc75 	b.w	801b1e8 <_putc_r>
 801a8fe:	bf00      	nop
 801a900:	20000050 	.word	0x20000050

0801a904 <rand>:
 801a904:	4b17      	ldr	r3, [pc, #92]	; (801a964 <rand+0x60>)
 801a906:	b510      	push	{r4, lr}
 801a908:	681c      	ldr	r4, [r3, #0]
 801a90a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a90c:	b9b3      	cbnz	r3, 801a93c <rand+0x38>
 801a90e:	2018      	movs	r0, #24
 801a910:	f7ff feec 	bl	801a6ec <malloc>
 801a914:	63a0      	str	r0, [r4, #56]	; 0x38
 801a916:	b928      	cbnz	r0, 801a924 <rand+0x20>
 801a918:	4602      	mov	r2, r0
 801a91a:	4b13      	ldr	r3, [pc, #76]	; (801a968 <rand+0x64>)
 801a91c:	4813      	ldr	r0, [pc, #76]	; (801a96c <rand+0x68>)
 801a91e:	214e      	movs	r1, #78	; 0x4e
 801a920:	f000 f840 	bl	801a9a4 <__assert_func>
 801a924:	4a12      	ldr	r2, [pc, #72]	; (801a970 <rand+0x6c>)
 801a926:	4b13      	ldr	r3, [pc, #76]	; (801a974 <rand+0x70>)
 801a928:	e9c0 2300 	strd	r2, r3, [r0]
 801a92c:	4b12      	ldr	r3, [pc, #72]	; (801a978 <rand+0x74>)
 801a92e:	6083      	str	r3, [r0, #8]
 801a930:	230b      	movs	r3, #11
 801a932:	8183      	strh	r3, [r0, #12]
 801a934:	2201      	movs	r2, #1
 801a936:	2300      	movs	r3, #0
 801a938:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801a93c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a93e:	480f      	ldr	r0, [pc, #60]	; (801a97c <rand+0x78>)
 801a940:	690a      	ldr	r2, [r1, #16]
 801a942:	694b      	ldr	r3, [r1, #20]
 801a944:	4c0e      	ldr	r4, [pc, #56]	; (801a980 <rand+0x7c>)
 801a946:	4350      	muls	r0, r2
 801a948:	fb04 0003 	mla	r0, r4, r3, r0
 801a94c:	fba2 3404 	umull	r3, r4, r2, r4
 801a950:	1c5a      	adds	r2, r3, #1
 801a952:	4404      	add	r4, r0
 801a954:	f144 0000 	adc.w	r0, r4, #0
 801a958:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801a95c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a960:	bd10      	pop	{r4, pc}
 801a962:	bf00      	nop
 801a964:	20000050 	.word	0x20000050
 801a968:	0809533c 	.word	0x0809533c
 801a96c:	08095353 	.word	0x08095353
 801a970:	abcd330e 	.word	0xabcd330e
 801a974:	e66d1234 	.word	0xe66d1234
 801a978:	0005deec 	.word	0x0005deec
 801a97c:	5851f42d 	.word	0x5851f42d
 801a980:	4c957f2d 	.word	0x4c957f2d

0801a984 <_sbrk_r>:
 801a984:	b538      	push	{r3, r4, r5, lr}
 801a986:	4d06      	ldr	r5, [pc, #24]	; (801a9a0 <_sbrk_r+0x1c>)
 801a988:	2300      	movs	r3, #0
 801a98a:	4604      	mov	r4, r0
 801a98c:	4608      	mov	r0, r1
 801a98e:	602b      	str	r3, [r5, #0]
 801a990:	f7e6 ff0c 	bl	80017ac <_sbrk>
 801a994:	1c43      	adds	r3, r0, #1
 801a996:	d102      	bne.n	801a99e <_sbrk_r+0x1a>
 801a998:	682b      	ldr	r3, [r5, #0]
 801a99a:	b103      	cbz	r3, 801a99e <_sbrk_r+0x1a>
 801a99c:	6023      	str	r3, [r4, #0]
 801a99e:	bd38      	pop	{r3, r4, r5, pc}
 801a9a0:	2000e378 	.word	0x2000e378

0801a9a4 <__assert_func>:
 801a9a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a9a6:	4614      	mov	r4, r2
 801a9a8:	461a      	mov	r2, r3
 801a9aa:	4b09      	ldr	r3, [pc, #36]	; (801a9d0 <__assert_func+0x2c>)
 801a9ac:	681b      	ldr	r3, [r3, #0]
 801a9ae:	4605      	mov	r5, r0
 801a9b0:	68d8      	ldr	r0, [r3, #12]
 801a9b2:	b14c      	cbz	r4, 801a9c8 <__assert_func+0x24>
 801a9b4:	4b07      	ldr	r3, [pc, #28]	; (801a9d4 <__assert_func+0x30>)
 801a9b6:	9100      	str	r1, [sp, #0]
 801a9b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a9bc:	4906      	ldr	r1, [pc, #24]	; (801a9d8 <__assert_func+0x34>)
 801a9be:	462b      	mov	r3, r5
 801a9c0:	f000 f8e4 	bl	801ab8c <fiprintf>
 801a9c4:	f000 fd6e 	bl	801b4a4 <abort>
 801a9c8:	4b04      	ldr	r3, [pc, #16]	; (801a9dc <__assert_func+0x38>)
 801a9ca:	461c      	mov	r4, r3
 801a9cc:	e7f3      	b.n	801a9b6 <__assert_func+0x12>
 801a9ce:	bf00      	nop
 801a9d0:	20000050 	.word	0x20000050
 801a9d4:	080953b2 	.word	0x080953b2
 801a9d8:	080953bf 	.word	0x080953bf
 801a9dc:	080953ed 	.word	0x080953ed

0801a9e0 <std>:
 801a9e0:	2300      	movs	r3, #0
 801a9e2:	b510      	push	{r4, lr}
 801a9e4:	4604      	mov	r4, r0
 801a9e6:	e9c0 3300 	strd	r3, r3, [r0]
 801a9ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a9ee:	6083      	str	r3, [r0, #8]
 801a9f0:	8181      	strh	r1, [r0, #12]
 801a9f2:	6643      	str	r3, [r0, #100]	; 0x64
 801a9f4:	81c2      	strh	r2, [r0, #14]
 801a9f6:	6183      	str	r3, [r0, #24]
 801a9f8:	4619      	mov	r1, r3
 801a9fa:	2208      	movs	r2, #8
 801a9fc:	305c      	adds	r0, #92	; 0x5c
 801a9fe:	f7ff fea1 	bl	801a744 <memset>
 801aa02:	4b05      	ldr	r3, [pc, #20]	; (801aa18 <std+0x38>)
 801aa04:	6263      	str	r3, [r4, #36]	; 0x24
 801aa06:	4b05      	ldr	r3, [pc, #20]	; (801aa1c <std+0x3c>)
 801aa08:	62a3      	str	r3, [r4, #40]	; 0x28
 801aa0a:	4b05      	ldr	r3, [pc, #20]	; (801aa20 <std+0x40>)
 801aa0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801aa0e:	4b05      	ldr	r3, [pc, #20]	; (801aa24 <std+0x44>)
 801aa10:	6224      	str	r4, [r4, #32]
 801aa12:	6323      	str	r3, [r4, #48]	; 0x30
 801aa14:	bd10      	pop	{r4, pc}
 801aa16:	bf00      	nop
 801aa18:	0801b279 	.word	0x0801b279
 801aa1c:	0801b29b 	.word	0x0801b29b
 801aa20:	0801b2d3 	.word	0x0801b2d3
 801aa24:	0801b2f7 	.word	0x0801b2f7

0801aa28 <_cleanup_r>:
 801aa28:	4901      	ldr	r1, [pc, #4]	; (801aa30 <_cleanup_r+0x8>)
 801aa2a:	f000 b8c1 	b.w	801abb0 <_fwalk_reent>
 801aa2e:	bf00      	nop
 801aa30:	0801b5e1 	.word	0x0801b5e1

0801aa34 <__sfmoreglue>:
 801aa34:	b570      	push	{r4, r5, r6, lr}
 801aa36:	1e4a      	subs	r2, r1, #1
 801aa38:	2568      	movs	r5, #104	; 0x68
 801aa3a:	4355      	muls	r5, r2
 801aa3c:	460e      	mov	r6, r1
 801aa3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801aa42:	f7ff fed7 	bl	801a7f4 <_malloc_r>
 801aa46:	4604      	mov	r4, r0
 801aa48:	b140      	cbz	r0, 801aa5c <__sfmoreglue+0x28>
 801aa4a:	2100      	movs	r1, #0
 801aa4c:	e9c0 1600 	strd	r1, r6, [r0]
 801aa50:	300c      	adds	r0, #12
 801aa52:	60a0      	str	r0, [r4, #8]
 801aa54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801aa58:	f7ff fe74 	bl	801a744 <memset>
 801aa5c:	4620      	mov	r0, r4
 801aa5e:	bd70      	pop	{r4, r5, r6, pc}

0801aa60 <__sfp_lock_acquire>:
 801aa60:	4801      	ldr	r0, [pc, #4]	; (801aa68 <__sfp_lock_acquire+0x8>)
 801aa62:	f000 b8c5 	b.w	801abf0 <__retarget_lock_acquire_recursive>
 801aa66:	bf00      	nop
 801aa68:	2000e384 	.word	0x2000e384

0801aa6c <__sfp_lock_release>:
 801aa6c:	4801      	ldr	r0, [pc, #4]	; (801aa74 <__sfp_lock_release+0x8>)
 801aa6e:	f000 b8c0 	b.w	801abf2 <__retarget_lock_release_recursive>
 801aa72:	bf00      	nop
 801aa74:	2000e384 	.word	0x2000e384

0801aa78 <__sinit_lock_acquire>:
 801aa78:	4801      	ldr	r0, [pc, #4]	; (801aa80 <__sinit_lock_acquire+0x8>)
 801aa7a:	f000 b8b9 	b.w	801abf0 <__retarget_lock_acquire_recursive>
 801aa7e:	bf00      	nop
 801aa80:	2000e37f 	.word	0x2000e37f

0801aa84 <__sinit_lock_release>:
 801aa84:	4801      	ldr	r0, [pc, #4]	; (801aa8c <__sinit_lock_release+0x8>)
 801aa86:	f000 b8b4 	b.w	801abf2 <__retarget_lock_release_recursive>
 801aa8a:	bf00      	nop
 801aa8c:	2000e37f 	.word	0x2000e37f

0801aa90 <__sinit>:
 801aa90:	b510      	push	{r4, lr}
 801aa92:	4604      	mov	r4, r0
 801aa94:	f7ff fff0 	bl	801aa78 <__sinit_lock_acquire>
 801aa98:	69a3      	ldr	r3, [r4, #24]
 801aa9a:	b11b      	cbz	r3, 801aaa4 <__sinit+0x14>
 801aa9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aaa0:	f7ff bff0 	b.w	801aa84 <__sinit_lock_release>
 801aaa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801aaa8:	6523      	str	r3, [r4, #80]	; 0x50
 801aaaa:	4b13      	ldr	r3, [pc, #76]	; (801aaf8 <__sinit+0x68>)
 801aaac:	4a13      	ldr	r2, [pc, #76]	; (801aafc <__sinit+0x6c>)
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	62a2      	str	r2, [r4, #40]	; 0x28
 801aab2:	42a3      	cmp	r3, r4
 801aab4:	bf04      	itt	eq
 801aab6:	2301      	moveq	r3, #1
 801aab8:	61a3      	streq	r3, [r4, #24]
 801aaba:	4620      	mov	r0, r4
 801aabc:	f000 f820 	bl	801ab00 <__sfp>
 801aac0:	6060      	str	r0, [r4, #4]
 801aac2:	4620      	mov	r0, r4
 801aac4:	f000 f81c 	bl	801ab00 <__sfp>
 801aac8:	60a0      	str	r0, [r4, #8]
 801aaca:	4620      	mov	r0, r4
 801aacc:	f000 f818 	bl	801ab00 <__sfp>
 801aad0:	2200      	movs	r2, #0
 801aad2:	60e0      	str	r0, [r4, #12]
 801aad4:	2104      	movs	r1, #4
 801aad6:	6860      	ldr	r0, [r4, #4]
 801aad8:	f7ff ff82 	bl	801a9e0 <std>
 801aadc:	68a0      	ldr	r0, [r4, #8]
 801aade:	2201      	movs	r2, #1
 801aae0:	2109      	movs	r1, #9
 801aae2:	f7ff ff7d 	bl	801a9e0 <std>
 801aae6:	68e0      	ldr	r0, [r4, #12]
 801aae8:	2202      	movs	r2, #2
 801aaea:	2112      	movs	r1, #18
 801aaec:	f7ff ff78 	bl	801a9e0 <std>
 801aaf0:	2301      	movs	r3, #1
 801aaf2:	61a3      	str	r3, [r4, #24]
 801aaf4:	e7d2      	b.n	801aa9c <__sinit+0xc>
 801aaf6:	bf00      	nop
 801aaf8:	08095338 	.word	0x08095338
 801aafc:	0801aa29 	.word	0x0801aa29

0801ab00 <__sfp>:
 801ab00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab02:	4607      	mov	r7, r0
 801ab04:	f7ff ffac 	bl	801aa60 <__sfp_lock_acquire>
 801ab08:	4b1e      	ldr	r3, [pc, #120]	; (801ab84 <__sfp+0x84>)
 801ab0a:	681e      	ldr	r6, [r3, #0]
 801ab0c:	69b3      	ldr	r3, [r6, #24]
 801ab0e:	b913      	cbnz	r3, 801ab16 <__sfp+0x16>
 801ab10:	4630      	mov	r0, r6
 801ab12:	f7ff ffbd 	bl	801aa90 <__sinit>
 801ab16:	3648      	adds	r6, #72	; 0x48
 801ab18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ab1c:	3b01      	subs	r3, #1
 801ab1e:	d503      	bpl.n	801ab28 <__sfp+0x28>
 801ab20:	6833      	ldr	r3, [r6, #0]
 801ab22:	b30b      	cbz	r3, 801ab68 <__sfp+0x68>
 801ab24:	6836      	ldr	r6, [r6, #0]
 801ab26:	e7f7      	b.n	801ab18 <__sfp+0x18>
 801ab28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ab2c:	b9d5      	cbnz	r5, 801ab64 <__sfp+0x64>
 801ab2e:	4b16      	ldr	r3, [pc, #88]	; (801ab88 <__sfp+0x88>)
 801ab30:	60e3      	str	r3, [r4, #12]
 801ab32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ab36:	6665      	str	r5, [r4, #100]	; 0x64
 801ab38:	f000 f859 	bl	801abee <__retarget_lock_init_recursive>
 801ab3c:	f7ff ff96 	bl	801aa6c <__sfp_lock_release>
 801ab40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ab44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ab48:	6025      	str	r5, [r4, #0]
 801ab4a:	61a5      	str	r5, [r4, #24]
 801ab4c:	2208      	movs	r2, #8
 801ab4e:	4629      	mov	r1, r5
 801ab50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ab54:	f7ff fdf6 	bl	801a744 <memset>
 801ab58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ab5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ab60:	4620      	mov	r0, r4
 801ab62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab64:	3468      	adds	r4, #104	; 0x68
 801ab66:	e7d9      	b.n	801ab1c <__sfp+0x1c>
 801ab68:	2104      	movs	r1, #4
 801ab6a:	4638      	mov	r0, r7
 801ab6c:	f7ff ff62 	bl	801aa34 <__sfmoreglue>
 801ab70:	4604      	mov	r4, r0
 801ab72:	6030      	str	r0, [r6, #0]
 801ab74:	2800      	cmp	r0, #0
 801ab76:	d1d5      	bne.n	801ab24 <__sfp+0x24>
 801ab78:	f7ff ff78 	bl	801aa6c <__sfp_lock_release>
 801ab7c:	230c      	movs	r3, #12
 801ab7e:	603b      	str	r3, [r7, #0]
 801ab80:	e7ee      	b.n	801ab60 <__sfp+0x60>
 801ab82:	bf00      	nop
 801ab84:	08095338 	.word	0x08095338
 801ab88:	ffff0001 	.word	0xffff0001

0801ab8c <fiprintf>:
 801ab8c:	b40e      	push	{r1, r2, r3}
 801ab8e:	b503      	push	{r0, r1, lr}
 801ab90:	4601      	mov	r1, r0
 801ab92:	ab03      	add	r3, sp, #12
 801ab94:	4805      	ldr	r0, [pc, #20]	; (801abac <fiprintf+0x20>)
 801ab96:	f853 2b04 	ldr.w	r2, [r3], #4
 801ab9a:	6800      	ldr	r0, [r0, #0]
 801ab9c:	9301      	str	r3, [sp, #4]
 801ab9e:	f000 f85f 	bl	801ac60 <_vfiprintf_r>
 801aba2:	b002      	add	sp, #8
 801aba4:	f85d eb04 	ldr.w	lr, [sp], #4
 801aba8:	b003      	add	sp, #12
 801abaa:	4770      	bx	lr
 801abac:	20000050 	.word	0x20000050

0801abb0 <_fwalk_reent>:
 801abb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801abb4:	4606      	mov	r6, r0
 801abb6:	4688      	mov	r8, r1
 801abb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801abbc:	2700      	movs	r7, #0
 801abbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801abc2:	f1b9 0901 	subs.w	r9, r9, #1
 801abc6:	d505      	bpl.n	801abd4 <_fwalk_reent+0x24>
 801abc8:	6824      	ldr	r4, [r4, #0]
 801abca:	2c00      	cmp	r4, #0
 801abcc:	d1f7      	bne.n	801abbe <_fwalk_reent+0xe>
 801abce:	4638      	mov	r0, r7
 801abd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801abd4:	89ab      	ldrh	r3, [r5, #12]
 801abd6:	2b01      	cmp	r3, #1
 801abd8:	d907      	bls.n	801abea <_fwalk_reent+0x3a>
 801abda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801abde:	3301      	adds	r3, #1
 801abe0:	d003      	beq.n	801abea <_fwalk_reent+0x3a>
 801abe2:	4629      	mov	r1, r5
 801abe4:	4630      	mov	r0, r6
 801abe6:	47c0      	blx	r8
 801abe8:	4307      	orrs	r7, r0
 801abea:	3568      	adds	r5, #104	; 0x68
 801abec:	e7e9      	b.n	801abc2 <_fwalk_reent+0x12>

0801abee <__retarget_lock_init_recursive>:
 801abee:	4770      	bx	lr

0801abf0 <__retarget_lock_acquire_recursive>:
 801abf0:	4770      	bx	lr

0801abf2 <__retarget_lock_release_recursive>:
 801abf2:	4770      	bx	lr

0801abf4 <__malloc_lock>:
 801abf4:	4801      	ldr	r0, [pc, #4]	; (801abfc <__malloc_lock+0x8>)
 801abf6:	f7ff bffb 	b.w	801abf0 <__retarget_lock_acquire_recursive>
 801abfa:	bf00      	nop
 801abfc:	2000e380 	.word	0x2000e380

0801ac00 <__malloc_unlock>:
 801ac00:	4801      	ldr	r0, [pc, #4]	; (801ac08 <__malloc_unlock+0x8>)
 801ac02:	f7ff bff6 	b.w	801abf2 <__retarget_lock_release_recursive>
 801ac06:	bf00      	nop
 801ac08:	2000e380 	.word	0x2000e380

0801ac0c <__sfputc_r>:
 801ac0c:	6893      	ldr	r3, [r2, #8]
 801ac0e:	3b01      	subs	r3, #1
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	b410      	push	{r4}
 801ac14:	6093      	str	r3, [r2, #8]
 801ac16:	da08      	bge.n	801ac2a <__sfputc_r+0x1e>
 801ac18:	6994      	ldr	r4, [r2, #24]
 801ac1a:	42a3      	cmp	r3, r4
 801ac1c:	db01      	blt.n	801ac22 <__sfputc_r+0x16>
 801ac1e:	290a      	cmp	r1, #10
 801ac20:	d103      	bne.n	801ac2a <__sfputc_r+0x1e>
 801ac22:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ac26:	f000 bb6b 	b.w	801b300 <__swbuf_r>
 801ac2a:	6813      	ldr	r3, [r2, #0]
 801ac2c:	1c58      	adds	r0, r3, #1
 801ac2e:	6010      	str	r0, [r2, #0]
 801ac30:	7019      	strb	r1, [r3, #0]
 801ac32:	4608      	mov	r0, r1
 801ac34:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ac38:	4770      	bx	lr

0801ac3a <__sfputs_r>:
 801ac3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac3c:	4606      	mov	r6, r0
 801ac3e:	460f      	mov	r7, r1
 801ac40:	4614      	mov	r4, r2
 801ac42:	18d5      	adds	r5, r2, r3
 801ac44:	42ac      	cmp	r4, r5
 801ac46:	d101      	bne.n	801ac4c <__sfputs_r+0x12>
 801ac48:	2000      	movs	r0, #0
 801ac4a:	e007      	b.n	801ac5c <__sfputs_r+0x22>
 801ac4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac50:	463a      	mov	r2, r7
 801ac52:	4630      	mov	r0, r6
 801ac54:	f7ff ffda 	bl	801ac0c <__sfputc_r>
 801ac58:	1c43      	adds	r3, r0, #1
 801ac5a:	d1f3      	bne.n	801ac44 <__sfputs_r+0xa>
 801ac5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ac60 <_vfiprintf_r>:
 801ac60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac64:	460d      	mov	r5, r1
 801ac66:	b09d      	sub	sp, #116	; 0x74
 801ac68:	4614      	mov	r4, r2
 801ac6a:	4698      	mov	r8, r3
 801ac6c:	4606      	mov	r6, r0
 801ac6e:	b118      	cbz	r0, 801ac78 <_vfiprintf_r+0x18>
 801ac70:	6983      	ldr	r3, [r0, #24]
 801ac72:	b90b      	cbnz	r3, 801ac78 <_vfiprintf_r+0x18>
 801ac74:	f7ff ff0c 	bl	801aa90 <__sinit>
 801ac78:	4b89      	ldr	r3, [pc, #548]	; (801aea0 <_vfiprintf_r+0x240>)
 801ac7a:	429d      	cmp	r5, r3
 801ac7c:	d11b      	bne.n	801acb6 <_vfiprintf_r+0x56>
 801ac7e:	6875      	ldr	r5, [r6, #4]
 801ac80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ac82:	07d9      	lsls	r1, r3, #31
 801ac84:	d405      	bmi.n	801ac92 <_vfiprintf_r+0x32>
 801ac86:	89ab      	ldrh	r3, [r5, #12]
 801ac88:	059a      	lsls	r2, r3, #22
 801ac8a:	d402      	bmi.n	801ac92 <_vfiprintf_r+0x32>
 801ac8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ac8e:	f7ff ffaf 	bl	801abf0 <__retarget_lock_acquire_recursive>
 801ac92:	89ab      	ldrh	r3, [r5, #12]
 801ac94:	071b      	lsls	r3, r3, #28
 801ac96:	d501      	bpl.n	801ac9c <_vfiprintf_r+0x3c>
 801ac98:	692b      	ldr	r3, [r5, #16]
 801ac9a:	b9eb      	cbnz	r3, 801acd8 <_vfiprintf_r+0x78>
 801ac9c:	4629      	mov	r1, r5
 801ac9e:	4630      	mov	r0, r6
 801aca0:	f000 fb92 	bl	801b3c8 <__swsetup_r>
 801aca4:	b1c0      	cbz	r0, 801acd8 <_vfiprintf_r+0x78>
 801aca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aca8:	07dc      	lsls	r4, r3, #31
 801acaa:	d50e      	bpl.n	801acca <_vfiprintf_r+0x6a>
 801acac:	f04f 30ff 	mov.w	r0, #4294967295
 801acb0:	b01d      	add	sp, #116	; 0x74
 801acb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acb6:	4b7b      	ldr	r3, [pc, #492]	; (801aea4 <_vfiprintf_r+0x244>)
 801acb8:	429d      	cmp	r5, r3
 801acba:	d101      	bne.n	801acc0 <_vfiprintf_r+0x60>
 801acbc:	68b5      	ldr	r5, [r6, #8]
 801acbe:	e7df      	b.n	801ac80 <_vfiprintf_r+0x20>
 801acc0:	4b79      	ldr	r3, [pc, #484]	; (801aea8 <_vfiprintf_r+0x248>)
 801acc2:	429d      	cmp	r5, r3
 801acc4:	bf08      	it	eq
 801acc6:	68f5      	ldreq	r5, [r6, #12]
 801acc8:	e7da      	b.n	801ac80 <_vfiprintf_r+0x20>
 801acca:	89ab      	ldrh	r3, [r5, #12]
 801accc:	0598      	lsls	r0, r3, #22
 801acce:	d4ed      	bmi.n	801acac <_vfiprintf_r+0x4c>
 801acd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801acd2:	f7ff ff8e 	bl	801abf2 <__retarget_lock_release_recursive>
 801acd6:	e7e9      	b.n	801acac <_vfiprintf_r+0x4c>
 801acd8:	2300      	movs	r3, #0
 801acda:	9309      	str	r3, [sp, #36]	; 0x24
 801acdc:	2320      	movs	r3, #32
 801acde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ace2:	f8cd 800c 	str.w	r8, [sp, #12]
 801ace6:	2330      	movs	r3, #48	; 0x30
 801ace8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801aeac <_vfiprintf_r+0x24c>
 801acec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801acf0:	f04f 0901 	mov.w	r9, #1
 801acf4:	4623      	mov	r3, r4
 801acf6:	469a      	mov	sl, r3
 801acf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801acfc:	b10a      	cbz	r2, 801ad02 <_vfiprintf_r+0xa2>
 801acfe:	2a25      	cmp	r2, #37	; 0x25
 801ad00:	d1f9      	bne.n	801acf6 <_vfiprintf_r+0x96>
 801ad02:	ebba 0b04 	subs.w	fp, sl, r4
 801ad06:	d00b      	beq.n	801ad20 <_vfiprintf_r+0xc0>
 801ad08:	465b      	mov	r3, fp
 801ad0a:	4622      	mov	r2, r4
 801ad0c:	4629      	mov	r1, r5
 801ad0e:	4630      	mov	r0, r6
 801ad10:	f7ff ff93 	bl	801ac3a <__sfputs_r>
 801ad14:	3001      	adds	r0, #1
 801ad16:	f000 80aa 	beq.w	801ae6e <_vfiprintf_r+0x20e>
 801ad1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ad1c:	445a      	add	r2, fp
 801ad1e:	9209      	str	r2, [sp, #36]	; 0x24
 801ad20:	f89a 3000 	ldrb.w	r3, [sl]
 801ad24:	2b00      	cmp	r3, #0
 801ad26:	f000 80a2 	beq.w	801ae6e <_vfiprintf_r+0x20e>
 801ad2a:	2300      	movs	r3, #0
 801ad2c:	f04f 32ff 	mov.w	r2, #4294967295
 801ad30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ad34:	f10a 0a01 	add.w	sl, sl, #1
 801ad38:	9304      	str	r3, [sp, #16]
 801ad3a:	9307      	str	r3, [sp, #28]
 801ad3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ad40:	931a      	str	r3, [sp, #104]	; 0x68
 801ad42:	4654      	mov	r4, sl
 801ad44:	2205      	movs	r2, #5
 801ad46:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad4a:	4858      	ldr	r0, [pc, #352]	; (801aeac <_vfiprintf_r+0x24c>)
 801ad4c:	f7e5 fa40 	bl	80001d0 <memchr>
 801ad50:	9a04      	ldr	r2, [sp, #16]
 801ad52:	b9d8      	cbnz	r0, 801ad8c <_vfiprintf_r+0x12c>
 801ad54:	06d1      	lsls	r1, r2, #27
 801ad56:	bf44      	itt	mi
 801ad58:	2320      	movmi	r3, #32
 801ad5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ad5e:	0713      	lsls	r3, r2, #28
 801ad60:	bf44      	itt	mi
 801ad62:	232b      	movmi	r3, #43	; 0x2b
 801ad64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ad68:	f89a 3000 	ldrb.w	r3, [sl]
 801ad6c:	2b2a      	cmp	r3, #42	; 0x2a
 801ad6e:	d015      	beq.n	801ad9c <_vfiprintf_r+0x13c>
 801ad70:	9a07      	ldr	r2, [sp, #28]
 801ad72:	4654      	mov	r4, sl
 801ad74:	2000      	movs	r0, #0
 801ad76:	f04f 0c0a 	mov.w	ip, #10
 801ad7a:	4621      	mov	r1, r4
 801ad7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ad80:	3b30      	subs	r3, #48	; 0x30
 801ad82:	2b09      	cmp	r3, #9
 801ad84:	d94e      	bls.n	801ae24 <_vfiprintf_r+0x1c4>
 801ad86:	b1b0      	cbz	r0, 801adb6 <_vfiprintf_r+0x156>
 801ad88:	9207      	str	r2, [sp, #28]
 801ad8a:	e014      	b.n	801adb6 <_vfiprintf_r+0x156>
 801ad8c:	eba0 0308 	sub.w	r3, r0, r8
 801ad90:	fa09 f303 	lsl.w	r3, r9, r3
 801ad94:	4313      	orrs	r3, r2
 801ad96:	9304      	str	r3, [sp, #16]
 801ad98:	46a2      	mov	sl, r4
 801ad9a:	e7d2      	b.n	801ad42 <_vfiprintf_r+0xe2>
 801ad9c:	9b03      	ldr	r3, [sp, #12]
 801ad9e:	1d19      	adds	r1, r3, #4
 801ada0:	681b      	ldr	r3, [r3, #0]
 801ada2:	9103      	str	r1, [sp, #12]
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	bfbb      	ittet	lt
 801ada8:	425b      	neglt	r3, r3
 801adaa:	f042 0202 	orrlt.w	r2, r2, #2
 801adae:	9307      	strge	r3, [sp, #28]
 801adb0:	9307      	strlt	r3, [sp, #28]
 801adb2:	bfb8      	it	lt
 801adb4:	9204      	strlt	r2, [sp, #16]
 801adb6:	7823      	ldrb	r3, [r4, #0]
 801adb8:	2b2e      	cmp	r3, #46	; 0x2e
 801adba:	d10c      	bne.n	801add6 <_vfiprintf_r+0x176>
 801adbc:	7863      	ldrb	r3, [r4, #1]
 801adbe:	2b2a      	cmp	r3, #42	; 0x2a
 801adc0:	d135      	bne.n	801ae2e <_vfiprintf_r+0x1ce>
 801adc2:	9b03      	ldr	r3, [sp, #12]
 801adc4:	1d1a      	adds	r2, r3, #4
 801adc6:	681b      	ldr	r3, [r3, #0]
 801adc8:	9203      	str	r2, [sp, #12]
 801adca:	2b00      	cmp	r3, #0
 801adcc:	bfb8      	it	lt
 801adce:	f04f 33ff 	movlt.w	r3, #4294967295
 801add2:	3402      	adds	r4, #2
 801add4:	9305      	str	r3, [sp, #20]
 801add6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801aebc <_vfiprintf_r+0x25c>
 801adda:	7821      	ldrb	r1, [r4, #0]
 801addc:	2203      	movs	r2, #3
 801adde:	4650      	mov	r0, sl
 801ade0:	f7e5 f9f6 	bl	80001d0 <memchr>
 801ade4:	b140      	cbz	r0, 801adf8 <_vfiprintf_r+0x198>
 801ade6:	2340      	movs	r3, #64	; 0x40
 801ade8:	eba0 000a 	sub.w	r0, r0, sl
 801adec:	fa03 f000 	lsl.w	r0, r3, r0
 801adf0:	9b04      	ldr	r3, [sp, #16]
 801adf2:	4303      	orrs	r3, r0
 801adf4:	3401      	adds	r4, #1
 801adf6:	9304      	str	r3, [sp, #16]
 801adf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801adfc:	482c      	ldr	r0, [pc, #176]	; (801aeb0 <_vfiprintf_r+0x250>)
 801adfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ae02:	2206      	movs	r2, #6
 801ae04:	f7e5 f9e4 	bl	80001d0 <memchr>
 801ae08:	2800      	cmp	r0, #0
 801ae0a:	d03f      	beq.n	801ae8c <_vfiprintf_r+0x22c>
 801ae0c:	4b29      	ldr	r3, [pc, #164]	; (801aeb4 <_vfiprintf_r+0x254>)
 801ae0e:	bb1b      	cbnz	r3, 801ae58 <_vfiprintf_r+0x1f8>
 801ae10:	9b03      	ldr	r3, [sp, #12]
 801ae12:	3307      	adds	r3, #7
 801ae14:	f023 0307 	bic.w	r3, r3, #7
 801ae18:	3308      	adds	r3, #8
 801ae1a:	9303      	str	r3, [sp, #12]
 801ae1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae1e:	443b      	add	r3, r7
 801ae20:	9309      	str	r3, [sp, #36]	; 0x24
 801ae22:	e767      	b.n	801acf4 <_vfiprintf_r+0x94>
 801ae24:	fb0c 3202 	mla	r2, ip, r2, r3
 801ae28:	460c      	mov	r4, r1
 801ae2a:	2001      	movs	r0, #1
 801ae2c:	e7a5      	b.n	801ad7a <_vfiprintf_r+0x11a>
 801ae2e:	2300      	movs	r3, #0
 801ae30:	3401      	adds	r4, #1
 801ae32:	9305      	str	r3, [sp, #20]
 801ae34:	4619      	mov	r1, r3
 801ae36:	f04f 0c0a 	mov.w	ip, #10
 801ae3a:	4620      	mov	r0, r4
 801ae3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ae40:	3a30      	subs	r2, #48	; 0x30
 801ae42:	2a09      	cmp	r2, #9
 801ae44:	d903      	bls.n	801ae4e <_vfiprintf_r+0x1ee>
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d0c5      	beq.n	801add6 <_vfiprintf_r+0x176>
 801ae4a:	9105      	str	r1, [sp, #20]
 801ae4c:	e7c3      	b.n	801add6 <_vfiprintf_r+0x176>
 801ae4e:	fb0c 2101 	mla	r1, ip, r1, r2
 801ae52:	4604      	mov	r4, r0
 801ae54:	2301      	movs	r3, #1
 801ae56:	e7f0      	b.n	801ae3a <_vfiprintf_r+0x1da>
 801ae58:	ab03      	add	r3, sp, #12
 801ae5a:	9300      	str	r3, [sp, #0]
 801ae5c:	462a      	mov	r2, r5
 801ae5e:	4b16      	ldr	r3, [pc, #88]	; (801aeb8 <_vfiprintf_r+0x258>)
 801ae60:	a904      	add	r1, sp, #16
 801ae62:	4630      	mov	r0, r6
 801ae64:	f3af 8000 	nop.w
 801ae68:	4607      	mov	r7, r0
 801ae6a:	1c78      	adds	r0, r7, #1
 801ae6c:	d1d6      	bne.n	801ae1c <_vfiprintf_r+0x1bc>
 801ae6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ae70:	07d9      	lsls	r1, r3, #31
 801ae72:	d405      	bmi.n	801ae80 <_vfiprintf_r+0x220>
 801ae74:	89ab      	ldrh	r3, [r5, #12]
 801ae76:	059a      	lsls	r2, r3, #22
 801ae78:	d402      	bmi.n	801ae80 <_vfiprintf_r+0x220>
 801ae7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ae7c:	f7ff feb9 	bl	801abf2 <__retarget_lock_release_recursive>
 801ae80:	89ab      	ldrh	r3, [r5, #12]
 801ae82:	065b      	lsls	r3, r3, #25
 801ae84:	f53f af12 	bmi.w	801acac <_vfiprintf_r+0x4c>
 801ae88:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ae8a:	e711      	b.n	801acb0 <_vfiprintf_r+0x50>
 801ae8c:	ab03      	add	r3, sp, #12
 801ae8e:	9300      	str	r3, [sp, #0]
 801ae90:	462a      	mov	r2, r5
 801ae92:	4b09      	ldr	r3, [pc, #36]	; (801aeb8 <_vfiprintf_r+0x258>)
 801ae94:	a904      	add	r1, sp, #16
 801ae96:	4630      	mov	r0, r6
 801ae98:	f000 f880 	bl	801af9c <_printf_i>
 801ae9c:	e7e4      	b.n	801ae68 <_vfiprintf_r+0x208>
 801ae9e:	bf00      	nop
 801aea0:	08095410 	.word	0x08095410
 801aea4:	08095430 	.word	0x08095430
 801aea8:	080953f0 	.word	0x080953f0
 801aeac:	08095450 	.word	0x08095450
 801aeb0:	0809545a 	.word	0x0809545a
 801aeb4:	00000000 	.word	0x00000000
 801aeb8:	0801ac3b 	.word	0x0801ac3b
 801aebc:	08095456 	.word	0x08095456

0801aec0 <_printf_common>:
 801aec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aec4:	4616      	mov	r6, r2
 801aec6:	4699      	mov	r9, r3
 801aec8:	688a      	ldr	r2, [r1, #8]
 801aeca:	690b      	ldr	r3, [r1, #16]
 801aecc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801aed0:	4293      	cmp	r3, r2
 801aed2:	bfb8      	it	lt
 801aed4:	4613      	movlt	r3, r2
 801aed6:	6033      	str	r3, [r6, #0]
 801aed8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801aedc:	4607      	mov	r7, r0
 801aede:	460c      	mov	r4, r1
 801aee0:	b10a      	cbz	r2, 801aee6 <_printf_common+0x26>
 801aee2:	3301      	adds	r3, #1
 801aee4:	6033      	str	r3, [r6, #0]
 801aee6:	6823      	ldr	r3, [r4, #0]
 801aee8:	0699      	lsls	r1, r3, #26
 801aeea:	bf42      	ittt	mi
 801aeec:	6833      	ldrmi	r3, [r6, #0]
 801aeee:	3302      	addmi	r3, #2
 801aef0:	6033      	strmi	r3, [r6, #0]
 801aef2:	6825      	ldr	r5, [r4, #0]
 801aef4:	f015 0506 	ands.w	r5, r5, #6
 801aef8:	d106      	bne.n	801af08 <_printf_common+0x48>
 801aefa:	f104 0a19 	add.w	sl, r4, #25
 801aefe:	68e3      	ldr	r3, [r4, #12]
 801af00:	6832      	ldr	r2, [r6, #0]
 801af02:	1a9b      	subs	r3, r3, r2
 801af04:	42ab      	cmp	r3, r5
 801af06:	dc26      	bgt.n	801af56 <_printf_common+0x96>
 801af08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801af0c:	1e13      	subs	r3, r2, #0
 801af0e:	6822      	ldr	r2, [r4, #0]
 801af10:	bf18      	it	ne
 801af12:	2301      	movne	r3, #1
 801af14:	0692      	lsls	r2, r2, #26
 801af16:	d42b      	bmi.n	801af70 <_printf_common+0xb0>
 801af18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801af1c:	4649      	mov	r1, r9
 801af1e:	4638      	mov	r0, r7
 801af20:	47c0      	blx	r8
 801af22:	3001      	adds	r0, #1
 801af24:	d01e      	beq.n	801af64 <_printf_common+0xa4>
 801af26:	6823      	ldr	r3, [r4, #0]
 801af28:	68e5      	ldr	r5, [r4, #12]
 801af2a:	6832      	ldr	r2, [r6, #0]
 801af2c:	f003 0306 	and.w	r3, r3, #6
 801af30:	2b04      	cmp	r3, #4
 801af32:	bf08      	it	eq
 801af34:	1aad      	subeq	r5, r5, r2
 801af36:	68a3      	ldr	r3, [r4, #8]
 801af38:	6922      	ldr	r2, [r4, #16]
 801af3a:	bf0c      	ite	eq
 801af3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801af40:	2500      	movne	r5, #0
 801af42:	4293      	cmp	r3, r2
 801af44:	bfc4      	itt	gt
 801af46:	1a9b      	subgt	r3, r3, r2
 801af48:	18ed      	addgt	r5, r5, r3
 801af4a:	2600      	movs	r6, #0
 801af4c:	341a      	adds	r4, #26
 801af4e:	42b5      	cmp	r5, r6
 801af50:	d11a      	bne.n	801af88 <_printf_common+0xc8>
 801af52:	2000      	movs	r0, #0
 801af54:	e008      	b.n	801af68 <_printf_common+0xa8>
 801af56:	2301      	movs	r3, #1
 801af58:	4652      	mov	r2, sl
 801af5a:	4649      	mov	r1, r9
 801af5c:	4638      	mov	r0, r7
 801af5e:	47c0      	blx	r8
 801af60:	3001      	adds	r0, #1
 801af62:	d103      	bne.n	801af6c <_printf_common+0xac>
 801af64:	f04f 30ff 	mov.w	r0, #4294967295
 801af68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af6c:	3501      	adds	r5, #1
 801af6e:	e7c6      	b.n	801aefe <_printf_common+0x3e>
 801af70:	18e1      	adds	r1, r4, r3
 801af72:	1c5a      	adds	r2, r3, #1
 801af74:	2030      	movs	r0, #48	; 0x30
 801af76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801af7a:	4422      	add	r2, r4
 801af7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801af80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801af84:	3302      	adds	r3, #2
 801af86:	e7c7      	b.n	801af18 <_printf_common+0x58>
 801af88:	2301      	movs	r3, #1
 801af8a:	4622      	mov	r2, r4
 801af8c:	4649      	mov	r1, r9
 801af8e:	4638      	mov	r0, r7
 801af90:	47c0      	blx	r8
 801af92:	3001      	adds	r0, #1
 801af94:	d0e6      	beq.n	801af64 <_printf_common+0xa4>
 801af96:	3601      	adds	r6, #1
 801af98:	e7d9      	b.n	801af4e <_printf_common+0x8e>
	...

0801af9c <_printf_i>:
 801af9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801afa0:	460c      	mov	r4, r1
 801afa2:	4691      	mov	r9, r2
 801afa4:	7e27      	ldrb	r7, [r4, #24]
 801afa6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801afa8:	2f78      	cmp	r7, #120	; 0x78
 801afaa:	4680      	mov	r8, r0
 801afac:	469a      	mov	sl, r3
 801afae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801afb2:	d807      	bhi.n	801afc4 <_printf_i+0x28>
 801afb4:	2f62      	cmp	r7, #98	; 0x62
 801afb6:	d80a      	bhi.n	801afce <_printf_i+0x32>
 801afb8:	2f00      	cmp	r7, #0
 801afba:	f000 80d8 	beq.w	801b16e <_printf_i+0x1d2>
 801afbe:	2f58      	cmp	r7, #88	; 0x58
 801afc0:	f000 80a3 	beq.w	801b10a <_printf_i+0x16e>
 801afc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801afc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801afcc:	e03a      	b.n	801b044 <_printf_i+0xa8>
 801afce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801afd2:	2b15      	cmp	r3, #21
 801afd4:	d8f6      	bhi.n	801afc4 <_printf_i+0x28>
 801afd6:	a001      	add	r0, pc, #4	; (adr r0, 801afdc <_printf_i+0x40>)
 801afd8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801afdc:	0801b035 	.word	0x0801b035
 801afe0:	0801b049 	.word	0x0801b049
 801afe4:	0801afc5 	.word	0x0801afc5
 801afe8:	0801afc5 	.word	0x0801afc5
 801afec:	0801afc5 	.word	0x0801afc5
 801aff0:	0801afc5 	.word	0x0801afc5
 801aff4:	0801b049 	.word	0x0801b049
 801aff8:	0801afc5 	.word	0x0801afc5
 801affc:	0801afc5 	.word	0x0801afc5
 801b000:	0801afc5 	.word	0x0801afc5
 801b004:	0801afc5 	.word	0x0801afc5
 801b008:	0801b155 	.word	0x0801b155
 801b00c:	0801b079 	.word	0x0801b079
 801b010:	0801b137 	.word	0x0801b137
 801b014:	0801afc5 	.word	0x0801afc5
 801b018:	0801afc5 	.word	0x0801afc5
 801b01c:	0801b177 	.word	0x0801b177
 801b020:	0801afc5 	.word	0x0801afc5
 801b024:	0801b079 	.word	0x0801b079
 801b028:	0801afc5 	.word	0x0801afc5
 801b02c:	0801afc5 	.word	0x0801afc5
 801b030:	0801b13f 	.word	0x0801b13f
 801b034:	680b      	ldr	r3, [r1, #0]
 801b036:	1d1a      	adds	r2, r3, #4
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	600a      	str	r2, [r1, #0]
 801b03c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b040:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b044:	2301      	movs	r3, #1
 801b046:	e0a3      	b.n	801b190 <_printf_i+0x1f4>
 801b048:	6825      	ldr	r5, [r4, #0]
 801b04a:	6808      	ldr	r0, [r1, #0]
 801b04c:	062e      	lsls	r6, r5, #24
 801b04e:	f100 0304 	add.w	r3, r0, #4
 801b052:	d50a      	bpl.n	801b06a <_printf_i+0xce>
 801b054:	6805      	ldr	r5, [r0, #0]
 801b056:	600b      	str	r3, [r1, #0]
 801b058:	2d00      	cmp	r5, #0
 801b05a:	da03      	bge.n	801b064 <_printf_i+0xc8>
 801b05c:	232d      	movs	r3, #45	; 0x2d
 801b05e:	426d      	negs	r5, r5
 801b060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b064:	485e      	ldr	r0, [pc, #376]	; (801b1e0 <_printf_i+0x244>)
 801b066:	230a      	movs	r3, #10
 801b068:	e019      	b.n	801b09e <_printf_i+0x102>
 801b06a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b06e:	6805      	ldr	r5, [r0, #0]
 801b070:	600b      	str	r3, [r1, #0]
 801b072:	bf18      	it	ne
 801b074:	b22d      	sxthne	r5, r5
 801b076:	e7ef      	b.n	801b058 <_printf_i+0xbc>
 801b078:	680b      	ldr	r3, [r1, #0]
 801b07a:	6825      	ldr	r5, [r4, #0]
 801b07c:	1d18      	adds	r0, r3, #4
 801b07e:	6008      	str	r0, [r1, #0]
 801b080:	0628      	lsls	r0, r5, #24
 801b082:	d501      	bpl.n	801b088 <_printf_i+0xec>
 801b084:	681d      	ldr	r5, [r3, #0]
 801b086:	e002      	b.n	801b08e <_printf_i+0xf2>
 801b088:	0669      	lsls	r1, r5, #25
 801b08a:	d5fb      	bpl.n	801b084 <_printf_i+0xe8>
 801b08c:	881d      	ldrh	r5, [r3, #0]
 801b08e:	4854      	ldr	r0, [pc, #336]	; (801b1e0 <_printf_i+0x244>)
 801b090:	2f6f      	cmp	r7, #111	; 0x6f
 801b092:	bf0c      	ite	eq
 801b094:	2308      	moveq	r3, #8
 801b096:	230a      	movne	r3, #10
 801b098:	2100      	movs	r1, #0
 801b09a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b09e:	6866      	ldr	r6, [r4, #4]
 801b0a0:	60a6      	str	r6, [r4, #8]
 801b0a2:	2e00      	cmp	r6, #0
 801b0a4:	bfa2      	ittt	ge
 801b0a6:	6821      	ldrge	r1, [r4, #0]
 801b0a8:	f021 0104 	bicge.w	r1, r1, #4
 801b0ac:	6021      	strge	r1, [r4, #0]
 801b0ae:	b90d      	cbnz	r5, 801b0b4 <_printf_i+0x118>
 801b0b0:	2e00      	cmp	r6, #0
 801b0b2:	d04d      	beq.n	801b150 <_printf_i+0x1b4>
 801b0b4:	4616      	mov	r6, r2
 801b0b6:	fbb5 f1f3 	udiv	r1, r5, r3
 801b0ba:	fb03 5711 	mls	r7, r3, r1, r5
 801b0be:	5dc7      	ldrb	r7, [r0, r7]
 801b0c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b0c4:	462f      	mov	r7, r5
 801b0c6:	42bb      	cmp	r3, r7
 801b0c8:	460d      	mov	r5, r1
 801b0ca:	d9f4      	bls.n	801b0b6 <_printf_i+0x11a>
 801b0cc:	2b08      	cmp	r3, #8
 801b0ce:	d10b      	bne.n	801b0e8 <_printf_i+0x14c>
 801b0d0:	6823      	ldr	r3, [r4, #0]
 801b0d2:	07df      	lsls	r7, r3, #31
 801b0d4:	d508      	bpl.n	801b0e8 <_printf_i+0x14c>
 801b0d6:	6923      	ldr	r3, [r4, #16]
 801b0d8:	6861      	ldr	r1, [r4, #4]
 801b0da:	4299      	cmp	r1, r3
 801b0dc:	bfde      	ittt	le
 801b0de:	2330      	movle	r3, #48	; 0x30
 801b0e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b0e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b0e8:	1b92      	subs	r2, r2, r6
 801b0ea:	6122      	str	r2, [r4, #16]
 801b0ec:	f8cd a000 	str.w	sl, [sp]
 801b0f0:	464b      	mov	r3, r9
 801b0f2:	aa03      	add	r2, sp, #12
 801b0f4:	4621      	mov	r1, r4
 801b0f6:	4640      	mov	r0, r8
 801b0f8:	f7ff fee2 	bl	801aec0 <_printf_common>
 801b0fc:	3001      	adds	r0, #1
 801b0fe:	d14c      	bne.n	801b19a <_printf_i+0x1fe>
 801b100:	f04f 30ff 	mov.w	r0, #4294967295
 801b104:	b004      	add	sp, #16
 801b106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b10a:	4835      	ldr	r0, [pc, #212]	; (801b1e0 <_printf_i+0x244>)
 801b10c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b110:	6823      	ldr	r3, [r4, #0]
 801b112:	680e      	ldr	r6, [r1, #0]
 801b114:	061f      	lsls	r7, r3, #24
 801b116:	f856 5b04 	ldr.w	r5, [r6], #4
 801b11a:	600e      	str	r6, [r1, #0]
 801b11c:	d514      	bpl.n	801b148 <_printf_i+0x1ac>
 801b11e:	07d9      	lsls	r1, r3, #31
 801b120:	bf44      	itt	mi
 801b122:	f043 0320 	orrmi.w	r3, r3, #32
 801b126:	6023      	strmi	r3, [r4, #0]
 801b128:	b91d      	cbnz	r5, 801b132 <_printf_i+0x196>
 801b12a:	6823      	ldr	r3, [r4, #0]
 801b12c:	f023 0320 	bic.w	r3, r3, #32
 801b130:	6023      	str	r3, [r4, #0]
 801b132:	2310      	movs	r3, #16
 801b134:	e7b0      	b.n	801b098 <_printf_i+0xfc>
 801b136:	6823      	ldr	r3, [r4, #0]
 801b138:	f043 0320 	orr.w	r3, r3, #32
 801b13c:	6023      	str	r3, [r4, #0]
 801b13e:	2378      	movs	r3, #120	; 0x78
 801b140:	4828      	ldr	r0, [pc, #160]	; (801b1e4 <_printf_i+0x248>)
 801b142:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b146:	e7e3      	b.n	801b110 <_printf_i+0x174>
 801b148:	065e      	lsls	r6, r3, #25
 801b14a:	bf48      	it	mi
 801b14c:	b2ad      	uxthmi	r5, r5
 801b14e:	e7e6      	b.n	801b11e <_printf_i+0x182>
 801b150:	4616      	mov	r6, r2
 801b152:	e7bb      	b.n	801b0cc <_printf_i+0x130>
 801b154:	680b      	ldr	r3, [r1, #0]
 801b156:	6826      	ldr	r6, [r4, #0]
 801b158:	6960      	ldr	r0, [r4, #20]
 801b15a:	1d1d      	adds	r5, r3, #4
 801b15c:	600d      	str	r5, [r1, #0]
 801b15e:	0635      	lsls	r5, r6, #24
 801b160:	681b      	ldr	r3, [r3, #0]
 801b162:	d501      	bpl.n	801b168 <_printf_i+0x1cc>
 801b164:	6018      	str	r0, [r3, #0]
 801b166:	e002      	b.n	801b16e <_printf_i+0x1d2>
 801b168:	0671      	lsls	r1, r6, #25
 801b16a:	d5fb      	bpl.n	801b164 <_printf_i+0x1c8>
 801b16c:	8018      	strh	r0, [r3, #0]
 801b16e:	2300      	movs	r3, #0
 801b170:	6123      	str	r3, [r4, #16]
 801b172:	4616      	mov	r6, r2
 801b174:	e7ba      	b.n	801b0ec <_printf_i+0x150>
 801b176:	680b      	ldr	r3, [r1, #0]
 801b178:	1d1a      	adds	r2, r3, #4
 801b17a:	600a      	str	r2, [r1, #0]
 801b17c:	681e      	ldr	r6, [r3, #0]
 801b17e:	6862      	ldr	r2, [r4, #4]
 801b180:	2100      	movs	r1, #0
 801b182:	4630      	mov	r0, r6
 801b184:	f7e5 f824 	bl	80001d0 <memchr>
 801b188:	b108      	cbz	r0, 801b18e <_printf_i+0x1f2>
 801b18a:	1b80      	subs	r0, r0, r6
 801b18c:	6060      	str	r0, [r4, #4]
 801b18e:	6863      	ldr	r3, [r4, #4]
 801b190:	6123      	str	r3, [r4, #16]
 801b192:	2300      	movs	r3, #0
 801b194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b198:	e7a8      	b.n	801b0ec <_printf_i+0x150>
 801b19a:	6923      	ldr	r3, [r4, #16]
 801b19c:	4632      	mov	r2, r6
 801b19e:	4649      	mov	r1, r9
 801b1a0:	4640      	mov	r0, r8
 801b1a2:	47d0      	blx	sl
 801b1a4:	3001      	adds	r0, #1
 801b1a6:	d0ab      	beq.n	801b100 <_printf_i+0x164>
 801b1a8:	6823      	ldr	r3, [r4, #0]
 801b1aa:	079b      	lsls	r3, r3, #30
 801b1ac:	d413      	bmi.n	801b1d6 <_printf_i+0x23a>
 801b1ae:	68e0      	ldr	r0, [r4, #12]
 801b1b0:	9b03      	ldr	r3, [sp, #12]
 801b1b2:	4298      	cmp	r0, r3
 801b1b4:	bfb8      	it	lt
 801b1b6:	4618      	movlt	r0, r3
 801b1b8:	e7a4      	b.n	801b104 <_printf_i+0x168>
 801b1ba:	2301      	movs	r3, #1
 801b1bc:	4632      	mov	r2, r6
 801b1be:	4649      	mov	r1, r9
 801b1c0:	4640      	mov	r0, r8
 801b1c2:	47d0      	blx	sl
 801b1c4:	3001      	adds	r0, #1
 801b1c6:	d09b      	beq.n	801b100 <_printf_i+0x164>
 801b1c8:	3501      	adds	r5, #1
 801b1ca:	68e3      	ldr	r3, [r4, #12]
 801b1cc:	9903      	ldr	r1, [sp, #12]
 801b1ce:	1a5b      	subs	r3, r3, r1
 801b1d0:	42ab      	cmp	r3, r5
 801b1d2:	dcf2      	bgt.n	801b1ba <_printf_i+0x21e>
 801b1d4:	e7eb      	b.n	801b1ae <_printf_i+0x212>
 801b1d6:	2500      	movs	r5, #0
 801b1d8:	f104 0619 	add.w	r6, r4, #25
 801b1dc:	e7f5      	b.n	801b1ca <_printf_i+0x22e>
 801b1de:	bf00      	nop
 801b1e0:	08095461 	.word	0x08095461
 801b1e4:	08095472 	.word	0x08095472

0801b1e8 <_putc_r>:
 801b1e8:	b570      	push	{r4, r5, r6, lr}
 801b1ea:	460d      	mov	r5, r1
 801b1ec:	4614      	mov	r4, r2
 801b1ee:	4606      	mov	r6, r0
 801b1f0:	b118      	cbz	r0, 801b1fa <_putc_r+0x12>
 801b1f2:	6983      	ldr	r3, [r0, #24]
 801b1f4:	b90b      	cbnz	r3, 801b1fa <_putc_r+0x12>
 801b1f6:	f7ff fc4b 	bl	801aa90 <__sinit>
 801b1fa:	4b1c      	ldr	r3, [pc, #112]	; (801b26c <_putc_r+0x84>)
 801b1fc:	429c      	cmp	r4, r3
 801b1fe:	d124      	bne.n	801b24a <_putc_r+0x62>
 801b200:	6874      	ldr	r4, [r6, #4]
 801b202:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b204:	07d8      	lsls	r0, r3, #31
 801b206:	d405      	bmi.n	801b214 <_putc_r+0x2c>
 801b208:	89a3      	ldrh	r3, [r4, #12]
 801b20a:	0599      	lsls	r1, r3, #22
 801b20c:	d402      	bmi.n	801b214 <_putc_r+0x2c>
 801b20e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b210:	f7ff fcee 	bl	801abf0 <__retarget_lock_acquire_recursive>
 801b214:	68a3      	ldr	r3, [r4, #8]
 801b216:	3b01      	subs	r3, #1
 801b218:	2b00      	cmp	r3, #0
 801b21a:	60a3      	str	r3, [r4, #8]
 801b21c:	da05      	bge.n	801b22a <_putc_r+0x42>
 801b21e:	69a2      	ldr	r2, [r4, #24]
 801b220:	4293      	cmp	r3, r2
 801b222:	db1c      	blt.n	801b25e <_putc_r+0x76>
 801b224:	b2eb      	uxtb	r3, r5
 801b226:	2b0a      	cmp	r3, #10
 801b228:	d019      	beq.n	801b25e <_putc_r+0x76>
 801b22a:	6823      	ldr	r3, [r4, #0]
 801b22c:	1c5a      	adds	r2, r3, #1
 801b22e:	6022      	str	r2, [r4, #0]
 801b230:	701d      	strb	r5, [r3, #0]
 801b232:	b2ed      	uxtb	r5, r5
 801b234:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b236:	07da      	lsls	r2, r3, #31
 801b238:	d405      	bmi.n	801b246 <_putc_r+0x5e>
 801b23a:	89a3      	ldrh	r3, [r4, #12]
 801b23c:	059b      	lsls	r3, r3, #22
 801b23e:	d402      	bmi.n	801b246 <_putc_r+0x5e>
 801b240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b242:	f7ff fcd6 	bl	801abf2 <__retarget_lock_release_recursive>
 801b246:	4628      	mov	r0, r5
 801b248:	bd70      	pop	{r4, r5, r6, pc}
 801b24a:	4b09      	ldr	r3, [pc, #36]	; (801b270 <_putc_r+0x88>)
 801b24c:	429c      	cmp	r4, r3
 801b24e:	d101      	bne.n	801b254 <_putc_r+0x6c>
 801b250:	68b4      	ldr	r4, [r6, #8]
 801b252:	e7d6      	b.n	801b202 <_putc_r+0x1a>
 801b254:	4b07      	ldr	r3, [pc, #28]	; (801b274 <_putc_r+0x8c>)
 801b256:	429c      	cmp	r4, r3
 801b258:	bf08      	it	eq
 801b25a:	68f4      	ldreq	r4, [r6, #12]
 801b25c:	e7d1      	b.n	801b202 <_putc_r+0x1a>
 801b25e:	4629      	mov	r1, r5
 801b260:	4622      	mov	r2, r4
 801b262:	4630      	mov	r0, r6
 801b264:	f000 f84c 	bl	801b300 <__swbuf_r>
 801b268:	4605      	mov	r5, r0
 801b26a:	e7e3      	b.n	801b234 <_putc_r+0x4c>
 801b26c:	08095410 	.word	0x08095410
 801b270:	08095430 	.word	0x08095430
 801b274:	080953f0 	.word	0x080953f0

0801b278 <__sread>:
 801b278:	b510      	push	{r4, lr}
 801b27a:	460c      	mov	r4, r1
 801b27c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b280:	f000 fa60 	bl	801b744 <_read_r>
 801b284:	2800      	cmp	r0, #0
 801b286:	bfab      	itete	ge
 801b288:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b28a:	89a3      	ldrhlt	r3, [r4, #12]
 801b28c:	181b      	addge	r3, r3, r0
 801b28e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b292:	bfac      	ite	ge
 801b294:	6563      	strge	r3, [r4, #84]	; 0x54
 801b296:	81a3      	strhlt	r3, [r4, #12]
 801b298:	bd10      	pop	{r4, pc}

0801b29a <__swrite>:
 801b29a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b29e:	461f      	mov	r7, r3
 801b2a0:	898b      	ldrh	r3, [r1, #12]
 801b2a2:	05db      	lsls	r3, r3, #23
 801b2a4:	4605      	mov	r5, r0
 801b2a6:	460c      	mov	r4, r1
 801b2a8:	4616      	mov	r6, r2
 801b2aa:	d505      	bpl.n	801b2b8 <__swrite+0x1e>
 801b2ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2b0:	2302      	movs	r3, #2
 801b2b2:	2200      	movs	r2, #0
 801b2b4:	f000 f9d0 	bl	801b658 <_lseek_r>
 801b2b8:	89a3      	ldrh	r3, [r4, #12]
 801b2ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b2be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b2c2:	81a3      	strh	r3, [r4, #12]
 801b2c4:	4632      	mov	r2, r6
 801b2c6:	463b      	mov	r3, r7
 801b2c8:	4628      	mov	r0, r5
 801b2ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b2ce:	f000 b869 	b.w	801b3a4 <_write_r>

0801b2d2 <__sseek>:
 801b2d2:	b510      	push	{r4, lr}
 801b2d4:	460c      	mov	r4, r1
 801b2d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2da:	f000 f9bd 	bl	801b658 <_lseek_r>
 801b2de:	1c43      	adds	r3, r0, #1
 801b2e0:	89a3      	ldrh	r3, [r4, #12]
 801b2e2:	bf15      	itete	ne
 801b2e4:	6560      	strne	r0, [r4, #84]	; 0x54
 801b2e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b2ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b2ee:	81a3      	strheq	r3, [r4, #12]
 801b2f0:	bf18      	it	ne
 801b2f2:	81a3      	strhne	r3, [r4, #12]
 801b2f4:	bd10      	pop	{r4, pc}

0801b2f6 <__sclose>:
 801b2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2fa:	f000 b8db 	b.w	801b4b4 <_close_r>
	...

0801b300 <__swbuf_r>:
 801b300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b302:	460e      	mov	r6, r1
 801b304:	4614      	mov	r4, r2
 801b306:	4605      	mov	r5, r0
 801b308:	b118      	cbz	r0, 801b312 <__swbuf_r+0x12>
 801b30a:	6983      	ldr	r3, [r0, #24]
 801b30c:	b90b      	cbnz	r3, 801b312 <__swbuf_r+0x12>
 801b30e:	f7ff fbbf 	bl	801aa90 <__sinit>
 801b312:	4b21      	ldr	r3, [pc, #132]	; (801b398 <__swbuf_r+0x98>)
 801b314:	429c      	cmp	r4, r3
 801b316:	d12b      	bne.n	801b370 <__swbuf_r+0x70>
 801b318:	686c      	ldr	r4, [r5, #4]
 801b31a:	69a3      	ldr	r3, [r4, #24]
 801b31c:	60a3      	str	r3, [r4, #8]
 801b31e:	89a3      	ldrh	r3, [r4, #12]
 801b320:	071a      	lsls	r2, r3, #28
 801b322:	d52f      	bpl.n	801b384 <__swbuf_r+0x84>
 801b324:	6923      	ldr	r3, [r4, #16]
 801b326:	b36b      	cbz	r3, 801b384 <__swbuf_r+0x84>
 801b328:	6923      	ldr	r3, [r4, #16]
 801b32a:	6820      	ldr	r0, [r4, #0]
 801b32c:	1ac0      	subs	r0, r0, r3
 801b32e:	6963      	ldr	r3, [r4, #20]
 801b330:	b2f6      	uxtb	r6, r6
 801b332:	4283      	cmp	r3, r0
 801b334:	4637      	mov	r7, r6
 801b336:	dc04      	bgt.n	801b342 <__swbuf_r+0x42>
 801b338:	4621      	mov	r1, r4
 801b33a:	4628      	mov	r0, r5
 801b33c:	f000 f950 	bl	801b5e0 <_fflush_r>
 801b340:	bb30      	cbnz	r0, 801b390 <__swbuf_r+0x90>
 801b342:	68a3      	ldr	r3, [r4, #8]
 801b344:	3b01      	subs	r3, #1
 801b346:	60a3      	str	r3, [r4, #8]
 801b348:	6823      	ldr	r3, [r4, #0]
 801b34a:	1c5a      	adds	r2, r3, #1
 801b34c:	6022      	str	r2, [r4, #0]
 801b34e:	701e      	strb	r6, [r3, #0]
 801b350:	6963      	ldr	r3, [r4, #20]
 801b352:	3001      	adds	r0, #1
 801b354:	4283      	cmp	r3, r0
 801b356:	d004      	beq.n	801b362 <__swbuf_r+0x62>
 801b358:	89a3      	ldrh	r3, [r4, #12]
 801b35a:	07db      	lsls	r3, r3, #31
 801b35c:	d506      	bpl.n	801b36c <__swbuf_r+0x6c>
 801b35e:	2e0a      	cmp	r6, #10
 801b360:	d104      	bne.n	801b36c <__swbuf_r+0x6c>
 801b362:	4621      	mov	r1, r4
 801b364:	4628      	mov	r0, r5
 801b366:	f000 f93b 	bl	801b5e0 <_fflush_r>
 801b36a:	b988      	cbnz	r0, 801b390 <__swbuf_r+0x90>
 801b36c:	4638      	mov	r0, r7
 801b36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b370:	4b0a      	ldr	r3, [pc, #40]	; (801b39c <__swbuf_r+0x9c>)
 801b372:	429c      	cmp	r4, r3
 801b374:	d101      	bne.n	801b37a <__swbuf_r+0x7a>
 801b376:	68ac      	ldr	r4, [r5, #8]
 801b378:	e7cf      	b.n	801b31a <__swbuf_r+0x1a>
 801b37a:	4b09      	ldr	r3, [pc, #36]	; (801b3a0 <__swbuf_r+0xa0>)
 801b37c:	429c      	cmp	r4, r3
 801b37e:	bf08      	it	eq
 801b380:	68ec      	ldreq	r4, [r5, #12]
 801b382:	e7ca      	b.n	801b31a <__swbuf_r+0x1a>
 801b384:	4621      	mov	r1, r4
 801b386:	4628      	mov	r0, r5
 801b388:	f000 f81e 	bl	801b3c8 <__swsetup_r>
 801b38c:	2800      	cmp	r0, #0
 801b38e:	d0cb      	beq.n	801b328 <__swbuf_r+0x28>
 801b390:	f04f 37ff 	mov.w	r7, #4294967295
 801b394:	e7ea      	b.n	801b36c <__swbuf_r+0x6c>
 801b396:	bf00      	nop
 801b398:	08095410 	.word	0x08095410
 801b39c:	08095430 	.word	0x08095430
 801b3a0:	080953f0 	.word	0x080953f0

0801b3a4 <_write_r>:
 801b3a4:	b538      	push	{r3, r4, r5, lr}
 801b3a6:	4d07      	ldr	r5, [pc, #28]	; (801b3c4 <_write_r+0x20>)
 801b3a8:	4604      	mov	r4, r0
 801b3aa:	4608      	mov	r0, r1
 801b3ac:	4611      	mov	r1, r2
 801b3ae:	2200      	movs	r2, #0
 801b3b0:	602a      	str	r2, [r5, #0]
 801b3b2:	461a      	mov	r2, r3
 801b3b4:	f7e6 f9a9 	bl	800170a <_write>
 801b3b8:	1c43      	adds	r3, r0, #1
 801b3ba:	d102      	bne.n	801b3c2 <_write_r+0x1e>
 801b3bc:	682b      	ldr	r3, [r5, #0]
 801b3be:	b103      	cbz	r3, 801b3c2 <_write_r+0x1e>
 801b3c0:	6023      	str	r3, [r4, #0]
 801b3c2:	bd38      	pop	{r3, r4, r5, pc}
 801b3c4:	2000e378 	.word	0x2000e378

0801b3c8 <__swsetup_r>:
 801b3c8:	4b32      	ldr	r3, [pc, #200]	; (801b494 <__swsetup_r+0xcc>)
 801b3ca:	b570      	push	{r4, r5, r6, lr}
 801b3cc:	681d      	ldr	r5, [r3, #0]
 801b3ce:	4606      	mov	r6, r0
 801b3d0:	460c      	mov	r4, r1
 801b3d2:	b125      	cbz	r5, 801b3de <__swsetup_r+0x16>
 801b3d4:	69ab      	ldr	r3, [r5, #24]
 801b3d6:	b913      	cbnz	r3, 801b3de <__swsetup_r+0x16>
 801b3d8:	4628      	mov	r0, r5
 801b3da:	f7ff fb59 	bl	801aa90 <__sinit>
 801b3de:	4b2e      	ldr	r3, [pc, #184]	; (801b498 <__swsetup_r+0xd0>)
 801b3e0:	429c      	cmp	r4, r3
 801b3e2:	d10f      	bne.n	801b404 <__swsetup_r+0x3c>
 801b3e4:	686c      	ldr	r4, [r5, #4]
 801b3e6:	89a3      	ldrh	r3, [r4, #12]
 801b3e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b3ec:	0719      	lsls	r1, r3, #28
 801b3ee:	d42c      	bmi.n	801b44a <__swsetup_r+0x82>
 801b3f0:	06dd      	lsls	r5, r3, #27
 801b3f2:	d411      	bmi.n	801b418 <__swsetup_r+0x50>
 801b3f4:	2309      	movs	r3, #9
 801b3f6:	6033      	str	r3, [r6, #0]
 801b3f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b3fc:	81a3      	strh	r3, [r4, #12]
 801b3fe:	f04f 30ff 	mov.w	r0, #4294967295
 801b402:	e03e      	b.n	801b482 <__swsetup_r+0xba>
 801b404:	4b25      	ldr	r3, [pc, #148]	; (801b49c <__swsetup_r+0xd4>)
 801b406:	429c      	cmp	r4, r3
 801b408:	d101      	bne.n	801b40e <__swsetup_r+0x46>
 801b40a:	68ac      	ldr	r4, [r5, #8]
 801b40c:	e7eb      	b.n	801b3e6 <__swsetup_r+0x1e>
 801b40e:	4b24      	ldr	r3, [pc, #144]	; (801b4a0 <__swsetup_r+0xd8>)
 801b410:	429c      	cmp	r4, r3
 801b412:	bf08      	it	eq
 801b414:	68ec      	ldreq	r4, [r5, #12]
 801b416:	e7e6      	b.n	801b3e6 <__swsetup_r+0x1e>
 801b418:	0758      	lsls	r0, r3, #29
 801b41a:	d512      	bpl.n	801b442 <__swsetup_r+0x7a>
 801b41c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b41e:	b141      	cbz	r1, 801b432 <__swsetup_r+0x6a>
 801b420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b424:	4299      	cmp	r1, r3
 801b426:	d002      	beq.n	801b42e <__swsetup_r+0x66>
 801b428:	4630      	mov	r0, r6
 801b42a:	f7ff f993 	bl	801a754 <_free_r>
 801b42e:	2300      	movs	r3, #0
 801b430:	6363      	str	r3, [r4, #52]	; 0x34
 801b432:	89a3      	ldrh	r3, [r4, #12]
 801b434:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b438:	81a3      	strh	r3, [r4, #12]
 801b43a:	2300      	movs	r3, #0
 801b43c:	6063      	str	r3, [r4, #4]
 801b43e:	6923      	ldr	r3, [r4, #16]
 801b440:	6023      	str	r3, [r4, #0]
 801b442:	89a3      	ldrh	r3, [r4, #12]
 801b444:	f043 0308 	orr.w	r3, r3, #8
 801b448:	81a3      	strh	r3, [r4, #12]
 801b44a:	6923      	ldr	r3, [r4, #16]
 801b44c:	b94b      	cbnz	r3, 801b462 <__swsetup_r+0x9a>
 801b44e:	89a3      	ldrh	r3, [r4, #12]
 801b450:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b458:	d003      	beq.n	801b462 <__swsetup_r+0x9a>
 801b45a:	4621      	mov	r1, r4
 801b45c:	4630      	mov	r0, r6
 801b45e:	f000 f931 	bl	801b6c4 <__smakebuf_r>
 801b462:	89a0      	ldrh	r0, [r4, #12]
 801b464:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b468:	f010 0301 	ands.w	r3, r0, #1
 801b46c:	d00a      	beq.n	801b484 <__swsetup_r+0xbc>
 801b46e:	2300      	movs	r3, #0
 801b470:	60a3      	str	r3, [r4, #8]
 801b472:	6963      	ldr	r3, [r4, #20]
 801b474:	425b      	negs	r3, r3
 801b476:	61a3      	str	r3, [r4, #24]
 801b478:	6923      	ldr	r3, [r4, #16]
 801b47a:	b943      	cbnz	r3, 801b48e <__swsetup_r+0xc6>
 801b47c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b480:	d1ba      	bne.n	801b3f8 <__swsetup_r+0x30>
 801b482:	bd70      	pop	{r4, r5, r6, pc}
 801b484:	0781      	lsls	r1, r0, #30
 801b486:	bf58      	it	pl
 801b488:	6963      	ldrpl	r3, [r4, #20]
 801b48a:	60a3      	str	r3, [r4, #8]
 801b48c:	e7f4      	b.n	801b478 <__swsetup_r+0xb0>
 801b48e:	2000      	movs	r0, #0
 801b490:	e7f7      	b.n	801b482 <__swsetup_r+0xba>
 801b492:	bf00      	nop
 801b494:	20000050 	.word	0x20000050
 801b498:	08095410 	.word	0x08095410
 801b49c:	08095430 	.word	0x08095430
 801b4a0:	080953f0 	.word	0x080953f0

0801b4a4 <abort>:
 801b4a4:	b508      	push	{r3, lr}
 801b4a6:	2006      	movs	r0, #6
 801b4a8:	f000 f986 	bl	801b7b8 <raise>
 801b4ac:	2001      	movs	r0, #1
 801b4ae:	f7e6 f905 	bl	80016bc <_exit>
	...

0801b4b4 <_close_r>:
 801b4b4:	b538      	push	{r3, r4, r5, lr}
 801b4b6:	4d06      	ldr	r5, [pc, #24]	; (801b4d0 <_close_r+0x1c>)
 801b4b8:	2300      	movs	r3, #0
 801b4ba:	4604      	mov	r4, r0
 801b4bc:	4608      	mov	r0, r1
 801b4be:	602b      	str	r3, [r5, #0]
 801b4c0:	f7e6 f93f 	bl	8001742 <_close>
 801b4c4:	1c43      	adds	r3, r0, #1
 801b4c6:	d102      	bne.n	801b4ce <_close_r+0x1a>
 801b4c8:	682b      	ldr	r3, [r5, #0]
 801b4ca:	b103      	cbz	r3, 801b4ce <_close_r+0x1a>
 801b4cc:	6023      	str	r3, [r4, #0]
 801b4ce:	bd38      	pop	{r3, r4, r5, pc}
 801b4d0:	2000e378 	.word	0x2000e378

0801b4d4 <__sflush_r>:
 801b4d4:	898a      	ldrh	r2, [r1, #12]
 801b4d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4da:	4605      	mov	r5, r0
 801b4dc:	0710      	lsls	r0, r2, #28
 801b4de:	460c      	mov	r4, r1
 801b4e0:	d458      	bmi.n	801b594 <__sflush_r+0xc0>
 801b4e2:	684b      	ldr	r3, [r1, #4]
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	dc05      	bgt.n	801b4f4 <__sflush_r+0x20>
 801b4e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	dc02      	bgt.n	801b4f4 <__sflush_r+0x20>
 801b4ee:	2000      	movs	r0, #0
 801b4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b4f6:	2e00      	cmp	r6, #0
 801b4f8:	d0f9      	beq.n	801b4ee <__sflush_r+0x1a>
 801b4fa:	2300      	movs	r3, #0
 801b4fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b500:	682f      	ldr	r7, [r5, #0]
 801b502:	602b      	str	r3, [r5, #0]
 801b504:	d032      	beq.n	801b56c <__sflush_r+0x98>
 801b506:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b508:	89a3      	ldrh	r3, [r4, #12]
 801b50a:	075a      	lsls	r2, r3, #29
 801b50c:	d505      	bpl.n	801b51a <__sflush_r+0x46>
 801b50e:	6863      	ldr	r3, [r4, #4]
 801b510:	1ac0      	subs	r0, r0, r3
 801b512:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b514:	b10b      	cbz	r3, 801b51a <__sflush_r+0x46>
 801b516:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b518:	1ac0      	subs	r0, r0, r3
 801b51a:	2300      	movs	r3, #0
 801b51c:	4602      	mov	r2, r0
 801b51e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b520:	6a21      	ldr	r1, [r4, #32]
 801b522:	4628      	mov	r0, r5
 801b524:	47b0      	blx	r6
 801b526:	1c43      	adds	r3, r0, #1
 801b528:	89a3      	ldrh	r3, [r4, #12]
 801b52a:	d106      	bne.n	801b53a <__sflush_r+0x66>
 801b52c:	6829      	ldr	r1, [r5, #0]
 801b52e:	291d      	cmp	r1, #29
 801b530:	d82c      	bhi.n	801b58c <__sflush_r+0xb8>
 801b532:	4a2a      	ldr	r2, [pc, #168]	; (801b5dc <__sflush_r+0x108>)
 801b534:	40ca      	lsrs	r2, r1
 801b536:	07d6      	lsls	r6, r2, #31
 801b538:	d528      	bpl.n	801b58c <__sflush_r+0xb8>
 801b53a:	2200      	movs	r2, #0
 801b53c:	6062      	str	r2, [r4, #4]
 801b53e:	04d9      	lsls	r1, r3, #19
 801b540:	6922      	ldr	r2, [r4, #16]
 801b542:	6022      	str	r2, [r4, #0]
 801b544:	d504      	bpl.n	801b550 <__sflush_r+0x7c>
 801b546:	1c42      	adds	r2, r0, #1
 801b548:	d101      	bne.n	801b54e <__sflush_r+0x7a>
 801b54a:	682b      	ldr	r3, [r5, #0]
 801b54c:	b903      	cbnz	r3, 801b550 <__sflush_r+0x7c>
 801b54e:	6560      	str	r0, [r4, #84]	; 0x54
 801b550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b552:	602f      	str	r7, [r5, #0]
 801b554:	2900      	cmp	r1, #0
 801b556:	d0ca      	beq.n	801b4ee <__sflush_r+0x1a>
 801b558:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b55c:	4299      	cmp	r1, r3
 801b55e:	d002      	beq.n	801b566 <__sflush_r+0x92>
 801b560:	4628      	mov	r0, r5
 801b562:	f7ff f8f7 	bl	801a754 <_free_r>
 801b566:	2000      	movs	r0, #0
 801b568:	6360      	str	r0, [r4, #52]	; 0x34
 801b56a:	e7c1      	b.n	801b4f0 <__sflush_r+0x1c>
 801b56c:	6a21      	ldr	r1, [r4, #32]
 801b56e:	2301      	movs	r3, #1
 801b570:	4628      	mov	r0, r5
 801b572:	47b0      	blx	r6
 801b574:	1c41      	adds	r1, r0, #1
 801b576:	d1c7      	bne.n	801b508 <__sflush_r+0x34>
 801b578:	682b      	ldr	r3, [r5, #0]
 801b57a:	2b00      	cmp	r3, #0
 801b57c:	d0c4      	beq.n	801b508 <__sflush_r+0x34>
 801b57e:	2b1d      	cmp	r3, #29
 801b580:	d001      	beq.n	801b586 <__sflush_r+0xb2>
 801b582:	2b16      	cmp	r3, #22
 801b584:	d101      	bne.n	801b58a <__sflush_r+0xb6>
 801b586:	602f      	str	r7, [r5, #0]
 801b588:	e7b1      	b.n	801b4ee <__sflush_r+0x1a>
 801b58a:	89a3      	ldrh	r3, [r4, #12]
 801b58c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b590:	81a3      	strh	r3, [r4, #12]
 801b592:	e7ad      	b.n	801b4f0 <__sflush_r+0x1c>
 801b594:	690f      	ldr	r7, [r1, #16]
 801b596:	2f00      	cmp	r7, #0
 801b598:	d0a9      	beq.n	801b4ee <__sflush_r+0x1a>
 801b59a:	0793      	lsls	r3, r2, #30
 801b59c:	680e      	ldr	r6, [r1, #0]
 801b59e:	bf08      	it	eq
 801b5a0:	694b      	ldreq	r3, [r1, #20]
 801b5a2:	600f      	str	r7, [r1, #0]
 801b5a4:	bf18      	it	ne
 801b5a6:	2300      	movne	r3, #0
 801b5a8:	eba6 0807 	sub.w	r8, r6, r7
 801b5ac:	608b      	str	r3, [r1, #8]
 801b5ae:	f1b8 0f00 	cmp.w	r8, #0
 801b5b2:	dd9c      	ble.n	801b4ee <__sflush_r+0x1a>
 801b5b4:	6a21      	ldr	r1, [r4, #32]
 801b5b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b5b8:	4643      	mov	r3, r8
 801b5ba:	463a      	mov	r2, r7
 801b5bc:	4628      	mov	r0, r5
 801b5be:	47b0      	blx	r6
 801b5c0:	2800      	cmp	r0, #0
 801b5c2:	dc06      	bgt.n	801b5d2 <__sflush_r+0xfe>
 801b5c4:	89a3      	ldrh	r3, [r4, #12]
 801b5c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b5ca:	81a3      	strh	r3, [r4, #12]
 801b5cc:	f04f 30ff 	mov.w	r0, #4294967295
 801b5d0:	e78e      	b.n	801b4f0 <__sflush_r+0x1c>
 801b5d2:	4407      	add	r7, r0
 801b5d4:	eba8 0800 	sub.w	r8, r8, r0
 801b5d8:	e7e9      	b.n	801b5ae <__sflush_r+0xda>
 801b5da:	bf00      	nop
 801b5dc:	20400001 	.word	0x20400001

0801b5e0 <_fflush_r>:
 801b5e0:	b538      	push	{r3, r4, r5, lr}
 801b5e2:	690b      	ldr	r3, [r1, #16]
 801b5e4:	4605      	mov	r5, r0
 801b5e6:	460c      	mov	r4, r1
 801b5e8:	b913      	cbnz	r3, 801b5f0 <_fflush_r+0x10>
 801b5ea:	2500      	movs	r5, #0
 801b5ec:	4628      	mov	r0, r5
 801b5ee:	bd38      	pop	{r3, r4, r5, pc}
 801b5f0:	b118      	cbz	r0, 801b5fa <_fflush_r+0x1a>
 801b5f2:	6983      	ldr	r3, [r0, #24]
 801b5f4:	b90b      	cbnz	r3, 801b5fa <_fflush_r+0x1a>
 801b5f6:	f7ff fa4b 	bl	801aa90 <__sinit>
 801b5fa:	4b14      	ldr	r3, [pc, #80]	; (801b64c <_fflush_r+0x6c>)
 801b5fc:	429c      	cmp	r4, r3
 801b5fe:	d11b      	bne.n	801b638 <_fflush_r+0x58>
 801b600:	686c      	ldr	r4, [r5, #4]
 801b602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b606:	2b00      	cmp	r3, #0
 801b608:	d0ef      	beq.n	801b5ea <_fflush_r+0xa>
 801b60a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b60c:	07d0      	lsls	r0, r2, #31
 801b60e:	d404      	bmi.n	801b61a <_fflush_r+0x3a>
 801b610:	0599      	lsls	r1, r3, #22
 801b612:	d402      	bmi.n	801b61a <_fflush_r+0x3a>
 801b614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b616:	f7ff faeb 	bl	801abf0 <__retarget_lock_acquire_recursive>
 801b61a:	4628      	mov	r0, r5
 801b61c:	4621      	mov	r1, r4
 801b61e:	f7ff ff59 	bl	801b4d4 <__sflush_r>
 801b622:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b624:	07da      	lsls	r2, r3, #31
 801b626:	4605      	mov	r5, r0
 801b628:	d4e0      	bmi.n	801b5ec <_fflush_r+0xc>
 801b62a:	89a3      	ldrh	r3, [r4, #12]
 801b62c:	059b      	lsls	r3, r3, #22
 801b62e:	d4dd      	bmi.n	801b5ec <_fflush_r+0xc>
 801b630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b632:	f7ff fade 	bl	801abf2 <__retarget_lock_release_recursive>
 801b636:	e7d9      	b.n	801b5ec <_fflush_r+0xc>
 801b638:	4b05      	ldr	r3, [pc, #20]	; (801b650 <_fflush_r+0x70>)
 801b63a:	429c      	cmp	r4, r3
 801b63c:	d101      	bne.n	801b642 <_fflush_r+0x62>
 801b63e:	68ac      	ldr	r4, [r5, #8]
 801b640:	e7df      	b.n	801b602 <_fflush_r+0x22>
 801b642:	4b04      	ldr	r3, [pc, #16]	; (801b654 <_fflush_r+0x74>)
 801b644:	429c      	cmp	r4, r3
 801b646:	bf08      	it	eq
 801b648:	68ec      	ldreq	r4, [r5, #12]
 801b64a:	e7da      	b.n	801b602 <_fflush_r+0x22>
 801b64c:	08095410 	.word	0x08095410
 801b650:	08095430 	.word	0x08095430
 801b654:	080953f0 	.word	0x080953f0

0801b658 <_lseek_r>:
 801b658:	b538      	push	{r3, r4, r5, lr}
 801b65a:	4d07      	ldr	r5, [pc, #28]	; (801b678 <_lseek_r+0x20>)
 801b65c:	4604      	mov	r4, r0
 801b65e:	4608      	mov	r0, r1
 801b660:	4611      	mov	r1, r2
 801b662:	2200      	movs	r2, #0
 801b664:	602a      	str	r2, [r5, #0]
 801b666:	461a      	mov	r2, r3
 801b668:	f7e6 f892 	bl	8001790 <_lseek>
 801b66c:	1c43      	adds	r3, r0, #1
 801b66e:	d102      	bne.n	801b676 <_lseek_r+0x1e>
 801b670:	682b      	ldr	r3, [r5, #0]
 801b672:	b103      	cbz	r3, 801b676 <_lseek_r+0x1e>
 801b674:	6023      	str	r3, [r4, #0]
 801b676:	bd38      	pop	{r3, r4, r5, pc}
 801b678:	2000e378 	.word	0x2000e378

0801b67c <__swhatbuf_r>:
 801b67c:	b570      	push	{r4, r5, r6, lr}
 801b67e:	460e      	mov	r6, r1
 801b680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b684:	2900      	cmp	r1, #0
 801b686:	b096      	sub	sp, #88	; 0x58
 801b688:	4614      	mov	r4, r2
 801b68a:	461d      	mov	r5, r3
 801b68c:	da07      	bge.n	801b69e <__swhatbuf_r+0x22>
 801b68e:	2300      	movs	r3, #0
 801b690:	602b      	str	r3, [r5, #0]
 801b692:	89b3      	ldrh	r3, [r6, #12]
 801b694:	061a      	lsls	r2, r3, #24
 801b696:	d410      	bmi.n	801b6ba <__swhatbuf_r+0x3e>
 801b698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b69c:	e00e      	b.n	801b6bc <__swhatbuf_r+0x40>
 801b69e:	466a      	mov	r2, sp
 801b6a0:	f000 f8a6 	bl	801b7f0 <_fstat_r>
 801b6a4:	2800      	cmp	r0, #0
 801b6a6:	dbf2      	blt.n	801b68e <__swhatbuf_r+0x12>
 801b6a8:	9a01      	ldr	r2, [sp, #4]
 801b6aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b6ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b6b2:	425a      	negs	r2, r3
 801b6b4:	415a      	adcs	r2, r3
 801b6b6:	602a      	str	r2, [r5, #0]
 801b6b8:	e7ee      	b.n	801b698 <__swhatbuf_r+0x1c>
 801b6ba:	2340      	movs	r3, #64	; 0x40
 801b6bc:	2000      	movs	r0, #0
 801b6be:	6023      	str	r3, [r4, #0]
 801b6c0:	b016      	add	sp, #88	; 0x58
 801b6c2:	bd70      	pop	{r4, r5, r6, pc}

0801b6c4 <__smakebuf_r>:
 801b6c4:	898b      	ldrh	r3, [r1, #12]
 801b6c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b6c8:	079d      	lsls	r5, r3, #30
 801b6ca:	4606      	mov	r6, r0
 801b6cc:	460c      	mov	r4, r1
 801b6ce:	d507      	bpl.n	801b6e0 <__smakebuf_r+0x1c>
 801b6d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b6d4:	6023      	str	r3, [r4, #0]
 801b6d6:	6123      	str	r3, [r4, #16]
 801b6d8:	2301      	movs	r3, #1
 801b6da:	6163      	str	r3, [r4, #20]
 801b6dc:	b002      	add	sp, #8
 801b6de:	bd70      	pop	{r4, r5, r6, pc}
 801b6e0:	ab01      	add	r3, sp, #4
 801b6e2:	466a      	mov	r2, sp
 801b6e4:	f7ff ffca 	bl	801b67c <__swhatbuf_r>
 801b6e8:	9900      	ldr	r1, [sp, #0]
 801b6ea:	4605      	mov	r5, r0
 801b6ec:	4630      	mov	r0, r6
 801b6ee:	f7ff f881 	bl	801a7f4 <_malloc_r>
 801b6f2:	b948      	cbnz	r0, 801b708 <__smakebuf_r+0x44>
 801b6f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b6f8:	059a      	lsls	r2, r3, #22
 801b6fa:	d4ef      	bmi.n	801b6dc <__smakebuf_r+0x18>
 801b6fc:	f023 0303 	bic.w	r3, r3, #3
 801b700:	f043 0302 	orr.w	r3, r3, #2
 801b704:	81a3      	strh	r3, [r4, #12]
 801b706:	e7e3      	b.n	801b6d0 <__smakebuf_r+0xc>
 801b708:	4b0d      	ldr	r3, [pc, #52]	; (801b740 <__smakebuf_r+0x7c>)
 801b70a:	62b3      	str	r3, [r6, #40]	; 0x28
 801b70c:	89a3      	ldrh	r3, [r4, #12]
 801b70e:	6020      	str	r0, [r4, #0]
 801b710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b714:	81a3      	strh	r3, [r4, #12]
 801b716:	9b00      	ldr	r3, [sp, #0]
 801b718:	6163      	str	r3, [r4, #20]
 801b71a:	9b01      	ldr	r3, [sp, #4]
 801b71c:	6120      	str	r0, [r4, #16]
 801b71e:	b15b      	cbz	r3, 801b738 <__smakebuf_r+0x74>
 801b720:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b724:	4630      	mov	r0, r6
 801b726:	f000 f875 	bl	801b814 <_isatty_r>
 801b72a:	b128      	cbz	r0, 801b738 <__smakebuf_r+0x74>
 801b72c:	89a3      	ldrh	r3, [r4, #12]
 801b72e:	f023 0303 	bic.w	r3, r3, #3
 801b732:	f043 0301 	orr.w	r3, r3, #1
 801b736:	81a3      	strh	r3, [r4, #12]
 801b738:	89a0      	ldrh	r0, [r4, #12]
 801b73a:	4305      	orrs	r5, r0
 801b73c:	81a5      	strh	r5, [r4, #12]
 801b73e:	e7cd      	b.n	801b6dc <__smakebuf_r+0x18>
 801b740:	0801aa29 	.word	0x0801aa29

0801b744 <_read_r>:
 801b744:	b538      	push	{r3, r4, r5, lr}
 801b746:	4d07      	ldr	r5, [pc, #28]	; (801b764 <_read_r+0x20>)
 801b748:	4604      	mov	r4, r0
 801b74a:	4608      	mov	r0, r1
 801b74c:	4611      	mov	r1, r2
 801b74e:	2200      	movs	r2, #0
 801b750:	602a      	str	r2, [r5, #0]
 801b752:	461a      	mov	r2, r3
 801b754:	f7e5 ffbc 	bl	80016d0 <_read>
 801b758:	1c43      	adds	r3, r0, #1
 801b75a:	d102      	bne.n	801b762 <_read_r+0x1e>
 801b75c:	682b      	ldr	r3, [r5, #0]
 801b75e:	b103      	cbz	r3, 801b762 <_read_r+0x1e>
 801b760:	6023      	str	r3, [r4, #0]
 801b762:	bd38      	pop	{r3, r4, r5, pc}
 801b764:	2000e378 	.word	0x2000e378

0801b768 <_raise_r>:
 801b768:	291f      	cmp	r1, #31
 801b76a:	b538      	push	{r3, r4, r5, lr}
 801b76c:	4604      	mov	r4, r0
 801b76e:	460d      	mov	r5, r1
 801b770:	d904      	bls.n	801b77c <_raise_r+0x14>
 801b772:	2316      	movs	r3, #22
 801b774:	6003      	str	r3, [r0, #0]
 801b776:	f04f 30ff 	mov.w	r0, #4294967295
 801b77a:	bd38      	pop	{r3, r4, r5, pc}
 801b77c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b77e:	b112      	cbz	r2, 801b786 <_raise_r+0x1e>
 801b780:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b784:	b94b      	cbnz	r3, 801b79a <_raise_r+0x32>
 801b786:	4620      	mov	r0, r4
 801b788:	f000 f830 	bl	801b7ec <_getpid_r>
 801b78c:	462a      	mov	r2, r5
 801b78e:	4601      	mov	r1, r0
 801b790:	4620      	mov	r0, r4
 801b792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b796:	f000 b817 	b.w	801b7c8 <_kill_r>
 801b79a:	2b01      	cmp	r3, #1
 801b79c:	d00a      	beq.n	801b7b4 <_raise_r+0x4c>
 801b79e:	1c59      	adds	r1, r3, #1
 801b7a0:	d103      	bne.n	801b7aa <_raise_r+0x42>
 801b7a2:	2316      	movs	r3, #22
 801b7a4:	6003      	str	r3, [r0, #0]
 801b7a6:	2001      	movs	r0, #1
 801b7a8:	e7e7      	b.n	801b77a <_raise_r+0x12>
 801b7aa:	2400      	movs	r4, #0
 801b7ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b7b0:	4628      	mov	r0, r5
 801b7b2:	4798      	blx	r3
 801b7b4:	2000      	movs	r0, #0
 801b7b6:	e7e0      	b.n	801b77a <_raise_r+0x12>

0801b7b8 <raise>:
 801b7b8:	4b02      	ldr	r3, [pc, #8]	; (801b7c4 <raise+0xc>)
 801b7ba:	4601      	mov	r1, r0
 801b7bc:	6818      	ldr	r0, [r3, #0]
 801b7be:	f7ff bfd3 	b.w	801b768 <_raise_r>
 801b7c2:	bf00      	nop
 801b7c4:	20000050 	.word	0x20000050

0801b7c8 <_kill_r>:
 801b7c8:	b538      	push	{r3, r4, r5, lr}
 801b7ca:	4d07      	ldr	r5, [pc, #28]	; (801b7e8 <_kill_r+0x20>)
 801b7cc:	2300      	movs	r3, #0
 801b7ce:	4604      	mov	r4, r0
 801b7d0:	4608      	mov	r0, r1
 801b7d2:	4611      	mov	r1, r2
 801b7d4:	602b      	str	r3, [r5, #0]
 801b7d6:	f7e5 ff5f 	bl	8001698 <_kill>
 801b7da:	1c43      	adds	r3, r0, #1
 801b7dc:	d102      	bne.n	801b7e4 <_kill_r+0x1c>
 801b7de:	682b      	ldr	r3, [r5, #0]
 801b7e0:	b103      	cbz	r3, 801b7e4 <_kill_r+0x1c>
 801b7e2:	6023      	str	r3, [r4, #0]
 801b7e4:	bd38      	pop	{r3, r4, r5, pc}
 801b7e6:	bf00      	nop
 801b7e8:	2000e378 	.word	0x2000e378

0801b7ec <_getpid_r>:
 801b7ec:	f7e5 bf4c 	b.w	8001688 <_getpid>

0801b7f0 <_fstat_r>:
 801b7f0:	b538      	push	{r3, r4, r5, lr}
 801b7f2:	4d07      	ldr	r5, [pc, #28]	; (801b810 <_fstat_r+0x20>)
 801b7f4:	2300      	movs	r3, #0
 801b7f6:	4604      	mov	r4, r0
 801b7f8:	4608      	mov	r0, r1
 801b7fa:	4611      	mov	r1, r2
 801b7fc:	602b      	str	r3, [r5, #0]
 801b7fe:	f7e5 ffac 	bl	800175a <_fstat>
 801b802:	1c43      	adds	r3, r0, #1
 801b804:	d102      	bne.n	801b80c <_fstat_r+0x1c>
 801b806:	682b      	ldr	r3, [r5, #0]
 801b808:	b103      	cbz	r3, 801b80c <_fstat_r+0x1c>
 801b80a:	6023      	str	r3, [r4, #0]
 801b80c:	bd38      	pop	{r3, r4, r5, pc}
 801b80e:	bf00      	nop
 801b810:	2000e378 	.word	0x2000e378

0801b814 <_isatty_r>:
 801b814:	b538      	push	{r3, r4, r5, lr}
 801b816:	4d06      	ldr	r5, [pc, #24]	; (801b830 <_isatty_r+0x1c>)
 801b818:	2300      	movs	r3, #0
 801b81a:	4604      	mov	r4, r0
 801b81c:	4608      	mov	r0, r1
 801b81e:	602b      	str	r3, [r5, #0]
 801b820:	f7e5 ffab 	bl	800177a <_isatty>
 801b824:	1c43      	adds	r3, r0, #1
 801b826:	d102      	bne.n	801b82e <_isatty_r+0x1a>
 801b828:	682b      	ldr	r3, [r5, #0]
 801b82a:	b103      	cbz	r3, 801b82e <_isatty_r+0x1a>
 801b82c:	6023      	str	r3, [r4, #0]
 801b82e:	bd38      	pop	{r3, r4, r5, pc}
 801b830:	2000e378 	.word	0x2000e378

0801b834 <_init>:
 801b834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b836:	bf00      	nop
 801b838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b83a:	bc08      	pop	{r3}
 801b83c:	469e      	mov	lr, r3
 801b83e:	4770      	bx	lr

0801b840 <_fini>:
 801b840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b842:	bf00      	nop
 801b844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b846:	bc08      	pop	{r3}
 801b848:	469e      	mov	lr, r3
 801b84a:	4770      	bx	lr
